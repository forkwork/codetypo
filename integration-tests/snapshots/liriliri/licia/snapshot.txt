
Repository: liriliri/licia
Url: "https://github.com/liriliri/licia.git"
Args: ["**/*.*"]
Lines:
 Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
 exit code: 1
-------------------------------------------
-------------------------------------------
CodeTypo: Files checked: 1433, Issues found: 7623 in 740 files with 4 errors.
DOC.md:10013:46  - Unknown word (omitted)       -- given name. If name is omitted, all pairs will be return
DOC.md:1001:20   - Unknown word (same)             -- Create a accessor, same as calling both setter
DOC.md:1001:36   - Unknown word (both)             -- accessor, same as calling both setter and getter.
DOC.md:10029:2   - Unknown word (metas)         -- |metas|Object of name content
DOC.md:10033:8   - Unknown word (metas)        -- Remove metas.
DOC.md:10099:22  - Unknown word (most)         -- It contains only the most common file types.
DOC.md:10099:4   - Unknown word (contains)     -- It contains only the most common
DOC.md:100:67    - Unknown word (matched)      -- element in the set of matched elements.
DOC.md:10110:5   - Unknown word (minimum)      -- Get minimum value of given numbers
DOC.md:10124:9   - Unknown word (Minimum)      -- |return|Minimum value       |
DOC.md:10132:1   - Unknown word (Recursively)  -- Recursively create directories.
DOC.md:10139:32  - Unknown word (mode)         -- function sync(dir: string, mode?: number): void;
DOC.md:10143:5   - Unknown word (mode)         -- mode?: number,
DOC.md:10154:2   - Unknown word (mode)         -- |mode=0777|Directory mode
DOC.md:10164:23  - Unknown word (Done)         -- else console.log('Done');
DOC.md:10171:1   - Unknown word (Tiny)         -- Tiny moment.js like implementation
DOC.md:1017:7    - Unknown word (delegator)        -- const delegator = new Delegator(host
DOC.md:10182:11  - Unknown word (Leap)         -- isLeapYear(): boolean;
DOC.md:10183:11  - Unknown word (Same)         -- isSame(that: M): boolean;
DOC.md:10185:11  - Unknown word (Before)       -- isBefore(that: M): boolean;
DOC.md:1018:1    - Unknown word (delegator)        -- delegator
DOC.md:10193:9   - Unknown word (hour)         -- hour(): number;
DOC.md:10197:9   - Unknown word (second)       -- second(): number;
DOC.md:10198:9   - Unknown word (second)       -- second(number): M;
DOC.md:10199:9   - Unknown word (millisecond)  -- millisecond(): number;
DOC.md:10200:9   - Unknown word (millisecond)  -- millisecond(number): M;
DOC.md:10212:9   - Unknown word (days)         -- daysInMonth(): number;
DOC.md:10214:9   - Unknown word (subtract)     -- subtract(num: number, unit: string
DOC.md:10223:9   - Unknown word (supports)     -- It only supports a subset of moment.js
DOC.md:10227:32  - Unknown word (Same)         -- isValid, isLeapYear, isSame, isBefore, isAfter,
DOC.md:10227:40  - Unknown word (Before)       -- isLeapYear, isSame, isBefore, isAfter, year,
DOC.md:10228:28  - Unknown word (second)       -- date, hour, minute, second, millisecond, unix,
DOC.md:10228:36  - Unknown word (millisecond)  -- hour, minute, second, millisecond, unix, clone,
DOC.md:10230:22  - Unknown word (subtract)     -- startOf, endOf, add, subtract, diff
DOC.md:10234:23  - Unknown word (quarter)      -- locale and units like quarter and week.
DOC.md:10236:14  - Unknown word (uses)         -- Note: Format uses dateFormat module, so
DOC.md:10236:57  - Unknown word (quite)        -- so the mask is not quite the same as moment.js
DOC.md:10236:67  - Unknown word (same)         -- mask is not quite the same as moment.js.
DOC.md:10242:4   - Unknown word (morph)        -- ## morphDom
DOC.md:10244:1   - Unknown word (Morph)        -- Morph a dom tree to match
DOC.md:10250:10  - Unknown word (morph)        -- function morphDom(from: Node, to: Node
DOC.md:10257:17  - Unknown word (morph)        -- |from |Node to morph |
DOC.md:10258:20  - Unknown word (morphed)      -- |to |Node to be morphed|
DOC.md:10259:9   - Unknown word (Morphed)      -- |return|Morphed node      |
DOC.md:10266:1   - Unknown word (morph)        -- morphDom(el1, el2);
DOC.md:10270:4   - Unknown word (morse)        -- ## morse
DOC.md:10272:1   - Unknown word (Morse)        -- Morse code encoding and decoding
DOC.md:10272:25  - Unknown word (decoding)     -- Morse code encoding and decoding.
DOC.md:10278:7   - Unknown word (morse)        -- const morse: {
DOC.md:10280:12  - Unknown word (morse)        -- decode(morse: string): string;
DOC.md:10288:16  - Unknown word (Morse)        -- Turn text into Morse code.
DOC.md:10293:9   - Unknown word (Morse)        -- |return|Morse code    |
DOC.md:10297:8   - Unknown word (Morse)        -- Decode Morse code into text.
DOC.md:10301:2   - Unknown word (morse)        -- |morse |Morse code    |
DOC.md:10301:9   - Unknown word (Morse)        -- |morse |Morse code    |
DOC.md:10302:9   - Unknown word (Decoded)      -- |return|Decoded string|
DOC.md:10305:13  - Unknown word (morse)        -- const str = morse.encode('Hello, world
DOC.md:10312:21  - Unknown word (formats)      -- Convert time string formats to milliseconds.
DOC.md:10312:32  - Unknown word (milliseconds) -- time string formats to milliseconds.
DOC.md:10324:23  - Unknown word (milliseconds) -- Turn time string into milliseconds.
DOC.md:10329:9   - Unknown word (Milliseconds) -- |return|Milliseconds |
DOC.md:1032:4    - Unknown word (Dispatcher)       -- ## Dispatcher
DOC.md:10335:9   - Unknown word (Milliseconds) -- |num |Milliseconds |
DOC.md:1034:6    - Unknown word (dispatcher)       -- Flux dispatcher.
DOC.md:10360:9   - Unknown word (comparator)   -- comparator(a: any, b: any): number
DOC.md:10379:4   - Unknown word (negate)       -- ## negate
DOC.md:10381:24  - Unknown word (negates)      -- Create a function that negates the result of the predicate
DOC.md:10387:10  - Unknown word (negate)       -- function negate<T extends types.AnyFn
DOC.md:10394:25  - Unknown word (negate)       -- predicate|Predicate to negate|
DOC.md:10398:10  - Unknown word (even)         -- function even(n) {
DOC.md:10401:27  - Unknown word (negate)       -- 3, 4, 5, 6].filter(negate(even)); // -> [1, 3
DOC.md:10401:34  - Unknown word (even)         -- 5, 6].filter(negate(even)); // -> [1, 3, 5]
DOC.md:10404:8   - Unknown word (Tick)         -- ## nextTick
DOC.md:10406:15  - Unknown word (both)         -- Next tick for both node and browser.
DOC.md:10406:6   - Unknown word (tick)         -- Next tick for both node and browser
DOC.md:1040:7    - Unknown word (Dispatcher)       -- class Dispatcher {
DOC.md:10412:14  - Unknown word (Tick)         -- function nextTick(cb: types.AnyFn): void
DOC.md:10419:19  - Unknown word (call)         -- |cb |Function to call|
DOC.md:1041:14   - Unknown word (payload)          -- dispatch(payload: any);
DOC.md:1041:5    - Unknown word (dispatch)         -- dispatch(payload: any);
DOC.md:10421:17  - Unknown word (Tick)         -- Use process.nextTick if available.
DOC.md:10423:1   - Unknown word (Otherwise)    -- Otherwise setImmediate or setTimeout
DOC.md:10423:14  - Unknown word (Immediate)    -- Otherwise setImmediate or setTimeout is used
DOC.md:10423:30  - Unknown word (Timeout)      -- Otherwise setImmediate or setTimeout is used as fallback
DOC.md:10423:49  - Unknown word (fallback)     -- setTimeout is used as fallback.
DOC.md:10426:5   - Unknown word (Tick)         -- nextTick(function() {
DOC.md:10445:12  - Unknown word (Does)         -- noop(); // Does nothing
DOC.md:10445:17  - Unknown word (nothing)      -- noop(); // Does nothing
DOC.md:1045:7    - Unknown word (Dispatching)      -- isDispatching(): boolean;
DOC.md:10464:9   - Unknown word (Normalized)   -- |return|Normalized header  |
DOC.md:10473:21  - Unknown word (slashes)      -- Normalize file path slashes.
DOC.md:10487:9   - Unknown word (Normalized)   -- |return|Normalized path  |
DOC.md:104:22    - Unknown word (manipulate)   -- element|Elements to manipulate |
DOC.md:10505:9   - Unknown word (country)      -- countryCode: number;
DOC.md:10506:9   - Unknown word (trunk)        -- trunkPrefix?: boolean;
DOC.md:10517:10  - Unknown word (Normalized)   -- |return |Normalized phone  |
DOC.md:10523:2   - Unknown word (country)      -- |countryCode |Country code
DOC.md:10523:20  - Unknown word (Country)      -- |countryCode |Country code
DOC.md:10524:2   - Unknown word (trunk)        -- |trunkPrefix=false|True if
DOC.md:10524:45  - Unknown word (trunk)        -- if local format has trunk prefix|
DOC.md:10528:5   - Unknown word (country)      -- countryCode: 86
DOC.md:10531:5   - Unknown word (country)      -- countryCode: 1
DOC.md:10534:5   - Unknown word (country)      -- countryCode: 44,
DOC.md:10535:5   - Unknown word (trunk)        -- trunkPrefix: true
DOC.md:10541:1   - Unknown word (Wrapper)      -- Wrapper for the Web Notifications
DOC.md:1054:24   - Unknown word (Dispatcher)       -- const dispatcher = new Dispatcher();
DOC.md:1054:7    - Unknown word (dispatcher)       -- const dispatcher = new Dispatcher();
DOC.md:10563:14  - Unknown word (exactly)      -- You can pass exactly the same options supported
DOC.md:10567:34  - Unknown word (certain)      -- create instance when certain events like close, show
DOC.md:10567:82  - Unknown word (needed)       -- show, click or error needed to be handled.
DOC.md:10567:95  - Unknown word (handled)      -- or error needed to be handled.
DOC.md:1056:1    - Unknown word (dispatcher)       -- dispatcher.register(function(payload
DOC.md:1056:30   - Unknown word (payload)          -- dispatcher.register(function(payload) {
DOC.md:10583:1   - Unknown word (Gets)         -- Gets the number of milliseconds
DOC.md:10583:38  - Unknown word (have)         -- of milliseconds that have elapsed since the Unix
DOC.md:10583:43  - Unknown word (elapsed)      -- milliseconds that have elapsed since the Unix epoch
DOC.md:10583:51  - Unknown word (since)        -- illiseconds that have elapsed since the Unix epoch.
DOC.md:10583:66  - Unknown word (epoch)        -- elapsed since the Unix epoch.
DOC.md:1058:9    - Unknown word (payload)          -- payload.actionType
DOC.md:1059:15   - Unknown word (something)        -- // Do something
DOC.md:10614:16  - Unknown word (representation) -- |return|String representation of given value|
DOC.md:10622:1   - Unknown word (Opposite)       -- Opposite of pick.
DOC.md:10640:9   - Unknown word (Filtered)       -- |return|Filtered object|
DOC.md:1064:1    - Unknown word (dispatcher)       -- dispatcher.dispatch({
DOC.md:1064:12   - Unknown word (dispatch)         -- dispatcher.dispatch({
DOC.md:10652:24  - Unknown word (invokes)        -- Create a function that invokes once.
DOC.md:10665:21  - Unknown word (restrict)       -- |fn |Function to restrict |
DOC.md:10666:13  - Unknown word (restricted)     -- |return|New restricted function|
DOC.md:10699:11  - Unknown word (dialog)         -- Open file dialog to select file in browser
DOC.md:1069:4    - Unknown word (Emitter)          -- ## Emitter
DOC.md:10707:5   - Unknown word (multiple)       -- multiple?: boolean;
DOC.md:10715:10  - Unknown word (Dialog)         -- |options|Dialog options|
DOC.md:1071:27   - Unknown word (provides)        -- emitter class which provides observer pattern.
DOC.md:1071:36   - Unknown word (observer)        -- class which provides observer pattern.
DOC.md:1071:7    - Unknown word (emitter)         -- Event emitter class which provides
DOC.md:10723:2   - Unknown word (multiple)       -- |multiple=false|Select multiple
DOC.md:10723:24  - Unknown word (multiple)       -- multiple=false|Select multiple files or not|
DOC.md:10731:4   - Unknown word (optimize)       -- ## optimizeCb
DOC.md:10733:27  - Unknown word (binding)        -- for function context binding.
DOC.md:10739:10  - Unknown word (optimize)       -- function optimizeCb(
DOC.md:10748:4   - Unknown word (ordinal)        -- ## ordinal
DOC.md:10750:13  - Unknown word (indicator)      -- Add ordinal indicator to number.
DOC.md:10750:5   - Unknown word (ordinal)        -- Add ordinal indicator to number
DOC.md:10756:10  - Unknown word (ordinal)        -- function ordinal(num: number): string
DOC.md:10763:23  - Unknown word (indicator)      -- num |Number to add indicator|
DOC.md:10764:16  - Unknown word (ordinal)        -- |return|Result ordinal number  |
DOC.md:10773:1   - Unknown word (Screen)         -- Screen orientation helper.
DOC.md:10773:20  - Unknown word (helper)         -- Screen orientation helper.
DOC.md:1077:7    - Unknown word (Emitter)         -- class Emitter {
DOC.md:1078:47   - Unknown word (Emitter)         -- listener: types.AnyFn): Emitter;
DOC.md:10791:1   - Unknown word (Bind)           -- Bind change event.
DOC.md:10795:1   - Unknown word (Unbind)         -- Unbind change event.
DOC.md:10799:25  - Unknown word (landscape)      -- current orientation(landscape or portrait).
DOC.md:10799:38  - Unknown word (portrait)       -- orientation(landscape or portrait).
DOC.md:1079:48   - Unknown word (Emitter)         -- listener: types.AnyFn): Emitter;
DOC.md:10803:36  - Unknown word (portrait)       -- log(direction); // -> 'portrait'
DOC.md:10805:27  - Unknown word (landscape)      -- orientation.get(); // -> 'landscape'
DOC.md:10810:34  - Unknown word (sides)          -- on the left and right sides if it's shorter than
DOC.md:10810:48  - Unknown word (shorter)        -- right sides if it's shorter than length.
DOC.md:1081:5    - Unknown word (emit)            -- emit(event: string, ...args
DOC.md:10824:9   - Unknown word (Padding)        -- |len |Padding length        |
DOC.md:10825:24  - Unknown word (padding)        -- chars |String used as padding|
DOC.md:10832:29  - Unknown word (babca)          -- abc', 5, 'ab'); // -> 'babca'
DOC.md:10833:28  - Unknown word (ababa)          -- ab', 5, 'ab'); // -> 'ababa'
DOC.md:10880:16  - Unknown word (Timeout)        -- setTimeout(function() {
DOC.md:10885:16  - Unknown word (Timeout)        -- setTimeout(function() {
DOC.md:10898:20  - Unknown word (argument)       -- Parse command line argument options, the same as
DOC.md:108:12    - Unknown word (more)         -- Set one or more attributes for the set
DOC.md:108:43    - Unknown word (matched)      -- attributes for the set of matched elements.
DOC.md:10908:9   - Unknown word (shorthands)     -- shorthands: any;
DOC.md:10917:10  - Unknown word (Argument)       -- |args |Argument array |
DOC.md:1091:1    - Unknown word (Bind)            -- Bind event.
DOC.md:10926:2   - Unknown word (shorthands)     -- |shorthands|option shorthands|
DOC.md:10926:20  - Unknown word (shorthands)     -- |shorthands|option shorthands|
DOC.md:10934:5   - Unknown word (shorthands)     -- shorthands: {
DOC.md:10939:8   - Unknown word (remain)         -- // -> {remain: ['eustia'], output
DOC.md:10952:5   - Unknown word (handlers)       -- handlers: {
DOC.md:10953:43  - Unknown word (unary)          -- string, attrs: any, unary: boolean) => void;
DOC.md:1095:1    - Unknown word (Unbind)          -- Unbind event.
DOC.md:10966:10  - Unknown word (Handlers)       -- |handler|Handlers |
DOC.md:10970:25  - Unknown word (unary)          -- start: (tag, attrs, unary) => {},
DOC.md:10977:4   - Unknown word (partial)        -- ## partial
DOC.md:10979:1   - Unknown word (Partially)      -- Partially apply a function by
DOC.md:10979:31  - Unknown word (filling)        -- apply a function by filling in given arguments.
DOC.md:10985:10  - Unknown word (partial)        -- function partial(
DOC.md:10987:8   - Unknown word (partials)       -- ...partials: any[]
DOC.md:10995:26  - Unknown word (partially)      -- |Function to partially apply arguments to|
DOC.md:10996:30  - Unknown word (partially)      -- partials|Arguments to be partially applied       |
DOC.md:10996:5   - Unknown word (partials)       -- |...partials|Arguments to be partially
DOC.md:10997:18  - Unknown word (partially)      -- |return |New partially applied function
DOC.md:1099:1    - Unknown word (Bind)            -- Bind event that trigger once
DOC.md:1099:12   - Unknown word (that)            -- Bind event that trigger once.
DOC.md:11000:14  - Unknown word (partial)        -- const sub5 = partial(function(a, b) {
DOC.md:11022:16  - Unknown word (cased)          -- |return|Pascal cased string|
DOC.md:11033:28  - Unknown word (microsecond)    -- resolution time up to microsecond precision.
DOC.md:11054:10  - Unknown word (filtered)       -- Return a filtered copy of an object.
DOC.md:1106:5    - Unknown word (emit)            -- ### emit
DOC.md:11072:9   - Unknown word (Filtered)       -- |return|Filtered object|
DOC.md:11082:4   - Unknown word (pipe)           -- ## pipe
DOC.md:11084:1   - Unknown word (Pipe)           -- Pipe all streams together
DOC.md:11084:18  - Unknown word (together)       -- Pipe all streams together.
DOC.md:1108:1    - Unknown word (Emit)            -- Emit event.
DOC.md:11091:10  - Unknown word (pipe)           -- function pipe(...streams: stream.Stream
DOC.md:11098:24  - Unknown word (pipe)           -- .streams|Streams to pipe|
DOC.md:11103:1   - Unknown word (pipe)           -- pipe(
DOC.md:11113:4   - Unknown word (pluck)          -- ## pluck
DOC.md:11115:1   - Unknown word (Extract)        -- Extract a list of property values
DOC.md:11121:10  - Unknown word (pluck)          -- function pluck(object: any, key: string
DOC.md:11130:22  - Unknown word (specified)      -- return|New array of specified property|
DOC.md:11133:7   - Unknown word (stooges)        -- const stooges = [
DOC.md:11135:14  - Unknown word (larry)          -- { name: 'larry', age: 50 },
DOC.md:11136:14  - Unknown word (curly)          -- { name: 'curly', age: 60 }
DOC.md:11138:1   - Unknown word (pluck)          -- pluck(stooges, 'name'); /
DOC.md:11138:40  - Unknown word (larry)         -- name'); // -> ['moe', 'larry', 'curly']
DOC.md:11138:49  - Unknown word (curly)         -- > ['moe', 'larry', 'curly']
DOC.md:11138:7   - Unknown word (stooges)       -- pluck(stooges, 'name'); // -> ['moe
DOC.md:1113:10   - Unknown word (Arguments)       -- |...args|Arguments passed to listener|
DOC.md:1113:20   - Unknown word (passed)          -- |...args|Arguments passed to listener|
DOC.md:11143:61  - Unknown word (fallback)      -- and mouse events as a fallback if not supported.
DOC.md:11160:30  - Unknown word (pointerdown)   -- pointerEvent('down'); // -> 'pointerdown' if supported
DOC.md:11165:1   - Unknown word (Find)          -- Find decimal precision of
DOC.md:11165:6   - Unknown word (decimal)       -- Find decimal precision of a given
DOC.md:11202:34  - Unknown word (possible)      -- link rel=prefetch>` if possible.
DOC.md:11202:4   - Unknown word (uses)          -- It uses `<link rel=prefetch
DOC.md:11210:12  - Unknown word (prefixes)      -- Add vendor prefixes to a CSS attribute.
DOC.md:11210:5   - Unknown word (vendor)        -- Add vendor prefixes to a CSS attribute
DOC.md:11227:9   - Unknown word (Prefixed)      -- |return|Prefixed property name|
DOC.md:11234:14  - Unknown word (emphasis)      -- prefix('text-emphasis'); // -> 'WebkitTextEmphasis
DOC.md:11234:43  - Unknown word (Emphasis)      -- ); // -> 'WebkitTextEmphasis'
DOC.md:11235:19  - Unknown word (emphasis)      -- prefix.dash('text-emphasis'); // -> '-webkit-text
DOC.md:11235:51  - Unknown word (emphasis)      -- // -> '-webkit-text-emphasis'
DOC.md:11241:39  - Unknown word (Promises)      -- based functions into Promises.
DOC.md:11249:5   - Unknown word (multi)         -- multiArgs?: boolean
DOC.md:11258:2   - Unknown word (multi)         -- |multiArgs=false|If callback
DOC.md:11261:34  - Unknown word (resulting)     -- is set to true, the resulting promise will always
DOC.md:11261:4   - Unknown word (multi)         -- If multiArgs is set to true,
DOC.md:11261:57  - Unknown word (always)        -- resulting promise will always fulfill with an array
DOC.md:11261:64  - Unknown word (fulfill)       -- promise will always fulfill with an array of the
DOC.md:11261:93  - Unknown word (callback's)    -- with an array of the callback's success values.
DOC.md:11274:29  - Unknown word (itself)        -- a function that will itself return the key property
DOC.md:112:22    - Unknown word (manipulate)   -- element|Elements to manipulate|
DOC.md:1136:7    - Unknown word (emit)            -- event.emit('test', 'licia'); /
DOC.md:11375:19  - Unknown word (native)        -- Use setTimeout if native requestAnimationFrame
DOC.md:11375:8   - Unknown word (Timeout)       -- Use setTimeout if native requestAnimationFra
DOC.md:11378:25  - Unknown word (tick)          -- const id = raf(function tick() {
DOC.md:11380:9   - Unknown word (tick)          -- raf(tick);
DOC.md:11387:1   - Unknown word (Produces)      -- Produces a random number between
DOC.md:11387:46  - Unknown word (inclusive)     -- between min and max(inclusive).
DOC.md:11404:17  - Unknown word (Minimum)       -- |min |Minimum possible value|
DOC.md:11404:25  - Unknown word (possible)      -- min |Minimum possible value|
DOC.md:11405:17  - Unknown word (Maximum)       -- |max |Maximum possible value|
DOC.md:11405:25  - Unknown word (possible)      -- max |Maximum possible value|
DOC.md:11428:58  - Unknown word (possible)      -- object in browser if possible.
DOC.md:1142:11   - Unknown word (implementation)  -- Enum type implementation.
DOC.md:11451:5   - Unknown word (lightness)     -- lightness?: number;
DOC.md:11470:13  - Unknown word (Lightness)     -- |lightness |Lightness, number between 0 and
DOC.md:11470:2   - Unknown word (lightness)     -- |lightness |Lightness, number between
DOC.md:11482:22  - Unknown word (similar)       -- A tiny id generator, similar to nanoid.
DOC.md:11482:3   - Unknown word (tiny)          -- A tiny id generator, similar
DOC.md:11488:34  - Unknown word (symbols)       -- randomId(size?: number, symbols?: string): string;
DOC.md:11496:10  - Unknown word (Symbols)       -- |symbols|Symbols used to generate ids
DOC.md:11496:2   - Unknown word (symbols)       -- |symbols|Symbols used to generate
DOC.md:11501:28  - Unknown word (cbbcb)         -- randomId(5, 'abc'); // -> 'cbbcb'
DOC.md:11520:18  - Unknown word (picked)        -- |return|Randomly picked item|
DOC.md:11520:9   - Unknown word (Randomly)      -- |return|Randomly picked item|
DOC.md:11528:17  - Unknown word (numbered)      -- Create flexibly-numbered lists of integers.
DOC.md:11528:8   - Unknown word (flexibly)      -- Create flexibly-numbered lists of integers
DOC.md:11547:18  - Unknown word (increment)     -- |step=1|Value to increment or decrement by|
DOC.md:11547:31  - Unknown word (decrement)     -- Value to increment or decrement by|
DOC.md:11557:5   - Unknown word (symmetric)     -- RC4 symmetric encryption implementation
DOC.md:11577:5   - Unknown word (decryption)    -- RC4 decryption, pass base64 string
DOC.md:11582:22  - Unknown word (encrypted)     -- str |String to be encrypted/decrypted|
DOC.md:11582:32  - Unknown word (decrypted)     -- String to be encrypted/decrypted|
DOC.md:11583:19  - Unknown word (decrypted)     -- |return|Encrypted/decrypted string      |
DOC.md:11583:9   - Unknown word (Encrypted)     -- |return|Encrypted/decrypted string
DOC.md:11592:36  - Unknown word (similar)       -- callback when dom is ready, similar to jQuery ready.
DOC.md:11609:36  - Unknown word (here)          -- safe to manipulate dom here.
DOC.md:1161:16   - Unknown word (strings)         -- |arr |Array of strings|
DOC.md:11623:21  - Unknown word (Memo)          -- iterator: types.MemoIterator<T, TResult>
DOC.md:11624:5   - Unknown word (memo)          -- memo?: TResult,
DOC.md:11629:21  - Unknown word (Memo)          -- iterator: types.MemoObjectIterator<T, TResult
DOC.md:11630:5   - Unknown word (memo)          -- memo?: TResult,
DOC.md:11641:2   - Unknown word (initial)       -- |initial |Initial value
DOC.md:11641:20  - Unknown word (Initial)       -- |initial |Initial value
DOC.md:11643:20  - Unknown word (Accumulated)   -- |return |Accumulated value             |
DOC.md:11657:7   - Unknown word (associative)   -- Right-associative version of reduce.
DOC.md:11665:21  - Unknown word (Memo)          -- iterator: types.MemoIterator<T, TResult>
DOC.md:11666:5   - Unknown word (memo)          -- memo?: TResult,
DOC.md:11685:1   - Unknown word (Opposite)      -- Opposite of filter.
DOC.md:1168:7    - Unknown word (importance)      -- const importance = new Enum([
DOC.md:1170:6    - Unknown word (TRIVIAL)         -- 'TRIVIAL',
DOC.md:11710:37  - Unknown word (didn't)        -- Array of all values that didn't pass predicate|
DOC.md:1171:6    - Unknown word (REGULAR)         -- 'REGULAR',
DOC.md:11720:93  - Unknown word (removed)       -- return an array of the removed elements.
DOC.md:1172:6    - Unknown word (IMPORTANT)       -- 'IMPORTANT',
DOC.md:11735:1   - Unknown word (Unlike)        -- Unlike filter, this method
DOC.md:11735:28  - Unknown word (mutates)       -- filter, this method mutates array.
DOC.md:11742:40  - Unknown word (removed)       -- all values that are removed|
DOC.md:11746:7   - Unknown word (evens)         -- const evens = remove(arr, function
DOC.md:11750:13  - Unknown word (evens)         -- console.log(evens); // -> [2, 4]
DOC.md:1176:13   - Unknown word (importance)      -- if (val === importance.CRITICAL) {
DOC.md:11770:9   - Unknown word (Repeated)      -- |return|Repeated string |
DOC.md:1177:11   - Unknown word (something)       -- // Do something.
DOC.md:11798:25  - Unknown word (replaced)      -- substr |String to be replaced |
DOC.md:11800:39  - Unknown word (replaced)      -- string with all substr replaced|
DOC.md:11803:25  - Unknown word (goodbye)      -- replaceAll('hello world goodbye world', 'world', 'licia
DOC.md:11803:79  - Unknown word (goodbye)      -- // -> 'hello licia goodbye licia'
DOC.md:11808:6   - Unknown word (accumulates)  -- This accumulates the arguments passed
DOC.md:11824:27  - Unknown word (needs)        -- function |Function that needs rest parameters
DOC.md:11825:32  - Unknown word (accumulates)  -- startIndex|The start index to accumulates |
DOC.md:11826:13  - Unknown word (Generated)    -- |return |Generated function with rest parameters
DOC.md:11835:4   - Unknown word (reverse)      -- ## reverse
DOC.md:11837:1   - Unknown word (Reverse)      -- Reverse array without mutating
DOC.md:11837:23  - Unknown word (mutating)     -- Reverse array without mutating it.
DOC.md:1183:1    - Unknown word (Binary)          -- Binary file storage.
DOC.md:11843:10  - Unknown word (reverse)      -- function reverse(arr: any[]): any[];
DOC.md:11851:9   - Unknown word (Reversed)     -- |return|Reversed array |
DOC.md:11854:1   - Unknown word (reverse)      -- reverse([1, 2, 3]); // -> [
DOC.md:11881:21  - Unknown word (Idle)         -- Shortcut for requestIdleCallback.
DOC.md:11895:26  - Unknown word (Idle)         -- setTimeout if requestIdleCallback is not supported
DOC.md:11899:15  - Unknown word (during)       -- // Called during a browser's idle periods
DOC.md:11899:34  - Unknown word (idle)         -- Called during a browser's idle periods
DOC.md:11899:39  - Unknown word (periods)      -- during a browser's idle periods
DOC.md:11899:8   - Unknown word (Called)       -- // Called during a browser's idle
DOC.md:1189:21   - Unknown word (extends)         -- class FileBlobStore extends Emitter {
DOC.md:118:25    - Unknown word (manipulate)   -- element |Elements to manipulate |
DOC.md:11906:1   - Unknown word (Loop)         -- Loop through all possible
DOC.md:11927:1   - Unknown word (Recursively)  -- Recursively remove directories.
DOC.md:11946:23  - Unknown word (Done)         -- else console.log('Done');
DOC.md:11963:4   - Unknown word (rpad)         -- ## rpad
DOC.md:11965:38  - Unknown word (shorter)      -- the right side if it's shorter than length.
DOC.md:11971:10  - Unknown word (rpad)         -- function rpad(str: string, len: number
DOC.md:11979:9   - Unknown word (Padding)      -- |len |Padding length        |
DOC.md:11980:24  - Unknown word (padding)      -- chars |String used as padding|
DOC.md:11984:1   - Unknown word (rpad)         -- rpad('a', 5); // -> 'a
DOC.md:11985:1   - Unknown word (rpad)         -- rpad('a', 5, '-'); // ->
DOC.md:11986:1   - Unknown word (rpad)         -- rpad('abc', 3, '-'); //
DOC.md:11987:30  - Unknown word (abcab)        -- abc', 5, 'ab'); // -> 'abcab'
DOC.md:11990:4   - Unknown word (rtrim)        -- ## rtrim
DOC.md:11992:23  - Unknown word (spaces)       -- Remove chars or white-spaces from end of string.
DOC.md:11998:10  - Unknown word (rtrim)        -- function rtrim(str: string, chars?
DOC.md:12005:19  - Unknown word (trim)         -- |str |String to trim |
DOC.md:12006:23  - Unknown word (trim)         -- chars |Characters to trim|
DOC.md:12006:9   - Unknown word (Characters)   -- |chars |Characters to trim|
DOC.md:12007:9   - Unknown word (Trimmed)      -- |return|Trimmed string    |
DOC.md:12010:1   - Unknown word (rtrim)        -- rtrim(' abc  '); // -> ' abc
DOC.md:12011:1   - Unknown word (rtrim)        -- rtrim('_abc_', '_'); // -
DOC.md:12012:1   - Unknown word (rtrim)        -- rtrim('_abc_', ['c', '_']
DOC.md:12049:9   - Unknown word (Deleted)      -- |return|Deleted value or undefined|
DOC.md:1205:1    - Unknown word (Most)            -- Most api is the same as Store
DOC.md:1205:17   - Unknown word (same)            -- Most api is the same as Store module, except
DOC.md:1205:31   - Unknown word (module)          -- is the same as Store module, except only buffer
DOC.md:1205:39   - Unknown word (except)          -- same as Store module, except only buffer is accepted
DOC.md:12101:22  - Unknown word (doesn't)      -- If a portion of path doesn't exist, it's created
DOC.md:12118:13  - Unknown word (safely)       -- Use storage safely in safari private browsing
DOC.md:12118:23  - Unknown word (safari)       -- Use storage safely in safari private browsing and
DOC.md:12118:38  - Unknown word (browsing)     -- safely in safari private browsing and older browsers.
DOC.md:12118:51  - Unknown word (older)        -- private browsing and older browsers.
DOC.md:12118:57  - Unknown word (browsers)     -- private browsing and older browsers.
DOC.md:12132:15  - Unknown word (Specified)    -- |return |Specified storage|
DOC.md:12190:4   - Unknown word (scroll)       -- ## scrollTo
DOC.md:12192:1   - Unknown word (Scroll)       -- Scroll to a target with animation
DOC.md:12198:10  - Unknown word (scroll)       -- function scrollTo(
DOC.md:12201:9   - Unknown word (tolerance)    -- tolerance?: number;
DOC.md:12213:10  - Unknown word (Scroll)       -- |target |Scroll target |
DOC.md:12214:10  - Unknown word (Scroll)       -- |options|Scroll options|
DOC.md:12220:18  - Unknown word (Tolerance)    -- |tolerance=0 |Tolerance of target to scroll
DOC.md:12220:2   - Unknown word (tolerance)    -- |tolerance=0 |Tolerance of target
DOC.md:12220:41  - Unknown word (scroll)       -- Tolerance of target to scroll |
DOC.md:12221:18  - Unknown word (Scroll)       -- |duration=800 |Scroll duration
DOC.md:12222:12  - Unknown word (Quart)        -- |easing=outQuart|Easing function
DOC.md:12223:39  - Unknown word (scrolling)    -- Function to run once scrolling complete|
DOC.md:12226:1   - Unknown word (scroll)       -- scrollTo('body', {
DOC.md:12227:5   - Unknown word (tolerance)    -- tolerance: 0,
DOC.md:12229:17  - Unknown word (Quart)        -- easing: 'outQuart',
DOC.md:12236:1   - Unknown word (Seeded)       -- Seeded random number generator
DOC.md:12256:16  - Unknown word (Maximum)      -- |max=1 |Maximum possible value
DOC.md:12258:30  - Unknown word (generates)    -- |Function that generates random number sequence
DOC.md:12258:54  - Unknown word (sequence)     -- generates random number sequence|
DOC.md:1225:17   - Unknown word (extends)         -- class FileStore extends Store {
DOC.md:12335:4   - Unknown word (shebang)      -- ## shebang
DOC.md:12337:20  - Unknown word (shebang)      -- Get command from a shebang.
DOC.md:12343:10  - Unknown word (shebang)      -- function shebang(str: string): string
DOC.md:12351:9   - Unknown word (Shebang)      -- |return|Shebang command      |
DOC.md:12354:1   - Unknown word (shebang)      -- shebang('#!/usr/bin/env node
DOC.md:12355:1   - Unknown word (shebang)      -- shebang('#!/bin/bash'); //
DOC.md:12355:17  - Unknown word (bash)         -- shebang('#!/bin/bash'); // -> '/bin/bash
DOC.md:12355:37  - Unknown word (bash)         -- bash'); // -> '/bin/bash'
DOC.md:12382:4   - Unknown word (shuffle)      -- ## shuffle
DOC.md:12384:1   - Unknown word (Randomize)    -- Randomize the order of the elements
DOC.md:12390:10  - Unknown word (shuffle)      -- function shuffle(arr: any[]): any[];
DOC.md:12397:18  - Unknown word (randomize)    -- |arr |Array to randomize|
DOC.md:12398:9   - Unknown word (Randomized)   -- |return|Randomized Array  |
DOC.md:123:53    - Unknown word (matched)      -- element in the set of matched elements.
DOC.md:12401:1   - Unknown word (shuffle)      -- shuffle([1, 2, 3]); // -> [
DOC.md:12404:4   - Unknown word (singleton)    -- ## singleton
DOC.md:12406:56  - Unknown word (resolves)     -- called once before it resolves.
DOC.md:12412:10  - Unknown word (singleton)    -- function singleton<F extends types.Fn<Promise
DOC.md:12422:21  - Unknown word (restrict)     -- |fn |Function to restrict |
DOC.md:12424:13  - Unknown word (restricted)   -- |return|New restricted function     |
DOC.md:12427:15  - Unknown word (singleton)    -- const fetch = singleton(async function fetch
DOC.md:12465:5   - Unknown word (approximate) -- Get approximate size of a js object
DOC.md:1246:12   - Unknown word (implementation)  -- Hash table implementation.
DOC.md:12481:21  - Unknown word (counted)     -- A char of string is counted as 2 bytes. And 4 bytes
DOC.md:12483:17  - Unknown word (treated)     -- Object keys are treated as strings.
DOC.md:12493:4   - Unknown word (sleep)       -- ## sleep
DOC.md:12495:27  - Unknown word (specified)   -- Resolve a promise after a specified timeout.
DOC.md:12501:10  - Unknown word (sleep)       -- function sleep(timeout: number): Promise
DOC.md:12508:10  - Unknown word (Sleep)       -- |timeout|Sleep timeout|
DOC.md:12512:11  - Unknown word (sleep)       -- await sleep(2000);
DOC.md:12512:5   - Unknown word (await)       -- await sleep(2000);
DOC.md:12537:37  - Unknown word (included)    -- length|End position, not included|
DOC.md:12553:5   - Unknown word (replacement) -- replacement?: { [index: string]
DOC.md:12562:2   - Unknown word (replacement) -- |replacement|Custom replacement|
DOC.md:12562:21  - Unknown word (replacement) -- |replacement|Custom replacement|
DOC.md:12563:14  - Unknown word (Slugified)   -- |return |Slugified string  |
DOC.md:12566:14  - Unknown word (pony)        -- slugify('I ♥ pony'); // -> 'I-love-pony
DOC.md:12566:31  - Unknown word (love)        -- I ♥ pony'); // -> 'I-love-pony'
DOC.md:12566:36  - Unknown word (pony)        -- pony'); // -> 'I-love-pony'
DOC.md:12567:14  - Unknown word (pony)        -- slugify('I ♥ pony', { ' ': '_' }); //
DOC.md:12567:45  - Unknown word (love)        -- ': '_' }); // -> 'I_love_pony'
DOC.md:12567:50  - Unknown word (pony)        -- ' }); // -> 'I_love_pony'
DOC.md:12570:4   - Unknown word (snake)       -- ## snakeCase
DOC.md:12572:20  - Unknown word (snake)       -- Convert string to "snakeCase".
DOC.md:12578:10  - Unknown word (snake)       -- function snakeCase(str: string): string
DOC.md:12586:9   - Unknown word (Snake)       -- |return|Snake cased string|
DOC.md:12589:1   - Unknown word (snake)       -- snakeCase('fooBar'); // -
DOC.md:12590:1   - Unknown word (snake)       -- snakeCase('foo bar'); //
DOC.md:12594:4   - Unknown word (some)        -- ## some
DOC.md:12602:10  - Unknown word (some)        -- function some<T>(
DOC.md:12607:10  - Unknown word (some)        -- function some<T>(
DOC.md:12624:1   - Unknown word (some)        -- some([2, 5], function(val
DOC.md:12631:39  - Unknown word (ascending)   -- of elements sorted in ascending order by results of
DOC.md:12670:9   - Unknown word (deep)        -- deep?: boolean;
DOC.md:12671:9   - Unknown word (comparator)  -- comparator?: types.AnyFn;
DOC.md:12688:2   - Unknown word (deep)        -- |deep=false|Sort keys recursively
DOC.md:12688:23  - Unknown word (recursively) -- deep=false|Sort keys recursively|
DOC.md:12689:2   - Unknown word (comparator)  -- |comparator|Comparator
DOC.md:12695:9   - Unknown word (deep)        -- deep: true
DOC.md:12726:7   - Unknown word (different)   -- Split different string case to an array
DOC.md:12782:5   - Unknown word (Call)        -- Get CallSite objects in v8.
DOC.md:12782:9   - Unknown word (Site)        -- Get CallSite objects in v8.
DOC.md:12796:29  - Unknown word (Call)        -- stackTrace(); // -> List of CallSite objects
DOC.md:12796:33  - Unknown word (Site)        -- ; // -> List of CallSite objects
DOC.md:127:22    - Unknown word (manipulate)   -- element|Elements to manipulate|
DOC.md:12801:17  - Unknown word (starts)      -- Check if string starts with the given target
DOC.md:12816:24  - Unknown word (starts)      -- return|True if string starts with prefix|
DOC.md:12860:16  - Unknown word (Encoding)    -- |encoding=utf8|Encoding of string|
DOC.md:12895:14  - Unknown word (visual)      -- Get string's visual width.
DOC.md:12909:9   - Unknown word (Visual)      -- |return|Visual width       |
DOC.md:12918:33  - Unknown word (circular)    -- stringify with support for circular object, function etc
DOC.md:12924:30  - Unknown word (spaces)      -- stringify(obj: any, spaces?: number): string;
DOC.md:12929:1   - Unknown word (Undefined)   -- Undefined is treated as null value
DOC.md:12929:14  - Unknown word (treated)     -- Undefined is treated as null value.
DOC.md:12934:16  - Unknown word (spaces)      -- |spaces|Indent spaces |
DOC.md:12934:2   - Unknown word (spaces)      -- |spaces|Indent spaces
DOC.md:12934:9   - Unknown word (Indent)      -- |spaces|Indent spaces      |
DOC.md:12941:37  - Unknown word (Circular)    -- // -> '{"a":1,"b":"[Circular ~]"}'
DOC.md:1294:9    - Unknown word (True)            -- |return|True if value exists|
DOC.md:12958:9   - Unknown word (unenumerable) -- unenumerable?: boolean;
DOC.md:12962:9   - Unknown word (depth)        -- depth?: number;
DOC.md:12980:2   - Unknown word (unenumerable) -- |unenumerable=false|Include unenumerable
DOC.md:12984:2   - Unknown word (depth)        -- |depth=0 |Max depth
DOC.md:12984:25  - Unknown word (depth)        -- depth=0 |Max depth of recursion   |
DOC.md:12984:34  - Unknown word (recursion)    -- |Max depth of recursion |
DOC.md:12987:23  - Unknown word (remaining)    -- When time is out, all remaining values will all be
DOC.md:12991:21  - Unknown word (back)         -- Parse result string back to object.
DOC.md:12:13     - Unknown word (extends)     -- class $ extends Select {
DOC.md:13002:4   - Unknown word (strip)        -- ## stripAnsi
DOC.md:13002:9   - Unknown word (Ansi)         -- ## stripAnsi
DOC.md:13004:1   - Unknown word (Strip)        -- Strip ansi codes from a string
DOC.md:13004:12  - Unknown word (codes)        -- Strip ansi codes from a string.
DOC.md:13010:10  - Unknown word (strip)        -- function stripAnsi(str: string): string
DOC.md:13010:15  - Unknown word (Ansi)         -- function stripAnsi(str: string): string
DOC.md:13017:19  - Unknown word (strip)        -- |str |String to strip|
DOC.md:13021:1   - Unknown word (strip)        -- stripAnsi('\u001b[4mcake\u
DOC.md:13021:20  - Unknown word (mcake)        -- stripAnsi('\u001b[4mcake\u001b[0m'); // -> 'cake
DOC.md:13021:6   - Unknown word (Ansi)         -- stripAnsi('\u001b[4mcake\u001b
DOC.md:13024:4   - Unknown word (strip)        -- ## stripBom
DOC.md:13026:1   - Unknown word (Strip)        -- Strip UTF-8 byte order mark
DOC.md:1302:24   - Unknown word (redhoodsu)       -- hashTable.set('name', 'redhoodsu');
DOC.md:1303:31   - Unknown word (redhoodsu)       -- get('name'); // -> 'redhoodsu'
DOC.md:13043:16  - Unknown word (Flicia)       -- stripBom('\uFEFFlicia'); // -> 'licia'
DOC.md:13048:1   - Unknown word (Strip)        -- Strip comments from source
DOC.md:1306:30   - Unknown word (false)           -- hashTable.has('name'); // -> false
DOC.md:13070:1   - Unknown word (Strip)        -- Strip ansi color codes from
DOC.md:13070:18  - Unknown word (codes)        -- Strip ansi color codes from a string.
DOC.md:13087:22  - Unknown word (mred)         -- stripColor('\u001b[31mred\u001b[39m'); // ->
DOC.md:13092:1   - Unknown word (Strip)        -- Strip html tags from a string
DOC.md:1309:4    - Unknown word (Heap)            -- ## Heap
DOC.md:13112:9   - Unknown word (Indent)       -- ## stripIndent
DOC.md:13114:24  - Unknown word (multi)        -- Strip indentation from multi-line strings.
DOC.md:13114:7   - Unknown word (indentation)  -- Strip indentation from multi-line strings
DOC.md:1311:1    - Unknown word (Heap)            -- Heap implementation.
DOC.md:1311:6    - Unknown word (implementation)  -- Heap implementation.
DOC.md:13120:15  - Unknown word (Indent)       -- function stripIndent(str: string): string
DOC.md:13122:23  - Unknown word (Strings)      -- literals: TemplateStringsArray,
DOC.md:13122:5   - Unknown word (literals)     -- literals: TemplateStringsArray
DOC.md:13146:19  - Unknown word (specified)    -- Strip number to a specified precision.
DOC.md:1317:7    - Unknown word (Heap)            -- class Heap {
DOC.md:13206:9   - Unknown word (Second)       -- |b |Second index |
DOC.md:13224:9   - Unknown word (border)       -- border?: {
DOC.md:1323:5    - Unknown word (peek)            -- peek(): any;
DOC.md:13245:5   - Unknown word (rows)         -- rows: Array<string[]>,
DOC.md:13254:2   - Unknown word (rows)         -- |rows |Table data   |
DOC.md:13260:20  - Unknown word (back)         -- Parse table string back to object.
DOC.md:13271:19  - Unknown word (Emily)        -- ['daughter', 'Emily', 'Smith'],
DOC.md:13271:7   - Unknown word (daughter)     -- ['daughter', 'Emily', 'Smith']
DOC.md:13272:17  - Unknown word (John)         -- ['father', 'John', 'Smith'],
DOC.md:13273:17  - Unknown word (Jane)         -- ['mother', 'Jane', 'Smith']
DOC.md:13273:7   - Unknown word (mother)       -- ['mother', 'Jane', 'Smith']
DOC.md:13279:55  - Unknown word (evaluated)    -- function that can be evaluated for rendering.
DOC.md:13293:9   - Unknown word (Utility)      -- |util |Utility functions         |
DOC.md:13294:9   - Unknown word (Compiled)     -- |return|Compiled template function|
DOC.md:13299:17  - Unknown word (echo)         -- template('<%if (echo) {%>Hello licia!<%}
DOC.md:13299:48  - Unknown word (echo)         -- Hello licia!<%}%>')({ echo: true }); // -> 'Hello
DOC.md:13302:28  - Unknown word (Upper)        -- return str.toLocaleUpperCase();
DOC.md:13304:34  - Unknown word (LICIA)        -- licia' }); // -> '<p>LICIA</p>'
DOC.md:13307:4   - Unknown word (theme)        -- ## theme
DOC.md:13309:1   - Unknown word (Theme)        -- Theme helper.
DOC.md:13309:7   - Unknown word (helper)       -- Theme helper.
DOC.md:13315:11  - Unknown word (theme)        -- namespace theme {
DOC.md:13316:16  - Unknown word (Theme)        -- interface ITheme extends Emitter {
DOC.md:1331:1    - Unknown word (Heap)            -- Heap size.
DOC.md:13320:14  - Unknown word (theme)        -- const theme: theme.ITheme;
DOC.md:13320:21  - Unknown word (Theme)        -- const theme: theme.ITheme;
DOC.md:13320:7   - Unknown word (theme)        -- const theme: theme.ITheme;
DOC.md:13327:1   - Unknown word (Bind)         -- Bind change event.
DOC.md:13331:1   - Unknown word (Unbind)       -- Unbind change event.
DOC.md:13335:13  - Unknown word (theme)        -- Get current theme(light or dark).
DOC.md:13335:28  - Unknown word (dark)         -- current theme(light or dark).
DOC.md:13339:32  - Unknown word (dark)         -- console.log(theme); // -> 'dark'
DOC.md:13346:14  - Unknown word (throttled)    -- Return a new throttled version of the passed
DOC.md:13361:13  - Unknown word (throttled)    -- |return|New throttled function         |
DOC.md:13365:14  - Unknown word (scroll)       -- // $(window).scroll(updatePos);
DOC.md:13370:1   - Unknown word (Tiny)         -- Tiny wrapper of stream Transform
DOC.md:13379:14  - Unknown word (opts)         -- new (opts?: stream.DuplexOptions
DOC.md:13379:28  - Unknown word (Duplex)       -- new (opts?: stream.DuplexOptions): stream.Transform
DOC.md:1337:7    - Unknown word (Comparator)      -- |cmp |Comparator|
DOC.md:13380:10  - Unknown word (opts)         -- (opts?: stream.DuplexOptions
DOC.md:13380:24  - Unknown word (Duplex)       -- (opts?: stream.DuplexOptions): stream.Transform
DOC.md:13389:10  - Unknown word (Flush)        -- type FlushCallback = (
DOC.md:13391:9   - Unknown word (flush)        -- flushCallback: () => void
DOC.md:13395:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC.md:13395:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC.md:13399:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC.md:13399:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC.md:13402:23  - Unknown word (Duplex)       -- opts?: stream.DuplexOptions,
DOC.md:13402:9   - Unknown word (opts)         -- opts?: stream.DuplexOptions
DOC.md:13404:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC.md:13404:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC.md:13409:21  - Unknown word (Flush)        -- flush?: through.FlushCallback
DOC.md:13409:5   - Unknown word (flush)        -- flush?: through.FlushCallback
DOC.md:13412:19  - Unknown word (Duplex)       -- opts?: stream.DuplexOptions,
DOC.md:13412:5   - Unknown word (opts)         -- opts?: stream.DuplexOptions
DOC.md:1341:11   - Unknown word (heap)            -- Clear the heap.
DOC.md:13422:2   - Unknown word (opts)         -- |opts={} |Options to initialize
DOC.md:13428:28  - Unknown word (Mode)         -- Shortcut for setting objectMode to true.
DOC.md:13437:6   - Unknown word (pipe)         -- .pipe(
DOC.md:13449:9   - Unknown word (absolute)     -- Convert absolute path to tilde path.
DOC.md:1345:20   - Unknown word (heap)            -- Add an item to the heap.
DOC.md:13466:16  - Unknown word (surunzi)     -- tildify('/home/surunzi/dev'); // -> '~/dev
DOC.md:13489:15  - Unknown word (Formatted)   -- |return |Formatted time ago string|
DOC.md:13493:32  - Unknown word (just)        -- now - 1000 * 6); // -> just now
DOC.md:13494:36  - Unknown word (seconds)     -- 000 * 15); // -> 15 seconds ago
DOC.md:13495:44  - Unknown word (minutes)     -- * 15); // -> in 15 minutes
DOC.md:13496:49  - Unknown word (hours)       -- * 5, now); // -> 5 hours ago
DOC.md:13499:8   - Unknown word (Taken)       -- ## timeTaken
DOC.md:13507:14  - Unknown word (Taken)       -- function timeTaken(fn: types.AnyFn): number
DOC.md:13514:21  - Unknown word (measure)     -- |fn |Function to measure time|
DOC.md:13518:5   - Unknown word (Taken)       -- timeTaken(function() {
DOC.md:13520:16  - Unknown word (taken)       -- }); // -> Time taken to execute given function
DOC.md:1354:42   - Unknown word (heap)            -- the root item of the heap.
DOC.md:13567:9   - Unknown word (Converted)   -- |return|Converted array |
DOC.md:1356:5    - Unknown word (peek)            -- ### peek
DOC.md:1358:1    - Unknown word (Same)            -- Same as poll, but does not
DOC.md:1358:19   - Unknown word (does)            -- Same as poll, but does not remove the item
DOC.md:13595:30  - Unknown word (sleep)       -- sleep = require('licia/sleep');
DOC.md:13595:7   - Unknown word (sleep)       -- const sleep = require('licia/sleep
DOC.md:13598:5   - Unknown word (yield)       -- yield sleep(200);
DOC.md:1361:18   - Unknown word (Heap)            -- const heap = new Heap(function(a, b) {
DOC.md:1361:7    - Unknown word (heap)            -- const heap = new Heap(function
DOC.md:13621:9   - Unknown word (Converted)   -- |return|Converted boolean|
DOC.md:13649:9   - Unknown word (Converted)   -- |return|Converted Date  |
DOC.md:1364:1    - Unknown word (heap)            -- heap.add(2);
DOC.md:13670:1   - Unknown word (There)       -- There should be only one root
DOC.md:13697:9   - Unknown word (Converted)   -- |return|Converted integer|
DOC.md:13745:43  - Unknown word (native)      -- 'function min() { [native code] }'
DOC.md:1374:18   - Unknown word (manipulator)     -- V8 heap snapshot manipulator.
DOC.md:13774:4   - Unknown word (topo)        -- ## topoSort
DOC.md:13776:1   - Unknown word (Topological) -- Topological sorting algorithm.
DOC.md:13776:13  - Unknown word (sorting)     -- Topological sorting algorithm.
DOC.md:13782:10  - Unknown word (topo)        -- function topoSort(edges: any[]): any
DOC.md:13782:19  - Unknown word (edges)       -- function topoSort(edges: any[]): any[];
DOC.md:13789:2   - Unknown word (edges)       -- |edges |Dependencies|
DOC.md:13793:1   - Unknown word (topo)        -- topoSort([
DOC.md:13825:43  - Unknown word (mouseup)     -- getElementById('test'), 'mouseup');
DOC.md:13829:4   - Unknown word (trim)        -- ## trim
DOC.md:1382:5    - Unknown word (edges)           -- edges: LinkedList;
DOC.md:13831:35  - Unknown word (beginning)   -- or white-spaces from beginning end of string.
DOC.md:13845:9   - Unknown word (Characters)  -- |chars |Characters to trim|
DOC.md:13846:9   - Unknown word (Trimmed)     -- |return|Trimmed string    |
DOC.md:13854:4   - Unknown word (truncate)    -- ## truncate
DOC.md:13856:1   - Unknown word (Truncate)    -- Truncate a string to a specific
DOC.md:13862:10  - Unknown word (truncate)    -- function truncate(
DOC.md:13866:9   - Unknown word (ellipsis)    -- ellipsis?: string;
DOC.md:13876:18  - Unknown word (truncate)    -- |txt |Text to truncate |
DOC.md:13877:10  - Unknown word (Maximum)     -- |width |Maximum string length|
DOC.md:13879:10  - Unknown word (Truncated)   -- |return |Truncated string     |
DOC.md:13885:2   - Unknown word (ellipsis)    -- |ellipsis='...'|String to indicate
DOC.md:13885:27  - Unknown word (indicate)    -- ellipsis='...'|String to indicate text is omitted|
DOC.md:13885:44  - Unknown word (omitted)     -- to indicate text is omitted|
DOC.md:13886:38  - Unknown word (truncate)    -- Separator pattern to truncate to  |
DOC.md:13889:1   - Unknown word (truncate)    -- truncate('ORA ORA ORA ORA ORA
DOC.md:13892:5   - Unknown word (ellipsis)    -- ellipsis: '……'
DOC.md:13898:23  - Unknown word (catch)       -- Run function in a try catch.
DOC.md:13911:23  - Unknown word (catch)       -- fn |Function to try catch|
DOC.md:13917:30  - Unknown word (might)       -- / Do something that might cause an error.
DOC.md:13917:36  - Unknown word (cause)       -- something that might cause an error.
DOC.md:13927:1   - Unknown word (Determine)   -- Determine the internal JavaScript
DOC.md:13927:15  - Unknown word (internal)    -- Determine the internal JavaScript [[Class]
DOC.md:13941:17  - Unknown word (Lower)       -- |lowerCase=true|LowerCase result |
DOC.md:13976:15  - Unknown word (Memo)        -- interface MemoIterator<T, TResult>
DOC.md:13979:15  - Unknown word (Memo)        -- interface MemoObjectIterator<T, TResult
DOC.md:1397:1    - Unknown word (Parsed)          -- Parsed nodes.
DOC.md:13993:20  - Unknown word (decoding)    -- UCS-2 encoding and decoding.
DOC.md:1399:5    - Unknown word (edges)           -- ### edges
DOC.md:13:9      - Unknown word (find)        -- find(selector: string):
DOC.md:14014:9   - Unknown word (Encoded)     -- |return|Encoded string      |
DOC.md:1401:1    - Unknown word (Parsed)          -- Parsed edges.
DOC.md:1401:8    - Unknown word (edges)           -- Parsed edges.
DOC.md:14032:4   - Unknown word (uncaught)    -- ## uncaught
DOC.md:14034:1   - Unknown word (Handle)      -- Handle global uncaught errors
DOC.md:14034:15  - Unknown word (uncaught)    -- Handle global uncaught errors and promise rejections
DOC.md:14034:43  - Unknown word (rejections)  -- uncaught errors and promise rejections.
DOC.md:14040:7   - Unknown word (uncaught)    -- const uncaught: {
DOC.md:1404:12   - Unknown word (require)         -- const fs = require('fs');
DOC.md:14053:7   - Unknown word (handling)    -- Start handling of errors.
DOC.md:14057:6   - Unknown word (handling)    -- Stop handling.
DOC.md:1405:39   - Unknown word (heapsnapshot)    -- readFileSync('path/to/heapsnapshot', 'utf8');
DOC.md:14061:18  - Unknown word (handling)    -- Add listener for handling errors.
DOC.md:14076:1   - Unknown word (uncaught)    -- uncaught.start();
DOC.md:14077:1   - Unknown word (uncaught)    -- uncaught.addListener(err =>
DOC.md:14084:23  - Unknown word (back)        -- Convert HTML entities back, the inverse of escape
DOC.md:14084:33  - Unknown word (inverse)     -- HTML entities back, the inverse of escape.
DOC.md:1408:55   - Unknown word (self)            -- (totalSize += node.selfSize));
DOC.md:14120:22  - Unknown word (combined)    -- return|New array of combined values|
DOC.md:14128:12  - Unknown word (globally)    -- Generate a globally-unique id.
DOC.md:14142:9   - Unknown word (Globally)    -- |return|Globally-unique id|
DOC.md:1414:1    - Unknown word (Simple)          -- Simple internationalization
DOC.md:1414:29   - Unknown word (library)              -- internationalization library.
DOC.md:1414:8    - Unknown word (internationalization) -- Simple internationalization library.
DOC.md:14150:8   - Unknown word (duplicate)   -- Create duplicate-free version of an array
DOC.md:14167:22  - Unknown word (comparing)   -- cmp |Function for comparing values|
DOC.md:14168:13  - Unknown word (duplicate)   -- |return|New duplicate free array     |
DOC.md:14174:4   - Unknown word (universalify) -- ## universalify
DOC.md:14176:32  - Unknown word (both)         -- async function support both promises and callbacks
DOC.md:14176:37  - Unknown word (promises)     -- function support both promises and callbacks.
DOC.md:14176:50  - Unknown word (callbacks)    -- support both promises and callbacks.
DOC.md:14182:10  - Unknown word (universalify) -- function universalify(
DOC.md:14203:12  - Unknown word (universalify) -- const fn = universalify(callbackFn, 'callback
DOC.md:14214:1   - Unknown word (Opposite)     -- Opposite of zip.
DOC.md:14220:1   - Unknown word (declare)      -- declare function unzip(arr:
DOC.md:14227:18  - Unknown word (grouped)      -- |arr |Array of grouped elements to process
DOC.md:14228:22  - Unknown word (regrouped)    -- return|New array of regrouped elements     |
DOC.md:14253:9   - Unknown word (Uppercased)   -- |return|Uppercased string|
DOC.md:14283:5   - Unknown word (modules)      -- Use modules that is created by define
DOC.md:14289:14  - Unknown word (requires)     -- function use(requires: string[], method: types
DOC.md:14297:2   - Unknown word (requires)     -- |requires|Dependencies
DOC.md:14298:11  - Unknown word (Codes)        -- |method |Codes to be executed|
DOC.md:14298:23  - Unknown word (executed)     -- method |Codes to be executed|
DOC.md:142:15    - Unknown word (manipulations) -- Element class manipulations.
DOC.md:14309:20  - Unknown word (decoding)     -- UTF-8 encoding and decoding.
DOC.md:14325:16  - Unknown word (decoded)      -- Turn any UTF-8 decoded string into UTF-8 encoded
DOC.md:14325:42  - Unknown word (encoded)      -- decoded string into UTF-8 encoded string.
DOC.md:14330:9   - Unknown word (Encoded)      -- |return|Encoded string  |
DOC.md:14334:16  - Unknown word (encoded)      -- Turn any UTF-8 encoded string into UTF-8 decoded
DOC.md:14334:42  - Unknown word (decoded)      -- encoded string into UTF-8 decoded string.
DOC.md:14339:13  - Unknown word (Suppress)     -- |safe=false|Suppress error if true|
DOC.md:14340:13  - Unknown word (Decoded)      -- |return |Decoded string        |
DOC.md:14349:19  - Unknown word (compliant)    -- RFC4122 version 4 compliant uuid generator.
DOC.md:14368:28  - Unknown word (enumerable)   -- an array of the own enumerable property values of object
DOC.md:1439:38   - Unknown word (existing)             -- append extra keys to existing language.
DOC.md:14407:17  - Unknown word (quantity)     -- Variable-length quantity encoding and decoding
DOC.md:14423:1   - Unknown word (Encode)       -- Encode numbers into vlq string
DOC.md:14428:9   - Unknown word (Encoded)      -- |return|Encoded string  |
DOC.md:14437:9   - Unknown word (Decoded)      -- |return|Decoded numbers |
DOC.md:14441:38  - Unknown word (Hwcqx)        -- 456, 789]); // -> '2HwcqxB'
DOC.md:14443:14  - Unknown word (Hwcqx)        -- vlq.decode('2HwcqxB'); // -> [123, 456
DOC.md:14448:1   - Unknown word (Wait)         -- Wait until function returns
DOC.md:14448:6   - Unknown word (until)        -- Wait until function returns a truthy
DOC.md:14457:5   - Unknown word (interval)     -- interval?: number
DOC.md:14467:15  - Unknown word (Wait)         -- |interval=250|Wait interval     |
DOC.md:14467:2   - Unknown word (interval)     -- |interval=250|Wait interval
DOC.md:14467:20  - Unknown word (interval)     -- |interval=250|Wait interval |
DOC.md:14477:4   - Unknown word (waterfall)    -- ## waterfall
DOC.md:14485:10  - Unknown word (waterfall)    -- function waterfall(tasks: types.AnyFn[
DOC.md:14496:1   - Unknown word (waterfall)    -- waterfall(
DOC.md:14503:23  - Unknown word (done)         -- cb(null, 'done');
DOC.md:14507:23  - Unknown word (done)         -- // result -> 'done'
DOC.md:14514:1   - Unknown word (Wrap)         -- Wrap a string to a given
DOC.md:14527:17  - Unknown word (wrap)         -- |txt |Text to wrap |
DOC.md:14529:16  - Unknown word (wrapped)      -- |return|String wrapped at given length|
DOC.md:14532:11  - Unknown word (Licia)        -- wordWrap('Licia is a utility library
DOC.md:14532:22  - Unknown word (utility)      -- wordWrap('Licia is a utility library.', 10);
DOC.md:14533:21  - Unknown word (utility)      -- // -> 'Licia is \na utility \nlibrary.'
DOC.md:14533:30  - Unknown word (nlibrary)     -- Licia is \na utility \nlibrary.'
DOC.md:14533:8   - Unknown word (Licia)        -- // -> 'Licia is \na utility \nlibrary
DOC.md:14558:4   - Unknown word (workerize)    -- ## workerize
DOC.md:14560:14  - Unknown word (alone)        -- Move a stand-alone function to a worker
DOC.md:14560:8   - Unknown word (stand)        -- Move a stand-alone function to a
DOC.md:14566:10  - Unknown word (workerize)    -- function workerize(fn: types.AnyFn): types
DOC.md:1456:5    - Unknown word (translation)          -- Get translation text.
DOC.md:14573:21  - Unknown word (turn)         -- |fn |Function to turn |
DOC.md:14574:9   - Unknown word (Workerized)   -- |return|Workerized Function|
DOC.md:14577:16  - Unknown word (workerize)    -- const worker = workerize(function(a, b) {
DOC.md:14585:4   - Unknown word (wrap)         -- ## wrap
DOC.md:14587:1   - Unknown word (Wrap)         -- Wrap the function inside
DOC.md:14587:19  - Unknown word (inside)       -- Wrap the function inside a wrapper function,
DOC.md:14587:46  - Unknown word (passing)      -- a wrapper function, passing it as the first argument
DOC.md:14593:10  - Unknown word (wrap)         -- function wrap(
DOC.md:14603:22  - Unknown word (wrap)         -- fn |Function to wrap|
DOC.md:14604:10  - Unknown word (Wrapper)      -- |wrapper|Wrapper function|
DOC.md:14608:11  - Unknown word (wrap)         -- const p = wrap(escape, function(fn
DOC.md:1460:17   - Unknown word (translation)          -- |path |Path of translation to get|
DOC.md:14616:1   - Unknown word (Promised)     -- Promised version of mini program
DOC.md:14616:21  - Unknown word (mini)         -- Promised version of mini program wx object.
DOC.md:14616:26  - Unknown word (program)      -- Promised version of mini program wx object.
DOC.md:1462:9    - Unknown word (Translation)          -- |return|Translation text          |
DOC.md:14657:7   - Unknown word (together)     -- Merge together the values of each of
DOC.md:14657:72  - Unknown word (corresponding) -- with the values at the corresponding position.
DOC.md:14671:22  - Unknown word (grouped)       -- return|New array of grouped elements|
DOC.md:1467:9    - Unknown word (welcome)              -- welcome: 'Hello, {{name}}!'
DOC.md:1473:9    - Unknown word (welcome)              -- welcome: '你好，{{name}}！'
DOC.md:1481:9    - Unknown word (welcome)              -- i18n.t('welcome', { name: 'licia' }
DOC.md:1486:8    - Unknown word (Transformer)          -- ## JsonTransformer
DOC.md:1488:14   - Unknown word (transformer)          -- Json to json transformer.
DOC.md:1494:11   - Unknown word (Transformer)          -- class JsonTransformer {
DOC.md:1496:37   - Unknown word (Transformer)          -- string, val: any): JsonTransformer;
DOC.md:1498:57   - Unknown word (Transformer)          -- fn: types.AnyFn): JsonTransformer;
DOC.md:1499:45   - Unknown word (Transformer)          -- fn: types.AnyFn): JsonTransformer;
DOC.md:149:19    - Unknown word (safe)          -- add(element: $safeEls.El, name: string
DOC.md:149:57    - Unknown word (void)          -- string | string[]): void;
DOC.md:151:49    - Unknown word (void)          -- safeEls.El, name: string): void;
DOC.md:151:5     - Unknown word (toggle)        -- toggle(element: $safeEls.El
DOC.md:1530:49   - Unknown word (replaced)             -- whole source object is replaced by val.
DOC.md:1539:9    - Unknown word (Specified)            -- |return|Specified value or whole object
DOC.md:1551:1    - Unknown word (Shortcut)             -- Shortcut for array map.
DOC.md:1557:16   - Unknown word (invoked)              -- |fn |Function invoked per iteration|
DOC.md:1557:28   - Unknown word (iteration)            -- Function invoked per iteration|
DOC.md:1561:1    - Unknown word (Shortcut)             -- Shortcut for array filter.
DOC.md:1565:20   - Unknown word (several)              -- Compute value from several object values.
DOC.md:1586:9    - Unknown word (lastname)             -- lastname: 'Su',
DOC.md:1587:24   - Unknown word (Hood)                 -- firstname: 'RedHood'
DOC.md:1587:9    - Unknown word (firstname)            -- firstname: 'RedHood'
DOC.md:1594:19   - Unknown word (firstname)            -- return author.firstname + author.lastname;
DOC.md:1594:38   - Unknown word (lastname)             -- author.firstname + author.lastname;
DOC.md:1596:37   - Unknown word (length)               -- , data.get('books').length);
DOC.md:1597:71   - Unknown word (Hood)                 -- price: 10}], author: 'RedHoodSu', count: 1}
DOC.md:15:20     - Unknown word (offset)      -- offset(): $offset.IOffset;
DOC.md:15:28     - Unknown word (Offset)      -- offset(): $offset.IOffset;
DOC.md:15:9      - Unknown word (offset)      -- offset(): $offset.IOffset;
DOC.md:1602:1    - Unknown word (Doubly)               -- Doubly-linked list implementation
DOC.md:1602:20   - Unknown word (implementation)       -- Doubly-linked list implementation.
DOC.md:160:59    - Unknown word (matched)       -- element in the set of matched elements.
DOC.md:160:9     - Unknown word (specified)     -- Add the specified class(es) to each element
DOC.md:1611:22   - Unknown word (null)                 -- prev: Node | null;
DOC.md:1612:22   - Unknown word (null)                 -- next: Node | null;
DOC.md:1618:5    - Unknown word (tail)                 -- tail: LinkedList.Node;
DOC.md:1621:5    - Unknown word (unshift)              -- unshift(val: any): number;
DOC.md:1622:5    - Unknown word (shift)                -- shift(): any;
DOC.md:1623:5    - Unknown word (find)                 -- find(fn: types.AnyFn): LinkedList
DOC.md:1640:5    - Unknown word (tail)                 -- ### tail
DOC.md:164:22    - Unknown word (manipulate)    -- element|Elements to manipulate|
DOC.md:1657:5    - Unknown word (unshift)              -- ### unshift
DOC.md:165:10    - Unknown word (Classes)       -- |names |Classes to add        |
DOC.md:1661:5    - Unknown word (shift)                -- ### shift
DOC.md:1669:5    - Unknown word (find)                 -- ### find
DOC.md:1671:1    - Unknown word (Find)                 -- Find node.
DOC.md:1675:18   - Unknown word (invoked)              -- |fn |Function invoked per iteration   |
DOC.md:1675:30   - Unknown word (iteration)            -- Function invoked per iteration |
DOC.md:1676:21   - Unknown word (that)                 -- |return|First value that passes predicate|
DOC.md:1676:26   - Unknown word (passes)               -- return|First value that passes predicate|
DOC.md:1684:1    - Unknown word (Convert)              -- Convert the list to a JavaScript
DOC.md:1694:14   - Unknown word (wrapper)              -- LocalStorage wrapper.
DOC.md:169:1     - Unknown word (Determine)     -- Determine whether any of the matched
DOC.md:169:11    - Unknown word (whether)       -- Determine whether any of the matched elements
DOC.md:169:30    - Unknown word (matched)       -- Determine whether any of the matched elements are assigned
DOC.md:169:51    - Unknown word (assigned)      -- matched elements are assigned the given class.
DOC.md:169:64    - Unknown word (given)         -- elements are assigned the given class.
DOC.md:16:9      - Unknown word (hide)        -- hide(): $;
DOC.md:1723:1    - Unknown word (Simple)               -- Simple logger with level filter
DOC.md:1731:5    - Unknown word (formatter)            -- formatter(type: string, argList
DOC.md:1738:5    - Unknown word (warn)                 -- warn(...args: any[]): Logger
DOC.md:175:10    - Unknown word (True)          -- |return |True if elements has given
DOC.md:175:31    - Unknown word (given)         -- True if elements has given class name|
DOC.md:1765:25   - Unknown word (warn)                 -- trace, debug, info, warn, error
DOC.md:1771:21   - Unknown word (WARN)                -- TRACE, DEBUG, INFO, WARN, ERROR and SILENT.
DOC.md:1771:37   - Unknown word (SILENT)              -- INFO, WARN, ERROR and SILENT.
DOC.md:1778:8    - Unknown word (formatter)           -- logger.formatter = function(type, argList
DOC.md:177:5     - Unknown word (toggle)        -- ### toggle
DOC.md:1795:1    - Unknown word (Simple)              -- Simple LRU cache.
DOC.md:179:117   - Unknown word (presence)      -- on either the class's presence or the value of the
DOC.md:179:152   - Unknown word (argument)      -- the value of the state argument.
DOC.md:179:22    - Unknown word (more)          -- Add or remove one or more classes from each element
DOC.md:179:27    - Unknown word (classes)       -- or remove one or more classes from each element in
DOC.md:179:85    - Unknown word (depending)     -- of matched elements, depending on either the class
DOC.md:179:98    - Unknown word (either)        -- elements, depending on either the class's presence
DOC.md:1826:9    - Unknown word (True)                -- |return|True if value exists|
DOC.md:184:24    - Unknown word (toggle)        -- name |Class name to toggle |
DOC.md:188:24    - Unknown word (multiple)      -- Remove a single class, multiple classes, or all classes
DOC.md:188:33    - Unknown word (classes)       -- single class, multiple classes, or all classes from
DOC.md:188:49    - Unknown word (classes)       -- multiple classes, or all classes from each element in
DOC.md:1903:6    - Unknown word (unmatch)             -- #### unmatch
DOC.md:1905:1    - Unknown word (Opposite)            -- Opposite of match.
DOC.md:1908:36   - Unknown word (screen)              -- mediaQuery = new MediaQuery('screen and (max-width:1000px
DOC.md:1911:11   - Unknown word (something)           -- // Do something...
DOC.md:1915:12   - Unknown word (Observer)            -- ## MutationObserver
DOC.md:1915:4    - Unknown word (Mutation)            -- ## MutationObserver
DOC.md:1917:1    - Unknown word (Safe)                -- Safe MutationObserver, does
DOC.md:1917:14   - Unknown word (Observer)            -- Safe MutationObserver, does nothing if MutationObse
DOC.md:1917:24   - Unknown word (does)                -- Safe MutationObserver, does nothing if MutationObserver
DOC.md:1917:29   - Unknown word (nothing)             -- MutationObserver, does nothing if MutationObserver
DOC.md:1917:40   - Unknown word (Mutation)            -- tionObserver, does nothing if MutationObserver is not supported
DOC.md:1917:48   - Unknown word (Observer)            -- does nothing if MutationObserver is not supported.
DOC.md:1917:6    - Unknown word (Mutation)            -- Safe MutationObserver, does nothing
DOC.md:1920:22   - Unknown word (Mutation)            -- const observer = new MutationObserver(function(mutations
DOC.md:1920:30   - Unknown word (Observer)            -- observer = new MutationObserver(function(mutations)
DOC.md:1920:48   - Unknown word (mutations)           -- MutationObserver(function(mutations) {
DOC.md:1920:7    - Unknown word (observer)            -- const observer = new MutationObserver
DOC.md:1923:1    - Unknown word (observer)            -- observer.observe(document.documentElem
DOC.md:1923:10   - Unknown word (observe)             -- observer.observe(document.documentElement
DOC.md:1924:1    - Unknown word (observer)            -- observer.disconnect();
DOC.md:1941:5    - Unknown word (peek)                -- peek(): any;
DOC.md:1955:8    - Unknown word (Comparator)          -- |cmp |Comparator|
DOC.md:1972:25   - Unknown word (highest)             -- Retrieve and remove the highest priority item of the
DOC.md:1974:5    - Unknown word (peek)                -- ### peek
DOC.md:1976:1    - Unknown word (Same)                -- Same as dequeue, but does
DOC.md:1976:22   - Unknown word (does)                -- Same as dequeue, but does not remove the item
DOC.md:198:38    - Unknown word (true)          -- test', 'class1'); // -> true
DOC.md:1997:1    - Unknown word (Lightweight)         -- Lightweight Promise implementation
DOC.md:1999:11   - Unknown word (spec)                -- [Promises spec](https://github.com
DOC.md:1999:2    - Unknown word (Promises)            -- [Promises spec](https://github
DOC.md:1:3       - Unknown word (Licia)      -- # Licia Documentation
DOC.md:200:38    - Unknown word (false)         -- test', 'class1'); // -> false
DOC.md:2023:4    - Unknown word (Pseudo)              -- ## PseudoMap
DOC.md:2025:1    - Unknown word (Like)                -- Like es6 Map, without iterators
DOC.md:202:38    - Unknown word (true)          -- test', 'class1'); // -> true
DOC.md:2031:7    - Unknown word (Pseudo)              -- const PseudoMap: typeof Map;
DOC.md:2036:35   - Unknown word (uses)                -- only string keys, and uses Map if exists.
DOC.md:2036:4    - Unknown word (supports)            -- It supports only string keys, and
DOC.md:2039:17   - Unknown word (Pseudo)              -- const map = new PseudoMap();
DOC.md:2057:5    - Unknown word (peek)                -- peek(): any;
DOC.md:207:13    - Unknown word (manipulation)  -- Element css manipulation.
DOC.md:2088:28   - Unknown word (removing)            -- the first item without removing it.
DOC.md:2096:20   - Unknown word (invoked)             -- |iterator|Function invoked iteration|
DOC.md:2096:28   - Unknown word (iteration)           -- iterator|Function invoked iteration|
DOC.md:2101:1    - Unknown word (Convert)             -- Convert queue to a JavaScript
DOC.md:2135:1    - Unknown word (Inspired)            -- Inspired by the [hashlru algorithm
DOC.md:2135:18   - Unknown word (hashlru)             -- Inspired by the [hashlru algorithm](https://github
DOC.md:2137:16   - Unknown word (same)                -- The api is the same as Lru module.
DOC.md:2137:28   - Unknown word (module)              -- api is the same as Lru module.
DOC.md:2145:4    - Unknown word (Readiness)           -- ## Readiness
DOC.md:2147:1    - Unknown word (Readiness)           -- Readiness manager.
DOC.md:2153:7    - Unknown word (Readiness)           -- class Readiness {
DOC.md:2155:7    - Unknown word (Ready)               -- isReady(tasks: string | string
DOC.md:2156:5    - Unknown word (ready)               -- ready(tasks: string | string
DOC.md:2164:16   - Unknown word (ready)              -- Signal task is ready.
DOC.md:2168:8    - Unknown word (Ready)              -- |tasks|Ready tasks|
DOC.md:2170:5    - Unknown word (ready)              -- ### ready
DOC.md:2172:10   - Unknown word (ready)              -- Register ready callback.
DOC.md:2172:16   - Unknown word (callback)           -- Register ready callback.
DOC.md:2176:18   - Unknown word (listen)             -- |tasks |Tasks to listen
DOC.md:2177:42   - Unknown word (ready)              -- trigger if tasks are ready |
DOC.md:2177:9    - Unknown word (Callback)           -- |fn |Callback to trigger if tasks
DOC.md:2178:17   - Unknown word (that)               -- |return|Promise that will be resolved when
DOC.md:2178:22   - Unknown word (will)               -- return|Promise that will be resolved when ready
DOC.md:2178:30   - Unknown word (resolved)           -- Promise that will be resolved when ready|
DOC.md:2180:7    - Unknown word (Ready)              -- ### isReady
DOC.md:2190:23   - Unknown word (Readiness)          -- const readiness = new Readiness();
DOC.md:2190:7    - Unknown word (readiness)          -- const readiness = new Readiness();
DOC.md:2191:1    - Unknown word (readiness)          -- readiness.ready('serverCreated
DOC.md:2194:1    - Unknown word (readiness)          -- readiness.signal('serverCreated
DOC.md:2195:1    - Unknown word (readiness)          -- readiness.isReady('serverCreated
DOC.md:2195:13   - Unknown word (Ready)              -- readiness.isReady('serverCreated'); /
DOC.md:2200:1    - Unknown word (Simplified)         -- Simplified redux like state container
DOC.md:2200:18   - Unknown word (like)               -- Simplified redux like state container.
DOC.md:2207:17   - Unknown word (reducer)            -- constructor(reducer: types.AnyFn, initialState
DOC.md:2207:39   - Unknown word (initial)            -- reducer: types.AnyFn, initialState: any);
DOC.md:2209:5    - Unknown word (dispatch)           -- dispatch(action: any): any;
DOC.md:221:23    - Unknown word (Plain)         -- properties: types.PlainObj<string | number>
DOC.md:2220:2    - Unknown word (reducer)            -- |reducer |Function returns
DOC.md:2220:24   - Unknown word (returns)            -- reducer |Function returns next state|
DOC.md:2221:15   - Unknown word (Initial)            -- |initialState|Initial state
DOC.md:2221:2    - Unknown word (initial)            -- |initialState|Initial state
DOC.md:2229:11   - Unknown word (Callback)           -- |listener|Callback to invoke on every dispatch
DOC.md:2229:33   - Unknown word (every)              -- Callback to invoke on every dispatch|
DOC.md:2229:39   - Unknown word (dispatch)           -- Callback to invoke on every dispatch|
DOC.md:2232:5    - Unknown word (dispatch)           -- ### dispatch
DOC.md:2234:1    - Unknown word (Dispatch)           -- Dispatch an action.
DOC.md:2238:16   - Unknown word (representing)       -- |action|Object representing changes|
DOC.md:2239:9    - Unknown word (Same)               -- |return|Same action object
DOC.md:2248:15   - Unknown word (INCREMENT)          -- case 'INCREMENT':
DOC.md:2250:15   - Unknown word (DECREMENT)          -- case 'DECREMENT':
DOC.md:2261:25   - Unknown word (INCREMENT)          -- store.dispatch({ type: 'INCREMENT' }); // 1
DOC.md:2262:25   - Unknown word (INCREMENT)          -- store.dispatch({ type: 'INCREMENT' }); // 2
DOC.md:2263:25   - Unknown word (DECREMENT)          -- store.dispatch({ type: 'DECREMENT' }); // 1
DOC.md:2266:10   - Unknown word (Sensor)             -- ## ResizeSensor
DOC.md:2268:30   - Unknown word (changed)            -- if element's size has changed.
DOC.md:2274:13   - Unknown word (Sensor)             -- class ResizeSensor extends SingleEmitter
DOC.md:227:9     - Unknown word (computed)      -- Get the computed style properties for
DOC.md:2294:26   - Unknown word (Sensor)             -- const sensor = new ResizeSensor(target);
DOC.md:2294:7    - Unknown word (sensor)             -- const sensor = new ResizeSensor(target
DOC.md:2295:1    - Unknown word (sensor)             -- sensor.addListener(function
DOC.md:2296:34   - Unknown word (changed)            -- Trigger if element's size changed.
DOC.md:22:45     - Unknown word (handler)     -- string, selector: string, handler: types.AnyFn): $;
DOC.md:2302:1    - Unknown word (Simple)             -- Simple wrapper of querySelectorAll
DOC.md:2302:58   - Unknown word (easier)             -- to make dom selection easier.
DOC.md:2302:8    - Unknown word (wrapper)            -- Simple wrapper of querySelectorAll
DOC.md:2310:5    - Unknown word (find)               -- find(selector: string): Select
DOC.md:2323:5    - Unknown word (find)               -- ### find
DOC.md:2325:5    - Unknown word (desdendants)        -- Get desdendants of current matched elements
DOC.md:2342:8    - Unknown word (Manipulate)         -- // Manipulate dom nodes
DOC.md:2348:7    - Unknown word (simultaneous)       -- Limit simultaneous access to a resource
DOC.md:2355:17   - Unknown word (counter)            -- constructor(counter?: number);
DOC.md:2356:5    - Unknown word (wait)               -- wait(fn: () => void): void
DOC.md:235:12    - Unknown word (more)          -- Set one or more CSS properties for the
DOC.md:2367:12   - Unknown word (Initial)           -- |counter=1|Initial counter|
DOC.md:2367:2    - Unknown word (counter)            -- |counter=1|Initial counter|
DOC.md:2367:20   - Unknown word (counter)           -- |counter=1|Initial counter|
DOC.md:2369:5    - Unknown word (wait)              -- ### wait
DOC.md:2371:1    - Unknown word (Wait)              -- Wait to execute until counter
DOC.md:2371:17   - Unknown word (until)             -- Wait to execute until counter is bigger than
DOC.md:2371:23   - Unknown word (counter)           -- Wait to execute until counter is bigger than 0.
DOC.md:2371:34   - Unknown word (bigger)            -- execute until counter is bigger than 0.
DOC.md:2371:41   - Unknown word (than)              -- until counter is bigger than 0.
DOC.md:2379:1    - Unknown word (Wake)              -- Wake up one waiter if any
DOC.md:2379:13   - Unknown word (waiter)            -- Wake up one waiter if any.
DOC.md:2383:1    - Unknown word (require)           -- require('http')
DOC.md:2385:13   - Unknown word (wait)              -- sem.wait(function() {
DOC.md:2387:16   - Unknown word (Timeout)           -- setTimeout(() => sem.signal(),
DOC.md:2390:6    - Unknown word (listen)            -- .listen(3000);
DOC.md:2395:16   - Unknown word (wrapper)           -- SessionStorage wrapper.
DOC.md:23:27     - Unknown word (handler)     -- on(event: string, handler: types.AnyFn): $;
DOC.md:2424:7    - Unknown word (emitter)           -- Event emitter with single event type
DOC.md:2433:5    - Unknown word (emit)              -- emit(...args: any[]): void
DOC.md:2457:5    - Unknown word (emit)              -- ### emit
DOC.md:2459:1    - Unknown word (Call)              -- Call listeners.
DOC.md:2463:10   - Unknown word (Arguments)         -- |...args|Arguments passed to listener|
DOC.md:2463:20   - Unknown word (passed)            -- |...args|Arguments passed to listener|
DOC.md:2483:1    - Unknown word (Tiny)              -- Tiny WebSocket wrapper.
DOC.md:2483:16   - Unknown word (wrapper)           -- Tiny WebSocket wrapper.
DOC.md:2493:13   - Unknown word (protocols)         -- protocols?: string | string[]
DOC.md:24:46     - Unknown word (handler)     -- string, selector: string, handler: types.AnyFn): $;
DOC.md:2518:17   - Unknown word (Protocol)          -- |protocols |Protocol string
DOC.md:2518:2    - Unknown word (protocols)         -- |protocols |Protocol string
DOC.md:2519:37   - Unknown word (possible)          -- Try to reconnect if possible|
DOC.md:2536:19   - Unknown word (closing)           -- |reason|Reason of closing|
DOC.md:2540:20   - Unknown word (called)            -- Connect WebSocket, called when initialized.
DOC.md:2540:32   - Unknown word (initialized)       -- WebSocket, called when initialized.
DOC.md:2591:27   - Unknown word (removing)          -- the last item without removing it.
DOC.md:2599:20   - Unknown word (invoked)           -- |iterator|Function invoked iteration|
DOC.md:2599:28   - Unknown word (iteration)         -- iterator|Function invoked iteration|
DOC.md:25:28     - Unknown word (handler)     -- off(event: string, handler: types.AnyFn): $;
DOC.md:2604:1    - Unknown word (Convert)           -- Convert the stack to a JavaScript
DOC.md:260:1     - Unknown word (Wrapper)       -- Wrapper of $attr, adds data
DOC.md:260:19    - Unknown word (adds)          -- Wrapper of $attr, adds data- prefix to keys
DOC.md:2616:1    - Unknown word (Simple)            -- Simple state machine.
DOC.md:2623:17   - Unknown word (initial)           -- constructor(initial: string, events: any
DOC.md:2637:10   - Unknown word (Initial)           -- |initial|Initial state         |
DOC.md:2637:2    - Unknown word (initial)           -- |initial|Initial state
DOC.md:2651:33   - Unknown word (pause)             -- from: 'empty', to: 'pause' },
DOC.md:2652:20   - Unknown word (pause)             -- play: { from: 'pause', to: 'play' },
DOC.md:2652:33   - Unknown word (play)              -- from: 'pause', to: 'play' },
DOC.md:2652:5    - Unknown word (play)              -- play: { from: 'pause', to
DOC.md:2653:22   - Unknown word (play)              -- pause: { from: ['play', 'empty'], to: 'pause
DOC.md:2653:44   - Unknown word (pause)             -- play', 'empty'], to: 'pause' },
DOC.md:2653:5    - Unknown word (pause)             -- pause: { from: ['play', 'empty
DOC.md:2654:23   - Unknown word (play)              -- unload: { from: ['play', 'pause'], to: 'empty
DOC.md:2654:31   - Unknown word (pause)             -- unload: { from: ['play', 'pause'], to: 'empty' }
DOC.md:2660:11   - Unknown word (play)              -- state.on('play', function(src) {
DOC.md:2661:30   - Unknown word (eustia)            -- console.log(src); // -> 'eustia'
DOC.md:2666:13   - Unknown word (eustia)            -- state.play('eustia');
DOC.md:2671:1    - Unknown word (Memory)            -- Memory storage.
DOC.md:2698:7    - Unknown word (Initial)           -- |data|Initial data|
DOC.md:2715:26   - Unknown word (whenever)          -- emit a change event whenever is called.
DOC.md:2715:38   - Unknown word (called)            -- change event whenever is called.
DOC.md:2751:16   - Unknown word (invoked)           -- |fn |Function invoked per iteration|
DOC.md:2751:28   - Unknown word (iteration)         -- Function invoked per iteration|
DOC.md:2762:20   - Unknown word (whenever)          -- // It triggers whenever set is called.
DOC.md:2762:36   - Unknown word (called)            -- triggers whenever set is called.
DOC.md:2768:32   - Unknown word (chrome)            -- manipulate and generate chrome tracing data.
DOC.md:2768:39   - Unknown word (tracing)           -- and generate chrome tracing data.
DOC.md:281:26    - Unknown word (eustia)        -- data('#test', 'attr1', 'eustia');
DOC.md:2820:12   - Unknown word (require)           -- const fs = require('fs');
DOC.md:2832:4    - Unknown word (Tracing)          -- ## Tracing
DOC.md:2834:1    - Unknown word (Easily)           -- Easily create chrome tracing
DOC.md:2834:15   - Unknown word (chrome)           -- Easily create chrome tracing data.
DOC.md:2834:22   - Unknown word (tracing)          -- Easily create chrome tracing data.
DOC.md:2840:7    - Unknown word (Tracing)          -- class Tracing {
DOC.md:2854:5    - Unknown word (instant)          -- instant(
DOC.md:286:1     - Unknown word (bind)          -- bind events to certain dom
DOC.md:286:16    - Unknown word (certain)       -- bind events to certain dom elements.
DOC.md:2870:10   - Unknown word (Tracing)          -- |options|Tracing options|
DOC.md:2883:7    - Unknown word (recording)        -- Start recording.
DOC.md:2891:6    - Unknown word (recording)        -- Stop recording and get result events
DOC.md:2901:7    - Unknown word (Arguments)        -- |args|Arguments |
DOC.md:2915:5    - Unknown word (instant)          -- ### instant
DOC.md:2917:8    - Unknown word (instant)          -- Record instant event.
DOC.md:2924:12   - Unknown word (require)          -- const fs = require('fs');
DOC.md:2925:21   - Unknown word (Tracing)          -- const tracing = new Tracing();
DOC.md:2925:7    - Unknown word (tracing)          -- const tracing = new Tracing();
DOC.md:2926:1    - Unknown word (tracing)          -- tracing.start();
DOC.md:2927:1    - Unknown word (tracing)          -- tracing.begin('cat', 'name'
DOC.md:297:9     - Unknown word (handler)       -- handler: types.AnyFn
DOC.md:2988:11   - Unknown word (carpet)           -- trie.add('carpet');
DOC.md:2991:11   - Unknown word (cart)             -- trie.add('cart');
DOC.md:2993:14   - Unknown word (carpet)           -- trie.remove('carpet');
DOC.md:2994:11   - Unknown word (carpet)           -- trie.has('carpet'); // -> false
DOC.md:2995:35   - Unknown word (cart)             -- car'); // -> ['car', 'cart']
DOC.md:2999:4    - Unknown word (Tween)            -- ## Tween
DOC.md:3001:1    - Unknown word (Tween)            -- Tween engine for JavaScript
DOC.md:3007:7    - Unknown word (Tween)            -- class Tween extends Emitter {
DOC.md:3009:20   - Unknown word (duration)         -- to(props: any, duration?: number, ease?: string
DOC.md:3009:39   - Unknown word (ease)             -- duration?: number, ease?: string | Function
DOC.md:3009:66   - Unknown word (Tween)            -- string | Function): Tween;
DOC.md:3009:8    - Unknown word (props)            -- to(props: any, duration?: number
DOC.md:3011:33   - Unknown word (Tween)            -- progress(progress: number): Tween;
DOC.md:3014:5    - Unknown word (paused)           -- paused(): boolean;
DOC.md:3026:17   - Unknown word (tween)            -- |obj |Values to tween|
DOC.md:3032:14   - Unknown word (Final)            -- |destination|Final properties|
DOC.md:3033:2    - Unknown word (duration)         -- |duration |Tween duration
DOC.md:3033:20   - Unknown word (duration)         -- |duration |Tween duration |
DOC.md:3034:2    - Unknown word (ease)             -- |ease |Easing function
DOC.md:3038:7    - Unknown word (playing)          -- Begin playing forward.
DOC.md:3042:1    - Unknown word (Pause)            -- Pause the animation.
DOC.md:3044:5    - Unknown word (paused)           -- ### paused
DOC.md:3046:15   - Unknown word (paused)           -- Get animation paused state.
DOC.md:3059:7    - Unknown word (tween)            -- const tween = new Tween(pos);
DOC.md:3060:1    - Unknown word (tween)            -- tween
DOC.md:3067:1    - Unknown word (tween)            -- tween.to({ x: 100, y: 100
DOC.md:3072:12   - Unknown word (manipulator)      -- Simple url manipulator.
DOC.md:3080:9    - Unknown word (protocol)         -- protocol: string;
DOC.md:3087:9    - Unknown word (slashes)          -- slashes: boolean;
DOC.md:3091:5    - Unknown word (protocol)         -- protocol: string;
DOC.md:3098:5    - Unknown word (slashes)          -- slashes: boolean;
DOC.md:313:15    - Unknown word (Handler)       -- function clickHandler() {
DOC.md:314:11    - Unknown word (something)     -- // Do something...
DOC.md:3159:15   - Unknown word (contains)         -- An url object contains the following properties
DOC.md:3159:28   - Unknown word (following)        -- object contains the following properties:
DOC.md:3163:15   - Unknown word (protocol)         -- |protocol|The protocol scheme of the URL (e
DOC.md:3163:2    - Unknown word (protocol)         -- |protocol|The protocol scheme
DOC.md:3164:2    - Unknown word (slashes)          -- |slashes |A boolean which indicates
DOC.md:3164:27   - Unknown word (indicates)        -- slashes |A boolean which indicates whether the protocol
DOC.md:3164:37   - Unknown word (whether)          -- boolean which indicates whether the protocol is followed
DOC.md:3164:49   - Unknown word (protocol)         -- indicates whether the protocol is followed by two forward
DOC.md:3164:61   - Unknown word (followed)         -- whether the protocol is followed by two forward slashes
DOC.md:3164:85   - Unknown word (slashes)          -- followed by two forward slashes (//)|
DOC.md:3165:11   - Unknown word (Authentication)   -- |auth |Authentication information portion
DOC.md:3167:11   - Unknown word (Optional)         -- |port |Optional port number
DOC.md:3169:11   - Unknown word (Parsed)           -- |query |Parsed object containing query
DOC.md:3169:25   - Unknown word (containing)       -- query |Parsed object containing query string
DOC.md:316:34    - Unknown word (Handler)       -- test', 'click', clickHandler);
DOC.md:3170:45   - Unknown word (including)        -- portion of the URL including the pound-sign (#)
DOC.md:317:35    - Unknown word (Handler)       -- test', 'click', clickHandler);
DOC.md:3211:33   - Unknown word (means)            -- Validation result, true means ok|
DOC.md:3228:40   - Unknown word (length)          -- === 'string' && val.length === 5) return true;
DOC.md:322:16    - Unknown word (different)     -- Insert html on different position.
DOC.md:3230:44   - Unknown word (length)          -- should be a string with length 5';
DOC.md:3239:70   - Unknown word (length)          -- should be a string with length 5';
DOC.md:3245:1    - Unknown word (Weighted)        -- Weighted Round Robin implementation
DOC.md:3245:10   - Unknown word (Round)           -- Weighted Round Robin implementation
DOC.md:3245:16   - Unknown word (Robin)           -- Weighted Round Robin implementation.
DOC.md:3253:19   - Unknown word (weight)          -- set(val: any, weight: number): void;
DOC.md:3269:26   - Unknown word (Weight)          -- a value to the pool. Weight is updated if value
DOC.md:3269:36   - Unknown word (updated)         -- the pool. Weight is updated if value already exists
DOC.md:3269:53   - Unknown word (already)         -- is updated if value already exists.
DOC.md:3274:2    - Unknown word (weight)          -- |weight|Weight of the value
DOC.md:3274:9    - Unknown word (Weight)          -- |weight|Weight of the value|
DOC.md:3278:5    - Unknown word (weight)          -- Get weight of given value.
DOC.md:3283:9    - Unknown word (Weight)          -- |return|Weight of the value|
DOC.md:3311:4    - Unknown word (abbrev)          -- ## abbrev
DOC.md:3313:1    - Unknown word (Calculate)       -- Calculate the set of unique abbreviatio
DOC.md:3313:29   - Unknown word (abbreviations)   -- Calculate the set of unique abbreviations for a given set of strings
DOC.md:3313:62   - Unknown word (strings)         -- reviations for a given set of strings.
DOC.md:3319:10   - Unknown word (abbrev)          -- function abbrev(...names: string[])
DOC.md:332:5     - Unknown word (before)        -- before: $insert.IInsert;
DOC.md:3330:1    - Unknown word (abbrev)          -- abbrev('lina', 'luna');
DOC.md:3336:19   - Unknown word (that)            -- Create a function that invokes once it's called
DOC.md:3336:24   - Unknown word (invokes)         -- Create a function that invokes once it's called n or
DOC.md:3336:42   - Unknown word (called)          -- that invokes once it's called n or more times.
DOC.md:3336:54   - Unknown word (more)            -- once it's called n or more times.
DOC.md:3349:19   - Unknown word (calls)           -- |n |Number of calls before invoked|
DOC.md:3350:21   - Unknown word (restrict)        -- |fn |Function to restrict |
DOC.md:3351:13   - Unknown word (restricted)      -- |return|New restricted function       |
DOC.md:3355:35   - Unknown word (called)          -- Only invoke after fn is called 5 times.
DOC.md:3361:1    - Unknown word (Perform)         -- Perform an asynchronous HTTP
DOC.md:3400:5    - Unknown word (timeout)         -- timeout?: number;
DOC.md:3419:56   - Unknown word (callback)        -- |Success callback |
DOC.md:341:5     - Unknown word (before)        -- ### before
DOC.md:3420:54   - Unknown word (callback)        -- |Error callback |
DOC.md:3421:48   - Unknown word (Callback)        -- |Callback after request     |
DOC.md:3422:2    - Unknown word (timeout)         -- |timeout
DOC.md:3422:56   - Unknown word (timeout)         -- |Request timeout |
DOC.md:3426:1    - Unknown word (Shortcut)        -- Shortcut for type = GET;
DOC.md:3430:1    - Unknown word (Shortcut)        -- Shortcut for type = POST;
DOC.md:3436:19   - Unknown word (callback)        -- |success |Success callback|
DOC.md:343:16    - Unknown word (before)        -- Insert content before elements.
DOC.md:3457:44   - Unknown word (inherited)       -- of object's own and inherited properties.
DOC.md:3466:9    - Unknown word (unenumerable)    -- unenumerable?: boolean;
DOC.md:3471:16   - Unknown word (symbol)          -- options: { symbol: true } & allKeys.IOptions
DOC.md:3472:19   - Unknown word (Symbol)          -- ): Array<string | Symbol>;
DOC.md:3475:18   - Unknown word (symbol)          -- options?: ({ symbol: false } & allKeys.IOptions
DOC.md:3492:2    - Unknown word (unenumerable)    -- |unenumerable=false|Include unenumerable
DOC.md:3492:29   - Unknown word (unenumerable)    -- unenumerable=false|Include unenumerable keys|
DOC.md:3493:2    - Unknown word (symbol)          -- |symbol=false |Include
DOC.md:3493:29   - Unknown word (symbol)          -- false |Include symbol keys      |
DOC.md:3495:40   - Unknown word (retrieved)       -- s prototype won't be retrieved.
DOC.md:34:31     - Unknown word (Plain)       -- css(properties: types.PlainObj<string | number>
DOC.md:3503:4    - Unknown word (ansi)            -- ## ansiColor
DOC.md:3505:1    - Unknown word (Ansi)            -- Ansi colors.
DOC.md:3511:11   - Unknown word (ansi)            -- namespace ansiColor {
DOC.md:3514:7    - Unknown word (ansi)            -- const ansiColor: {
DOC.md:3515:12   - Unknown word (ansi)            -- black: ansiColor.IFn;
DOC.md:3516:10   - Unknown word (ansi)            -- red: ansiColor.IFn;
DOC.md:351:23    - Unknown word (beginning)     -- Insert content to the beginning of elements.
DOC.md:3533:10   - Unknown word (Bright)          -- blackBright: ansiColor.IFn;
DOC.md:3534:8    - Unknown word (Bright)          -- redBright: ansiColor.IFn;
DOC.md:3535:10   - Unknown word (Bright)          -- greenBright: ansiColor.IFn;
DOC.md:3536:11   - Unknown word (Bright)          -- yellowBright: ansiColor.IFn;
DOC.md:3537:9    - Unknown word (Bright)          -- blueBright: ansiColor.IFn;
DOC.md:3570:20   - Unknown word (using)           -- Make an object map using array of strings.
DOC.md:3570:35   - Unknown word (strings)         -- object map using array of strings.
DOC.md:3586:20   - Unknown word (strings)         -- |arr |Array of strings|
DOC.md:3591:7    - Unknown word (need)            -- const needPx = arrToMap([
DOC.md:3592:6    - Unknown word (column)          -- 'column-count',
DOC.md:3593:6    - Unknown word (columns)         -- 'columns',
DOC.md:3594:11   - Unknown word (weight)          -- 'font-weight',
DOC.md:3595:11   - Unknown word (weight)          -- 'line-weight',
DOC.md:3600:14   - Unknown word (column)          -- const key = 'column-count';
DOC.md:3602:5    - Unknown word (need)            -- if (needPx[key]) val += 'px'
DOC.md:3608:15   - Unknown word (emulate)        -- Use Buffer to emulate atob when running in
DOC.md:360:15    - Unknown word (strings)       -- |content|Html strings or element|
DOC.md:3623:4    - Unknown word (average)        -- ## average
DOC.md:3625:5    - Unknown word (average)        -- Get average value of given numbers
DOC.md:3631:10   - Unknown word (average)        -- function average(...numbers: number[
DOC.md:3638:21   - Unknown word (calculate)      -- |numbers|Numbers to calculate|
DOC.md:3639:10   - Unknown word (Average)        -- |return |Average value       |
DOC.md:3642:1    - Unknown word (average)        -- average(5, 3, 1); // -> 3
DOC.md:3647:14   - Unknown word (encoding)       -- Basic base64 encoding and decoding.
DOC.md:3647:27   - Unknown word (decoding)       -- base64 encoding and decoding.
DOC.md:364:31    - Unknown word (licia)         -- before('#test', '<div>licia</div>');
DOC.md:3654:5    - Unknown word (encode)         -- encode(bytes: number[]): string
DOC.md:365:12    - Unknown word (licia)         -- // -> <div>licia</div><div id="test"
DOC.md:3661:5    - Unknown word (encode)         -- ### encode
DOC.md:3663:1    - Unknown word (Turn)           -- Turn a byte array into a
DOC.md:366:30    - Unknown word (licia)         -- after('#test', '<div>licia</div>');
DOC.md:3672:1    - Unknown word (Turn)           -- Turn a base64 string into
DOC.md:367:57    - Unknown word (licia)         -- mark"></div></div><div>licia</div>
DOC.md:3680:8    - Unknown word (encode)         -- base64.encode([168, 174, 155, 255
DOC.md:3686:19   - Unknown word (that)           -- Create a function that invokes less than n
DOC.md:3686:24   - Unknown word (invokes)        -- Create a function that invokes less than n times.
DOC.md:3686:37   - Unknown word (than)           -- function that invokes less than n times.
DOC.md:368:32    - Unknown word (licia)         -- prepend('#test', '<div>licia</div>');
DOC.md:3699:19   - Unknown word (calls)          -- |n |Number of calls at which fn is no longer
DOC.md:3699:43   - Unknown word (longer)         -- calls at which fn is no longer invoked|
DOC.md:3700:21   - Unknown word (restrict)       -- |fn |Function to restrict
DOC.md:3701:13   - Unknown word (restricted)     -- |return|New restricted function
DOC.md:3703:1    - Unknown word (Subsequent)     -- Subsequent calls to the created
DOC.md:3703:12   - Unknown word (calls)          -- Subsequent calls to the created function
DOC.md:3707:31   - Unknown word (call)           -- Allow function to be call 4 times at last.
DOC.md:3710:4    - Unknown word (binary)         -- ## binarySearch
DOC.md:3712:1    - Unknown word (Binary)         -- Binary search implementation
DOC.md:3718:10   - Unknown word (binary)         -- function binarySearch(
DOC.md:3730:18   - Unknown word (seek)           -- |val |Value to seek|
DOC.md:3731:9    - Unknown word (Comparator)     -- |cmp |Comparator |
DOC.md:3735:1    - Unknown word (binary)         -- binarySearch([1, 2, 3], 2)
DOC.md:3736:1    - Unknown word (binary)         -- binarySearch([1, 2], 3); /
DOC.md:3737:1    - Unknown word (binary)         -- binarySearch(
DOC.md:374:5     - Unknown word (offset)        -- ## $offset
DOC.md:3754:4    - Unknown word (bind)           -- ## bind
DOC.md:3756:19   - Unknown word (bound)          -- Create a function bound to a given object.
DOC.md:3762:10   - Unknown word (bind)           -- function bind(
DOC.md:3773:21   - Unknown word (bind)           -- |fn |Function to bind |
DOC.md:3774:14   - Unknown word (binding)        -- |ctx |This binding of given fn|
DOC.md:3775:18   - Unknown word (arguments)      -- |args |Optional arguments |
DOC.md:3775:9    - Unknown word (Optional)       -- |args |Optional arguments      |
DOC.md:3776:13   - Unknown word (bound)          -- |return|New bound function      |
DOC.md:3779:12   - Unknown word (bind)           -- const fn = bind(
DOC.md:3783:14   - Unknown word (eustia)         -- { name: 'eustia' },
DOC.md:3784:13   - Unknown word (utility)        -- 'I am a utility library.'
DOC.md:3784:21   - Unknown word (library)        -- 'I am a utility library.'
DOC.md:3786:29   - Unknown word (utility)        -- -> 'eustia: I am a utility library.'
DOC.md:3786:37   - Unknown word (library)        -- eustia: I am a utility library.'
DOC.md:3791:15   - Unknown word (emulate)        -- Use Buffer to emulate btoa when running in
DOC.md:37:32     - Unknown word (Plain)       -- attr(attributes: types.PlainObj<string>): $;
DOC.md:3822:9    - Unknown word (Comparator)     -- |cmp |Comparator |
DOC.md:382:12    - Unknown word (offset)        -- namespace $offset {
DOC.md:3831:1    - Unknown word (Convert)        -- Convert bytes to string.
DOC.md:3837:38   - Unknown word (encoding)       -- bytesToStr(bytes: number[], encoding?: string): string;
DOC.md:383:16    - Unknown word (Offset)        -- interface IOffset {
DOC.md:3845:16   - Unknown word (Encoding)       -- |encoding=utf8|Encoding of string|
DOC.md:3845:2    - Unknown word (encoding)       -- |encoding=utf8|Encoding of string
DOC.md:3865:1    - Unknown word (Useful)         -- Useful when using CryptoJS
DOC.md:3865:13   - Unknown word (using)          -- Useful when using CryptoJS.
DOC.md:3876:9    - Unknown word (Require)        -- ## cacheRequire
DOC.md:3878:21   - Unknown word (module)         -- Cache everything in module require to speed up
DOC.md:3878:28   - Unknown word (require)        -- everything in module require to speed up app load
DOC.md:3878:39   - Unknown word (speed)          -- in module require to speed up app load.
DOC.md:3878:7    - Unknown word (everything)     -- Cache everything in module require to
DOC.md:3884:15   - Unknown word (Require)        -- function cacheRequire(options?: {
DOC.md:3903:20   - Unknown word (Whether)        -- |requirePath=true |Whether require path should
DOC.md:3903:51   - Unknown word (cached)         -- require path should be cached|
DOC.md:3904:20   - Unknown word (Whether)        -- |code=false |Whether js code should be cached
DOC.md:3904:46   - Unknown word (cached)         -- Whether js code should be cached |
DOC.md:3905:20   - Unknown word (Whether)        -- |compileCache=true|Whether compile cache should
DOC.md:3908:6    - Unknown word (Require)        -- cacheRequire({
DOC.md:390:50    - Unknown word (Offset)        -- safeEls.El): $offset.IOffset;
DOC.md:3913:4    - Unknown word (callbackify)    -- ## callbackify
DOC.md:3915:25   - Unknown word (returns)        -- Convert a function that returns a Promise to a function
DOC.md:3915:57   - Unknown word (following)      -- Promise to a function following the error-first callback
DOC.md:3915:83   - Unknown word (callback)       -- following the error-first callback style.
DOC.md:3921:10   - Unknown word (callbackify)    -- function callbackify(fn: types.AnyFn): types
DOC.md:3928:23   - Unknown word (returns)        -- fn |Function that returns a Promise
DOC.md:3929:18   - Unknown word (following)      -- |return|Function following the error-fist callback
DOC.md:3929:38   - Unknown word (fist)           -- following the error-fist callback style|
DOC.md:3938:14   - Unknown word (callbackify)   -- const cbFn = callbackify(fn);
DOC.md:3960:19   - Unknown word (convert)       -- |str |String to convert |
DOC.md:3961:15   - Unknown word (cased)         -- |return|Camel cased string|
DOC.md:3961:9    - Unknown word (Camel)         -- |return|Camel cased string|
DOC.md:3970:4    - Unknown word (capitalize)    -- ## capitalize
DOC.md:3972:32   - Unknown word (upper)         -- the first character to upper case and the remaining
DOC.md:3972:51   - Unknown word (remaining)     -- to upper case and the remaining to lower case.
DOC.md:3972:64   - Unknown word (lower)         -- and the remaining to lower case.
DOC.md:3978:10   - Unknown word (capitalize)    -- function capitalize(str: string): string
DOC.md:3985:19   - Unknown word (capitalize)    -- |str |String to capitalize|
DOC.md:3986:9    - Unknown word (Capitalized)   -- |return|Capitalized string  |
DOC.md:3989:1    - Unknown word (capitalize)    -- capitalize('rED'); // -> Red
DOC.md:3992:4    - Unknown word (cast)          -- ## castPath
DOC.md:3994:1    - Unknown word (Cast)          -- Cast value into a property
DOC.md:4000:10   - Unknown word (cast)          -- function castPath(path: string | string
DOC.md:4007:18   - Unknown word (inspect)       -- |path |Value to inspect |
DOC.md:4012:1    - Unknown word (cast)          -- castPath('a.b.c'); // ->
DOC.md:4013:1    - Unknown word (cast)          -- castPath(['a']); // -> [
DOC.md:4014:1    - Unknown word (cast)          -- castPath('a[0].b'); // -
DOC.md:4038:16   - Unknown word (aligned)       -- |return|Center aligned string   |
DOC.md:4048:21   - Unknown word (inside)        -- Read cgroup metrics inside container.
DOC.md:4056:9    - Unknown word (stat)          -- stat(): {
DOC.md:4061:5    - Unknown word (cpuset)        -- cpuset: {
DOC.md:4062:9    - Unknown word (cpus)          -- cpus(): {
DOC.md:4066:5    - Unknown word (memory)        -- memory: {
DOC.md:4077:12   - Unknown word (stat)          -- cgroup.cpu.stat();
DOC.md:4080:4    - Unknown word (char)          -- ## char
DOC.md:4082:15   - Unknown word (representing)  -- Return string representing a character whose Unicode
DOC.md:4082:40   - Unknown word (whose)         -- representing a character whose Unicode code point is
DOC.md:4082:46   - Unknown word (Unicode)       -- epresenting a character whose Unicode code point is the given
DOC.md:4088:10   - Unknown word (char)          -- function char(num: number): string
DOC.md:4095:20   - Unknown word (convert)       -- |num |Integer to convert
DOC.md:4096:16   - Unknown word (representing)  -- |return|String representing corresponding char|
DOC.md:4096:29   - Unknown word (corresponding) -- String representing corresponding char|
DOC.md:4096:43   - Unknown word (char)          -- representing corresponding char|
DOC.md:4099:1    - Unknown word (char)          -- char(65); // -> 'A'
DOC.md:40:32     - Unknown word (Plain)       -- data(attributes: types.PlainObj<string>): $;
DOC.md:4100:1    - Unknown word (char)          -- char(97); // -> 'a'
DOC.md:4103:4    - Unknown word (chunk)         -- ## chunk
DOC.md:4105:29   - Unknown word (length)        -- array into groups the length of given size.
DOC.md:4111:10   - Unknown word (chunk)         -- function chunk(arr: any[], size?: number
DOC.md:4119:24   - Unknown word (chunk)         -- size=1|Length of each chunk|
DOC.md:4119:9    - Unknown word (Length)        -- |size=1|Length of each chunk|
DOC.md:4120:9    - Unknown word (Chunks)        -- |return|Chunks of given size|
DOC.md:4123:1    - Unknown word (chunk)         -- chunk([1, 2, 3, 4], 2); /
DOC.md:4124:1    - Unknown word (chunk)         -- chunk([1, 2, 3, 4], 3); /
DOC.md:4128:4    - Unknown word (clamp)         -- ## clamp
DOC.md:4130:1    - Unknown word (Clamp)         -- Clamp number within the inclusive
DOC.md:4130:14   - Unknown word (within)        -- Clamp number within the inclusive lower
DOC.md:4130:25   - Unknown word (inclusive)     -- Clamp number within the inclusive lower and upper bounds
DOC.md:4130:35   - Unknown word (lower)         -- within the inclusive lower and upper bounds.
DOC.md:4130:45   - Unknown word (upper)         -- inclusive lower and upper bounds.
DOC.md:4130:51   - Unknown word (bounds)        -- inclusive lower and upper bounds.
DOC.md:4136:10   - Unknown word (clamp)         -- function clamp(n: number, lower: number
DOC.md:4136:27   - Unknown word (lower)         -- function clamp(n: number, lower: number, upper: number
DOC.md:4136:42   - Unknown word (upper)         -- number, lower: number, upper: number): number;
DOC.md:4137:10   - Unknown word (clamp)         -- function clamp(n: number, upper: number
DOC.md:4137:27   - Unknown word (upper)         -- function clamp(n: number, upper: number): number;
DOC.md:4144:19   - Unknown word (clamp)         -- |n |Number to clamp|
DOC.md:4145:15   - Unknown word (bound)         -- |lower |Lower bound |
DOC.md:4145:2    - Unknown word (lower)         -- |lower |Lower bound    |
DOC.md:4145:9    - Unknown word (Lower)         -- |lower |Lower bound    |
DOC.md:4146:15   - Unknown word (bound)         -- |upper |Upper bound |
DOC.md:4146:2    - Unknown word (upper)         -- |upper |Upper bound    |
DOC.md:4146:9    - Unknown word (Upper)         -- |upper |Upper bound    |
DOC.md:4147:9    - Unknown word (Clamped)       -- |return|Clamped number |
DOC.md:4150:1    - Unknown word (clamp)         -- clamp(-10, -5, 5); // ->
DOC.md:4159:1    - Unknown word (Utility)       -- Utility for conditionally joining
DOC.md:4159:13   - Unknown word (conditionally) -- Utility for conditionally joining class names
DOC.md:4159:27   - Unknown word (joining)       -- Utility for conditionally joining class names.
DOC.md:4173:9    - Unknown word (Joined)        -- |return|Joined class names|
DOC.md:4183:7    - Unknown word (Help)          -- ## cliHelp
DOC.md:4185:12   - Unknown word (help)          -- Output cli help.
DOC.md:4191:14   - Unknown word (Help)          -- namespace cliHelp {
DOC.md:4194:9    - Unknown word (shorthand)     -- shorthand?: string;
DOC.md:4209:13   - Unknown word (Help)          -- function cliHelp(data: cliHelp.IData
DOC.md:4209:27   - Unknown word (Help)          -- function cliHelp(data: cliHelp.IData | cliHelp.ICommand
DOC.md:4209:43   - Unknown word (Help)          -- cliHelp.IData | cliHelp.ICommand): string;
DOC.md:4217:13   - Unknown word (help)          -- |return|Cli help |
DOC.md:4223:15   - Unknown word (module)        -- usage: ['<module-name> [options]', 'lpad
DOC.md:4223:41   - Unknown word (lpad)          -- module-name> [options]', 'lpad --browser'],
DOC.md:4227:13   - Unknown word (shorthand)     -- shorthand: 'b',
DOC.md:4244:10   - Unknown word (shallow)       -- Create a shallow-copied clone of the
DOC.md:4244:18   - Unknown word (copied)        -- Create a shallow-copied clone of the provided
DOC.md:4244:38   - Unknown word (provided)      -- copied clone of the provided plain object.
DOC.md:4244:47   - Unknown word (plain)         -- clone of the provided plain object.
DOC.md:4255:30   - Unknown word (will)          -- nested objects or arrays will be copied by reference
DOC.md:4255:38   - Unknown word (copied)        -- objects or arrays will be copied by reference, not duplicated
DOC.md:4255:5    - Unknown word (nested)        -- Any nested objects or arrays will
DOC.md:4255:63   - Unknown word (duplicated)    -- copied by reference, not duplicated.
DOC.md:4260:9    - Unknown word (Cloned)        -- |return|Cloned value  |
DOC.md:4268:1    - Unknown word (Recursively)   -- Recursively clone value.
DOC.md:4282:14   - Unknown word (cloned)        -- |return|Deep cloned Value|
DOC.md:4282:9    - Unknown word (Deep)          -- |return|Deep cloned Value|
DOC.md:4307:9    - Unknown word (Comparison)    -- |return|Comparison result |
DOC.md:430:26    - Unknown word (every)         -- the HTML contents of every matched element.
DOC.md:4317:4    - Unknown word (combine)       -- ## combine
DOC.md:4319:20   - Unknown word (using)         -- Create an array by using one array for keys and
DOC.md:4319:49   - Unknown word (another)       -- one array for keys and another for its values.
DOC.md:4325:10   - Unknown word (combine)       -- function combine(keys: string[], values
DOC.md:4337:1    - Unknown word (combine)       -- combine(['a', 'b', 'c'], [1
DOC.md:4340:4    - Unknown word (compact)       -- ## compact
DOC.md:4342:50   - Unknown word (removed)       -- with all falsy values removed.
DOC.md:4348:10   - Unknown word (compact)       -- function compact(arr: any[]): any[];
DOC.md:434:9     - Unknown word (combined)      -- Get the combined text contents of each
DOC.md:4353:19   - Unknown word (null)          -- The values false, null, 0, "", undefined, and
DOC.md:4353:32   - Unknown word (undefined)     -- false, null, 0, "", undefined, and NaN are falsey
DOC.md:4353:55   - Unknown word (falsey)        -- undefined, and NaN are falsey.
DOC.md:4357:18   - Unknown word (compact)       -- |arr |Array to compact |
DOC.md:4358:22   - Unknown word (filtered)      -- return|New array of filtered values|
DOC.md:435:11    - Unknown word (including)     -- elements, including their descendants, or
DOC.md:435:21    - Unknown word (their)         -- elements, including their descendants, or set
DOC.md:435:27    - Unknown word (descendants)   -- elements, including their descendants, or set the text contents
DOC.md:4361:1    - Unknown word (compact)       -- compact([0, 1, false, 2, ''
DOC.md:4377:15   - Unknown word (consumes)      -- Each function consumes the return value of
DOC.md:4377:62   - Unknown word (follows)       -- of the function that follows.
DOC.md:4382:9    - Unknown word (Composed)      -- |return|Composed function   |
DOC.md:4385:7    - Unknown word (welcome)       -- const welcome = compose(
DOC.md:4390:23   - Unknown word (Upper)         -- return name.toUpperCase() + '!';
DOC.md:4394:1    - Unknown word (welcome)       -- welcome('licia'); // -> 'hi
DOC.md:4394:30   - Unknown word (LICIA)         -- licia'); // -> 'hi: LICIA!'
DOC.md:4397:4    - Unknown word (compress)      -- ## compressImg
DOC.md:4399:1    - Unknown word (Compress)      -- Compress image using canvas.
DOC.md:4399:16   - Unknown word (using)         -- Compress image using canvas.
DOC.md:4405:10   - Unknown word (compress)      -- function compressImg(
DOC.md:4409:10   - Unknown word (compress)      -- function compressImg(
DOC.md:4417:9    - Unknown word (quality)       -- quality?: number;
DOC.md:441:18    - Unknown word (every)         -- set the value of every matched element.
DOC.md:4429:10   - Unknown word (Callback)      -- |cb |Callback |
DOC.md:4440:2    - Unknown word (quality)       -- |quality=0.8|Image quality, range
DOC.md:4440:20   - Unknown word (quality)       -- |quality=0.8|Image quality, range from 0 to 1|
DOC.md:4442:13   - Unknown word (keep)          -- In order to keep image ratio, height
DOC.md:4442:38   - Unknown word (will)          -- image ratio, height will be ignored when width
DOC.md:4442:46   - Unknown word (ignored)       -- ratio, height will be ignored when width is set.
DOC.md:4444:24   - Unknown word (will)          -- And maxWith, maxHeight will be ignored if width
DOC.md:4444:32   - Unknown word (ignored)       -- maxWith, maxHeight will be ignored if width or height is
DOC.md:4448:1    - Unknown word (compress)      -- compressImg(
DOC.md:4461:8    - Unknown word (multiple)      -- Concat multiple arrays into a single
DOC.md:4475:9    - Unknown word (Concatenated)  -- |return|Concatenated array|
DOC.md:4481:4    - Unknown word (contain)       -- ## contain
DOC.md:4483:23   - Unknown word (present)       -- Check if the value is present in the list.
DOC.md:4489:10   - Unknown word (contain)       -- function contain(arr: any[] | {} | string
DOC.md:4498:26   - Unknown word (present)       -- return|True if value is present in the list|
DOC.md:4501:1    - Unknown word (contain)       -- contain([1, 2, 3], 1); // -
DOC.md:4502:1    - Unknown word (contain)       -- contain({ a: 1, b: 2 }, 1);
DOC.md:4503:1    - Unknown word (contain)       -- contain('abc', 'a'); // -> true
DOC.md:4508:15   - Unknown word (stats)         -- Get container stats inside container.
DOC.md:4508:21   - Unknown word (inside)        -- Get container stats inside container.
DOC.md:4529:4    - Unknown word (convert)       -- ## convertBase
DOC.md:4551:9    - Unknown word (Converted)     -- |return|Converted number |
DOC.md:4576:9    - Unknown word (Binary)        -- |bin |Binary data to convert|
DOC.md:4577:9    - Unknown word (Binary)        -- |type |Binary type           |
DOC.md:4584:41   - Unknown word (directly)      -- Blob to other types directly since it's an asynchronous
DOC.md:4584:50   - Unknown word (since)         -- other types directly since it's an asynchronous
DOC.md:45:9      - Unknown word (toggle)      -- toggleClass(name: string):
DOC.md:4604:16   - Unknown word (handling)      -- Simple api for handling browser cookies.
DOC.md:4604:33   - Unknown word (cookies)      -- for handling browser cookies.
DOC.md:4613:9    - Unknown word (expires)      -- expires?: number;
DOC.md:4635:9    - Unknown word (Corresponding) -- |return|Corresponding cookie value|
DOC.md:4646:10   - Unknown word (Module)        -- |return |Module cookie |
DOC.md:4656:10   - Unknown word (Module)        -- |return |Module cookie |
DOC.md:4666:24   - Unknown word (using)         -- Copy text to clipboard using document.execCommand
DOC.md:4666:39   - Unknown word (exec)          -- clipboard using document.execCommand.
DOC.md:4680:7    - Unknown word (Optional)      -- |cb |Optional callback|
DOC.md:4684:8    - Unknown word (Handle)        -- // Handle errors.
DOC.md:4698:5    - Unknown word (previous)      -- previous?: number
DOC.md:4706:19   - Unknown word (calculate)     -- |input |Data to calculate |
DOC.md:4707:11   - Unknown word (Previous)      -- |previous|Previous CRC1 result|
DOC.md:4707:2    - Unknown word (previous)      -- |previous|Previous CRC1 result
DOC.md:471:1     - Unknown word (Convert)       -- Convert value into an array
DOC.md:4724:5    - Unknown word (previous)      -- previous?: number
DOC.md:4732:19   - Unknown word (calculate)     -- |input |Data to calculate |
DOC.md:4733:11   - Unknown word (Previous)      -- |previous|Previous CRC16 result|
DOC.md:4733:2    - Unknown word (previous)      -- |previous|Previous CRC16 result
DOC.md:4750:5    - Unknown word (previous)      -- previous?: number
DOC.md:4758:19   - Unknown word (calculate)     -- |input |Data to calculate |
DOC.md:4759:11   - Unknown word (Previous)      -- |previous|Previous CRC32 result|
DOC.md:4784:19   - Unknown word (calculate)     -- |input |Data to calculate |
DOC.md:4785:11   - Unknown word (Previous)      -- |previous|Previous CRC8 result|
DOC.md:4815:10   - Unknown word (Assigner)      -- ## createAssigner
DOC.md:4823:16   - Unknown word (Assigner)      -- function createAssigner(
DOC.md:4839:17   - Unknown word (wrapper)       -- CreateObjectURL wrapper.
DOC.md:4860:33   - Unknown word (plain)         -- test', { type: 'text/plain' }); // -> Blob url
DOC.md:4876:47   - Unknown word (indent)        -- object, options?: { indent?: string }): string
DOC.md:487:18    - Unknown word (convert)       -- |val |Value to convert |
DOC.md:4882:10   - Unknown word (will)          -- Comments will be stripped.
DOC.md:4882:18   - Unknown word (stripped)      -- Comments will be stripped.
DOC.md:4891:9    - Unknown word (Parsed)        -- |return|Parsed js object|
DOC.md:4907:2    - Unknown word (indent)        -- |indent=' '|String used to
DOC.md:4907:29   - Unknown word (indent)        -- ' '|String used to indent|
DOC.md:4911:67   - Unknown word (declarations)  -- selector: '.name', declarations: [...]}]}
DOC.md:4917:1    - Unknown word (Calculate)     -- Calculate and compare priority
DOC.md:4929:9    - Unknown word (important)     -- important?: boolean;
DOC.md:4944:16   - Unknown word (contains)      -- Priority array contains five number values.
DOC.md:4944:25   - Unknown word (five)          -- Priority array contains five number values.
DOC.md:4946:4    - Unknown word (Important)     -- 1. Important mark
DOC.md:4961:9    - Unknown word (Comparison)    -- |return|Comparison result  |
DOC.md:4964:27   - Unknown word (icon)          -- cssPriority('a.button > i.icon:before', {
DOC.md:4965:5    - Unknown word (important)     -- important: true,
DOC.md:4971:7    - Unknown word (Supports)      -- ## cssSupports
DOC.md:4973:18   - Unknown word (supports)      -- Check if browser supports a given CSS feature
DOC.md:4979:13   - Unknown word (Supports)      -- function cssSupports(name: string, val?:
DOC.md:4988:17   - Unknown word (supports)      -- |return|True if supports |
DOC.md:4991:25   - Unknown word (flex)          -- cssSupports('display', 'flex'); // -> true
DOC.md:4991:4    - Unknown word (Supports)      -- cssSupports('display', 'flex');
DOC.md:4992:4    - Unknown word (Supports)      -- cssSupports('display', 'invalid
DOC.md:4993:38   - Unknown word (underline)     -- text-decoration-line', 'underline'); // -> true
DOC.md:4993:4    - Unknown word (Supports)      -- cssSupports('text-decoration-line
DOC.md:4998:4    - Unknown word (curry)         -- ## curry
DOC.md:5000:10   - Unknown word (currying)      -- Function currying.
DOC.md:5006:10   - Unknown word (curry)         -- function curry(fn: types.AnyFn): types
DOC.md:5013:21   - Unknown word (curry)         -- |fn |Function to curry |
DOC.md:5014:13   - Unknown word (curried)       -- |return|New curried function|
DOC.md:5017:13   - Unknown word (curry)         -- const add = curry(function(a, b) {
DOC.md:5035:75   - Unknown word (null)          -- base64: boolean } | null;
DOC.md:5053:10   - Unknown word (Parsed)        -- |return |Parsed object  |
DOC.md:5070:14   - Unknown word (Whether)       -- |base64=true|Whether is base64|
DOC.md:5074:87   - Unknown word (plain)         -- World!', mime: 'text/plain', charset: '', base
DOC.md:5075:42   - Unknown word (plain)         -- Hello, World!', 'text/plain'); // -> 'data:,Hello
DOC.md:5080:12   - Unknown word (extremely)     -- Simple but extremely useful date format function
DOC.md:5080:22   - Unknown word (useful)        -- Simple but extremely useful date format function
DOC.md:50:9      - Unknown word (before)      -- before(content: string | Element
DOC.md:5107:16   - Unknown word (Formatted)     -- |return |Formatted duration   |
DOC.md:5107:26   - Unknown word (duration)      -- return |Formatted duration |
DOC.md:5111:27   - Unknown word (digits)        -- Day of the month as digits; no leading zero for
DOC.md:5111:38   - Unknown word (leading)       -- month as digits; no leading zero for single-digit
DOC.md:5111:62   - Unknown word (digit)         -- leading zero for single-digit days|
DOC.md:5111:68   - Unknown word (days)          -- zero for single-digit days|
DOC.md:5112:27   - Unknown word (digits)        -- Day of the month as digits; leading zero for single
DOC.md:5112:35   - Unknown word (leading)       -- the month as digits; leading zero for single-digit
DOC.md:5112:59   - Unknown word (digit)         -- leading zero for single-digit days   |
DOC.md:5112:65   - Unknown word (days)          -- zero for single-digit days |
DOC.md:5114:30   - Unknown word (full)          -- Day of the week as its full name
DOC.md:5115:16   - Unknown word (digits)        -- |m |Month as digits; no leading zero for
DOC.md:5115:27   - Unknown word (leading)       -- Month as digits; no leading zero for single-digit
DOC.md:5115:51   - Unknown word (digit)         -- leading zero for single-digit months         |
DOC.md:5115:57   - Unknown word (months)        -- zero for single-digit months |
DOC.md:5116:16   - Unknown word (digits)        -- |mm |Month as digits; leading zero for single
DOC.md:5116:24   - Unknown word (leading)       -- mm |Month as digits; leading zero for single-digit
DOC.md:5116:48   - Unknown word (digit)         -- leading zero for single-digit months            |
DOC.md:5116:54   - Unknown word (months)        -- zero for single-digit months |
DOC.md:5118:20   - Unknown word (full)          -- |mmmm|Month as its full name
DOC.md:5119:24   - Unknown word (digits)       -- yy |Year as last two digits; leading zero for years
DOC.md:5119:32   - Unknown word (leading)      -- as last two digits; leading zero for years less
DOC.md:5119:49   - Unknown word (years)        -- digits; leading zero for years less than 10     |
DOC.md:5119:60   - Unknown word (than)         -- zero for years less than 10     |
DOC.md:5119:7    - Unknown word (Year)         -- |yy |Year as last two digits;
DOC.md:5120:12   - Unknown word (represented)  -- |yyyy|Year represented by four digits
DOC.md:5120:27   - Unknown word (four)         -- Year represented by four digits
DOC.md:5120:7    - Unknown word (Year)         -- |yyyy|Year represented by four
DOC.md:5121:41   - Unknown word (digit)        -- leading zero for single-digit hours (12-hour clock
DOC.md:5121:47   - Unknown word (hours)        -- zero for single-digit hours (12-hour clock)
DOC.md:5121:57   - Unknown word (hour)         -- single-digit hours (12-hour clock)    |
DOC.md:5121:62   - Unknown word (clock)        -- digit hours (12-hour clock) |
DOC.md:5121:7    - Unknown word (Hours)        -- |h |Hours; no leading zero for
DOC.md:5122:44   - Unknown word (hours)        -- zero for single-digit hours (12-hour clock)
DOC.md:5122:54   - Unknown word (hour)         -- single-digit hours (12-hour clock)       |
DOC.md:5122:59   - Unknown word (clock)        -- digit hours (12-hour clock) |
DOC.md:5122:7    - Unknown word (Hours)        -- |hh |Hours; leading zero for single
DOC.md:5123:47   - Unknown word (hours)        -- zero for single-digit hours (24-hour clock)
DOC.md:5123:57   - Unknown word (hour)         -- single-digit hours (24-hour clock)    |
DOC.md:5123:62   - Unknown word (clock)        -- digit hours (24-hour clock) |
DOC.md:5123:7    - Unknown word (Hours)        -- |H |Hours; no leading zero for
DOC.md:5124:44   - Unknown word (hours)        -- zero for single-digit hours (24-hour clock)
DOC.md:5124:54   - Unknown word (hour)         -- single-digit hours (24-hour clock)       |
DOC.md:5124:59   - Unknown word (clock)        -- digit hours (24-hour clock) |
DOC.md:5124:7    - Unknown word (Hours)        -- |HH |Hours; leading zero for single
DOC.md:5125:49   - Unknown word (minutes)      -- zero for single-digit minutes |
DOC.md:5125:7    - Unknown word (Minutes)      -- |M |Minutes; no leading zero for
DOC.md:5126:46   - Unknown word (minutes)      -- zero for single-digit minutes |
DOC.md:5126:7    - Unknown word (Minutes)      -- |MM |Minutes; leading zero for single
DOC.md:5127:49   - Unknown word (seconds)      -- zero for single-digit seconds |
DOC.md:5127:7    - Unknown word (Seconds)      -- |s |Seconds; no leading zero for
DOC.md:5128:46   - Unknown word (seconds)      -- zero for single-digit seconds |
DOC.md:5128:7    - Unknown word (Seconds)      -- |ss |Seconds; leading zero for single
DOC.md:5129:23   - Unknown word (gives)        -- l L |Milliseconds. l gives 3 digits. L gives 2
DOC.md:5129:41   - Unknown word (gives)        -- l gives 3 digits. L gives 2 digits
DOC.md:5129:7    - Unknown word (Milliseconds) -- |l L |Milliseconds. l gives 3 digits. L
DOC.md:5130:7    - Unknown word (Lowercase)    -- |t |Lowercase, single-character time
DOC.md:5131:7    - Unknown word (Lowercase)    -- |tt |Lowercase, two-character time
DOC.md:5132:7    - Unknown word (Uppercase)    -- |T |Uppercase, single-character time
DOC.md:5133:7    - Unknown word (Uppercase)    -- |TT |Uppercase, two-character time
DOC.md:5134:10   - Unknown word (timezone)     -- |Z |US timezone abbreviation, e.g. EST
DOC.md:5135:15   - Unknown word (timezone)     -- |o |GMT/UTC timezone offset, e.g. -0500 or
DOC.md:5136:18   - Unknown word (ordinal)      -- |S |The date's ordinal suffix (st, nd, rd,
DOC.md:5136:26   - Unknown word (suffix)       -- |The date's ordinal suffix (st, nd, rd, or th)
DOC.md:5137:25   - Unknown word (four)         -- UTC:|Must be the first four characters of the mask
DOC.md:5137:30   - Unknown word (characters)   -- Must be the first four characters of the mask
DOC.md:5137:7    - Unknown word (Must)         -- |UTC:|Must be the first four characters
DOC.md:5147:39   - Unknown word (passed)       -- debounced version of the passed function.
DOC.md:5153:49   - Unknown word (wait)         -- types.AnyFn>(fn: T, wait: number): T;
DOC.md:5161:19   - Unknown word (milliseconds) -- |wait |Number of milliseconds to delay|
DOC.md:5161:2    - Unknown word (wait)         -- |wait |Number of milliseconds
DOC.md:5165:10   - Unknown word (Layout)       -- const calLayout = debounce(function
DOC.md:5166:24   - Unknown word (Layout)       -- $(window).resize(calLayout);
DOC.md:5171:29   - Unknown word (utility)      -- JavaScript debugging utility.
DOC.md:5171:3    - Unknown word (tiny)         -- A tiny JavaScript debugging
DOC.md:5185:21   - Unknown word (print)        -- |return|Function to print decorated log|
DOC.md:5185:27   - Unknown word (decorated)    -- return|Function to print decorated log|
DOC.md:5189:18   - Unknown word (uninteresting) -- d('doing lots of uninteresting work');
DOC.md:5189:4    - Unknown word (doing)        -- d('doing lots of uninteresting
DOC.md:5193:4    - Unknown word (deburr)        -- ## deburr
DOC.md:5195:101  - Unknown word (diacritical)   -- and remove combining diacritical marks.
DOC.md:5195:113  - Unknown word (marks)         -- combining diacritical marks.
DOC.md:5195:17   - Unknown word (Supplement)    -- Convert Latin-1 Supplement and Latin Extended-A
DOC.md:5195:32   - Unknown word (Latin)         -- Latin-1 Supplement and Latin Extended-A letters to
DOC.md:5195:49   - Unknown word (letters)       -- and Latin Extended-A letters to basic Latin letters
DOC.md:5195:66   - Unknown word (Latin)         -- Extended-A letters to basic Latin letters and remove combining
DOC.md:5195:72   - Unknown word (letters)       -- letters to basic Latin letters and remove combining
DOC.md:5195:9    - Unknown word (Latin)         -- Convert Latin-1 Supplement and Latin
DOC.md:5195:91   - Unknown word (combining)     -- Latin letters and remove combining diacritical marks.
DOC.md:5201:10   - Unknown word (deburr)        -- function deburr(str: string): string
DOC.md:5208:19   - Unknown word (deburr)        -- |str |String to deburr|
DOC.md:5209:9    - Unknown word (Deburred)      -- |return|Deburred string |
DOC.md:5212:1    - Unknown word (deburr)        -- deburr('déjà vu'); // -> 'deja
DOC.md:5212:27   - Unknown word (deja)          -- deburr('déjà vu'); // -> 'deja vu'
DOC.md:5212:9    - Unknown word (déjà)          -- deburr('déjà vu'); // -> 'deja vu
DOC.md:5217:1    - Unknown word (Better)        -- Better decodeURIComponent that
DOC.md:5217:32   - Unknown word (does)          -- decodeURIComponent that does not throw if input is
DOC.md:5217:41   - Unknown word (throw)         -- odeURIComponent that does not throw if input is invalid
DOC.md:5231:9    - Unknown word (Decoded)       -- |return|Decoded string  |
DOC.md:5240:1    - Unknown word (Fill)          -- Fill in undefined properties
DOC.md:5240:61   - Unknown word (present)       -- with the first value present in the following list
DOC.md:5240:76   - Unknown word (following)     -- value present in the following list of defaults objects
DOC.md:5240:9    - Unknown word (undefined)     -- Fill in undefined properties in object
DOC.md:5258:22   - Unknown word (Hood)          -- defaults({ name: 'RedHood' }, { name: 'Unknown
DOC.md:5258:40   - Unknown word (Unknown)       -- RedHood' }, { name: 'Unknown', age: 24 }); // ->
DOC.md:5258:79   - Unknown word (Hood)          -- ); // -> {name: 'RedHood', age: 24}
DOC.md:5263:10   - Unknown word (module)        -- Define a module, should be used along
DOC.md:5263:33   - Unknown word (along)         -- module, should be used along with use.
DOC.md:5271:5    - Unknown word (requires)      -- requires: string[],
DOC.md:5281:11   - Unknown word (Module)        -- |name |Module name |
DOC.md:5282:2    - Unknown word (requires)      -- |requires|Dependencies|
DOC.md:5283:11   - Unknown word (Module)        -- |method |Module body |
DOC.md:5285:21   - Unknown word (executed)      -- The module won't be executed until it's used by use
DOC.md:5285:30   - Unknown word (until)         -- module won't be executed until it's used by use function
DOC.md:5298:1    - Unknown word (Shortcut)      -- Shortcut for Object.defineProperty
DOC.md:5322:20   - Unknown word (itself)        -- |return |Object itself |
DOC.md:5328:16   - Unknown word (itself)        -- |return|Object itself |
DOC.md:5340:20   - Unknown word (pointed)       -- // this is pointed to obj.b
DOC.md:535:9     - Unknown word (mean)          -- mean: number;
DOC.md:5367:18   - Unknown word (argument)      -- Return the first argument that is not undefined
DOC.md:5367:39   - Unknown word (undefined)     -- argument that is not undefined.
DOC.md:536:9     - Unknown word (variance)      -- variance: number;
DOC.md:5380:10   - Unknown word (Arguments)     -- |...args|Arguments to check    |
DOC.md:5381:24   - Unknown word (argument)      -- return |First defined argument|
DOC.md:5387:7    - Unknown word (Require)       -- ## delRequireCache
DOC.md:5395:13   - Unknown word (Require)       -- function delRequireCache(id: string): void
DOC.md:5402:7    - Unknown word (Module)        -- |id |Module name or path|
DOC.md:5408:27   - Unknown word (undefined)     -- require('licia').a; // -> undefined
DOC.md:5413:23   - Unknown word (certain)       -- Invoke function after certain milliseconds.
DOC.md:5413:31   - Unknown word (milliseconds)  -- function after certain milliseconds.
DOC.md:5431:20   - Unknown word (milliseconds)  -- |wait |Number of milliseconds to delay invocation
DOC.md:5432:10   - Unknown word (Arguments)     -- |...args|Arguments to invoke fn with
DOC.md:5440:6    - Unknown word (later)         -- 'later'
DOC.md:5442:13   - Unknown word (later)         -- // -> Logs 'later' after one second
DOC.md:5442:30   - Unknown word (second)        -- Logs 'later' after one second
DOC.md:546:5     - Unknown word (constructor)   -- constructor(fn: types.AnyFn, options
DOC.md:5478:15   - Unknown word (Handler)       -- function clickHandler() {
DOC.md:5481:52   - Unknown word (Handler)       -- , '.children', clickHandler);
DOC.md:549:9     - Unknown word (benches)       -- benches: Array<types.AnyFn
DOC.md:54:1      - Unknown word (declare)     -- declare function $(selector
DOC.md:5500:24   - Unknown word (deprecated)    -- fn |Function to be deprecated|
DOC.md:5502:9    - Unknown word (Deprecated)    -- |return|Deprecated function      |
DOC.md:5506:35   - Unknown word (obsolete)      -- obsoleteFn = deprecate(fn, 'obsoleteFn is deprecated.');
DOC.md:5506:49   - Unknown word (deprecated)    -- deprecate(fn, 'obsoleteFn is deprecated.');
DOC.md:5506:7    - Unknown word (obsolete)      -- const obsoleteFn = deprecate(fn, 'obsoleteFn
DOC.md:5507:1    - Unknown word (obsolete)      -- obsoleteFn();
DOC.md:5530:5    - Unknown word (navigator)     -- |ua=navigator.userAgent|Browser userAgent
DOC.md:5531:32   - Unknown word (containing)    -- |Object containing name and version|
DOC.md:5533:1    - Unknown word (Browsers)      -- Browsers supported: ie, chrome
DOC.md:5533:25   - Unknown word (chrome)        -- Browsers supported: ie, chrome, edge, firefox, opera
DOC.md:5533:33   - Unknown word (edge)          -- supported: ie, chrome, edge, firefox, opera, safari
DOC.md:5533:39   - Unknown word (firefox)       -- supported: ie, chrome, edge, firefox, opera, safari, ios
DOC.md:5533:48   - Unknown word (opera)         -- chrome, edge, firefox, opera, safari, ios(mobile
DOC.md:5533:55   - Unknown word (safari)        -- edge, firefox, opera, safari, ios(mobile safari)
DOC.md:5533:74   - Unknown word (safari)        -- safari, ios(mobile safari), android(android browser
DOC.md:5538:21   - Unknown word (about)         -- // Do something about old IE...
DOC.md:5561:8    - Unknown word (operating)     -- Detect operating system using ua.
DOC.md:5574:5    - Unknown word (navigator)     -- |ua=navigator.userAgent|Browser userAgent
DOC.md:5575:25   - Unknown word (Operating)     -- return |Operating system name|
DOC.md:557:5     - Unknown word (constructor)   -- ### constructor
DOC.md:5581:21   - Unknown word (about)         -- // Do something about ios...
DOC.md:5585:4    - Unknown word (difference)    -- ## difference
DOC.md:5587:44   - Unknown word (included)      -- unique array values not included in the other given array
DOC.md:5593:10   - Unknown word (difference)    -- function difference(arr: any[], ...args
DOC.md:5600:19   - Unknown word (inspect)       -- |arr |Array to inspect |
DOC.md:5602:23   - Unknown word (filtered)     -- return |New array of filtered values|
DOC.md:5605:1    - Unknown word (difference)   -- difference([3, 2, 1], [4, 2]);
DOC.md:561:19    - Unknown word (speed)         -- |fn |Code for speed testing|
DOC.md:5624:13   - Unknown word (cased)        -- |return|Dot cased string |
DOC.md:5652:12   - Unknown word (plain)        -- |type=text/plain|Data type       |
DOC.md:5660:20   - Unknown word (helper)       -- Device pixel ratio helper.
DOC.md:5678:1    - Unknown word (Bind)         -- Bind change event.
DOC.md:5682:1    - Unknown word (Unbind)       -- Unbind change event.
DOC.md:568:20    - Unknown word (needed)        -- |minTime=50 |Time needed to reduce uncertainty
DOC.md:568:37    - Unknown word (uncertainty)   -- Time needed to reduce uncertainty |
DOC.md:5695:4    - Unknown word (duration)     -- ## durationFormat
DOC.md:569:15    - Unknown word (Maximum)       -- |maxTime=5000|Maximum time for running benchmark
DOC.md:570:15    - Unknown word (Minimum)       -- |minSamples=5|Minimum sample size
DOC.md:5710:18   - Unknown word (Duration)     -- |duration |Duration to format, millisecond
DOC.md:5710:38   - Unknown word (millisecond)  -- Duration to format, millisecond|
DOC.md:5712:18   - Unknown word (Formatted)    -- |return |Formatted duration
DOC.md:5716:7    - Unknown word (Days)         -- |d |Days |
DOC.md:5717:7    - Unknown word (Hours)        -- |h |Hours |
DOC.md:5718:7    - Unknown word (Minutes)      -- |m |Minutes |
DOC.md:5719:7    - Unknown word (Seconds)      -- |s |Seconds |
DOC.md:5720:7    - Unknown word (Milliseconds) -- |l |Milliseconds|
DOC.md:5729:41   - Unknown word (invokes)      -- elements of collection and invokes iterator for each element
DOC.md:5741:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC.md:5761:18   - Unknown word (adapted)      -- Easing functions adapted from http://jqueryui
DOC.md:5768:12   - Unknown word (percent)      -- linear(percent: number): number;
DOC.md:5769:12   - Unknown word (percent)      -- inQuad(percent: number): number;
DOC.md:5769:7    - Unknown word (Quad)         -- inQuad(percent: number): number
DOC.md:576:16    - Unknown word (returns)       -- Run benchmark, returns a promise.
DOC.md:5770:13   - Unknown word (percent)      -- outQuad(percent: number): number;
DOC.md:5770:8    - Unknown word (Quad)         -- outQuad(percent: number): number
DOC.md:5771:10   - Unknown word (Quad)         -- inOutQuad(percent: number): number
DOC.md:5771:15   - Unknown word (percent)      -- inOutQuad(percent: number): number;
DOC.md:5772:10   - Unknown word (Quad)         -- outInQuad(percent: number): number
DOC.md:5772:15   - Unknown word (percent)      -- outInQuad(percent: number): number;
DOC.md:5773:7    - Unknown word (Cubic)        -- inCubic(percent: number): number
DOC.md:5774:8    - Unknown word (Cubic)        -- outCubic(percent: number): number
DOC.md:5775:7    - Unknown word (Quart)        -- inQuart(percent: number): number
DOC.md:5776:8    - Unknown word (Quart)        -- outQuart(percent: number): number
DOC.md:5777:7    - Unknown word (Quint)        -- inQuint(percent: number): number
DOC.md:5778:8    - Unknown word (Quint)        -- outQuint(percent: number): number
DOC.md:5779:7    - Unknown word (Expo)         -- inExpo(percent: number): number
DOC.md:5780:8    - Unknown word (Expo)         -- outExpo(percent: number): number
DOC.md:5781:7    - Unknown word (Sine)         -- inSine(percent: number): number
DOC.md:5782:8    - Unknown word (Sine)         -- outSine(percent: number): number
DOC.md:5785:32   - Unknown word (elasticity)   -- inElastic(percent: number, elasticity?: number): number;
DOC.md:5786:33   - Unknown word (elasticity)   -- outElastic(percent: number, elasticity?: number): number;
DOC.md:5787:7    - Unknown word (Back)         -- inBack(percent: number): number
DOC.md:5788:8    - Unknown word (Back)         -- outBack(percent: number): number
DOC.md:5789:10   - Unknown word (Back)         -- inOutBack(percent: number): number
DOC.md:5790:10   - Unknown word (Back)         -- outInBack(percent: number): number
DOC.md:5801:10   - Unknown word (Calculated)   -- |return |Calculated number     |
DOC.md:5808:4    - Unknown word (emulate)      -- ## emulateTouch
DOC.md:580:14    - Unknown word (some)          -- [static] Run some benchmarks.
DOC.md:580:19    - Unknown word (benchmarks)    -- [static] Run some benchmarks.
DOC.md:5810:1    - Unknown word (Emulate)      -- Emulate touch events on desktop
DOC.md:5810:33   - Unknown word (browsers)     -- touch events on desktop browsers.
DOC.md:5816:10   - Unknown word (emulate)      -- function emulateTouch(el: Element): void
DOC.md:5827:1    - Unknown word (emulate)      -- emulateTouch(el);
DOC.md:5828:22   - Unknown word (touchstart)   -- el.addEventListener('touchstart', () => {}, false);
DOC.md:5833:17   - Unknown word (ends)         -- Check if string ends with the given target
DOC.md:5839:31   - Unknown word (suffix)       -- endWith(str: string, suffix: string): boolean;
DOC.md:5847:16   - Unknown word (suffix)       -- |suffix|String suffix |
DOC.md:5847:2    - Unknown word (suffix)       -- |suffix|String suffix
DOC.md:5848:24   - Unknown word (ends)         -- return|True if string ends with target|
DOC.md:5856:1    - Unknown word (Escapes)      -- Escapes a string for insertion
DOC.md:5856:22   - Unknown word (insertion)    -- Escapes a string for insertion into HTML, replacing
DOC.md:5856:43   - Unknown word (replacing)    -- insertion into HTML, replacing &, <, >, ", `, and
DOC.md:5856:74   - Unknown word (characters)   -- , <, >, ", `, and ' characters.
DOC.md:5870:9    - Unknown word (Escaped)      -- |return|Escaped string  |
DOC.md:5894:9    - Unknown word (Escaped)      -- |return|Escaped string  |
DOC.md:5902:16   - Unknown word (chars)        -- Escape special chars to be used as literals
DOC.md:5902:36   - Unknown word (literals)     -- chars to be used as literals in RegExp constructors
DOC.md:5902:55   - Unknown word (constructors) -- as literals in RegExp constructors.
DOC.md:5902:8    - Unknown word (special)      -- Escape special chars to be used as
DOC.md:5916:9    - Unknown word (Escaped)      -- |return|Escaped string  |
DOC.md:5967:4    - Unknown word (every)        -- ## every
DOC.md:5975:10   - Unknown word (every)        -- function every<T>(
DOC.md:5981:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC.md:5:23      - Unknown word (manipulator) -- jQuery like style dom manipulator.
DOC.md:5:8       - Unknown word (like)       -- jQuery like style dom manipulator
DOC.md:6022:20   - Unknown word (Hood)         -- extend({ name: 'RedHood' }, { age: 24 }); /
DOC.md:6025:10   - Unknown word (Deep)         -- ## extendDeep
DOC.md:6027:1    - Unknown word (Recursive)    -- Recursive object extending.
DOC.md:6027:18   - Unknown word (extending)    -- Recursive object extending.
DOC.md:6033:16   - Unknown word (Deep)         -- function extendDeep(destination: any, .
DOC.md:6045:7    - Unknown word (Deep)         -- extendDeep(
DOC.md:6049:13   - Unknown word (mother)       -- mother: 'Jane',
DOC.md:6049:22   - Unknown word (Jane)         -- mother: 'Jane',
DOC.md:6055:13   - Unknown word (brother)      -- brother: 'Bruce'
DOC.md:6055:23   - Unknown word (Bruce)        -- brother: 'Bruce'
DOC.md:6059:34   - Unknown word (mother)       -- 'RedHood', family: {mother: 'Jane', father: 'Jack
DOC.md:6059:43   - Unknown word (Jane)         -- , family: {mother: 'Jane', father: 'Jack', brother
DOC.md:6059:66   - Unknown word (brother)      -- Jane', father: 'Jack', brother: 'Bruce'}}
DOC.md:6059:76   - Unknown word (Bruce)        -- father: 'Jack', brother: 'Bruce'}}
DOC.md:6064:1    - Unknown word (Like)         -- Like extend, but only copies
DOC.md:6064:23   - Unknown word (copies)       -- Like extend, but only copies own properties over
DOC.md:6085:16   - Unknown word (Cmts)         -- ## extractBlockCmts
DOC.md:6085:4    - Unknown word (extract)      -- ## extractBlockCmts
DOC.md:6087:1    - Unknown word (Extract)      -- Extract block comments from
DOC.md:6093:10   - Unknown word (extract)      -- function extractBlockCmts(str: string
DOC.md:6093:22   - Unknown word (Cmts)         -- function extractBlockCmts(str: string): string
DOC.md:6100:19   - Unknown word (extract)      -- |str |String to extract|
DOC.md:6104:1    - Unknown word (extract)      -- extractBlockCmts('\/*licia*
DOC.md:6104:13   - Unknown word (Cmts)         -- extractBlockCmts('\/*licia*\/'); //
DOC.md:6107:4    - Unknown word (extract)      -- ## extractUrls
DOC.md:6109:1    - Unknown word (Extract)      -- Extract urls from plain text
DOC.md:611:26    - Unknown word (otherwise)     -- Blob when available, otherwise BlobBuilder.
DOC.md:6127:16   - Unknown word (site)         -- '[Official site: http://eustia.liriliri
DOC.md:6127:7    - Unknown word (Official)     -- '[Official site: http://eustia
DOC.md:6133:1    - Unknown word (Turn)         -- Turn XMLHttpRequest into
DOC.md:6133:34   - Unknown word (like)         -- XMLHttpRequest into promise like.
DOC.md:613:5     - Unknown word (constructor)  -- ### constructor
DOC.md:6148:35   - Unknown word (null)         -- Promise<Document | null>;
DOC.md:6162:9    - Unknown word (timeout)      -- timeout?: number;
DOC.md:6171:36   - Unknown word (pollyfill)    -- not a complete fetch pollyfill.
DOC.md:6182:5    - Unknown word (timeout)      -- timeout: 3000,
DOC.md:6194:4    - Unknown word (fibonacci)    -- ## fibonacci
DOC.md:6196:1    - Unknown word (Calculate)    -- Calculate fibonacci number.
DOC.md:6196:11   - Unknown word (fibonacci)    -- Calculate fibonacci number.
DOC.md:61:1      - Unknown word (offset)      -- offset, hide, show, first,
DOC.md:61:9      - Unknown word (hide)        -- offset, hide, show, first, last,
DOC.md:6202:10   - Unknown word (fibonacci)    -- function fibonacci(n: number): number;
DOC.md:6209:18   - Unknown word (fibonacci)    -- |n |Index of fibonacci sequence|
DOC.md:6209:28   - Unknown word (sequence)     -- |Index of fibonacci sequence|
DOC.md:6210:18   - Unknown word (fibonacci)    -- |return|Expected fibonacci number  |
DOC.md:6210:9    - Unknown word (Expected)     -- |return|Expected fibonacci number  |
DOC.md:6219:1    - Unknown word (Turn)         -- Turn bytes into human readable
DOC.md:6219:17   - Unknown word (human)        -- Turn bytes into human readable file size.
DOC.md:6219:23   - Unknown word (readable)     -- Turn bytes into human readable file size.
DOC.md:6234:9    - Unknown word (Readable)     -- |return|Readable file size|
DOC.md:6236:1    - Unknown word (Turn)         -- Turn human readable file
DOC.md:6236:12   - Unknown word (readable)     -- Turn human readable file size into bytes
DOC.md:6236:6    - Unknown word (human)        -- Turn human readable file size into
DOC.md:6240:9    - Unknown word (Readable)     -- |size |Readable file size|
DOC.md:624:4     - Unknown word (Bloom)        -- ## BloomFilter
DOC.md:6266:7    - Unknown word (undefined)    -- | undefined;
DOC.md:626:1     - Unknown word (Bloom)        -- Bloom filter implementation
DOC.md:626:14    - Unknown word (implementation) -- Bloom filter implementation.
DOC.md:6274:16   - Unknown word (containing)   -- |return|Object containing ext and mime|
DOC.md:62:42     - Unknown word (toggle)      -- addClass, rmClass, toggleClass, hasClass, append
DOC.md:6308:4    - Unknown word (fill)         -- ## fill
DOC.md:6310:1    - Unknown word (Fill)         -- Fill elements of array with
DOC.md:6316:10   - Unknown word (fill)         -- function fill(
DOC.md:6328:26   - Unknown word (fill)         -- list |Array to fill |
DOC.md:6329:26   - Unknown word (fill)         -- |Value to fill array with|
DOC.md:632:7     - Unknown word (Bloom)          -- class BloomFilter {
DOC.md:6332:17   - Unknown word (Filled)       -- |return |Filled array            |
DOC.md:6335:1    - Unknown word (fill)         -- fill([1, 2, 3], '*'); //
DOC.md:633:5     - Unknown word (constructor)    -- constructor(size?: number, k?: number
DOC.md:6341:39   - Unknown word (returning)    -- elements of collection, returning an array of all the
DOC.md:6341:88   - Unknown word (truth)        -- the values that pass a truth test.
DOC.md:6353:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC.md:6376:1    - Unknown word (Find)         -- Find the first value that
DOC.md:6376:27   - Unknown word (passes)       -- the first value that passes a truth test in a collection
DOC.md:6376:36   - Unknown word (truth)        -- value that passes a truth test in a collection
DOC.md:6388:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC.md:63:1      - Unknown word (before)      -- before, after
DOC.md:6401:28   - Unknown word (passes)       -- return |First value that passes predicate|
DOC.md:6407:20   - Unknown word (john)         -- name: 'john',
DOC.md:6411:20   - Unknown word (jane)         -- name: 'jane',
DOC.md:6418:18   - Unknown word (jane)         -- ); // -> {name: 'jane', age: 23}
DOC.md:641:5     - Unknown word (constructor)    -- ### constructor
DOC.md:6423:24   - Unknown word (where)        -- Return the first index where the predicate truth
DOC.md:6423:44   - Unknown word (truth)        -- where the predicate truth test passes.
DOC.md:6423:55   - Unknown word (passes)       -- predicate truth test passes.
DOC.md:6444:20   - Unknown word (john)         -- name: 'john',
DOC.md:6448:20   - Unknown word (jane)         -- name: 'jane',
DOC.md:6460:22   - Unknown word (where)        -- Return the first key where the predicate truth
DOC.md:6460:42   - Unknown word (truth)        -- where the predicate truth test passes.
DOC.md:6460:53   - Unknown word (passes)       -- predicate truth test passes.
DOC.md:6490:23   - Unknown word (where)        -- Return the last index where the predicate truth
DOC.md:6490:43   - Unknown word (truth)        -- where the predicate truth test passes.
DOC.md:6511:20   - Unknown word (john)         -- name: 'john',
DOC.md:6515:20   - Unknown word (jane)         -- name: 'jane',
DOC.md:6519:20   - Unknown word (kitty)       -- name: 'kitty',
DOC.md:6531:1    - Unknown word (Recursively) -- Recursively flatten an array.
DOC.md:6545:13   - Unknown word (flattened)   -- |return|New flattened array|
DOC.md:6553:19   - Unknown word (arguments)   -- Validate function arguments.
DOC.md:6566:8    - Unknown word (Argument)    -- |types|Argument types |
DOC.md:6567:8    - Unknown word (Argument)    -- |args |Argument object|
DOC.md:6569:14   - Unknown word (exception)   -- It throws an exception when validation failed
DOC.md:6569:4    - Unknown word (throws)      -- It throws an exception when validation
DOC.md:6573:57   - Unknown word (arguments)   -- Function', '...number'], arguments);
DOC.md:6579:12   - Unknown word (Throw)       -- test(); // Throw error
DOC.md:6580:26   - Unknown word (Throw)       -- 'test', 'test'); // Throw error
DOC.md:6581:39   - Unknown word (Throw)       -- {}, 5, 'test'); // Throw error
DOC.md:6622:9    - Unknown word (Hast)        -- |return|Hast result   |
DOC.md:6630:27   - Unknown word (like)        -- Format string in a printf-like format.
DOC.md:663:17    - Unknown word (probably)       -- |return|True if probably, false if definitely
DOC.md:663:27    - Unknown word (false)          -- return|True if probably, false if definitely not|
DOC.md:663:36    - Unknown word (definitely)     -- if probably, false if definitely not|
DOC.md:663:9     - Unknown word (True)           -- |return|True if probably, false if
DOC.md:6644:37   - Unknown word (specifiers)  -- Values to replace format specifiers|
DOC.md:6645:12   - Unknown word (Formatted)   -- |return |Formatted string
DOC.md:6647:12   - Unknown word (Specifiers)  -- ### Format Specifiers
DOC.md:6649:2    - Unknown word (Specifier)   -- |Specifier|Desc
DOC.md:6660:4    - Unknown word (fraction)    -- ## fraction
DOC.md:6662:19   - Unknown word (fraction)    -- Convert number to fraction.
DOC.md:6668:10   - Unknown word (fraction)    -- function fraction(num: number): string
DOC.md:666:19    - Unknown word (Bloom)          -- const bloom = new BloomFilter(256, 3);
DOC.md:666:7     - Unknown word (bloom)          -- const bloom = new BloomFilter(2
DOC.md:6676:23   - Unknown word (fraction)      -- return|Corresponding fraction|
DOC.md:6676:9    - Unknown word (Corresponding) -- |return|Corresponding fraction|
DOC.md:6679:1    - Unknown word (fraction)      -- fraction(1.2); // -> '6/5'
DOC.md:667:1     - Unknown word (bloom)          -- bloom.add('Bruce Wayne');
DOC.md:667:12    - Unknown word (Bruce)          -- bloom.add('Bruce Wayne');
DOC.md:667:18    - Unknown word (Wayne)          -- bloom.add('Bruce Wayne');
DOC.md:6682:4    - Unknown word (freeze)        -- ## freeze
DOC.md:6684:21   - Unknown word (freeze)        -- Shortcut for Object.freeze.
DOC.md:668:1     - Unknown word (bloom)          -- bloom.add('Clark Kent');
DOC.md:668:12    - Unknown word (Clark)          -- bloom.add('Clark Kent');
DOC.md:668:18    - Unknown word (Kent)           -- bloom.add('Clark Kent');
DOC.md:6690:10   - Unknown word (freeze)        -- function freeze<T>(obj: T): T;
DOC.md:6695:39   - Unknown word (freeze)        -- defineProperties if Object.freeze is not supported.
DOC.md:6699:19   - Unknown word (freeze)        -- |obj |Object to freeze|
DOC.md:669:1     - Unknown word (bloom)          -- bloom.test('Clark Kent');
DOC.md:669:13    - Unknown word (Clark)          -- bloom.test('Clark Kent'); // -> true
DOC.md:669:19    - Unknown word (Kent)           -- bloom.test('Clark Kent'); // -> true
DOC.md:669:33    - Unknown word (true)           -- Clark Kent'); // -> true
DOC.md:6700:16   - Unknown word (passed)        -- |return|Object passed in|
DOC.md:6709:10   - Unknown word (Deep)          -- ## freezeDeep
DOC.md:670:1     - Unknown word (bloom)          -- bloom.test('Bruce Wayne')
DOC.md:670:13    - Unknown word (Bruce)          -- bloom.test('Bruce Wayne'); // -> true
DOC.md:670:19    - Unknown word (Wayne)          -- bloom.test('Bruce Wayne'); // -> true
DOC.md:670:34    - Unknown word (true)           -- Bruce Wayne'); // -> true
DOC.md:6711:1    - Unknown word (Recursively)   -- Recursively use Object.freeze.
DOC.md:671:13    - Unknown word (Tony)           -- bloom.test('Tony Stark'); // -> false
DOC.md:671:18    - Unknown word (Stark)          -- bloom.test('Tony Stark'); // -> false
DOC.md:671:33    - Unknown word (false)          -- Tony Stark'); // -> false
DOC.md:6725:16   - Unknown word (passed)        -- |return|Object passed in|
DOC.md:6736:1    - Unknown word (Promised)      -- Promised version of node.js fs
DOC.md:6743:28   - Unknown word (encoding)      -- readFile(path: string, encoding: string): Promise<string
DOC.md:6762:6    - Unknown word (catch)         -- .catch(function(err) {
DOC.md:6763:12   - Unknown word (Handle)        -- // Handle errors
DOC.md:676:15    - Unknown word (props)          -- Modify object props without caring about
DOC.md:676:29    - Unknown word (caring)         -- object props without caring about letter case.
DOC.md:676:36    - Unknown word (about)          -- props without caring about letter case.
DOC.md:67:12     - Unknown word (eustia)      -- $btn.html('eustia');
DOC.md:6804:1    - Unknown word (Toggle)        -- Toggle fullscreen.
DOC.md:6839:5    - Unknown word (haystack)      -- haystack: any[],
DOC.md:6841:13   - Unknown word (Sensitive)     -- caseSensitive?: boolean;
DOC.md:6852:2    - Unknown word (haystacks)     -- |haystacks|Search list     |
DOC.md:6859:30   - Unknown word (comparisons)   -- caseSensitive=false|Whether comparisons should be case sensitive
DOC.md:6859:57   - Unknown word (sensitive)     -- comparisons should be case sensitive|
DOC.md:6859:6    - Unknown word (Sensitive)     -- |caseSensitive=false|Whether comparisons
DOC.md:6882:13   - Unknown word (greatest)      -- Compute the greatest common divisor using
DOC.md:6882:43   - Unknown word (Euclid's)      -- common divisor using Euclid's algorithm.
DOC.md:6897:9    - Unknown word (Greatest)      -- |return|Greatest common divisor|
DOC.md:6921:9    - Unknown word (Preferred)     -- |port |Preferred ports|
DOC.md:6925:4    - Unknown word (preferred)     -- If preferred ports are not available
DOC.md:6925:61   - Unknown word (returned)      -- random port will be returned.
DOC.md:6982:4    - Unknown word (golangify)     -- ## golangify
DOC.md:6984:1    - Unknown word (Handle)        -- Handle errors like golang.
DOC.md:6984:15   - Unknown word (like)          -- Handle errors like golang.
DOC.md:6990:10   - Unknown word (golangify)     -- function golangify<T, U = Error>(
DOC.md:6993:10   - Unknown word (golangify)     -- function golangify<T, U = Error>(
DOC.md:7002:23   - Unknown word (returns)       -- fn |Function that returns a Promise
DOC.md:7003:22   - Unknown word (resolves)      -- return|Like fn, but resolves with [result, error
DOC.md:7003:9    - Unknown word (Like)          -- |return|Like fn, but resolves with
DOC.md:7008:22   - Unknown word (resolves)      -- return|Promise that resolves with [result, error
DOC.md:7012:15   - Unknown word (golangify)     -- let fnA = golangify(async () => {
DOC.md:7013:9    - Unknown word (throw)         -- throw Error('err');
DOC.md:7015:5    - Unknown word (await)         -- await fnA(); // -> [undefined
DOC.md:7016:15   - Unknown word (golangify)     -- let fnB = golangify(async num => num *
DOC.md:7017:5    - Unknown word (await)         -- await fnB(2); // -> [4, null
DOC.md:7019:5    - Unknown word (await)         -- await golangify(Promise.reject
DOC.md:7020:5    - Unknown word (await)         -- await golangify(Promise.resolve
DOC.md:702:14    - Unknown word (preserved)      -- Get key with preserved casing.
DOC.md:702:24    - Unknown word (casing)         -- Get key with preserved casing.
DOC.md:7055:6    - Unknown word (inner)         -- 'inner text'
DOC.md:7099:9    - Unknown word (Comparator)    -- |cmp |Comparator |
DOC.md:7108:18   - Unknown word (decoding)      -- Hex encoding and decoding.
DOC.md:7108:5    - Unknown word (encoding)      -- Hex encoding and decoding.
DOC.md:7115:5    - Unknown word (encode)        -- encode(bytes: number[]): string
DOC.md:7122:5    - Unknown word (encode)        -- ### encode
DOC.md:7160:9    - Unknown word (keyword)       -- keyword?: string;
DOC.md:7161:9    - Unknown word (operator)      -- operator?: string;
DOC.md:7172:10   - Unknown word (Keyword)       -- |style |Keyword highlight style
DOC.md:7173:10   - Unknown word (Highlighted)   -- |return |Highlighted html code string|
DOC.md:7177:26   - Unknown word (keyword)       -- comment, string, number, keyword, operator
DOC.md:7177:35   - Unknown word (operator)      -- string, number, keyword, operator
DOC.md:7181:5    - Unknown word (keyword)       -- keyword: 'color:#569cd6;'
DOC.md:7182:25   - Unknown word (keyword)       -- // -> '<span class="keyword" style="color:#569cd
DOC.md:7182:85   - Unknown word (operator)      -- span> a <span class="operator" style="color:#9945
DOC.md:7187:26   - Unknown word (arguments)     -- Monitor, change function arguments and result.
DOC.md:71:11     - Unknown word (something)   -- // Do something...
DOC.md:7209:10   - Unknown word (Hooked)        -- |return |Hooked function |
DOC.md:7222:27   - Unknown word (bigger)        -- throw Error('a is bigger than 100');
DOC.md:7222:34   - Unknown word (than)          -- throw Error('a is bigger than 100');
DOC.md:7222:9    - Unknown word (throw)         -- throw Error('a is bigger than
DOC.md:7242:4    - Unknown word (hotkey)        -- ## hotkey
DOC.md:7244:1    - Unknown word (Capture)       -- Capture keyboard input to trigger
DOC.md:7244:9    - Unknown word (keyboard)      -- Capture keyboard input to trigger given
DOC.md:7250:11   - Unknown word (hotkey)        -- namespace hotkey {
DOC.md:7255:7    - Unknown word (hotkey)        -- const hotkey: {
DOC.md:7256:30   - Unknown word (hotkey)        -- key: string, options: hotkey.IOptions, listener:
DOC.md:7258:31   - Unknown word (hotkey)        -- key: string, options: hotkey.IOptions, listener:
DOC.md:725:18    - Unknown word (given)          -- |return|Value of given key|
DOC.md:7267:10   - Unknown word (keyboard)      -- Register keyboard listener.
DOC.md:7272:11   - Unknown word (Hotkey)        -- |options |Hotkey options|
DOC.md:7283:12   - Unknown word (keyboard)      -- Unregister keyboard listener.
DOC.md:7297:12   - Unknown word (shift)         -- hotkey.on('shift+a, shift+b', keyDown
DOC.md:7297:21   - Unknown word (shift)         -- hotkey.on('shift+a, shift+b', keyDown);
DOC.md:7298:13   - Unknown word (shift)         -- hotkey.off('shift+a', keyDown);
DOC.md:7365:18   - Unknown word (argument)      -- Return the first argument given.
DOC.md:7379:9    - Unknown word (Given)         -- |return|Given value|
DOC.md:737:1     - Unknown word (Determine)      -- Determine whether target object
DOC.md:737:11    - Unknown word (whether)        -- Determine whether target object has given
DOC.md:737:37    - Unknown word (given)          -- whether target object has given key.
DOC.md:7387:34   - Unknown word (occurrence)    -- index at which the first occurrence of value.
DOC.md:7409:4    - Unknown word (indent)       -- ## indent
DOC.md:7411:1    - Unknown word (Indent)       -- Indent each line in a string
DOC.md:7417:10   - Unknown word (indent)       -- function indent(
DOC.md:742:21    - Unknown word (given)          -- |return|True if has given key|
DOC.md:742:9     - Unknown word (True)           -- |return|True if has given key|
DOC.md:7430:9    - Unknown word (Indent)       -- |len |Indent length       |
DOC.md:7431:9    - Unknown word (Indented)     -- |return|Indented string     |
DOC.md:7439:1    - Unknown word (Inherit)      -- Inherit the prototype methods
DOC.md:7439:57   - Unknown word (another)      -- one constructor into another.
DOC.md:7508:30   - Unknown word (formatted)    -- Stringify object into an ini formatted string.
DOC.md:7514:14   - Unknown word (formatted)    -- |return |Ini formatted string|
DOC.md:751:30    - Unknown word (false)          -- content-type'); // -> false
DOC.md:7521:30   - Unknown word (around)       -- whitespace=false|Whitespace around =|
DOC.md:7526:1    - Unknown word (library)      -- library = licia
DOC.md:7529:8    - Unknown word (surunzi)      -- name = surunzi
DOC.md:7530:11   - Unknown word (redhoodsu)    -- alias[] = redhoodsu
DOC.md:7532:12   - Unknown word (library)      -- `); // -> {library: 'licia', user: {info
DOC.md:7532:51   - Unknown word (surunzi)      -- user: {info: {name: 'surunzi', alias: ['redhoodsu
DOC.md:7532:70   - Unknown word (redhoodsu)    -- 'surunzi', alias: ['redhoodsu', 'red']}}}
DOC.md:7537:4    - Unknown word (insertion)    -- ## insertionSort
DOC.md:7539:1    - Unknown word (Insertion)    -- Insertion sort implementation
DOC.md:7545:10   - Unknown word (insertion)    -- function insertionSort(arr: any[], cmp
DOC.md:7557:1    - Unknown word (insertion)    -- insertionSort([2, 1]); // ->
DOC.md:7560:4    - Unknown word (intersect)    -- ## intersect
DOC.md:7568:10   - Unknown word (intersect)    -- function intersect(...arr: Array<any[]
DOC.md:756:1     - Unknown word (Interconnectable) -- Interconnectable Message channel.
DOC.md:7575:19   - Unknown word (inspect)      -- |...arr|Arrays to inspect |
DOC.md:7576:22   - Unknown word (inspecting)   -- return|New array of inspecting values|
DOC.md:7579:1    - Unknown word (intersect)    -- intersect([1, 2, 3, 4], [2, 1
DOC.md:7582:4    - Unknown word (intersect)    -- ## intersectRange
DOC.md:7584:1    - Unknown word (Intersect)    -- Intersect two ranges.
DOC.md:7590:11   - Unknown word (intersect)    -- namespace intersectRange {
DOC.md:762:15    - Unknown word (extends)          -- class Channel extends Emitter {
DOC.md:762:23    - Unknown word (Emitter)          -- class Channel extends Emitter {
DOC.md:7642:32   - Unknown word (throw)        -- true, 'This will not throw');
DOC.md:7644:29   - Unknown word (throw)        -- invariant(false, 'This will throw an error with this message
DOC.md:7648:4    - Unknown word (invert)       -- ## invert
DOC.md:7650:18   - Unknown word (composed)     -- Create an object composed of the inverted keys
DOC.md:7650:34   - Unknown word (inverted)     -- object composed of the inverted keys and values of object
DOC.md:7656:10   - Unknown word (invert)       -- function invert(obj: any): any;
DOC.md:7663:19   - Unknown word (invert)       -- |obj |Object to invert |
DOC.md:7664:13   - Unknown word (inverted)     -- |return|New inverted object|
DOC.md:7666:11   - Unknown word (contains)     -- If object contains duplicate values, subsequent
DOC.md:7666:20   - Unknown word (duplicate)    -- If object contains duplicate values, subsequent values
DOC.md:7666:38   - Unknown word (subsequent)   -- contains duplicate values, subsequent values overwrite property
DOC.md:7666:56   - Unknown word (overwrite)    -- values, subsequent values overwrite property assignments
DOC.md:7669:1    - Unknown word (invert)       -- invert({ a: 'b', c: 'd', e
DOC.md:7672:6    - Unknown word (Absolute)     -- ## isAbsoluteUrl
DOC.md:7674:20   - Unknown word (absolute)     -- Check if an url is absolute.
DOC.md:7680:12   - Unknown word (Absolute)     -- function isAbsoluteUrl(url: string): boolean
DOC.md:7688:24   - Unknown word (absolute)     -- return|True if url is absolute|
DOC.md:7691:3    - Unknown word (Absolute)     -- isAbsoluteUrl('http://www.surunzi
DOC.md:7692:22   - Unknown word (surunzi)      -- isAbsoluteUrl('//www.surunzi.com'); // -> false
DOC.md:7692:3    - Unknown word (Absolute)     -- isAbsoluteUrl('//www.surunzi.com
DOC.md:7693:16   - Unknown word (surunzi)      -- isAbsoluteUrl('surunzi.com'); // -> false
DOC.md:7693:3    - Unknown word (Absolute)     -- isAbsoluteUrl('surunzi.com');
DOC.md:7698:19   - Unknown word (classified)   -- Check if value is classified as an arguments object
DOC.md:7767:9    - Unknown word (Like)         -- ## isArrLike
DOC.md:7775:15   - Unknown word (Like)         -- function isArrLike(val: any): boolean;
DOC.md:77:19     - Unknown word (manipulation) -- Element attribute manipulation.
DOC.md:783:12    - Unknown word (another)          -- Connect to another channel.
DOC.md:7905:27   - Unknown word (almost)       -- if values are close(almost equal) to each other
DOC.md:791:17    - Unknown word (another)          -- Disconnect from another channel.
DOC.md:7927:14   - Unknown word (Relative)     -- |relTol=1e-9|Relative tolerance      |
DOC.md:7927:23   - Unknown word (tolerance)    -- relTol=1e-9|Relative tolerance |
DOC.md:7928:23   - Unknown word (tolerance)    -- absTol=0 |Absolute tolerance |
DOC.md:7938:6    - Unknown word (Cyclic)       -- ## isCyclic
DOC.md:7940:8    - Unknown word (cyclic)       -- Detect cyclic object reference.
DOC.md:7946:12   - Unknown word (Cyclic)       -- function isCyclic(val: any): boolean;
DOC.md:7954:26   - Unknown word (cyclic)       -- return|True if value is cyclic|
DOC.md:7957:3    - Unknown word (Cyclic)       -- isCyclic({}); // -> false
DOC.md:7960:3    - Unknown word (Cyclic)       -- isCyclic(obj); // -> true
DOC.md:7963:10   - Unknown word (Mode)         -- ## isDarkMode
DOC.md:7963:6    - Unknown word (Dark)         -- ## isDarkMode
DOC.md:7965:13   - Unknown word (mode)         -- Detect dark mode.
DOC.md:7965:8    - Unknown word (dark)         -- Detect dark mode.
DOC.md:7971:12   - Unknown word (Dark)         -- function isDarkMode(): boolean;
DOC.md:7971:16   - Unknown word (Mode)         -- function isDarkMode(): boolean;
DOC.md:7977:15   - Unknown word (Dark)         -- console.log(isDarkMode()); // true if dark
DOC.md:7977:19   - Unknown word (Mode)         -- console.log(isDarkMode()); // true if dark
DOC.md:7977:39   - Unknown word (dark)         -- isDarkMode()); // true if dark mode
DOC.md:7977:44   - Unknown word (mode)         -- )); // true if dark mode
DOC.md:799:36    - Unknown word (another)          -- channel is connected to another channel.
DOC.md:8000:44   - Unknown word (Fdvcmxk)      -- plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D'); // -> true
DOC.md:8005:19   - Unknown word (classified)   -- Check if value is classified as a Date object.
DOC.md:8049:33   - Unknown word (inside)       -- the process is running inside a docker container.
DOC.md:804:10    - Unknown word (Whether)          -- |return |Whether it's connected|
DOC.md:8061:48   - Unknown word (inside)       -- -> true if running inside a docker container.
DOC.md:8088:1    - Unknown word (Loosely)      -- Loosely validate an email address
DOC.md:8134:1    - Unknown word (Performs)     -- Performs an optimized deep comparison
DOC.md:8134:13   - Unknown word (optimized)    -- Performs an optimized deep comparison between
DOC.md:8134:23   - Unknown word (deep)         -- Performs an optimized deep comparison between the
DOC.md:8134:28   - Unknown word (comparison)   -- Performs an optimized deep comparison between the two objects
DOC.md:8134:67   - Unknown word (determine)    -- the two objects, to determine if they should be considered
DOC.md:8134:80   - Unknown word (they)         -- objects, to determine if they should be considered
DOC.md:8134:95   - Unknown word (considered)   -- determine if they should be considered equal.
DOC.md:8149:28   - Unknown word (equivalent)   -- return|True if values are equivalent|
DOC.md:8177:6    - Unknown word (Even)        -- ## isEven
DOC.md:8179:20   - Unknown word (even)        -- Check if number is even.
DOC.md:8185:12   - Unknown word (Even)        -- function isEven(num: number): boolean
DOC.md:8193:27   - Unknown word (even)        -- return|True if number is even|
DOC.md:8196:3    - Unknown word (Even)        -- isEven(0); // -> true
DOC.md:8197:3    - Unknown word (Even)        -- isEven(1); // -> false
DOC.md:8198:3    - Unknown word (Even)        -- isEven(2); // -> true
DOC.md:8223:6    - Unknown word (Finite)      -- ## isFinite
DOC.md:8225:21   - Unknown word (finite)      -- Check if value is a finite primitive number.
DOC.md:822:39    - Unknown word (true)             -- isConnected(channelB); // -> true
DOC.md:8231:12   - Unknown word (Finite)      -- function isFinite(val: any): boolean;
DOC.md:8239:28   - Unknown word (finite)      -- return|True if value is a finite number|
DOC.md:8242:3    - Unknown word (Finite)      -- isFinite(3); // -> true
DOC.md:8243:10   - Unknown word (Infinity)    -- isFinite(Infinity); // -> false
DOC.md:8243:3    - Unknown word (Finite)      -- isFinite(Infinity); // -> false
DOC.md:8264:23   - Unknown word (also)        -- Generator function is also classified as true.
DOC.md:8264:28   - Unknown word (classified)  -- Generator function is also classified as true.
DOC.md:8272:6    - Unknown word (Full)        -- ## isFullWidth
DOC.md:8274:23   - Unknown word (full)        -- Check if character is full width.
DOC.md:8280:12   - Unknown word (Full)        -- function isFullWidth(codePoint: number
DOC.md:8287:12   - Unknown word (Unicode)     -- |codePoint|Unicode code point
DOC.md:8288:33   - Unknown word (full)        -- True if character is full width|
DOC.md:8291:3    - Unknown word (Full)        -- isFullWidth('a'.codePointAt
DOC.md:8292:3    - Unknown word (Full)        -- isFullWidth(','.codePointAt
DOC.md:8293:3    - Unknown word (Full)        -- isFullWidth('我'.codePointAt
DOC.md:8353:34   - Unknown word (displayed)   -- true |Check if it is displayed |
DOC.md:8366:20   - Unknown word (classified)  -- Checks if value is classified as a Integer.
DOC.md:8380:26   - Unknown word (correctly)   -- return|True if value is correctly classified|
DOC.md:8380:36   - Unknown word (classified)  -- if value is correctly classified|
DOC.md:838:12    - Unknown word (Constructor)      -- class IConstructor extends Base {
DOC.md:838:24    - Unknown word (extends)          -- class IConstructor extends Base {
DOC.md:840:37    - Unknown word (statics)          -- extend(methods: any, statics: any): IConstructor
DOC.md:840:53    - Unknown word (Constructor)      -- any, statics: any): IConstructor;
DOC.md:842:40    - Unknown word (Constructor)      -- methods(methods: any): IConstructor;
DOC.md:8439:38   - Unknown word (catch)       -- parse()` and a `try... catch` block.
DOC.md:8439:4    - Unknown word (uses)        -- It uses `JSON.parse()` and a
DOC.md:843:16    - Unknown word (statics)          -- static statics(statics: any): IConstructor
DOC.md:843:24    - Unknown word (statics)          -- static statics(statics: any): IConstructor
DOC.md:843:40    - Unknown word (Constructor)      -- statics(statics: any): IConstructor;
DOC.md:8451:10   - Unknown word (Year)        -- ## isLeapYear
DOC.md:8451:6    - Unknown word (Leap)        -- ## isLeapYear
DOC.md:8453:12   - Unknown word (year)        -- Check if a year is a leap year.
DOC.md:8453:22   - Unknown word (leap)        -- Check if a year is a leap year.
DOC.md:8453:27   - Unknown word (year)        -- if a year is a leap year.
DOC.md:8459:12   - Unknown word (Leap)        -- function isLeapYear(year: number): boolean
DOC.md:8459:16   - Unknown word (Year)        -- function isLeapYear(year: number): boolean
DOC.md:8459:21   - Unknown word (year)        -- function isLeapYear(year: number): boolean;
DOC.md:8466:2    - Unknown word (year)        -- |year |Year to check
DOC.md:8466:9    - Unknown word (Year)        -- |year |Year to check
DOC.md:8467:17   - Unknown word (year)        -- |return|True if year is a leap year|
DOC.md:8467:27   - Unknown word (leap)        -- return|True if year is a leap year|
DOC.md:8470:3    - Unknown word (Leap)        -- isLeapYear(2000); // -> true
DOC.md:8471:3    - Unknown word (Leap)        -- isLeapYear(2002); // -> false
DOC.md:847:30    - Unknown word (statics)          -- Class(methods: any, statics?: any): Class.IConstructor
DOC.md:847:53    - Unknown word (Constructor)      -- statics?: any): Class.IConstructor;
DOC.md:84:31     - Unknown word (safe)         -- function remove(element: $safeEls.El, name: string
DOC.md:84:58     - Unknown word (void)         -- safeEls.El, name: string): void;
DOC.md:8511:11   - Unknown word (Weak)        -- isMap(new WeakMap()); // -> false
DOC.md:8516:37   - Unknown word (contained)   -- and values in src are contained in obj.
DOC.md:8529:19   - Unknown word (inspect)     -- |obj |Object to inspect |
DOC.md:8537:10   - Unknown word (Program)     -- ## isMiniProgram
DOC.md:8537:6    - Unknown word (Mini)        -- ## isMiniProgram
DOC.md:8539:21   - Unknown word (wechat)      -- Check if running in wechat mini program.
DOC.md:8539:28   - Unknown word (mini)        -- if running in wechat mini program.
DOC.md:8539:33   - Unknown word (program)     -- running in wechat mini program.
DOC.md:8545:13   - Unknown word (Program)     -- const isMiniProgram: boolean;
DOC.md:8545:9    - Unknown word (Mini)        -- const isMiniProgram: boolean;
DOC.md:8551:15   - Unknown word (Mini)        -- console.log(isMiniProgram); // -> true
DOC.md:8551:19   - Unknown word (Program)     -- console.log(isMiniProgram); // -> true if running
DOC.md:8551:54   - Unknown word (mini)        -- true if running in mini program.
DOC.md:8551:59   - Unknown word (program)     -- true if running in mini program.
DOC.md:8556:7    - Unknown word (whether)     -- Check whether client is using a mobile
DOC.md:855:2     - Unknown word (statics)          -- [statics|Static methods
DOC.md:8569:5    - Unknown word (navigator)   -- |ua=navigator.userAgent|User agent
DOC.md:8570:36   - Unknown word (belongs)     -- |True if ua belongs to mobile browsers|
DOC.md:8570:54   - Unknown word (browsers)    -- ua belongs to mobile browsers|
DOC.md:8573:10   - Unknown word (navigator)   -- isMobile(navigator.userAgent);
DOC.md:8594:1    - Unknown word (Undefined)   -- Undefined is not an NaN, different
DOC.md:8594:26   - Unknown word (different)   -- Undefined is not an NaN, different from global isNaN function
DOC.md:8601:6    - Unknown word (Native)      -- ## isNative
DOC.md:8603:21   - Unknown word (native)      -- Check if value is a native function.
DOC.md:8609:12   - Unknown word (Native)      -- function isNative(val: any): boolean;
DOC.md:8617:28   - Unknown word (native)      -- return|True if value is a native function|
DOC.md:8620:3    - Unknown word (Native)      -- isNative(function() {}); //
DOC.md:8621:3    - Unknown word (Native)      -- isNative(Math.min); // -> true
DOC.md:8626:42   - Unknown word (same)        -- null or undefined, the same as value == null.
DOC.md:864:5     - Unknown word (introduce)        -- introduce: function() {
DOC.md:865:58    - Unknown word (years)            -- ', ' + this.age + ' years old.';
DOC.md:8668:6    - Unknown word (Null)        -- ## isNull
DOC.md:8670:22   - Unknown word (Null)        -- Check if value is an Null.
DOC.md:8676:12   - Unknown word (Null)        -- function isNull(val: any): val is null
DOC.md:8684:29   - Unknown word (Null)        -- True if value is an Null|
DOC.md:8687:3    - Unknown word (Null)        -- isNull(null); // -> true
DOC.md:869:7     - Unknown word (Student)          -- const Student = People.extend(
DOC.md:8706:26   - Unknown word (correctly)   -- return|True if value is correctly classified|
DOC.md:8714:6    - Unknown word (Numeric)     -- ## isNumeric
DOC.md:8716:19   - Unknown word (numeric)     -- Check if value is numeric.
DOC.md:871:30    - Unknown word (Student)          -- initialize: function Student(name, age, school)
DOC.md:8722:12   - Unknown word (Numeric)     -- function isNumeric(val: any): boolean;
DOC.md:872:18    - Unknown word (call)             -- this.callSuper(People, 'initialize
DOC.md:872:50    - Unknown word (arguments)        -- People, 'initialize', arguments);
DOC.md:8730:26   - Unknown word (numeric)     -- return|True if value is numeric|
DOC.md:8733:3    - Unknown word (Numeric)     -- isNumeric(1); // -> true
DOC.md:8734:3    - Unknown word (Numeric)     -- isNumeric('1'); // -> true
DOC.md:8735:3    - Unknown word (Numeric)     -- isNumeric(Number.MAX_VALUE);
DOC.md:8760:11   - Unknown word (Spec)        -- [Language Spec](http://www.ecma-internationa
DOC.md:876:9     - Unknown word (introduce)        -- introduce: function() {
DOC.md:878:22    - Unknown word (call)             -- this.callSuper(People, 'introduce
DOC.md:878:41    - Unknown word (introduce)        -- this.callSuper(People, 'introduce') +
DOC.md:879:23    - Unknown word (study)            -- '\n I study at ' +
DOC.md:87:15     - Unknown word (safe)         -- element: $safeEls.El,
DOC.md:8845:14   - Unknown word (provided)    -- Check if the provided integer is a prime number
DOC.md:887:35    - Unknown word (Student)          -- return obj instanceof Student;
DOC.md:8915:21   - Unknown word (regular)     -- Check if value is a regular expression.
DOC.md:8929:28   - Unknown word (regular)     -- return|True if value is a regular expression|
DOC.md:892:15    - Unknown word (Student)          -- const a = new Student('allen', 17, 'Hogwarts
DOC.md:892:37    - Unknown word (Hogwarts)         -- Student('allen', 17, 'Hogwarts');
DOC.md:8935:6    - Unknown word (Relative)    -- ## isRelative
DOC.md:8937:15   - Unknown word (appears)     -- Check if path appears to be relative.
DOC.md:8937:29   - Unknown word (relative)    -- if path appears to be relative.
DOC.md:893:3     - Unknown word (introduce)        -- a.introduce(); // -> 'I am allen
DOC.md:893:38    - Unknown word (years)            -- -> 'I am allen, 17 years old. \n I study at Hogwarts
DOC.md:893:54    - Unknown word (study)            -- 17 years old. \n I study at Hogwarts.'
DOC.md:893:63    - Unknown word (Hogwarts)         -- years old. \n I study at Hogwarts.'
DOC.md:8943:12   - Unknown word (Relative)    -- function isRelative(path: string): boolean
DOC.md:894:1     - Unknown word (Student)          -- Student.is(a); // -> true
DOC.md:8951:22   - Unknown word (appears)     -- return|True if path appears to be relative|
DOC.md:8951:36   - Unknown word (relative)    -- if path appears to be relative|
DOC.md:8954:3    - Unknown word (Relative)    -- isRelative('README.md'); // ->
DOC.md:8957:6    - Unknown word (Retina)     -- ## isRetina
DOC.md:8959:1    - Unknown word (Determine)  -- Determine if running on a high
DOC.md:8965:9    - Unknown word (Retina)     -- const isRetina: boolean;
DOC.md:8971:15   - Unknown word (Retina)     -- console.log(isRetina); // -> true if high
DOC.md:899:7     - Unknown word (converter)        -- Color converter.
DOC.md:9016:11   - Unknown word (Weak)       -- isSet(new WeakSet()); // -> false
DOC.md:90:4      - Unknown word (void)         -- ): void;
DOC.md:9136:6    - Unknown word (Symbol)     -- ## isSymbol
DOC.md:9138:21   - Unknown word (symbol)     -- Check if value is a symbol.
DOC.md:9144:12   - Unknown word (Symbol)     -- function isSymbol(val: any): val is symbol
DOC.md:9155:10   - Unknown word (Symbol)     -- isSymbol(Symbol('test')); // -> true
DOC.md:9155:3    - Unknown word (Symbol)     -- isSymbol(Symbol('test')); //
DOC.md:9206:1    - Unknown word (Loosely)    -- Loosely validate an url.
DOC.md:9226:6    - Unknown word (Weak)       -- ## isWeakMap
DOC.md:9228:21   - Unknown word (Weak)       -- Check if value is a WeakMap object.
DOC.md:9234:12   - Unknown word (Weak)       -- function isWeakMap(val: any): boolean
DOC.md:926:17    - Unknown word (convert)          -- |color|Color to convert|
DOC.md:92:15     - Unknown word (safe)         -- element: $safeEls.El,
DOC.md:9305:9    - Unknown word (Cloned)     -- |return|Cloned value  |
DOC.md:9313:3    - Unknown word (simple)     -- A simple jsonp implementation
DOC.md:9344:17   - Unknown word (Callback)   -- |param=callback|Callback param        |
DOC.md:9360:4    - Unknown word (kebab)      -- ## kebabCase
DOC.md:9362:20   - Unknown word (kebab)      -- Convert string to "kebabCase".
DOC.md:9368:10   - Unknown word (kebab)      -- function kebabCase(str: string): string
DOC.md:9376:15   - Unknown word (cased)      -- |return|Kebab cased string|
DOC.md:9376:9    - Unknown word (Kebab)      -- |return|Kebab cased string|
DOC.md:9379:1    - Unknown word (kebab)      -- kebabCase('fooBar'); // -
DOC.md:9380:1    - Unknown word (kebab)      -- kebabCase('foo bar'); //
DOC.md:9387:5    - Unknown word (codes)      -- Key codes and key names conversion
DOC.md:93:23     - Unknown word (Plain)        -- attributes: types.PlainObj<string>
DOC.md:9404:9    - Unknown word (Corresponding) -- |return|Corresponding key name|
DOC.md:9411:9    - Unknown word (Corresponding) -- |return|Corresponding key code|
DOC.md:9420:28   - Unknown word (enumerable)    -- an array of the own enumerable property names of object
DOC.md:942:41    - Unknown word (containing)       -- color string into object containing value and model.
DOC.md:9440:4    - Unknown word (kill)          -- ## kill
DOC.md:9442:1    - Unknown word (Kill)          -- Kill process.
DOC.md:9448:10   - Unknown word (kill)          -- function kill(pid: number): void;
DOC.md:9458:1    - Unknown word (kill)          -- kill(9420);
DOC.md:947:16    - Unknown word (containing)       -- |return|Object containing value and model|
DOC.md:9485:16   - Unknown word (lazily)        -- Import modules lazily, Proxy is used.
DOC.md:9485:8    - Unknown word (modules)       -- Import modules lazily, Proxy is used
DOC.md:94:4      - Unknown word (void)         -- ): void;
DOC.md:9501:11   - Unknown word (Actual)        -- |importFn|Actual function to require
DOC.md:9515:17   - Unknown word (lazily)        -- Require modules lazily.
DOC.md:9515:9    - Unknown word (modules)       -- Require modules lazily.
DOC.md:9539:13   - Unknown word (distance)      -- Levenshtein distance implementation.
DOC.md:9553:9    - Unknown word (Second)        -- |b |Second string
DOC.md:9554:21   - Unknown word (distance)      -- |return|Levenshtein distance between a and b|
DOC.md:9560:4    - Unknown word (linkify)       -- ## linkify
DOC.md:9568:10   - Unknown word (linkify)       -- function linkify(str: string, hyperlink
DOC.md:956:4     - Unknown word (Delegator)        -- ## Delegator
DOC.md:9580:14   - Unknown word (Official)      -- const str = 'Official site: http://eustia
DOC.md:9580:23   - Unknown word (site)          -- const str = 'Official site: http://eustia.liriliri
DOC.md:9581:1    - Unknown word (linkify)       -- linkify(str); // -> 'Official
DOC.md:9581:22   - Unknown word (Official)      -- linkify(str); // -> 'Official site: <a href="http
DOC.md:9581:31   - Unknown word (site)          -- str); // -> 'Official site: <a href="http://eustia
DOC.md:9582:1    - Unknown word (linkify)       -- linkify(str, function(url)
DOC.md:9589:1    - Unknown word (Inject)        -- Inject link tag into page with
DOC.md:95:26     - Unknown word (safe)         -- function $attr(element: $safeEls.El, name: string
DOC.md:9606:33   - Unknown word (Loaded)        -- style.css', function(isLoaded) {
DOC.md:9637:1    - Unknown word (Inject)        -- Inject script tag into page
DOC.md:964:7     - Unknown word (Delegator)        -- class Delegator {
DOC.md:9654:30   - Unknown word (Loaded)        -- main.js', function(isLoaded) {
DOC.md:9659:4    - Unknown word (longest)       -- ## longest
DOC.md:9661:9    - Unknown word (longest)       -- Get the longest item in an array.
DOC.md:9667:10   - Unknown word (longest)       -- function longest(arr: string[]): string
DOC.md:966:44    - Unknown word (Delegator)        -- string, target?: string): Delegator;
DOC.md:9674:18   - Unknown word (inspect)       -- |arr |Array to inspect|
DOC.md:9675:9    - Unknown word (Longest)       -- |return|Longest item    |
DOC.md:9678:1    - Unknown word (longest)       -- longest(['a', 'abcde', 'abc
DOC.md:967:44    - Unknown word (Delegator)        -- string, target?: string): Delegator;
DOC.md:9681:4    - Unknown word (lower)         -- ## lowerCase
DOC.md:968:44    - Unknown word (Delegator)        -- string, target?: string): Delegator;
DOC.md:9697:15   - Unknown word (cased)         -- |return|Lower cased string|
DOC.md:9697:9    - Unknown word (Lower)         -- |return|Lower cased string|
DOC.md:9703:4    - Unknown word (lpad)          -- ## lpad
DOC.md:9705:37   - Unknown word (shorter)       -- the left side if it's shorter than length.
DOC.md:9705:45   - Unknown word (than)          -- side if it's shorter than length.
DOC.md:9711:10   - Unknown word (lpad)          -- function lpad(str: string, len: number
DOC.md:9711:41   - Unknown word (chars)         -- string, len: number, chars?: string): string;
DOC.md:9719:9    - Unknown word (Padding)       -- |len |Padding length        |
DOC.md:9720:2    - Unknown word (chars)         -- |chars |String used as padding
DOC.md:9720:24   - Unknown word (padding)       -- chars |String used as padding|
DOC.md:9724:1    - Unknown word (lpad)          -- lpad('a', 5); // -> '
DOC.md:9725:1    - Unknown word (lpad)          -- lpad('a', 5, '-'); // ->
DOC.md:9727:30   - Unknown word (ababc)         -- abc', 5, 'ab'); // -> 'ababc'
DOC.md:9730:4    - Unknown word (ltrim)         -- ## ltrim
DOC.md:9732:23   - Unknown word (spaces)        -- Remove chars or white-spaces from beginning of string
DOC.md:9732:35   - Unknown word (beginning)     -- or white-spaces from beginning of string.
DOC.md:9732:8    - Unknown word (chars)         -- Remove chars or white-spaces from
DOC.md:9738:10   - Unknown word (ltrim)         -- function ltrim(str: string, chars?
DOC.md:9738:29   - Unknown word (chars)         -- function ltrim(str: string, chars?: string | string[]
DOC.md:9745:19   - Unknown word (trim)          -- |str |String to trim |
DOC.md:9746:23   - Unknown word (trim)          -- chars |Characters to trim|
DOC.md:9746:9    - Unknown word (Characters)    -- |chars |Characters to trim|
DOC.md:9747:9    - Unknown word (Trimmed)       -- |return|Trimmed string    |
DOC.md:9750:1    - Unknown word (ltrim)         -- ltrim(' abc  '); // -> 'abc
DOC.md:9751:1    - Unknown word (ltrim)         -- ltrim('_abc_', '_'); // -
DOC.md:9752:1    - Unknown word (ltrim)         -- ltrim('_abc_', ['a', '_']
DOC.md:9769:19   - Unknown word (Dictionary)    -- object: types.Dictionary<T>,
DOC.md:9782:15   - Unknown word (mapped)        -- |return |New mapped array
DOC.md:9812:15   - Unknown word (mapped)        -- |return |New mapped object
DOC.md:9820:4    - Unknown word (matcher)       -- ## matcher
DOC.md:9822:54   - Unknown word (contained)     -- checks if attrs are contained in an object.
DOC.md:9828:10   - Unknown word (matcher)       -- function matcher(attrs: any): types.AnyFn
DOC.md:9845:17   - Unknown word (matcher)       -- filter(objects, matcher({ a: 4, c: 6 })); /
DOC.md:9850:5    - Unknown word (maximum)       -- Get maximum value of given numbers
DOC.md:9864:9    - Unknown word (Maximum)       -- |return|Maximum value       |
DOC.md:9894:1    - Unknown word (Memory)        -- Memory-backed implementation
DOC.md:9894:8    - Unknown word (backed)        -- Memory-backed implementation of the
DOC.md:9905:3    - Unknown word (replacement)   -- A replacement for environments where
DOC.md:9905:32   - Unknown word (where)         -- replacement for environments where localStorage or sessionStorag
DOC.md:9914:29   - Unknown word (caching)       -- a given function by caching the computed result
DOC.md:9914:41   - Unknown word (computed)      -- function by caching the computed result.
DOC.md:9930:21   - Unknown word (have)          -- |fn |Function to have its output memoized
DOC.md:9942:30   - Unknown word (together)      -- the contents of arrays together into the first array
DOC.md:9981:23   - Unknown word (place)         -- Note: It's not an "in-place" sort.
DOC.md:9995:15   - Unknown word (manipulation)  -- Document meta manipulation, turn name and content
DOC.md:9995:29   - Unknown word (turn)          -- Document meta manipulation, turn name and content into
DOC_CN.md:10022:2   - Unknown word (metas)      -- |metas|包含所有 meta 键值对的对象|
DOC_CN.md:1011:7    - Unknown word (delegator)   -- const delegator = new Delegator(host
DOC_CN.md:1012:1    - Unknown word (delegator)   -- delegator
DOC_CN.md:10132:32  - Unknown word (mode)       -- function sync(dir: string, mode?: number): void;
DOC_CN.md:10136:5   - Unknown word (mode)       -- mode?: number,
DOC_CN.md:10147:2   - Unknown word (mode)       -- |mode=0777|文件夹模式|
DOC_CN.md:10157:23  - Unknown word (Done)       -- else console.log('Done');
DOC_CN.md:10175:11  - Unknown word (Leap)       -- isLeapYear(): boolean;
DOC_CN.md:10175:15  - Unknown word (Year)       -- isLeapYear(): boolean;
DOC_CN.md:10176:11  - Unknown word (Same)       -- isSame(that: M): boolean;
DOC_CN.md:10176:16  - Unknown word (that)       -- isSame(that: M): boolean;
DOC_CN.md:10178:11  - Unknown word (Before)     -- isBefore(that: M): boolean;
DOC_CN.md:10178:18  - Unknown word (that)       -- isBefore(that: M): boolean;
DOC_CN.md:10179:17  - Unknown word (that)       -- isAfter(that: M): boolean;
DOC_CN.md:10180:9   - Unknown word (year)       -- year(): number;
DOC_CN.md:10181:9   - Unknown word (year)       -- year(number): M;
DOC_CN.md:10186:9   - Unknown word (hour)       -- hour(): number;
DOC_CN.md:10187:9   - Unknown word (hour)       -- hour(number): M;
DOC_CN.md:10190:9   - Unknown word (second)     -- second(): number;
DOC_CN.md:10191:9   - Unknown word (second)     -- second(number): M;
DOC_CN.md:10192:9   - Unknown word (millisecond) -- millisecond(): number;
DOC_CN.md:10193:9   - Unknown word (millisecond) -- millisecond(number): M;
DOC_CN.md:10205:9   - Unknown word (days)        -- daysInMonth(): number;
DOC_CN.md:10207:9   - Unknown word (subtract)    -- subtract(num: number, unit: string
DOC_CN.md:10220:29  - Unknown word (Same)        -- isValid，isLeapYear，isSame，isBefore，isAfter，year
DOC_CN.md:10220:36  - Unknown word (Before)      -- isLeapYear，isSame，isBefore，isAfter，year，
DOC_CN.md:10220:51  - Unknown word (year)        -- isSame，isBefore，isAfter，year，
DOC_CN.md:10221:12  - Unknown word (hour)        -- month，date，hour，minute，second，millisecond
DOC_CN.md:10221:24  - Unknown word (second)      -- month，date，hour，minute，second，millisecond，unix，clone
DOC_CN.md:10221:31  - Unknown word (millisecond) -- date，hour，minute，second，millisecond，unix，clone，
DOC_CN.md:10223:19  - Unknown word (subtract)    -- startOf，endOf，add，subtract，diff
DOC_CN.md:10227:6   - Unknown word (quarter)     -- 时区以及 quarter 和 week 单位。
DOC_CN.md:10235:4   - Unknown word (morph)       -- ## morphDom
DOC_CN.md:10243:10  - Unknown word (morph)       -- function morphDom(from: Node, to: Node
DOC_CN.md:10259:1   - Unknown word (morph)       -- morphDom(el1, el2);
DOC_CN.md:10263:4   - Unknown word (morse)       -- ## morse
DOC_CN.md:1026:4    - Unknown word (Dispatcher)  -- ## Dispatcher
DOC_CN.md:10271:7   - Unknown word (morse)       -- const morse: {
DOC_CN.md:10273:12  - Unknown word (morse)       -- decode(morse: string): string;
DOC_CN.md:10294:2   - Unknown word (morse)       -- |morse|摩尔斯电码|
DOC_CN.md:10298:13  - Unknown word (morse)       -- const str = morse.encode('Hello, world
DOC_CN.md:1034:7    - Unknown word (Dispatcher)  -- class Dispatcher {
DOC_CN.md:10353:9   - Unknown word (comparator)  -- comparator(a: any, b: any): number
DOC_CN.md:1035:14   - Unknown word (payload)     -- dispatch(payload: any);
DOC_CN.md:1035:5    - Unknown word (dispatch)    -- dispatch(payload: any);
DOC_CN.md:10372:4   - Unknown word (negate)      -- ## negate
DOC_CN.md:10380:10  - Unknown word (negate)      -- function negate<T extends types.AnyFn
DOC_CN.md:10391:10  - Unknown word (even)        -- function even(n) {
DOC_CN.md:10394:27  - Unknown word (negate)      -- 3, 4, 5, 6].filter(negate(even)); // -> [1, 3
DOC_CN.md:10394:34  - Unknown word (even)        -- 5, 6].filter(negate(even)); // -> [1, 3, 5]
DOC_CN.md:10397:8   - Unknown word (Tick)        -- ## nextTick
DOC_CN.md:10399:26  - Unknown word (tick)        -- 行在 node 和浏览器端的 next tick 实现。
DOC_CN.md:1039:7    - Unknown word (Dispatching) -- isDispatching(): boolean;
DOC_CN.md:10405:14  - Unknown word (Tick)        -- function nextTick(cb: types.AnyFn): void
DOC_CN.md:10414:18  - Unknown word (Tick)        -- 如果支持 process.nextTick，则调用它，否则使用 setImmediate
DOC_CN.md:10414:36  - Unknown word (Immediate)   -- nextTick，则调用它，否则使用 setImmediate 或 setTimeout 进行兼容。
DOC_CN.md:10414:51  - Unknown word (Timeout)     -- 用 setImmediate 或 setTimeout 进行兼容。
DOC_CN.md:10417:5   - Unknown word (Tick)        -- nextTick(function() {
DOC_CN.md:10436:12  - Unknown word (Does)        -- noop(); // Does nothing
DOC_CN.md:10436:17  - Unknown word (nothing)     -- noop(); // Does nothing
DOC_CN.md:1048:24   - Unknown word (Dispatcher)  -- const dispatcher = new Dispatcher();
DOC_CN.md:1048:7    - Unknown word (dispatcher)  -- const dispatcher = new Dispatcher();
DOC_CN.md:10496:9   - Unknown word (country)     -- countryCode: number;
DOC_CN.md:10497:9   - Unknown word (trunk)       -- trunkPrefix?: boolean;
DOC_CN.md:1050:1    - Unknown word (dispatcher)  -- dispatcher.register(function(payload
DOC_CN.md:1050:30   - Unknown word (payload)     -- dispatcher.register(function(payload) {
DOC_CN.md:10514:2   - Unknown word (country)     -- |countryCode|国家代码|
DOC_CN.md:10515:2   - Unknown word (trunk)       -- |trunkPrefix=false|如果本地格式有
DOC_CN.md:10519:5   - Unknown word (country)     -- countryCode: 86
DOC_CN.md:10522:5   - Unknown word (country)     -- countryCode: 1
DOC_CN.md:10525:5   - Unknown word (country)     -- countryCode: 44,
DOC_CN.md:10526:5   - Unknown word (trunk)       -- trunkPrefix: true
DOC_CN.md:1052:9    - Unknown word (payload)     -- payload.actionType
DOC_CN.md:1053:15   - Unknown word (something)   -- // Do something
DOC_CN.md:1058:1    - Unknown word (dispatcher)  -- dispatcher.dispatch({
DOC_CN.md:1058:12   - Unknown word (dispatch)    -- dispatcher.dispatch({
DOC_CN.md:1063:4    - Unknown word (Emitter)     -- ## Emitter
DOC_CN.md:1065:16   - Unknown word (emitter)     -- 提供观察者模式的 Event emitter 类。
DOC_CN.md:10663:27  - Unknown word (invoked)     -- initOnce(); // -> init is invoked once
DOC_CN.md:10698:5   - Unknown word (multiple)    -- multiple?: boolean;
DOC_CN.md:10714:2   - Unknown word (multiple)    -- |multiple=false|是否支持多选|
DOC_CN.md:10717:12  - Unknown word (multiple)    -- openFile({ multiple: true }).then(fileList
DOC_CN.md:1071:7    - Unknown word (Emitter)     -- class Emitter {
DOC_CN.md:10722:4   - Unknown word (optimize)    -- ## optimizeCb
DOC_CN.md:1072:47   - Unknown word (Emitter)     -- listener: types.AnyFn): Emitter;
DOC_CN.md:10730:10  - Unknown word (optimize)    -- function optimizeCb(
DOC_CN.md:10739:4   - Unknown word (ordinal)     -- ## ordinal
DOC_CN.md:1073:48   - Unknown word (Emitter)     -- listener: types.AnyFn): Emitter;
DOC_CN.md:10747:10  - Unknown word (ordinal)     -- function ordinal(num: number): string
DOC_CN.md:10758:1   - Unknown word (ordinal)     -- ordinal(1); // -> '1st'
DOC_CN.md:10759:1   - Unknown word (ordinal)     -- ordinal(2); // -> '2nd'
DOC_CN.md:1075:5    - Unknown word (emit)        -- emit(event: string, ...args
DOC_CN.md:10790:13  - Unknown word (landscape)   -- 获取当前屏幕方向（横屏 landscape 或 竖屏 portrait）。
DOC_CN.md:10790:28  - Unknown word (portrait)    -- 向（横屏 landscape 或 竖屏 portrait）。
DOC_CN.md:10794:36  - Unknown word (portrait)    -- log(direction); // -> 'portrait'
DOC_CN.md:10796:27  - Unknown word (landscape)   -- orientation.get(); // -> 'landscape'
DOC_CN.md:10807:40  - Unknown word (chars)       -- string, len: number, chars?: string): string;
DOC_CN.md:10823:29  - Unknown word (babca)       -- abc', 5, 'ab'); // -> 'babca'
DOC_CN.md:10824:28  - Unknown word (ababa)       -- ab', 5, 'ab'); // -> 'ababa'
DOC_CN.md:10871:16  - Unknown word (Timeout)     -- setTimeout(function() {
DOC_CN.md:10876:16  - Unknown word (Timeout)     -- setTimeout(function() {
DOC_CN.md:10899:9   - Unknown word (shorthands)  -- shorthands: any;
DOC_CN.md:10917:2   - Unknown word (shorthands)  -- |shorthands|选项名缩写|
DOC_CN.md:10925:5   - Unknown word (shorthands)  -- shorthands: {
DOC_CN.md:10930:8   - Unknown word (remain)      -- // -> {remain: ['eustia'], output
DOC_CN.md:10943:5   - Unknown word (handlers)    -- handlers: {
DOC_CN.md:10944:43  - Unknown word (unary)       -- string, attrs: any, unary: boolean) => void;
DOC_CN.md:10961:25  - Unknown word (unary)       -- start: (tag, attrs, unary) => {},
DOC_CN.md:10968:4   - Unknown word (partial)     -- ## partial
DOC_CN.md:10970:15  - Unknown word (bind)        -- 返回局部填充参数的函数，与 bind 模块相似。
DOC_CN.md:10976:10  - Unknown word (partial)     -- function partial(
DOC_CN.md:10978:8   - Unknown word (partials)    -- ...partials: any[]
DOC_CN.md:10987:5   - Unknown word (partials)    -- |...partials|局部填充参数|
DOC_CN.md:10991:14  - Unknown word (partial)     -- const sub5 = partial(function(a, b) {
DOC_CN.md:10:13     - Unknown word (extends)    -- class $ extends Select {
DOC_CN.md:1100:5    - Unknown word (emit)        -- ### emit
DOC_CN.md:11073:4   - Unknown word (pipe)        -- ## pipe
DOC_CN.md:11082:10  - Unknown word (pipe)        -- function pipe(...streams: stream.Stream
DOC_CN.md:11094:1   - Unknown word (pipe)        -- pipe(
DOC_CN.md:11104:4   - Unknown word (pluck)       -- ## pluck
DOC_CN.md:11112:10  - Unknown word (pluck)       -- function pluck(object: any, key: string
DOC_CN.md:11124:7   - Unknown word (stooges)     -- const stooges = [
DOC_CN.md:11126:14  - Unknown word (larry)       -- { name: 'larry', age: 50 },
DOC_CN.md:11127:14  - Unknown word (curly)       -- { name: 'curly', age: 60 }
DOC_CN.md:11129:1   - Unknown word (pluck)       -- pluck(stooges, 'name'); /
DOC_CN.md:11129:40  - Unknown word (larry)       -- name'); // -> ['moe', 'larry', 'curly']
DOC_CN.md:11129:49  - Unknown word (curly)       -- > ['moe', 'larry', 'curly']
DOC_CN.md:11129:7   - Unknown word (stooges)     -- pluck(stooges, 'name'); // -> ['moe
DOC_CN.md:11151:30  - Unknown word (pointerdown) -- pointerEvent('down'); // -> 'pointerdown' if supported
DOC_CN.md:11225:14  - Unknown word (emphasis)    -- prefix('text-emphasis'); // -> 'WebkitTextEmphasis
DOC_CN.md:11225:43  - Unknown word (Emphasis)    -- ); // -> 'WebkitTextEmphasis'
DOC_CN.md:11226:19  - Unknown word (emphasis)    -- prefix.dash('text-emphasis'); // -> '-webkit-text
DOC_CN.md:11226:51  - Unknown word (emphasis)    -- // -> '-webkit-text-emphasis'
DOC_CN.md:11240:5   - Unknown word (multi)       -- multiArgs?: boolean
DOC_CN.md:11249:2   - Unknown word (multi)       -- |multiArgs=false|回调是否有多个结果
DOC_CN.md:11252:4   - Unknown word (multi)       -- 如果 multiArgs 设为真，返回的 Promise
DOC_CN.md:1130:7    - Unknown word (emit)        -- event.emit('test', 'licia'); /
DOC_CN.md:11366:38  - Unknown word (Timeout)     -- questAnimationFrame 不支持，使用 setTimeout 进行兼容。
DOC_CN.md:11369:25  - Unknown word (tick)        -- const id = raf(function tick() {
DOC_CN.md:11371:9   - Unknown word (tick)        -- raf(tick);
DOC_CN.md:11442:5   - Unknown word (lightness)   -- lightness?: number;
DOC_CN.md:11461:2   - Unknown word (lightness)   -- |lightness|亮度，取值为 0 - 1|
DOC_CN.md:11479:34  - Unknown word (symbols)     -- randomId(size?: number, symbols?: string): string;
DOC_CN.md:11487:2   - Unknown word (symbols)     -- |symbols|生成 id 字符，默认为 a-zA-Z
DOC_CN.md:11492:28  - Unknown word (cbbcb)       -- randomId(5, 'abc'); // -> 'cbbcb'
DOC_CN.md:11581:4   - Unknown word (ready)       -- ## ready
DOC_CN.md:11583:29  - Unknown word (ready)       -- 调用回调函数，类似于 jQuery 的 ready 方法。
DOC_CN.md:11600:21  - Unknown word (manipulate)  -- // It's safe to manipulate dom here.
DOC_CN.md:11600:36  - Unknown word (here)        -- safe to manipulate dom here.
DOC_CN.md:11614:21  - Unknown word (Memo)        -- iterator: types.MemoIterator<T, TResult>
DOC_CN.md:11615:5   - Unknown word (memo)        -- memo?: TResult,
DOC_CN.md:11620:21  - Unknown word (Memo)        -- iterator: types.MemoObjectIterator<T, TResult
DOC_CN.md:11621:5   - Unknown word (memo)        -- memo?: TResult,
DOC_CN.md:1162:7    - Unknown word (importance)  -- const importance = new Enum([
DOC_CN.md:11632:2   - Unknown word (initial)     -- |initial|初始值|
DOC_CN.md:1164:6    - Unknown word (TRIVIAL)     -- 'TRIVIAL',
DOC_CN.md:11656:21  - Unknown word (Memo)        -- iterator: types.MemoIterator<T, TResult>
DOC_CN.md:11657:5   - Unknown word (memo)        -- memo?: TResult,
DOC_CN.md:1165:6    - Unknown word (REGULAR)     -- 'REGULAR',
DOC_CN.md:1166:6    - Unknown word (IMPORTANT)   -- 'IMPORTANT',
DOC_CN.md:1170:13   - Unknown word (importance)  -- if (val === importance.CRITICAL) {
DOC_CN.md:1171:11   - Unknown word (something)   -- // Do something.
DOC_CN.md:11737:7   - Unknown word (evens)       -- const evens = remove(arr, function
DOC_CN.md:11741:13  - Unknown word (evens)       -- console.log(evens); // -> [2, 4]
DOC_CN.md:11794:25  - Unknown word (goodbye)     -- replaceAll('hello world goodbye world', 'world', 'licia
DOC_CN.md:11794:79  - Unknown word (goodbye)     -- // -> 'hello licia goodbye licia'
DOC_CN.md:11826:4   - Unknown word (reverse)     -- ## reverse
DOC_CN.md:11834:10  - Unknown word (reverse)     -- function reverse(arr: any[]): any[];
DOC_CN.md:1183:21   - Unknown word (extends)     -- class FileBlobStore extends Emitter {
DOC_CN.md:11845:1   - Unknown word (reverse)     -- reverse([1, 2, 3]); // -> [
DOC_CN.md:11872:12  - Unknown word (Callback)    -- requestIdleCallback 的快捷方式。
DOC_CN.md:11872:8   - Unknown word (Idle)        -- requestIdleCallback 的快捷方式。
DOC_CN.md:11886:13  - Unknown word (Idle)        -- 如果原生 requestIdleCallback 不支持，使用 setTimeout
DOC_CN.md:11886:17  - Unknown word (Callback)    -- 如果原生 requestIdleCallback 不支持，使用 setTimeout 进
DOC_CN.md:11890:15  - Unknown word (during)      -- // Called during a browser's idle periods
DOC_CN.md:11890:34  - Unknown word (idle)        -- Called during a browser's idle periods
DOC_CN.md:11890:39  - Unknown word (periods)     -- during a browser's idle periods
DOC_CN.md:11890:8   - Unknown word (Called)      -- // Called during a browser's idle
DOC_CN.md:11937:23  - Unknown word (Done)        -- else console.log('Done');
DOC_CN.md:11954:4   - Unknown word (rpad)        -- ## rpad
DOC_CN.md:11962:10  - Unknown word (rpad)        -- function rpad(str: string, len: number
DOC_CN.md:11975:1   - Unknown word (rpad)        -- rpad('a', 5); // -> 'a
DOC_CN.md:11976:1   - Unknown word (rpad)        -- rpad('a', 5, '-'); // ->
DOC_CN.md:11977:1   - Unknown word (rpad)        -- rpad('abc', 3, '-'); //
DOC_CN.md:11978:30  - Unknown word (abcab)       -- abc', 5, 'ab'); // -> 'abcab'
DOC_CN.md:11981:4   - Unknown word (rtrim)       -- ## rtrim
DOC_CN.md:11989:10  - Unknown word (rtrim)       -- function rtrim(str: string, chars?
DOC_CN.md:11:9      - Unknown word (find)       -- find(selector: string):
DOC_CN.md:12001:1   - Unknown word (rtrim)       -- rtrim(' abc  '); // -> ' abc
DOC_CN.md:12002:1   - Unknown word (rtrim)       -- rtrim('_abc_', '_'); // -
DOC_CN.md:12003:1   - Unknown word (rtrim)       -- rtrim('_abc_', ['c', '_']
DOC_CN.md:12109:24  - Unknown word (safari)      -- 使用 storage，使其在旧浏览器及 safari 无痕模式下能正常运行。
DOC_CN.md:12130:4   - Unknown word (same)        -- ## sameOrigin
DOC_CN.md:12138:10  - Unknown word (same)        -- function sameOrigin(url1: string,
DOC_CN.md:12153:1   - Unknown word (same)        -- sameOrigin(url1, url2);
DOC_CN.md:12154:1   - Unknown word (same)        -- sameOrigin(url1, url3);
DOC_CN.md:12181:4   - Unknown word (scroll)      -- ## scrollTo
DOC_CN.md:12189:10  - Unknown word (scroll)      -- function scrollTo(
DOC_CN.md:12192:9   - Unknown word (tolerance)   -- tolerance?: number;
DOC_CN.md:12195:9   - Unknown word (callback)    -- callback?: types.AnyFn;
DOC_CN.md:1219:17   - Unknown word (extends)     -- class FileStore extends Store {
DOC_CN.md:12211:2   - Unknown word (tolerance)   -- |tolerance=0|偏移|
DOC_CN.md:12213:12  - Unknown word (Quart)       -- |easing=outQuart|缓动函数|
DOC_CN.md:12214:2   - Unknown word (callback)    -- |callback=noop|结束回调|
DOC_CN.md:12217:1   - Unknown word (scroll)      -- scrollTo('body', {
DOC_CN.md:12218:5   - Unknown word (tolerance)   -- tolerance: 0,
DOC_CN.md:12220:17  - Unknown word (Quart)       -- easing: 'outQuart',
DOC_CN.md:12221:5   - Unknown word (callback)    -- callback: function() {}
DOC_CN.md:12326:4   - Unknown word (shebang)     -- ## shebang
DOC_CN.md:12328:4   - Unknown word (shebang)     -- 获取 shebang 命令。
DOC_CN.md:12334:10  - Unknown word (shebang)     -- function shebang(str: string): string
DOC_CN.md:12342:6   - Unknown word (Shebang)     -- |返回值|Shebang 命令|
DOC_CN.md:12345:1   - Unknown word (shebang)     -- shebang('#!/usr/bin/env node
DOC_CN.md:12346:1   - Unknown word (shebang)     -- shebang('#!/bin/bash'); //
DOC_CN.md:12346:17  - Unknown word (bash)        -- shebang('#!/bin/bash'); // -> '/bin/bash
DOC_CN.md:12346:37  - Unknown word (bash)        -- bash'); // -> '/bin/bash'
DOC_CN.md:12373:4   - Unknown word (shuffle)     -- ## shuffle
DOC_CN.md:12381:10  - Unknown word (shuffle)     -- function shuffle(arr: any[]): any[];
DOC_CN.md:12392:1   - Unknown word (shuffle)     -- shuffle([1, 2, 3]); // -> [
DOC_CN.md:12395:4   - Unknown word (singleton)   -- ## singleton
DOC_CN.md:12403:10  - Unknown word (singleton)   -- function singleton<F extends types.Fn<Promise
DOC_CN.md:12418:15  - Unknown word (singleton)   -- const fetch = singleton(async function fetch
DOC_CN.md:12484:4   - Unknown word (sleep)       -- ## sleep
DOC_CN.md:12492:10  - Unknown word (sleep)       -- function sleep(timeout: number): Promise
DOC_CN.md:12503:11  - Unknown word (sleep)       -- await sleep(2000);
DOC_CN.md:12503:5   - Unknown word (await)       -- await sleep(2000);
DOC_CN.md:12544:5   - Unknown word (replacement) -- replacement?: { [index: string]
DOC_CN.md:12553:2   - Unknown word (replacement) -- |replacement|自定义替换|
DOC_CN.md:12557:14  - Unknown word (pony)        -- slugify('I ♥ pony'); // -> 'I-love-pony
DOC_CN.md:12557:31  - Unknown word (love)        -- I ♥ pony'); // -> 'I-love-pony'
DOC_CN.md:12557:36  - Unknown word (pony)        -- pony'); // -> 'I-love-pony'
DOC_CN.md:12558:14  - Unknown word (pony)        -- slugify('I ♥ pony', { ' ': '_' }); //
DOC_CN.md:12558:45  - Unknown word (love)        -- ': '_' }); // -> 'I_love_pony'
DOC_CN.md:12558:50  - Unknown word (pony)        -- ' }); // -> 'I_love_pony'
DOC_CN.md:12561:4   - Unknown word (snake)       -- ## snakeCase
DOC_CN.md:12569:10  - Unknown word (snake)       -- function snakeCase(str: string): string
DOC_CN.md:12580:1   - Unknown word (snake)       -- snakeCase('fooBar'); // -
DOC_CN.md:12581:1   - Unknown word (snake)       -- snakeCase('foo bar'); //
DOC_CN.md:12582:1   - Unknown word (snake)       -- snakeCase('foo.bar'); //
DOC_CN.md:12585:4   - Unknown word (some)        -- ## some
DOC_CN.md:12593:10  - Unknown word (some)        -- function some<T>(
DOC_CN.md:12598:10  - Unknown word (some)        -- function some<T>(
DOC_CN.md:12615:1   - Unknown word (some)        -- some([2, 5], function(val
DOC_CN.md:12661:9   - Unknown word (deep)        -- deep?: boolean;
DOC_CN.md:12662:9   - Unknown word (comparator)  -- comparator?: types.AnyFn;
DOC_CN.md:12679:2   - Unknown word (deep)        -- |deep=false|是否递归|
DOC_CN.md:12680:2   - Unknown word (comparator)  -- |comparator|比较器|
DOC_CN.md:12686:9   - Unknown word (deep)        -- deep: true
DOC_CN.md:12773:13  - Unknown word (Site)        -- 获取 v8 的 CallSite 对象。
DOC_CN.md:12773:9   - Unknown word (Call)        -- 获取 v8 的 CallSite 对象。
DOC_CN.md:12787:29  - Unknown word (Call)        -- stackTrace(); // -> List of CallSite objects
DOC_CN.md:12787:33  - Unknown word (Site)        -- ; // -> List of CallSite objects
DOC_CN.md:12843:34  - Unknown word (encoding)    -- strToBytes(str: string, encoding?: string): number[]
DOC_CN.md:12851:2   - Unknown word (encoding)    -- |encoding=utf8|字符串编码|
DOC_CN.md:12915:30  - Unknown word (spaces)      -- stringify(obj: any, spaces?: number): string;
DOC_CN.md:12925:2   - Unknown word (spaces)      -- |spaces|缩进|
DOC_CN.md:12932:37  - Unknown word (Circular)    -- // -> '{"a":1,"b":"[Circular ~]"}'
DOC_CN.md:12949:9   - Unknown word (unenumerable) -- unenumerable?: boolean;
DOC_CN.md:1294:24   - Unknown word (redhoodsu)   -- hashTable.set('name', 'redhoodsu');
DOC_CN.md:12950:9   - Unknown word (symbol)       -- symbol?: boolean;
DOC_CN.md:12953:9   - Unknown word (depth)        -- depth?: number;
DOC_CN.md:1295:31   - Unknown word (redhoodsu)   -- get('name'); // -> 'redhoodsu'
DOC_CN.md:12971:2   - Unknown word (unenumerable) -- |unenumerable=false|包含不可枚举值|
DOC_CN.md:12975:2   - Unknown word (depth)        -- |depth=0|遍历对象的最大深度|
DOC_CN.md:1298:30   - Unknown word (false)       -- hashTable.has('name'); // -> false
DOC_CN.md:12993:4   - Unknown word (strip)        -- ## stripAnsi
DOC_CN.md:12993:9   - Unknown word (Ansi)         -- ## stripAnsi
DOC_CN.md:13001:10  - Unknown word (strip)        -- function stripAnsi(str: string): string
DOC_CN.md:13001:15  - Unknown word (Ansi)         -- function stripAnsi(str: string): string
DOC_CN.md:13012:1   - Unknown word (strip)        -- stripAnsi('\u001b[4mcake\u
DOC_CN.md:13012:20  - Unknown word (mcake)        -- stripAnsi('\u001b[4mcake\u001b[0m'); // -> 'cake
DOC_CN.md:13012:6   - Unknown word (Ansi)         -- stripAnsi('\u001b[4mcake\u001b
DOC_CN.md:13015:4   - Unknown word (strip)        -- ## stripBom
DOC_CN.md:1301:4    - Unknown word (Heap)        -- ## Heap
DOC_CN.md:13023:10  - Unknown word (strip)        -- function stripBom(str: string): string
DOC_CN.md:13034:16  - Unknown word (Flicia)       -- stripBom('\uFEFFlicia'); // -> 'licia'
DOC_CN.md:13078:22  - Unknown word (mred)         -- stripColor('\u001b[31mred\u001b[39m'); // ->
DOC_CN.md:1309:7    - Unknown word (Heap)        -- class Heap {
DOC_CN.md:13103:9   - Unknown word (Indent)       -- ## stripIndent
DOC_CN.md:13111:15  - Unknown word (Indent)       -- function stripIndent(str: string): string
DOC_CN.md:13112:15  - Unknown word (Indent)       -- function stripIndent(
DOC_CN.md:13113:23  - Unknown word (Strings)      -- literals: TemplateStringsArray,
DOC_CN.md:13113:5   - Unknown word (literals)     -- literals: TemplateStringsArray
DOC_CN.md:13128:6   - Unknown word (Indent)       -- stripIndent`
DOC_CN.md:1315:5    - Unknown word (peek)        -- peek(): any;
DOC_CN.md:13215:9   - Unknown word (border)       -- border?: {
DOC_CN.md:13236:5   - Unknown word (rows)         -- rows: Array<string[]>,
DOC_CN.md:13245:2   - Unknown word (rows)         -- |rows|表格数据|
DOC_CN.md:13260:19  - Unknown word (Emily)        -- ['daughter', 'Emily', 'Smith'],
DOC_CN.md:13260:7   - Unknown word (daughter)     -- ['daughter', 'Emily', 'Smith']
DOC_CN.md:13261:17  - Unknown word (John)         -- ['father', 'John', 'Smith'],
DOC_CN.md:13262:17  - Unknown word (Jane)         -- ['mother', 'Jane', 'Smith']
DOC_CN.md:13262:7   - Unknown word (mother)       -- ['mother', 'Jane', 'Smith']
DOC_CN.md:13288:17  - Unknown word (echo)         -- template('<%if (echo) {%>Hello licia!<%}
DOC_CN.md:13288:48  - Unknown word (echo)         -- Hello licia!<%}%>')({ echo: true }); // -> 'Hello
DOC_CN.md:13289:24  - Unknown word (upper)        -- template('<p><%= util["upperCase"](name) %></p>'
DOC_CN.md:13290:5   - Unknown word (upper)        -- upperCase: function(str)
DOC_CN.md:13291:28  - Unknown word (Upper)        -- return str.toLocaleUpperCase();
DOC_CN.md:13293:34  - Unknown word (LICIA)        -- licia' }); // -> '<p>LICIA</p>'
DOC_CN.md:13296:4   - Unknown word (theme)        -- ## theme
DOC_CN.md:13304:11  - Unknown word (theme)        -- namespace theme {
DOC_CN.md:13305:16  - Unknown word (Theme)        -- interface ITheme extends Emitter {
DOC_CN.md:13309:14  - Unknown word (theme)        -- const theme: theme.ITheme;
DOC_CN.md:13309:21  - Unknown word (Theme)        -- const theme: theme.ITheme;
DOC_CN.md:13309:7   - Unknown word (theme)        -- const theme: theme.ITheme;
DOC_CN.md:13324:16  - Unknown word (dark)         -- 获取当前主题（light 或 dark）。
DOC_CN.md:13327:1   - Unknown word (theme)        -- theme.on('change', function
DOC_CN.md:13328:32  - Unknown word (dark)         -- console.log(theme); // -> 'dark'
DOC_CN.md:13354:14  - Unknown word (scroll)       -- // $(window).scroll(updatePos);
DOC_CN.md:13368:14  - Unknown word (opts)         -- new (opts?: stream.DuplexOptions
DOC_CN.md:13368:28  - Unknown word (Duplex)       -- new (opts?: stream.DuplexOptions): stream.Transform
DOC_CN.md:13369:10  - Unknown word (opts)         -- (opts?: stream.DuplexOptions
DOC_CN.md:13369:24  - Unknown word (Duplex)       -- (opts?: stream.DuplexOptions): stream.Transform
DOC_CN.md:13371:19  - Unknown word (Callback)     -- type TransformCallback = (err?: any, data?
DOC_CN.md:13376:28  - Unknown word (Callback)     -- callback: TransformCallback
DOC_CN.md:13376:9   - Unknown word (callback)     -- callback: TransformCallback
DOC_CN.md:13378:10  - Unknown word (Flush)        -- type FlushCallback = (
DOC_CN.md:13378:15  - Unknown word (Callback)     -- type FlushCallback = (
DOC_CN.md:13380:9   - Unknown word (flush)        -- flushCallback: () => void
DOC_CN.md:13384:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC_CN.md:13384:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC_CN.md:13388:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC_CN.md:13388:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC_CN.md:13391:23  - Unknown word (Duplex)       -- opts?: stream.DuplexOptions,
DOC_CN.md:13391:9   - Unknown word (opts)         -- opts?: stream.DuplexOptions
DOC_CN.md:13393:17  - Unknown word (Flush)        -- flush?: FlushCallback
DOC_CN.md:13393:9   - Unknown word (flush)        -- flush?: FlushCallback
DOC_CN.md:13398:21  - Unknown word (Flush)        -- flush?: through.FlushCallback
DOC_CN.md:13398:5   - Unknown word (flush)        -- flush?: through.FlushCallback
DOC_CN.md:13401:19  - Unknown word (Duplex)       -- opts?: stream.DuplexOptions,
DOC_CN.md:13401:5   - Unknown word (opts)         -- opts?: stream.DuplexOptions
DOC_CN.md:13411:2   - Unknown word (opts)         -- |opts={}|初始化流选项|
DOC_CN.md:13417:10  - Unknown word (Mode)         -- 设置 objectMode 为真的快捷方式。
DOC_CN.md:13426:6   - Unknown word (pipe)         -- .pipe(
DOC_CN.md:13433:6   - Unknown word (pipe)         -- .pipe(fs.createWriteStream
DOC_CN.md:13455:16  - Unknown word (surunzi)      -- tildify('/home/surunzi/dev'); // -> '~/dev
DOC_CN.md:13482:32  - Unknown word (just)         -- now - 1000 * 6); // -> just now
DOC_CN.md:13483:36  - Unknown word (seconds)      -- 000 * 15); // -> 15 seconds ago
DOC_CN.md:13484:44  - Unknown word (minutes)      -- * 15); // -> in 15 minutes
DOC_CN.md:13485:49  - Unknown word (hours)        -- * 5, now); // -> 5 hours ago
DOC_CN.md:13488:8   - Unknown word (Taken)        -- ## timeTaken
DOC_CN.md:1348:5    - Unknown word (peek)        -- ### peek
DOC_CN.md:13496:14  - Unknown word (Taken)        -- function timeTaken(fn: types.AnyFn): number
DOC_CN.md:13507:5   - Unknown word (Taken)        -- timeTaken(function() {
DOC_CN.md:13509:16  - Unknown word (taken)        -- }); // -> Time taken to execute given function
DOC_CN.md:13509:33  - Unknown word (given)        -- Time taken to execute given function.
DOC_CN.md:1353:18   - Unknown word (Heap)        -- const heap = new Heap(function(a, b) {
DOC_CN.md:1353:7    - Unknown word (heap)        -- const heap = new Heap(function
DOC_CN.md:1356:1    - Unknown word (heap)        -- heap.add(2);
DOC_CN.md:1357:1    - Unknown word (heap)        -- heap.add(1);
DOC_CN.md:13584:30  - Unknown word (sleep)        -- sleep = require('licia/sleep');
DOC_CN.md:13584:7   - Unknown word (sleep)        -- const sleep = require('licia/sleep
DOC_CN.md:13587:5   - Unknown word (yield)        -- yield sleep(200);
DOC_CN.md:1358:1    - Unknown word (heap)        -- heap.add(4);
DOC_CN.md:1359:1    - Unknown word (heap)        -- heap.add(5);
DOC_CN.md:1364:4    - Unknown word (Heap)        -- ## HeapSnapshot
DOC_CN.md:1372:7    - Unknown word (Heap)        -- class HeapSnapshot {
DOC_CN.md:13734:43  - Unknown word (native)       -- 'function min() { [native code] }'
DOC_CN.md:1374:5    - Unknown word (edges)       -- edges: LinkedList;
DOC_CN.md:13763:4   - Unknown word (topo)         -- ## topoSort
DOC_CN.md:13771:10  - Unknown word (topo)         -- function topoSort(edges: any[]): any
DOC_CN.md:13771:19  - Unknown word (edges)        -- function topoSort(edges: any[]): any[];
DOC_CN.md:13778:2   - Unknown word (edges)        -- |edges|依赖关系|
DOC_CN.md:13782:1   - Unknown word (topo)        -- topoSort([
DOC_CN.md:13814:43  - Unknown word (mouseup)     -- getElementById('test'), 'mouseup');
DOC_CN.md:13818:4   - Unknown word (trim)        -- ## trim
DOC_CN.md:13826:10  - Unknown word (trim)        -- function trim(str: string, chars?
DOC_CN.md:13838:1   - Unknown word (trim)        -- trim(' abc  '); // -> 'abc
DOC_CN.md:13839:1   - Unknown word (trim)        -- trim('_abc_', '_'); // -
DOC_CN.md:13840:1   - Unknown word (trim)        -- trim('_abc_', ['a', 'c',
DOC_CN.md:13843:4   - Unknown word (truncate)    -- ## truncate
DOC_CN.md:13851:10  - Unknown word (truncate)    -- function truncate(
DOC_CN.md:13855:9   - Unknown word (ellipsis)    -- ellipsis?: string;
DOC_CN.md:13874:2   - Unknown word (ellipsis)    -- |ellipsis='...'|表示截取掉部分的符号|
DOC_CN.md:13878:1   - Unknown word (truncate)    -- truncate('ORA ORA ORA ORA ORA
DOC_CN.md:13879:1   - Unknown word (truncate)    -- truncate('ORA ORA ORA ORA ORA
DOC_CN.md:13881:5   - Unknown word (ellipsis)    -- ellipsis: '……'
DOC_CN.md:13887:7   - Unknown word (catch)       -- 在 try catch 块中运行函数。
DOC_CN.md:13906:25  - Unknown word (that)        -- // Do something that might cause an error
DOC_CN.md:13906:30  - Unknown word (might)       -- / Do something that might cause an error.
DOC_CN.md:13906:36  - Unknown word (cause)       -- something that might cause an error.
DOC_CN.md:1391:5    - Unknown word (edges)       -- ### edges
DOC_CN.md:13965:15  - Unknown word (Memo)        -- interface MemoIterator<T, TResult>
DOC_CN.md:13968:15  - Unknown word (Memo)        -- interface MemoObjectIterator<T, TResult
DOC_CN.md:1396:12   - Unknown word (require)     -- const fs = require('fs');
DOC_CN.md:1397:39   - Unknown word (heapsnapshot) -- readFileSync('path/to/heapsnapshot', 'utf8');
DOC_CN.md:13:20     - Unknown word (offset)     -- offset(): $offset.IOffset;
DOC_CN.md:13:28     - Unknown word (Offset)     -- offset(): $offset.IOffset;
DOC_CN.md:13:9      - Unknown word (offset)     -- offset(): $offset.IOffset;
DOC_CN.md:1400:55   - Unknown word (self)         -- (totalSize += node.selfSize));
DOC_CN.md:14021:4   - Unknown word (uncaught)    -- ## uncaught
DOC_CN.md:14029:7   - Unknown word (uncaught)    -- const uncaught: {
DOC_CN.md:14065:1   - Unknown word (uncaught)    -- uncaught.start();
DOC_CN.md:14066:1   - Unknown word (uncaught)    -- uncaught.addListener(err =>
DOC_CN.md:14163:4   - Unknown word (universalify) -- ## universalify
DOC_CN.md:14171:10  - Unknown word (universalify) -- function universalify(
DOC_CN.md:14192:12  - Unknown word (universalify) -- const fn = universalify(callbackFn, 'callback
DOC_CN.md:14209:1   - Unknown word (declare)      -- declare function unzip(arr:
DOC_CN.md:14278:14  - Unknown word (requires)     -- function use(requires: string[], method: types
DOC_CN.md:14286:2   - Unknown word (requires)     -- |requires|依赖|
DOC_CN.md:14430:38  - Unknown word (Hwcqx)        -- 456, 789]); // -> '2HwcqxB'
DOC_CN.md:14432:14  - Unknown word (Hwcqx)        -- vlq.decode('2HwcqxB'); // -> [123, 456
DOC_CN.md:14446:5   - Unknown word (interval)     -- interval?: number
DOC_CN.md:14456:2   - Unknown word (interval)     -- |interval=250|等待间隔|
DOC_CN.md:14466:4   - Unknown word (waterfall)    -- ## waterfall
DOC_CN.md:14474:10  - Unknown word (waterfall)    -- function waterfall(tasks: types.AnyFn[
DOC_CN.md:14485:1   - Unknown word (waterfall)    -- waterfall(
DOC_CN.md:14492:23  - Unknown word (done)         -- cb(null, 'done');
DOC_CN.md:14496:23  - Unknown word (done)         -- // result -> 'done'
DOC_CN.md:14521:11  - Unknown word (Licia)        -- wordWrap('Licia is a utility library
DOC_CN.md:14521:22  - Unknown word (utility)      -- wordWrap('Licia is a utility library.', 10);
DOC_CN.md:14521:30  - Unknown word (library)      -- 'Licia is a utility library.', 10);
DOC_CN.md:14522:21  - Unknown word (utility)      -- // -> 'Licia is \na utility \nlibrary.'
DOC_CN.md:14522:30  - Unknown word (nlibrary)     -- Licia is \na utility \nlibrary.'
DOC_CN.md:14522:8   - Unknown word (Licia)        -- // -> 'Licia is \na utility \nlibrary
DOC_CN.md:14547:4   - Unknown word (workerize)    -- ## workerize
DOC_CN.md:14555:10  - Unknown word (workerize)    -- function workerize(fn: types.AnyFn): types
DOC_CN.md:14566:16  - Unknown word (workerize)    -- const worker = workerize(function(a, b) {
DOC_CN.md:14574:4   - Unknown word (wrap)         -- ## wrap
DOC_CN.md:14582:10  - Unknown word (wrap)         -- function wrap(
DOC_CN.md:14584:5   - Unknown word (wrapper)      -- wrapper: types.AnyFn
DOC_CN.md:14593:2   - Unknown word (wrapper)      -- |wrapper|包裹函数|
DOC_CN.md:14597:11  - Unknown word (wrap)         -- const p = wrap(escape, function(fn
DOC_CN.md:1459:9    - Unknown word (welcome)      -- welcome: 'Hello, {{name}}!'
DOC_CN.md:1465:9    - Unknown word (welcome)      -- welcome: '你好，{{name}}！'
DOC_CN.md:1473:9    - Unknown word (welcome)      -- i18n.t('welcome', { name: 'licia' }
DOC_CN.md:1478:8    - Unknown word (Transformer)  -- ## JsonTransformer
DOC_CN.md:147:19    - Unknown word (safe)       -- add(element: $safeEls.El, name: string
DOC_CN.md:147:57    - Unknown word (void)       -- string | string[]): void;
DOC_CN.md:1486:11   - Unknown word (Transformer)  -- class JsonTransformer {
DOC_CN.md:1488:37   - Unknown word (Transformer)  -- string, val: any): JsonTransformer;
DOC_CN.md:1490:57   - Unknown word (Transformer)  -- fn: types.AnyFn): JsonTransformer;
DOC_CN.md:1491:45   - Unknown word (Transformer)  -- fn: types.AnyFn): JsonTransformer;
DOC_CN.md:149:49    - Unknown word (void)       -- safeEls.El, name: string): void;
DOC_CN.md:149:5     - Unknown word (toggle)     -- toggle(element: $safeEls.El
DOC_CN.md:14:9      - Unknown word (hide)       -- hide(): $;
DOC_CN.md:1578:9    - Unknown word (lastname)     -- lastname: 'Su',
DOC_CN.md:1579:24   - Unknown word (Hood)         -- firstname: 'RedHood'
DOC_CN.md:1579:9    - Unknown word (firstname)    -- firstname: 'RedHood'
DOC_CN.md:1586:19   - Unknown word (firstname)    -- return author.firstname + author.lastname;
DOC_CN.md:1586:38   - Unknown word (lastname)     -- author.firstname + author.lastname;
DOC_CN.md:1588:37   - Unknown word (length)       -- , data.get('books').length);
DOC_CN.md:1589:71   - Unknown word (Hood)         -- price: 10}], author: 'RedHoodSu', count: 1}
DOC_CN.md:1603:22   - Unknown word (null)         -- prev: Node | null;
DOC_CN.md:1604:22   - Unknown word (null)         -- next: Node | null;
DOC_CN.md:1610:5    - Unknown word (tail)         -- tail: LinkedList.Node;
DOC_CN.md:1613:5    - Unknown word (unshift)      -- unshift(val: any): number;
DOC_CN.md:1614:5    - Unknown word (shift)        -- shift(): any;
DOC_CN.md:1615:5    - Unknown word (find)         -- find(fn: types.AnyFn): LinkedList
DOC_CN.md:1632:5    - Unknown word (tail)         -- ### tail
DOC_CN.md:1649:5    - Unknown word (unshift)      -- ### unshift
DOC_CN.md:1653:5    - Unknown word (shift)        -- ### shift
DOC_CN.md:1661:5    - Unknown word (find)         -- ### find
DOC_CN.md:1723:5    - Unknown word (formatter)    -- formatter(type: string, argList
DOC_CN.md:1730:5    - Unknown word (warn)         -- warn(...args: any[]): Logger
DOC_CN.md:1757:22   - Unknown word (warn)         -- ## trace，debug，info，warn，error
DOC_CN.md:175:5     - Unknown word (toggle)     -- ### toggle
DOC_CN.md:1763:18   - Unknown word (WARN)         -- TRACE，DEBUG，INFO，WARN，ERROR 和 SILENT。
DOC_CN.md:1763:31   - Unknown word (SILENT)       -- DEBUG，INFO，WARN，ERROR 和 SILENT。
DOC_CN.md:1770:8    - Unknown word (formatter)    -- logger.formatter = function(type, argList
DOC_CN.md:1895:6    - Unknown word (unmatch)      -- #### unmatch
DOC_CN.md:1900:36   - Unknown word (screen)       -- mediaQuery = new MediaQuery('screen and (max-width:1000px
DOC_CN.md:1901:29   - Unknown word (false)        -- mediaQuery.isMatch(); // -> false
DOC_CN.md:1903:11   - Unknown word (something)    -- // Do something...
DOC_CN.md:1907:12   - Unknown word (Observer)     -- ## MutationObserver
DOC_CN.md:1907:4    - Unknown word (Mutation)     -- ## MutationObserver
DOC_CN.md:1909:1    - Unknown word (Mutation)     -- MutationObserver 安全版本，如果不支持，
DOC_CN.md:1909:9    - Unknown word (Observer)     -- MutationObserver 安全版本，如果不支持，则什么也不做。
DOC_CN.md:1912:22   - Unknown word (Mutation)     -- const observer = new MutationObserver(function(mutations
DOC_CN.md:1912:30   - Unknown word (Observer)     -- observer = new MutationObserver(function(mutations)
DOC_CN.md:1912:48   - Unknown word (mutations)    -- MutationObserver(function(mutations) {
DOC_CN.md:1912:7    - Unknown word (observer)     -- const observer = new MutationObserver
DOC_CN.md:1915:1    - Unknown word (observer)     -- observer.observe(document.documentElem
DOC_CN.md:1915:10   - Unknown word (observe)      -- observer.observe(document.documentElement
DOC_CN.md:1916:1    - Unknown word (observer)     -- observer.disconnect();
DOC_CN.md:1933:5    - Unknown word (peek)         -- peek(): any;
DOC_CN.md:1966:5    - Unknown word (peek)         -- ### peek
DOC_CN.md:196:38    - Unknown word (true)       -- test', 'class1'); // -> true
DOC_CN.md:198:38    - Unknown word (false)      -- test', 'class1'); // -> false
DOC_CN.md:1991:2    - Unknown word (Promises)     -- [Promises 标准](https://github.com
DOC_CN.md:199:8     - Unknown word (toggle)     -- $class.toggle('#test', 'class1');
DOC_CN.md:200:38    - Unknown word (true)       -- test', 'class1'); // -> true
DOC_CN.md:2015:4    - Unknown word (Pseudo)       -- ## PseudoMap
DOC_CN.md:2023:7    - Unknown word (Pseudo)       -- const PseudoMap: typeof Map;
DOC_CN.md:2031:17   - Unknown word (Pseudo)       -- const map = new PseudoMap();
DOC_CN.md:2049:5    - Unknown word (peek)         -- peek(): any;
DOC_CN.md:20:45     - Unknown word (handler)    -- string, selector: string, handler: types.AnyFn): $;
DOC_CN.md:2127:5    - Unknown word (hashlru)      -- 参考 [hashlru 算法](https://github.com
DOC_CN.md:2137:4    - Unknown word (Readiness)    -- ## Readiness
DOC_CN.md:2145:7    - Unknown word (Readiness)    -- class Readiness {
DOC_CN.md:2147:7    - Unknown word (Ready)        -- isReady(tasks: string | string
DOC_CN.md:2148:5    - Unknown word (ready)        -- ready(tasks: string | string
DOC_CN.md:2162:5    - Unknown word (ready)        -- ### ready
DOC_CN.md:2172:7    - Unknown word (Ready)        -- ### isReady
DOC_CN.md:2182:23   - Unknown word (Readiness)    -- const readiness = new Readiness();
DOC_CN.md:2182:7    - Unknown word (readiness)    -- const readiness = new Readiness();
DOC_CN.md:2183:1    - Unknown word (readiness)    -- readiness.ready('serverCreated
DOC_CN.md:2183:11   - Unknown word (ready)        -- readiness.ready('serverCreated', function
DOC_CN.md:2186:1    - Unknown word (readiness)    -- readiness.signal('serverCreated
DOC_CN.md:2187:1    - Unknown word (readiness)    -- readiness.isReady('serverCreated
DOC_CN.md:2187:13   - Unknown word (Ready)        -- readiness.isReady('serverCreated'); /
DOC_CN.md:2199:17   - Unknown word (reducer)      -- constructor(reducer: types.AnyFn, initialState
DOC_CN.md:2199:39   - Unknown word (initial)      -- reducer: types.AnyFn, initialState: any);
DOC_CN.md:219:23    - Unknown word (Plain)      -- properties: types.PlainObj<string | number>
DOC_CN.md:21:27     - Unknown word (handler)    -- on(event: string, handler: types.AnyFn): $;
DOC_CN.md:2201:5    - Unknown word (dispatch)     -- dispatch(action: any): any;
DOC_CN.md:2212:2    - Unknown word (reducer)      -- |reducer|生成下一个状态的函数|
DOC_CN.md:2213:2    - Unknown word (initial)      -- |initialState|初始状态|
DOC_CN.md:2224:5    - Unknown word (dispatch)     -- ### dispatch
DOC_CN.md:2240:15   - Unknown word (INCREMENT)    -- case 'INCREMENT':
DOC_CN.md:2242:15   - Unknown word (DECREMENT)    -- case 'DECREMENT':
DOC_CN.md:2253:25   - Unknown word (INCREMENT)    -- store.dispatch({ type: 'INCREMENT' }); // 1
DOC_CN.md:2253:7    - Unknown word (dispatch)     -- store.dispatch({ type: 'INCREMENT'
DOC_CN.md:2254:25   - Unknown word (INCREMENT)    -- store.dispatch({ type: 'INCREMENT' }); // 2
DOC_CN.md:2255:25   - Unknown word (DECREMENT)    -- store.dispatch({ type: 'DECREMENT' }); // 1
DOC_CN.md:2258:10   - Unknown word (Sensor)       -- ## ResizeSensor
DOC_CN.md:2266:13   - Unknown word (Sensor)       -- class ResizeSensor extends SingleEmitter
DOC_CN.md:2286:26   - Unknown word (Sensor)       -- const sensor = new ResizeSensor(target);
DOC_CN.md:2286:7    - Unknown word (sensor)       -- const sensor = new ResizeSensor(target
DOC_CN.md:2287:1    - Unknown word (sensor)       -- sensor.addListener(function
DOC_CN.md:2288:34   - Unknown word (changed)      -- Trigger if element's size changed.
DOC_CN.md:22:46     - Unknown word (handler)    -- string, selector: string, handler: types.AnyFn): $;
DOC_CN.md:2302:5    - Unknown word (find)        -- find(selector: string): Select
DOC_CN.md:2315:5    - Unknown word (find)        -- ### find
DOC_CN.md:2334:8    - Unknown word (Manipulate)  -- // Manipulate dom nodes
DOC_CN.md:2347:17   - Unknown word (counter)     -- constructor(counter?: number);
DOC_CN.md:2348:5    - Unknown word (wait)        -- wait(fn: () => void): void
DOC_CN.md:2359:2    - Unknown word (counter)     -- |counter=1|初始计数|
DOC_CN.md:2361:5    - Unknown word (wait)        -- ### wait
DOC_CN.md:2375:1    - Unknown word (require)     -- require('http')
DOC_CN.md:2377:13   - Unknown word (wait)        -- sem.wait(function() {
DOC_CN.md:2379:16   - Unknown word (Timeout)     -- setTimeout(() => sem.signal(),
DOC_CN.md:2382:6    - Unknown word (listen)      -- .listen(3000);
DOC_CN.md:23:28     - Unknown word (handler)    -- off(event: string, handler: types.AnyFn): $;
DOC_CN.md:2416:9    - Unknown word (emitter)     -- 与 Event emitter 类似，但仅有一种事件类型。
DOC_CN.md:2425:5    - Unknown word (emit)        -- emit(...args: any[]): void
DOC_CN.md:2449:5    - Unknown word (emit)        -- ### emit
DOC_CN.md:2485:13   - Unknown word (protocols)   -- protocols?: string | string[]
DOC_CN.md:2510:2    - Unknown word (protocols)   -- |protocols|协议|
DOC_CN.md:2615:17   - Unknown word (initial)     -- constructor(initial: string, events: any
DOC_CN.md:2629:2    - Unknown word (initial)     -- |initial|初始状态|
DOC_CN.md:2643:33   - Unknown word (pause)       -- from: 'empty', to: 'pause' },
DOC_CN.md:2644:20   - Unknown word (pause)       -- play: { from: 'pause', to: 'play' },
DOC_CN.md:2644:33   - Unknown word (play)        -- from: 'pause', to: 'play' },
DOC_CN.md:2644:5    - Unknown word (play)        -- play: { from: 'pause', to
DOC_CN.md:2645:22   - Unknown word (play)        -- pause: { from: ['play', 'empty'], to: 'pause
DOC_CN.md:2645:44   - Unknown word (pause)       -- play', 'empty'], to: 'pause' },
DOC_CN.md:2645:5    - Unknown word (pause)       -- pause: { from: ['play', 'empty
DOC_CN.md:2646:23   - Unknown word (play)        -- unload: { from: ['play', 'pause'], to: 'empty
DOC_CN.md:2646:31   - Unknown word (pause)       -- unload: { from: ['play', 'pause'], to: 'empty' }
DOC_CN.md:2652:11   - Unknown word (play)        -- state.on('play', function(src) {
DOC_CN.md:2653:30   - Unknown word (eustia)      -- console.log(src); // -> 'eustia'
DOC_CN.md:2658:13   - Unknown word (eustia)      -- state.play('eustia');
DOC_CN.md:2754:20   - Unknown word (whenever)    -- // It triggers whenever set is called.
DOC_CN.md:2754:36   - Unknown word (called)      -- triggers whenever set is called.
DOC_CN.md:2760:10   - Unknown word (Chrome)      -- 解析、处理和生成 Chrome Trace 格式数据。
DOC_CN.md:279:26    - Unknown word (eustia)     -- data('#test', 'attr1', 'eustia');
DOC_CN.md:2812:12   - Unknown word (require)     -- const fs = require('fs');
DOC_CN.md:2824:4    - Unknown word (Tracing)     -- ## Tracing
DOC_CN.md:2826:4    - Unknown word (chrome)      -- 创建 chrome trace 格式数据。
DOC_CN.md:2832:7    - Unknown word (Tracing)     -- class Tracing {
DOC_CN.md:2846:5    - Unknown word (instant)     -- instant(
DOC_CN.md:2907:5    - Unknown word (instant)     -- ### instant
DOC_CN.md:2909:4    - Unknown word (instant)     -- 记录 instant 事件。
DOC_CN.md:2916:12   - Unknown word (require)     -- const fs = require('fs');
DOC_CN.md:2917:21   - Unknown word (Tracing)     -- const tracing = new Tracing();
DOC_CN.md:2917:7    - Unknown word (tracing)     -- const tracing = new Tracing();
DOC_CN.md:2918:1    - Unknown word (tracing)     -- tracing.start();
DOC_CN.md:2919:1    - Unknown word (tracing)     -- tracing.begin('cat', 'name'
DOC_CN.md:2921:1    - Unknown word (tracing)     -- tracing.end();
DOC_CN.md:2924:20   - Unknown word (tracing)     -- JSON.stringify(tracing.stop()),
DOC_CN.md:295:9     - Unknown word (handler)    -- handler: types.AnyFn
DOC_CN.md:2980:11   - Unknown word (carpet)      -- trie.add('carpet');
DOC_CN.md:2983:11   - Unknown word (cart)        -- trie.add('cart');
DOC_CN.md:2985:14   - Unknown word (carpet)      -- trie.remove('carpet');
DOC_CN.md:2986:11   - Unknown word (carpet)      -- trie.has('carpet'); // -> false
DOC_CN.md:2987:35   - Unknown word (cart)        -- car'); // -> ['car', 'cart']
DOC_CN.md:2991:4    - Unknown word (Tween)       -- ## Tween
DOC_CN.md:2999:7    - Unknown word (Tween)       -- class Tween extends Emitter {
DOC_CN.md:3001:20   - Unknown word (duration)    -- to(props: any, duration?: number, ease?: string
DOC_CN.md:3001:39   - Unknown word (ease)        -- duration?: number, ease?: string | Function
DOC_CN.md:3001:66   - Unknown word (Tween)       -- string | Function): Tween;
DOC_CN.md:3001:8    - Unknown word (props)       -- to(props: any, duration?: number
DOC_CN.md:3003:33   - Unknown word (Tween)       -- progress(progress: number): Tween;
DOC_CN.md:3004:13   - Unknown word (Tween)       -- play(): Tween;
DOC_CN.md:3006:5    - Unknown word (paused)      -- paused(): boolean;
DOC_CN.md:3025:2    - Unknown word (duration)    -- |duration|补间时长|
DOC_CN.md:3026:2    - Unknown word (ease)        -- |ease|缓动函数|
DOC_CN.md:3036:5    - Unknown word (paused)      -- ### paused
DOC_CN.md:3051:7    - Unknown word (tween)       -- const tween = new Tween(pos);
DOC_CN.md:3052:1    - Unknown word (tween)       -- tween
DOC_CN.md:3059:1    - Unknown word (tween)       -- tween.to({ x: 100, y: 100
DOC_CN.md:3072:9    - Unknown word (protocol)    -- protocol: string;
DOC_CN.md:3079:9    - Unknown word (slashes)     -- slashes: boolean;
DOC_CN.md:3083:5    - Unknown word (protocol)    -- protocol: string;
DOC_CN.md:3090:5    - Unknown word (slashes)     -- slashes: boolean;
DOC_CN.md:311:15    - Unknown word (Handler)    -- function clickHandler() {
DOC_CN.md:312:11    - Unknown word (something)  -- // Do something...
DOC_CN.md:314:34    - Unknown word (Handler)    -- test', 'click', clickHandler);
DOC_CN.md:3155:2    - Unknown word (protocol)    -- |protocol|协议名，（如 http:）|
DOC_CN.md:3156:2    - Unknown word (slashes)     -- |slashes|协议名后是否有双斜杠|
DOC_CN.md:315:35    - Unknown word (Handler)    -- test', 'click', clickHandler);
DOC_CN.md:3220:40   - Unknown word (length)      -- === 'string' && val.length === 5) return true;
DOC_CN.md:3222:44   - Unknown word (length)      -- should be a string with length 5';
DOC_CN.md:3231:70   - Unknown word (length)      -- should be a string with length 5';
DOC_CN.md:3245:19   - Unknown word (weight)      -- set(val: any, weight: number): void;
DOC_CN.md:3266:2    - Unknown word (weight)      -- |weight|值的权重|
DOC_CN.md:32:31     - Unknown word (Plain)      -- css(properties: types.PlainObj<string | number>
DOC_CN.md:3303:4    - Unknown word (abbrev)      -- ## abbrev
DOC_CN.md:330:5     - Unknown word (before)     -- before: $insert.IInsert;
DOC_CN.md:3311:10   - Unknown word (abbrev)      -- function abbrev(...names: string[])
DOC_CN.md:3322:1    - Unknown word (abbrev)      -- abbrev('lina', 'luna');
DOC_CN.md:3347:35   - Unknown word (called)      -- Only invoke after fn is called 5 times.
DOC_CN.md:3392:5    - Unknown word (timeout)     -- timeout?: number;
DOC_CN.md:339:5     - Unknown word (before)     -- ### before
DOC_CN.md:3414:2    - Unknown word (timeout)     -- |timeout|请求超时|
DOC_CN.md:3458:9    - Unknown word (unenumerable) -- unenumerable?: boolean;
DOC_CN.md:3463:16   - Unknown word (symbol)       -- options: { symbol: true } & allKeys.IOptions
DOC_CN.md:3464:19   - Unknown word (Symbol)       -- ): Array<string | Symbol>;
DOC_CN.md:3467:18   - Unknown word (symbol)       -- options?: ({ symbol: false } & allKeys.IOptions
DOC_CN.md:3484:2    - Unknown word (unenumerable) -- |unenumerable=false|包含不可枚举键名|
DOC_CN.md:3485:18   - Unknown word (Symbol)       -- |symbol=false|包含 Symbol 键名|
DOC_CN.md:3485:2    - Unknown word (symbol)       -- |symbol=false|包含 Symbol 键名|
DOC_CN.md:3495:4    - Unknown word (ansi)         -- ## ansiColor
DOC_CN.md:3503:11   - Unknown word (ansi)         -- namespace ansiColor {
DOC_CN.md:3506:7    - Unknown word (ansi)         -- const ansiColor: {
DOC_CN.md:3507:12   - Unknown word (ansi)         -- black: ansiColor.IFn;
DOC_CN.md:3508:10   - Unknown word (ansi)         -- red: ansiColor.IFn;
DOC_CN.md:3525:10   - Unknown word (Bright)       -- blackBright: ansiColor.IFn;
DOC_CN.md:3526:8    - Unknown word (Bright)       -- redBright: ansiColor.IFn;
DOC_CN.md:3527:10   - Unknown word (Bright)       -- greenBright: ansiColor.IFn;
DOC_CN.md:3528:11   - Unknown word (Bright)       -- yellowBright: ansiColor.IFn;
DOC_CN.md:3529:9    - Unknown word (Bright)       -- blueBright: ansiColor.IFn;
DOC_CN.md:3583:7    - Unknown word (need)         -- const needPx = arrToMap([
DOC_CN.md:3584:6    - Unknown word (column)       -- 'column-count',
DOC_CN.md:3585:6    - Unknown word (columns)      -- 'columns',
DOC_CN.md:3586:11   - Unknown word (weight)       -- 'font-weight',
DOC_CN.md:3587:11   - Unknown word (weight)       -- 'line-weight',
DOC_CN.md:3592:14   - Unknown word (column)       -- const key = 'column-count';
DOC_CN.md:3594:5    - Unknown word (need)         -- if (needPx[key]) val += 'px'
DOC_CN.md:35:32     - Unknown word (Plain)      -- attr(attributes: types.PlainObj<string>): $;
DOC_CN.md:3615:4    - Unknown word (average)      -- ## average
DOC_CN.md:3623:10   - Unknown word (average)      -- function average(...numbers: number[
DOC_CN.md:362:31    - Unknown word (licia)      -- before('#test', '<div>licia</div>');
DOC_CN.md:362:9     - Unknown word (before)     -- $insert.before('#test', '<div>licia
DOC_CN.md:3634:1    - Unknown word (average)      -- average(5, 3, 1); // -> 3
DOC_CN.md:363:12    - Unknown word (licia)      -- // -> <div>licia</div><div id="test"
DOC_CN.md:3646:5    - Unknown word (encode)       -- encode(bytes: number[]): string
DOC_CN.md:364:30    - Unknown word (licia)      -- after('#test', '<div>licia</div>');
DOC_CN.md:3653:5    - Unknown word (encode)       -- ### encode
DOC_CN.md:365:57    - Unknown word (licia)      -- mark"></div></div><div>licia</div>
DOC_CN.md:366:32    - Unknown word (licia)      -- prepend('#test', '<div>licia</div>');
DOC_CN.md:3672:8    - Unknown word (encode)       -- base64.encode([168, 174, 155, 255
DOC_CN.md:3699:31   - Unknown word (call)         -- Allow function to be call 4 times at last.
DOC_CN.md:3702:4    - Unknown word (binary)       -- ## binarySearch
DOC_CN.md:3710:10   - Unknown word (binary)       -- function binarySearch(
DOC_CN.md:3727:1    - Unknown word (binary)       -- binarySearch([1, 2, 3], 2)
DOC_CN.md:3728:1    - Unknown word (binary)       -- binarySearch([1, 2], 3); /
DOC_CN.md:3729:1    - Unknown word (binary)       -- binarySearch(
DOC_CN.md:372:5     - Unknown word (offset)     -- ## $offset
DOC_CN.md:3746:4    - Unknown word (bind)         -- ## bind
DOC_CN.md:3754:10   - Unknown word (bind)         -- function bind(
DOC_CN.md:3771:12   - Unknown word (bind)         -- const fn = bind(
DOC_CN.md:3775:14   - Unknown word (eustia)       -- { name: 'eustia' },
DOC_CN.md:3776:13   - Unknown word (utility)      -- 'I am a utility library.'
DOC_CN.md:3776:21   - Unknown word (library)      -- 'I am a utility library.'
DOC_CN.md:3778:29   - Unknown word (utility)      -- -> 'eustia: I am a utility library.'
DOC_CN.md:3778:37   - Unknown word (library)      -- eustia: I am a utility library.'
DOC_CN.md:380:12    - Unknown word (offset)     -- namespace $offset {
DOC_CN.md:381:16    - Unknown word (Offset)     -- interface IOffset {
DOC_CN.md:3829:38   - Unknown word (encoding)     -- bytesToStr(bytes: number[], encoding?: string): string;
DOC_CN.md:3837:2    - Unknown word (encoding)     -- |encoding=utf8|字符串编码|
DOC_CN.md:3868:9    - Unknown word (Require)      -- ## cacheRequire
DOC_CN.md:3876:15   - Unknown word (Require)      -- function cacheRequire(options?: {
DOC_CN.md:3878:5    - Unknown word (require)      -- requirePath?: boolean;
DOC_CN.md:388:50    - Unknown word (Offset)     -- safeEls.El): $offset.IOffset;
DOC_CN.md:3895:19   - Unknown word (Whether)      -- |requirePath=true|Whether require path should
DOC_CN.md:3895:50   - Unknown word (cached)       -- require path should be cached|
DOC_CN.md:3896:13   - Unknown word (Whether)      -- |code=false|Whether js code should be cached
DOC_CN.md:3896:39   - Unknown word (cached)       -- Whether js code should be cached|
DOC_CN.md:3897:20   - Unknown word (Whether)      -- |compileCache=true|Whether compile cache should
DOC_CN.md:38:32     - Unknown word (Plain)      -- data(attributes: types.PlainObj<string>): $;
DOC_CN.md:3900:6    - Unknown word (Require)      -- cacheRequire({
DOC_CN.md:3905:4    - Unknown word (callbackify)  -- ## callbackify
DOC_CN.md:3913:10   - Unknown word (callbackify)  -- function callbackify(fn: types.AnyFn): types
DOC_CN.md:3930:14   - Unknown word (callbackify)  -- const cbFn = callbackify(fn);
DOC_CN.md:3962:4    - Unknown word (capitalize)   -- ## capitalize
DOC_CN.md:3970:10   - Unknown word (capitalize)   -- function capitalize(str: string): string
DOC_CN.md:3981:1    - Unknown word (capitalize)   -- capitalize('rED'); // -> Red
DOC_CN.md:3984:4    - Unknown word (cast)         -- ## castPath
DOC_CN.md:3992:10   - Unknown word (cast)         -- function castPath(path: string | string
DOC_CN.md:4004:1    - Unknown word (cast)         -- castPath('a.b.c'); // ->
DOC_CN.md:4005:1    - Unknown word (cast)         -- castPath(['a']); // -> [
DOC_CN.md:4006:1    - Unknown word (cast)         -- castPath('a[0].b'); // -
DOC_CN.md:4048:9    - Unknown word (stat)         -- stat(): {
DOC_CN.md:4053:5    - Unknown word (cpuset)       -- cpuset: {
DOC_CN.md:4054:9    - Unknown word (cpus)         -- cpus(): {
DOC_CN.md:4058:5    - Unknown word (memory)       -- memory: {
DOC_CN.md:4069:12   - Unknown word (stat)         -- cgroup.cpu.stat();
DOC_CN.md:4072:4    - Unknown word (char)         -- ## char
DOC_CN.md:4074:11   - Unknown word (unicode)      -- 根据指定的整数返回 unicode 编码为该整数的字符。
DOC_CN.md:4080:10   - Unknown word (char)         -- function char(num: number): string
DOC_CN.md:4091:1    - Unknown word (char)         -- char(65); // -> 'A'
DOC_CN.md:4092:1    - Unknown word (char)         -- char(97); // -> 'a'
DOC_CN.md:4095:4    - Unknown word (chunk)        -- ## chunk
DOC_CN.md:4103:10   - Unknown word (chunk)        -- function chunk(arr: any[], size?: number
DOC_CN.md:4115:1    - Unknown word (chunk)        -- chunk([1, 2, 3, 4], 2); /
DOC_CN.md:4116:1    - Unknown word (chunk)        -- chunk([1, 2, 3, 4], 3); /
DOC_CN.md:4117:1    - Unknown word (chunk)        -- chunk([1, 2, 3, 4]); // -
DOC_CN.md:4120:4    - Unknown word (clamp)        -- ## clamp
DOC_CN.md:4128:10   - Unknown word (clamp)        -- function clamp(n: number, lower: number
DOC_CN.md:4128:27   - Unknown word (lower)        -- function clamp(n: number, lower: number, upper: number
DOC_CN.md:4128:42   - Unknown word (upper)        -- number, lower: number, upper: number): number;
DOC_CN.md:4129:10   - Unknown word (clamp)        -- function clamp(n: number, upper: number
DOC_CN.md:4129:27   - Unknown word (upper)        -- function clamp(n: number, upper: number): number;
DOC_CN.md:4137:2    - Unknown word (lower)        -- |lower|下限|
DOC_CN.md:4138:2    - Unknown word (upper)        -- |upper|上限|
DOC_CN.md:4142:1    - Unknown word (clamp)        -- clamp(-10, -5, 5); // ->
DOC_CN.md:4143:1    - Unknown word (clamp)        -- clamp(10, -5, 5); // -> 5
DOC_CN.md:4175:7    - Unknown word (Help)        -- ## cliHelp
DOC_CN.md:4183:14   - Unknown word (Help)        -- namespace cliHelp {
DOC_CN.md:4186:9    - Unknown word (shorthand)   -- shorthand?: string;
DOC_CN.md:4201:13   - Unknown word (Help)        -- function cliHelp(data: cliHelp.IData
DOC_CN.md:4201:27   - Unknown word (Help)        -- function cliHelp(data: cliHelp.IData | cliHelp.ICommand
DOC_CN.md:4201:43   - Unknown word (Help)        -- cliHelp.IData | cliHelp.ICommand): string;
DOC_CN.md:4215:15   - Unknown word (module)      -- usage: ['<module-name> [options]', 'lpad
DOC_CN.md:4215:41   - Unknown word (lpad)        -- module-name> [options]', 'lpad --browser'],
DOC_CN.md:4219:13   - Unknown word (shorthand)   -- shorthand: 'b',
DOC_CN.md:4220:20   - Unknown word (True)        -- desc: 'True if test should run in
DOC_CN.md:4309:4    - Unknown word (combine)     -- ## combine
DOC_CN.md:4317:10   - Unknown word (combine)     -- function combine(keys: string[], values
DOC_CN.md:4329:1    - Unknown word (combine)     -- combine(['a', 'b', 'c'], [1
DOC_CN.md:4332:4    - Unknown word (compact)     -- ## compact
DOC_CN.md:4340:10   - Unknown word (compact)     -- function compact(arr: any[]): any[];
DOC_CN.md:4345:12   - Unknown word (null)        -- 虚值包括 false，null，0，空字符串，undefined 和 NaN
DOC_CN.md:4345:24   - Unknown word (undefined)   -- 括 false，null，0，空字符串，undefined 和 NaN。
DOC_CN.md:4353:1    - Unknown word (compact)     -- compact([0, 1, false, 2, ''
DOC_CN.md:4377:7    - Unknown word (welcome)     -- const welcome = compose(
DOC_CN.md:4382:23   - Unknown word (Upper)       -- return name.toUpperCase() + '!';
DOC_CN.md:4386:1    - Unknown word (welcome)     -- welcome('licia'); // -> 'hi
DOC_CN.md:4386:30   - Unknown word (LICIA)       -- licia'); // -> 'hi: LICIA!'
DOC_CN.md:4389:4    - Unknown word (compress)    -- ## compressImg
DOC_CN.md:4397:10   - Unknown word (compress)    -- function compressImg(
DOC_CN.md:43:9      - Unknown word (toggle)     -- toggleClass(name: string):
DOC_CN.md:4401:10   - Unknown word (compress)    -- function compressImg(
DOC_CN.md:4409:9    - Unknown word (quality)     -- quality?: number;
DOC_CN.md:4431:11   - Unknown word (Mine)        -- |mimeType|Mine 类型|
DOC_CN.md:4432:2    - Unknown word (quality)     -- |quality=0.8|图片质量，从 0 到 1|
DOC_CN.md:4440:1    - Unknown word (compress)    -- compressImg(
DOC_CN.md:4473:4    - Unknown word (contain)     -- ## contain
DOC_CN.md:4481:10   - Unknown word (contain)     -- function contain(arr: any[] | {} | string
DOC_CN.md:4493:1    - Unknown word (contain)     -- contain([1, 2, 3], 1); // -
DOC_CN.md:4494:1    - Unknown word (contain)     -- contain({ a: 1, b: 2 }, 1);
DOC_CN.md:4495:1    - Unknown word (contain)     -- contain('abc', 'a'); // -> true
DOC_CN.md:4521:4    - Unknown word (convert)     -- ## convertBase
DOC_CN.md:4529:10   - Unknown word (convert)     -- function convertBase(
DOC_CN.md:4546:1    - Unknown word (convert)     -- convertBase('10', 2, 10); /
DOC_CN.md:4547:1    - Unknown word (convert)     -- convertBase('ff', 16, 2); /
DOC_CN.md:4550:4    - Unknown word (convert)     -- ## convertBin
DOC_CN.md:4605:9    - Unknown word (expires)     -- expires?: number;
DOC_CN.md:4658:13   - Unknown word (exec)        -- 使用 document.execCommand 将文本拷贝到剪贴板。
DOC_CN.md:4676:8    - Unknown word (Handle)      -- // Handle errors.
DOC_CN.md:4690:5    - Unknown word (previous)    -- previous?: number
DOC_CN.md:4699:2    - Unknown word (previous)    -- |previous|用于累积计算的 CRC1 校验码|
DOC_CN.md:4716:5    - Unknown word (previous)    -- previous?: number
DOC_CN.md:4725:2    - Unknown word (previous)    -- |previous|用于累积计算的 CRC16 校验码|
DOC_CN.md:4742:5    - Unknown word (previous)    -- previous?: number
DOC_CN.md:4807:10   - Unknown word (Assigner)    -- ## createAssigner
DOC_CN.md:4815:16   - Unknown word (Assigner)    -- function createAssigner(
DOC_CN.md:4852:33   - Unknown word (plain)       -- test', { type: 'text/plain' }); // -> Blob url
DOC_CN.md:4868:47   - Unknown word (indent)      -- object, options?: { indent?: string }): string
DOC_CN.md:4899:2    - Unknown word (indent)      -- |indent=' '|缩进|
DOC_CN.md:48:9      - Unknown word (before)     -- before(content: string | Element
DOC_CN.md:4903:67   - Unknown word (declarations) -- selector: '.name', declarations: [...]}]}
DOC_CN.md:4921:9    - Unknown word (important)    -- important?: boolean;
DOC_CN.md:4938:4    - Unknown word (important)    -- 1. important 标识
DOC_CN.md:4956:27   - Unknown word (icon)         -- cssPriority('a.button > i.icon:before', {
DOC_CN.md:4957:5    - Unknown word (important)    -- important: true,
DOC_CN.md:4963:7    - Unknown word (Supports)     -- ## cssSupports
DOC_CN.md:4971:13   - Unknown word (Supports)     -- function cssSupports(name: string, val?:
DOC_CN.md:4983:25   - Unknown word (flex)         -- cssSupports('display', 'flex'); // -> true
DOC_CN.md:4983:4    - Unknown word (Supports)     -- cssSupports('display', 'flex');
DOC_CN.md:4984:4    - Unknown word (Supports)     -- cssSupports('display', 'invalid
DOC_CN.md:4985:38   - Unknown word (underline)    -- text-decoration-line', 'underline'); // -> true
DOC_CN.md:4985:4    - Unknown word (Supports)     -- cssSupports('text-decoration-line
DOC_CN.md:4990:4    - Unknown word (curry)        -- ## curry
DOC_CN.md:4998:10   - Unknown word (curry)        -- function curry(fn: types.AnyFn): types
DOC_CN.md:5009:13   - Unknown word (curry)        -- const add = curry(function(a, b) {
DOC_CN.md:5027:75   - Unknown word (null)         -- base64: boolean } | null;
DOC_CN.md:5066:87   - Unknown word (plain)        -- World!', mime: 'text/plain', charset: '', base
DOC_CN.md:5067:42   - Unknown word (plain)        -- Hello, World!', 'text/plain'); // -> 'data:,Hello
DOC_CN.md:5145:49   - Unknown word (wait)         -- types.AnyFn>(fn: T, wait: number): T;
DOC_CN.md:5153:2    - Unknown word (wait)         -- |wait|延迟毫秒数|
DOC_CN.md:5157:10   - Unknown word (Layout)       -- const calLayout = debounce(function
DOC_CN.md:5158:24   - Unknown word (Layout)       -- $(window).resize(calLayout);
DOC_CN.md:5181:18   - Unknown word (uninteresting) -- d('doing lots of uninteresting work');
DOC_CN.md:5181:4    - Unknown word (doing)        -- d('doing lots of uninteresting
DOC_CN.md:5185:4    - Unknown word (deburr)        -- ## deburr
DOC_CN.md:5193:10   - Unknown word (deburr)        -- function deburr(str: string): string
DOC_CN.md:5204:1    - Unknown word (deburr)        -- deburr('déjà vu'); // -> 'deja
DOC_CN.md:5204:27   - Unknown word (deja)          -- deburr('déjà vu'); // -> 'deja vu'
DOC_CN.md:5204:9    - Unknown word (déjà)          -- deburr('déjà vu'); // -> 'deja vu
DOC_CN.md:5250:22   - Unknown word (Hood)          -- defaults({ name: 'RedHood' }, { name: 'Unknown
DOC_CN.md:5250:40   - Unknown word (Unknown)       -- RedHood' }, { name: 'Unknown', age: 24 }); // ->
DOC_CN.md:5250:79   - Unknown word (Hood)          -- ); // -> {name: 'RedHood', age: 24}
DOC_CN.md:5263:5    - Unknown word (requires)      -- requires: string[],
DOC_CN.md:5274:2    - Unknown word (requires)      -- |requires|依赖|
DOC_CN.md:529:9     - Unknown word (mean)       -- mean: number;
DOC_CN.md:52:1      - Unknown word (declare)    -- declare function $(selector
DOC_CN.md:530:9     - Unknown word (variance)   -- variance: number;
DOC_CN.md:5332:20   - Unknown word (pointed)       -- // this is pointed to obj.b
DOC_CN.md:5334:7    - Unknown word (bind)          -- }.bind(obj)
DOC_CN.md:5379:7    - Unknown word (Require)       -- ## delRequireCache
DOC_CN.md:5387:13   - Unknown word (Require)       -- function delRequireCache(id: string): void
DOC_CN.md:5400:27   - Unknown word (undefined)     -- require('licia').a; // -> undefined
DOC_CN.md:540:5     - Unknown word (constructor) -- constructor(fn: types.AnyFn, options
DOC_CN.md:5432:6    - Unknown word (later)         -- 'later'
DOC_CN.md:5434:13   - Unknown word (later)         -- // -> Logs 'later' after one second
DOC_CN.md:5434:30   - Unknown word (second)        -- Logs 'later' after one second
DOC_CN.md:543:9     - Unknown word (benches)     -- benches: Array<types.AnyFn
DOC_CN.md:5470:15   - Unknown word (Handler)       -- function clickHandler() {
DOC_CN.md:5473:52   - Unknown word (Handler)       -- , '.children', clickHandler);
DOC_CN.md:5498:35   - Unknown word (obsolete)      -- obsoleteFn = deprecate(fn, 'obsoleteFn is deprecated.');
DOC_CN.md:5498:49   - Unknown word (deprecated)    -- deprecate(fn, 'obsoleteFn is deprecated.');
DOC_CN.md:5498:7    - Unknown word (obsolete)      -- const obsoleteFn = deprecate(fn, 'obsoleteFn
DOC_CN.md:5499:1    - Unknown word (obsolete)      -- obsoleteFn();
DOC_CN.md:551:5     - Unknown word (constructor) -- ### constructor
DOC_CN.md:5522:5    - Unknown word (navigator)     -- |ua=navigator.userAgent|浏览器用户代理|
DOC_CN.md:5525:10   - Unknown word (chrome)        -- 支持浏览器：ie，chrome，edge，firefox，opera，safari
DOC_CN.md:5525:17   - Unknown word (edge)          -- 支持浏览器：ie，chrome，edge，firefox，opera，safari
DOC_CN.md:5525:22   - Unknown word (firefox)       -- 持浏览器：ie，chrome，edge，firefox，opera，safari，ios（mobile
DOC_CN.md:5525:30   - Unknown word (opera)         -- chrome，edge，firefox，opera，safari，ios（mobile safari
DOC_CN.md:5525:36   - Unknown word (safari)        -- chrome，edge，firefox，opera，safari，ios（mobile safari），android
DOC_CN.md:5525:54   - Unknown word (safari)        -- opera，safari，ios（mobile safari），android（android browser
DOC_CN.md:5530:21   - Unknown word (about)         -- // Do something about old IE...
DOC_CN.md:5548:22   - Unknown word (True)          -- detectMocha(); // -> True if mocha is running
DOC_CN.md:5566:5    - Unknown word (navigator)     -- |ua=navigator.userAgent|浏览器用户代理|
DOC_CN.md:5573:21   - Unknown word (about)         -- // Do something about ios...
DOC_CN.md:5577:4    - Unknown word (difference)    -- ## difference
DOC_CN.md:5585:10   - Unknown word (difference)    -- function difference(arr: any[], ...args
DOC_CN.md:5597:1    - Unknown word (difference)    -- difference([3, 2, 1], [4, 2]);
DOC_CN.md:5644:12   - Unknown word (plain)         -- |type=text/plain|数据类型|
DOC_CN.md:5687:4    - Unknown word (duration)      -- ## durationFormat
DOC_CN.md:5695:10   - Unknown word (duration)      -- function durationFormat(duration: number
DOC_CN.md:5695:25   - Unknown word (duration)      -- function durationFormat(duration: number, mask?: string
DOC_CN.md:5733:19   - Unknown word (Dictionary)    -- object: types.Dictionary<T>,
DOC_CN.md:5760:12   - Unknown word (percent)       -- linear(percent: number): number;
DOC_CN.md:5761:12   - Unknown word (percent)       -- inQuad(percent: number): number;
DOC_CN.md:5761:7    - Unknown word (Quad)          -- inQuad(percent: number): number
DOC_CN.md:5762:13   - Unknown word (percent)       -- outQuad(percent: number): number;
DOC_CN.md:5762:8    - Unknown word (Quad)          -- outQuad(percent: number): number
DOC_CN.md:5763:10   - Unknown word (Quad)          -- inOutQuad(percent: number): number
DOC_CN.md:5763:15   - Unknown word (percent)       -- inOutQuad(percent: number): number;
DOC_CN.md:5764:10   - Unknown word (Quad)          -- outInQuad(percent: number): number
DOC_CN.md:5764:15   - Unknown word (percent)       -- outInQuad(percent: number): number;
DOC_CN.md:5765:7    - Unknown word (Cubic)         -- inCubic(percent: number): number
DOC_CN.md:5766:8    - Unknown word (Cubic)         -- outCubic(percent: number): number
DOC_CN.md:5767:7    - Unknown word (Quart)         -- inQuart(percent: number): number
DOC_CN.md:5768:8    - Unknown word (Quart)         -- outQuart(percent: number): number
DOC_CN.md:5769:7    - Unknown word (Quint)         -- inQuint(percent: number): number
DOC_CN.md:5770:8    - Unknown word (Quint)         -- outQuint(percent: number): number
DOC_CN.md:5771:7    - Unknown word (Expo)          -- inExpo(percent: number): number
DOC_CN.md:5772:8    - Unknown word (Expo)          -- outExpo(percent: number): number
DOC_CN.md:5773:7    - Unknown word (Sine)          -- inSine(percent: number): number
DOC_CN.md:5774:8    - Unknown word (Sine)          -- outSine(percent: number): number
DOC_CN.md:5777:32   - Unknown word (elasticity)    -- inElastic(percent: number, elasticity?: number): number;
DOC_CN.md:5778:33   - Unknown word (elasticity)    -- outElastic(percent: number, elasticity?: number): number;
DOC_CN.md:5779:7    - Unknown word (Back)          -- inBack(percent: number): number
DOC_CN.md:5780:8    - Unknown word (Back)          -- outBack(percent: number): number
DOC_CN.md:5781:10   - Unknown word (Back)          -- inOutBack(percent: number): number
DOC_CN.md:5782:10   - Unknown word (Back)          -- outInBack(percent: number): number
DOC_CN.md:5800:4    - Unknown word (emulate)       -- ## emulateTouch
DOC_CN.md:5808:10   - Unknown word (emulate)       -- function emulateTouch(el: Element): void
DOC_CN.md:5819:1    - Unknown word (emulate)       -- emulateTouch(el);
DOC_CN.md:5820:22   - Unknown word (touchstart)    -- el.addEventListener('touchstart', () => {}, false);
DOC_CN.md:5831:31   - Unknown word (suffix)        -- endWith(str: string, suffix: string): boolean;
DOC_CN.md:5839:2    - Unknown word (suffix)        -- |suffix|字符串后缀|
DOC_CN.md:5960:4    - Unknown word (every)         -- ## every
DOC_CN.md:5968:10   - Unknown word (every)         -- function every<T>(
DOC_CN.md:5973:10   - Unknown word (every)         -- function every<T>(
DOC_CN.md:5974:19   - Unknown word (Dictionary)    -- object: types.Dictionary<T>,
DOC_CN.md:5990:1    - Unknown word (every)         -- every([2, 4], function(val
DOC_CN.md:59:1      - Unknown word (offset)     -- offset, hide, show, first,
DOC_CN.md:59:9      - Unknown word (hide)       -- offset, hide, show, first, last,
DOC_CN.md:6015:20   - Unknown word (Hood)          -- extend({ name: 'RedHood' }, { age: 24 }); /
DOC_CN.md:6018:10   - Unknown word (Deep)         -- ## extendDeep
DOC_CN.md:6026:16   - Unknown word (Deep)         -- function extendDeep(destination: any, .
DOC_CN.md:6038:7    - Unknown word (Deep)         -- extendDeep(
DOC_CN.md:6042:13   - Unknown word (mother)       -- mother: 'Jane',
DOC_CN.md:6042:22   - Unknown word (Jane)         -- mother: 'Jane',
DOC_CN.md:6048:13   - Unknown word (brother)      -- brother: 'Bruce'
DOC_CN.md:6048:23   - Unknown word (Bruce)        -- brother: 'Bruce'
DOC_CN.md:6052:34   - Unknown word (mother)       -- 'RedHood', family: {mother: 'Jane', father: 'Jack
DOC_CN.md:6052:43   - Unknown word (Jane)         -- , family: {mother: 'Jane', father: 'Jack', brother
DOC_CN.md:6052:66   - Unknown word (brother)      -- Jane', father: 'Jack', brother: 'Bruce'}}
DOC_CN.md:6052:76   - Unknown word (Bruce)        -- father: 'Jack', brother: 'Bruce'}}
DOC_CN.md:6078:16   - Unknown word (Cmts)         -- ## extractBlockCmts
DOC_CN.md:6078:4    - Unknown word (extract)      -- ## extractBlockCmts
DOC_CN.md:607:5     - Unknown word (constructor) -- ### constructor
DOC_CN.md:6086:10   - Unknown word (extract)      -- function extractBlockCmts(str: string
DOC_CN.md:6086:22   - Unknown word (Cmts)         -- function extractBlockCmts(str: string): string
DOC_CN.md:6097:1    - Unknown word (extract)      -- extractBlockCmts('\/*licia*
DOC_CN.md:6097:13   - Unknown word (Cmts)         -- extractBlockCmts('\/*licia*\/'); //
DOC_CN.md:60:42     - Unknown word (toggle)     -- addClass, rmClass, toggleClass, hasClass, append
DOC_CN.md:6100:4    - Unknown word (extract)      -- ## extractUrls
DOC_CN.md:6108:10   - Unknown word (extract)      -- function extractUrls(str: string): string
DOC_CN.md:6120:16   - Unknown word (site)         -- '[Official site: http://eustia.liriliri
DOC_CN.md:6120:7    - Unknown word (Official)     -- '[Official site: http://eustia
DOC_CN.md:6141:35   - Unknown word (null)         -- Promise<Document | null>;
DOC_CN.md:6155:9    - Unknown word (timeout)      -- timeout?: number;
DOC_CN.md:6164:17   - Unknown word (pollyfill)    -- 注意：这并不是 fetch 的 pollyfill。
DOC_CN.md:6175:5    - Unknown word (timeout)      -- timeout: 3000,
DOC_CN.md:6187:4    - Unknown word (fibonacci)    -- ## fibonacci
DOC_CN.md:618:4     - Unknown word (Bloom)       -- ## BloomFilter
DOC_CN.md:6195:10   - Unknown word (fibonacci)    -- function fibonacci(n: number): number;
DOC_CN.md:61:1      - Unknown word (before)     -- before, after
DOC_CN.md:6206:1    - Unknown word (fibonacci)    -- fibonacci(1); // -> 1
DOC_CN.md:6207:1    - Unknown word (fibonacci)    -- fibonacci(3); // -> 2
DOC_CN.md:6259:7    - Unknown word (undefined)    -- | undefined;
DOC_CN.md:626:7     - Unknown word (Bloom)       -- class BloomFilter {
DOC_CN.md:627:5     - Unknown word (constructor) -- constructor(size?: number, k?: number
DOC_CN.md:6301:4    - Unknown word (fill)         -- ## fill
DOC_CN.md:6309:10   - Unknown word (fill)         -- function fill(
DOC_CN.md:6324:10   - Unknown word (length)       -- |end=arr.length|结束位置，不包括|
DOC_CN.md:6328:1    - Unknown word (fill)         -- fill([1, 2, 3], '*'); //
DOC_CN.md:6329:1    - Unknown word (fill)         -- fill([1, 2, 3], '*', 1,
DOC_CN.md:6346:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC_CN.md:635:5     - Unknown word (constructor) -- ### constructor
DOC_CN.md:6379:8    - Unknown word (undefined)    -- ): T | undefined;
DOC_CN.md:6381:19   - Unknown word (Dictionary)   -- object: types.Dictionary<T>,
DOC_CN.md:6384:8    - Unknown word (undefined)    -- ): T | undefined;
DOC_CN.md:6400:20   - Unknown word (john)         -- name: 'john',
DOC_CN.md:6404:20   - Unknown word (jane)         -- name: 'jane',
DOC_CN.md:6411:18   - Unknown word (jane)         -- ); // -> {name: 'jane', age: 23}
DOC_CN.md:6437:20   - Unknown word (john)         -- name: 'john',
DOC_CN.md:6441:20   - Unknown word (jane)         -- name: 'jane',
DOC_CN.md:6504:20   - Unknown word (john)         -- name: 'john',
DOC_CN.md:6508:20   - Unknown word (jane)         -- name: 'jane',
DOC_CN.md:6512:20   - Unknown word (kitty)        -- name: 'kitty',
DOC_CN.md:6560:7    - Unknown word (Argument)     -- |args|Argument 对象|
DOC_CN.md:6566:57   - Unknown word (arguments)    -- Function', '...number'], arguments);
DOC_CN.md:6572:12   - Unknown word (Throw)        -- test(); // Throw error
DOC_CN.md:6573:26   - Unknown word (Throw)        -- 'test', 'test'); // Throw error
DOC_CN.md:6574:39   - Unknown word (Throw)        -- {}, 5, 'test'); // Throw error
DOC_CN.md:65:12     - Unknown word (eustia)     -- $btn.html('eustia');
DOC_CN.md:660:19    - Unknown word (Bloom)       -- const bloom = new BloomFilter(256, 3);
DOC_CN.md:660:7     - Unknown word (bloom)       -- const bloom = new BloomFilter(2
DOC_CN.md:661:1     - Unknown word (bloom)       -- bloom.add('Bruce Wayne');
DOC_CN.md:661:12    - Unknown word (Bruce)       -- bloom.add('Bruce Wayne');
DOC_CN.md:661:18    - Unknown word (Wayne)       -- bloom.add('Bruce Wayne');
DOC_CN.md:662:1     - Unknown word (bloom)       -- bloom.add('Clark Kent');
DOC_CN.md:662:12    - Unknown word (Clark)       -- bloom.add('Clark Kent');
DOC_CN.md:662:18    - Unknown word (Kent)        -- bloom.add('Clark Kent');
DOC_CN.md:663:1     - Unknown word (bloom)       -- bloom.test('Clark Kent');
DOC_CN.md:663:13    - Unknown word (Clark)       -- bloom.test('Clark Kent'); // -> true
DOC_CN.md:663:19    - Unknown word (Kent)        -- bloom.test('Clark Kent'); // -> true
DOC_CN.md:663:33    - Unknown word (true)        -- Clark Kent'); // -> true
DOC_CN.md:664:1     - Unknown word (bloom)       -- bloom.test('Bruce Wayne')
DOC_CN.md:664:13    - Unknown word (Bruce)       -- bloom.test('Bruce Wayne'); // -> true
DOC_CN.md:664:19    - Unknown word (Wayne)       -- bloom.test('Bruce Wayne'); // -> true
DOC_CN.md:664:34    - Unknown word (true)        -- Bruce Wayne'); // -> true
DOC_CN.md:6653:4    - Unknown word (fraction)     -- ## fraction
DOC_CN.md:665:13    - Unknown word (Tony)        -- bloom.test('Tony Stark'); // -> false
DOC_CN.md:665:18    - Unknown word (Stark)       -- bloom.test('Tony Stark'); // -> false
DOC_CN.md:665:33    - Unknown word (false)       -- Tony Stark'); // -> false
DOC_CN.md:6661:10   - Unknown word (fraction)     -- function fraction(num: number): string
DOC_CN.md:6672:1    - Unknown word (fraction)     -- fraction(1.2); // -> '6/5'
DOC_CN.md:6675:4    - Unknown word (freeze)       -- ## freeze
DOC_CN.md:6677:8    - Unknown word (freeze)       -- Object.freeze 的快捷方式。
DOC_CN.md:6683:10   - Unknown word (freeze)       -- function freeze<T>(obj: T): T;
DOC_CN.md:6688:14   - Unknown word (freeze)       -- 如果不支持 Object.freeze，使用 Object.defineProperties
DOC_CN.md:6697:1    - Unknown word (freeze)       -- freeze(a);
DOC_CN.md:6702:10   - Unknown word (Deep)         -- ## freezeDeep
DOC_CN.md:6710:16   - Unknown word (Deep)         -- function freezeDeep<T>(obj: T): T;
DOC_CN.md:6736:28   - Unknown word (encoding)     -- readFile(path: string, encoding: string): Promise<string
DOC_CN.md:6755:6    - Unknown word (catch)        -- .catch(function(err) {
DOC_CN.md:6756:12   - Unknown word (Handle)       -- // Handle errors
DOC_CN.md:6832:5    - Unknown word (haystack)     -- haystack: any[],
DOC_CN.md:6834:13   - Unknown word (Sensitive)    -- caseSensitive?: boolean;
DOC_CN.md:6845:2    - Unknown word (haystacks)    -- |haystacks|搜索集合|
DOC_CN.md:6852:6    - Unknown word (Sensitive)    -- |caseSensitive=false|是否大小写敏感|
DOC_CN.md:6975:4    - Unknown word (golangify)    -- ## golangify
DOC_CN.md:6983:10   - Unknown word (golangify)    -- function golangify<T, U = Error>(
DOC_CN.md:6986:10   - Unknown word (golangify)    -- function golangify<T, U = Error>(
DOC_CN.md:69:11     - Unknown word (something)  -- // Do something...
DOC_CN.md:7005:15   - Unknown word (golangify)    -- let fnA = golangify(async () => {
DOC_CN.md:7006:9    - Unknown word (throw)        -- throw Error('err');
DOC_CN.md:7008:5    - Unknown word (await)        -- await fnA(); // -> [undefined
DOC_CN.md:7009:15   - Unknown word (golangify)    -- let fnB = golangify(async num => num *
DOC_CN.md:7010:5    - Unknown word (await)        -- await fnB(2); // -> [4, null
DOC_CN.md:7012:5    - Unknown word (await)        -- await golangify(Promise.reject
DOC_CN.md:7013:5    - Unknown word (await)        -- await golangify(Promise.resolve
DOC_CN.md:7048:6    - Unknown word (inner)        -- 'inner text'
DOC_CN.md:7108:5    - Unknown word (encode)       -- encode(bytes: number[]): string
DOC_CN.md:7115:5    - Unknown word (encode)       -- ### encode
DOC_CN.md:7153:9    - Unknown word (keyword)      -- keyword?: string;
DOC_CN.md:7154:9    - Unknown word (operator)     -- operator?: string;
DOC_CN.md:7170:23   - Unknown word (keyword)      -- comment，string，number，keyword，operator
DOC_CN.md:7170:31   - Unknown word (operator)     -- string，number，keyword，operator
DOC_CN.md:7174:5    - Unknown word (keyword)     -- keyword: 'color:#569cd6;'
DOC_CN.md:7175:25   - Unknown word (keyword)     -- // -> '<span class="keyword" style="color:#569cd
DOC_CN.md:7175:85   - Unknown word (operator)    -- span> a <span class="operator" style="color:#9945
DOC_CN.md:7215:27   - Unknown word (bigger)      -- throw Error('a is bigger than 100');
DOC_CN.md:7215:34   - Unknown word (than)        -- throw Error('a is bigger than 100');
DOC_CN.md:7215:9    - Unknown word (throw)       -- throw Error('a is bigger than
DOC_CN.md:7235:4    - Unknown word (hotkey)      -- ## hotkey
DOC_CN.md:7243:11   - Unknown word (hotkey)      -- namespace hotkey {
DOC_CN.md:7248:7    - Unknown word (hotkey)      -- const hotkey: {
DOC_CN.md:7249:30   - Unknown word (hotkey)      -- key: string, options: hotkey.IOptions, listener:
DOC_CN.md:7251:31   - Unknown word (hotkey)      -- key: string, options: hotkey.IOptions, listener:
DOC_CN.md:7290:12   - Unknown word (shift)       -- hotkey.on('shift+a, shift+b', keyDown
DOC_CN.md:7290:21   - Unknown word (shift)       -- hotkey.on('shift+a, shift+b', keyDown);
DOC_CN.md:7291:13   - Unknown word (shift)       -- hotkey.off('shift+a', keyDown);
DOC_CN.md:7402:4    - Unknown word (indent)      -- ## indent
DOC_CN.md:7410:10   - Unknown word (indent)      -- function indent(
DOC_CN.md:7412:5    - Unknown word (char)        -- char?: string,
DOC_CN.md:7427:1    - Unknown word (indent)      -- indent('foo\nbar', ' ', 4)
DOC_CN.md:745:30    - Unknown word (false)       -- content-type'); // -> false
DOC_CN.md:7519:1    - Unknown word (library)     -- library = licia
DOC_CN.md:7522:8    - Unknown word (surunzi)     -- name = surunzi
DOC_CN.md:7523:11   - Unknown word (redhoodsu)   -- alias[] = redhoodsu
DOC_CN.md:7525:12   - Unknown word (library)     -- `); // -> {library: 'licia', user: {info
DOC_CN.md:7525:51   - Unknown word (surunzi)     -- user: {info: {name: 'surunzi', alias: ['redhoodsu
DOC_CN.md:7525:70   - Unknown word (redhoodsu)   -- 'surunzi', alias: ['redhoodsu', 'red']}}}
DOC_CN.md:7530:4    - Unknown word (insertion)   -- ## insertionSort
DOC_CN.md:7538:10   - Unknown word (insertion)   -- function insertionSort(arr: any[], cmp
DOC_CN.md:7550:1    - Unknown word (insertion)   -- insertionSort([2, 1]); // ->
DOC_CN.md:7553:4    - Unknown word (intersect)   -- ## intersect
DOC_CN.md:7561:10   - Unknown word (intersect)   -- function intersect(...arr: Array<any[]
DOC_CN.md:756:15    - Unknown word (extends)     -- class Channel extends Emitter {
DOC_CN.md:756:23    - Unknown word (Emitter)     -- class Channel extends Emitter {
DOC_CN.md:7572:1    - Unknown word (intersect)   -- intersect([1, 2, 3, 4], [2, 1
DOC_CN.md:7575:4    - Unknown word (intersect)   -- ## intersectRange
DOC_CN.md:7583:11   - Unknown word (intersect)   -- namespace intersectRange {
DOC_CN.md:7635:23   - Unknown word (will)        -- invariant(true, 'This will not throw');
DOC_CN.md:7635:32   - Unknown word (throw)       -- true, 'This will not throw');
DOC_CN.md:7637:24   - Unknown word (will)        -- invariant(false, 'This will throw an error with
DOC_CN.md:7637:29   - Unknown word (throw)       -- invariant(false, 'This will throw an error with this message
DOC_CN.md:7638:37   - Unknown word (will)        -- Invariant Violation: This will throw an error with
DOC_CN.md:7638:42   - Unknown word (throw)       -- Violation: This will throw an error with this message
DOC_CN.md:7641:4    - Unknown word (invert)      -- ## invert
DOC_CN.md:7649:10   - Unknown word (invert)      -- function invert(obj: any): any;
DOC_CN.md:7662:1    - Unknown word (invert)      -- invert({ a: 'b', c: 'd', e
DOC_CN.md:7665:6    - Unknown word (Absolute)    -- ## isAbsoluteUrl
DOC_CN.md:7673:12   - Unknown word (Absolute)    -- function isAbsoluteUrl(url: string): boolean
DOC_CN.md:7684:3    - Unknown word (Absolute)    -- isAbsoluteUrl('http://www.surunzi
DOC_CN.md:7685:22   - Unknown word (surunzi)     -- isAbsoluteUrl('//www.surunzi.com'); // -> false
DOC_CN.md:7685:3    - Unknown word (Absolute)    -- isAbsoluteUrl('//www.surunzi.com
DOC_CN.md:7686:16   - Unknown word (surunzi)     -- isAbsoluteUrl('surunzi.com'); // -> false
DOC_CN.md:7686:3    - Unknown word (Absolute)    -- isAbsoluteUrl('surunzi.com');
DOC_CN.md:7697:36   - Unknown word (Arguments)   -- isArgs(val: any): val is IArguments;
DOC_CN.md:7710:16   - Unknown word (arguments)   -- return arguments;
DOC_CN.md:7760:9    - Unknown word (Like)        -- ## isArrLike
DOC_CN.md:7768:15   - Unknown word (Like)        -- function isArrLike(val: any): boolean;
DOC_CN.md:7781:6    - Unknown word (Like)        -- isArrLike('test'); // -> true
DOC_CN.md:7782:6    - Unknown word (Like)        -- isArrLike(document.body.children
DOC_CN.md:7783:6    - Unknown word (Like)        -- isArrLike([1, 2, 3]); // -> true
DOC_CN.md:7931:6    - Unknown word (Cyclic)      -- ## isCyclic
DOC_CN.md:7939:12   - Unknown word (Cyclic)      -- function isCyclic(val: any): boolean;
DOC_CN.md:7950:3    - Unknown word (Cyclic)      -- isCyclic({}); // -> false
DOC_CN.md:7953:3    - Unknown word (Cyclic)      -- isCyclic(obj); // -> true
DOC_CN.md:7956:10   - Unknown word (Mode)        -- ## isDarkMode
DOC_CN.md:7956:6    - Unknown word (Dark)        -- ## isDarkMode
DOC_CN.md:7964:12   - Unknown word (Dark)        -- function isDarkMode(): boolean;
DOC_CN.md:7964:16   - Unknown word (Mode)        -- function isDarkMode(): boolean;
DOC_CN.md:7970:15   - Unknown word (Dark)        -- console.log(isDarkMode()); // true if dark
DOC_CN.md:7970:19   - Unknown word (Mode)        -- console.log(isDarkMode()); // true if dark
DOC_CN.md:7970:39   - Unknown word (dark)        -- isDarkMode()); // true if dark mode
DOC_CN.md:7970:44   - Unknown word (mode)        -- )); // true if dark mode
DOC_CN.md:7993:22   - Unknown word (plain)       -- isDataUrl('data:text/plain;base64,SGVsbG8sIFdvcmxkIQ
DOC_CN.md:7993:44   - Unknown word (Fdvcmxk)     -- plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D'); // -> true
DOC_CN.md:8054:48   - Unknown word (inside)      -- -> true if running inside a docker container.
DOC_CN.md:816:39    - Unknown word (true)        -- isConnected(channelB); // -> true
DOC_CN.md:8170:6    - Unknown word (Even)        -- ## isEven
DOC_CN.md:8178:12   - Unknown word (Even)        -- function isEven(num: number): boolean
DOC_CN.md:8189:3    - Unknown word (Even)        -- isEven(0); // -> true
DOC_CN.md:8190:3    - Unknown word (Even)        -- isEven(1); // -> false
DOC_CN.md:8191:3    - Unknown word (Even)        -- isEven(2); // -> true
DOC_CN.md:8216:6    - Unknown word (Finite)      -- ## isFinite
DOC_CN.md:8224:12   - Unknown word (Finite)      -- function isFinite(val: any): boolean;
DOC_CN.md:8235:3    - Unknown word (Finite)      -- isFinite(3); // -> true
DOC_CN.md:8236:10   - Unknown word (Infinity)    -- isFinite(Infinity); // -> false
DOC_CN.md:8236:3    - Unknown word (Finite)      -- isFinite(Infinity); // -> false
DOC_CN.md:8265:6    - Unknown word (Full)        -- ## isFullWidth
DOC_CN.md:8273:12   - Unknown word (Full)        -- function isFullWidth(codePoint: number
DOC_CN.md:8280:12   - Unknown word (Unicode)     -- |codePoint|Unicode 码点|
DOC_CN.md:8284:3    - Unknown word (Full)        -- isFullWidth('a'.codePointAt
DOC_CN.md:8285:3    - Unknown word (Full)        -- isFullWidth(','.codePointAt
DOC_CN.md:8286:3    - Unknown word (Full)        -- isFullWidth('我'.codePointAt
DOC_CN.md:82:31     - Unknown word (safe)       -- function remove(element: $safeEls.El, name: string
DOC_CN.md:82:58     - Unknown word (void)       -- safeEls.El, name: string): void;
DOC_CN.md:832:12    - Unknown word (Constructor) -- class IConstructor extends Base {
DOC_CN.md:832:24    - Unknown word (extends)     -- class IConstructor extends Base {
DOC_CN.md:834:37    - Unknown word (statics)     -- extend(methods: any, statics: any): IConstructor
DOC_CN.md:834:53    - Unknown word (Constructor) -- any, statics: any): IConstructor;
DOC_CN.md:836:40    - Unknown word (Constructor) -- methods(methods: any): IConstructor;
DOC_CN.md:837:16    - Unknown word (statics)     -- static statics(statics: any): IConstructor
DOC_CN.md:837:24    - Unknown word (statics)     -- static statics(statics: any): IConstructor
DOC_CN.md:837:40    - Unknown word (Constructor) -- statics(statics: any): IConstructor;
DOC_CN.md:841:30    - Unknown word (statics)     -- Class(methods: any, statics?: any): Class.IConstructor
DOC_CN.md:841:53    - Unknown word (Constructor) -- statics?: any): Class.IConstructor;
DOC_CN.md:8432:32   - Unknown word (catch)       -- JSON.parse()` 和 `try... catch` 进行检测。
DOC_CN.md:8444:10   - Unknown word (Year)        -- ## isLeapYear
DOC_CN.md:8444:6    - Unknown word (Leap)        -- ## isLeapYear
DOC_CN.md:8452:12   - Unknown word (Leap)        -- function isLeapYear(year: number): boolean
DOC_CN.md:8452:16   - Unknown word (Year)        -- function isLeapYear(year: number): boolean
DOC_CN.md:8452:21   - Unknown word (year)        -- function isLeapYear(year: number): boolean;
DOC_CN.md:8459:2    - Unknown word (year)        -- |year|要检查的年份|
DOC_CN.md:8463:3    - Unknown word (Leap)        -- isLeapYear(2000); // -> true
DOC_CN.md:8463:7    - Unknown word (Year)        -- isLeapYear(2000); // -> true
DOC_CN.md:8464:3    - Unknown word (Leap)        -- isLeapYear(2002); // -> false
DOC_CN.md:8464:7    - Unknown word (Year)       -- isLeapYear(2002); // -> false
DOC_CN.md:849:2     - Unknown word (statics)     -- |statics|静态方法|
DOC_CN.md:8504:11   - Unknown word (Weak)       -- isMap(new WeakMap()); // -> false
DOC_CN.md:8530:10   - Unknown word (Program)    -- ## isMiniProgram
DOC_CN.md:8530:6    - Unknown word (Mini)       -- ## isMiniProgram
DOC_CN.md:8538:13   - Unknown word (Program)    -- const isMiniProgram: boolean;
DOC_CN.md:8538:9    - Unknown word (Mini)       -- const isMiniProgram: boolean;
DOC_CN.md:8544:15   - Unknown word (Mini)       -- console.log(isMiniProgram); // -> true
DOC_CN.md:8544:19   - Unknown word (Program)    -- console.log(isMiniProgram); // -> true if running
DOC_CN.md:8544:54   - Unknown word (mini)       -- true if running in mini program.
DOC_CN.md:8544:59   - Unknown word (program)    -- true if running in mini program.
DOC_CN.md:8562:5    - Unknown word (navigator)  -- |ua=navigator.userAgent|浏览器用户代理|
DOC_CN.md:8566:10   - Unknown word (navigator)  -- isMobile(navigator.userAgent);
DOC_CN.md:8587:16   - Unknown word (Undefined)  -- 跟全局 isNaN 不同的是，Undefined 不是 NaN。
DOC_CN.md:858:5     - Unknown word (introduce)   -- introduce: function() {
DOC_CN.md:8594:6    - Unknown word (Native)     -- ## isNative
DOC_CN.md:859:58    - Unknown word (years)       -- ', ' + this.age + ' years old.';
DOC_CN.md:85:15     - Unknown word (safe)       -- element: $safeEls.El,
DOC_CN.md:8602:12   - Unknown word (Native)     -- function isNative(val: any): boolean;
DOC_CN.md:8613:3    - Unknown word (Native)     -- isNative(function() {}); //
DOC_CN.md:8614:3    - Unknown word (Native)     -- isNative(Math.min); // -> true
DOC_CN.md:863:7     - Unknown word (Student)     -- const Student = People.extend(
DOC_CN.md:865:30    - Unknown word (Student)     -- initialize: function Student(name, age, school)
DOC_CN.md:8661:6    - Unknown word (Null)       -- ## isNull
DOC_CN.md:8663:8    - Unknown word (Null)       -- 检查值是否是 Null 类型。
DOC_CN.md:8669:12   - Unknown word (Null)       -- function isNull(val: any): val is null
DOC_CN.md:866:18    - Unknown word (call)        -- this.callSuper(People, 'initialize
DOC_CN.md:866:50    - Unknown word (arguments)   -- People, 'initialize', arguments);
DOC_CN.md:8677:10   - Unknown word (Null)       -- |返回值|如果是 Null 类型，返回真|
DOC_CN.md:8680:3    - Unknown word (Null)       -- isNull(null); // -> true
DOC_CN.md:8707:6    - Unknown word (Numeric)    -- ## isNumeric
DOC_CN.md:870:9     - Unknown word (introduce)   -- introduce: function() {
DOC_CN.md:8715:12   - Unknown word (Numeric)    -- function isNumeric(val: any): boolean;
DOC_CN.md:8726:3    - Unknown word (Numeric)    -- isNumeric(1); // -> true
DOC_CN.md:8727:3    - Unknown word (Numeric)    -- isNumeric('1'); // -> true
DOC_CN.md:8728:3    - Unknown word (Numeric)    -- isNumeric(Number.MAX_VALUE);
DOC_CN.md:872:22    - Unknown word (call)        -- this.callSuper(People, 'introduce
DOC_CN.md:872:41    - Unknown word (introduce)   -- this.callSuper(People, 'introduce') +
DOC_CN.md:873:23    - Unknown word (study)       -- '\n I study at ' +
DOC_CN.md:881:35    - Unknown word (Student)     -- return obj instanceof Student;
DOC_CN.md:886:15    - Unknown word (Student)     -- const a = new Student('allen', 17, 'Hogwarts
DOC_CN.md:886:37    - Unknown word (Hogwarts)    -- Student('allen', 17, 'Hogwarts');
DOC_CN.md:887:3     - Unknown word (introduce)   -- a.introduce(); // -> 'I am allen
DOC_CN.md:887:38    - Unknown word (years)       -- -> 'I am allen, 17 years old. \n I study at Hogwarts
DOC_CN.md:887:54    - Unknown word (study)       -- 17 years old. \n I study at Hogwarts.'
DOC_CN.md:887:63    - Unknown word (Hogwarts)    -- years old. \n I study at Hogwarts.'
DOC_CN.md:888:1     - Unknown word (Student)     -- Student.is(a); // -> true
DOC_CN.md:88:4      - Unknown word (void)       -- ): void;
DOC_CN.md:8928:6    - Unknown word (Relative)   -- ## isRelative
DOC_CN.md:8936:12   - Unknown word (Relative)   -- function isRelative(path: string): boolean
DOC_CN.md:8947:3    - Unknown word (Relative)   -- isRelative('README.md'); // ->
DOC_CN.md:8950:6    - Unknown word (Retina)     -- ## isRetina
DOC_CN.md:8952:9    - Unknown word (retina)     -- 判断是否运行在 retina 屏幕的设备上。
DOC_CN.md:8958:9    - Unknown word (Retina)     -- const isRetina: boolean;
DOC_CN.md:8964:15   - Unknown word (Retina)     -- console.log(isRetina); // -> true if high
DOC_CN.md:9009:11   - Unknown word (Weak)       -- isSet(new WeakSet()); // -> false
DOC_CN.md:90:15     - Unknown word (safe)       -- element: $safeEls.El,
DOC_CN.md:9129:6    - Unknown word (Symbol)     -- ## isSymbol
DOC_CN.md:9131:8    - Unknown word (Symbol)     -- 检查值是否是 Symbol 类型。
DOC_CN.md:9137:12   - Unknown word (Symbol)     -- function isSymbol(val: any): val is symbol
DOC_CN.md:9137:37   - Unknown word (symbol)     -- isSymbol(val: any): val is symbol;
DOC_CN.md:91:23     - Unknown word (Plain)      -- attributes: types.PlainObj<string>
DOC_CN.md:9219:6    - Unknown word (Weak)       -- ## isWeakMap
DOC_CN.md:9221:8    - Unknown word (Weak)       -- 检查值是否是 WeakMap 类型。
DOC_CN.md:9227:12   - Unknown word (Weak)       -- function isWeakMap(val: any): boolean
DOC_CN.md:92:4      - Unknown word (void)       -- ): void;
DOC_CN.md:9320:5    - Unknown word (timeout)    -- timeout?: number;
DOC_CN.md:9337:8    - Unknown word (callback)   -- |param=callback|回调参数名|
DOC_CN.md:9353:4    - Unknown word (kebab)      -- ## kebabCase
DOC_CN.md:9361:10   - Unknown word (kebab)      -- function kebabCase(str: string): string
DOC_CN.md:9372:1    - Unknown word (kebab)      -- kebabCase('fooBar'); // -
DOC_CN.md:9373:1    - Unknown word (kebab)      -- kebabCase('foo bar'); //
DOC_CN.md:9374:1    - Unknown word (kebab)      -- kebabCase('foo_bar'); //
DOC_CN.md:93:26     - Unknown word (safe)       -- function $attr(element: $safeEls.El, name: string
DOC_CN.md:9433:4    - Unknown word (kill)       -- ## kill
DOC_CN.md:9441:10   - Unknown word (kill)       -- function kill(pid: number): void;
DOC_CN.md:9451:1    - Unknown word (kill)       -- kill(9420);
DOC_CN.md:9485:16   - Unknown word (module)     -- importFn: (moduleId: string) => T,
DOC_CN.md:9487:5    - Unknown word (module)     -- ): (moduleId: string) => T;
DOC_CN.md:950:4     - Unknown word (Delegator)   -- ## Delegator
DOC_CN.md:9515:17   - Unknown word (module)     -- requireFn: (moduleId: string) => T
DOC_CN.md:9516:5    - Unknown word (module)     -- ): (moduleId: string) => T;
DOC_CN.md:9526:42   - Unknown word (called)     -- required only when _ is called.
DOC_CN.md:9553:4    - Unknown word (linkify)    -- ## linkify
DOC_CN.md:9561:10   - Unknown word (linkify)    -- function linkify(str: string, hyperlink
DOC_CN.md:9573:14   - Unknown word (Official)   -- const str = 'Official site: http://eustia
DOC_CN.md:9573:23   - Unknown word (site)       -- const str = 'Official site: http://eustia.liriliri
DOC_CN.md:9574:1    - Unknown word (linkify)    -- linkify(str); // -> 'Official
DOC_CN.md:9574:22   - Unknown word (Official)   -- linkify(str); // -> 'Official site: <a href="http
DOC_CN.md:9574:31   - Unknown word (site)       -- str); // -> 'Official site: <a href="http://eustia
DOC_CN.md:9575:1    - Unknown word (linkify)    -- linkify(str, function(url)
DOC_CN.md:958:7     - Unknown word (Delegator)   -- class Delegator {
DOC_CN.md:9599:33   - Unknown word (Loaded)     -- style.css', function(isLoaded) {
DOC_CN.md:960:44    - Unknown word (Delegator)   -- string, target?: string): Delegator;
DOC_CN.md:961:44    - Unknown word (Delegator)   -- string, target?: string): Delegator;
DOC_CN.md:962:44    - Unknown word (Delegator)   -- string, target?: string): Delegator;
DOC_CN.md:9647:30   - Unknown word (Loaded)     -- main.js', function(isLoaded) {
DOC_CN.md:9652:4    - Unknown word (longest)    -- ## longest
DOC_CN.md:9660:10   - Unknown word (longest)    -- function longest(arr: string[]): string
DOC_CN.md:9671:1    - Unknown word (longest)    -- longest(['a', 'abcde', 'abc
DOC_CN.md:9674:4    - Unknown word (lower)      -- ## lowerCase
DOC_CN.md:9682:10   - Unknown word (lower)      -- function lowerCase(str: string): string
DOC_CN.md:9693:1    - Unknown word (lower)      -- lowerCase('TEST'); // ->
DOC_CN.md:9696:4    - Unknown word (lpad)       -- ## lpad
DOC_CN.md:9704:10   - Unknown word (lpad)       -- function lpad(str: string, len: number
DOC_CN.md:9704:41   - Unknown word (chars)      -- string, len: number, chars?: string): string;
DOC_CN.md:9713:2    - Unknown word (chars)      -- |chars|填充字符串|
DOC_CN.md:9717:1    - Unknown word (lpad)       -- lpad('a', 5); // -> '
DOC_CN.md:9718:1    - Unknown word (lpad)       -- lpad('a', 5, '-'); // ->
DOC_CN.md:9720:30   - Unknown word (ababc)      -- abc', 5, 'ab'); // -> 'ababc'
DOC_CN.md:9723:4    - Unknown word (ltrim)      -- ## ltrim
DOC_CN.md:9731:10   - Unknown word (ltrim)      -- function ltrim(str: string, chars?
DOC_CN.md:9731:29   - Unknown word (chars)      -- function ltrim(str: string, chars?: string | string[]
DOC_CN.md:9739:2    - Unknown word (chars)      -- |chars|删除字符|
DOC_CN.md:9743:1    - Unknown word (ltrim)      -- ltrim(' abc  '); // -> 'abc
DOC_CN.md:9744:1    - Unknown word (ltrim)      -- ltrim('_abc_', '_'); // -
DOC_CN.md:9745:1    - Unknown word (ltrim)      -- ltrim('_abc_', ['a', '_']
DOC_CN.md:9762:19   - Unknown word (Dictionary) -- object: types.Dictionary<T>,
DOC_CN.md:9813:4    - Unknown word (matcher)    -- ## matcher
DOC_CN.md:9821:10   - Unknown word (matcher)    -- function matcher(attrs: any): types.AnyFn
DOC_CN.md:9838:17   - Unknown word (matcher)    -- filter(objects, matcher({ a: 4, c: 6 })); /
DOC_CN.md:9928:7    - Unknown word (fibonacci)  -- const fibonacci = memoize(function(n
Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Errors:
README.md:11:1      - Unknown word (Useful)     -- Useful utility collection with
README.md:11:8      - Unknown word (utility)    -- Useful utility collection with zero
README.md:33:111    - Unknown word (libraries)  -- works done. Unlike other libraries such as underscore,
README.md:33:121    - Unknown word (such)       -- Unlike other libraries such as underscore, mout
README.md:33:141    - Unknown word (mout)       -- such as underscore, mout, which strictly separates
README.md:33:153    - Unknown word (strictly)   -- underscore, mout, which strictly separates its functions
README.md:33:162    - Unknown word (separates)  -- mout, which strictly separates its functions into several
README.md:33:191    - Unknown word (several)    -- separates its functions into several categories like array
README.md:33:2      - Unknown word (Licia)      -- [Licia](https://licia.liriliri
README.md:33:210    - Unknown word (like)       -- into several categories like array, string and function
README.md:33:247    - Unknown word (licia)      -- string and function etc. licia is just a deadly simple
README.md:33:256    - Unknown word (just)       -- function etc. licia is just a deadly simple collection
README.md:33:263    - Unknown word (deadly)     -- etc. licia is just a deadly simple collection of
README.md:33:270    - Unknown word (simple)     -- licia is just a deadly simple collection of over
README.md:33:306    - Unknown word (modules)    -- collection of over 400 micro modules dealing problems in
README.md:33:314    - Unknown word (dealing)    -- over 400 micro modules dealing problems in different
README.md:33:334    - Unknown word (different)  -- dealing problems in different aspects.
README.md:33:344    - Unknown word (aspects)    -- problems in different aspects.
README.md:33:42     - Unknown word (utility)    -- licia.liriliri.io/) is a utility library that focus on
README.md:33:50     - Unknown word (library)    -- liriliri.io/) is a utility library that focus on getting
README.md:33:58     - Unknown word (that)       -- is a utility library that focus on getting daily
README.md:33:63     - Unknown word (focus)      -- utility library that focus on getting daily works
README.md:33:72     - Unknown word (getting)    -- library that focus on getting daily works done. Unlike
README.md:33:80     - Unknown word (daily)      -- that focus on getting daily works done. Unlike other
README.md:33:92     - Unknown word (done)       -- getting daily works done. Unlike other libraries
README.md:33:98     - Unknown word (Unlike)     -- getting daily works done. Unlike other libraries such
README.md:35:4      - Unknown word (Benefits)   -- ## Benefits
README.md:37:1      - Unknown word (Installing) -- Installing one library brings you
README.md:37:16     - Unknown word (library)    -- Installing one library brings you tons of useful
README.md:37:24     - Unknown word (brings)     -- Installing one library brings you tons of useful utilities
README.md:37:35     - Unknown word (tons)       -- one library brings you tons of useful utilities
README.md:37:43     - Unknown word (useful)     -- library brings you tons of useful utilities:
README.md:39:9      - Unknown word (module)     -- * A dom module with jQuery coding style
README.md:40:12     - Unknown word (library)    -- * A cookie library.
README.md:41:14     - Unknown word (that)       -- * dateFormat that is good enough to handle
README.md:41:22     - Unknown word (good)       -- dateFormat that is good enough to handle most
README.md:41:27     - Unknown word (enough)     -- dateFormat that is good enough to handle most date
README.md:41:37     - Unknown word (handle)     -- that is good enough to handle most date related work
README.md:41:44     - Unknown word (most)       -- good enough to handle most date related work.
README.md:43:17     - Unknown word (emitter)    -- * A micro event emitter library.
README.md:43:25     - Unknown word (library)    -- micro event emitter library.
README.md:45:3      - Unknown word (Useful)     -- * Useful functions from underscore
README.md:45:37     - Unknown word (such)       -- functions from underscore, such as shuffle, unique.
README.md:45:45     - Unknown word (shuffle)    -- underscore, such as shuffle, unique.
README.md:46:10     - Unknown word (like)       -- * mkdir, like mkdirp the module that
README.md:46:26     - Unknown word (module)     -- mkdir, like mkdirp the module that has many dependents
README.md:46:33     - Unknown word (that)       -- like mkdirp the module that has many dependents
README.md:46:42     - Unknown word (many)       -- the module that has many dependents in npm.
README.md:46:47     - Unknown word (dependents) -- module that has many dependents in npm.
README.md:51:1      - Unknown word (Just)       -- Just install **licia** and
README.md:51:16     - Unknown word (licia)      -- Just install **licia** and use it like any
README.md:51:35     - Unknown word (like)       -- *licia** and use it like any other npm utility
README.md:51:54     - Unknown word (utility)    -- it like any other npm utility modules such as lodash
README.md:51:62     - Unknown word (modules)    -- any other npm utility modules such as lodash.
README.md:51:70     - Unknown word (such)       -- npm utility modules such as lodash.
README.md:53:4      - Unknown word (bash)       -- ```bash
README.md:54:7      - Unknown word (licia)      -- npm i licia --save
README.md:58:14     - Unknown word (require)    -- const uuid = require('licia/uuid');
README.md:58:23     - Unknown word (licia)      -- const uuid = require('licia/uuid');
README.md:63:1      - Unknown word (Looking)    -- Looking for Licia modules written
README.md:63:129    - Unknown word (There)      -- com/package/licia-es). There is also an online tool
README.md:63:13     - Unknown word (Licia)      -- Looking for Licia modules written in ES
README.md:63:138    - Unknown word (also)       -- licia-es). There is also an online tool to build
README.md:63:169    - Unknown word (customized) -- online tool to build a customized utility library, check
README.md:63:180    - Unknown word (utility)    -- to build a customized utility library, check [here
README.md:63:188    - Unknown word (library)    -- a customized utility library, check [here](https
README.md:63:19     - Unknown word (modules)    -- Looking for Licia modules written in ES6 or smaller
README.md:63:204    - Unknown word (here)       -- utility library, check [here](https://licia.liriliri
README.md:63:27     - Unknown word (written)    -- Looking for Licia modules written in ES6 or smaller bundle
README.md:63:45     - Unknown word (smaller)    -- modules written in ES6 or smaller bundle sizes? Check
README.md:63:60     - Unknown word (sizes)      -- ES6 or smaller bundle sizes? Check out [licia-es
README.md:63:78     - Unknown word (licia)      -- bundle sizes? Check out [licia-es](https://www.npmjs
README.md:65:4      - Unknown word (Contribution) -- ## Contribution
README.md:67:20     - Unknown word (Guide)        -- Read [Contributing Guide](.github/CONTRIBUTING
README.md:67:68     - Unknown word (setup)        -- md) for development setup instructions.
README.md:67:7      - Unknown word (Contributing) -- Read [Contributing Guide](.github/CONTRIBUTING
README.md:67:74     - Unknown word (instructions) -- for development setup instructions.
README.md:7:20      - Unknown word (Licia)      -- <h1 align="center">Licia</h1>
benchmark/cacheRequire.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia gulp
benchmark/each.js:17:5      - Unknown word (licia)      -- licia() {
benchmark/each.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia underscore
benchmark/evalJs.js:10:5      - Unknown word (licia)      -- licia() {
benchmark/isCyclic.js:29:5      - Unknown word (licia)      -- licia() {
benchmark/isCyclic.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia is-circular
benchmark/isCyclic.js:30:11     - Unknown word (Cyclic)     -- isCyclic(obj);
benchmark/isStrBlank.js:16:5      - Unknown word (licia)      -- licia() {
benchmark/md5.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia md5
benchmark/quickSort.js:10:5      - Unknown word (vanilla)    -- vanilla() {
benchmark/reduce.js:17:5      - Unknown word (licia)      -- licia() {
benchmark/reduce.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia underscore
benchmark/reverse.js:4:5       - Unknown word (vanilla)    -- vanilla() {
benchmark/trim.js:11:9      - Unknown word (Vanilla)    -- if (!useVanilla) {
benchmark/trim.js:17:7      - Unknown word (benches)    -- const benches = {
benchmark/trim.js:21:5      - Unknown word (licia)      -- licia() {
benchmark/trim.js:26:8      - Unknown word (Vanilla)    -- if (useVanilla) {
benchmark/trim.js:27:13     - Unknown word (vanilla)    -- benches.vanilla = function() {
benchmark/trim.js:27:5      - Unknown word (benches)    -- benches.vanilla = function(
benchmark/trim.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia trim
benchmark/trim.js:32:11     - Unknown word (benches)    -- benchmark(benches);
benchmark/trim.js:9:10      - Unknown word (Vanilla)    -- const useVanilla = false;
benchmark/uuid.js:11:5      - Unknown word (licia)      -- licia() {
benchmark/uuid.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia uuid
bin/licia.js:12:9      - Unknown word (sauce)      -- sauce: 'boolean',
bin/licia.js:16:5      - Unknown word (shorthands) -- shorthands: {
bin/licia.js:25:24     - Unknown word (remain)     -- const remain = options.remain;
bin/licia.js:25:7      - Unknown word (remain)     -- const remain = options.remain;
bin/licia.js:30:13     - Unknown word (remain)     -- const cmd = remain[0];
bin/licia.js:48:9      - Unknown word (remain)     -- remain.splice(0, 1);
bin/licia.js:4:41      - Unknown word (licia)      -- parseArgs } = require('licia');
cspell.json:102:12    - Unknown word (Prop)        -- "defineProp",
cspell.json:105:6     - Unknown word (Delegator)   -- "Delegator",
cspell.json:10:6      - Unknown word (eustia)      -- "eustia",
cspell.json:111:6     - Unknown word (difference)  -- "difference",
cspell.json:112:6     - Unknown word (Dispatcher)  -- "Dispatcher",
cspell.json:11:6      - Unknown word (heapify)     -- "heapify",
cspell.json:120:6     - Unknown word (emulate)     -- "emulateTouch",
cspell.json:128:6     - Unknown word (every)       -- "every",
cspell.json:12:6      - Unknown word (licia)       -- "licia",
cspell.json:130:12    - Unknown word (Deep)        -- "extendDeep",
cspell.json:132:18    - Unknown word (Cmts)        -- "extractBlockCmts",
cspell.json:132:6     - Unknown word (extract)     -- "extractBlockCmts",
cspell.json:133:6     - Unknown word (extract)     -- "extractUrls",
cspell.json:135:6     - Unknown word (fibonacci)   -- "fibonacci",
cspell.json:13:6      - Unknown word (miniprogram) -- "miniprogram",
cspell.json:143:6     - Unknown word (find)        -- "find",
cspell.json:144:6     - Unknown word (find)        -- "findIdx",
cspell.json:145:6     - Unknown word (find)        -- "findKey",
cspell.json:146:6     - Unknown word (find)        -- "findLastIdx",
cspell.json:152:6     - Unknown word (fraction)    -- "fraction",
cspell.json:154:12    - Unknown word (Deep)        -- "freezeDeep",
cspell.json:162:6     - Unknown word (golangify)   -- "golangify",
cspell.json:16:6      - Unknown word (redhoodsu)   -- "redhoodsu",
cspell.json:172:6     - Unknown word (hotkey)      -- "hotkey",
cspell.json:178:6     - Unknown word (indent)      -- "indent",
cspell.json:181:6     - Unknown word (insertion)   -- "insertionSort",
cspell.json:182:6     - Unknown word (intersect)   -- "intersect",
cspell.json:183:6     - Unknown word (intersect)   -- "intersectRange",
cspell.json:185:6     - Unknown word (invert)      -- "invert",
cspell.json:18:6      - Unknown word (surunzi)     -- "surunzi",
cspell.json:190:11    - Unknown word (Like)        -- "isArrLike",
cspell.json:197:8     - Unknown word (Cyclic)      -- "isCyclic",
cspell.json:198:8     - Unknown word (Dark)        -- "isDarkMode",
cspell.json:19:6      - Unknown word (topo)        -- "topo",
cspell.json:208:8     - Unknown word (Even)        -- "isEven",
cspell.json:20:6      - Unknown word (wechat)      -- "wechat",
cspell.json:210:8     - Unknown word (Finite)      -- "isFinite",
cspell.json:212:12    - Unknown word (Width)       -- "isFullWidth",
cspell.json:212:8     - Unknown word (Full)        -- "isFullWidth",
cspell.json:218:12    - Unknown word (Year)        -- "isLeapYear",
cspell.json:218:8     - Unknown word (Leap)        -- "isLeapYear",
cspell.json:222:12    - Unknown word (Program)     -- "isMiniProgram",
cspell.json:222:8     - Unknown word (Mini)        -- "isMiniProgram",
cspell.json:230:8     - Unknown word (Numeric)     -- "isNumeric",
cspell.json:233:8     - Unknown word (Plain)       -- "isPlainObj",
cspell.json:240:8     - Unknown word (Retina)      -- "isRetina",
cspell.json:246:11    - Unknown word (Blank)       -- "isStrBlank",
cspell.json:257:10    - Unknown word (Transformer) -- "JsonTransformer",
cspell.json:258:6     - Unknown word (kebab)       -- "kebabCase",
cspell.json:267:6     - Unknown word (linkify)     -- "linkify",
cspell.json:273:6     - Unknown word (longest)     -- "longest",
cspell.json:274:6     - Unknown word (lower)       -- "lowerCase",
cspell.json:275:6     - Unknown word (lpad)        -- "lpad",
cspell.json:277:6     - Unknown word (ltrim)       -- "ltrim",
cspell.json:280:6     - Unknown word (matcher)     -- "matcher",
cspell.json:294:6     - Unknown word (morph)       -- "morphDom",
cspell.json:295:6     - Unknown word (morse)       -- "morse",
cspell.json:297:6     - Unknown word (Mutation)    -- "MutationObserver",
cspell.json:299:6     - Unknown word (negate)      -- "negate",
cspell.json:312:6     - Unknown word (optimize)    -- "optimizeCb",
cspell.json:313:6     - Unknown word (ordinal)     -- "ordinal",
cspell.json:314:6     - Unknown word (orientation) -- "orientation",
cspell.json:317:6     - Unknown word (parallel)    -- "parallel",
cspell.json:31:7      - Unknown word (safe)        -- "$safeEls",
cspell.json:320:6     - Unknown word (partial)     -- "partial",
cspell.json:325:6     - Unknown word (pluck)       -- "pluck",
cspell.json:326:6     - Unknown word (pointer)     -- "pointerEvent",
cspell.json:334:6     - Unknown word (Pseudo)      -- "PseudoMap",
cspell.json:33:6      - Unknown word (abbrev)      -- "abbrev",
cspell.json:347:6     - Unknown word (Readiness)   -- "Readiness",
cspell.json:354:6     - Unknown word (repeat)      -- "repeat",
cspell.json:356:12    - Unknown word (Sensor)      -- "ResizeSensor",
cspell.json:35:6      - Unknown word (ajax)        -- "ajax",
cspell.json:364:6     - Unknown word (rpad)        -- "rpad",
cspell.json:365:6     - Unknown word (rtrim)       -- "rtrim",
cspell.json:366:6     - Unknown word (safe)        -- "safeCb",
cspell.json:367:6     - Unknown word (safe)        -- "safeDel",
cspell.json:368:6     - Unknown word (safe)        -- "safeGet",
cspell.json:369:6     - Unknown word (safe)        -- "safeSet",
cspell.json:371:6     - Unknown word (same)        -- "sameOrigin",
cspell.json:373:6     - Unknown word (scroll)      -- "scrollTo",
cspell.json:377:6     - Unknown word (selector)    -- "selector",
cspell.json:37:6      - Unknown word (ansi)        -- "ansiColor",
cspell.json:380:6     - Unknown word (shebang)     -- "shebang",
cspell.json:383:6     - Unknown word (Single)      -- "SingleEmitter",
cspell.json:384:6     - Unknown word (singleton)   -- "singleton",
cspell.json:387:6     - Unknown word (sleep)       -- "sleep",
cspell.json:390:6     - Unknown word (snake)       -- "snakeCase",
cspell.json:3:6       - Unknown word (Cmts)       -- "Cmts",
cspell.json:406:11    - Unknown word (Ansi)        -- "stripAnsi",
cspell.json:406:6     - Unknown word (strip)       -- "stripAnsi",
cspell.json:407:6     - Unknown word (strip)       -- "stripBom",
cspell.json:408:6     - Unknown word (strip)       -- "stripCmt",
cspell.json:409:6     - Unknown word (strip)       -- "stripColor",
cspell.json:40:6      - Unknown word (average)     -- "average",
cspell.json:410:6     - Unknown word (strip)       -- "stripHtmlTag",
cspell.json:411:11    - Unknown word (Indent)      -- "stripIndent",
cspell.json:415:9     - Unknown word (Width)       -- "strWidth",
cspell.json:420:6     - Unknown word (theme)       -- "theme",
cspell.json:426:10    - Unknown word (Taken)       -- "timeTaken",
cspell.json:434:6     - Unknown word (topo)        -- "topoSort",
cspell.json:441:6     - Unknown word (trim)        -- "trim",
cspell.json:444:6     - Unknown word (Tween)       -- "Tween",
cspell.json:448:6     - Unknown word (uncaught)    -- "uncaught",
cspell.json:453:6     - Unknown word (universalify) -- "universalify",
cspell.json:455:6     - Unknown word (upper)        -- "upperCase",
cspell.json:456:6     - Unknown word (upper)        -- "upperFirst",
cspell.json:466:6     - Unknown word (waterfall)    -- "waterfall",
cspell.json:469:6     - Unknown word (workerize)    -- "workerize",
cspell.json:47:6      - Unknown word (Bloom)       -- "BloomFilter",
cspell.json:4:6       - Unknown word (Combinators) -- "Combinators",
cspell.json:55:6      - Unknown word (capitalize)  -- "capitalize",
cspell.json:56:6      - Unknown word (Caseless)    -- "Caseless",
cspell.json:57:6      - Unknown word (cast)        -- "castPath",
cspell.json:58:6      - Unknown word (center)      -- "centerAlign",
cspell.json:61:6      - Unknown word (char)        -- "char",
cspell.json:63:6      - Unknown word (clamp)       -- "clamp",
cspell.json:6:6       - Unknown word (Slugified)   -- "Slugified",
cspell.json:71:6      - Unknown word (combine)     -- "combine",
cspell.json:74:6      - Unknown word (compress)    -- "compressImg",
cspell.json:76:6      - Unknown word (contain)     -- "contain",
cspell.json:78:6      - Unknown word (convert)     -- "convertBase",
cspell.json:79:6      - Unknown word (convert)     -- "convertBin",
cspell.json:87:12     - Unknown word (Assigner)    -- "createAssigner",
cspell.json:91:9      - Unknown word (Supports)    -- "cssSupports",
cspell.json:92:6      - Unknown word (curry)       -- "curry",
cspell.json:97:6      - Unknown word (deburr)      -- "deburr",
demo/Logger.demo.html:4:30      - Unknown word (Licia)      -- logger = new Logger('Licia', Logger.level.TRACE
demo/MediaQuery.demo.html:7:20      - Unknown word (unmatch)    -- mediaQuery.on('unmatch', () => console.log
demo/MediaQuery.demo.html:7:49      - Unknown word (unmatch)    -- () => console.log('unmatch'));
demo/Tween.demo.html:102:26    - Unknown word (tween)      -- progress.value = tween.progress() * 100;
demo/Tween.demo.html:107:5     - Unknown word (tween)      -- tween.to(
demo/Tween.demo.html:119:9     - Unknown word (tween)      -- tween.play();
demo/Tween.demo.html:1:10      - Unknown word (Tween)      -- <require>Tween $ evalCss each methods
demo/Tween.demo.html:77:21     - Unknown word (Tween)      -- var tween = new Tween({
demo/Tween.demo.html:77:9      - Unknown word (tween)      -- var tween = new Tween({
demo/Tween.demo.html:87:5      - Unknown word (tween)      -- tween.on('update', function
demo/compressImg.demo.html:15:15     - Unknown word (orig)       -- e = e.origEvent;
demo/debug.demo.html:15:22     - Unknown word (uninteresting) -- d('doing lots of uninteresting work');
demo/debug.demo.html:15:8      - Unknown word (doing)      -- d('doing lots of uninteresting
demo/debug.demo.html:7:8       - Unknown word (booting)    -- d('booting %s', 'test');
demo/debug.demo.html:8:9       - Unknown word (booting)    -- d2('booting %s', 'test2');
demo/emulateTouch.demo.html:19:5      - Unknown word (emulate)    -- emulateTouch(touch);
demo/emulateTouch.demo.html:1:10      - Unknown word (emulate)    -- <require>emulateTouch $ evalCss</require
demo/highlight.demo.html:4:27      - Unknown word (licia)      -- const uuid = require('licia/uuid'); console.log
demo/hotkey.demo.html:1:10      - Unknown word (hotkey)     -- <require>hotkey evalCss $ each keyCode
demo/hotkey.demo.html:546:9     - Unknown word (hotkey)     -- hotkey.on(key, function(e)
demo/notify.demo.html:11:55     - Unknown word (licia)      -- notify.Notification('licia', {
demo/orientation.demo.html:8:6       - Unknown word (wrapper)    -- .wrapper {
demo/randomColor.demo.html:17:46     - Unknown word (Lightness)  -- lightness">Generate Lightness 0.6</button>
demo/randomColor.demo.html:38:18     - Unknown word (lightness)  -- $('#generate-lightness').on('click', () =>
demo/randomColor.demo.html:38:59     - Unknown word (lightness)  -- click', () => generate({ lightness: 0.6 }));
demo/scrollTo.demo.html:37:33     - Unknown word (Lets)       -- id="try" class="btn">Lets try!</a>
demo/scrollTo.demo.html:52:40     - Unknown word (arrrived)   -- console.log('Section 2 arrrived!');
demo/stringifyAll.demo.html:29:26     - Unknown word (unenumerable) -- console.time('window unenumerable');
demo/stringifyAll.demo.html:31:9      - Unknown word (unenumerable) -- unenumerable: true
demo/stringifyAll.demo.html:33:29     - Unknown word (unenumerable) -- console.timeEnd('window unenumerable');
demo/stringifyAll.demo.html:49:9      - Unknown word (unenumerable) -- unenumerable: true,
demo/stringifyAll.demo.html:57:9      - Unknown word (unenumerable) -- unenumerable: true,
demo/uncaught.demo.html:1:10      - Unknown word (uncaught)   -- <require>uncaught</require>
demo/uncaught.demo.html:4:5       - Unknown word (uncaught)   -- uncaught.start();
demo/uncaught.demo.html:6:5       - Unknown word (uncaught)   -- uncaught.addListener(err =>
demo/workerize.demo.html:11:14     - Unknown word (workerize)  -- worker = workerize(function(a) {
demo/workerize.demo.html:1:10      - Unknown word (workerize)  -- <require>workerize</require>
demo/workerize.demo.html:20:14     - Unknown word (workerize)  -- worker = workerize(function(a) {
demo/workerize.demo.html:4:18      - Unknown word (workerize)  -- var worker = workerize(function(a, b) {
docker-compose.yml:13:11     - Unknown word (cpus)       -- cpus: '1.5'
docker-compose.yml:14:11     - Unknown word (memory)     -- memory: 200M
docker-compose.yml:5:13      - Unknown word (licia)      -- - ./:/licia
docker-compose.yml:6:19      - Unknown word (licia)      -- working_dir: /licia
docker-compose.yml:9:21      - Unknown word (modules)    -- command: ./node_modules/.bin/mocha .licia/test
docker-compose.yml:9:41      - Unknown word (licia)      -- modules/.bin/mocha .licia/test/${MOD_NAME}
eslint.src.js:19:9      - Unknown word (semi)       -- semi: ['error', 'always'
eslint.src.js:1:45      - Unknown word (licia)      -- arrToMap } = require('licia');
eslint.src.js:28:13     - Unknown word (sparse)     -- 'no-sparse-arrays': 'off',
eslint.src.js:3:7       - Unknown word (licia)      -- const licia = require('./index.json
eslint.src.js:40:5      - Unknown word (LICIA)      -- LICIA_TEST: true
eslint.src.js:43:31     - Unknown word (licia)      -- globals, arrToMap(keys(licia)));
i18n/$.md:7:1       - Unknown word (offset)     -- offset, hide, show, first,
i18n/$.md:7:9       - Unknown word (hide)       -- offset, hide, show, first, last,
i18n/$.md:8:42      - Unknown word (toggle)     -- addClass, rmClass, toggleClass, hasClass, append
i18n/$.md:9:1       - Unknown word (before)     -- before, after
i18n/$class.md:24:5      - Unknown word (toggle)     -- ### toggle
i18n/$insert.md:5:5       - Unknown word (before)     -- ### before
i18n/Benchmark.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Blob.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/BloomFilter.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Caseless.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Class.md:8:2       - Unknown word (statics)    -- |statics|静态方法|
i18n/Color.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Delegator.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Emitter.md:22:5      - Unknown word (emit)       -- ### emit
i18n/Emitter.md:3:16      - Unknown word (emitter)    -- 提供观察者模式的 Event emitter 类。
i18n/Emitter.md:41:8      - Unknown word (Emitter)    -- 【静态】 将 Emitter 类的方法绑定到指定对象上去。
i18n/Enum.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/FileStore.md:3:5       - Unknown word (constructor) -- ### constructor
i18n/HashTable.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Heap.md:32:5      - Unknown word (peek)        -- ### peek
i18n/Heap.md:9:5       - Unknown word (constructor) -- ### constructor
i18n/HeapSnapshot.md:15:5      - Unknown word (edges)       -- ### edges
i18n/HeapSnapshot.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/I18n.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/JsonTransformer.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/LinkedList.md:13:5      - Unknown word (tail)       -- ### tail
i18n/LinkedList.md:30:5      - Unknown word (unshift)    -- ### unshift
i18n/LinkedList.md:34:5      - Unknown word (shift)      -- ### shift
i18n/LinkedList.md:42:5      - Unknown word (find)       -- ### find
i18n/LocalStore.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/Logger.md:24:22     - Unknown word (warn)        -- ## trace，debug，info，warn，error
i18n/Logger.md:30:18     - Unknown word (WARN)        -- TRACE，DEBUG，INFO，WARN，ERROR 和 SILENT。
i18n/Logger.md:30:31     - Unknown word (SILENT)      -- DEBUG，INFO，WARN，ERROR 和 SILENT。
i18n/Logger.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Lru.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/MediaQuery.md:27:6      - Unknown word (unmatch)     -- #### unmatch
i18n/MediaQuery.md:5:5       - Unknown word (Emitter)    -- 继承自 Emitter 类。
i18n/MediaQuery.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/MutationObserver.md:3:1       - Unknown word (Mutation)   -- MutationObserver 安全版本，如果不支持，
i18n/MutationObserver.md:3:9       - Unknown word (Observer)   -- MutationObserver 安全版本，如果不支持，则什么也不做。
i18n/PriorityQueue.md:32:5      - Unknown word (peek)        -- ### peek
i18n/PriorityQueue.md:9:5       - Unknown word (constructor) -- ### constructor
i18n/Promise.md:5:2       - Unknown word (Promises)   -- [Promises 标准](https://github.com
i18n/Queue.md:26:5      - Unknown word (peek)       -- ### peek
i18n/QuickLru.md:5:5       - Unknown word (hashlru)    -- 参考 [hashlru 算法](https://github.com
i18n/Readiness.md:13:5      - Unknown word (ready)      -- ### ready
i18n/Readiness.md:23:7      - Unknown word (Ready)      -- ### isReady
i18n/ReduceStore.md:10:2      - Unknown word (initial)     -- |initialState|初始状态|
i18n/ReduceStore.md:21:5      - Unknown word (dispatch)    -- ### dispatch
i18n/ReduceStore.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/ReduceStore.md:9:2       - Unknown word (reducer)     -- |reducer|生成下一个状态的函数|
i18n/ResizeSensor.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Select.md:11:5      - Unknown word (find)        -- ### find
i18n/Select.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Semaphore.md:11:5      - Unknown word (wait)        -- ### wait
i18n/Semaphore.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Semaphore.md:9:2       - Unknown word (counter)     -- |counter=1|初始计数|
i18n/SessionStore.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/SingleEmitter.md:21:5      - Unknown word (emit)       -- ### emit
i18n/SingleEmitter.md:31:13     - Unknown word (Emitter)    -- 【静态】将 SingleEmitter 类的方法绑定到指定对象上去。
i18n/SingleEmitter.md:3:9       - Unknown word (emitter)    -- 与 Event emitter 类似，但仅有一种事件类型。
i18n/Socket.md:18:2      - Unknown word (protocols)   -- |protocols|协议|
i18n/Socket.md:19:12     - Unknown word (true)        -- |reconnect=true|是否尝试重新连接|
i18n/Socket.md:5:5       - Unknown word (Emitter)    -- 继续自 Emitter 类。
i18n/Socket.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/Stack.md:26:5      - Unknown word (peek)       -- ### peek
i18n/State.md:11:2      - Unknown word (initial)     -- |initial|初始状态|
i18n/State.md:5:5       - Unknown word (Emitter)    -- 继承自 Emitter 类。
i18n/State.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/Store.md:5:5       - Unknown word (Emitter)    -- 继承自 Emitter 类。
i18n/Store.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/Trace.md:3:10      - Unknown word (Chrome)     -- 解析、处理和生成 Chrome Trace 格式数据。
i18n/Tracing.md:3:4       - Unknown word (chrome)     -- 创建 chrome trace 格式数据。
i18n/Tracing.md:54:5      - Unknown word (instant)     -- ### instant
i18n/Tracing.md:56:4      - Unknown word (instant)     -- 记录 instant 事件。
i18n/Tracing.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Tween.md:18:2      - Unknown word (duration)    -- |duration|补间时长|
i18n/Tween.md:19:2      - Unknown word (ease)        -- |ease|缓动函数|
i18n/Tween.md:21:5      - Unknown word (play)        -- ### play
i18n/Tween.md:25:5      - Unknown word (pause)       -- ### pause
i18n/Tween.md:29:5      - Unknown word (paused)      -- ### paused
i18n/Tween.md:5:5       - Unknown word (Emitter)    -- 继承自 Emitter 类。
i18n/Tween.md:7:5       - Unknown word (constructor) -- ### constructor
i18n/Url.md:57:2      - Unknown word (protocol)    -- |protocol|协议名，（如 http:）|
i18n/Url.md:58:2      - Unknown word (slashes)     -- |slashes|协议名后是否有双斜杠|
i18n/Url.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Validator.md:18:11     - Unknown word (true)        -- |返回值|校验结果，true 表示通过|
i18n/Validator.md:5:5       - Unknown word (constructor) -- ### constructor
i18n/Wrr.md:16:2      - Unknown word (weight)     -- |weight|值的权重|
i18n/ajax.md:21:2      - Unknown word (timeout)    -- |timeout|请求超时|
i18n/allKeys.md:15:12     - Unknown word (true)       -- |prototype=true|包含原型键名|
i18n/allKeys.md:16:15     - Unknown word (false)        -- |unenumerable=false|包含不可枚举键名|
i18n/allKeys.md:16:2      - Unknown word (unenumerable) -- |unenumerable=false|包含不可枚举键名|
i18n/allKeys.md:17:18     - Unknown word (Symbol)       -- |symbol=false|包含 Symbol 键名|
i18n/allKeys.md:17:2      - Unknown word (symbol)       -- |symbol=false|包含 Symbol 键名|
i18n/allKeys.md:17:9      - Unknown word (false)        -- |symbol=false|包含 Symbol 键名|
i18n/ansiColor.md:11:17     - Unknown word (Bright)     -- blackBright, redBright, greenBright, yellowBright
i18n/ansiColor.md:11:30     - Unknown word (Bright)     -- blackBright, redBright, greenBright, yellowBright, blueBright
i18n/ansiColor.md:11:44     - Unknown word (Bright)     -- greenBright, yellowBright, blueBright, magentaBright
i18n/ansiColor.md:11:56     - Unknown word (Bright)     -- reenBright, yellowBright, blueBright, magentaBright, cyanBright
i18n/ansiColor.md:11:6      - Unknown word (Bright)     -- blackBright, redBright, greenBright
i18n/arrToMap.md:8:6       - Unknown word (true)       -- |val=true|键值|
i18n/base64.md:5:5       - Unknown word (encode)     -- ### encode
i18n/bytesToStr.md:8:2       - Unknown word (encoding)   -- |encoding=utf8|字符串编码|
i18n/cacheRequire.md:14:14     - Unknown word (true)       -- |requirePath=true|Whether require path
i18n/cacheRequire.md:14:19     - Unknown word (Whether)    -- |requirePath=true|Whether require path should
i18n/cacheRequire.md:14:2      - Unknown word (require)    -- |requirePath=true|Whether require
i18n/cacheRequire.md:14:27     - Unknown word (require)    -- requirePath=true|Whether require path should be cached
i18n/cacheRequire.md:14:50     - Unknown word (cached)     -- require path should be cached|
i18n/cacheRequire.md:15:13     - Unknown word (Whether)    -- |code=false|Whether js code should be cached
i18n/cacheRequire.md:15:39     - Unknown word (cached)     -- Whether js code should be cached|
i18n/cacheRequire.md:15:7      - Unknown word (false)      -- |code=false|Whether js code should
i18n/cacheRequire.md:16:15     - Unknown word (true)       -- |compileCache=true|Whether compile cache
i18n/cacheRequire.md:16:20     - Unknown word (Whether)    -- |compileCache=true|Whether compile cache should
i18n/char.md:3:11      - Unknown word (unicode)    -- 根据指定的整数返回 unicode 编码为该整数的字符。
i18n/clamp.md:8:2       - Unknown word (lower)      -- |lower|下限|
i18n/clamp.md:9:2       - Unknown word (upper)      -- |upper|上限|
i18n/compact.md:5:12      - Unknown word (null)       -- 虚值包括 false，null，0，空字符串，undefined 和 NaN
i18n/compact.md:5:24      - Unknown word (undefined)  -- 括 false，null，0，空字符串，undefined 和 NaN。
i18n/compact.md:5:6       - Unknown word (false)      -- 虚值包括 false，null，0，空字符串，undefined
i18n/compressImg.md:19:11     - Unknown word (Mine)       -- |mimeType|Mine 类型|
i18n/compressImg.md:20:2      - Unknown word (quality)    -- |quality=0.8|图片质量，从 0 到 1|
i18n/copy.md:3:13      - Unknown word (exec)       -- 使用 document.execCommand 将文本拷贝到剪贴板。
i18n/crc1.md:8:2       - Unknown word (previous)   -- |previous|用于累积计算的 CRC1 校验码|
i18n/crc16.md:8:2       - Unknown word (previous)   -- |previous|用于累积计算的 CRC16 校验码|
i18n/crc32.md:8:2       - Unknown word (previous)   -- |previous|用于累积计算的 CRC32 校验码|
i18n/crc8.md:8:2       - Unknown word (previous)   -- |previous|用于累积计算的 CRC8 校验码|
i18n/css.md:30:2      - Unknown word (indent)     -- |indent=' '|缩进|
i18n/cssPriority.md:13:4      - Unknown word (important)  -- 1. important 标识
i18n/dataUrl.md:29:9      - Unknown word (true)       -- |base64=true|是否是 base64 编码|
i18n/dateFormat.md:10:6      - Unknown word (false)      -- |gmt=false|是否是 GMT|
i18n/dateFormat.md:9:6       - Unknown word (false)      -- |utc=false|是否是 UTC|
i18n/debounce.md:8:2       - Unknown word (wait)       -- |wait|延迟毫秒数|
i18n/define.md:8:2       - Unknown word (requires)   -- |requires|依赖|
i18n/delRequireCache.md:3:12      - Unknown word (require)    -- 删除 node.js require 缓存。
i18n/delay.md:8:2       - Unknown word (wait)       -- |wait|延迟的毫秒数|
i18n/detectBrowser.md:10:10     - Unknown word (chrome)     -- 支持浏览器：ie，chrome，edge，firefox，opera，safari
i18n/detectBrowser.md:10:17     - Unknown word (edge)       -- 支持浏览器：ie，chrome，edge，firefox，opera，safari
i18n/detectBrowser.md:10:22     - Unknown word (firefox)    -- 持浏览器：ie，chrome，edge，firefox，opera，safari，ios（mobile
i18n/detectBrowser.md:10:30     - Unknown word (opera)      -- chrome，edge，firefox，opera，safari，ios（mobile safari
i18n/detectBrowser.md:10:36     - Unknown word (safari)     -- chrome，edge，firefox，opera，safari，ios（mobile safari），android
i18n/detectBrowser.md:10:54     - Unknown word (safari)     -- opera，safari，ios（mobile safari），android（android browser
i18n/detectBrowser.md:7:5       - Unknown word (navigator)  -- |ua=navigator.userAgent|浏览器用户代理|
i18n/detectOs.md:7:5       - Unknown word (navigator)  -- |ua=navigator.userAgent|浏览器用户代理|
i18n/download.md:9:12      - Unknown word (plain)      -- |type=text/plain|数据类型|
i18n/durationFormat.md:7:2       - Unknown word (duration)   -- |duration|要格式化的时间，单位为毫秒|
i18n/easing.md:7:2       - Unknown word (percent)    -- |percent|位于 0 到 1 之前的数字|
i18n/endWith.md:8:2       - Unknown word (suffix)     -- |suffix|字符串后缀|
i18n/fetch.md:5:17      - Unknown word (pollyfill)  -- 注意：这并不是 fetch 的 pollyfill。
i18n/fill.md:10:10     - Unknown word (length)     -- |end=arr.length|结束位置，不包括|
i18n/findLastIdx.md:3:3       - Unknown word (find)       -- 同 findIdx，只是查找顺序改为从后往前。
i18n/fnArgs.md:8:7       - Unknown word (Argument)   -- |args|Argument 对象|
i18n/freeze.md:3:8       - Unknown word (freeze)     -- Object.freeze 的快捷方式。
i18n/freeze.md:5:14      - Unknown word (freeze)     -- 如果不支持 Object.freeze，使用 Object.defineProperties
i18n/freezeDeep.md:3:13      - Unknown word (freeze)     -- 递归进行 Object.freeze。
i18n/fullscreen.md:17:5      - Unknown word (toggle)     -- ### toggle
i18n/fuzzySearch.md:15:16     - Unknown word (false)      -- |caseSensitive=false|是否大小写敏感|
i18n/fuzzySearch.md:15:6      - Unknown word (Sensitive)  -- |caseSensitive=false|是否大小写敏感|
i18n/fuzzySearch.md:8:2       - Unknown word (haystacks)  -- |haystacks|搜索集合|
i18n/getProto.md:8:20      - Unknown word (null)       -- |返回值|对象原型，如果不存在，返回 null|
i18n/hex.md:5:5       - Unknown word (encode)     -- ### encode
i18n/highlight.md:14:23     - Unknown word (keyword)    -- comment，string，number，keyword，operator
i18n/highlight.md:14:31     - Unknown word (operator)   -- string，number，keyword，operator
i18n/hookFn.md:15:2      - Unknown word (before)     -- |before|参数处理函数|
i18n/indent.md:8:2       - Unknown word (char)       -- |char|缩进字符|
i18n/ini.md:29:13     - Unknown word (false)      -- |whitespace=false|是否在 = 周围添加空格|
i18n/isFullWidth.md:7:12      - Unknown word (Unicode)    -- |codePoint|Unicode 码点|
i18n/isHidden.md:15:10     - Unknown word (true)       -- |display=true|检查是否显示|
i18n/isHidden.md:16:13     - Unknown word (false)      -- |visibility=false|检查 visibility css 属
i18n/isHidden.md:17:10     - Unknown word (false)      -- |opacity=false|检查 opacity css 属性|
i18n/isHidden.md:18:7      - Unknown word (false)      -- |size=false|检查宽高|
i18n/isHidden.md:19:11     - Unknown word (false)      -- |viewport=false|检查是否在可视区域|
i18n/isHidden.md:20:11     - Unknown word (false)      -- |overflow=false|检查是否因 overflow 隐藏|
i18n/isJson.md:5:32      - Unknown word (catch)      -- JSON.parse()` 和 `try... catch` 进行检测。
i18n/isLeapYear.md:7:2       - Unknown word (year)       -- |year|要检查的年份|
i18n/isMobile.md:7:5       - Unknown word (navigator)  -- |ua=navigator.userAgent|浏览器用户代理|
i18n/isNaN.md:10:16     - Unknown word (Undefined)  -- 跟全局 isNaN 不同的是，Undefined 不是 NaN。
i18n/isNil.md:3:15      - Unknown word (undefined)  -- 检查值是否是 null 或 undefined，等价于 value == null。
i18n/isNil.md:3:38      - Unknown word (null)       -- undefined，等价于 value == null。
i18n/isNil.md:3:8       - Unknown word (null)       -- 检查值是否是 null 或 undefined，等价于 value
i18n/isNil.md:8:10      - Unknown word (null)       -- |返回值|如果是 null 或 undefined，返回真|
i18n/isNil.md:8:17      - Unknown word (undefined)  -- |返回值|如果是 null 或 undefined，返回真|
i18n/isNull.md:3:8       - Unknown word (Null)       -- 检查值是否是 Null 类型。
i18n/isNull.md:8:10      - Unknown word (Null)       -- |返回值|如果是 Null 类型，返回真|
i18n/isPlainObj.md:8:10      - Unknown word (plain)      -- |返回值|如果是 plain object，返回真|
i18n/isPrimitive.md:3:19      - Unknown word (null)       -- 检测值是否是字符串，数字，布尔值或 null。
i18n/isRetina.md:3:9       - Unknown word (retina)     -- 判断是否运行在 retina 屏幕的设备上。
i18n/isSymbol.md:3:8       - Unknown word (Symbol)     -- 检查值是否是 Symbol 类型。
i18n/isSymbol.md:8:10      - Unknown word (Symbol)     -- |返回值|如果是 Symbol 类型，返回真|
i18n/isUndef.md:3:8       - Unknown word (undefined)  -- 检查值是否是 undefined。
i18n/isUndef.md:8:10      - Unknown word (undefined)  -- |返回值|如果是 undefined，返回真|
i18n/isWeakMap.md:3:8       - Unknown word (Weak)       -- 检查值是否是 WeakMap 类型。
i18n/isWeakMap.md:8:10      - Unknown word (Weak)       -- |返回值|如果是 WeakMap 类型，返回真|
i18n/isWeakSet.md:3:8       - Unknown word (Weak)       -- 检查值是否是 WeakSet 类型。
i18n/isWeakSet.md:8:10      - Unknown word (Weak)       -- |返回值|如果是 WeakSet 类型，返回真|
i18n/jsonp.md:16:8      - Unknown word (callback)   -- |param=callback|回调参数名|
i18n/jsonp.md:20:2      - Unknown word (timeout)    -- |timeout|请求超时|
i18n/lpad.md:9:2       - Unknown word (chars)      -- |chars|填充字符串|
i18n/ltrim.md:8:2       - Unknown word (chars)      -- |chars|删除字符|
i18n/meta.md:21:2      - Unknown word (metas)      -- |metas|包含所有 meta 键值对的对象|
i18n/mkdir.md:8:2       - Unknown word (mode)       -- |mode=0777|文件夹模式|
i18n/moment.md:10:12     - Unknown word (hour)       -- month，date，hour，minute，second，millisecond
i18n/moment.md:10:24     - Unknown word (second)     -- month，date，hour，minute，second，millisecond，unix，clone
i18n/moment.md:10:31     - Unknown word (millisecond) -- date，hour，minute，second，millisecond，unix，clone，
i18n/moment.md:12:19     - Unknown word (subtract)    -- startOf，endOf，add，subtract，diff
i18n/moment.md:16:6      - Unknown word (quarter)     -- 时区以及 quarter 和 week 单位。
i18n/moment.md:9:18      - Unknown word (Leap)       -- format，isValid，isLeapYear，isSame，isBefore
i18n/moment.md:9:22      - Unknown word (Year)       -- format，isValid，isLeapYear，isSame，isBefore，isAfter
i18n/moment.md:9:29      - Unknown word (Same)       -- isValid，isLeapYear，isSame，isBefore，isAfter，year
i18n/moment.md:9:36      - Unknown word (Before)     -- isLeapYear，isSame，isBefore，isAfter，year，
i18n/moment.md:9:51      - Unknown word (year)       -- isSame，isBefore，isAfter，year，
i18n/morse.md:20:2      - Unknown word (morse)      -- |morse|摩尔斯电码|
i18n/morse.md:5:5       - Unknown word (encode)     -- ### encode
i18n/nextTick.md:3:26      - Unknown word (tick)       -- 行在 node 和浏览器端的 next tick 实现。
i18n/nextTick.md:9:18      - Unknown word (Tick)       -- 如果支持 process.nextTick，则调用它，否则使用 setImmediate
i18n/nextTick.md:9:36      - Unknown word (Immediate)  -- nextTick，则调用它，否则使用 setImmediate 或 setTimeout 进行兼容。
i18n/nextTick.md:9:51      - Unknown word (Timeout)    -- 用 setImmediate 或 setTimeout 进行兼容。
i18n/normalizePhone.md:15:2      - Unknown word (country)    -- |countryCode|国家代码|
i18n/normalizePhone.md:16:14     - Unknown word (false)      -- |trunkPrefix=false|如果本地格式有长途字冠，设为真|
i18n/normalizePhone.md:16:2      - Unknown word (trunk)      -- |trunkPrefix=false|如果本地格式有
i18n/openFile.md:15:11     - Unknown word (false)      -- |multiple=false|是否支持多选|
i18n/openFile.md:15:2      - Unknown word (multiple)   -- |multiple=false|是否支持多选|
i18n/orientation.md:15:13     - Unknown word (landscape)  -- 获取当前屏幕方向（横屏 landscape 或 竖屏 portrait）。
i18n/orientation.md:15:28     - Unknown word (portrait)   -- 向（横屏 landscape 或 竖屏 portrait）。
i18n/pad.md:9:2       - Unknown word (chars)      -- |chars|填充字符串|
i18n/parseArgs.md:16:2      - Unknown word (shorthands) -- |shorthands|选项名缩写|
i18n/parseHtml.md:8:2       - Unknown word (handler)    -- |handler|处理函数|
i18n/partial.md:3:15      - Unknown word (bind)       -- 返回局部填充参数的函数，与 bind 模块相似。
i18n/partial.md:8:5       - Unknown word (partials)   -- |...partials|局部填充参数|
i18n/promisify.md:11:4      - Unknown word (multi)      -- 如果 multiArgs 设为真，返回的 Promise
i18n/promisify.md:8:12      - Unknown word (false)      -- |multiArgs=false|回调是否有多个结果|
i18n/promisify.md:8:2       - Unknown word (multi)      -- |multiArgs=false|回调是否有多个结果
i18n/raf.md:5:38      - Unknown word (Timeout)    -- questAnimationFrame 不支持，使用 setTimeout 进行兼容。
i18n/random.md:9:11      - Unknown word (false)      -- |floating=false|是否允许浮点数|
i18n/randomColor.md:16:2      - Unknown word (lightness)  -- |lightness|亮度，取值为 0 - 1|
i18n/randomId.md:8:2       - Unknown word (symbols)    -- |symbols|生成 id 字符，默认为 a-zA-Z
i18n/ready.md:3:29      - Unknown word (ready)      -- 调用回调函数，类似于 jQuery 的 ready 方法。
i18n/reduce.md:9:2       - Unknown word (initial)    -- |initial|初始值|
i18n/ric.md:3:12      - Unknown word (Callback)   -- requestIdleCallback 的快捷方式。
i18n/ric.md:3:8       - Unknown word (Idle)       -- requestIdleCallback 的快捷方式。
i18n/ric.md:5:13      - Unknown word (Idle)       -- 如果原生 requestIdleCallback 不支持，使用 setTimeout
i18n/ric.md:5:17      - Unknown word (Callback)   -- 如果原生 requestIdleCallback 不支持，使用 setTimeout 进
i18n/ric.md:5:36      - Unknown word (Timeout)    -- requestIdleCallback 不支持，使用 setTimeout 进行兼容。
i18n/rpad.md:9:2       - Unknown word (chars)      -- |chars|填充字符|
i18n/rtrim.md:8:2       - Unknown word (chars)      -- |chars|删除字符|
i18n/safeDel.md:9:11      - Unknown word (undefined)  -- |返回值|删除值或 undefined|
i18n/safeGet.md:9:11      - Unknown word (undefined)  -- |返回值|属性值或 undefined|
i18n/safeStorage.md:3:24      - Unknown word (safari)     -- 使用 storage，使其在旧浏览器及 safari 无痕模式下能正常运行。
i18n/scrollTo.md:14:2      - Unknown word (tolerance)  -- |tolerance=0|偏移|
i18n/scrollTo.md:15:2      - Unknown word (duration)   -- |duration=800|时长|
i18n/scrollTo.md:16:12     - Unknown word (Quart)      -- |easing=outQuart|缓动函数|
i18n/scrollTo.md:17:2      - Unknown word (callback)   -- |callback=noop|结束回调|
i18n/seedRandom.md:10:11     - Unknown word (true)       -- |floating=true|是否允许浮点数|
i18n/shebang.md:3:4       - Unknown word (shebang)    -- 获取 shebang 命令。
i18n/shebang.md:8:6       - Unknown word (Shebang)    -- |返回值|Shebang 命令|
i18n/sleep.md:7:2       - Unknown word (timeout)    -- |timeout|暂停时长|
i18n/slice.md:9:12      - Unknown word (length)     -- |end=array.length|结束位置，不包含|
i18n/slugify.md:8:2       - Unknown word (replacement) -- |replacement|自定义替换|
i18n/sortKeys.md:15:2      - Unknown word (deep)       -- |deep=false|是否递归|
i18n/sortKeys.md:15:7      - Unknown word (false)      -- |deep=false|是否递归|
i18n/sortKeys.md:16:2      - Unknown word (comparator) -- |comparator|比较器|
i18n/stackTrace.md:3:13      - Unknown word (Site)       -- 获取 v8 的 CallSite 对象。
i18n/stackTrace.md:3:9       - Unknown word (Call)       -- 获取 v8 的 CallSite 对象。
i18n/strToBytes.md:8:2       - Unknown word (encoding)   -- |encoding=utf8|字符串编码|
i18n/stringify.md:10:2      - Unknown word (spaces)     -- |spaces|缩进|
i18n/stringify.md:5:1       - Unknown word (undefined)  -- undefined 被当作 null 处理。
i18n/stringify.md:5:15      - Unknown word (null)       -- undefined 被当作 null 处理。
i18n/stringifyAll.md:15:15     - Unknown word (false)        -- |unenumerable=false|包含不可枚举值|
i18n/stringifyAll.md:15:2      - Unknown word (unenumerable) -- |unenumerable=false|包含不可枚举值|
i18n/stringifyAll.md:16:18     - Unknown word (Symbol)       -- |symbol=false|包含 Symbol 键名|
i18n/stringifyAll.md:16:2      - Unknown word (symbol)       -- |symbol=false|包含 Symbol 键名|
i18n/stringifyAll.md:16:9      - Unknown word (false)        -- |symbol=false|包含 Symbol 键名|
i18n/stringifyAll.md:17:15     - Unknown word (false)        -- |accessGetter=false|获取 getter 值|
i18n/stringifyAll.md:18:2      - Unknown word (timeout)      -- |timeout=0|序列化超时时间|
i18n/stringifyAll.md:19:2      - Unknown word (depth)        -- |depth=0|遍历对象的最大深度|
i18n/stringifyAll.md:22:19     - Unknown word (Timeout)      -- 超时后，所有未序列化的值都会变成 “Timeout”。
i18n/stripAnsi.md:3:9       - Unknown word (ansi)       -- 清除字符串中的 ansi 控制码。
i18n/stripColor.md:3:9       - Unknown word (ansi)       -- 清除字符串中的 ansi 颜色控制码。
i18n/table.md:7:2       - Unknown word (rows)       -- |rows|表格数据|
i18n/theme.md:15:16     - Unknown word (dark)       -- 获取当前主题（light 或 dark）。
i18n/throttle.md:8:2       - Unknown word (wait)       -- |wait|延迟毫秒数|
i18n/through.md:13:10     - Unknown word (Mode)       -- 设置 objectMode 为真的快捷方式。
i18n/through.md:7:2       - Unknown word (opts)       -- |opts={}|初始化流选项|
i18n/through.md:9:2       - Unknown word (flush)      -- |flush|Flush 实现|
i18n/through.md:9:8       - Unknown word (Flush)      -- |flush|Flush 实现|
i18n/toAsync.md:3:23      - Unknown word (await)      -- generator 可以像 async/await 一样使用。
i18n/topoSort.md:7:2       - Unknown word (edges)      -- |edges|依赖关系|
i18n/trim.md:8:2       - Unknown word (chars)      -- |chars|删除字符|
i18n/truncate.md:16:2      - Unknown word (ellipsis)   -- |ellipsis='...'|表示截取掉部分的符号|
i18n/tryIt.md:3:7       - Unknown word (catch)      -- 在 try catch 块中运行函数。
i18n/type.md:8:12      - Unknown word (true)       -- |lowerCase=true|是否小写|
i18n/type.md:8:2       - Unknown word (lower)      -- |lowerCase=true|是否小写|
i18n/ucs2.md:5:5       - Unknown word (encode)     -- ### encode
i18n/universalify.md:8:21      - Unknown word (callback)   -- |type|源类型，promise 或 callback|
i18n/use.md:7:2       - Unknown word (requires)   -- |requires|依赖|
i18n/utf8.md:21:2      - Unknown word (safe)       -- |safe=false|如果设为真，不抛错误|
i18n/utf8.md:21:7      - Unknown word (false)      -- |safe=false|如果设为真，不抛错误|
i18n/utf8.md:5:5       - Unknown word (encode)     -- ### encode
i18n/vlq.md:5:5       - Unknown word (encode)     -- ### encode
i18n/waitUntil.md:8:2       - Unknown word (timeout)    -- |timeout=0|超时|
i18n/waitUntil.md:9:2       - Unknown word (interval)   -- |interval=250|等待间隔|
i18n/wrap.md:8:2       - Unknown word (wrapper)    -- |wrapper|包裹函数|
index.json:100:15    - Unknown word (safe)          -- "$safeEls",
index.json:1012:14   - Unknown word (trim)                 -- "trim",
index.json:1022:36   - Unknown word (manipulator)          -- description": "Simple url manipulator.",
index.json:103:40    - Unknown word (certain)       -- description": "bind events to certain dom elements.",
index.json:103:52    - Unknown word (elements)      -- events to certain dom elements.",
index.json:1064:25   - Unknown word (Weighted)             -- "description": "Weighted Round Robin implementation
index.json:1064:34   - Unknown word (Round)               -- description": "Weighted Round Robin implementation
index.json:1064:40   - Unknown word (Robin)               -- description": "Weighted Round Robin implementation.",
index.json:1076:6    - Unknown word (abbrev)              -- "abbrev": {
index.json:1081:25   - Unknown word (Calculate)           -- "description": "Calculate the set of unique abbreviatio
index.json:1081:53   - Unknown word (abbreviations)       -- Calculate the set of unique abbreviations for a given set of strings
index.json:1094:43   - Unknown word (that)                -- "Create a function that invokes once it's called
index.json:1094:48   - Unknown word (invokes)             -- Create a function that invokes once it's called n or
index.json:1094:66   - Unknown word (called)              -- that invokes once it's called n or more times.",
index.json:1094:78   - Unknown word (more)                -- once it's called n or more times.",
index.json:1105:6    - Unknown word (ajax)                -- "ajax": {
index.json:1113:25   - Unknown word (Perform)             -- "description": "Perform an asynchronous HTTP
index.json:1127:68   - Unknown word (inherited)           -- of object's own and inherited properties.",
index.json:1138:6    - Unknown word (ansi)                -- "ansiColor": {
index.json:1140:25   - Unknown word (Ansi)                -- "description": "Ansi colors.",
index.json:1155:44   - Unknown word (using)               -- "Make an object map using array of strings.",
index.json:1173:39   - Unknown word (emulate)             -- description": "Use Buffer to emulate atob when running in
index.json:117:40    - Unknown word (different)     -- description": "Insert html on different position.",
index.json:1184:6    - Unknown word (average)             -- "average": {
index.json:1186:29   - Unknown word (average)             -- "description": "Get average value of given numbers
index.json:1199:51   - Unknown word (decoding)            -- base64 encoding and decoding.",
index.json:1212:43   - Unknown word (that)                -- "Create a function that invokes less than n
index.json:1212:48   - Unknown word (invokes)             -- Create a function that invokes less than n times."
index.json:1261:39   - Unknown word (emulate)             -- description": "Use Buffer to emulate btoa when running in
index.json:1294:25   - Unknown word (Convert)             -- "description": "Convert bytes to string.",
index.json:129:49    - Unknown word (element)       -- the position of the element in document.",
index.json:1308:25   - Unknown word (Convert)             -- "description": "Convert bytes to 32-bit words
index.json:1330:31   - Unknown word (everything)          -- description": "Cache everything in module require to
index.json:1341:116  - Unknown word (style)               -- error-first callback style.",
index.json:1341:25   - Unknown word (Convert)             -- "description": "Convert a function that returns
index.json:1341:44   - Unknown word (that)                -- "Convert a function that returns a Promise to
index.json:1341:49   - Unknown word (returns)             -- Convert a function that returns a Promise to a function
index.json:1341:81   - Unknown word (following)           -- Promise to a function following the error-first callback
index.json:1356:25   - Unknown word (Convert)             -- "description": "Convert string to \"camelCase
index.json:1367:6    - Unknown word (capitalize)          -- "capitalize": {
index.json:1369:43   - Unknown word (character)           -- "Convert the first character to upper case and the
index.json:1369:56   - Unknown word (upper)               -- the first character to upper case and the remaining
index.json:1369:75   - Unknown word (remaining)           -- to upper case and the remaining to lower case.",
index.json:1369:88   - Unknown word (lower)               -- and the remaining to lower case.",
index.json:1380:6    - Unknown word (cast)                -- "castPath": {
index.json:1385:25   - Unknown word (Cast)                -- "description": "Cast value into a property
index.json:1396:6    - Unknown word (center)              -- "centerAlign": {
index.json:1398:14   - Unknown word (longest)             -- "longest",
index.json:1402:14   - Unknown word (lpad)                -- "lpad"
index.json:1404:25   - Unknown word (Center)              -- "description": "Center align text in a string
index.json:1419:14   - Unknown word (trim)                -- "trim",
index.json:1421:14   - Unknown word (contain)             -- "contain",
index.json:1426:45   - Unknown word (inside)              -- Read cgroup metrics inside container.",
index.json:1433:6    - Unknown word (char)                -- "char": {
index.json:1435:39   - Unknown word (representing)        -- description": "Return string representing a character whose Unicode
index.json:1435:54   - Unknown word (character)           -- string representing a character whose Unicode code point
index.json:1435:64   - Unknown word (whose)               -- representing a character whose Unicode code point is
index.json:143:25    - Unknown word (Element)       -- "description": "Element property html, text
index.json:1459:6    - Unknown word (clamp)               -- "clamp": {
index.json:1463:25   - Unknown word (Clamp)               -- "description": "Clamp number within the inclusive
index.json:1463:38   - Unknown word (within)              -- description": "Clamp number within the inclusive lower
index.json:1463:49   - Unknown word (inclusive)           -- Clamp number within the inclusive lower and upper bounds
index.json:1463:59   - Unknown word (lower)               -- within the inclusive lower and upper bounds.",
index.json:1463:69   - Unknown word (upper)              -- inclusive lower and upper bounds.",
index.json:1463:75   - Unknown word (bounds)             -- inclusive lower and upper bounds.",
index.json:1482:25   - Unknown word (Utility)            -- "description": "Utility for conditionally joining
index.json:1482:37   - Unknown word (conditionally)      -- description": "Utility for conditionally joining class names
index.json:1482:51   - Unknown word (joining)            -- Utility for conditionally joining class names.",
index.json:1498:14   - Unknown word (rpad)               -- "rpad",
index.json:1499:14   - Unknown word (ansi)               -- "ansiColor",
index.json:1502:17   - Unknown word (Width)              -- "strWidth",
index.json:1522:34   - Unknown word (shallow)            -- description": "Create a shallow-copied clone of the
index.json:1522:42   - Unknown word (copied)             -- : "Create a shallow-copied clone of the provided
index.json:1522:62   - Unknown word (provided)           -- copied clone of the provided plain object.",
index.json:1522:71   - Unknown word (plain)              -- clone of the provided plain object.",
index.json:1540:25   - Unknown word (Recursively)        -- "description": "Recursively clone value.",
index.json:1567:6    - Unknown word (combine)            -- "combine": {
index.json:1569:44   - Unknown word (using)              -- "Create an array by using one array for keys and
index.json:1569:73   - Unknown word (another)            -- one array for keys and another for its values.",
index.json:156:43    - Unknown word (matched)       -- "Remove the set of matched elements from the DOM
index.json:156:51    - Unknown word (elements)      -- Remove the set of matched elements from the DOM.",
index.json:1585:74   - Unknown word (removed)            -- with all falsy values removed.",
index.json:1611:6    - Unknown word (compress)           -- "compressImg": {
index.json:1621:25   - Unknown word (Compress)           -- "description": "Compress image using canvas.
index.json:1621:40   - Unknown word (using)              -- description": "Compress image using canvas.",
index.json:1633:32   - Unknown word (multiple)           -- description": "Concat multiple arrays into a single
index.json:1633:55   - Unknown word (single)             -- multiple arrays into a single array.",
index.json:1644:6    - Unknown word (contain)            -- "contain": {
index.json:1648:19   - Unknown word (Like)               -- "isArrLike",
index.json:1651:47   - Unknown word (present)            -- Check if the value is present in the list.",
index.json:1666:14   - Unknown word (sleep)              -- "sleep",
index.json:1673:45   - Unknown word (inside)             -- Get container stats inside container.",
index.json:1680:6    - Unknown word (convert)            -- "convertBase": {
index.json:1693:6    - Unknown word (convert)            -- "convertBin": {
index.json:1701:14   - Unknown word (lower)              -- "lowerCase"
index.json:170:25    - Unknown word (Convert)       -- "description": "Convert value into an array
index.json:170:80    - Unknown word (Selector)      -- s a string, do querySelector.",
index.json:1722:57   - Unknown word (cookies)            -- for handling browser cookies.",
index.json:1736:48   - Unknown word (using)              -- Copy text to clipboard using document.execCommand
index.json:1816:43   - Unknown word (using)              -- "Create new object using given object as prototype
index.json:1828:12   - Unknown word (Assigner)           -- "createAssigner": {
index.json:183:30    - Unknown word (elements)      -- description": "Show elements.",
index.json:1852:41   - Unknown word (wrapper)            -- escription": "CreateObjectURL wrapper.",
index.json:1863:14   - Unknown word (trim)               -- "trim",
index.json:1864:14   - Unknown word (repeat)             -- "repeat",
index.json:1882:14   - Unknown word (selector)           -- "selector",
index.json:1885:14   - Unknown word (contain)            -- "contain",
index.json:1888:25   - Unknown word (Calculate)          -- "description": "Calculate and compare priority
index.json:1888:63   - Unknown word (selector)           -- compare priority of css selector/rule.",
index.json:1900:9    - Unknown word (Supports)           -- "cssSupports": {
index.json:1906:42   - Unknown word (supports)           -- : "Check if browser supports a given CSS feature
index.json:1914:6    - Unknown word (curry)              -- "curry": {
index.json:1918:34   - Unknown word (currying)           -- description": "Function currying.",
index.json:1932:14   - Unknown word (trim)               -- "trim",
index.json:1939:14   - Unknown word (convert)            -- "convertBin"
index.json:1958:14   - Unknown word (lpad)               -- "lpad"
index.json:1960:36   - Unknown word (extremely)          -- description": "Simple but extremely useful date format function
index.json:1960:46   - Unknown word (useful)             -- Simple but extremely useful date format function
index.json:198:14    - Unknown word (average)       -- "average",
index.json:1993:14   - Unknown word (ansi)               -- "ansiColor"
index.json:1995:27   - Unknown word (tiny)               -- "description": "A tiny JavaScript debugging
index.json:1995:53   - Unknown word (utility)            -- JavaScript debugging utility.",
index.json:19:32     - Unknown word (like)       -- description": "jQuery like style dom manipulator
index.json:19:37     - Unknown word (style)      -- description": "jQuery like style dom manipulator.",
index.json:19:47     - Unknown word (manipulator) -- jQuery like style dom manipulator.",
index.json:2002:6    - Unknown word (deburr)             -- "deburr": {
index.json:2004:115  - Unknown word (combining)         -- Latin letters and remove combining diacritical marks."
index.json:2004:125  - Unknown word (diacritical)       -- and remove combining diacritical marks.",
index.json:2004:137  - Unknown word (marks)             -- combining diacritical marks.",
index.json:2004:41   - Unknown word (Supplement)         -- escription": "Convert Latin-1 Supplement and Latin Extended-A
index.json:2004:73   - Unknown word (letters)            -- and Latin Extended-A letters to basic Latin letters
index.json:2004:96   - Unknown word (letters)            -- letters to basic Latin letters and remove combining
index.json:2023:25   - Unknown word (Better)            -- "description": "Better decodeURIComponent that
index.json:2023:51   - Unknown word (that)              -- Better decodeURIComponent that does not throw if input
index.json:2023:56   - Unknown word (does)              -- decodeURIComponent that does not throw if input is
index.json:2023:83   - Unknown word (invalid)           -- not throw if input is invalid.",
index.json:2036:20   - Unknown word (Assigner)          -- "createAssigner",
index.json:2039:100  - Unknown word (following)         -- value present in the following list of defaults objects
index.json:2039:85   - Unknown word (present)           -- with the first value present in the following list
index.json:2054:57   - Unknown word (along)             -- module, should be used along with use.",
index.json:2065:12   - Unknown word (Prop)              -- "defineProp": {
index.json:2067:14   - Unknown word (cast)              -- "castPath",
index.json:2072:25   - Unknown word (Shortcut)          -- "description": "Shortcut for Object.defineProperty
index.json:2087:42   - Unknown word (argument)          -- : "Return the first argument that is not undefined
index.json:2087:51   - Unknown word (that)              -- Return the first argument that is not undefined.",
index.json:209:14    - Unknown word (miniprogram)   -- "miniprogram"
index.json:2116:47   - Unknown word (certain)           -- Invoke function after certain milliseconds.",
index.json:2116:55   - Unknown word (milliseconds)      -- function after certain milliseconds.",
index.json:211:10    - Unknown word (since)         -- "since": "1.30.0",
index.json:2196:32   - Unknown word (operating)         -- description": "Detect operating system using ua.",
index.json:2207:6    - Unknown word (difference)        -- "difference": {
index.json:2214:68   - Unknown word (included)          -- unique array values not included in the other given array
index.json:2214:84   - Unknown word (other)             -- not included in the other given array.",
index.json:222:50    - Unknown word (otherwise)     -- Blob when available, otherwise BlobBuilder.",
index.json:2259:38   - Unknown word (ratio)             -- description": "Device pixel ratio helper.",
index.json:2259:44   - Unknown word (helper)            -- "Device pixel ratio helper.",
index.json:2271:14   - Unknown word (lpad)              -- "lpad",
index.json:2289:19   - Unknown word (Like)              -- "isArrLike",
index.json:2291:14   - Unknown word (optimize)          -- "optimizeCb"
index.json:2293:38   - Unknown word (elements)          -- description": "Iterate over elements of collection and invokes
index.json:2293:65   - Unknown word (invokes)           -- elements of collection and invokes iterator for each element
index.json:2293:91   - Unknown word (element)           -- invokes iterator for each element.",
index.json:2307:14   - Unknown word (upper)             -- "upperFirst"
index.json:2309:42   - Unknown word (adapted)           -- : "Easing functions adapted from http://jqueryui
index.json:230:6     - Unknown word (Bloom)         -- "BloomFilter": {
index.json:2320:6    - Unknown word (emulate)           -- "emulateTouch": {
index.json:2326:25   - Unknown word (Emulate)           -- "description": "Emulate touch events on desktop
index.json:2326:57   - Unknown word (browsers)          -- touch events on desktop browsers.",
index.json:2337:41   - Unknown word (ends)              -- escription": "Check if string ends with the given target
index.json:2352:25   - Unknown word (Escapes)           -- "description": "Escapes a string for insertion
index.json:2352:46   - Unknown word (insertion)         -- Escapes a string for insertion into HTML, replacing
index.json:2352:67   - Unknown word (replacing)         -- insertion into HTML, replacing &, <, >, \", `, and
index.json:2352:99   - Unknown word (characters)        -- <, >, \", `, and ' characters.",
index.json:2367:71   - Unknown word (literal)           -- valid JavaScript string literal between quotes.",
index.json:2367:79   - Unknown word (between)           -- JavaScript string literal between quotes.",
index.json:2380:40   - Unknown word (chars)             -- description": "Escape special chars to be used as literals
index.json:2380:60   - Unknown word (literals)          -- chars to be used as literals in RegExp constructors
index.json:2380:79   - Unknown word (constructors)      -- as literals in RegExp constructors.",
index.json:239:25    - Unknown word (Bloom)         -- "description": "Bloom filter implementation
index.json:239:38    - Unknown word (implementation) -- description": "Bloom filter implementation.",
index.json:2416:6    - Unknown word (every)             -- "every": {
index.json:2419:19   - Unknown word (Like)              -- "isArrLike",
index.json:2422:66   - Unknown word (elements)          -- return truthy for all elements.",
index.json:2435:20   - Unknown word (Assigner)          -- "createAssigner",
index.json:243:14    - Unknown word (miniprogram)    -- "miniprogram"
index.json:2449:12   - Unknown word (Deep)              -- "extendDeep": {
index.json:2451:16   - Unknown word (Plain)             -- "isPlainObj",
index.json:2455:42   - Unknown word (extending)         -- : "Recursive object extending.",
index.json:245:10    - Unknown word (since)          -- "since": "1.10.0",
index.json:2469:20   - Unknown word (Assigner)          -- "createAssigner"
index.json:2471:25   - Unknown word (Like)              -- "description": "Like extend, but only copies
index.json:2471:47   - Unknown word (copies)            -- Like extend, but only copies own properties over
index.json:2482:18   - Unknown word (Cmts)              -- "extractBlockCmts": {
index.json:2482:6    - Unknown word (extract)           -- "extractBlockCmts": {
index.json:2487:25   - Unknown word (Extract)           -- "description": "Extract block comments from
index.json:2498:6    - Unknown word (extract)           -- "extractUrls": {
index.json:2505:25   - Unknown word (Extract)           -- "description": "Extract urls from plain text
index.json:2505:43   - Unknown word (plain)             -- "Extract urls from plain text.",
index.json:251:6     - Unknown word (Caseless)       -- "Caseless": {
index.json:2524:25   - Unknown word (Turn)             -- "description": "Turn XMLHttpRequest into
index.json:2524:58   - Unknown word (like)             -- XMLHttpRequest into promise like.",
index.json:2532:6    - Unknown word (fibonacci)        -- "fibonacci": {
index.json:2536:25   - Unknown word (Calculate)        -- "description": "Calculate fibonacci number.",
index.json:2536:35   - Unknown word (fibonacci)        -- description": "Calculate fibonacci number.",
index.json:254:14    - Unknown word (lower)          -- "lowerCase",
index.json:2552:25   - Unknown word (Turn)             -- "description": "Turn bytes into human readable
index.json:2552:41   - Unknown word (human)            -- escription": "Turn bytes into human readable file size.
index.json:257:39    - Unknown word (props)          -- description": "Modify object props without caring about
index.json:257:53    - Unknown word (caring)         -- object props without caring about letter case."
index.json:257:60    - Unknown word (about)          -- props without caring about letter case.",
index.json:2617:112  - Unknown word (truth)            -- the values that pass a truth test.",
index.json:2617:63   - Unknown word (returning)        -- elements of collection, returning an array of all the
index.json:261:14    - Unknown word (miniprogram)    -- "miniprogram"
index.json:2628:6    - Unknown word (find)             -- "find": {
index.json:2630:14   - Unknown word (find)             -- "findKey",
index.json:2631:14   - Unknown word (find)             -- "findIdx",
index.json:2635:25   - Unknown word (Find)             -- "description": "Find the first value that
index.json:2635:51   - Unknown word (passes)           -- the first value that passes a truth test in a collection
index.json:2635:60   - Unknown word (truth)            -- value that passes a truth test in a collection
index.json:263:10    - Unknown word (since)          -- "since": "1.9.0",
index.json:2646:6    - Unknown word (find)             -- "findIdx": {
index.json:2650:48   - Unknown word (where)            -- Return the first index where the predicate truth
index.json:2650:68   - Unknown word (truth)            -- where the predicate truth test passes.",
index.json:2650:79   - Unknown word (passes)           -- predicate truth test passes.",
index.json:2661:6    - Unknown word (find)             -- "findKey": {
index.json:2666:46   - Unknown word (where)            -- Return the first key where the predicate truth
index.json:2666:66   - Unknown word (truth)            -- where the predicate truth test passes.",
index.json:2666:77   - Unknown word (passes)           -- predicate truth test passes.",
index.json:2681:47   - Unknown word (where)            -- Return the last index where the predicate truth
index.json:2681:67   - Unknown word (truth)            -- where the predicate truth test passes.",
index.json:2681:78   - Unknown word (passes)           -- predicate truth test passes.",
index.json:2696:25   - Unknown word (Recursively)      -- "description": "Recursively flatten an array.",
index.json:2711:14   - Unknown word (lower)            -- "lowerCase",
index.json:2730:14   - Unknown word (strip)            -- "stripCmt",
index.json:2766:51   - Unknown word (like)             -- Format string in a printf-like format.",
index.json:276:25    - Unknown word (Interconnectable) -- "description": "Interconnectable Message channel.",
index.json:2777:6    - Unknown word (fraction)         -- "fraction": {
index.json:2782:43   - Unknown word (fraction)         -- "Convert number to fraction.",
index.json:2797:25   - Unknown word (Shortcut)         -- "description": "Shortcut for Object.freeze."
index.json:2808:12   - Unknown word (Deep)             -- "freezeDeep": {
index.json:280:14    - Unknown word (miniprogram)      -- "miniprogram"
index.json:2814:25   - Unknown word (Recursively)      -- "description": "Recursively use Object.freeze."
index.json:282:10    - Unknown word (since)            -- "since": "1.42.0",
index.json:2832:25   - Unknown word (Promised)         -- "description": "Promised version of node.js fs
index.json:2862:14   - Unknown word (pluck)            -- "pluck"
index.json:2878:37   - Unknown word (greatest)         -- description": "Compute the greatest common divisor using
index.json:2878:53   - Unknown word (divisor)          -- the greatest common divisor using Euclid's algorithm
index.json:2878:67   - Unknown word (Euclid's)         -- common divisor using Euclid's algorithm.",
index.json:2934:6    - Unknown word (golangify)        -- "golangify": {
index.json:2939:39   - Unknown word (like)             -- description": "Handle errors like golang.",
index.json:295:16    - Unknown word (Mini)             -- "isMiniProgram"
index.json:295:20    - Unknown word (Program)          -- "isMiniProgram"
index.json:3004:42   - Unknown word (decoding)         -- : "Hex encoding and decoding.",
index.json:301:14    - Unknown word (miniprogram)      -- "miniprogram"
index.json:3054:6    - Unknown word (hotkey)           -- "hotkey": {
index.json:3065:33   - Unknown word (keyboard)         -- description": "Capture keyboard input to trigger given
index.json:3109:42   - Unknown word (argument)         -- : "Return the first argument given.",
index.json:3122:58   - Unknown word (occurrence)       -- index at which the first occurrence of value.",
index.json:312:14    - Unknown word (clamp)            -- "clamp",
index.json:3133:6    - Unknown word (indent)           -- "indent": {
index.json:3137:14   - Unknown word (repeat)           -- "repeat"
index.json:3139:25   - Unknown word (Indent)           -- "description": "Indent each line in a string
index.json:3154:81   - Unknown word (another)          -- one constructor into another.",
index.json:317:31    - Unknown word (converter)        -- description": "Color converter.",
index.json:3187:6    - Unknown word (insertion)        -- "insertionSort": {
index.json:3192:25   - Unknown word (Insertion)        -- "description": "Insertion sort implementation
index.json:3203:6    - Unknown word (intersect)        -- "intersect": {
index.json:3208:65   - Unknown word (intersection)     -- values that are the intersection of all the arrays."
index.json:3219:6    - Unknown word (intersect)        -- "intersectRange": {
index.json:3221:25   - Unknown word (Intersect)        -- "description": "Intersect two ranges.",
index.json:3248:6    - Unknown word (invert)           -- "invert": {
index.json:3252:58   - Unknown word (inverted)         -- object composed of the inverted keys and values of object
index.json:3280:43   - Unknown word (classified)       -- "Check if value is classified as an arguments object
index.json:328:6     - Unknown word (Delegator)        -- "Delegator": {
index.json:332:20    - Unknown word (Prop)             -- "defineProp",
index.json:3367:53   - Unknown word (primitive)        -- if value is a boolean primitive.",
index.json:3409:51   - Unknown word (almost)           -- if values are close(almost equal) to each other
index.json:3409:73   - Unknown word (other)            -- almost equal) to each other.",
index.json:341:10    - Unknown word (since)            -- "since": "1.17.0",
index.json:3420:8    - Unknown word (Cyclic)           -- "isCyclic": {
index.json:3427:32   - Unknown word (cyclic)          -- description": "Detect cyclic object reference.",
index.json:3439:8    - Unknown word (Dark)            -- "isDarkMode": {
index.json:3443:32   - Unknown word (dark)            -- description": "Detect dark mode.",
index.json:3471:43   - Unknown word (classified)      -- "Check if value is classified as a Date object.",
index.json:347:6     - Unknown word (Dispatcher)       -- "Dispatcher": {
index.json:34:15     - Unknown word (safe)        -- "$safeEls"
index.json:3500:57   - Unknown word (inside)          -- the process is running inside a docker container.
index.json:3511:49   - Unknown word (element)         -- Check if value is a DOM element.",
index.json:3521:25   - Unknown word (Loosely)         -- "description": "Loosely validate an email address
index.json:352:30    - Unknown word (dispatcher)       -- description": "Flux dispatcher.",
index.json:3540:46   - Unknown word (empty)           -- Check if value is an empty object or array.",
index.json:3557:104  - Unknown word (they)            -- objects, to determine if they should be considered
index.json:3557:119  - Unknown word (considered)      -- determine if they should be considered equal.",
index.json:3557:25   - Unknown word (Performs)        -- "description": "Performs an optimized deep comparison
index.json:3557:37   - Unknown word (optimized)       -- description": "Performs an optimized deep comparison between
index.json:3557:47   - Unknown word (deep)            -- Performs an optimized deep comparison between the
index.json:3557:52   - Unknown word (comparison)      -- Performs an optimized deep comparison between the two objects
index.json:3557:63   - Unknown word (between)         -- optimized deep comparison between the two objects, to
index.json:3557:91   - Unknown word (determine)       -- the two objects, to determine if they should be considered
index.json:3583:8    - Unknown word (Even)            -- "isEven": {
index.json:3587:44   - Unknown word (even)            -- "Check if number is even.",
index.json:3610:8    - Unknown word (Finite)          -- "isFinite": {
index.json:3614:45   - Unknown word (finite)          -- Check if value is a finite primitive number.",
index.json:3614:52   - Unknown word (primitive)       -- if value is a finite primitive number.",
index.json:3640:12   - Unknown word (Width)           -- "isFullWidth": {
index.json:3640:8    - Unknown word (Full)            -- "isFullWidth": {
index.json:3644:34   - Unknown word (character)       -- description": "Check if character is full width.",
index.json:3644:47   - Unknown word (full)            -- Check if character is full width.",
index.json:3644:52   - Unknown word (width)           -- if character is full width.",
index.json:3675:34   - Unknown word (element)         -- description": "Check if element is hidden.",
index.json:3688:44   - Unknown word (classified)      -- "Checks if value is classified as a Integer.",
index.json:36:25     - Unknown word (Element)     -- "description": "Element attribute manipulation
index.json:36:43     - Unknown word (manipulation) -- "Element attribute manipulation.",
index.json:3726:12   - Unknown word (Year)            -- "isLeapYear": {
index.json:3726:8    - Unknown word (Leap)            -- "isLeapYear": {
index.json:3728:36   - Unknown word (year)            -- description": "Check if a year is a leap year.",
index.json:3728:46   - Unknown word (leap)            -- Check if a year is a leap year.",
index.json:3728:51   - Unknown word (year)            -- if a year is a leap year.",
index.json:372:51    - Unknown word (provides)         -- emitter class which provides observer pattern.",
index.json:3774:61   - Unknown word (contained)       -- and values in src are contained in obj.",
index.json:3785:12   - Unknown word (Program)         -- "isMiniProgram": {
index.json:3785:8    - Unknown word (Mini)            -- "isMiniProgram": {
index.json:3789:45   - Unknown word (wechat)          -- Check if running in wechat mini program.",
index.json:3789:52   - Unknown word (mini)            -- if running in wechat mini program.",
index.json:3789:57   - Unknown word (program)         -- running in wechat mini program.",
index.json:3805:31   - Unknown word (whether)         -- description": "Check whether client is using a mobile
index.json:3850:66   - Unknown word (same)            -- null or undefined, the same as value == null.",
index.json:3893:43   - Unknown word (classified)      -- "Check if value is classified as a Number primitive
index.json:3893:66   - Unknown word (primitive)       -- classified as a Number primitive or object.",
index.json:3904:8    - Unknown word (Numeric)         -- "isNumeric": {
index.json:3908:16   - Unknown word (Finite)          -- "isFinite",
index.json:3911:43   - Unknown word (numeric)         -- "Check if value is numeric.",
index.json:391:35    - Unknown word (implementation)   -- description": "Enum type implementation.",
index.json:3950:8    - Unknown word (Plain)           -- "isPlainObj": {
index.json:3981:38   - Unknown word (provided)        -- description": "Check if the provided integer is a prime number
index.json:4026:45   - Unknown word (regular)         -- Check if value is a regular expression.",
index.json:4039:39   - Unknown word (appears)         -- description": "Check if path appears to be relative.",
index.json:4050:8    - Unknown word (Retina)          -- "isRetina": {
index.json:4054:25   - Unknown word (Determine)       -- "description": "Determine if running on a high
index.json:4116:52   - Unknown word (primitive)       -- if value is a string primitive.",
index.json:4127:11   - Unknown word (Blank)           -- "isStrBlank": {
index.json:4130:44   - Unknown word (blank)           -- "Check if string is blank.",
index.json:4200:25   - Unknown word (Loosely)         -- "description": "Loosely validate an url.",
index.json:4278:27   - Unknown word (simple)          -- "description": "A simple jsonp implementation
index.json:4286:6    - Unknown word (kebab)           -- "kebabCase": {
index.json:4290:45   - Unknown word (kebab)           -- Convert string to \"kebabCase\".",
index.json:4304:14   - Unknown word (invert)          -- "invert"
index.json:4306:29   - Unknown word (codes)           -- "description": "Key codes and key names conversion
index.json:4321:52   - Unknown word (enumerable)      -- an array of the own enumerable property names of object
index.json:4347:38   - Unknown word (element)         -- description": "Get the last element of array.",
index.json:4364:20   - Unknown word (Prop)            -- "defineProp",
index.json:4374:40   - Unknown word (lazily)          -- description": "Import modules lazily, Proxy is used.",
index.json:4385:41   - Unknown word (lazily)          -- escription": "Require modules lazily.",
index.json:4395:37   - Unknown word (distance)        -- description": "Levenshtein distance implementation.",
index.json:4407:6    - Unknown word (linkify)         -- "linkify": {
index.json:4409:14   - Unknown word (extract)         -- "extractUrls",
index.json:4413:25   - Unknown word (Hyperlink)      -- "description": "Hyperlink urls in a string.",
index.json:4428:25   - Unknown word (Inject)         -- "description": "Inject link tag into page with
index.json:4450:25   - Unknown word (Inject)         -- "description": "Inject script tag into page
index.json:4458:6    - Unknown word (longest)        -- "longest": {
index.json:4462:33   - Unknown word (longest)        -- description": "Get the longest item in an array.",
index.json:4488:6    - Unknown word (lpad)           -- "lpad": {
index.json:4490:14   - Unknown word (repeat)         -- "repeat",
index.json:4493:61   - Unknown word (shorter)        -- the left side if it's shorter than length.",
index.json:449:36    - Unknown word (implementation)   -- description": "Hash table implementation.",
index.json:4504:6    - Unknown word (ltrim)          -- "ltrim": {
index.json:4506:32   - Unknown word (chars)          -- description": "Remove chars or white-spaces from
index.json:4506:47   - Unknown word (spaces)         -- Remove chars or white-spaces from beginning of string
index.json:4506:59   - Unknown word (beginning)      -- or white-spaces from beginning of string.",
index.json:4550:6    - Unknown word (matcher)        -- "matcher": {
index.json:4555:78   - Unknown word (contained)      -- checks if attrs are contained in an object.",
index.json:4568:29   - Unknown word (maximum)        -- "description": "Get maximum value of given numbers
index.json:4606:32   - Unknown word (backed)         -- description": "Memory-backed implementation of the
index.json:4621:53   - Unknown word (caching)        -- a given function by caching the computed result
index.json:4621:65   - Unknown word (computed)       -- function by caching the computed result.",
index.json:4636:54   - Unknown word (together)       -- the contents of arrays together into the first array
index.json:4673:39   - Unknown word (manipulation)   -- description": "Document meta manipulation, turn name and content
index.json:4673:53   - Unknown word (turn)           -- Document meta manipulation, turn name and content into
index.json:467:30    - Unknown word (implementation)   -- description": "Heap implementation.",
index.json:4685:62   - Unknown word (every)          -- list of the names of every method in an object
index.json:4714:29   - Unknown word (minimum)        -- "description": "Get minimum value of given numbers
index.json:4730:25   - Unknown word (Recursively)    -- "description": "Recursively create directories.
index.json:4743:16   - Unknown word (Leap)           -- "isLeapYear",
index.json:4743:20   - Unknown word (Year)           -- "isLeapYear",
index.json:4749:25   - Unknown word (Tiny)           -- "description": "Tiny moment.js like implementation
index.json:4757:6    - Unknown word (morph)          -- "morphDom": {
index.json:4765:25   - Unknown word (Morph)          -- "description": "Morph a dom tree to match
index.json:4774:6    - Unknown word (morse)          -- "morse": {
index.json:4776:14   - Unknown word (upper)          -- "upperCase",
index.json:4777:14   - Unknown word (invert)         -- "invert"
index.json:4779:25   - Unknown word (Morse)          -- "description": "Morse code encoding and decoding
index.json:4779:49   - Unknown word (decoding)       -- Morse code encoding and decoding.",
index.json:4796:45   - Unknown word (formats)        -- Convert time string formats to milliseconds.",
index.json:4796:56   - Unknown word (milliseconds)   -- time string formats to milliseconds.",
index.json:4825:6    - Unknown word (negate)         -- "negate": {
index.json:4827:48   - Unknown word (negates)        -- Create a function that negates the result of the predicate
index.json:4840:30   - Unknown word (tick)           -- description": "Next tick for both node and browser
index.json:4840:39   - Unknown word (both)           -- description": "Next tick for both node and browser.",
index.json:4867:14   - Unknown word (capitalize)     -- "capitalize"
index.json:489:42    - Unknown word (manipulator)      -- : "V8 heap snapshot manipulator.",
index.json:48:15     - Unknown word (safe)         -- "$safeEls",
index.json:4917:25   - Unknown word (Wrapper)        -- "description": "Wrapper for the Web Notifications
index.json:4928:25   - Unknown word (Gets)           -- "description": "Gets the number of milliseconds
index.json:4928:44   - Unknown word (milliseconds)   -- "Gets the number of milliseconds that have elapsed since
index.json:4928:62   - Unknown word (have)           -- of milliseconds that have elapsed since the Unix
index.json:4928:67   - Unknown word (elapsed)        -- milliseconds that have elapsed since the Unix epoch
index.json:4928:90   - Unknown word (epoch)          -- elapsed since the Unix epoch.",
index.json:4956:25   - Unknown word (Opposite)       -- "description": "Opposite of pick.",
index.json:4969:14   - Unknown word (partial)        -- "partial",
index.json:4972:48   - Unknown word (invokes)        -- Create a function that invokes once.",
index.json:4987:30   - Unknown word (stuff)          -- description": "Open stuff like url, files.",
index.json:4997:35   - Unknown word (dialog)         -- description": "Open file dialog to select file in browser
index.json:5006:6    - Unknown word (optimize)       -- "optimizeCb": {
index.json:5021:6    - Unknown word (ordinal)        -- "ordinal": {
index.json:5023:29   - Unknown word (ordinal)        -- "description": "Add ordinal indicator to number
index.json:5023:37   - Unknown word (indicator)      -- description": "Add ordinal indicator to number.",
index.json:5035:6    - Unknown word (orientation)    -- "orientation": {
index.json:5041:25   - Unknown word (Screen)         -- "description": "Screen orientation helper.
index.json:5041:32   - Unknown word (orientation)    -- description": "Screen orientation helper.",
index.json:5041:44   - Unknown word (helper)         -- "Screen orientation helper.",
index.json:5051:14   - Unknown word (repeat)         -- "repeat",
index.json:5054:58   - Unknown word (sides)          -- on the left and right sides if it's shorter than
index.json:5054:72   - Unknown word (shorter)        -- right sides if it's shorter than length.",
index.json:5080:6    - Unknown word (parallel)       -- "parallel": {
index.json:5086:54   - Unknown word (parallel)       -- array of functions in parallel.",
index.json:509:25    - Unknown word (Simple)           -- "description": "Simple internationalization
index.json:509:32    - Unknown word (internationalization) -- description": "Simple internationalization library.",
index.json:5101:14   - Unknown word (invert)         -- "invert",
index.json:5104:44   - Unknown word (argument)       -- "Parse command line argument options, the same as
index.json:5104:66   - Unknown word (same)           -- argument options, the same as minimist.",
index.json:5134:6    - Unknown word (partial)        -- "partial": {
index.json:5139:25   - Unknown word (Partially)      -- "description": "Partially apply a function by
index.json:5139:55   - Unknown word (filling)        -- apply a function by filling in given arguments.
index.json:5153:14   - Unknown word (upper)          -- "upperFirst"
index.json:5171:52   - Unknown word (microsecond)    -- resolution time up to microsecond precision.",
index.json:5189:34   - Unknown word (filtered)       -- description": "Return a filtered copy of an object."
index.json:5204:42   - Unknown word (together)      -- : "Pipe all streams together.",
index.json:5213:6    - Unknown word (pluck)         -- "pluck": {
index.json:5218:25   - Unknown word (Extract)       -- "description": "Extract a list of property values
index.json:521:10    - Unknown word (Transformer)          -- "JsonTransformer": {
index.json:5229:6    - Unknown word (pointer)       -- "pointerEvent": {
index.json:5233:33   - Unknown word (pointer)       -- description": "Get the pointer event name, use touch
index.json:5233:85   - Unknown word (fallback)      -- and mouse events as a fallback if not supported.",
index.json:5244:25   - Unknown word (Find)          -- "description": "Find decimal precision of
index.json:5244:30   - Unknown word (decimal)       -- description": "Find decimal precision of a given
index.json:5273:14   - Unknown word (kebab)         -- "kebabCase"
index.json:5275:29   - Unknown word (vendor)        -- "description": "Add vendor prefixes to a CSS attribute
index.json:5275:36   - Unknown word (prefixes)      -- description": "Add vendor prefixes to a CSS attribute.
index.json:52:25     - Unknown word (Element)      -- "description": "Element class manipulations
index.json:52:39     - Unknown word (manipulations) -- description": "Element class manipulations.",
index.json:5304:48   - Unknown word (will)          -- Return a function that will itself return the key
index.json:5304:53   - Unknown word (itself)        -- a function that will itself return the key property
index.json:533:38    - Unknown word (transformer)          -- description": "Json to json transformer.",
index.json:5359:25   - Unknown word (Shortcut)      -- "description": "Shortcut for requestAnimationFrame
index.json:5359:45   - Unknown word (Animation)     -- Shortcut for requestAnimationFrame.",
index.json:5359:54   - Unknown word (Frame)         -- for requestAnimationFrame.",
index.json:5372:25   - Unknown word (Produces)      -- "description": "Produces a random number between
index.json:5372:50   - Unknown word (between)       -- Produces a random number between min and max(inclusive
index.json:5372:70   - Unknown word (inclusive)     -- between min and max(inclusive).",
index.json:5425:27   - Unknown word (tiny)          -- "description": "A tiny id generator, similar
index.json:5425:46   - Unknown word (similar)       -- A tiny id generator, similar to nanoid.",
index.json:5454:32   - Unknown word (flexibly)      -- description": "Create flexibly-numbered lists of integers
index.json:5454:41   - Unknown word (numbered)      -- escription": "Create flexibly-numbered lists of integers."
index.json:5471:29   - Unknown word (symmetric)     -- "description": "RC4 symmetric encryption implementation
index.json:5485:60   - Unknown word (similar)       -- callback when dom is ready, similar to jQuery ready.",
index.json:548:25    - Unknown word (Doubly)               -- "description": "Doubly-linked list implementation
index.json:548:44    - Unknown word (implementation)       -- "Doubly-linked list implementation.",
index.json:5496:14   - Unknown word (optimize)      -- "optimizeCb",
index.json:5501:25   - Unknown word (Turn)          -- "description": "Turn a list of values into
index.json:5501:54   - Unknown word (single)        -- list of values into a single value.",
index.json:5516:31   - Unknown word (associative)   -- description": "Right-associative version of reduce."
index.json:5530:14   - Unknown word (negate)        -- "negate",
index.json:5533:25   - Unknown word (Opposite)      -- "description": "Opposite of filter.",
index.json:5548:117  - Unknown word (removed)       -- return an array of the removed elements.",
index.json:5548:71   - Unknown word (returns)       -- array that predicate returns truthy for and return
index.json:5559:6    - Unknown word (repeat)        -- "repeat": {
index.json:5561:25   - Unknown word (Repeat)        -- "description": "Repeat string n-times.",
index.json:5590:30   - Unknown word (accumulates)   -- description": "This accumulates the arguments passed
index.json:5604:47   - Unknown word (mutating)      -- Reverse array without mutating it.",
index.json:5634:25   - Unknown word (Shortcut)      -- "description": "Shortcut for requestIdleCallback
index.json:5645:42   - Unknown word (possible)      -- : "Loop through all possible path and domain to remove
index.json:5656:14   - Unknown word (parallel)      -- "parallel"
index.json:5658:25   - Unknown word (Recursively)   -- "description": "Recursively remove directories.
index.json:5681:6    - Unknown word (rpad)          -- "rpad": {
index.json:5686:62   - Unknown word (shorter)       -- the right side if it's shorter than length.",
index.json:568:38    - Unknown word (wrapper)              -- description": "LocalStorage wrapper.",
index.json:5697:6    - Unknown word (rtrim)         -- "rtrim": {
index.json:5699:32   - Unknown word (chars)         -- description": "Remove chars or white-spaces from
index.json:5699:47   - Unknown word (spaces)        -- Remove chars or white-spaces from end of string.
index.json:5715:14   - Unknown word (optimize)      -- "optimizeCb",
index.json:5716:14   - Unknown word (matcher)       -- "matcher",
index.json:5734:14   - Unknown word (cast)          -- "castPath"
index.json:5750:14   - Unknown word (cast)          -- "castPath"
index.json:5765:14   - Unknown word (cast)          -- "castPath",
index.json:5786:37   - Unknown word (safely)        -- description": "Use storage safely in safari private browsing
index.json:5786:47   - Unknown word (safari)        -- Use storage safely in safari private browsing and
index.json:5786:62   - Unknown word (browsing)      -- safely in safari private browsing and older browsers.
index.json:5786:75   - Unknown word (older)         -- private browsing and older browsers.",
index.json:5786:81   - Unknown word (browsers)      -- private browsing and older browsers.",
index.json:5794:6    - Unknown word (same)          -- "sameOrigin": {
index.json:5798:52   - Unknown word (same)          -- if two urls pass the same origin policy.",
index.json:5829:6    - Unknown word (scroll)        -- "scrollTo": {
index.json:5832:14   - Unknown word (Tween)         -- "Tween",
index.json:5838:25   - Unknown word (Scroll)        -- "description": "Scroll to a target with animation
index.json:5838:49   - Unknown word (animation)     -- Scroll to a target with animation.",
index.json:5848:25   - Unknown word (Seeded)        -- "description": "Seeded random number generator
index.json:5876:6    - Unknown word (selector)      -- "selector": {
index.json:587:25    - Unknown word (Simple)               -- "description": "Simple logger with level filter
index.json:5883:29   - Unknown word (selector)      -- "description": "Css selector parser and serializer
index.json:5895:6    - Unknown word (shebang)       -- "shebang": {
index.json:5899:44   - Unknown word (shebang)       -- "Get command from a shebang.",
index.json:5932:25   - Unknown word (Randomize)     -- "description": "Randomize the order of the elements
index.json:5943:6    - Unknown word (singleton)     -- "singleton": {
index.json:5947:25   - Unknown word (Ensure)        -- "description": "Ensure an async function is
index.json:5947:58   - Unknown word (called)        -- async function is only called once before it resolves
index.json:5947:80   - Unknown word (resolves)      -- called once before it resolves.",
index.json:5982:29   - Unknown word (approximate)   -- "description": "Get approximate size of a js object
index.json:5994:6    - Unknown word (sleep)         -- "sleep": {
index.json:5996:51   - Unknown word (specified)     -- Resolve a promise after a specified timeout.",
index.json:601:14    - Unknown word (Pseudo)               -- "PseudoMap",
index.json:6039:6    - Unknown word (snake)         -- "snakeCase": {
index.json:6043:45   - Unknown word (snake)         -- Convert string to \"snakeCase\".",
index.json:604:25    - Unknown word (Simple)               -- "description": "Simple LRU cache.",
index.json:6074:14   - Unknown word (pluck)         -- "pluck",
index.json:6078:63   - Unknown word (ascending)     -- of elements sorted in ascending order by results of
index.json:6126:31   - Unknown word (different)     -- description": "Split different string case to an array
index.json:6152:33   - Unknown word (Site)         -- description": "Get CallSite objects in v8.",
index.json:6165:41   - Unknown word (starts)       -- escription": "Check if string starts with the given target
index.json:6224:9    - Unknown word (Width)        -- "strWidth": {
index.json:6226:14   - Unknown word (strip)        -- "stripAnsi",
index.json:6226:19   - Unknown word (Ansi)         -- "stripAnsi",
index.json:6227:16   - Unknown word (Full)         -- "isFullWidth"
index.json:6227:20   - Unknown word (Width)        -- "isFullWidth"
index.json:6229:45   - Unknown word (width)        -- Get string's visual width.",
index.json:6273:14   - Unknown word (difference)   -- "difference",
index.json:6281:16   - Unknown word (Mini)         -- "isMiniProgram",
index.json:6281:20   - Unknown word (Program)      -- "isMiniProgram",
index.json:6285:20   - Unknown word (Prop)         -- "defineProp",
index.json:6301:11   - Unknown word (Ansi)         -- "stripAnsi": {
index.json:6301:6    - Unknown word (strip)        -- "stripAnsi": {
index.json:6303:25   - Unknown word (Strip)        -- "description": "Strip ansi codes from a string
index.json:6303:31   - Unknown word (ansi)         -- description": "Strip ansi codes from a string
index.json:6303:36   - Unknown word (codes)        -- description": "Strip ansi codes from a string.",
index.json:630:6     - Unknown word (Mutation)             -- "MutationObserver": {
index.json:6314:6    - Unknown word (strip)        -- "stripBom": {
index.json:6316:25   - Unknown word (Strip)        -- "description": "Strip UTF-8 byte order mark
index.json:6328:6    - Unknown word (strip)        -- "stripCmt": {
index.json:6330:25   - Unknown word (Strip)        -- "description": "Strip comments from source
index.json:6343:25   - Unknown word (Strip)        -- "description": "Strip ansi color codes from
index.json:6343:31   - Unknown word (ansi)         -- description": "Strip ansi color codes from a string
index.json:6343:42   - Unknown word (codes)        -- : "Strip ansi color codes from a string.",
index.json:634:25    - Unknown word (Safe)                 -- "description": "Safe MutationObserver, does
index.json:634:30    - Unknown word (Mutation)             -- description": "Safe MutationObserver, does nothing
index.json:634:48    - Unknown word (does)                 -- Safe MutationObserver, does nothing if MutationObserver
index.json:634:53    - Unknown word (nothing)              -- MutationObserver, does nothing if MutationObserver
index.json:634:64    - Unknown word (Mutation)             -- tionObserver, does nothing if MutationObserver is not supported
index.json:6356:25   - Unknown word (Strip)        -- "description": "Strip html tags from a string
index.json:6367:11   - Unknown word (Indent)       -- "stripIndent": {
index.json:6375:31   - Unknown word (indentation)  -- description": "Strip indentation from multi-line strings
index.json:6375:48   - Unknown word (multi)        -- Strip indentation from multi-line strings.",
index.json:6389:43   - Unknown word (specified)    -- "Strip number to a specified precision.",
index.json:6430:17   - Unknown word (Width)        -- "strWidth",
index.json:6436:14   - Unknown word (rtrim)        -- "rtrim",
index.json:6457:93   - Unknown word (rendering)    -- can be evaluated for rendering.",
index.json:6467:6    - Unknown word (theme)        -- "theme": {
index.json:6472:25   - Unknown word (Theme)        -- "description": "Theme helper.",
index.json:6472:31   - Unknown word (helper)       -- description": "Theme helper.",
index.json:6485:38   - Unknown word (throttled)    -- description": "Return a new throttled version of the passed
index.json:64:14     - Unknown word (kebab)         -- "kebabCase",
index.json:6502:25   - Unknown word (Tiny)         -- "description": "Tiny wrapper of stream Transform
index.json:6514:50   - Unknown word (tilde)        -- Convert absolute path to tilde path.",
index.json:6539:10   - Unknown word (Taken)        -- "timeTaken": {
index.json:6556:14   - Unknown word (optimize)     -- "optimizeCb"
index.json:66:14     - Unknown word (contain)       -- "contain",
index.json:6709:6    - Unknown word (topo)         -- "topoSort": {
index.json:6711:25   - Unknown word (Topological)  -- "description": "Topological sorting algorithm."
index.json:6711:37   - Unknown word (sorting)      -- description": "Topological sorting algorithm.",
index.json:6739:14   - Unknown word (ltrim)        -- "ltrim",
index.json:673:25    - Unknown word (Lightweight)          -- "description": "Lightweight Promise implementation
index.json:6740:14   - Unknown word (rtrim)        -- "rtrim"
index.json:6742:32   - Unknown word (chars)        -- description": "Remove chars or white-spaces from
index.json:6742:47   - Unknown word (spaces)       -- Remove chars or white-spaces from beginning end of
index.json:6742:59   - Unknown word (beginning)    -- or white-spaces from beginning end of string.",
index.json:6758:57   - Unknown word (width)        -- string to a specific width.",
index.json:6792:25   - Unknown word (Determine)    -- "description": "Determine the internal JavaScript
index.json:6818:44   - Unknown word (decoding)     -- "UCS-2 encoding and decoding.",
index.json:681:6     - Unknown word (Pseudo)               -- "PseudoMap": {
index.json:6829:6    - Unknown word (uncaught)     -- "uncaught": {
index.json:6833:14   - Unknown word (Single)       -- "SingleEmitter"
index.json:6835:39   - Unknown word (uncaught)     -- description": "Handle global uncaught errors and promise rejections
index.json:6847:14   - Unknown word (invert)       -- "invert"
index.json:6849:47   - Unknown word (back)         -- Convert HTML entities back, the inverse of escape
index.json:6849:57   - Unknown word (inverse)      -- HTML entities back, the inverse of escape.",
index.json:685:20    - Unknown word (Prop)                 -- "defineProp",
index.json:6879:36   - Unknown word (globally)     -- description": "Generate a globally-unique id.",
index.json:6894:32   - Unknown word (duplicate)    -- description": "Create duplicate-free version of an array
index.json:68:15     - Unknown word (safe)          -- "$safeEls",
index.json:6905:6    - Unknown word (universalify) -- "universalify": {
index.json:6912:56   - Unknown word (both)         -- async function support both promises and callbacks
index.json:691:25    - Unknown word (Like)                 -- "description": "Like es6 Map, without iterators
index.json:6927:14   - Unknown word (pluck)        -- "pluck",
index.json:6930:25   - Unknown word (Opposite)     -- "description": "Opposite of zip.",
index.json:6958:43   - Unknown word (character)    -- "Convert the first character of string to upper case
index.json:6991:44   - Unknown word (decoding)     -- "UTF-8 encoding and decoding.",
index.json:7007:43   - Unknown word (compliant)    -- "RFC4122 version 4 compliant uuid generator.",
index.json:7022:52   - Unknown word (enumerable)   -- an array of the own enumerable property values of object
index.json:7036:14   - Unknown word (clamp)        -- "clamp",
index.json:7054:41   - Unknown word (quantity)     -- escription": "Variable-length quantity encoding and decoding
index.json:706:36    - Unknown word (structure)            -- description": "Queue data structure.",
index.json:7070:30   - Unknown word (until)        -- description": "Wait until function returns a truthy
index.json:7070:45   - Unknown word (returns)      -- Wait until function returns a truthy value.",
index.json:7082:6    - Unknown word (waterfall)    -- "waterfall": {
index.json:7133:6    - Unknown word (workerize)    -- "workerize": {
index.json:7143:32   - Unknown word (stand)        -- description": "Move a stand-alone function to a
index.json:7143:38   - Unknown word (alone)        -- description": "Move a stand-alone function to a worker
index.json:7153:14   - Unknown word (partial)      -- "partial"
index.json:7155:43   - Unknown word (inside)       -- "Wrap the function inside a wrapper function,
index.json:7155:70   - Unknown word (passing)      -- a wrapper function, passing it as the first argument
index.json:7155:94   - Unknown word (argument)     -- passing it as the first argument.",
index.json:7174:25   - Unknown word (Promised)     -- "description": "Promised version of mini program
index.json:7174:45   - Unknown word (mini)         -- Promised version of mini program wx object."
index.json:7174:50   - Unknown word (program)      -- Promised version of mini program wx object.",
index.json:7197:31   - Unknown word (together)     -- description": "Merge together the values of each of
index.json:7197:96   - Unknown word (corresponding) -- with the values at the corresponding position.",
index.json:72:25     - Unknown word (Element)       -- "description": "Element css manipulation.",
index.json:72:37     - Unknown word (manipulation)  -- description": "Element css manipulation.",
index.json:735:6     - Unknown word (Readiness)            -- "Readiness": {
index.json:744:25    - Unknown word (Readiness)            -- "description": "Readiness manager.",
index.json:762:25    - Unknown word (Simplified)           -- "description": "Simplified redux like state container
index.json:762:42    - Unknown word (like)                 -- : "Simplified redux like state container.",
index.json:773:12    - Unknown word (Sensor)               -- "ResizeSensor": {
index.json:776:14    - Unknown word (Single)               -- "SingleEmitter",
index.json:780:14    - Unknown word (contain)              -- "contain",
index.json:784:35    - Unknown word (element's)            -- description": "Detect if element's size has changed.",
index.json:784:54    - Unknown word (changed)              -- if element's size has changed.",
index.json:800:25    - Unknown word (Simple)               -- "description": "Simple wrapper of querySelectorAll
index.json:800:32    - Unknown word (wrapper)              -- description": "Simple wrapper of querySelectorAll
index.json:800:48    - Unknown word (Selector)             -- Simple wrapper of querySelectorAll to make dom selection
index.json:800:82    - Unknown word (easier)               -- to make dom selection easier.",
index.json:813:31    - Unknown word (simultaneous)         -- description": "Limit simultaneous access to a resource
index.json:834:40    - Unknown word (wrapper)              -- description": "SessionStorage wrapper.",
index.json:842:6     - Unknown word (Single)               -- "SingleEmitter": {
index.json:849:44    - Unknown word (single)               -- "Event emitter with single event type.",
index.json:866:25    - Unknown word (Tiny)                 -- "description": "Tiny WebSocket wrapper."
index.json:866:40    - Unknown word (wrapper)              -- description": "Tiny WebSocket wrapper.",
index.json:86:15     - Unknown word (safe)          -- "$safeEls"
index.json:878:36    - Unknown word (structure)            -- description": "Stack data structure.",
index.json:88:25     - Unknown word (Wrapper)       -- "description": "Wrapper of $attr, adds data
index.json:88:43     - Unknown word (adds)          -- "Wrapper of $attr, adds data- prefix to keys
index.json:896:25    - Unknown word (Simple)               -- "description": "Simple state machine.",
index.json:932:32    - Unknown word (manipulate)           -- description": "Parse, manipulate and generate chrome
index.json:952:14    - Unknown word (trim)                 -- "trim",
index.json:954:14    - Unknown word (intersect)            -- "intersect",
index.json:955:14    - Unknown word (convert)              -- "convertBase"
index.json:957:25    - Unknown word (Easily)               -- "description": "Easily create chrome tracing
index.json:974:35    - Unknown word (structure)            -- description": "Trie data structure.",
index.json:986:6     - Unknown word (Tween)                -- "Tween": {
index.json:997:25    - Unknown word (Tween)                -- "description": "Tween engine for JavaScript
lib/benchmark.js:16:29     - Unknown word (remain)     -- const modName = options.remain[0];
lib/benchmark.js:17:53     - Unknown word (must)       -- console.log('A module name must be given.');
lib/benchmark.js:1:31      - Unknown word (licia)      -- fs, trim } = require('licia');
lib/benchmark.js:26:11     - Unknown word (licia)      -- '.licia/benchmark/' + modName
lib/benchmark.js:29:15     - Unknown word (Exist)      -- await fileExist(modPath);
lib/benchmark.js:30:15     - Unknown word (Exist)      -- await fileExist(modBenchmarkPath);
lib/benchmark.js:49:32     - Unknown word (licia)      -- runScript('node', ['.licia/benchmark/' + modName
lib/benchmark.js:53:22     - Unknown word (licia)      -- const output = '.licia/benchmark/' + modName
lib/benchmark.js:55:11     - Unknown word (eustia)     -- await eustiaBuild({
lib/benchmark.js:64:26     - Unknown word (LICIA)      -- data = data.replace(/LICIA_TEST/g, 'true');
lib/benchmark.js:6:9       - Unknown word (Exist)      -- fileExist,
lib/benchmark.js:8:5       - Unknown word (eustia)     -- eustiaBuild,
lib/build.js:149:22    - Unknown word (trans)       -- data = await transBabel(data);
lib/build.js:158:26    - Unknown word (LICIA)       -- data = data.replace(/LICIA_TEST/g, 'false');
lib/build.js:160:22    - Unknown word (eustia)      -- if (pkgName === 'eustia-module') {
lib/build.js:169:20    - Unknown word (trans)       -- data = transToEsModule(
lib/build.js:174:20    - Unknown word (trans)       -- data = transToCommonjs(
lib/build.js:219:10    - Unknown word (trans)       -- function transToEsModule(data, dependencies
lib/build.js:249:10    - Unknown word (trans)       -- function transToCommonjs(data, dependencies
lib/build.js:25:27     - Unknown word (licia)      -- await genPackage('licia-src', files);
lib/build.js:26:27     - Unknown word (eustia)     -- await genPackage('eustia-module', files);
lib/build.js:27:27     - Unknown word (licia)      -- await genPackage('licia', files);
lib/build.js:282:52    - Unknown word (scoping)     -- plugin-transform-block-scoping',
lib/build.js:28:27     - Unknown word (licia)      -- await genPackage('licia-es', files);
lib/build.js:29:27     - Unknown word (miniprogram) -- await genPackage('miniprogram-licia', files);
lib/build.js:29:39     - Unknown word (licia)       -- genPackage('miniprogram-licia', files);
lib/build.js:38:22     - Unknown word (miniprogram) -- if (pkgName === 'miniprogram-licia') {
lib/build.js:39:42     - Unknown word (miniprogram) -- packages/${pkgName}/miniprogram_dist`);
lib/build.js:3:70      - Unknown word (licia)      -- filter } = require('licia');
lib/build.js:57:26     - Unknown word (Effects)     -- packInfo.sideEffects = false;
lib/build.js:61:22     - Unknown word (miniprogram) -- if (pkgName === 'miniprogram-licia') {
lib/build.js:62:26     - Unknown word (miniprogram) -- packInfo.main = 'miniprogram_dist/index.js';
lib/build.js:75:11     - Unknown word (mods)        -- const mods = {
lib/build.js:83:13     - Unknown word (mods)        -- mods.browser.push(modName
lib/build.js:86:13     - Unknown word (mods)        -- mods.node.push(modName);
lib/build.js:89:13     - Unknown word (mods)        -- mods.miniprogram.push(modName
lib/build.js:96:30     - Unknown word (mods)        -- const modNames = mods[type];
lib/demo.js:1:31      - Unknown word (licia)      -- each, fs } = require('licia');
lib/demo.js:22:29     - Unknown word (remain)     -- const modName = options.remain[0];
lib/demo.js:2:32      - Unknown word (eustia)     -- comTranspiler = require('eustia-component');
lib/demo.js:41:42     - Unknown word (licia)      -- emoOutputPath = resolvePath('.licia/demo/' + modName +
lib/demo.js:43:15     - Unknown word (Exist)      -- await fileExist(modPath);
lib/demo.js:44:15     - Unknown word (Exist)      -- await fileExist(modTestPath);
lib/demo.js:55:25     - Unknown word (licia)      -- const outputDir = '.licia/demo';
lib/demo.js:6:9       - Unknown word (Exist)      -- fileExist,
lib/demo.js:78:11     - Unknown word (eustia)     -- await eustiaBuild(buildOpts);
lib/demo.js:81:26     - Unknown word (LICIA)      -- data = data.replace(/LICIA_TEST/g, 'true');
lib/demo.js:8:5       - Unknown word (eustia)     -- eustiaBuild,
lib/es5.js:16:33     - Unknown word (miniprogram) -- !contain(data.env, 'miniprogram')
lib/es5.js:20:24     - Unknown word (licia)       -- modules.push(`.licia/packages/licia/${key
lib/es5.js:20:39     - Unknown word (licia)       -- push(`.licia/packages/licia/${key}.js`);
lib/es5.js:2:44      - Unknown word (licia)      -- contain } = require('licia');
lib/format.js:2:41      - Unknown word (licia)      -- defaults, keys } = require('licia');
lib/format.js:9:29      - Unknown word (remain)     -- const modName = options.remain[0];
lib/help.js:15:18     - Unknown word (cspell)     -- 'cspell'
lib/help.js:1:44      - Unknown word (licia)      -- cliHelp } = require('licia');
lib/help.js:30:50     - Unknown word (lpad)       -- module] [options]', 'test lpad --browser'],
lib/help.js:4:29      - Unknown word (remain)     -- const cmdName = options.remain[0];
lib/help.js:91:12     - Unknown word (licia)      -- name: 'licia',
lib/lint.js:4:29      - Unknown word (remain)     -- const modName = options.remain[0];
lib/server.js:10:17     - Unknown word (remain)     -- const modName = remain[1];
lib/server.js:12:28     - Unknown word (licia)      -- targetScriptPath = '.licia/server/' + modName
lib/server.js:14:23     - Unknown word (licia)      -- const pidDataPath = '.licia/server/pid.json';
lib/server.js:1:53      - Unknown word (licia)      -- isRunning, kill } = require('licia');
lib/server.js:7:24      - Unknown word (remain)     -- const remain = options.remain;
lib/server.js:7:7       - Unknown word (remain)     -- const remain = options.remain;
lib/server.js:9:13      - Unknown word (remain)     -- const cmd = remain[0];
lib/setup.js:10:21     - Unknown word (licia)      -- execa('npm', ['i', 'licia'], {
lib/setup.js:14:19     - Unknown word (licia)      -- writePkgName('licia');
lib/setup.js:8:15      - Unknown word (licia)      -- writePkgName('licia-src');
lib/spell.js:4:29      - Unknown word (remain)     -- const modName = options.remain[0];
lib/spell.js:7:26      - Unknown word (cspell)     -- await runScript('cspell', [`src/${modName}.js
lib/spell.js:9:26      - Unknown word (cspell)     -- await runScript('cspell', ['src/*.js', 'test
lib/test.js:106:23    - Unknown word (Conf)       -- await genKarmaConf(tests);
lib/test.js:113:44    - Unknown word (licia)      -- runScript('nyc', ['mocha', '.licia/test']);
lib/test.js:115:46    - Unknown word (licia)      -- karma', ['start', '.licia/karma.conf.js']);
lib/test.js:115:58    - Unknown word (conf)       -- start', '.licia/karma.conf.js']);
lib/test.js:123:42    - Unknown word (licia)      -- estOutputPath = resolvePath('.licia/test/' + modName +
lib/test.js:125:15    - Unknown word (Exist)      -- await fileExist(modPath);
lib/test.js:126:15    - Unknown word (Exist)      -- await fileExist(modTestPath);
lib/test.js:12:14     - Unknown word (licia)      -- } = require('licia');
lib/test.js:158:23    - Unknown word (Conf)       -- await genKarmaConf(modName);
lib/test.js:174:44    - Unknown word (licia)      -- runScript('nyc', ['mocha', '.licia/test/' + modName]);
lib/test.js:176:58    - Unknown word (conf)       -- start', '.licia/karma.conf.js']);
lib/test.js:17:9      - Unknown word (Exist)      -- fileExist,
lib/test.js:18:5      - Unknown word (eustia)     -- eustiaBuild,
lib/test.js:206:75    - Unknown word (correct)    -- if ts definition is correct:)`
lib/test.js:253:24    - Unknown word (Conf)       -- async function genKarmaConf(modName) {
lib/test.js:263:17    - Unknown word (rtrim)      -- files = rtrim(files, ', ');
lib/test.js:270:35    - Unknown word (conf)       -- resolvePath('.licia/karma.conf.js'),
lib/test.js:277:20    - Unknown word (sauce)      -- return options.sauce ? 'karma.sauce' : 'karma
lib/test.js:277:35    - Unknown word (sauce)      -- options.sauce ? 'karma.sauce' : 'karma.conf';
lib/test.js:277:51    - Unknown word (conf)       -- karma.sauce' : 'karma.conf';
lib/test.js:313:11    - Unknown word (eustia)     -- await eustiaBuild(buildOpts);
lib/test.js:316:26    - Unknown word (LICIA)      -- data = data.replace(/LICIA_TEST/g, 'true');
lib/test.js:323:34    - Unknown word (eustia)     -- source = source.replace('eustia:///', '');
lib/test.js:61:31     - Unknown word (atomic)     -- eslint-disable require-atomic-updates */
lib/test.js:64:29     - Unknown word (remain)     -- const modName = options.remain[0];
lib/test.js:9:5       - Unknown word (rtrim)      -- rtrim,
lib/tpl/benchmark.tpl:10:19     - Unknown word (benches)    -- benches = map(benches, (bench, key) => {
lib/tpl/benchmark.tpl:10:29     - Unknown word (bench)      -- benches = map(benches, (bench, key) => {
lib/tpl/benchmark.tpl:10:5      - Unknown word (benches)    -- benches = map(benches, (bench
lib/tpl/benchmark.tpl:11:20     - Unknown word (Benchmark)  -- return new Benchmark(bench, { name: key
lib/tpl/benchmark.tpl:11:30     - Unknown word (bench)      -- return new Benchmark(bench, { name: key });
lib/tpl/benchmark.tpl:13:12     - Unknown word (Benchmark)  -- return Benchmark.all(benches).then(results
lib/tpl/benchmark.tpl:13:26     - Unknown word (benches)    -- return Benchmark.all(benches).then(results => console
lib/tpl/benchmark.tpl:13:63     - Unknown word (String)     -- results => console.log(String(results))).catch(e
lib/tpl/benchmark.tpl:13:81     - Unknown word (catch)      -- log(String(results))).catch(e => console.error(e
lib/tpl/benchmark.tpl:1:14      - Unknown word (require)    -- const util = require('./<%=modName%>.util
lib/tpl/benchmark.tpl:4:24      - Unknown word (Benchmark)  -- const Benchmark = util.Benchmark;
lib/tpl/benchmark.tpl:4:7       - Unknown word (Benchmark)  -- const Benchmark = util.Benchmark;
lib/tpl/benchmark.tpl:7:27      - Unknown word (benchmark)  -- console.log('<%=modName%> benchmark');
lib/tpl/benchmark.tpl:9:10      - Unknown word (benchmark)  -- function benchmark(benches) {
lib/tpl/benchmark.tpl:9:20      - Unknown word (benches)    -- function benchmark(benches) {
lib/tpl/demo.tpl:10:3      - Unknown word (body)       -- </body>
lib/tpl/demo.tpl:5:36      - Unknown word (width)      -- "viewport" content="width=device-width, initial
lib/tpl/demo.tpl:5:49      - Unknown word (width)      -- content="width=device-width, initial-scale=1, maximum
lib/tpl/demo.tpl:5:56      - Unknown word (initial)    -- width=device-width, initial-scale=1, maximum-scale
lib/tpl/demo.tpl:5:73      - Unknown word (maximum)    -- width, initial-scale=1, maximum-scale=1, user-scalable
lib/tpl/demo.tpl:8:2       - Unknown word (body)       -- <body>
lib/tpl/karma.conf.tpl:10:14     - Unknown word (karma)      -- 'karma-chrome-launcher',
lib/tpl/karma.conf.tpl:10:20     - Unknown word (chrome)     -- 'karma-chrome-launcher',
lib/tpl/karma.conf.tpl:10:27     - Unknown word (launcher)   -- 'karma-chrome-launcher',
lib/tpl/karma.conf.tpl:11:14     - Unknown word (karma)      -- 'karma-babel-preprocessor'
lib/tpl/karma.conf.tpl:11:20     - Unknown word (babel)      -- 'karma-babel-preprocessor',
lib/tpl/karma.conf.tpl:12:29     - Unknown word (istanbul)   -- 'karma-coverage-istanbul-reporter'
lib/tpl/karma.conf.tpl:12:38     - Unknown word (reporter)   -- karma-coverage-istanbul-reporter'
lib/tpl/karma.conf.tpl:14:43     - Unknown word (istanbul)   -- progress', 'coverage-istanbul'],
lib/tpl/karma.conf.tpl:14:9      - Unknown word (reporters)  -- reporters: ['progress', 'coverage
lib/tpl/karma.conf.tpl:16:32     - Unknown word (babel)      -- 'testUtil/*.js': ['babel']
lib/tpl/karma.conf.tpl:18:17     - Unknown word (Istanbul)   -- coverageIstanbulReporter: {
lib/tpl/karma.conf.tpl:18:25     - Unknown word (Reporter)   -- coverageIstanbulReporter: {
lib/tpl/karma.conf.tpl:19:32     - Unknown word (lcovonly)   -- reports: ['html', 'lcovonly', 'text', 'text-summary
lib/tpl/karma.conf.tpl:1:1       - Unknown word (module)     -- module.exports = function(config
lib/tpl/karma.conf.tpl:20:20     - Unknown word (licia)      -- dir: '.licia/coverage/karma'
lib/tpl/karma.conf.tpl:22:9      - Unknown word (babel)      -- babelPreprocessor: {
lib/tpl/karma.conf.tpl:25:22     - Unknown word (babel)      -- 'babel-plugin-istanbul'
lib/tpl/karma.conf.tpl:25:35     - Unknown word (istanbul)   -- 'babel-plugin-istanbul'
lib/tpl/karma.conf.tpl:30:17     - Unknown word (true)       -- colors: true,
lib/tpl/karma.conf.tpl:30:9      - Unknown word (colors)     -- colors: true,
lib/tpl/karma.conf.tpl:32:20     - Unknown word (false)      -- autoWatch: false,
lib/tpl/karma.conf.tpl:33:21     - Unknown word (Chrome)     -- browsers: ['ChromeHeadless'],
lib/tpl/karma.conf.tpl:33:9      - Unknown word (browsers)   -- browsers: ['ChromeHeadless']
lib/tpl/karma.conf.tpl:34:20     - Unknown word (true)       -- singleRun: true,
lib/tpl/karma.conf.tpl:34:9      - Unknown word (single)     -- singleRun: true,
lib/tpl/karma.conf.tpl:35:22     - Unknown word (Infinity)   -- concurrency: Infinity
lib/tpl/karma.conf.tpl:4:45      - Unknown word (jquery)     -- mocha', 'chai', 'chai-jquery', 'jquery-1.8.3'],
lib/tpl/karma.conf.tpl:4:55      - Unknown word (jquery)     -- chai', 'chai-jquery', 'jquery-1.8.3'],
lib/tpl/karma.conf.tpl:4:9       - Unknown word (frameworks) -- frameworks: ['mocha', 'chai',
lib/tpl/karma.conf.tpl:7:14      - Unknown word (karma)      -- 'karma-mocha',
lib/tpl/karma.conf.tpl:8:14      - Unknown word (karma)      -- 'karma-chai-plugins',
lib/tpl/karma.conf.tpl:9:14      - Unknown word (karma)      -- 'karma-jquery',
lib/tpl/karma.conf.tpl:9:20      - Unknown word (jquery)     -- 'karma-jquery',
lib/tpl/karma.sauce.tpl:10:27     - Unknown word (firefox)    -- browserName: 'firefox'
lib/tpl/karma.sauce.tpl:12:16     - Unknown word (safari)     -- sl_mac_safari: {
lib/tpl/karma.sauce.tpl:13:20     - Unknown word (Sauce)      -- base: 'SauceLabs',
lib/tpl/karma.sauce.tpl:14:27     - Unknown word (safari)     -- browserName: 'safari',
lib/tpl/karma.sauce.tpl:1:1       - Unknown word (module)     -- module.exports = function(config
lib/tpl/karma.sauce.tpl:21:45     - Unknown word (jquery)     -- mocha', 'chai', 'chai-jquery', 'jquery-1.8.3'],
lib/tpl/karma.sauce.tpl:21:55     - Unknown word (jquery)     -- chai', 'chai-jquery', 'jquery-1.8.3'],
lib/tpl/karma.sauce.tpl:21:9      - Unknown word (frameworks) -- frameworks: ['mocha', 'chai',
lib/tpl/karma.sauce.tpl:24:14     - Unknown word (karma)      -- 'karma-sauce-launcher',
lib/tpl/karma.sauce.tpl:24:20     - Unknown word (sauce)      -- 'karma-sauce-launcher',
lib/tpl/karma.sauce.tpl:24:26     - Unknown word (launcher)   -- 'karma-sauce-launcher',
lib/tpl/karma.sauce.tpl:25:14     - Unknown word (karma)      -- 'karma-mocha',
lib/tpl/karma.sauce.tpl:26:14     - Unknown word (karma)      -- 'karma-chai-plugins',
lib/tpl/karma.sauce.tpl:27:14     - Unknown word (karma)      -- 'karma-jquery',
lib/tpl/karma.sauce.tpl:27:20     - Unknown word (jquery)     -- 'karma-jquery',
lib/tpl/karma.sauce.tpl:28:14     - Unknown word (karma)      -- 'karma-chrome-launcher'
lib/tpl/karma.sauce.tpl:28:20     - Unknown word (chrome)     -- 'karma-chrome-launcher'
lib/tpl/karma.sauce.tpl:28:27     - Unknown word (launcher)   -- 'karma-chrome-launcher'
lib/tpl/karma.sauce.tpl:2:15      - Unknown word (Launchers)  -- var customLaunchers = {
lib/tpl/karma.sauce.tpl:30:9      - Unknown word (sauce)      -- sauceLabs: {
lib/tpl/karma.sauce.tpl:31:24     - Unknown word (licia)      -- testName: 'licia'
lib/tpl/karma.sauce.tpl:33:22     - Unknown word (dots)       -- reporters: ['dots', 'saucelabs'],
lib/tpl/karma.sauce.tpl:33:30     - Unknown word (saucelabs)  -- reporters: ['dots', 'saucelabs'],
lib/tpl/karma.sauce.tpl:33:9      - Unknown word (reporters)  -- reporters: ['dots', 'saucelabs
lib/tpl/karma.sauce.tpl:35:17     - Unknown word (true)       -- colors: true,
lib/tpl/karma.sauce.tpl:35:9      - Unknown word (colors)     -- colors: true,
lib/tpl/karma.sauce.tpl:37:15     - Unknown word (Launchers)  -- customLaunchers: customLaunchers,
lib/tpl/karma.sauce.tpl:37:32     - Unknown word (Launchers)  -- customLaunchers: customLaunchers,
lib/tpl/karma.sauce.tpl:38:37     - Unknown word (Launchers)  -- browsers: Object.keys(customLaunchers),
lib/tpl/karma.sauce.tpl:38:9      - Unknown word (browsers)   -- browsers: Object.keys(customLaunchers
lib/tpl/karma.sauce.tpl:39:20     - Unknown word (true)       -- singleRun: true
lib/tpl/karma.sauce.tpl:39:9      - Unknown word (single)     -- singleRun: true
lib/tpl/karma.sauce.tpl:3:12      - Unknown word (chrome)     -- sl_chrome: {
lib/tpl/karma.sauce.tpl:4:20      - Unknown word (Sauce)      -- base: 'SauceLabs',
lib/tpl/karma.sauce.tpl:5:27      - Unknown word (chrome)     -- browserName: 'chrome',
lib/tpl/karma.sauce.tpl:8:12      - Unknown word (firefox)    -- sl_firefox: {
lib/tpl/karma.sauce.tpl:9:20      - Unknown word (Sauce)      -- base: 'SauceLabs',
lib/tpl/karma.test.tpl:2:8       - Unknown word (Helper)     -- <%=testHelper%>
lib/tpl/mocha.test.tpl:1:14      - Unknown word (require)    -- const util = require('../testUtil/<%=utilPath
lib/tpl/mocha.test.tpl:2:14      - Unknown word (require)    -- const chai = require('chai');
lib/tpl/mocha.test.tpl:8:8       - Unknown word (Helper)     -- <%=testHelper%>
lib/tpl/release.test.tpl:1:14      - Unknown word (require)    -- const chai = require('chai');
lib/tpl/release.test.tpl:2:22      - Unknown word (require)    -- const <%=modName%> = require('licia/<%=modName%>
lib/tpl/release.test.tpl:2:31      - Unknown word (licia)      -- modName%> = require('licia/<%=modName%>');
lib/tpl/release.test.tpl:7:8       - Unknown word (Helper)     -- <%=testHelper%>
lib/tpl/test.helper.tpl:10:29     - Unknown word (null)       -- expect(fn.apply(null, test)).to[strictEqual
lib/tpl/test.helper.tpl:10:45     - Unknown word (strict)     -- apply(null, test)).to[strictEqual ? 'equal' : 'eql
lib/tpl/test.helper.tpl:10:51     - Unknown word (Equal)      -- null, test)).to[strictEqual ? 'equal' : 'eql'](
lib/tpl/test.helper.tpl:10:60     - Unknown word (equal)      -- ).to[strictEqual ? 'equal' : 'eql'](
lib/tpl/test.helper.tpl:11:17     - Unknown word (expected)   -- expected
lib/tpl/test.helper.tpl:1:45      - Unknown word (strict)     -- fn = <%=modName%>, { strictEqual = false } = {}
lib/tpl/test.helper.tpl:1:51      - Unknown word (Equal)      -- =modName%>, { strictEqual = false } = {}) {
lib/tpl/test.helper.tpl:1:59      - Unknown word (false)      -- modName%>, { strictEqual = false } = {}) {
lib/tpl/test.helper.tpl:25:44     - Unknown word (strict)     -- fn = <%=modName%>, { strictEqual = false } = {}
lib/tpl/test.helper.tpl:25:50     - Unknown word (Equal)      -- =modName%>, { strictEqual = false } = {}) {
lib/tpl/test.helper.tpl:25:58     - Unknown word (false)      -- modName%>, { strictEqual = false } = {}) {
lib/tpl/test.helper.tpl:2:11      - Unknown word (each)       -- const each = util.each;
lib/tpl/test.helper.tpl:2:23      - Unknown word (each)       -- const each = util.each;
lib/tpl/test.helper.tpl:31:15     - Unknown word (expected)   -- const expected = test.pop();
lib/tpl/test.helper.tpl:32:25     - Unknown word (null)       -- expect(fn.apply(null, test)).to[strictEqual
lib/tpl/test.helper.tpl:32:41     - Unknown word (strict)     -- apply(null, test)).to[strictEqual ? 'equal' : 'eql
lib/tpl/test.helper.tpl:32:47     - Unknown word (Equal)      -- null, test)).to[strictEqual ? 'equal' : 'eql'](
lib/tpl/test.helper.tpl:32:56     - Unknown word (equal)      -- ).to[strictEqual ? 'equal' : 'eql'](
lib/tpl/test.helper.tpl:33:13     - Unknown word (expected)   -- expected
lib/tpl/test.helper.tpl:7:9       - Unknown word (each)       -- each(tests, test => {
lib/tpl/test.helper.tpl:9:19      - Unknown word (expected)   -- const expected = test.pop();
lib/update.js:108:11    - Unknown word (eustia)     -- await eustiaBuild({
lib/update.js:112:19    - Unknown word (licia)      -- output: '.licia/testUtil/doc.js',
lib/update.js:115:11    - Unknown word (eustia)     -- await eustiaDoc({
lib/update.js:116:18    - Unknown word (licia)      -- input: '.licia/testUtil/doc.js',
lib/update.js:118:17    - Unknown word (Licia)      -- title: 'Licia Documentation',
lib/update.js:130:32    - Unknown word (cspell)     -- cSpell = require('../cspell.json');
lib/update.js:132:25    - Unknown word (cspell)     -- await fs.writeFile('cspell.json', JSON.stringify
lib/update.js:133:18    - Unknown word (cspell)     -- console.log('cspell.json updated');
lib/update.js:147:38    - Unknown word (Cmts)       -- comments = extractBlockCmts(data);
lib/update.js:161:20    - Unknown word (Cmts)       -- extractCmts(comments)
lib/update.js:16:14     - Unknown word (licia)      -- } = require('licia');
lib/update.js:170:21    - Unknown word (Cmts)       -- function extractCmts(comments) {
lib/update.js:190:52    - Unknown word (miniprogram) -- 'node', 'browser', 'miniprogram'];
lib/update.js:21:5      - Unknown word (eustia)     -- eustiaBuild,
lib/update.js:22:5      - Unknown word (eustia)     -- eustiaDoc,
lib/update.js:4:17      - Unknown word (Cmts)       -- extractBlockCmts,
lib/util.js:121:52    - Unknown word (rtrim)      -- split('\n'), line => rtrim(' * ' + line));
lib/util.js:136:23    - Unknown word (licia)      -- await rmdir('.licia/' + path);
lib/util.js:143:26    - Unknown word (licia)      -- return await mkdir('.licia/' + path);
lib/util.js:14:14     - Unknown word (licia)      -- } = require('licia');
lib/util.js:15:34     - Unknown word (licia)      -- promisify(require('licia/rmdir'));
lib/util.js:16:34     - Unknown word (licia)      -- promisify(require('licia/mkdir'));
lib/util.js:21:25     - Unknown word (eustia)     -- const eustia = require('eustia');
lib/util.js:21:7      - Unknown word (eustia)     -- const eustia = require('eustia')
lib/util.js:32:13     - Unknown word (Exist)      -- exports.fileExist = async function(path
lib/util.js:33:11     - Unknown word (exist)      -- const exist = await fs.exists(path
lib/util.js:34:10     - Unknown word (exist)      -- if (!exist) throw Error(path +
lib/util.js:34:47     - Unknown word (exist)      -- Error(path + ' does not exist.');
lib/util.js:48:31     - Unknown word (rpad)       -- rpad = (text, len) => rpad(text, len, ' ');
lib/util.js:48:9      - Unknown word (rpad)       -- tplUtil.rpad = (text, len) => rpad
lib/util.js:4:5       - Unknown word (rpad)       -- rpad,
lib/util.js:51:30     - Unknown word (ansi)       -- tplUtil[color] = text => ansiColor[color](text);
lib/util.js:54:33     - Unknown word (eustia)     -- eustiaBuild = promisify(eustia.build);
lib/util.js:54:9      - Unknown word (eustia)     -- exports.eustiaBuild = promisify(eustia
lib/util.js:55:9      - Unknown word (eustia)     -- exports.eustiaDoc = promisify(eustia
lib/util.js:5:5       - Unknown word (ansi)       -- ansiColor,
lib/util.js:7:5       - Unknown word (rtrim)      -- rtrim,
lib/util.js:81:34     - Unknown word (Cmts)       -- comments = extractBlockCmts(data);
lib/util.js:8:17      - Unknown word (Cmts)       -- extractBlockCmts,
nyc.config.js:2:21      - Unknown word (licia)      -- 'temp-dir': './.licia/.nyc_output',
nyc.config.js:3:17      - Unknown word (licia)      -- exclude: ['.licia/test/*.js'],
nyc.config.js:5:23      - Unknown word (licia)      -- 'report-dir': './.licia/coverage/nyc'
package.json:26:11     - Unknown word (sauce)      -- "test:sauce": "licia test -bs -
package.json:26:37     - Unknown word (sauce)      -- : "licia test -bs --sauce",
package.json:2:12      - Unknown word (licia)      -- "name": "licia",
package.json:34:6      - Unknown word (eustia)     -- "eustia",
package.json:37:14     - Unknown word (redhoodsu)  -- "author": "redhoodsu",
package.json:46:36     - Unknown word (scoping)    -- plugin-transform-block-scoping": "^7.5.5",
package.json:49:30     - Unknown word (shorthand)  -- babel/plugin-transform-shorthand-properties": "^7.2.
package.json:4:19      - Unknown word (Useful)     -- "description": "Useful utility collection with
package.json:4:26      - Unknown word (utility)    -- description": "Useful utility collection with zero
package.json:50:39     - Unknown word (literals)   -- plugin-transform-template-literals": "^7.4.4",
package.json:55:6      - Unknown word (cspell)     -- "cspell": "^4.0.55",
package.json:58:6      - Unknown word (eustia)     -- "eustia": "^0.9.0",
package.json:59:6      - Unknown word (eustia)     -- "eustia-component": "^0.0.3
package.json:66:30     - Unknown word (reporter)   -- karma-coverage-istanbul-reporter": "^2.1.1",
package.json:6:21      - Unknown word (licia)      -- "licia": "./bin/licia.js"
package.json:6:6       - Unknown word (licia)      -- "licia": "./bin/licia.js"
package.json:9:11      - Unknown word (licia)      -- "test:licia": "nyc mocha .licia
package.json:9:31      - Unknown word (licia)      -- licia": "nyc mocha .licia/test",
src/$.js:12:15     - Unknown word (eustia)      -- * $btn.html('eustia');
src/$.js:1:26      - Unknown word (manipulator) -- jQuery like style dom manipulator.
src/$.js:48:34     - Unknown word (Plain)       -- css(properties: types.PlainObj<string | number>
src/$.js:51:35     - Unknown word (Plain)       -- attr(attributes: types.PlainObj<string>): $;
src/$.js:54:35     - Unknown word (Plain)       -- data(attributes: types.PlainObj<string>): $;
src/$attr.js:11:15     - Unknown word (more)       -- * Set one or more attributes for the set
src/$attr.js:15:25     - Unknown word (manipulate) -- element|Elements to manipulate|
src/$attr.js:21:28     - Unknown word (manipulate) -- element |Elements to manipulate |
src/$attr.js:30:25     - Unknown word (manipulate) -- element|Elements to manipulate|
src/$attr.js:59:26     - Unknown word (Plain)      -- attributes: types.PlainObj<string>
src/$attr.js:7:25      - Unknown word (manipulate) -- element|Elements to manipulate |
src/$class.js:10:13     - Unknown word (Classes)       -- * |names  |Classes to add        |
src/$class.js:14:14     - Unknown word (whether)       -- * Determine whether any of the matched elements
src/$class.js:14:4      - Unknown word (Determine)     -- * Determine whether any of the matched
src/$class.js:18:25     - Unknown word (manipulate)    -- element|Elements to manipulate |
src/$class.js:1:18      - Unknown word (manipulations) -- /* Element class manipulations.
src/$class.js:24:101    - Unknown word (either)        -- elements, depending on either the class's presence
src/$class.js:24:120    - Unknown word (presence)      -- on either the class's presence or the value of the
src/$class.js:24:25     - Unknown word (more)          -- Add or remove one or more classes from each element
src/$class.js:24:30     - Unknown word (classes)       -- or remove one or more classes from each element in
src/$class.js:24:88     - Unknown word (depending)     -- of matched elements, depending on either the class
src/$class.js:28:25     - Unknown word (manipulate)    -- element|Elements to manipulate|
src/$class.js:33:36     - Unknown word (classes)       -- single class, multiple classes, or all classes from
src/$class.js:33:52     - Unknown word (classes)       -- multiple classes, or all classes from each element in
src/$class.js:37:25     - Unknown word (manipulate)    -- element|Elements to manipulate|
src/$class.js:9:25      - Unknown word (manipulate)    -- element|Elements to manipulate|
src/$css.js:11:15     - Unknown word (more)       -- * Set one or more CSS properties for the
src/$css.js:15:25     - Unknown word (manipulate) -- element|Elements to manipulate|
src/$css.js:21:28     - Unknown word (manipulate) -- element |Elements to manipulate |
src/$css.js:48:26     - Unknown word (Plain)      -- properties: types.PlainObj<string | number>
src/$css.js:52:16     - Unknown word (kebab)      -- _('isStr isObj kebabCase isUndef contain
src/$css.js:7:25      - Unknown word (manipulate) -- element|Elements to manipulate |
src/$css.js:98:56     - Unknown word (kebab)      -- contain(cssNumProps, kebabCase(key));
src/$data.js:1:22      - Unknown word (adds)       -- * Wrapper of $attr, adds data- prefix to keys
src/$data.js:1:4       - Unknown word (Wrapper)    -- /* Wrapper of $attr, adds data
src/$data.js:20:26     - Unknown word (Plain)      -- attributes: types.PlainObj<string>
src/$data.js:25:29     - Unknown word (vars)       -- eslint-disable no-unused-vars */
src/$data.js:5:29      - Unknown word (eustia)     -- data('#test', 'attr1', 'eustia');
src/$event.js:1:19      - Unknown word (certain)    -- /* bind events to certain dom elements.
src/$insert.js:1:19      - Unknown word (different)  -- /* Insert html on different position.
src/$insert.js:21:25     - Unknown word (manipulate) -- element|Elements to manipulate |
src/$insert.js:27:34     - Unknown word (licia)      -- before('#test', '<div>licia</div>');
src/$insert.js:28:15     - Unknown word (licia)      -- * // -> <div>licia</div><div id="test"
src/$insert.js:29:33     - Unknown word (licia)      -- after('#test', '<div>licia</div>');
src/$insert.js:30:60     - Unknown word (licia)      -- mark"></div></div><div>licia</div>
src/$insert.js:31:35     - Unknown word (licia)      -- prepend('#test', '<div>licia</div>');
src/$property.js:11:30     - Unknown word (descendants) -- elements, including their descendants, or set the text contents
src/$property.js:21:29     - Unknown word (licia)       -- property.html('#test', 'licia');
src/$property.js:22:35     - Unknown word (licia)       -- html('#test'); // -> licia
src/Benchmark.js:14:40     - Unknown word (uncertainty) -- Time needed to reduce uncertainty |
src/Benchmark.js:173:20    - Unknown word (variance)    -- result.variance = reduce(sample, varOf
src/Benchmark.js:174:49    - Unknown word (variance)    -- deviation = Math.sqrt(result.variance);
src/Benchmark.js:228:13    - Unknown word (benches)     -- all(benches, options) {
src/Benchmark.js:231:18    - Unknown word (benches)     -- each(benches, bench => {
src/Benchmark.js:231:27    - Unknown word (bench)       -- each(benches, bench => {
src/Benchmark.js:232:23    - Unknown word (bench)       -- if (!(bench instanceof exports)
src/Benchmark.js:233:21    - Unknown word (bench)       -- bench = new exports(bench
src/Benchmark.js:233:41    - Unknown word (bench)       -- bench = new exports(bench, options);
src/Benchmark.js:235:31    - Unknown word (bench)       -- promises.push(bench.run());
src/Benchmark.js:26:22     - Unknown word (benchmarks)  -- * [static] Run some benchmarks.
src/Benchmark.js:73:12     - Unknown word (variance)    -- * variance: number;
src/Benchmark.js:86:12     - Unknown word (benches)     -- * benches: Array<types.AnyFn
src/Blob.js:1:29      - Unknown word (otherwise)  -- Blob when available, otherwise BlobBuilder.
src/BloomFilter.js:1:4       - Unknown word (Bloom)      -- /* Bloom filter implementation
src/BloomFilter.js:25:39     - Unknown word (definitely) -- if probably, false if definitely not|
src/BloomFilter.js:29:10     - Unknown word (bloom)      -- * const bloom = new BloomFilter(2
src/BloomFilter.js:29:22     - Unknown word (Bloom)      -- * const bloom = new BloomFilter(256, 3);
src/BloomFilter.js:30:15     - Unknown word (Bruce)      -- * bloom.add('Bruce Wayne');
src/BloomFilter.js:30:21     - Unknown word (Wayne)      -- * bloom.add('Bruce Wayne');
src/BloomFilter.js:30:4      - Unknown word (bloom)      -- * bloom.add('Bruce Wayne');
src/BloomFilter.js:31:15     - Unknown word (Clark)      -- * bloom.add('Clark Kent');
src/BloomFilter.js:31:21     - Unknown word (Kent)       -- * bloom.add('Clark Kent');
src/BloomFilter.js:31:4      - Unknown word (bloom)      -- * bloom.add('Clark Kent');
src/BloomFilter.js:32:16     - Unknown word (Clark)      -- * bloom.test('Clark Kent'); // -> true
src/BloomFilter.js:32:22     - Unknown word (Kent)       -- * bloom.test('Clark Kent'); // -> true
src/BloomFilter.js:32:4      - Unknown word (bloom)      -- * bloom.test('Clark Kent');
src/BloomFilter.js:33:16     - Unknown word (Bruce)      -- * bloom.test('Bruce Wayne'); // -> true
src/BloomFilter.js:33:22     - Unknown word (Wayne)      -- * bloom.test('Bruce Wayne'); // -> true
src/BloomFilter.js:33:4      - Unknown word (bloom)      -- * bloom.test('Bruce Wayne')
src/BloomFilter.js:34:16     - Unknown word (Tony)       -- * bloom.test('Tony Stark'); // -> false
src/BloomFilter.js:34:21     - Unknown word (Stark)      -- * bloom.test('Tony Stark'); // -> false
src/BloomFilter.js:43:25     - Unknown word (Bloom)      -- export declare class BloomFilter {
src/Caseless.js:11:17     - Unknown word (preserved)  -- * Get key with preserved casing.
src/Caseless.js:15:12     - Unknown word (Caseless)   -- * |key   |Caseless key|
src/Caseless.js:1:32      - Unknown word (caring)     -- object props without caring about letter case.
src/Caseless.js:1:39      - Unknown word (about)      -- props without caring about letter case.
src/Caseless.js:24:10     - Unknown word (Caseless)   -- * |key |Caseless key|
src/Caseless.js:33:12     - Unknown word (Caseless)   -- * |key   |Caseless key      |
src/Caseless.js:42:10     - Unknown word (Caseless)   -- * |key |Caseless key|
src/Caseless.js:46:14     - Unknown word (whether)    -- * Determine whether target object has given
src/Caseless.js:46:4      - Unknown word (Determine)  -- * Determine whether target object
src/Caseless.js:50:12     - Unknown word (Caseless)   -- * |key   |Caseless key         |
src/Channel.js:105:38    - Unknown word (cannot)           -- throw new Error('Channel cannot be connected to itself
src/Channel.js:105:61    - Unknown word (itself)           -- cannot be connected to itself.');
src/Channel.js:13:15     - Unknown word (another)          -- * Connect to another channel.
src/Channel.js:1:4       - Unknown word (Interconnectable) -- /* Interconnectable Message channel.
src/Channel.js:21:20     - Unknown word (another)          -- * Disconnect from another channel.
src/Channel.js:29:39     - Unknown word (another)          -- channel is connected to another channel.
src/Channel.js:34:13     - Unknown word (Whether)          -- * |return |Whether it's connected|
src/Class.js:16:8      - Unknown word (introduce)  -- * introduce: function() {
src/Class.js:21:10     - Unknown word (Student)    -- * const Student = People.extend(
src/Class.js:23:33     - Unknown word (Student)    -- initialize: function Student(name, age, school)
src/Class.js:28:12     - Unknown word (introduce)  -- * introduce: function() {
src/Class.js:30:44     - Unknown word (introduce)  -- this.callSuper(People, 'introduce') +
src/Class.js:31:26     - Unknown word (study)      -- '\n I study at ' +
src/Class.js:39:38     - Unknown word (Student)    -- return obj instanceof Student;
src/Class.js:44:18     - Unknown word (Student)    -- * const a = new Student('allen', 17, 'Hogwarts
src/Class.js:44:40     - Unknown word (Hogwarts)   -- Student('allen', 17, 'Hogwarts');
src/Class.js:45:57     - Unknown word (study)      -- 17 years old. \n I study at Hogwarts.'
src/Class.js:45:6      - Unknown word (introduce)  -- * a.introduce(); // -> 'I am allen
src/Class.js:45:66     - Unknown word (Hogwarts)   -- years old. \n I study at Hogwarts.'
src/Class.js:46:4      - Unknown word (Student)    -- * Student.is(a); // -> true
src/Class.js:60:40     - Unknown word (statics)    -- extend(methods: any, statics: any): IConstructor
src/Class.js:63:19     - Unknown word (statics)    -- * static statics(statics: any): IConstructor
src/Class.js:63:27     - Unknown word (statics)    -- static statics(statics: any): IConstructor
src/Class.js:67:48     - Unknown word (statics)    -- Class(methods: any, statics?: any): Class.IConstructor
src/Class.js:6:5       - Unknown word (statics)    -- * [statics|Static methods
src/Class.js:70:36     - Unknown word (Mini)       -- toArr inherits safeGet isMiniProgram types');
src/Class.js:88:12     - Unknown word (Mini)       -- if (!isMiniProgram) {
src/Color.js:1:10      - Unknown word (converter)  -- /* Color converter.
src/Delegator.js:46:10     - Unknown word (delegator)  -- * const delegator = new Delegator(host
src/Delegator.js:46:26     - Unknown word (Delegator)  -- const delegator = new Delegator(host, 'target');
src/Delegator.js:47:4      - Unknown word (delegator)  -- * delegator
src/Delegator.js:74:25     - Unknown word (Delegator)  -- export declare class Delegator {
src/Delegator.js:76:47     - Unknown word (Delegator)  -- string, target?: string): Delegator;
src/Delegator.js:77:47     - Unknown word (Delegator)  -- string, target?: string): Delegator;
src/Delegator.js:78:47     - Unknown word (Delegator)  -- string, target?: string): Delegator;
src/Dispatcher.js:17:4      - Unknown word (dispatcher) -- * dispatcher.dispatch({
src/Dispatcher.js:1:9       - Unknown word (dispatcher) -- /* Flux dispatcher.
src/Dispatcher.js:27:25     - Unknown word (Dispatcher) -- export declare class Dispatcher {
src/Dispatcher.js:32:10     - Unknown word (Dispatching) -- * isDispatching(): boolean;
src/Dispatcher.js:39:26     - Unknown word (Dispatcher)  -- initialize: function Dispatcher() {
src/Dispatcher.js:41:17     - Unknown word (Dispatching) -- this._isDispatching = false;
src/Dispatcher.js:42:17     - Unknown word (Handled)     -- this._isHandled = {};
src/Dispatcher.js:46:20     - Unknown word (Dispatching) -- this._startDispatching(payload);
src/Dispatcher.js:53:19     - Unknown word (Dispatching) -- this._stopDispatching();
src/Dispatcher.js:73:7      - Unknown word (Dispatching) -- isDispatching() {
src/Dispatcher.js:79:21     - Unknown word (Handled)     -- this._isHandled[id] = false;
src/Dispatcher.js:7:10      - Unknown word (dispatcher) -- * const dispatcher = new Dispatcher();
src/Dispatcher.js:7:27      - Unknown word (Dispatcher) -- const dispatcher = new Dispatcher();
src/Dispatcher.js:92:17     - Unknown word (Handled)     -- this._isHandled[id] = true;
src/Dispatcher.js:9:4       - Unknown word (dispatcher) -- * dispatcher.register(function(payload
src/Emitter.js:1:30      - Unknown word (provides)   -- emitter class which provides observer pattern.
src/Emitter.js:51:24     - Unknown word (licia)      -- event.emit('test', 'licia'); // Logs out 'licia
src/Emitter.js:51:46     - Unknown word (licia)      -- licia'); // Logs out 'licia'.
src/Emitter.js:9:4       - Unknown word (Unbind)     -- * Unbind event.
src/Enum.js:15:10     - Unknown word (importance) -- * const importance = new Enum([
src/Enum.js:17:9      - Unknown word (TRIVIAL)    -- * 'TRIVIAL',
src/Enum.js:19:9      - Unknown word (IMPORTANT)  -- * 'IMPORTANT',
src/Enum.js:23:16     - Unknown word (importance) -- * if (val === importance.CRITICAL) {
src/FileBlobStore.js:113:15    - Unknown word (dump)       -- const dump = this._getDump();
src/FileBlobStore.js:113:31    - Unknown word (Dump)       -- const dump = this._getDump();
src/FileBlobStore.js:114:43    - Unknown word (dump)       -- blobToStore = Buffer.concat(dump[0]);
src/FileBlobStore.js:115:43    - Unknown word (dump)       -- mapToStore = JSON.stringify(dump[1]);
src/FileBlobStore.js:12:35     - Unknown word (licia)      -- name', Buffer.from('licia'));
src/FileBlobStore.js:145:9     - Unknown word (Dump)       -- _getDump() {
src/FileBlobStore.js:150:18    - Unknown word (dump)       -- function dump(buf, key) {
src/FileBlobStore.js:157:19    - Unknown word (dump)       -- this.each(dump);
src/FileBlobStore.js:23:47     - Unknown word (Plain)      -- string, data?: types.PlainObj<Buffer>);
src/FileBlobStore.js:25:26     - Unknown word (Plain)      -- set(values: types.PlainObj<Buffer>): void;
src/FileBlobStore.js:27:35     - Unknown word (Plain)      -- keys: string[]): types.PlainObj<Buffer>;
src/FileBlobStore.js:3:4       - Unknown word (Most)       -- * Most api is the same as Store
src/FileBlobStore.js:3:42      - Unknown word (except)     -- same as Store module, except only buffer is accepted
src/FileBlobStore.js:48:13     - Unknown word (stored)     -- let storedBlob = Buffer.alloc(
src/FileBlobStore.js:49:13     - Unknown word (stored)     -- let storedBlobMap = {};
src/FileBlobStore.js:52:17     - Unknown word (stored)     -- storedBlob = fs.readFileSync
src/FileBlobStore.js:53:17     - Unknown word (stored)     -- storedBlobMap = JSON.parse
src/FileBlobStore.js:55:17     - Unknown word (stored)     -- storedBlobMap = {};
src/FileStore.js:13:23     - Unknown word (licia)      -- store.set('name', 'licia');
src/HashTable.js:43:27     - Unknown word (redhoodsu)  -- hashTable.set('name', 'redhoodsu');
src/HashTable.js:44:34     - Unknown word (redhoodsu)  -- get('name'); // -> 'redhoodsu'
src/Heap.js:105:6     - Unknown word (heapify)    -- _heapifyDown(idx) {
src/Heap.js:111:17    - Unknown word (smaller)    -- let smallerIdx = leftChildIdx(idx
src/Heap.js:115:47    - Unknown word (smaller)    -- rightChildIdx], data[smallerIdx]) < 0
src/Heap.js:117:17    - Unknown word (smaller)    -- smallerIdx = rightChild;
src/Heap.js:119:37    - Unknown word (smaller)    -- cmp(data[idx], data[smallerIdx]) < 0) {
src/Heap.js:11:10     - Unknown word (Comparator) -- * |cmp |Comparator|
src/Heap.js:122:33    - Unknown word (smaller)    -- swap(data, idx, smallerIdx);
src/Heap.js:30:8      - Unknown word (peek)       -- * ### peek
src/Heap.js:59:8      - Unknown word (peek)       -- * peek(): any;
src/Heap.js:66:49     - Unknown word (Comparator) -- Heap(cmp = isSorted.defComparator) {
src/Heap.js:77:15     - Unknown word (heapify)    -- this._heapifyUp(this.size - 1);
src/Heap.js:86:19     - Unknown word (heapify)    -- this._heapifyDown(0);
src/Heap.js:90:5      - Unknown word (peek)       -- peek() {
src/Heap.js:95:6      - Unknown word (heapify)    -- _heapifyUp(idx) {
src/HeapSnapshot.js:104:23    - Unknown word (detachedness) -- case 'detachedness':
src/HeapSnapshot.js:13:8      - Unknown word (edges)       -- * ### edges
src/HeapSnapshot.js:15:11     - Unknown word (edges)       -- * Parsed edges.
src/HeapSnapshot.js:1:21      - Unknown word (manipulator) -- /* V8 heap snapshot manipulator.
src/HeapSnapshot.js:36:8      - Unknown word (edges)       -- * edges: LinkedList;
src/HeapSnapshot.js:50:14     - Unknown word (edges)       -- this.edges = new LinkedList();
src/HeapSnapshot.js:62:24     - Unknown word (edges)       -- const { nodes, edges, strings } = profile
src/I18n.js:41:12     - Unknown word (welcome)    -- * welcome: 'Hello, {{name}}!'
src/I18n.js:47:12     - Unknown word (welcome)    -- * welcome: '你好，{{name}}！'
src/I18n.js:55:12     - Unknown word (welcome)    -- * i18n.t('welcome', { name: 'licia' }
src/I18n.js:55:31     - Unknown word (licia)      -- 'welcome', { name: 'licia' }); // -> 'Hello, licia
src/I18n.js:55:56     - Unknown word (licia)      -- licia' }); // -> 'Hello, licia!'
src/I18n.js:67:49     - Unknown word (Plain)      -- string, langs: types.PlainObj<any>);
src/I18n.js:68:40     - Unknown word (Plain)      -- string, lang: types.PlainObj<any>): void;
src/I18n.js:69:48     - Unknown word (Plain)      -- string[], data?: types.PlainObj<any>): string;
src/JsonTransformer.js:18:52     - Unknown word (replaced)   -- whole source object is replaced by val.
src/JsonTransformer.js:39:4      - Unknown word (Shortcut)   -- * Shortcut for array map.
src/JsonTransformer.js:49:4      - Unknown word (Shortcut)   -- * Shortcut for array filter.
src/JsonTransformer.js:53:23     - Unknown word (several)    -- Compute value from several object values.
src/JsonTransformer.js:75:12     - Unknown word (lastname)   -- * lastname: 'Su',
src/JsonTransformer.js:76:12     - Unknown word (firstname)  -- * firstname: 'RedHood'
src/JsonTransformer.js:76:27     - Unknown word (Hood)       -- firstname: 'RedHood'
src/JsonTransformer.js:7:28      - Unknown word (manipulate) -- data={}|Json object to manipulate|
src/JsonTransformer.js:83:22     - Unknown word (firstname)  -- * return author.firstname + author.lastname;
src/JsonTransformer.js:83:41     - Unknown word (lastname)   -- author.firstname + author.lastname;
src/JsonTransformer.js:86:74     - Unknown word (Hood)       -- price: 10}], author: 'RedHoodSu', count: 1}
src/LinkedList.js:153:40    - Unknown word (belong)     -- Error('Node does not belong to this list');
src/LinkedList.js:1:4       - Unknown word (Doubly)     -- /* Doubly-linked list implementation
src/LinkedList.js:47:29     - Unknown word (passes)     -- return|First value that passes predicate|
src/LocalStore.js:14:34     - Unknown word (licia)      -- store = new LocalStore('licia');
src/LocalStore.js:15:23     - Unknown word (licia)      -- store.set('name', 'licia');
src/LocalStore.js:1:17      - Unknown word (wrapper)    -- /* LocalStorage wrapper.
src/Logger.js:123:47    - Unknown word (formatter)  -- apply(console, this.formatter(type, argList));
src/Logger.js:32:31     - Unknown word (licia)      -- logger = new Logger('licia', Logger.level.ERROR
src/Logger.js:36:11     - Unknown word (formatter)  -- * logger.formatter = function(type, argList
src/Logger.js:58:8      - Unknown word (formatter)  -- * formatter(type: string, argList
src/Logger.js:94:9      - Unknown word (formatter)  -- formatter(type, argList) {
src/Lru.js:51:23     - Unknown word (licia)      -- cache.set('test', 'licia');
src/Lru.js:52:30     - Unknown word (licia)      -- get('test'); // -> 'licia'
src/MediaQuery.js:25:9      - Unknown word (unmatch)    -- * #### unmatch
src/MediaQuery.js:27:4      - Unknown word (Opposite)   -- * Opposite of match.
src/MediaQuery.js:59:51     - Unknown word (unmatch)    -- isMatch() ? 'match' : 'unmatch');
src/PriorityQueue.js:11:11     - Unknown word (Comparator) -- * |cmp  |Comparator|
src/PriorityQueue.js:28:28     - Unknown word (highest)    -- Retrieve and remove the highest priority item of the
src/PriorityQueue.js:30:8      - Unknown word (peek)       -- * ### peek
src/PriorityQueue.js:47:16     - Unknown word (orange)     -- * value: 'orange'
src/PriorityQueue.js:64:8      - Unknown word (peek)       -- * peek(): any;
src/PriorityQueue.js:71:58     - Unknown word (Comparator) -- iorityQueue(cmp = isSorted.defComparator) {
src/PriorityQueue.js:91:5      - Unknown word (peek)       -- peek() {
src/PriorityQueue.js:92:27     - Unknown word (peek)       -- return this._heap.peek();
src/Promise.js:105:31    - Unknown word (remaining)   -- if (--remaining === 0) resolve(args
src/Promise.js:146:5     - Unknown word (finale)      -- finale(self);
src/Promise.js:152:44    - Unknown word (cannot)      -- TypeError('A promise cannot be resolved with itself
src/Promise.js:152:68    - Unknown word (itself)      -- cannot be resolved with itself');
src/Promise.js:157:24    - Unknown word (finale)      -- return finale(self);
src/Promise.js:163:21    - Unknown word (fulfill)     -- self._state.fulfill(val);
src/Promise.js:164:9     - Unknown word (finale)      -- finale(self);
src/Promise.js:170:10    - Unknown word (finale)      -- function finale(self) {
src/Promise.js:171:33    - Unknown word (deferreds)   -- let i = 0, len = self._deferreds.length; i < len; i+
src/Promise.js:172:28    - Unknown word (deferreds)   -- handle(self, self._deferreds[i]);
src/Promise.js:175:11    - Unknown word (deferreds)   -- self._deferreds = null;
src/Promise.js:179:28    - Unknown word (adopted)     -- while (self._state.is('adopted')) self = self._value
src/Promise.js:181:49    - Unknown word (deferreds)   -- pending')) return self._deferreds.push(deferred);
src/Promise.js:183:11    - Unknown word (handled)     -- self._handled = true;
src/Promise.js:1:4       - Unknown word (Lightweight) -- /* Lightweight Promise implementation
src/Promise.js:3:14      - Unknown word (spec)        -- * [Promises spec](https://github.com
src/Promise.js:42:47     - Unknown word (must)        -- TypeError('Promises must be constructed via new
src/Promise.js:42:55     - Unknown word (constructed) -- TypeError('Promises must be constructed via new');
src/Promise.js:48:17     - Unknown word (fulfill)     -- fulfill: { from: 'pending',
src/Promise.js:50:48     - Unknown word (adopted)     -- from: 'pending', to: 'adopted' }
src/Promise.js:52:22     - Unknown word (fulfill)     -- .on('fulfill', assignVal)
src/Promise.js:60:19     - Unknown word (handled)     -- this._handled = false;
src/Promise.js:62:19     - Unknown word (deferreds)   -- this._deferreds = [];
src/Promise.js:84:21     - Unknown word (remaining)   -- let remaining = args.length;
src/PseudoMap.js:22:18     - Unknown word (LICIA)      -- if (root.Map && !LICIA_TEST) {
src/Queue.js:24:8      - Unknown word (peek)       -- * ### peek
src/Queue.js:26:31     - Unknown word (removing)   -- the first item without removing it.
src/Queue.js:50:10     - Unknown word (peek)       -- * queue.peek(); // -> 3
src/Queue.js:64:8      - Unknown word (peek)       -- * peek(): any;
src/Queue.js:92:5      - Unknown word (peek)       -- peek() {
src/QuickLru.js:10:23     - Unknown word (licia)      -- cache.set('test', 'licia');
src/QuickLru.js:11:30     - Unknown word (licia)      -- get('test'); // -> 'licia'
src/QuickLru.js:3:21      - Unknown word (hashlru)    -- * Inspired by the [hashlru algorithm](https://github
src/QuickLru.js:3:4       - Unknown word (Inspired)   -- * Inspired by the [hashlru algorithm
src/Readiness.js:1:4       - Unknown word (Readiness)  -- /* Readiness manager.
src/Readiness.js:32:10     - Unknown word (readiness)  -- * const readiness = new Readiness();
src/Readiness.js:32:26     - Unknown word (Readiness)  -- const readiness = new Readiness();
src/Readiness.js:33:4      - Unknown word (readiness)  -- * readiness.ready('serverCreated
src/Readiness.js:36:4      - Unknown word (readiness)  -- * readiness.signal('serverCreated
src/Readiness.js:37:4      - Unknown word (readiness)  -- * readiness.isReady('serverCreated
src/Readiness.js:46:25     - Unknown word (Readiness)  -- export declare class Readiness {
src/Readiness.js:56:26     - Unknown word (Readiness)  -- initialize: function Readiness() {
src/Readiness.js:58:15     - Unknown word (resolves)   -- this._resolves = {};
src/Readiness.js:81:15     - Unknown word (resolves)   -- const resolves = this._resolves;
src/Readiness.js:81:32     - Unknown word (resolves)   -- const resolves = this._resolves;
src/Readiness.js:87:21     - Unknown word (resolves)   -- resolves[task] = resolve;
src/Readiness.js:94:26     - Unknown word (resolves)   -- resolve: resolves[task],
src/ReduceStore.js:108:15    - Unknown word (Mutate)       -- _ensureCanMutateNextListeners() {
src/ReduceStore.js:25:19     - Unknown word (representing) -- * |action|Object representing changes|
src/ReduceStore.js:60:20     - Unknown word (reducer)      -- * constructor(reducer: types.AnyFn, initialState
src/ReduceStore.js:70:38     - Unknown word (reducer)      -- function ReduceStore(reducer, initialState) {
src/ReduceStore.js:71:15     - Unknown word (reducer)      -- this._reducer = reducer;
src/ReduceStore.js:71:25     - Unknown word (reducer)      -- this._reducer = reducer;
src/ReduceStore.js:79:24     - Unknown word (Mutate)       -- this._ensureCanMutateNextListeners();
src/ReduceStore.js:7:5       - Unknown word (reducer)    -- * |reducer |Function returns
src/ReduceStore.js:89:28     - Unknown word (Mutate)       -- self._ensureCanMutateNextListeners();
src/ResizeSensor.js:36:29     - Unknown word (LICIA)      -- root.ResizeObserver && !LICIA_TEST) {
src/Select.js:11:8      - Unknown word (desdendants) -- * Get desdendants of current matched elements
src/Select.js:1:11      - Unknown word (wrapper)    -- /* Simple wrapper of querySelectorAll
src/Select.js:1:61      - Unknown word (easier)     -- to make dom selection easier.
src/Select.js:29:11     - Unknown word (Manipulate)  -- * // Manipulate dom nodes
src/Semaphore.js:11:37     - Unknown word (bigger)       -- execute until counter is bigger than 0.
src/Semaphore.js:19:16     - Unknown word (waiter)       -- * Wake up one waiter if any.
src/Semaphore.js:1:10      - Unknown word (simultaneous) -- /* Limit simultaneous access to a resource
src/SessionStore.js:14:36     - Unknown word (licia)      -- = new SessionStore('licia');
src/SessionStore.js:15:23     - Unknown word (licia)      -- store.set('name', 'licia');
src/SessionStore.js:1:19      - Unknown word (wrapper)    -- /* SessionStorage wrapper.
src/SingleEmitter.js:41:16     - Unknown word (licia)      -- * event.emit('licia'); // Logs out 'licia
src/SingleEmitter.js:41:38     - Unknown word (licia)      -- licia'); // Logs out 'licia'.
src/Socket.js:17:40     - Unknown word (possible)   -- Try to reconnect if possible|
src/Socket.js:1:19      - Unknown word (wrapper)    -- /* Tiny WebSocket wrapper.
src/Socket.js:1:4       - Unknown word (Tiny)       -- /* Tiny WebSocket wrapper.
src/Socket.js:38:23     - Unknown word (called)     -- Connect WebSocket, called when initialized.
src/Socket.js:38:35     - Unknown word (initialized) -- WebSocket, called when initialized.
src/Stack.js:24:8      - Unknown word (peek)       -- * ### peek
src/Stack.js:26:30     - Unknown word (removing)   -- the last item without removing it.
src/Stack.js:60:8      - Unknown word (peek)       -- * peek(): any;
src/Stack.js:88:5      - Unknown word (peek)       -- peek() {
src/State.js:34:33     - Unknown word (eustia)     -- console.log(src); // -> 'eustia'
src/State.js:39:16     - Unknown word (eustia)     -- * state.play('eustia');
src/Store.js:155:34    - Unknown word (overwritten) -- methods exists to be overwritten.
src/Store.js:26:29     - Unknown word (whenever)   -- emit a change event whenever is called.
src/Store.js:26:41     - Unknown word (called)     -- change event whenever is called.
src/Store.js:67:31     - Unknown word (licia)      -- set('user', { name: 'licia' });
src/Store.js:68:35     - Unknown word (licia)      -- user').name; // -> 'licia'
src/Store.js:74:23     - Unknown word (whenever)   -- // It triggers whenever set is called.
src/Store.js:74:39     - Unknown word (called)     -- triggers whenever set is called.
src/Trace.js:1:11      - Unknown word (manipulate) -- /* Parse, manipulate and generate chrome
src/Tracing.js:108:63    - Unknown word (intersect)  -- Stack map trim isEmpty intersect convertBase'
src/Tracing.js:1:4       - Unknown word (Easily)     -- /* Easily create chrome tracing
src/Tracing.js:20:10     - Unknown word (recording)  -- * Start recording.
src/Tracing.js:214:41    - Unknown word (Nestable)   -- addEvent(cat, name, Phase.NestableAsyncBegin, args, {
src/Tracing.js:231:41    - Unknown word (Nestable)   -- addEvent(cat, name, Phase.NestableAsyncEnd, args, {
src/Tracing.js:235:5     - Unknown word (instant)    -- instant(cat, name, scope =
src/Tracing.js:236:41    - Unknown word (Instant)    -- addEvent(cat, name, Phase.Instant, args, {
src/Tracing.js:250:25    - Unknown word (intersect)  -- if (isEmpty(intersect(catArr, targetCat))
src/Tracing.js:277:5     - Unknown word (Instant)    -- Instant: 'I',
src/Tracing.js:278:5     - Unknown word (Nestable)   -- NestableAsyncBegin: 'b',
src/Tracing.js:279:5     - Unknown word (Nestable)   -- NestableAsyncEnd: 'e',
src/Tracing.js:28:9      - Unknown word (recording)  -- * Stop recording and get result events
src/Tracing.js:52:8      - Unknown word (instant)    -- * ### instant
src/Tracing.js:54:11     - Unknown word (instant)    -- * Record instant event.
src/Tracing.js:97:8      - Unknown word (instant)    -- * instant(
src/Trie.js:35:14     - Unknown word (carpet)     -- * trie.add('carpet');
src/Trie.js:38:14     - Unknown word (cart)       -- * trie.add('cart');
src/Trie.js:40:17     - Unknown word (carpet)     -- * trie.remove('carpet');
src/Trie.js:41:14     - Unknown word (carpet)     -- * trie.has('carpet'); // -> false
src/Trie.js:42:38     - Unknown word (cart)       -- car'); // -> ['car', 'cart']
src/Trie.js:69:15     - Unknown word (edges)      -- const edges = this._edges;
src/Trie.js:69:29     - Unknown word (edges)      -- const edges = this._edges;
src/Trie.js:74:24     - Unknown word (edges)      -- let next = edges[node][edge];
src/Trie.js:82:21     - Unknown word (edges)      -- edges.push({});
src/Trie.js:84:17     - Unknown word (edges)      -- edges[node][edge] = next;
src/Tween.js:16:17     - Unknown word (Tween)      -- * |duration   |Tween duration  |
src/Tween.js:17:5      - Unknown word (ease)       -- * |ease |Easing function
src/Tween.js:1:4       - Unknown word (Tween)      -- /* Tween engine for JavaScript
src/Tween.js:43:10     - Unknown word (tween)      -- * const tween = new Tween(pos);
src/Tween.js:43:22     - Unknown word (Tween)      -- * const tween = new Tween(pos);
src/Tween.js:44:4      - Unknown word (tween)      -- * tween
src/Tween.js:51:4      - Unknown word (tween)      -- * tween.to({ x: 100, y: 100
src/Tween.js:59:25     - Unknown word (Tween)      -- export declare class Tween extends Emitter {
src/Tween.js:61:42     - Unknown word (ease)       -- duration?: number, ease?: string | Function
src/Tween.js:61:69     - Unknown word (Tween)      -- string | Function): Tween;
src/Tween.js:83:15     - Unknown word (ease)       -- this._ease = easing['linear'];
src/Tween.js:89:25     - Unknown word (ease)       -- to(props, duration, ease) {
src/Tween.js:94:9      - Unknown word (ease)       -- ease = ease || this._ease
src/Tween.js:9:20      - Unknown word (tween)      -- * |obj |Values to tween|
src/Url.js:101:30    - Unknown word (Plain)       -- setQuery(query: types.PlainObj<string | number>
src/Url.js:1:15      - Unknown word (manipulator) -- /* Simple url manipulator.
src/Url.js:56:30     - Unknown word (indicates)   -- slashes |A boolean which indicates whether the protocol
src/Url.js:56:40     - Unknown word (whether)     -- boolean which indicates whether the protocol is followed
src/Url.js:56:64     - Unknown word (followed)    -- whether the protocol is followed by two forward slashes
src/Url.js:62:62     - Unknown word (pound)       -- the URL including the pound-sign (#)
src/Validator.js:16:36     - Unknown word (means)      -- Validation result, true means ok|
src/Validator.js:46:32     - Unknown word (licia)      -- validator.validate({ test: 'licia' }); // -> true
src/Validator.js:55:35     - Unknown word (Plain)      -- constructor(options: types.PlainObj<any>);
src/Wrr.js:1:19      - Unknown word (Robin)      -- /* Weighted Round Robin implementation.
src/Wrr.js:1:4       - Unknown word (Weighted)   -- /* Weighted Round Robin implementation
src/Wrr.js:72:15     - Unknown word (peers)      -- this._peers = [];
src/Wrr.js:75:15     - Unknown word (peers)      -- const peers = this._peers;
src/Wrr.js:75:29     - Unknown word (peers)      -- const peers = this._peers;
src/Wrr.js:79:26     - Unknown word (peers)      -- const peer = peers[i];
src/Wrr.js:87:9      - Unknown word (peers)      -- peers.push({
src/abbrev.js:10:4      - Unknown word (abbrev)        -- * abbrev('lina', 'luna');
src/abbrev.js:19:28     - Unknown word (abbrev)        -- export declare function abbrev(...names: string[])
src/abbrev.js:19:62     - Unknown word (Plain)         -- names: string[]): types.PlainObj<string>;
src/abbrev.js:1:32      - Unknown word (abbreviations) -- Calculate the set of unique abbreviations for a given set of strings
src/abbrev.js:1:4       - Unknown word (Calculate)  -- /* Calculate the set of unique abbreviatio
src/abbrev.js:25:36     - Unknown word (Comparator)    -- names.sort(isSorted.defComparator);
src/abbrev.js:37:13     - Unknown word (abbrev)        -- let abbrev = '';
src/abbrev.js:40:13     - Unknown word (abbrev)        -- abbrev += str[j];
src/abbrev.js:47:25     - Unknown word (abbrev)        -- idleMap[abbrev] = str;
src/abbrev.js:6:12      - Unknown word (Abbreviation)  -- * |return|Abbreviation map|
src/after.js:12:38     - Unknown word (called)     -- Only invoke after fn is called 5 times.
src/after.js:1:27      - Unknown word (invokes)    -- Create a function that invokes once it's called n or
src/after.js:1:45      - Unknown word (called)     -- that invokes once it's called n or more times.
src/after.js:1:57      - Unknown word (more)       -- once it's called n or more times.
src/after.js:6:24      - Unknown word (restrict)   -- |fn |Function to restrict |
src/ajax.js:1:4       - Unknown word (Perform)    -- /* Perform an asynchronous HTTP
src/ajax.js:23:4      - Unknown word (Shortcut)   -- * Shortcut for type = GET;
src/ajax.js:27:4      - Unknown word (Shortcut)   -- * Shortcut for type = POST;
src/ajax.js:38:4      - Unknown word (ajax)       -- * ajax({
src/ajax.js:48:4      - Unknown word (ajax)       -- * ajax.get('http://example
src/ajax.js:59:29     - Unknown word (ajax)       -- export declare namespace ajax {
src/ajax.js:5:13      - Unknown word (Ajax)       -- * |options|Ajax options|
src/ajax.js:83:28     - Unknown word (ajax)       -- export declare function ajax(options: {
src/allKeys.js:14:32     - Unknown word (unenumerable) -- unenumerable=false|Include unenumerable keys|
src/allKeys.js:14:5      - Unknown word (unenumerable) -- * |unenumerable=false|Include unenumerable
src/allKeys.js:17:43     - Unknown word (retrieved)    -- s prototype won't be retrieved.
src/allKeys.js:1:47      - Unknown word (inherited)  -- of object's own and inherited properties.
src/allKeys.js:34:12     - Unknown word (unenumerable) -- * unenumerable?: boolean;
src/allKeys.js:54:25     - Unknown word (unenumerable) -- { prototype = true, unenumerable = false, symbol = false
src/allKeys.js:58:10     - Unknown word (unenumerable) -- if ((unenumerable || symbol) && getOwnPropertyN
src/ansiColor.js:15:4      - Unknown word (ansi)       -- * ansiColor.red('Warning')
src/ansiColor.js:1:4       - Unknown word (Ansi)       -- /* Ansi colors.
src/ansiColor.js:24:29     - Unknown word (ansi)       -- export declare namespace ansiColor {
src/ansiColor.js:27:25     - Unknown word (ansi)       -- export declare const ansiColor: {
src/ansiColor.js:28:15     - Unknown word (ansi)       -- * black: ansiColor.IFn;
src/ansiColor.js:29:13     - Unknown word (ansi)       -- * red: ansiColor.IFn;
src/arrToMap.js:1:23      - Unknown word (using)      -- Make an object map using array of strings.
src/atob.js:1:18      - Unknown word (emulate)    -- /* Use Buffer to emulate atob when running in
src/atob.js:23:23     - Unknown word (LICIA)      -- if (root.atob && !LICIA_TEST) {
src/average.js:5:24      - Unknown word (calculate)  -- |numbers|Numbers to calculate|
src/base64.js:42:15     - Unknown word (remain)     -- const remain = len % 3;
src/base64.js:44:21     - Unknown word (remain)     -- len = len - remain;
src/base64.js:57:13     - Unknown word (remain)     -- if (remain === 1) {
src/base64.js:62:20     - Unknown word (remain)     -- } else if (remain === 2) {
src/base64.js:74:13     - Unknown word (remain)     -- remain = 0;
src/before.js:1:27      - Unknown word (invokes)    -- Create a function that invokes less than n times.
src/before.js:5:46      - Unknown word (longer)     -- calls at which fn is no longer invoked|
src/before.js:6:24      - Unknown word (restrict)   -- |fn |Function to restrict
src/before.js:9:4       - Unknown word (Subsequent) -- * Subsequent calls to the created
src/binarySearch.js:46:48     - Unknown word (Comparator) -- val, cmp = isSorted.defComparator) {
src/binarySearch.js:7:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/bind.js:16:17     - Unknown word (eustia)     -- * { name: 'eustia' },
src/bind.js:17:16     - Unknown word (utility)    -- * 'I am a utility library.'
src/bind.js:19:17     - Unknown word (eustia)     -- * fn(); // -> 'eustia: I am a utility library
src/bind.js:19:32     - Unknown word (utility)    -- -> 'eustia: I am a utility library.'
src/btoa.js:1:18      - Unknown word (emulate)    -- /* Use Buffer to emulate btoa when running in
src/btoa.js:23:23     - Unknown word (LICIA)      -- if (root.btoa && !LICIA_TEST) {
src/bubbleSort.js:24:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/bubbleSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/bytesToStr.js:11:48     - Unknown word (licia)      -- , 105, 97]); // -> 'licia'
src/bytesToWords.js:3:16      - Unknown word (using)      -- * Useful when using CryptoJS.
src/bytesToWords.js:3:4       - Unknown word (Useful)     -- * Useful when using CryptoJS
src/cacheRequire.js:12:23     - Unknown word (Whether)    -- |requirePath=true |Whether require path should
src/cacheRequire.js:132:19    - Unknown word (compiled)   -- const compiledWrapper = moduleCompile
src/cacheRequire.js:132:27    - Unknown word (Wrapper)    -- const compiledWrapper = moduleCompile(filename
src/cacheRequire.js:13:23     - Unknown word (Whether)    -- |code=false |Whether js code should be cached
src/cacheRequire.js:144:20    - Unknown word (compiled)   -- return compiledWrapper.apply(mod.exports
src/cacheRequire.js:144:28    - Unknown word (Wrapper)    -- return compiledWrapper.apply(mod.exports, args
src/cacheRequire.js:149:19    - Unknown word (wrapper)    -- const wrapper = Module.wrap(content
src/cacheRequire.js:14:23     - Unknown word (Whether)    -- |compileCache=true|Whether compile cache should
src/cacheRequire.js:153:42    - Unknown word (wrapper)    -- script = new vm.Script(wrapper, {
src/cacheRequire.js:167:19    - Unknown word (compiled)   -- const compiledWrapper = script.runInThisCont
src/cacheRequire.js:167:27    - Unknown word (Wrapper)    -- const compiledWrapper = script.runInThisContext
src/cacheRequire.js:174:20    - Unknown word (compiled)   -- return compiledWrapper;
src/cacheRequire.js:174:28    - Unknown word (Wrapper)    -- return compiledWrapper;
src/cacheRequire.js:1:10      - Unknown word (everything) -- /* Cache everything in module require to
src/callbackify.js:6:41      - Unknown word (fist)       -- following the error-fist callback style|
src/camelCase.js:32:17     - Unknown word (capitalize) -- arr.forEach(capitalize, arr);
src/camelCase.js:38:10     - Unknown word (capitalize) -- function capitalize(val, idx) {
src/camelCase.js:6:18      - Unknown word (cased)      -- * |return|Camel cased string|
src/capitalize.js:10:4      - Unknown word (capitalize)  -- * capitalize('rED'); // -> Red
src/capitalize.js:18:28     - Unknown word (capitalize)  -- export declare function capitalize(str: string): string
src/capitalize.js:1:54      - Unknown word (remaining)  -- to upper case and the remaining to lower case.
src/capitalize.js:5:22      - Unknown word (capitalize) -- * |str   |String to capitalize|
src/capitalize.js:6:12      - Unknown word (Capitalized) -- * |return|Capitalized string  |
src/castPath.js:11:4      - Unknown word (cast)       -- * castPath('a.b.c'); // ->
src/castPath.js:12:4      - Unknown word (cast)       -- * castPath(['a']); // -> [
src/castPath.js:13:4      - Unknown word (cast)       -- * castPath('a[0].b'); // -
src/castPath.js:14:4      - Unknown word (cast)       -- * castPath('a.b.c', { 'a.b
src/castPath.js:1:4       - Unknown word (Cast)       -- /* Cast value into a property
src/castPath.js:22:28     - Unknown word (cast)       -- export declare function castPath(path: string | string
src/centerAlign.js:27:30     - Unknown word (lpad)       -- longest isArr isUndef map lpad');
src/centerAlign.js:27:4      - Unknown word (longest)    -- _('longest isArr isUndef map lpad
src/centerAlign.js:34:33     - Unknown word (longest)    -- isUndef(width)) width = longest(str);
src/centerAlign.js:39:16     - Unknown word (lpad)       -- return lpad(str, floor((width -
src/centerAlign.js:7:19      - Unknown word (aligned)    -- * |return|Center aligned string   |
src/cgroup.js:22:8      - Unknown word (cpuset)     -- * cpuset: {
src/cgroup.js:44:16     - Unknown word (microseconds) -- // microseconds
src/cgroup.js:46:39     - Unknown word (usec)         -- = toNum(data['usage_usec']);
src/cgroup.js:49:44     - Unknown word (cpuacct)      -- Math.round(toNum(read('cpuacct/cpuacct.usage')) /
src/cgroup.js:49:52     - Unknown word (cpuacct)      -- toNum(read('cpuacct/cpuacct.usage')) / 1000);
src/cgroup.js:79:7      - Unknown word (cpuset)       -- const cpuset = {
src/cgroup.js:82:18     - Unknown word (cpuset)       -- let p = 'cpuset/cpuset.effective_cpus
src/cgroup.js:82:25     - Unknown word (cpuset)       -- let p = 'cpuset/cpuset.effective_cpus';
src/cgroup.js:85:18     - Unknown word (cpuset)       -- p = 'cpuset.cpus.effective';
src/char.js:1:18      - Unknown word (representing) -- /* Return string representing a character whose Unicode
src/char.js:1:43      - Unknown word (whose)        -- representing a character whose Unicode code point is
src/char.js:6:19      - Unknown word (representing) -- * |return|String representing corresponding char|
src/clamp.js:1:28      - Unknown word (inclusive)  -- Clamp number within the inclusive lower and upper bounds
src/className.js:1:16      - Unknown word (conditionally) -- /* Utility for conditionally joining class names
src/className.js:1:30      - Unknown word (joining)       -- Utility for conditionally joining class names.
src/className.js:1:4       - Unknown word (Utility)    -- /* Utility for conditionally joining
src/className.js:6:12      - Unknown word (Joined)        -- * |return|Joined class names|
src/cliHelp.js:103:80    - Unknown word (rpad)       -- <%=util.yellow(util.rpad(option.name, maxNameWidth
src/cliHelp.js:118:78    - Unknown word (rpad)       -- <%=util.yellow(util.rpad(command.name, maxNameWidth
src/cliHelp.js:119:61    - Unknown word (more)       -- help <command>')%>' for more information on a specific
src/cliHelp.js:13:44     - Unknown word (lpad)       -- module-name> [options]', 'lpad --browser'],
src/cliHelp.js:23:15     - Unknown word (licia)      -- * name: 'licia',
src/cliHelp.js:59:22     - Unknown word (rpad)       -- ('template each map rpad ansiColor toArr cloneDeep
src/cliHelp.js:59:27     - Unknown word (ansi)       -- template each map rpad ansiColor toArr cloneDeep
src/cliHelp.js:66:22     - Unknown word (Widths)     -- const cmdNameWidths = map(data.commands
src/cliHelp.js:69:52     - Unknown word (Widths)     -- max.apply(null, cmdNameWidths);
src/cliHelp.js:80:18     - Unknown word (Widths)     -- const optNameWidths = map(data.options,
src/cliHelp.js:81:48     - Unknown word (Widths)     -- max.apply(null, optNameWidths);
src/cliHelp.js:90:31     - Unknown word (rpad)       -- rpad = (text, len) => rpad(text, len, ' ');
src/cliHelp.js:90:9      - Unknown word (rpad)       -- tplUtil.rpad = (text, len) => rpad
src/cliHelp.js:93:30     - Unknown word (ansi)       -- tplUtil[color] = text => ansiColor[color](text);
src/clone.js:12:19     - Unknown word (eustia)     -- * clone({ name: 'eustia' }); // -> {name: 'eustia
src/clone.js:12:45     - Unknown word (eustia)     -- eustia' }); // -> {name: 'eustia'}
src/clone.js:1:13      - Unknown word (shallow)    -- /* Create a shallow-copied clone of the
src/clone.js:1:21      - Unknown word (copied)     -- /* Create a shallow-copied clone of the provided
src/clone.js:1:41      - Unknown word (provided)   -- copied clone of the provided plain object.
src/clone.js:1:50      - Unknown word (plain)      -- clone of the provided plain object.
src/clone.js:3:41      - Unknown word (copied)     -- objects or arrays will be copied by reference, not duplicated
src/clone.js:3:66      - Unknown word (duplicated) -- copied by reference, not duplicated.
src/clone.js:8:12      - Unknown word (Cloned)     -- * |return|Cloned value  |
src/cloneDeep.js:1:4       - Unknown word (Recursively) -- /* Recursively clone value.
src/cloneDeep.js:6:17      - Unknown word (cloned)      -- * |return|Deep cloned Value|
src/cmpVersion.js:7:12      - Unknown word (Comparison) -- * |return|Comparison result |
src/combine.js:1:23      - Unknown word (using)      -- Create an array by using one array for keys and
src/combine.js:1:52      - Unknown word (another)    -- one array for keys and another for its values.
src/compact.js:3:58      - Unknown word (falsey)     -- undefined, and NaN are falsey.
src/compact.js:8:25      - Unknown word (filtered)   -- return|New array of filtered values|
src/compose.js:12:10     - Unknown word (welcome)    -- * const welcome = compose(
src/compose.js:21:13     - Unknown word (licia)      -- * welcome('licia'); // -> 'hi: LICIA
src/compose.js:21:33     - Unknown word (LICIA)      -- licia'); // -> 'hi: LICIA!'
src/compose.js:21:4      - Unknown word (welcome)    -- * welcome('licia'); // -> 'hi
src/compose.js:3:18      - Unknown word (consumes)   -- * Each function consumes the return value of
src/compose.js:3:65      - Unknown word (follows)    -- of the function that follows.
src/compressImg.js:1:19      - Unknown word (using)      -- /* Compress image using canvas.
src/concat.js:6:12      - Unknown word (Concatenated) -- * |return|Concatenated array|
src/container.js:102:33    - Unknown word (calculate)  -- cpuLoads[idx] = calculateCpuLoad(
src/container.js:112:10    - Unknown word (calculate)  -- function calculateCpuLoad(lastCpu, cpu
src/container.js:29:19     - Unknown word (cpuset)     -- return cgroup.cpuset.cpus().effective.length
src/container.js:61:25     - Unknown word (cpuset)     -- const cpus = cgroup.cpuset.cpus().effective;
src/convertBase.js:8:12      - Unknown word (Converted)  -- * |return|Converted number |
src/convertBin.js:13:44     - Unknown word (directly)   -- Blob to other types directly since it's an asynchronous
src/copy.js:1:27      - Unknown word (using)      -- Copy text to clipboard using document.execCommand
src/crc1.js:37:9      - Unknown word (accum)      -- let accum = 0;
src/crc1.js:41:9      - Unknown word (accum)      -- accum += byte;
src/crc1.js:43:12     - Unknown word (accum)      -- crc += accum % 256;
src/crc1.js:5:22      - Unknown word (calculate)  -- * |input   |Data to calculate |
src/crc16.js:5:22      - Unknown word (calculate)  -- * |input   |Data to calculate |
src/crc32.js:5:22      - Unknown word (calculate)  -- * |input   |Data to calculate |
src/crc8.js:5:22      - Unknown word (calculate)  -- * |input   |Data to calculate |
src/create.js:1:22      - Unknown word (using)      -- * Create new object using given object as prototype
src/create.js:27:23     - Unknown word (LICIA)      -- if (objCreate && !LICIA_TEST) return objCreate
src/createAssigner.js:15:34     - Unknown word (Assigner)   -- declare function createAssigner(
src/createUrl.js:11:36     - Unknown word (plain)      -- test', { type: 'text/plain' }); // -> Blob url
src/createUrl.js:1:20      - Unknown word (wrapper)    -- /* CreateObjectURL wrapper.
src/createUrl.js:42:17     - Unknown word (plain)      -- type: 'text/plain'
src/css.js:3:21      - Unknown word (stripped)   -- * Comments will be stripped.
src/cssPriority.js:11:7      - Unknown word (Important)  -- * 1. Important mark
src/cssPriority.js:1:4       - Unknown word (Calculate)  -- /* Calculate and compare priority
src/cssPriority.js:26:12     - Unknown word (Comparison) -- * |return|Comparison result  |
src/cssPriority.js:31:8      - Unknown word (important)  -- * important: true,
src/cssPriority.js:49:12     - Unknown word (important)  -- * important?: boolean;
src/cssPriority.js:61:7      - Unknown word (important)  -- { important = false, inlineStyle
src/cssPriority.js:64:9      - Unknown word (important)  -- if (important) ret[0] = 1;
src/cssPriority.js:79:36     - Unknown word (ELEMS)      -- if (contain(PSEUDO_ELEMS, value.replace(/:/g
src/cssPriority.js:96:14     - Unknown word (ELEMS)      -- const PSEUDO_ELEMS = [
src/cssPriority.js:9:28      - Unknown word (five)       -- Priority array contains five number values.
src/curry.js:10:16     - Unknown word (curry)      -- * const add = curry(function(a, b) {
src/curry.js:1:13      - Unknown word (currying)   -- /* Function currying.
src/curry.js:22:28     - Unknown word (curry)      -- export declare function curry(fn: types.AnyFn): types
src/curry.js:30:21     - Unknown word (curried)    -- return function curriedFn() {
src/curry.js:35:24     - Unknown word (curried)    -- return curriedFn.apply(null, args.concat
src/curry.js:5:24      - Unknown word (curry)      -- |fn |Function to curry |
src/curry.js:6:16      - Unknown word (curried)    -- * |return|New curried function|
src/dataUrl.js:27:17     - Unknown word (Whether)    -- * |base64=true|Whether is base64|
src/dataUrl.js:32:90     - Unknown word (plain)      -- World!', mime: 'text/plain', charset: '', base
src/dataUrl.js:33:45     - Unknown word (plain)      -- Hello, World!', 'text/plain'); // -> 'data:,Hello
src/dataUrl.js:82:26     - Unknown word (plain)      -- mime = 'text/plain';
src/dateFormat.js:13:65     - Unknown word (digit)      -- leading zero for single-digit days|
src/dateFormat.js:145:35    - Unknown word (lpad)         -- = (str, len = 2) => lpad(toStr(str), len, '0
src/dateFormat.js:147:61    - Unknown word (SZWN)         -- ?|([HhMsTt])\1?|[LloSZWN]|"[^"]*"|'[^']*'/g;
src/dateFormat.js:148:108   - Unknown word (Prevailing)   -- ?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?
src/dateFormat.js:148:28    - Unknown word (PMCEA)        -- regTimezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain
src/dateFormat.js:148:69    - Unknown word (Eastern)      -- Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard
src/dateFormat.js:148:77    - Unknown word (Atlantic)     -- Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight
src/dateFormat.js:148:99    - Unknown word (Daylight)     -- Atlantic) (?:Standard|Daylight|Prevailing) Time|(?
src/dateFormat.js:14:62     - Unknown word (digit)      -- leading zero for single-digit days   |
src/dateFormat.js:152:9     - Unknown word (masks)        -- exports.masks = {
src/dateFormat.js:15:44     - Unknown word (abbreviation) -- week as a three-letter abbreviation |
src/dateFormat.js:177:10    - Unknown word (Sunday)       -- 'Sunday',
src/dateFormat.js:178:10    - Unknown word (Monday)       -- 'Monday',
src/dateFormat.js:179:10    - Unknown word (Tuesday)      -- 'Tuesday',
src/dateFormat.js:17:54     - Unknown word (digit)        -- leading zero for single-digit months         |
src/dateFormat.js:180:10    - Unknown word (Wednesday)    -- 'Wednesday',
src/dateFormat.js:181:10    - Unknown word (Thursday)     -- 'Thursday',
src/dateFormat.js:182:10    - Unknown word (Friday)       -- 'Friday',
src/dateFormat.js:183:10    - Unknown word (Saturday)     -- 'Saturday'
src/dateFormat.js:18:51     - Unknown word (digit)        -- leading zero for single-digit months            |
src/dateFormat.js:198:10    - Unknown word (January)      -- 'January',
src/dateFormat.js:199:10    - Unknown word (February)     -- 'February',
src/dateFormat.js:19:34     - Unknown word (abbreviation) -- Month as a three-letter abbreviation
src/dateFormat.js:1:15      - Unknown word (extremely)  -- /* Simple but extremely useful date format function
src/dateFormat.js:1:25      - Unknown word (useful)     -- Simple but extremely useful date format function
src/dateFormat.js:200:10    - Unknown word (March)        -- 'March',
src/dateFormat.js:201:10    - Unknown word (April)        -- 'April',
src/dateFormat.js:203:10    - Unknown word (June)         -- 'June',
src/dateFormat.js:204:10    - Unknown word (July)         -- 'July',
src/dateFormat.js:205:10    - Unknown word (August)       -- 'August',
src/dateFormat.js:206:10    - Unknown word (September)    -- 'September',
src/dateFormat.js:207:10    - Unknown word (October)      -- 'October',
src/dateFormat.js:208:10    - Unknown word (November)     -- 'November',
src/dateFormat.js:209:10    - Unknown word (December)     -- 'December'
src/dateFormat.js:22:15     - Unknown word (represented)  -- * |yyyy|Year represented by four digits
src/dateFormat.js:22:30     - Unknown word (four)         -- Year represented by four digits
src/dateFormat.js:23:44     - Unknown word (digit)        -- leading zero for single-digit hours (12-hour clock
src/dateFormat.js:31:26     - Unknown word (gives)        -- l L |Milliseconds. l gives 3 digits. L gives 2
src/dateFormat.js:31:44     - Unknown word (gives)        -- l gives 3 digits. L gives 2 digits
src/dateFormat.js:32:10     - Unknown word (Lowercase)    -- * |t   |Lowercase, single-character time
src/dateFormat.js:33:10     - Unknown word (Lowercase)    -- * |tt  |Lowercase, two-character time
src/dateFormat.js:34:10     - Unknown word (Uppercase)    -- * |T   |Uppercase, single-character time
src/dateFormat.js:35:10     - Unknown word (Uppercase)    -- * |TT  |Uppercase, two-character time
src/dateFormat.js:36:22     - Unknown word (abbreviation) -- * |Z   |US timezone abbreviation, e.g. EST or MDT
src/dateFormat.js:39:10     - Unknown word (Must)         -- * |UTC:|Must be the first four characters
src/dateFormat.js:39:28     - Unknown word (four)         -- UTC:|Must be the first four characters of the mask
src/dateFormat.js:66:23     - Unknown word (lpad)         -- 'isStr isDate toStr lpad');
src/dateFormat.js:78:26     - Unknown word (masks)        -- mask = toStr(exports.masks[mask] || mask || exports
src/dateFormat.js:78:57     - Unknown word (masks)        -- || mask || exports.masks['default']);
src/dateFormat.js:9:19      - Unknown word (Formatted)  -- * |return       |Formatted duration   |
src/debounce.js:32:15     - Unknown word (throttler)  -- const throttler = function() {
src/debounce.js:38:58     - Unknown word (throttler)  -- timeout = setTimeout(throttler, wait);
src/debug.js:11:21     - Unknown word (uninteresting) -- * d('doing lots of uninteresting work');
src/debug.js:11:7      - Unknown word (doing)      -- * d('doing lots of uninteresting
src/debug.js:1:32      - Unknown word (utility)    -- JavaScript debugging utility.
src/debug.js:1:6       - Unknown word (tiny)       -- /* A tiny JavaScript debugging
src/debug.js:24:42     - Unknown word (ansi)          -- ms isBrowser strHash ansiColor');
src/debug.js:53:17     - Unknown word (ansi)          -- ansiColor[color](name) +
src/debug.js:56:21     - Unknown word (ansi)          -- ansiColor[color](' +' + duration
src/debug.js:6:30      - Unknown word (decorated)  -- return|Function to print decorated log|
src/deburr.js:10:12     - Unknown word (déjà)        -- * deburr('déjà vu'); // -> 'deja vu
src/deburr.js:10:30     - Unknown word (deja)        -- deburr('déjà vu'); // -> 'deja vu'
src/deburr.js:10:4      - Unknown word (deburr)      -- * deburr('déjà vu'); // -> 'deja
src/deburr.js:19:28     - Unknown word (deburr)      -- export declare function deburr(str: string): string
src/deburr.js:1:104     - Unknown word (diacritical) -- and remove combining diacritical marks.
src/deburr.js:1:20      - Unknown word (Supplement) -- /* Convert Latin-1 Supplement and Latin Extended-A
src/deburr.js:1:52      - Unknown word (letters)    -- and Latin Extended-A letters to basic Latin letters
src/deburr.js:1:75      - Unknown word (letters)    -- letters to basic Latin letters and remove combining
src/deburr.js:1:94      - Unknown word (combining)  -- Latin letters and remove combining diacritical marks.
src/deburr.js:24:35     - Unknown word (deburred)    -- replace(regLatin, key => deburredLetters[key])
src/deburr.js:24:43     - Unknown word (Letters)     -- regLatin, key => deburredLetters[key])
src/deburr.js:34:15     - Unknown word (Letters)     -- const deburredLetters = {
src/deburr.js:34:7      - Unknown word (deburred)    -- const deburredLetters = {
src/deburr.js:35:16     - Unknown word (Supplement)  -- // Latin-1 Supplement block.
src/deburr.js:5:22      - Unknown word (deburr)      -- * |str   |String to deburr|
src/deburr.js:6:12      - Unknown word (Deburred)    -- * |return|Deburred string |
src/decodeUriComponent.js:1:4       - Unknown word (Better)     -- /* Better decodeURIComponent that
src/defaults.js:11:25     - Unknown word (Hood)       -- defaults({ name: 'RedHood' }, { name: 'Unknown
src/defaults.js:11:82     - Unknown word (Hood)       -- ); // -> {name: 'RedHood', age: 24}
src/defaults.js:22:10     - Unknown word (Assigner)   -- _('createAssigner allKeys');
src/defaults.js:24:17     - Unknown word (Assigner)   -- exports = createAssigner(allKeys, true);
src/define.js:1:36      - Unknown word (along)      -- module, should be used along with use.
src/define.js:9:24      - Unknown word (executed)   -- The module won't be executed until it's used by use
src/defineProp.js:14:19     - Unknown word (itself)     -- * |return|Object itself |
src/defineProp.js:1:4       - Unknown word (Shortcut)   -- /* Shortcut for Object.defineProperty
src/defineProp.js:27:23     - Unknown word (pointed)    -- // this is pointed to obj.b
src/defineProp.js:68:4      - Unknown word (cast)       -- _('castPath isStr isObj each
src/defineProp.js:83:18     - Unknown word (cast)       -- const path = castPath(prop, obj);
src/defineProp.js:8:23      - Unknown word (itself)     -- |return |Object itself |
src/delRequireCache.js:10:4      - Unknown word (licia)      -- * licia.a = 5;
src/delRequireCache.js:11:21     - Unknown word (licia)      -- * delRequireCache('licia');
src/delRequireCache.js:12:13     - Unknown word (licia)      -- * require('licia').a; // -> undefined
src/delRequireCache.js:37:11     - Unknown word (visited)    -- const visited = {};
src/delRequireCache.js:39:9      - Unknown word (visited)    -- visited[current.id] = true;
src/delRequireCache.js:42:56     - Unknown word (visited)    -- filename) !== '.node' && !visited[id]) {
src/delRequireCache.js:9:10      - Unknown word (licia)      -- * const licia = require('licia');
src/delRequireCache.js:9:27      - Unknown word (licia)      -- const licia = require('licia');
src/delay.js:16:9      - Unknown word (later)      -- * 'later'
src/delay.js:18:16     - Unknown word (later)      -- * // -> Logs 'later' after one second
src/delay.js:1:26      - Unknown word (certain)    -- Invoke function after certain milliseconds.
src/delegate.js:166:18    - Unknown word (orig)       -- this.origEvent = e;
src/delegate.js:172:28    - Unknown word (orig)       -- const e = this.origEvent;
src/delegate.js:178:28    - Unknown word (orig)       -- const e = this.origEvent;
src/delegate.js:184:28    - Unknown word (orig)       -- const e = this.origEvent;
src/deprecate.js:37:13     - Unknown word (warned)     -- let warned = false;
src/deprecate.js:39:18     - Unknown word (warned)     -- if (!warned) {
src/deprecate.js:40:17     - Unknown word (warned)     -- warned = true;
src/detectBrowser.js:14:24     - Unknown word (about)      -- // Do something about old IE...
src/detectBrowser.js:1:24      - Unknown word (using)      -- Detect browser info using ua.
src/detectBrowser.js:51:27     - Unknown word (browsers)   -- for (let i = 0, len = browsers.length; i < len; i+
src/detectBrowser.js:52:22     - Unknown word (browsers)   -- const name = browsers[i];
src/detectBrowser.js:53:35     - Unknown word (Browsers)   -- match = ua.match(regBrowsers[name]);
src/detectBrowser.js:59:23     - Unknown word (opera)      -- if (name === 'opera') version = getVer(ua
src/detectBrowser.js:73:10     - Unknown word (Browsers)   -- const regBrowsers = {
src/detectBrowser.js:75:15     - Unknown word (firefox)    -- firefox: /firefox\/([0-9.]+)(?:\s|$)/
src/detectBrowser.js:75:5      - Unknown word (firefox)    -- firefox: /firefox\/([0-9.]+
src/detectBrowser.js:76:13     - Unknown word (opera)      -- opera: /opera\/([0-9.]+)(?:\s|$)/
src/detectBrowser.js:76:5      - Unknown word (opera)      -- opera: /opera\/([0-9.]+)(
src/detectBrowser.js:78:40     - Unknown word (safari)     -- ([0-9._]+).*mobile.*safari.*/,
src/detectBrowser.js:79:35     - Unknown word (safari)     -- version\/([0-9._]+).*safari/,
src/detectBrowser.js:79:5      - Unknown word (safari)     -- safari: /version\/([0-9._]
src/detectBrowser.js:80:17     - Unknown word (chrom)      -- chrome: /(?!chrom.*opr)chrom(?:e|ium)
src/detectBrowser.js:80:28     - Unknown word (chrom)      -- chrome: /(?!chrom.*opr)chrom(?:e|ium)\/([0-9.]+)
src/detectBrowser.js:83:18     - Unknown word (trident)    -- const regIe11 = /trident\/7\./;
src/detectBrowser.js:84:26     - Unknown word (Browsers)   -- const browsers = keys(regBrowsers);
src/detectBrowser.js:84:7      - Unknown word (browsers)   -- const browsers = keys(regBrowsers)
src/detectBrowser.js:8:4       - Unknown word (Browsers)   -- * Browsers supported: ie, chrome
src/detectBrowser.js:8:42      - Unknown word (firefox)    -- supported: ie, chrome, edge, firefox, opera, safari, ios
src/detectBrowser.js:8:51      - Unknown word (opera)      -- chrome, edge, firefox, opera, safari, ios(mobile
src/detectBrowser.js:8:58      - Unknown word (safari)     -- edge, firefox, opera, safari, ios(mobile safari)
src/detectBrowser.js:8:77      - Unknown word (safari)     -- safari, ios(mobile safari), android(android browser
src/detectOs.js:13:24     - Unknown word (about)      -- // Do something about ios...
src/detectOs.js:1:11      - Unknown word (operating)  -- /* Detect operating system using ua.
src/detectOs.js:1:28      - Unknown word (using)      -- Detect operating system using ua.
src/detectOs.js:42:59     - Unknown word (ipod)       -- iphone') || detect('ipod')) return 'ios';
src/detectOs.js:50:17     - Unknown word (OSTYPE)     -- env.OSTYPE === 'cygwin' ||
src/detectOs.js:51:17     - Unknown word (OSTYPE)     -- env.OSTYPE === 'msys'
src/detectOs.js:51:29     - Unknown word (msys)       -- env.OSTYPE === 'msys'
src/detectOs.js:6:28      - Unknown word (Operating)  -- return |Operating system name|
src/difference.js:1:47      - Unknown word (included)   -- unique array values not included in the other given array
src/difference.js:7:26      - Unknown word (filtered)   -- return |New array of filtered values|
src/dotCase.js:6:16      - Unknown word (cased)      -- * |return|Dot cased string |
src/download.js:29:26     - Unknown word (plain)      -- type = type || 'text/plain';
src/download.js:7:15      - Unknown word (plain)      -- * |type=text/plain|Data type       |
src/dpr.js:39:48     - Unknown word (dppx)       -- resolution: ${get()}dppx)`);
src/dpr.js:53:36     - Unknown word (dppx)       -- `(resolution: ${dpr}dppx)`);
src/dpr.js:57:7      - Unknown word (unmatch)    -- m.on('unmatch', change);
src/dpr.js:9:4       - Unknown word (Unbind)     -- * Unbind change event.
src/durationFormat.js:32:10     - Unknown word (lpad)        -- _('toInt lpad toStr');
src/durationFormat.js:5:41      - Unknown word (millisecond) -- Duration to format, millisecond|
src/durationFormat.js:64:35     - Unknown word (lpad)        -- = (str, len = 2) => lpad(toStr(str), len, '0
src/durationFormat.js:7:21      - Unknown word (Formatted)   -- * |return         |Formatted duration
src/each.js:1:44      - Unknown word (invokes)    -- elements of collection and invokes iterator for each element
src/easing.js:102:15    - Unknown word (ELASTICITY) -- const DEFAULT_ELASTICITY = 400;
src/easing.js:1:21      - Unknown word (adapted)    -- /* Easing functions adapted from http://jqueryui
src/easing.js:27:10     - Unknown word (Quart)      -- * inQuart(percent: number): number
src/easing.js:28:11     - Unknown word (Quart)      -- * outQuart(percent: number): number
src/easing.js:29:10     - Unknown word (Quint)      -- * inQuint(percent: number): number
src/easing.js:30:11     - Unknown word (Quint)      -- * outQuint(percent: number): number
src/easing.js:31:10     - Unknown word (Expo)       -- * inExpo(percent: number): number
src/easing.js:32:11     - Unknown word (Expo)       -- * outExpo(percent: number): number
src/easing.js:35:10     - Unknown word (Circ)       -- * inCirc(percent: number): number
src/easing.js:36:11     - Unknown word (Circ)       -- * outCirc(percent: number): number
src/easing.js:37:35     - Unknown word (elasticity) -- inElastic(percent: number, elasticity?: number): number;
src/easing.js:38:36     - Unknown word (elasticity) -- outElastic(percent: number, elasticity?: number): number;
src/easing.js:65:5      - Unknown word (circ)       -- circ(t) {
src/easing.js:69:26     - Unknown word (ELASTICITY) -- m = m || DEFAULT_ELASTICITY;
src/easing.js:6:13      - Unknown word (Calculated) -- * |return |Calculated number     |
src/easing.js:96:25     - Unknown word (quart)      -- each(['quad', 'cubic', 'quart', 'quint', 'expo'],
src/easing.js:96:34     - Unknown word (quint)      -- 'cubic', 'quart', 'quint', 'expo'], function
src/easing.js:96:43     - Unknown word (expo)       -- 'quart', 'quint', 'expo'], function(name, i
src/emulateTouch.js:10:4      - Unknown word (emulate)    -- * emulateTouch(el);
src/emulateTouch.js:1:36      - Unknown word (browsers)   -- touch events on desktop browsers.
src/emulateTouch.js:1:4       - Unknown word (Emulate)    -- /* Emulate touch events on desktop
src/emulateTouch.js:20:28     - Unknown word (emulate)    -- export declare function emulateTouch(el: Element): void
src/emulateTouch.js:29:15     - Unknown word (Emulated)   -- if (el._isEmulated) return;
src/emulateTouch.js:30:11     - Unknown word (Emulated)   -- el._isEmulated = true;
src/escape.js:1:4       - Unknown word (Escapes)    -- /* Escapes a string for insertion
src/escape.js:1:46      - Unknown word (replacing)  -- insertion into HTML, replacing &, <, >, ", `, and
src/escape.js:31:12     - Unknown word (quot)       -- '"': '&quot;',
src/escapeRegExp.js:10:19     - Unknown word (licia)        -- * escapeRegExp('[licia]'); // -> '\\[licia
src/escapeRegExp.js:10:39     - Unknown word (licia)        -- licia]'); // -> '\\[licia\\]'
src/escapeRegExp.js:1:58      - Unknown word (constructors) -- as literals in RegExp constructors.
src/evalJs.js:28:35     - Unknown word (executes)   -- Function constructor executes much faster than pure
src/evalJs.js:28:44     - Unknown word (much)       -- constructor executes much faster than pure eval
src/evalJs.js:28:49     - Unknown word (faster)     -- constructor executes much faster than pure eval according
src/evalJs.js:28:61     - Unknown word (pure)       -- executes much faster than pure eval according to benchmark
src/evalJs.js:28:71     - Unknown word (according)  -- faster than pure eval according to benchmark.
src/evalJs.js:28:8      - Unknown word (Using)      -- // Using Function constructor
src/extend.js:11:23     - Unknown word (Hood)       -- extend({ name: 'RedHood' }, { age: 24 }); /
src/extend.js:11:63     - Unknown word (Hood)       -- ); // -> {name: 'RedHood', age: 24}
src/extend.js:22:10     - Unknown word (Assigner)   -- _('createAssigner allKeys');
src/extend.js:24:17     - Unknown word (Assigner)   -- exports = createAssigner(allKeys);
src/extendDeep.js:13:22     - Unknown word (Hood)       -- * name: 'RedHood',
src/extendDeep.js:15:16     - Unknown word (mother)     -- * mother: 'Jane',
src/extendDeep.js:15:25     - Unknown word (Jane)       -- mother: 'Jane',
src/extendDeep.js:1:21      - Unknown word (extending)  -- /* Recursive object extending.
src/extendDeep.js:21:16     - Unknown word (brother)    -- * brother: 'Bruce'
src/extendDeep.js:21:26     - Unknown word (Bruce)      -- brother: 'Bruce'
src/extendDeep.js:25:21     - Unknown word (Hood)       -- * // -> {name: 'RedHood', family: {mother:
src/extendDeep.js:25:37     - Unknown word (mother)     -- 'RedHood', family: {mother: 'Jane', father: 'Jack
src/extendDeep.js:25:46     - Unknown word (Jane)       -- , family: {mother: 'Jane', father: 'Jack', brother
src/extendDeep.js:25:69     - Unknown word (brother)    -- Jane', father: 'Jack', brother: 'Bruce'}}
src/extendDeep.js:25:79     - Unknown word (Bruce)      -- father: 'Jack', brother: 'Bruce'}}
src/extendDeep.js:36:6      - Unknown word (Plain)      -- _('isPlainObj each cloneDeep')
src/extendDeep.js:46:15     - Unknown word (Plain)      -- if (isPlainObj(ret) && isPlainObj
src/extendDeep.js:46:34     - Unknown word (Plain)      -- isPlainObj(ret) && isPlainObj(obj)) {
src/extendOwn.js:11:26     - Unknown word (Hood)       -- extendOwn({ name: 'RedHood' }, { age: 24 }); /
src/extendOwn.js:11:66     - Unknown word (Hood)       -- ); // -> {name: 'RedHood', age: 24}
src/extendOwn.js:1:26      - Unknown word (copies)     -- Like extend, but only copies own properties over
src/extendOwn.js:22:15     - Unknown word (Assigner)   -- _('keys createAssigner');
src/extendOwn.js:24:17     - Unknown word (Assigner)   -- exports = createAssigner(keys);
src/extractBlockCmts.js:10:16     - Unknown word (Cmts)       -- * extractBlockCmts('\/*licia*\/'); //
src/extractBlockCmts.js:10:25     - Unknown word (licia)      -- extractBlockCmts('\/*licia*\/'); // -> ['licia
src/extractBlockCmts.js:10:45     - Unknown word (licia)      -- licia*\/'); // -> ['licia']
src/extractBlockCmts.js:18:40     - Unknown word (Cmts)       -- function extractBlockCmts(str: string): string
src/extractUrls.js:11:10     - Unknown word (Official)   -- * '[Official site: http://eustia
src/extractUrls.js:1:22      - Unknown word (plain)      -- * Extract urls from plain text.
src/fetch.js:117:12    - Unknown word (Duplicated) -- // Duplicated headers is possible
src/fetch.js:117:34    - Unknown word (possible)   -- Duplicated headers is possible.
src/fetch.js:3:39      - Unknown word (pollyfill)  -- not a complete fetch pollyfill.
src/fetch.js:57:28     - Unknown word (Plain)      -- headers?: types.PlainObj<string>;
src/fibonacci.js:10:4      - Unknown word (fibonacci)  -- * fibonacci(1); // -> 1
src/fibonacci.js:11:4      - Unknown word (fibonacci)  -- * fibonacci(3); // -> 2
src/fibonacci.js:1:14      - Unknown word (fibonacci)  -- /* Calculate fibonacci number.
src/fibonacci.js:1:4       - Unknown word (Calculate)  -- /* Calculate fibonacci number.
src/fibonacci.js:5:21      - Unknown word (fibonacci)  -- * |n     |Index of fibonacci sequence|
src/fibonacci.js:6:21      - Unknown word (fibonacci)  -- * |return|Expected fibonacci number  |
src/fileSize.js:1:20      - Unknown word (human)      -- /* Turn bytes into human readable file size.
src/fileSize.js:8:9       - Unknown word (human)      -- * Turn human readable file size into
src/fileType.js:1:21      - Unknown word (using)      -- /* Detect file type using magic number.
src/fill.js:9:20      - Unknown word (Filled)     -- * |return        |Filled array            |
src/filter.js:1:42      - Unknown word (returning)  -- elements of collection, returning an array of all the
src/filter.js:1:91      - Unknown word (truth)      -- the values that pass a truth test.
src/find.js:15:23     - Unknown word (john)       -- name: 'john',
src/find.js:19:23     - Unknown word (jane)       -- name: 'jane',
src/find.js:1:30      - Unknown word (passes)     -- the first value that passes a truth test in a collection
src/find.js:1:39      - Unknown word (truth)      -- value that passes a truth test in a collection
src/find.js:26:21     - Unknown word (jane)       -- * ); // -> {name: 'jane', age: 23}
src/find.js:49:14     - Unknown word (Finder)     -- const keyFinder = isArrLike(obj) ? findIdx
src/find.js:51:20     - Unknown word (Finder)     -- const key = keyFinder(obj, predicate, ctx
src/find.js:8:31      - Unknown word (passes)     -- return |First value that passes predicate|
src/findIdx.js:14:23     - Unknown word (john)       -- name: 'john',
src/findIdx.js:18:23     - Unknown word (jane)       -- name: 'jane',
src/findIdx.js:1:47      - Unknown word (truth)      -- where the predicate truth test passes.
src/findIdx.js:1:58      - Unknown word (passes)     -- predicate truth test passes.
src/findKey.js:1:45      - Unknown word (truth)      -- where the predicate truth test passes.
src/findKey.js:1:56      - Unknown word (passes)     -- predicate truth test passes.
src/findLastIdx.js:14:23     - Unknown word (john)       -- name: 'john',
src/findLastIdx.js:18:23     - Unknown word (jane)       -- name: 'jane',
src/findLastIdx.js:1:46      - Unknown word (truth)      -- where the predicate truth test passes.
src/findLastIdx.js:1:57      - Unknown word (passes)     -- predicate truth test passes.
src/findLastIdx.js:22:23     - Unknown word (kitty)      -- name: 'kitty',
src/flatten.js:1:4       - Unknown word (Recursively) -- /* Recursively flatten an array.
src/flatten.js:6:16      - Unknown word (flattened)   -- * |return|New flattened array|
src/fnArgs.js:65:34     - Unknown word (least)      -- throw Error(`Expected at least ${minLen} args but got
src/fnArgs.js:67:34     - Unknown word (most)       -- throw Error(`Expected at most ${maxLen} args but got
src/fnv1a.js:6:12      - Unknown word (Hast)       -- * |return|Hast result   |
src/format.js:6:40      - Unknown word (specifiers) -- Values to replace format specifiers|
src/format.js:7:15      - Unknown word (Formatted)  -- * |return   |Formatted string
src/format.js:9:15      - Unknown word (Specifiers) -- * ### Format Specifiers
src/fraction.js:29:9      - Unknown word (numerator)  -- let numerator = num * _precision,
src/fraction.js:30:9      - Unknown word (denominator) -- denominator = _precision;
src/fraction.js:32:26     - Unknown word (numerator)   -- const _gcd = abs(gcd(numerator, denominator));
src/fraction.js:32:37     - Unknown word (denominator) -- abs(gcd(numerator, denominator));
src/fraction.js:33:5      - Unknown word (numerator)   -- numerator /= _gcd;
src/fraction.js:34:5      - Unknown word (denominator) -- denominator /= _gcd;
src/fraction.js:36:12     - Unknown word (numerator)   -- return numerator + '/' + denominator
src/fraction.js:36:30     - Unknown word (denominator) -- return numerator + '/' + denominator;
src/freeze.js:1:4       - Unknown word (Shortcut)   -- /* Shortcut for Object.freeze.
src/freezeDeep.js:1:4       - Unknown word (Recursively) -- /* Recursively use Object.freeze.
src/fs.js:1:4       - Unknown word (Promised)   -- /* Promised version of node.js fs
src/fullscreen.js:1:19      - Unknown word (wrapper)    -- /* Fullscreen api wrapper.
src/fullscreen.js:25:10     - Unknown word (Whether)    -- * Check Whether fullscreen is active
src/fullscreen.js:33:4      - Unknown word (Whether)    -- * Whether you are allowed to enter
src/fullscreen.js:86:10     - Unknown word (mozfullscreenchange) -- 'mozfullscreenchange',
src/fullscreen.js:87:10     - Unknown word (mozfullscreenerror)  -- 'mozfullscreenerror'
src/fuzzySearch.js:13:25     - Unknown word (Whether)    -- caseSensitive=false|Whether comparisons should be
src/fuzzySearch.js:13:33     - Unknown word (comparisons) -- caseSensitive=false|Whether comparisons should be case sensitive
src/fuzzySearch.js:18:25     - Unknown word (licia)       -- fuzzySearch('lic', ['licia', 'll', 'lic']); //
src/fuzzySearch.js:18:63     - Unknown word (licia)       -- lic']); // -> ['lic', 'licia']
src/fuzzySearch.js:43:8      - Unknown word (haystack)    -- * haystack: any[],
src/fuzzySearch.js:51:41     - Unknown word (pluck)       -- safeGet levenshtein pluck');
src/fuzzySearch.js:53:28     - Unknown word (haystacks)   -- exports = function(needle, haystacks, options = {}) {
src/fuzzySearch.js:58:21     - Unknown word (haystacks)   -- haystacks = map(haystacks, haystack => {
src/fuzzySearch.js:58:32     - Unknown word (haystack)    -- haystacks = map(haystacks, haystack => {
src/fuzzySearch.js:58:5      - Unknown word (haystacks)   -- haystacks = map(haystacks, haystack
src/fuzzySearch.js:59:28     - Unknown word (haystack)    -- let string = toStr(haystack, options);
src/fuzzySearch.js:66:20     - Unknown word (haystack)    -- value: haystack,
src/fuzzySearch.js:6:5       - Unknown word (haystacks)  -- * |haystacks|Search list     |
src/fuzzySearch.js:72:35     - Unknown word (haystack)    -- = filter(haystacks, haystack =>
src/fuzzySearch.js:72:5      - Unknown word (haystacks)   -- haystacks = filter(haystacks,
src/fuzzySearch.js:73:15     - Unknown word (Letters)     -- hasAllLetters(needle, haystack.string
src/fuzzySearch.js:78:12     - Unknown word (pluck)       -- return pluck(haystacks, 'value')
src/fuzzySearch.js:87:16     - Unknown word (Letters)     -- function hasAllLetters(needle, haystack) {
src/gcd.js:1:16      - Unknown word (greatest)   -- /* Compute the greatest common divisor using
src/gcd.js:1:40      - Unknown word (using)      -- greatest common divisor using Euclid's algorithm.
src/gcd.js:1:46      - Unknown word (Euclid's)   -- common divisor using Euclid's algorithm.
src/gcd.js:5:22      - Unknown word (calculate)  -- * |a     |Number to calculate |
src/gcd.js:6:22      - Unknown word (calculate)  -- * |b     |Number to calculate |
src/gcd.js:7:12      - Unknown word (Greatest)   -- * |return|Greatest common divisor|
src/getPort.js:43:4      - Unknown word (Passing)    -- // Passing 0 will get an available
src/getPort.js:9:64      - Unknown word (returned)   -- random port will be returned.
src/getProto.js:31:28     - Unknown word (LICIA)      -- (getPrototypeOf && !LICIA_TEST) return getPrototypeOf
src/golangify.js:11:25     - Unknown word (resolves)   -- return|Promise that resolves with [result, error
src/golangify.js:16:18     - Unknown word (golangify)  -- * let fnA = golangify(async () => {
src/golangify.js:20:18     - Unknown word (golangify)  -- * let fnB = golangify(async num => num *
src/golangify.js:23:14     - Unknown word (golangify)  -- * await golangify(Promise.reject(Error
src/golangify.js:24:14     - Unknown word (golangify)  -- * await golangify(Promise.resolve(4))
src/golangify.js:34:28     - Unknown word (golangify)  -- export declare function golangify<T, U = Error>(
src/golangify.js:6:25      - Unknown word (resolves)   -- return|Like fn, but resolves with [result, error
src/h.js:105:9     - Unknown word (classes)    -- classes
src/h.js:31:22     - Unknown word (Plain)      -- * attrs?: types.PlainObj<any>,
src/h.js:45:26     - Unknown word (classes)    -- const { tagName, id, classes } = parseTag(tag);
src/h.js:49:20     - Unknown word (classes)    -- $class.add(el, classes);
src/h.js:75:11     - Unknown word (classes)    -- const classes = [];
src/h.js:96:13     - Unknown word (classes)    -- classes.push(word.slice(1))
src/heapSort.js:25:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/heapSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/highlight.js:114:31    - Unknown word (subtmpl)     -- str = str.replace(/___subtmpl\d+___/g, function($tmpl
src/highlight.js:114:58    - Unknown word (tmpl)        -- subtmpl\d+___/g, function($tmpl) {
src/highlight.js:115:33    - Unknown word (tmpl)        -- const i = parseInt($tmpl.replace(/___subtmpl
src/highlight.js:115:50    - Unknown word (subtmpl)     -- parseInt($tmpl.replace(/___subtmpl(\d+)___/, '$1'), 10
src/highlight.js:62:39     - Unknown word (subtmpl)     -- return $1.replace($2, '___subtmpl' + (subLangSi - 1)
src/highlight.js:74:30     - Unknown word (subtmpl)     -- str.replace(/___(?!subtmpl)\w+?___/g, function
src/highlight.js:8:13      - Unknown word (Highlighted) -- * |return |Highlighted html code string|
src/hookFn.js:21:30     - Unknown word (bigger)     -- throw Error('a is bigger than 100');
src/hookFn.js:7:13      - Unknown word (Hooked)     -- * |return |Hooked function |
src/hotkey.js:10:14     - Unknown word (Hotkey)     -- * |options |Hotkey options|
src/hotkey.js:26:4      - Unknown word (hotkey)     -- * hotkey.on(
src/hotkey.js:36:4      - Unknown word (hotkey)     -- * hotkey.on('shift+a, shift+b
src/hotkey.js:37:4      - Unknown word (hotkey)     -- * hotkey.off('shift+a', keyDown
src/hotkey.js:45:29     - Unknown word (hotkey)     -- export declare namespace hotkey {
src/hotkey.js:50:25     - Unknown word (hotkey)     -- export declare const hotkey: {
src/html.js:117:44    - Unknown word (quot)       -- str => str.replace(/&quot;/g, '"');
src/html.js:118:48    - Unknown word (quot)       -- str.replace(/"/g, '&quot;');
src/html.js:23:44     - Unknown word (licia)      -- parse('<div id="name">licia</div>');
src/html.js:24:56     - Unknown word (licia)      -- 'name'}, content: ['licia']}]
src/html.js:62:36     - Unknown word (peek)       -- const lastNode = stack.peek();
src/html.js:71:36     - Unknown word (peek)       -- const lastNode = stack.peek();
src/html.js:82:36     - Unknown word (peek)       -- const lastNode = stack.peek();
src/idxOf.js:1:37      - Unknown word (occurrence) -- index at which the first occurrence of value.
src/inherits.js:18:13     - Unknown word (Student)    -- * function Student(name) {
src/inherits.js:1:60      - Unknown word (another)    -- one constructor into another.
src/inherits.js:21:13     - Unknown word (Student)    -- * inherits(Student, People);
src/inherits.js:22:18     - Unknown word (Student)    -- * const s = new Student('RedHood');
src/inherits.js:22:30     - Unknown word (Hood)       -- s = new Student('RedHood');
src/inherits.js:23:27     - Unknown word (Hood)       -- getName(); // -> 'RedHood'
src/ini.js:14:33     - Unknown word (formatted)  -- Stringify object into an ini formatted string.
src/ini.js:20:17     - Unknown word (formatted)  -- * |return |Ini formatted string|
src/ini.js:27:33     - Unknown word (around)     -- whitespace=false|Whitespace around =|
src/ini.js:33:14     - Unknown word (licia)      -- * library = licia
src/ini.js:36:11     - Unknown word (surunzi)    -- * name = surunzi
src/ini.js:37:14     - Unknown word (redhoodsu)  -- * alias[] = redhoodsu
src/ini.js:39:25     - Unknown word (licia)      -- ); // -> {library: 'licia', user: {info: {name
src/ini.js:39:54     - Unknown word (surunzi)    -- user: {info: {name: 'surunzi', alias: ['redhoodsu
src/ini.js:39:73     - Unknown word (redhoodsu)  -- 'surunzi', alias: ['redhoodsu', 'red']}}}
src/insertionSort.js:24:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/insertionSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/intersect.js:10:4      - Unknown word (intersect)  -- * intersect([1, 2, 3, 4], [2, 1
src/intersect.js:18:28     - Unknown word (intersect)  -- export declare function intersect(...arr: Array<any[]
src/intersect.js:6:25      - Unknown word (inspecting) -- return|New array of inspecting values|
src/intersectRange.js:11:4      - Unknown word (intersect)  -- * intersectRange({ start: 0, end
src/intersectRange.js:13:4      - Unknown word (intersect)  -- * intersectRange({ start: 0, end
src/intersectRange.js:1:4       - Unknown word (Intersect)  -- /* Intersect two ranges.
src/intersectRange.js:22:29     - Unknown word (intersect)  -- export declare namespace intersectRange {
src/intersectRange.js:28:28     - Unknown word (intersect)  -- export declare function intersectRange(
src/intersectRange.js:29:11     - Unknown word (intersect)  -- * a: intersectRange.IRange,
src/intersectRange.js:7:28      - Unknown word (exist)      -- return|Intersection if exist|
src/invariant.js:36:35     - Unknown word (production) -- process.env.NODE_ENV !== 'production') {
src/invariant.js:46:18     - Unknown word (Minified)   -- 'Minified exception occurred;
src/invariant.js:46:37     - Unknown word (occurred)   -- 'Minified exception occurred; use the non-minified
src/invariant.js:46:59     - Unknown word (minified)   -- occurred; use the non-minified dev environment ' +
src/invariant.js:47:64     - Unknown word (helpful)    -- message and additional helpful warnings.'
src/invert.js:1:37      - Unknown word (inverted)   -- object composed of the inverted keys and values of object
src/invert.js:6:16      - Unknown word (inverted)   -- * |return|New inverted object|
src/invert.js:8:41      - Unknown word (subsequent) -- contains duplicate values, subsequent values overwrite property
src/invert.js:8:59      - Unknown word (overwrite)  -- values, subsequent values overwrite property assignments
src/isAbsoluteUrl.js:11:25     - Unknown word (surunzi)    -- isAbsoluteUrl('//www.surunzi.com'); // -> false
src/isAbsoluteUrl.js:12:19     - Unknown word (surunzi)    -- * isAbsoluteUrl('surunzi.com'); // -> false
src/isArr.js:24:23     - Unknown word (LICIA)      -- if (Array.isArray && !LICIA_TEST) {
src/isClose.js:10:26     - Unknown word (tolerance)  -- absTol=0 |Absolute tolerance |
src/isClose.js:1:30      - Unknown word (almost)     -- if values are close(almost equal) to each other
src/isClose.js:9:26      - Unknown word (tolerance)  -- relTol=1e-9|Relative tolerance |
src/isCyclic.js:10:6      - Unknown word (Cyclic)     -- * isCyclic({}); // -> false
src/isCyclic.js:14:6      - Unknown word (Cyclic)     -- * isCyclic(obj); // -> true
src/isCyclic.js:1:11      - Unknown word (cyclic)     -- /* Detect cyclic object reference.
src/isCyclic.js:23:30     - Unknown word (Cyclic)     -- export declare function isCyclic(val: any): boolean;
src/isCyclic.js:29:32     - Unknown word (because)    -- Slower than is-circular because of different ways to
src/isCyclic.js:29:43     - Unknown word (different)  -- circular because of different ways to check if value
src/isCyclic.js:29:53     - Unknown word (ways)       -- because of different ways to check if value is
src/isCyclic.js:29:8      - Unknown word (Slower)     -- // Slower than is-circular because
src/isCyclic.js:50:30     - Unknown word (avoid)      -- singly linked list to avoid creating arrays.
src/isCyclic.js:50:8      - Unknown word (singly)     -- * Use singly linked list to avoid
src/isCyclic.js:6:29      - Unknown word (cyclic)     -- return|True if value is cyclic|
src/isDarkMode.js:14:30     - Unknown word (Dark)       -- export declare function isDarkMode(): boolean;
src/isDarkMode.js:19:28     - Unknown word (prefers)    -- m = new MediaQuery('(prefers-color-scheme: dark)
src/isDarkMode.js:19:50     - Unknown word (dark)       -- prefers-color-scheme: dark)');
src/isDarkMode.js:1:11      - Unknown word (dark)       -- /* Detect dark mode.
src/isDarkMode.js:5:18      - Unknown word (Dark)       -- * console.log(isDarkMode()); // true if dark
src/isDarkMode.js:5:42      - Unknown word (dark)       -- isDarkMode()); // true if dark mode
src/isDataUrl.js:11:25     - Unknown word (plain)      -- isDataUrl('data:text/plain;base64,SGVsbG8sIFdvcmxkIQ
src/isDataUrl.js:11:47     - Unknown word (Fdvcmxk)    -- plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D'); // -> true
src/isDocker.js:23:24     - Unknown word (dockerenv)  -- fs.statSync('/.dockerenv');
src/isDocker.js:29:68     - Unknown word (mountinfo)  -- hasDocker('/proc/self/mountinfo');
src/isEmail.js:1:4       - Unknown word (Loosely)    -- /* Loosely validate an email address
src/isEqual.js:1:16      - Unknown word (optimized)  -- /* Performs an optimized deep comparison between
src/isEqual.js:1:31      - Unknown word (comparison) -- Performs an optimized deep comparison between the two objects
src/isEqual.js:1:4       - Unknown word (Performs)   -- /* Performs an optimized deep comparison
src/isEqual.js:1:70      - Unknown word (determine)  -- the two objects, to determine if they should be considered
src/isEqual.js:1:83      - Unknown word (they)       -- objects, to determine if they should be considered
src/isEqual.js:1:98      - Unknown word (considered) -- determine if they should be considered equal.
src/isEqual.js:7:31      - Unknown word (equivalent) -- return|True if values are equivalent|
src/isEven.js:10:6      - Unknown word (Even)       -- * isEven(0); // -> true
src/isEven.js:11:6      - Unknown word (Even)       -- * isEven(1); // -> false
src/isEven.js:12:6      - Unknown word (Even)       -- * isEven(2); // -> true
src/isEven.js:1:23      - Unknown word (even)       -- Check if number is even.
src/isEven.js:20:30     - Unknown word (Even)       -- export declare function isEven(num: number): boolean
src/isEven.js:6:30      - Unknown word (even)       -- return|True if number is even|
src/isFile.js:10:56     - Unknown word (plain)      -- txt', { type: 'text/plain' })); // -> true
src/isFn.js:8:26      - Unknown word (also)       -- Generator function is also classified as true.
src/isHidden.js:13:37     - Unknown word (displayed)  -- true |Check if it is displayed |
src/isInt.js:6:29      - Unknown word (correctly)  -- return|True if value is correctly classified|
src/isLeapYear.js:10:6      - Unknown word (Leap)       -- * isLeapYear(2000); // -> true
src/isLeapYear.js:11:6      - Unknown word (Leap)       -- * isLeapYear(2002); // -> false
src/isLeapYear.js:19:30     - Unknown word (Leap)       -- export declare function isLeapYear(year: number): boolean
src/isLeapYear.js:1:25      - Unknown word (leap)       -- Check if a year is a leap year.
src/isLeapYear.js:6:30      - Unknown word (leap)       -- return|True if year is a leap year|
src/isMiniProgram.js:13:27     - Unknown word (Mini)       -- export declare const isMiniProgram: boolean;
src/isMiniProgram.js:1:24      - Unknown word (wechat)     -- Check if running in wechat mini program.
src/isMiniProgram.js:1:31      - Unknown word (mini)       -- if running in wechat mini program.
src/isMiniProgram.js:5:18      - Unknown word (Mini)       -- * console.log(isMiniProgram); // -> true
src/isMiniProgram.js:5:57      - Unknown word (mini)       -- true if running in mini program.
src/isMobile.js:1:10      - Unknown word (whether)    -- /* Check whether client is using a mobile
src/isMobile.js:1:28      - Unknown word (using)      -- Check whether client is using a mobile browser using
src/isMobile.js:1:51      - Unknown word (using)      -- using a mobile browser using ua.
src/isMobile.js:23:100    - Unknown word (fennec)     -- blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone
src/isMobile.js:23:107    - Unknown word (hiptop)     -- compal|elaine|fennec|hiptop|iemobile|ip(hone|od
src/isMobile.js:23:114    - Unknown word (iemobile)   -- elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle
src/isMobile.js:23:126    - Unknown word (hone)       -- fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge
src/isMobile.js:23:135    - Unknown word (iris)       -- iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp
src/isMobile.js:23:140    - Unknown word (kindle)     -- iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp
src/isMobile.js:23:152    - Unknown word (maemo)      -- od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox
src/isMobile.js:23:158    - Unknown word (midp)       -- iris|kindle|lge |maemo|midp|mmp|mobile.+firefox
src/isMobile.js:23:175    - Unknown word (firefox)    -- maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob
src/isMobile.js:23:183    - Unknown word (netfront)   -- mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm
src/isMobile.js:23:192    - Unknown word (opera)      -- mobile.+firefox|netfront|opera m(ob|in)i|palm( os)
src/isMobile.js:23:208    - Unknown word (palm)       -- netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re
src/isMobile.js:23:237    - Unknown word (plucker)    -- ?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4
src/isMobile.js:23:245    - Unknown word (pocket)     -- p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian
src/isMobile.js:23:269    - Unknown word (symbian)    -- pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link
src/isMobile.js:23:277    - Unknown word (treo)       -- series(4|6)0|symbian|treo|up\.(browser|link)|vodafone
src/isMobile.js:23:329    - Unknown word (xiino)      -- vodafone|wap|windows ce|xda|xiino/i;
src/isMobile.js:23:38     - Unknown word (meego)      -- egMobileAll = /(android|bb\d+|meego).+mobile|avantgo|bada
src/isMobile.js:23:53     - Unknown word (avantgo)    -- bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer
src/isMobile.js:23:61     - Unknown word (bada)       -- meego).+mobile|avantgo|bada\/|blackberry|blazer
src/isMobile.js:23:68     - Unknown word (blackberry) -- mobile|avantgo|bada\/|blackberry|blazer|compal|elaine
src/isMobile.js:23:79     - Unknown word (blazer)     -- avantgo|bada\/|blackberry|blazer|compal|elaine|fennec
src/isMobile.js:23:93     - Unknown word (elaine)     -- blackberry|blazer|compal|elaine|fennec|hiptop|iemobile
src/isMobile.js:24:1006   - Unknown word (pdxg)       -- owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil
src/isMobile.js:24:1029   - Unknown word (phil)       -- pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2
src/isMobile.js:24:1034   - Unknown word (pire)       -- 13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck
src/isMobile.js:24:1067   - Unknown word (prox)       -- uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(0
src/isMobile.js:24:1072   - Unknown word (psio)       -- 2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|
src/isMobile.js:24:1116   - Unknown word (qtek)       -- 21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9
src/isMobile.js:24:1131   - Unknown word (raks)       -- |i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\
src/isMobile.js:24:114    - Unknown word (amoi)       -- ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar
src/isMobile.js:24:1231   - Unknown word (shar)       -- )|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45
src/isMobile.js:24:132    - Unknown word (aptu)       -- co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)
src/isMobile.js:24:1422   - Unknown word (utst)       -- |tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg
src/isMobile.js:24:1437   - Unknown word (veri)       -- |si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0
src/isMobile.js:24:1474   - Unknown word (voda)       -- vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61
src/isMobile.js:24:1479   - Unknown word (vulc)       -- [0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|8
src/isMobile.js:24:1527   - Unknown word (webc)       -- |83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb
src/isMobile.js:24:1532   - Unknown word (whit)       -- 5|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu
src/isMobile.js:24:1550   - Unknown word (wmlb)       -- webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your
src/isMobile.js:24:1555   - Unknown word (wonu)       -- whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto
src/isMobile.js:24:157    - Unknown word (attw)       -- ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan
src/isMobile.js:24:1570   - Unknown word (your)       -- wmlb|wonu|x700|yas-|your|zeto|zte-/i;
src/isMobile.js:24:1575   - Unknown word (zeto)       -- wonu|x700|yas-|your|zeto|zte-/i;
src/isMobile.js:24:16     - Unknown word (Four)       -- const regMobileFour = /1207|6310|6590|3gso
src/isMobile.js:24:178    - Unknown word (avan)       -- attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd
src/isMobile.js:24:225    - Unknown word (bumb)       -- |bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi
src/isMobile.js:24:245    - Unknown word (capi)       -- bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm
src/isMobile.js:24:250    - Unknown word (ccwa)       -- bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc
src/isMobile.js:24:265    - Unknown word (chtm)       -- capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)
src/isMobile.js:24:270    - Unknown word (cldc)       -- ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw
src/isMobile.js:24:290    - Unknown word (craw)       -- cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc
src/isMobile.js:24:308    - Unknown word (dbte)       -- nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob
src/isMobile.js:24:318    - Unknown word (devi)       -- it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds
src/isMobile.js:24:323    - Unknown word (dica)       -- ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12
src/isMobile.js:24:328    - Unknown word (dmob)       -- dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el
src/isMobile.js:24:407    - Unknown word (fetc)       -- ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene
src/isMobile.js:24:431    - Unknown word (gene)       -- fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od
src/isMobile.js:24:467    - Unknown word (haie)       -- go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei
src/isMobile.js:24:472    - Unknown word (hcit)       -- w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt
src/isMobile.js:24:584    - Unknown word (ibro)       -- ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k
src/isMobile.js:24:589    - Unknown word (idea)       -- 30|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno
src/isMobile.js:24:599    - Unknown word (ikom)       -- |\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris
src/isMobile.js:24:609    - Unknown word (inno)       -- idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro
src/isMobile.js:24:614    - Unknown word (ipaq)       -- ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu
src/isMobile.js:24:619    - Unknown word (iris)       -- ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs
src/isMobile.js:24:633    - Unknown word (jbro)       -- inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji
src/isMobile.js:24:638    - Unknown word (jemu)       -- ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt(
src/isMobile.js:24:643    - Unknown word (jigs)       -- iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)
src/isMobile.js:24:653    - Unknown word (keji)       -- jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt
src/isMobile.js:24:668    - Unknown word (klon)       -- kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le
src/isMobile.js:24:73     - Unknown word (abac)       -- -6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn
src/isMobile.js:24:732    - Unknown word (libw)       -- k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\
src/isMobile.js:24:737    - Unknown word (lynx)       -- |50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te
src/isMobile.js:24:812    - Unknown word (mmef)       -- rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t
src/isMobile.js:24:863    - Unknown word (mwbp)       -- v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2
src/isMobile.js:24:868    - Unknown word (mywa)       -- zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n
src/isMobile.js:24:960    - Unknown word (nzph)       -- tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran
src/isMobile.js:24:980    - Unknown word (oran)       -- nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t
src/isMobile.js:29:46     - Unknown word (Four)       -- test(ua) || regMobileFour.test(ua.substr(0, 4
src/isMobile.js:6:39      - Unknown word (belongs)    -- |True if ua belongs to mobile browsers|
src/isMobile.js:6:57      - Unknown word (browsers)   -- ua belongs to mobile browsers|
src/isNaN.js:8:29      - Unknown word (different)  -- Undefined is not an NaN, different from global isNaN function
src/isNative.js:29:20     - Unknown word (constructors) -- // Detect host constructors (Safari > 4; really
src/isNative.js:29:34     - Unknown word (Safari)       -- Detect host constructors (Safari > 4; really typed array
src/isNative.js:29:46     - Unknown word (really)       -- constructors (Safari > 4; really typed array specific
src/isNum.js:6:29      - Unknown word (correctly)  -- return|True if value is correctly classified|
src/isObj.js:8:14      - Unknown word (Spec)       -- * [Language Spec](http://www.ecma-internationa
src/isPlainObj.js:10:6      - Unknown word (Plain)      -- * isPlainObj({}); // -> true
src/isPlainObj.js:11:6      - Unknown word (Plain)      -- * isPlainObj([]); // -> false
src/isPlainObj.js:12:6      - Unknown word (Plain)      -- * isPlainObj(function() {});
src/isPlainObj.js:20:30     - Unknown word (Plain)      -- export declare function isPlainObj(val: any): boolean
src/isPlainObj.js:6:31      - Unknown word (plain)      -- return|True if value is a plain object|
src/isPrime.js:1:17      - Unknown word (provided)   -- /* Check if the provided integer is a prime number
src/isRelative.js:1:18      - Unknown word (appears)    -- /* Check if path appears to be relative.
src/isRelative.js:6:25      - Unknown word (appears)    -- return|True if path appears to be relative|
src/isRetina.js:13:27     - Unknown word (Retina)     -- export declare const isRetina: boolean;
src/isRetina.js:19:138    - Unknown word (dppx)       -- min-resolution: 1.25dppx)';
src/isRetina.js:1:4       - Unknown word (Determine)  -- /* Determine if running on a high
src/isRetina.js:5:18      - Unknown word (Retina)     -- * console.log(isRetina); // -> true if high
src/isSorted.js:25:42     - Unknown word (Comparator) -- arr, cmp = exports.defComparator) {
src/isSorted.js:33:12     - Unknown word (Comparator) -- exports.defComparator = function(a, b) {
src/isSorted.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/isStr.js:10:11     - Unknown word (licia)      -- * isStr('licia'); // -> true
src/isStrBlank.js:10:16     - Unknown word (licia)      -- * isStrBlank('licia'); // -> false
src/isUrl.js:1:4       - Unknown word (Loosely)    -- /* Loosely validate an url.
src/jsonClone.js:10:23     - Unknown word (licia)      -- jsonClone({ name: 'licia' }); // -> { name:
src/jsonClone.js:10:49     - Unknown word (licia)      -- }); // -> { name: 'licia' }
src/jsonClone.js:6:12      - Unknown word (Cloned)     -- * |return|Cloned value  |
src/jsonp.js:79:10     - Unknown word (LICIA)      -- if (!LICIA_TEST) {
src/kebabCase.js:10:4      - Unknown word (kebab)      -- * kebabCase('fooBar'); // -
src/kebabCase.js:11:4      - Unknown word (kebab)      -- * kebabCase('foo bar'); //
src/kebabCase.js:12:4      - Unknown word (kebab)      -- * kebabCase('foo_bar'); //
src/kebabCase.js:13:4      - Unknown word (kebab)      -- * kebabCase('foo.bar'); //
src/kebabCase.js:1:23      - Unknown word (kebab)      -- Convert string to "kebabCase".
src/kebabCase.js:6:12      - Unknown word (Kebab)      -- * |return|Kebab cased string|
src/kebabCase.js:6:18      - Unknown word (cased)      -- * |return|Kebab cased string|
src/keyCode.js:41:5      - Unknown word (backspace)  -- backspace: 8,
src/keys.js:23:21     - Unknown word (LICIA)      -- if (Object.keys && !LICIA_TEST) {
src/kill.js:29:20     - Unknown word (taskkill)   -- cmd = `taskkill /pid ${pid} /T /F`;
src/lazyImport.js:161:26    - Unknown word (fake)       -- if (!fakeExports.prop) {
src/lazyImport.js:162:36    - Unknown word (fake)       -- defineProp(fakeExports, prop, descriptor
src/lazyImport.js:1:19      - Unknown word (lazily)     -- /* Import modules lazily, Proxy is used.
src/lazyImport.js:60:11     - Unknown word (fake)       -- const fakeExports = function()
src/lazyImport.js:97:22     - Unknown word (fake)       -- return new Proxy(fakeExports, {
src/lazyRequire.js:1:20      - Unknown word (lazily)     -- /* Require modules lazily.
src/lazyRequire.js:9:45      - Unknown word (called)     -- required only when _ is called.
src/levenshtein.js:30:22     - Unknown word (shorter)    -- // Make a is the shorter one
src/levenshtein.js:61:9      - Unknown word (above)      -- let above;
src/levenshtein.js:85:13     - Unknown word (above)      -- above = current;
src/levenshtein.js:90:21     - Unknown word (above)      -- if (above < current) current
src/levenshtein.js:90:48     - Unknown word (above)      -- current) current = above;
src/linkify.js:11:17     - Unknown word (Official)   -- * const str = 'Official site: http://eustia
src/linkify.js:12:25     - Unknown word (Official)   -- linkify(str); // -> 'Official site: <a href="http
src/linkify.js:12:4      - Unknown word (linkify)    -- * linkify(str); // -> 'Official
src/linkify.js:13:4      - Unknown word (linkify)    -- * linkify(str, function(url)
src/linkify.js:23:28     - Unknown word (linkify)    -- export declare function linkify(str: string, hyperlink
src/loadCss.js:1:4       - Unknown word (Inject)     -- /* Inject link tag into page with
src/loadJs.js:1:4       - Unknown word (Inject)     -- /* Inject script tag into page
src/longest.js:10:4      - Unknown word (longest)    -- * longest(['a', 'abcde', 'abc
src/longest.js:18:28     - Unknown word (longest)    -- export declare function longest(arr: string[]): string
src/longest.js:1:12      - Unknown word (longest)    -- /* Get the longest item in an array.
src/longest.js:6:12      - Unknown word (Longest)    -- * |return|Longest item    |
src/lowerCase.js:6:18      - Unknown word (cased)      -- * |return|Lower cased string|
src/lpad.js:12:4      - Unknown word (lpad)       -- * lpad('a', 5); // -> '
src/lpad.js:13:4      - Unknown word (lpad)       -- * lpad('a', 5, '-'); // ->
src/lpad.js:14:4      - Unknown word (lpad)       -- * lpad('abc', 3, '-'); //
src/lpad.js:15:33     - Unknown word (ababc)      -- abc', 5, 'ab'); // -> 'ababc'
src/lpad.js:15:4      - Unknown word (lpad)       -- * lpad('abc', 5, 'ab'); //
src/lpad.js:1:40      - Unknown word (shorter)    -- the left side if it's shorter than length.
src/lpad.js:23:28     - Unknown word (lpad)       -- export declare function lpad(str: string, len: number
src/ltrim.js:11:4      - Unknown word (ltrim)      -- * ltrim(' abc  '); // -> 'abc
src/ltrim.js:12:4      - Unknown word (ltrim)      -- * ltrim('_abc_', '_'); // -
src/ltrim.js:13:4      - Unknown word (ltrim)      -- * ltrim('_abc_', ['a', '_']
src/ltrim.js:21:28     - Unknown word (ltrim)      -- export declare function ltrim(str: string, chars?
src/ltrim.js:7:12      - Unknown word (Trimmed)    -- * |return|Trimmed string    |
src/matcher.js:10:28     - Unknown word (licia)      -- const filter = require('licia/filter');
src/max.js:5:23      - Unknown word (calculate)  -- |...num|Numbers to calculate|
src/md5.js:10:9      - Unknown word (licia)      -- * md5('licia'); // -> 'e59f337d8
src/md5.js:151:17    - Unknown word (rotl)       -- return (rotl(n, 8) & 0x00ff00ff)
src/md5.js:151:45    - Unknown word (rotl)       -- 8) & 0x00ff00ff) | (rotl(n, 24) & 0xff00ff00
src/md5.js:158:10    - Unknown word (rotl)       -- function rotl(n, b) {
src/memStorage.js:1:11      - Unknown word (backed)     -- /* Memory-backed implementation of the
src/memStorage.js:23:33     - Unknown word (cloak)      -- return (API_KEYS[key] ? cloak[key] : this[key]) |
src/memStorage.js:26:26     - Unknown word (cloak)      -- API_KEYS[key] ? (cloak[key] = val) : (this
src/memStorage.js:29:32     - Unknown word (cloak)      -- API_KEYS[key] ? delete cloak[key] : delete this[key
src/memStorage.js:37:20     - Unknown word (uncloaked)  -- let keys = uncloakedKeys();
src/memStorage.js:42:16     - Unknown word (cloaked)    -- keys = cloakedKeys();
src/memStorage.js:45:59     - Unknown word (cloak)      -- keys[i]); i++) delete cloak[key];
src/memStorage.js:57:7      - Unknown word (cloak)      -- const cloak = {};
src/memStorage.js:69:12     - Unknown word (uncloaked)  -- return uncloakedKeys().concat(cloakedKeys
src/memStorage.js:69:35     - Unknown word (cloaked)    -- uncloakedKeys().concat(cloakedKeys());
src/memStorage.js:72:10     - Unknown word (uncloaked)  -- function uncloakedKeys() {
src/memStorage.js:78:10     - Unknown word (cloaked)    -- function cloakedKeys() {
src/memStorage.js:8:34      - Unknown word (licia)      -- localStorage.setItem('test', 'licia');
src/memoize.js:11:10     - Unknown word (fibonacci)  -- * const fibonacci = memoize(function(n
src/memoize.js:12:27     - Unknown word (fibonacci)  -- return n < 2 ? n : fibonacci(n - 1) + fibonacci(n
src/memoize.js:12:46     - Unknown word (fibonacci)  -- fibonacci(n - 1) + fibonacci(n - 2);
src/memoize.js:1:32      - Unknown word (caching)    -- a given function by caching the computed result
src/mergeArr.js:1:33      - Unknown word (together)   -- the contents of arrays together into the first array
src/mergeSort.js:26:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/mergeSort.js:8:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/meta.js:19:5      - Unknown word (metas)      -- * |metas|Object of name content
src/meta.js:23:11     - Unknown word (metas)      -- * Remove metas.
src/meta.js:68:9      - Unknown word (metas)      -- let metas = name;
src/meta.js:69:16     - Unknown word (metas)      -- if (!isObj(metas)) {
src/meta.js:70:9      - Unknown word (metas)      -- metas = {};
src/mime.js:13:25     - Unknown word (most)       -- It contains only the most common file types.
src/mime.js:40:12     - Unknown word (tiff)       -- 'image/tiff': ['tif', 'tiff'],
src/mime.js:40:28     - Unknown word (tiff)       -- image/tiff': ['tif', 'tiff'],
src/mime.js:42:22     - Unknown word (photoshop)  -- 'image/vnd.adobe.photoshop': ['psd'],
src/mime.js:47:12     - Unknown word (mpeg)       -- 'audio/mpeg': ['mpga', 'mp2', 'mp
src/mime.js:47:21     - Unknown word (mpga)       -- 'audio/mpeg': ['mpga', 'mp2', 'mp2a', 'mp
src/mime.js:52:14     - Unknown word (matroska)   -- 'video/x-matroska': ['mkv'],
src/mime.js:54:14     - Unknown word (msvideo)    -- 'video/x-msvideo': ['avi'],
src/mime.js:55:12     - Unknown word (quicktime)  -- 'video/quicktime': ['qt', 'mov'],
src/mime.js:56:12     - Unknown word (mpeg)       -- 'video/mpeg': ['mpeg', 'mpg', 'mpe
src/mime.js:56:21     - Unknown word (mpeg)       -- 'video/mpeg': ['mpeg', 'mpg', 'mpe', 'm1v
src/mime.js:60:35     - Unknown word (shtml)      -- html': ['html', 'htm', 'shtml'],
src/mime.js:64:11     - Unknown word (plain)      -- 'text/plain': ['txt', 'text', 'conf
src/mime.js:64:36     - Unknown word (conf)       -- plain': ['txt', 'text', 'conf', 'log', 'ini'],
src/mime.js:75:18     - Unknown word (octet)      -- 'application/octet-stream': [
src/mime.js:87:18     - Unknown word (msword)     -- 'application/msword': ['doc', 'docx', 'dot
src/mime.js:87:36     - Unknown word (docx)       -- application/msword': ['doc', 'docx', 'dot', 'dotx'],
src/mime.js:87:51     - Unknown word (dotx)       -- doc', 'docx', 'dot', 'dotx'],
src/mime.js:88:25     - Unknown word (excel)      -- 'application/vnd.ms-excel': ['xls', 'xlsx', 'xla
src/mime.js:89:25     - Unknown word (powerpoint) -- 'application/vnd.ms-powerpoint': ['ppt', 'pptx', 'pps
src/mime.js:89:47     - Unknown word (pptx)       -- powerpoint': ['ppt', 'pptx', 'pps', 'pot'],
src/min.js:5:23      - Unknown word (calculate)  -- |...num|Numbers to calculate|
src/mkdir.js:1:4       - Unknown word (Recursively) -- /* Recursively create directories.
src/moment.js:106:7     - Unknown word (Leap)        -- isLeapYear() {
src/moment.js:107:18    - Unknown word (Leap)        -- return isLeapYear(this._year);
src/moment.js:127:5     - Unknown word (millisecond) -- millisecond: makeGetSet('millisecond
src/moment.js:16:60     - Unknown word (quite)       -- so the mask is not quite the same as moment.js
src/moment.js:1:4       - Unknown word (Tiny)       -- /* Tiny moment.js like implementation
src/moment.js:231:16    - Unknown word (Adder)       -- add: createAdder(1),
src/moment.js:232:21    - Unknown word (Adder)       -- subtract: createAdder(-1),
src/moment.js:303:16    - Unknown word (Adder)       -- function createAdder(dir) {
src/moment.js:34:14     - Unknown word (Leap)        -- * isLeapYear(): boolean;
src/moment.js:3:23      - Unknown word (subset)     -- It only supports a subset of moment.js api.
src/moment.js:51:12     - Unknown word (millisecond) -- * millisecond(): number;
src/moment.js:52:12     - Unknown word (millisecond) -- * millisecond(number): M;
src/moment.js:73:30     - Unknown word (Leap)        -- toDate dateFormat isLeapYear extend toStr isNil
src/moment.js:7:23      - Unknown word (Leap)       -- format, isValid, isLeapYear, isSame, isBefore
src/moment.js:8:39      - Unknown word (millisecond) -- hour, minute, second, millisecond, unix, clone,
src/moment.js:95:14     - Unknown word (millisecond) -- _millisecond: d.getMilliseconds(
src/morphDom.js:14:21     - Unknown word (licia)      -- * el2.className = 'licia';
src/morphDom.js:15:4      - Unknown word (morph)      -- * morphDom(el1, el2);
src/morphDom.js:16:39     - Unknown word (licia)      -- .className); // -> 'licia'
src/morphDom.js:1:4       - Unknown word (Morph)      -- /* Morph a dom tree to match
src/morphDom.js:25:28     - Unknown word (morph)      -- export declare function morphDom(from: Node, to: Node
src/morphDom.js:36:9      - Unknown word (morphed)    -- let morphed = from;
src/morphDom.js:37:11     - Unknown word (morphed)    -- const morphedType = morphed.nodeType
src/morphDom.js:37:25     - Unknown word (morphed)    -- const morphedType = morphed.nodeType;
src/morphDom.js:40:9      - Unknown word (morphed)    -- if (morphedType === toType) {
src/morphDom.js:57:9      - Unknown word (morph)      -- morphEl(morphed, to);
src/morphDom.js:5:20      - Unknown word (morph)      -- * |from  |Node to morph |
src/morphDom.js:6:23      - Unknown word (morphed)    -- |to |Node to be morphed|
src/morphDom.js:71:10     - Unknown word (morph)      -- function morphEl(from, to) {
src/morphDom.js:7:12      - Unknown word (Morphed)    -- * |return|Morphed node      |
src/morse.js:10:12     - Unknown word (Morse)      -- * |return|Morse code    |
src/morse.js:14:11     - Unknown word (Morse)      -- * Decode Morse code into text.
src/morse.js:18:12     - Unknown word (Morse)      -- * |morse |Morse code    |
src/morse.js:18:5      - Unknown word (morse)      -- * |morse |Morse code    |
src/morse.js:1:4       - Unknown word (Morse)      -- /* Morse code encoding and decoding
src/morse.js:23:16     - Unknown word (morse)      -- * const str = morse.encode('Hello, world
src/morse.js:25:4      - Unknown word (morse)      -- * morse.decode(str); // ->
src/morse.js:34:25     - Unknown word (morse)      -- export declare const morse: {
src/morse.js:36:15     - Unknown word (morse)      -- * decode(morse: string): string;
src/morse.js:5:19      - Unknown word (Morse)      -- * Turn text into Morse code.
src/morse.js:63:4      - Unknown word (copied)     -- // copied from http://freenet
src/naturalSort.js:24:12     - Unknown word (comparator) -- * comparator(a: any, b: any): number
src/naturalSort.js:33:33     - Unknown word (Comparator) -- arr.sort(naturalOrderComparator);
src/naturalSort.js:36:34     - Unknown word (Comparator) -- comparator = naturalOrderComparator;
src/naturalSort.js:36:9      - Unknown word (comparator) -- exports.comparator = naturalOrderComparator
src/naturalSort.js:39:22     - Unknown word (Comparator) -- function naturalOrderComparator(a, b) {
src/naturalSort.js:50:17     - Unknown word (chunkb)     -- let chunka, chunkb, anum, bnum;
src/naturalSort.js:50:25     - Unknown word (anum)       -- let chunka, chunkb, anum, bnum;
src/naturalSort.js:50:31     - Unknown word (bnum)       -- chunka, chunkb, anum, bnum;
src/naturalSort.js:50:9      - Unknown word (chunka)     -- let chunka, chunkb, anum, bnum
src/naturalSort.js:63:9      - Unknown word (chunka)     -- chunka = a.match(chunk)[0]
src/naturalSort.js:64:9      - Unknown word (chunkb)     -- chunkb = b.match(chunk)[0]
src/naturalSort.js:65:28     - Unknown word (chunka)     -- anum = !root.isNaN(chunka);
src/naturalSort.js:65:9      - Unknown word (anum)       -- anum = !root.isNaN(chunka
src/naturalSort.js:66:28     - Unknown word (chunkb)     -- bnum = !root.isNaN(chunkb);
src/naturalSort.js:66:9      - Unknown word (bnum)       -- bnum = !root.isNaN(chunkb
src/naturalSort.js:67:13     - Unknown word (anum)       -- if (anum && !bnum) {
src/naturalSort.js:67:22     - Unknown word (bnum)       -- if (anum && !bnum) {
src/naturalSort.js:70:13     - Unknown word (bnum)       -- if (bnum && !anum) {
src/naturalSort.js:70:22     - Unknown word (anum)       -- if (bnum && !anum) {
src/naturalSort.js:73:13     - Unknown word (anum)       -- if (anum && bnum) {
src/naturalSort.js:73:21     - Unknown word (bnum)       -- if (anum && bnum) {
src/naturalSort.js:74:26     - Unknown word (chunka)     -- const diff = chunka - chunkb;
src/naturalSort.js:74:35     - Unknown word (chunkb)     -- const diff = chunka - chunkb;
src/naturalSort.js:78:17     - Unknown word (chunka)     -- if (chunka.length !== chunkb.length
src/naturalSort.js:78:35     - Unknown word (chunkb)     -- if (chunka.length !== chunkb.length) {
src/negate.js:10:13     - Unknown word (even)       -- * function even(n) {
src/negate.js:13:30     - Unknown word (negate)     -- 3, 4, 5, 6].filter(negate(even)); // -> [1, 3
src/negate.js:13:37     - Unknown word (even)       -- 5, 6].filter(negate(even)); // -> [1, 3, 5]
src/negate.js:1:27      - Unknown word (negates)    -- Create a function that negates the result of the predicate
src/negate.js:21:28     - Unknown word (negate)     -- export declare function negate<T extends types.AnyFn
src/negate.js:5:28      - Unknown word (negate)     -- predicate|Predicate to negate|
src/nextTick.js:28:57     - Unknown word (LICIA)      -- process.nextTick && !LICIA_TEST) {
src/nextTick.js:9:4       - Unknown word (Otherwise)  -- * Otherwise setImmediate or setTimeout
src/normalizeHeader.js:23:8      - Unknown word (capitalize) -- _('map capitalize');
src/normalizeHeader.js:29:38     - Unknown word (capitalize) -- map(header.split('-'), capitalize).join('-');
src/normalizeHeader.js:43:8      - Unknown word (dnsprefetch) -- 'x-dnsprefetch-control': 'X-DNSPrefetch
src/normalizePhone.js:14:48     - Unknown word (trunk)      -- if local format has trunk prefix|
src/normalizePhone.js:14:5      - Unknown word (trunk)      -- * |trunkPrefix=false|True if
src/normalizePhone.js:26:8      - Unknown word (trunk)      -- * trunkPrefix: true
src/normalizePhone.js:40:12     - Unknown word (trunk)      -- * trunkPrefix?: boolean;
src/normalizePhone.js:49:26     - Unknown word (trunk)      -- const { countryCode, trunkPrefix = false } = options
src/normalizePhone.js:52:33     - Unknown word (Digit)      -- phone.replace(regNotDigit, '');
src/normalizePhone.js:59:34     - Unknown word (Trunk)      -- phone = phone.replace(regTrunkPrefix, '');
src/normalizePhone.js:66:13     - Unknown word (Digit)      -- const regNotDigit = /\D/g;
src/normalizePhone.js:67:10     - Unknown word (Trunk)      -- const regTrunkPrefix = /^\d/;
src/notify.js:12:37     - Unknown word (certain)    -- create instance when certain events like close, show
src/notify.js:12:98     - Unknown word (handled)    -- or error needed to be handled.
src/notify.js:16:12     - Unknown word (licia)      -- * notify('licia', {
src/notify.js:19:50     - Unknown word (licia)      -- notify.Notification('licia', {
src/notify.js:1:4       - Unknown word (Wrapper)    -- /* Wrapper for the Web Notifications
src/notify.js:8:17      - Unknown word (exactly)    -- * You can pass exactly the same options supported
src/now.js:16:18     - Unknown word (LICIA)      -- if (Date.now && !LICIA_TEST) {
src/now.js:1:4       - Unknown word (Gets)       -- /* Gets the number of milliseconds
src/now.js:1:69      - Unknown word (epoch)      -- elapsed since the Unix epoch.
src/objToStr.js:6:19      - Unknown word (representation) -- * |return|String representation of given value|
src/omit.js:1:4       - Unknown word (Opposite)   -- /* Opposite of pick.
src/omit.js:7:12      - Unknown word (Filtered)   -- * |return|Filtered object|
src/once.js:1:27      - Unknown word (invokes)    -- Create a function that invokes once.
src/once.js:5:24      - Unknown word (restrict)   -- |fn |Function to restrict |
src/open.js:1:9       - Unknown word (stuff)      -- /* Open stuff like url, files.
src/open.js:5:12      - Unknown word (Stuff)      -- * |target|Stuff to open|
src/optimizeCb.js:31:29     - Unknown word (accumulator) -- return function(accumulator, val, idx, collection
src/optimizeCb.js:32:37     - Unknown word (accumulator) -- return fn.call(ctx, accumulator, val, idx, collection
src/orientation.js:9:4       - Unknown word (Unbind)     -- * Unbind change event.
src/pad.js:15:32     - Unknown word (babca)      -- abc', 5, 'ab'); // -> 'babca'
src/pad.js:16:31     - Unknown word (ababa)      -- ab', 5, 'ab'); // -> 'ababa'
src/pad.js:1:37      - Unknown word (sides)      -- on the left and right sides if it's shorter than
src/pad.js:1:51      - Unknown word (shorter)    -- right sides if it's shorter than length.
src/parseArgs.js:14:23     - Unknown word (shorthands) -- |shorthands|option shorthands|
src/parseArgs.js:14:5      - Unknown word (shorthands) -- * |shorthands|option shorthands|
src/parseArgs.js:18:16     - Unknown word (eustia)     -- * parseArgs(['eustia', '--output', 'util
src/parseArgs.js:23:8      - Unknown word (shorthands) -- * shorthands: {
src/parseArgs.js:28:11     - Unknown word (remain)     -- * // -> {remain: ['eustia'], output
src/parseArgs.js:28:21     - Unknown word (eustia)     -- * // -> {remain: ['eustia'], output: 'util.js
src/parseArgs.js:40:12     - Unknown word (shorthands) -- * shorthands: any;
src/parseArgs.js:51:11     - Unknown word (shorthands) -- const shorthands = invert(opts.shorthands
src/parseArgs.js:53:11     - Unknown word (remain)     -- const remain = [];
src/parseArgs.js:54:19     - Unknown word (remain)     -- const ret = { remain: remain };
src/parseArgs.js:54:27     - Unknown word (remain)     -- const ret = { remain: remain };
src/parseArgs.js:68:17     - Unknown word (remain)     -- remain.push(arg);
src/parseArgs.js:82:19     - Unknown word (letters)    -- const letters = match[1];
src/parseArgs.js:84:33     - Unknown word (letters)    -- for (let j = 0; j < letters.length; j++) {
src/parseArgs.js:85:32     - Unknown word (letters)    -- const letter = letters[j];
src/parseHtml.js:10:20     - Unknown word (licia)      -- * parseHtml('<div>licia</div>', {
src/partial.js:1:34      - Unknown word (filling)    -- apply a function by filling in given arguments.
src/partial.js:24:11     - Unknown word (partials)   -- * ...partials: any[]
src/partial.js:30:33     - Unknown word (partials)   -- restArgs(function(fn, partials) {
src/partial.js:34:28     - Unknown word (partials)   -- args = args.concat(partials);
src/partial.js:6:8       - Unknown word (partials)   -- * |...partials|Arguments to be partially
src/pascalCase.js:6:19      - Unknown word (cased)      -- * |return|Pascal cased string|
src/perfNow.js:1:31      - Unknown word (microsecond) -- resolution time up to microsecond precision.
src/pick.js:1:13      - Unknown word (filtered)   -- /* Return a filtered copy of an object.
src/pick.js:7:12      - Unknown word (Filtered)   -- * |return|Filtered object|
src/pipe.js:10:29     - Unknown word (licia)      -- const through = require('licia/through');
src/pipe.js:1:21      - Unknown word (together)   -- /* Pipe all streams together.
src/pluck.js:11:10     - Unknown word (stooges)    -- * const stooges = [
src/pluck.js:13:17     - Unknown word (larry)      -- * { name: 'larry', age: 50 },
src/pluck.js:14:17     - Unknown word (curly)      -- * { name: 'curly', age: 60 }
src/pluck.js:16:10     - Unknown word (stooges)    -- * pluck(stooges, 'name'); // -> ['moe
src/pluck.js:16:4      - Unknown word (pluck)      -- * pluck(stooges, 'name'); /
src/pluck.js:16:43     - Unknown word (larry)      -- name'); // -> ['moe', 'larry', 'curly']
src/pluck.js:16:52     - Unknown word (curly)      -- > ['moe', 'larry', 'curly']
src/pluck.js:24:28     - Unknown word (pluck)      -- export declare function pluck(object: any, key: string
src/precision.js:24:11     - Unknown word (coefficient) -- const coefficient = num[1];
src/precision.js:27:11     - Unknown word (places)      -- const places = (coefficient.split
src/precision.js:27:21     - Unknown word (coefficient) -- const places = (coefficient.split('.')[1] || ''
src/precision.js:29:17     - Unknown word (places)      -- const ret = places - exponent;
src/prefetch.js:7:37      - Unknown word (possible)   -- link rel=prefetch>` if possible.
src/prefix.js:1:15      - Unknown word (prefixes)   -- /* Add vendor prefixes to a CSS attribute.
src/prefix.js:30:37     - Unknown word (kebab)      -- camelCase upperFirst has kebabCase');
src/prefix.js:33:28     - Unknown word (Prefixes)   -- name = name.replace(regPrefixes, '');
src/prefix.js:38:13     - Unknown word (prefixes)   -- let i = prefixes.length;
src/prefix.js:40:28     - Unknown word (prefixes)   -- const prefixName = prefixes[i] + upperFirst(name
src/prefix.js:51:13     - Unknown word (Prefixes)   -- (regPrefixes.test(camelCaseResult
src/prefix.js:52:9      - Unknown word (kebab)      -- kebabCase(camelCaseResult
src/prefix.js:56:7      - Unknown word (prefixes)   -- const prefixes = ['O', 'ms', 'Moz'
src/prefix.js:57:10     - Unknown word (Prefixes)   -- const regPrefixes = /^(O)|(ms)|(Moz)|
src/prefix.js:6:12      - Unknown word (Prefixed)   -- * |return|Prefixed property name|
src/promisify.js:9:67      - Unknown word (fulfill)    -- promise will always fulfill with an array of the
src/property.js:1:32      - Unknown word (itself)     -- a function that will itself return the key property
src/property.js:26:30     - Unknown word (shallow)    -- isArr(path)) return shallowProperty(path);
src/property.js:33:10     - Unknown word (shallow)    -- function shallowProperty(key) {
src/query.js:25:33     - Unknown word (eustia)     -- parse('name=eruda&name=eustia'); // -> {name: ['eruda
src/query.js:25:67     - Unknown word (eustia)     -- > {name: ['eruda', 'eustia']}
src/query.js:45:36     - Unknown word (Illegal)    -- trim(str).replace(regIllegalChars, '');
src/query.js:88:10     - Unknown word (Illegal)    -- const regIllegalChars = /^(\?|#|&)/g
src/quickSort.js:24:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/quickSort.js:40:11     - Unknown word (pivot)      -- const pivot = arr[floor((right
src/quickSort.js:43:31     - Unknown word (pivot)      -- while (cmp(arr[left], pivot) < 0) left++;
src/quickSort.js:44:32     - Unknown word (pivot)      -- while (cmp(arr[right], pivot) > 0) right--;
src/quickSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/raf.js:1:4       - Unknown word (Shortcut)   -- /* Shortcut for requestAnimationFrame
src/raf.js:8:21      - Unknown word (stuff)      -- * // Animation stuff
src/random.js:1:4       - Unknown word (Produces)   -- /* Produces a random number between
src/random.js:1:49      - Unknown word (inclusive)  -- between min and max(inclusive).
src/random.js:5:28      - Unknown word (possible)   -- min |Minimum possible value|
src/random.js:6:28      - Unknown word (possible)   -- max |Maximum possible value|
src/randomBytes.js:3:61      - Unknown word (possible)   -- object in browser if possible.
src/randomColor.js:14:16     - Unknown word (Lightness)  -- * |lightness |Lightness, number between 0 and
src/randomColor.js:14:5      - Unknown word (lightness)  -- * |lightness |Lightness, number between
src/randomColor.js:35:8      - Unknown word (lightness)  -- * lightness?: number;
src/randomColor.js:75:11     - Unknown word (lightness)  -- const lightness = options.lightness
src/randomColor.js:75:31     - Unknown word (lightness)  -- lightness = options.lightness || randomL().toFixed
src/randomColor.js:79:61     - Unknown word (lightness)  -- saturation * 100), Math.round(lightness * 100)],
src/randomId.js:12:31     - Unknown word (cbbcb)      -- randomId(5, 'abc'); // -> 'cbbcb'
src/randomId.js:1:25      - Unknown word (similar)    -- A tiny id generator, similar to nanoid.
src/randomId.js:1:6       - Unknown word (tiny)       -- /* A tiny id generator, similar
src/randomId.js:27:12     - Unknown word (Symbhas)    -- 'ModuleSymbhasOwnPr-0123456789ABCDEFGHIJKLNQ
src/randomId.js:27:35     - Unknown word (ABCDEFGHIJKLNQRTUVWXYZ) -- ModuleSymbhasOwnPr-0123456789ABCDEFGHIJKLNQRTUVWXYZ_cfgijkpqtvxz';
src/randomId.js:27:58     - Unknown word (cfgijkpqtvxz)           -- ABCDEFGHIJKLNQRTUVWXYZ_cfgijkpqtvxz';
src/randomItem.js:6:12      - Unknown word (Randomly)   -- * |return|Randomly picked item|
src/randomItem.js:6:21      - Unknown word (picked)     -- * |return|Randomly picked item|
src/range.js:1:11      - Unknown word (flexibly)   -- /* Create flexibly-numbered lists of integers
src/range.js:1:20      - Unknown word (numbered)   -- /* Create flexibly-numbered lists of integers.
src/rc4.js:14:35     - Unknown word (decrypted)  -- String to be encrypted/decrypted|
src/rc4.js:15:22     - Unknown word (decrypted)  -- * |return|Encrypted/decrypted string      |
src/rc4.js:19:17     - Unknown word (licia)      -- * rc4.encrypt('licia', 'Hello world'); /
src/rc4.js:1:8       - Unknown word (symmetric)  -- /* RC4 symmetric encryption implementation
src/rc4.js:20:17     - Unknown word (licia)      -- * rc4.decrypt('licia', 'j9y2VpSfR3AdNN8=
src/rc4.js:9:8       - Unknown word (decryption) -- * RC4 decryption, pass base64 string
src/ready.js:10:24     - Unknown word (manipulate) -- // It's safe to manipulate dom here.
src/ready.js:10:39     - Unknown word (here)       -- safe to manipulate dom here.
src/ready.js:1:39      - Unknown word (similar)    -- callback when dom is ready, similar to jQuery ready.
src/ready.js:27:7      - Unknown word (hack)       -- const hack = doc.documentElement
src/ready.js:29:15     - Unknown word (hack)       -- let loaded = (hack ? /^loaded|^c/ : /^loaded
src/reduce.js:9:23      - Unknown word (Accumulated) -- |return |Accumulated value             |
src/reduceRight.js:1:10      - Unknown word (associative) -- /* Right-associative version of reduce.
src/reject.js:1:4       - Unknown word (Opposite)   -- /* Opposite of filter.
src/reject.js:34:11     - Unknown word (negate)     -- _('safeCb negate filter types');
src/reject.js:37:24     - Unknown word (negate)     -- predicate = safeCb(negate(predicate), ctx);
src/reject.js:8:40      - Unknown word (didn't)     -- Array of all values that didn't pass predicate|
src/remove.js:15:10     - Unknown word (evens)      -- * const evens = remove(arr, function
src/remove.js:19:16     - Unknown word (evens)      -- * console.log(evens); // -> [2, 4]
src/remove.js:3:31      - Unknown word (mutates)    -- filter, this method mutates array.
src/remove.js:3:4       - Unknown word (Unlike)     -- * Unlike filter, this method
src/repeat.js:7:12      - Unknown word (Repeated)   -- * |return|Repeated string |
src/replaceAll.js:12:28     - Unknown word (goodbye)    -- replaceAll('hello world goodbye world', 'world', 'licia
src/replaceAll.js:12:54     - Unknown word (licia)      -- goodbye world', 'world', 'licia'); // -> 'hello licia
src/replaceAll.js:12:76     - Unknown word (licia)      -- licia'); // -> 'hello licia goodbye licia'
src/replaceAll.js:12:82     - Unknown word (goodbye)    -- // -> 'hello licia goodbye licia'
src/replaceAll.js:12:90     - Unknown word (licia)      -- hello licia goodbye licia'
src/replaceAll.js:6:28      - Unknown word (replaced)   -- substr |String to be replaced |
src/replaceAll.js:8:42      - Unknown word (replaced)   -- string with all substr replaced|
src/restArgs.js:1:9       - Unknown word (accumulates) -- /* This accumulates the arguments passed
src/restArgs.js:40:22     - Unknown word (faster)      -- // Call runs faster than apply.
src/restArgs.js:5:30      - Unknown word (needs)       -- function |Function that needs rest parameters
src/restArgs.js:6:35      - Unknown word (accumulates) -- startIndex|The start index to accumulates |
src/reverse.js:1:26      - Unknown word (mutating)   -- Reverse array without mutating it.
src/ric.js:1:4       - Unknown word (Shortcut)   -- /* Shortcut for requestIdleCallback
src/ric.js:35:21     - Unknown word (Remaining)  -- timeRemaining() {
src/ric.js:8:11      - Unknown word (Called)     -- * // Called during a browser's idle
src/ric.js:8:18      - Unknown word (during)     -- * // Called during a browser's idle periods
src/ric.js:8:42      - Unknown word (periods)    -- during a browser's idle periods
src/rmCookie.js:1:21      - Unknown word (possible)   -- /* Loop through all possible path and domain to remove
src/rmdir.js:1:4       - Unknown word (Recursively) -- /* Recursively remove directories.
src/rpad.js:12:4      - Unknown word (rpad)       -- * rpad('a', 5); // -> 'a
src/rpad.js:13:4      - Unknown word (rpad)       -- * rpad('a', 5, '-'); // ->
src/rpad.js:14:4      - Unknown word (rpad)       -- * rpad('abc', 3, '-'); //
src/rpad.js:15:33     - Unknown word (abcab)      -- abc', 5, 'ab'); // -> 'abcab'
src/rpad.js:15:4      - Unknown word (rpad)       -- * rpad('abc', 5, 'ab'); //
src/rpad.js:1:41      - Unknown word (shorter)    -- the right side if it's shorter than length.
src/rpad.js:23:28     - Unknown word (rpad)       -- export declare function rpad(str: string, len: number
src/rtrim.js:11:4      - Unknown word (rtrim)      -- * rtrim(' abc  '); // -> ' abc
src/rtrim.js:12:4      - Unknown word (rtrim)      -- * rtrim('_abc_', '_'); // -
src/rtrim.js:13:4      - Unknown word (rtrim)      -- * rtrim('_abc_', ['c', '_']
src/rtrim.js:21:28     - Unknown word (rtrim)      -- export declare function rtrim(str: string, chars?
src/rtrim.js:7:12      - Unknown word (Trimmed)    -- * |return|Trimmed string    |
src/safeDel.js:25:12     - Unknown word (cast)       -- _('isUndef castPath');
src/safeDel.js:28:12     - Unknown word (cast)       -- path = castPath(path, obj);
src/safeGet.js:25:12     - Unknown word (cast)       -- _('isUndef castPath');
src/safeGet.js:28:12     - Unknown word (cast)       -- path = castPath(path, obj);
src/safeSet.js:31:4      - Unknown word (cast)       -- _('castPath isUndef toStr isSymbol
src/safeSet.js:34:12     - Unknown word (cast)       -- path = castPath(path, obj);
src/safeSet.js:3:25      - Unknown word (doesn't)    -- If a portion of path doesn't exist, it's created
src/safeSet.js:3:33      - Unknown word (exist)      -- portion of path doesn't exist, it's created.
src/safeStorage.js:11:26     - Unknown word (licia)      -- localStorage.setItem('licia', 'util');
src/safeStorage.js:1:16      - Unknown word (safely)     -- /* Use storage safely in safari private browsing
src/safeStorage.js:1:26      - Unknown word (safari)     -- Use storage safely in safari private browsing and
src/safeStorage.js:1:41      - Unknown word (browsing)   -- safely in safari private browsing and older browsers.
src/safeStorage.js:1:54      - Unknown word (older)      -- private browsing and older browsers.
src/safeStorage.js:1:60      - Unknown word (browsers)   -- private browsing and older browsers.
src/safeStorage.js:39:12     - Unknown word (Safari)     -- // Safari private browsing
src/safeStorage.js:39:27     - Unknown word (browsing)   -- // Safari private browsing
src/scrollTo.js:12:21     - Unknown word (Tolerance)  -- * |tolerance=0    |Tolerance of target to scroll
src/scrollTo.js:12:5      - Unknown word (tolerance)  -- * |tolerance=0 |Tolerance of target
src/scrollTo.js:14:15     - Unknown word (Quart)      -- * |easing=outQuart|Easing function
src/scrollTo.js:20:8      - Unknown word (tolerance)  -- * tolerance: 0,
src/scrollTo.js:22:20     - Unknown word (Quart)      -- * easing: 'outQuart',
src/scrollTo.js:35:12     - Unknown word (tolerance)  -- * tolerance?: number;
src/scrollTo.js:43:4      - Unknown word (Tween)      -- _('Tween defaults noop isNum
src/scrollTo.js:51:9      - Unknown word (Tween)      -- new Tween({
src/scrollTo.js:62:37     - Unknown word (tolerance)  -- y: target - options.tolerance
src/scrollTo.js:71:5      - Unknown word (tolerance)  -- tolerance: 0,
src/scrollTo.js:73:17     - Unknown word (Quart)      -- easing: 'outQuart',
src/seedRandom.js:1:4       - Unknown word (Seeded)     -- /* Seeded random number generator
src/seedRandom.js:6:23      - Unknown word (possible)   -- |min=0 |Min possible value
src/seedRandom.js:7:27      - Unknown word (possible)   -- max=1 |Maximum possible value
src/seedRandom.js:9:33      - Unknown word (generates)  -- |Function that generates random number sequence
src/selectionSort.js:24:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/selectionSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/selector.js:118:25    - Unknown word (Combinators) -- if ((match = regCombinators.exec(selector))) {
src/selector.js:23:59     - Unknown word (licia)      -- test, input.user[name="licia"]');
src/selector.js:52:7      - Unknown word (pseudos)    -- const pseudos = `::?(${identifier
src/selector.js:54:10     - Unknown word (Combinators) -- const regCombinators = new RegExp(
src/selector.js:90:29     - Unknown word (pseudos)     -- reg: new RegExp(`^${pseudos}`),
src/shellSort.js:25:43     - Unknown word (Comparator) -- arr, cmp = isSorted.defComparator) {
src/shellSort.js:6:12      - Unknown word (Comparator) -- * |cmp   |Comparator |
src/shuffle.js:1:4       - Unknown word (Randomize)  -- /* Randomize the order of the elements
src/shuffle.js:5:21      - Unknown word (randomize)  -- * |arr   |Array to randomize|
src/shuffle.js:6:12      - Unknown word (Randomized) -- * |return|Randomized Array  |
src/singleton.js:11:18     - Unknown word (singleton)  -- * const fetch = singleton(async function fetch
src/singleton.js:1:37      - Unknown word (called)     -- async function is only called once before it resolves
src/singleton.js:1:59      - Unknown word (resolves)   -- called once before it resolves.
src/singleton.js:30:28     - Unknown word (singleton)  -- export declare function singleton<F extends types.Fn<Promise
src/singleton.js:39:11     - Unknown word (singleton)  -- const singleton = function() {
src/singleton.js:40:23     - Unknown word (singleton)  -- const cache = singleton.cache;
src/singleton.js:55:5      - Unknown word (singleton)  -- singleton.cache = {};
src/singleton.js:5:24      - Unknown word (restrict)   -- |fn |Function to restrict |
src/sizeof.js:10:20     - Unknown word (treated)     -- * Object keys are treated as strings.
src/sizeof.js:1:8       - Unknown word (approximate) -- /* Get approximate size of a js object
src/sizeof.js:5:22      - Unknown word (calculate)   -- * |obj   |Object to calculate|
src/sizeof.js:8:24      - Unknown word (counted)     -- A char of string is counted as 2 bytes. And 4 bytes
src/slice.js:7:40      - Unknown word (included)   -- length|End position, not included|
src/slugify.js:11:17     - Unknown word (pony)       -- * slugify('I ♥ pony'); // -> 'I-love-pony
src/slugify.js:11:34     - Unknown word (love)       -- I ♥ pony'); // -> 'I-love-pony'
src/slugify.js:11:39     - Unknown word (pony)       -- pony'); // -> 'I-love-pony'
src/slugify.js:12:17     - Unknown word (pony)       -- * slugify('I ♥ pony', { ' ': '_' }); //
src/slugify.js:12:48     - Unknown word (love)       -- ': '_' }); // -> 'I_love_pony'
src/slugify.js:12:53     - Unknown word (pony)       -- ' }); // -> 'I_love_pony'
src/slugify.js:36:18     - Unknown word (Forbidden)  -- ).replace(regForbidden, '');
src/slugify.js:39:10     - Unknown word (Forbidden)  -- const regForbidden = /[^\w\s$*_+~.()'"
src/slugify.js:43:1398   - Unknown word (baht)       -- nj,ћ c,џ dz,Ґ G,ґ g,฿ baht,ა a,ბ b,გ g,დ d,ე e
src/slugify.js:43:1949   - Unknown word (cruzeiro)   -- +,• *,… ...,₠ ecu,₢ cruzeiro,₣ french franc,₤ lira
src/slugify.js:43:1960   - Unknown word (french)     -- ,₠ ecu,₢ cruzeiro,₣ french franc,₤ lira,₥ mill
src/slugify.js:43:1967   - Unknown word (franc)      -- ₢ cruzeiro,₣ french franc,₤ lira,₥ mill,₦ naira
src/slugify.js:43:1975   - Unknown word (lira)       -- cruzeiro,₣ french franc,₤ lira,₥ mill,₦ naira,₧ peseta
src/slugify.js:43:1982   - Unknown word (mill)       -- french franc,₤ lira,₥ mill,₦ naira,₧ peseta,₨ rupee
src/slugify.js:43:1989   - Unknown word (naira)      -- franc,₤ lira,₥ mill,₦ naira,₧ peseta,₨ rupee,₩ won
src/slugify.js:43:1997   - Unknown word (peseta)     -- lira,₥ mill,₦ naira,₧ peseta,₨ rupee,₩ won,₪ new
src/slugify.js:43:2006   - Unknown word (rupee)      -- mill,₦ naira,₧ peseta,₨ rupee,₩ won,₪ new shequel
src/slugify.js:43:2024   - Unknown word (shequel)    -- ₨ rupee,₩ won,₪ new shequel,₫ dong,€ euro,₭ kip
src/slugify.js:43:2034   - Unknown word (dong)       -- won,₪ new shequel,₫ dong,€ euro,₭ kip,₮ tugrik
src/slugify.js:43:2041   - Unknown word (euro)       -- new shequel,₫ dong,€ euro,₭ kip,₮ tugrik,₯ drachma
src/slugify.js:43:2054   - Unknown word (tugrik)     -- dong,€ euro,₭ kip,₮ tugrik,₯ drachma,₰ penny,₱
src/slugify.js:43:2063   - Unknown word (drachma)    -- euro,₭ kip,₮ tugrik,₯ drachma,₰ penny,₱ peso,₲ guarani
src/slugify.js:43:2073   - Unknown word (penny)      -- tugrik,₯ drachma,₰ penny,₱ peso,₲ guarani,₳ austral
src/slugify.js:43:2081   - Unknown word (peso)       -- ₯ drachma,₰ penny,₱ peso,₲ guarani,₳ austral
src/slugify.js:43:2088   - Unknown word (guarani)    -- drachma,₰ penny,₱ peso,₲ guarani,₳ austral,₴ hryvnia
src/slugify.js:43:2098   - Unknown word (austral)    -- penny,₱ peso,₲ guarani,₳ austral,₴ hryvnia,₵ cedi,₹ indian
src/slugify.js:43:2108   - Unknown word (hryvnia)    -- guarani,₳ austral,₴ hryvnia,₵ cedi,₹ indian rupee
src/slugify.js:43:2118   - Unknown word (cedi)       -- austral,₴ hryvnia,₵ cedi,₹ indian rupee,₽ russian
src/slugify.js:43:2132   - Unknown word (rupee)      -- hryvnia,₵ cedi,₹ indian rupee,₽ russian ruble,₿ bitcoin
src/slugify.js:43:2140   - Unknown word (russian)    -- cedi,₹ indian rupee,₽ russian ruble,₿ bitcoin,℠ sm
src/slugify.js:43:2148   - Unknown word (ruble)      -- indian rupee,₽ russian ruble,₿ bitcoin,℠ sm,™ tm
src/slugify.js:43:2156   - Unknown word (bitcoin)    -- rupee,₽ russian ruble,₿ bitcoin,℠ sm,™ tm,∂ d,∆ delta
src/slugify.js:43:2205   - Unknown word (love)       -- delta,∑ sum,∞ infinity,♥ love,元 yuan,円 yen,﷼ rial
src/slugify.js:43:2212   - Unknown word (yuan)       -- ∞ infinity,♥ love,元 yuan,円 yen,﷼ rial';
src/slugify.js:43:2225   - Unknown word (rial)       -- love,元 yuan,円 yen,﷼ rial';
src/slugify.js:43:55     - Unknown word (cent)       -- less,> greater,| or,¢ cent,£ pound,¤ currency,
src/slugify.js:43:62     - Unknown word (pound)      -- greater,| or,¢ cent,£ pound,¤ currency,¥ yen,©
src/slugify.js:7:17      - Unknown word (Slugified)  -- * |return     |Slugified string  |
src/snakeCase.js:10:4      - Unknown word (snake)      -- * snakeCase('fooBar'); // -
src/snakeCase.js:11:4      - Unknown word (snake)      -- * snakeCase('foo bar'); //
src/snakeCase.js:12:4      - Unknown word (snake)      -- * snakeCase('foo.bar'); //
src/snakeCase.js:1:23      - Unknown word (snake)      -- Convert string to "snakeCase".
src/snakeCase.js:20:28     - Unknown word (snake)      -- export declare function snakeCase(str: string): string
src/snakeCase.js:6:12      - Unknown word (Snake)      -- * |return|Snake cased string|
src/snakeCase.js:6:18      - Unknown word (cased)      -- * |return|Snake cased string|
src/some.js:8:35      - Unknown word (passes)     -- True if any element passes the predicate check
src/sortBy.js:1:42      - Unknown word (ascending)  -- of elements sorted in ascending order by results of
src/sortBy.js:29:11     - Unknown word (pluck)      -- _('safeCb pluck map isUndef types')
src/sortBy.js:36:12     - Unknown word (pluck)      -- return pluck(
src/sortKeys.js:13:26     - Unknown word (recursively) -- deep=false|Sort keys recursively|
src/sortKeys.js:14:16     - Unknown word (Comparator)  -- * |comparator|Comparator |
src/sortKeys.js:14:5      - Unknown word (comparator)  -- * |comparator|Comparator
src/sortKeys.js:36:12     - Unknown word (comparator)  -- * comparator?: types.AnyFn;
src/sortKeys.js:45:19     - Unknown word (comparator)  -- const { deep, comparator } = options;
src/sortKeys.js:47:11     - Unknown word (visited)     -- const visited = [];
src/sortKeys.js:48:11     - Unknown word (visited)     -- const visitedResult = [];
src/sortKeys.js:51:21     - Unknown word (visited)     -- const idx = visited.indexOf(obj);
src/sortKeys.js:53:20     - Unknown word (visited)     -- return visitedResult[idx];
src/sortKeys.js:60:13     - Unknown word (visited)     -- visited.push(obj);
src/sortKeys.js:76:42     - Unknown word (comparator)  -- keys = keys(obj).sort(comparator);
src/sortKeys.js:97:29     - Unknown word (Comparator)  -- comparator: isSorted.defComparator
src/sortKeys.js:97:5      - Unknown word (comparator)  -- comparator: isSorted.defComparator
src/spaceCase.js:6:18      - Unknown word (cased)      -- * |return|Space cased string|
src/splitCase.js:1:10      - Unknown word (different)  -- /* Split different string case to an array
src/stackTrace.js:21:11     - Unknown word (orig)       -- const orig = Error.prepareStackTrace
src/stackTrace.js:24:31     - Unknown word (orig)       -- prepareStackTrace = orig;
src/strHash.js:1:25      - Unknown word (using)      -- String hash function using djb2.
src/strHash.js:29:32     - Unknown word (sure)       -- hash >>> 0; // Make sure it's always positive
src/strToBytes.js:13:16     - Unknown word (licia)      -- * strToBytes('licia'); // -> [108, 105,
src/strTpl.js:11:55     - Unknown word (licia)      -- , { name: { first: 'licia' } }); // -> 'Hello
src/strTpl.js:11:82     - Unknown word (licia)      -- } }); // -> 'Hello, licia!'
src/strTpl.js:20:60     - Unknown word (Plain)      -- string, data: types.PlainObj<any>): string;
src/strWidth.js:23:9      - Unknown word (Ansi)       -- _('stripAnsi isFullWidth');
src/strWidth.js:26:16     - Unknown word (Ansi)       -- str = stripAnsi(str);
src/stringify.js:3:17      - Unknown word (treated)    -- * Undefined is treated as null value.
src/stringifyAll.js:124:15    - Unknown word (visited)      -- const visitedObj = visitor.get(obj
src/stringifyAll.js:126:13    - Unknown word (visited)      -- if (visitedObj) {
src/stringifyAll.js:127:18    - Unknown word (visited)      -- id = visitedObj.id;
src/stringifyAll.js:13:32     - Unknown word (unenumerable) -- unenumerable=false|Include unenumerable keys|
src/stringifyAll.js:13:5      - Unknown word (unenumerable) -- * |unenumerable=false|Include unenumerable
src/stringifyAll.js:141:14    - Unknown word (visited)      -- if (!visitedObj) {
src/stringifyAll.js:17:37     - Unknown word (recursion)    -- |Max depth of recursion |
src/stringifyAll.js:20:26     - Unknown word (remaining)    -- When time is out, all remaining values will all be
src/stringifyAll.js:267:14    - Unknown word (visited)      -- this.visited = [];
src/stringifyAll.js:296:5     - Unknown word (correct)      -- correctReference(map);
src/stringifyAll.js:300:10    - Unknown word (correct)      -- function correctReference(map) {
src/stringifyAll.js:358:20    - Unknown word (Mini)         -- if (!isMiniProgram) {
src/stringifyAll.js:48:12     - Unknown word (unenumerable) -- * unenumerable?: boolean;
src/stringifyAll.js:59:131    - Unknown word (Mini)         -- allKeys contain isObj isMiniProgram create startWith
src/stringifyAll.js:71:9      - Unknown word (unenumerable) -- unenumerable = false,
src/stringifyAll.js:80:9      - Unknown word (unenumerable) -- unenumerable,
src/stripAnsi.js:10:23     - Unknown word (mcake)      -- stripAnsi('\u001b[4mcake\u001b[0m'); // -> 'cake
src/stripAnsi.js:10:9      - Unknown word (Ansi)       -- * stripAnsi('\u001b[4mcake\u001b
src/stripAnsi.js:18:33     - Unknown word (Ansi)       -- declare function stripAnsi(str: string): string
src/stripAnsi.js:1:10      - Unknown word (ansi)       -- /* Strip ansi codes from a string
src/stripAnsi.js:22:10     - Unknown word (Ansi)       -- const regAnsi = /[\u001b\u009b][[
src/stripAnsi.js:22:84     - Unknown word (nqry)       -- 0,4})*)?[0-9A-ORZcf-nqry=><]/g;
src/stripAnsi.js:25:27     - Unknown word (Ansi)       -- return str.replace(regAnsi, '');
src/stripBom.js:10:20     - Unknown word (licia)      -- * stripBom('\uFEFFlicia'); // -> 'licia'
src/stripBom.js:10:36     - Unknown word (licia)      -- uFEFFlicia'); // -> 'licia'
src/stripColor.js:10:25     - Unknown word (mred)       -- stripColor('\u001b[31mred\u001b[39m'); // ->
src/stripColor.js:1:10      - Unknown word (ansi)       -- /* Strip ansi color codes from a string
src/stripIndent.js:28:11     - Unknown word (placeholders) -- * ...placeholders: any[]
src/stripIndent.js:34:33     - Unknown word (placeholders) -- function(literals, ...placeholders) {
src/stripIndent.js:41:13     - Unknown word (placeholders) -- if (placeholders[i]) str += placeholders
src/stripIndent.js:41:37     - Unknown word (placeholders) -- placeholders[i]) str += placeholders[i];
src/stripIndent.js:45:17     - Unknown word (Lens)         -- const indentLens = [];
src/stripIndent.js:50:19     - Unknown word (Lens)         -- indentLens.push(indent[1].length
src/stripIndent.js:54:26     - Unknown word (Lens)         -- const indent = indentLens.length > 0 ? min.apply
src/stripIndent.js:54:66     - Unknown word (Lens)         -- min.apply(null, indentLens) : 0;
src/sum.js:5:23      - Unknown word (calculate)  -- |...num|Numbers to calculate|
src/table.js:231:15    - Unknown word (Fake)       -- let isFakeColumn = false;
src/table.js:23:10     - Unknown word (daughter)   -- * ['daughter', 'Emily', 'Smith']
src/table.js:23:22     - Unknown word (Emily)      -- * ['daughter', 'Emily', 'Smith'],
src/table.js:245:24    - Unknown word (rtrim)      -- data = rtrim(data, ' ' + border.bodyJoin
src/table.js:24:20     - Unknown word (John)       -- * ['father', 'John', 'Smith'],
src/table.js:251:19    - Unknown word (Fake)       -- isFakeColumn = true;
src/table.js:25:10     - Unknown word (mother)     -- * ['mother', 'Jane', 'Smith']
src/table.js:25:20     - Unknown word (Jane)       -- * ['mother', 'Jane', 'Smith']
src/table.js:262:23    - Unknown word (Fake)       -- if (isFakeColumn) {
src/table.js:63:53     - Unknown word (rtrim)      -- cloneDeep defaults trim rtrim filter');
src/template.js:11:44     - Unknown word (licia)      -- name %>!')({ name: 'licia' }); // -> 'Hello licia
src/template.js:11:68     - Unknown word (licia)      -- licia' }); // -> 'Hello licia!'
src/template.js:12:45     - Unknown word (licia)      -- name %></p>')({ name: '<licia>' }); // -> '<p>&lt
src/template.js:12:71     - Unknown word (licia)      -- ' }); // -> '<p>&lt;licia&gt;</p>'
src/template.js:13:35     - Unknown word (licia)      -- %if (echo) {%>Hello licia!<%}%>')({ echo: true
src/template.js:18:37     - Unknown word (LICIA)      -- licia' }); // -> '<p>LICIA</p>'
src/template.js:48:9      - Unknown word (interpolate) -- interpolate,
src/template.js:57:20     - Unknown word (interpolate) -- } else if (interpolate) {
src/template.js:58:34     - Unknown word (interpolate) -- src += `'+\n((__t=(${interpolate}))==null?'':__t)+\n
src/template.js:6:12      - Unknown word (Utility)    -- * |util  |Utility functions         |
src/template.js:7:12      - Unknown word (Compiled)   -- * |return|Compiled template function|
src/theme.js:13:16     - Unknown word (theme)      -- * Get current theme(light or dark).
src/theme.js:13:31     - Unknown word (dark)       -- current theme(light or dark).
src/theme.js:17:32     - Unknown word (theme)      -- on('change', function(theme) {
src/theme.js:17:4      - Unknown word (theme)      -- * theme.on('change', function
src/theme.js:18:20     - Unknown word (theme)      -- * console.log(theme); // -> 'dark'
src/theme.js:18:35     - Unknown word (dark)       -- console.log(theme); // -> 'dark'
src/theme.js:1:4       - Unknown word (Theme)      -- /* Theme helper.
src/theme.js:20:4      - Unknown word (theme)      -- * theme.get(); // -> 'light
src/theme.js:30:19     - Unknown word (Theme)      -- * interface ITheme extends Emitter {
src/theme.js:34:39     - Unknown word (Theme)      -- const theme: theme.ITheme;
src/theme.js:39:28     - Unknown word (prefers)    -- m = new MediaQuery('(prefers-color-scheme: dark)
src/theme.js:39:50     - Unknown word (dark)       -- prefers-color-scheme: dark)');
src/theme.js:43:31     - Unknown word (dark)       -- return m.isMatch() ? 'dark' : 'light';
src/theme.js:49:45     - Unknown word (dark)       -- exports.emit('change', 'dark'));
src/theme.js:50:7      - Unknown word (unmatch)    -- m.on('unmatch', () => exports.emit
src/theme.js:9:4       - Unknown word (Unbind)     -- * Unbind change event.
src/throttle.js:1:17      - Unknown word (throttled)  -- /* Return a new throttled version of the passed
src/throttle.js:7:16      - Unknown word (throttled)  -- * |return|New throttled function         |
src/through.js:11:4      - Unknown word (Shortcut)   -- * Shortcut for setting objectMode
src/through.js:1:4       - Unknown word (Tiny)       -- /* Tiny wrapper of stream Transform
src/through.js:1:9       - Unknown word (wrapper)    -- /* Tiny wrapper of stream Transform
src/tildify.js:10:19     - Unknown word (surunzi)    -- * tildify('/home/surunzi/dev'); // -> '~/dev
src/timeAgo.js:12:35     - Unknown word (just)       -- now - 1000 * 6); // -> just now
src/timeAgo.js:5:26      - Unknown word (calculate)  -- date |Date to calculate |
src/timeAgo.js:64:7      - Unknown word (just)       -- ['just now', 'right now'],
src/timeAgo.js:7:18      - Unknown word (Formatted)  -- * |return      |Formatted time ago string|
src/timeTaken.js:10:8      - Unknown word (Taken)      -- * timeTaken(function() {
src/timeTaken.js:12:19     - Unknown word (taken)      -- * }); // -> Time taken to execute given function
src/timeTaken.js:20:32     - Unknown word (Taken)      -- declare function timeTaken(fn: types.AnyFn): number
src/toArr.js:6:12      - Unknown word (Converted)  -- * |return|Converted array |
src/toAsync.js:10:27     - Unknown word (licia)      -- const sleep = require('licia/sleep');
src/toAsync.js:14:16     - Unknown word (licia)      -- * return 'licia';
src/toBool.js:6:12      - Unknown word (Converted)  -- * |return|Converted boolean|
src/toDate.js:6:12      - Unknown word (Converted)  -- * |return|Converted Date  |
src/toEl.js:3:4       - Unknown word (There)      -- * There should be only one root
src/toInt.js:6:12      - Unknown word (Converted)  -- * |return|Converted integer|
src/topoSort.js:10:4      - Unknown word (topo)        -- * topoSort([
src/topoSort.js:1:4       - Unknown word (Topological) -- /* Topological sorting algorithm.
src/topoSort.js:22:28     - Unknown word (topo)        -- export declare function topoSort(edges: any[]): any
src/topoSort.js:22:37     - Unknown word (edges)       -- declare function topoSort(edges: any[]): any[];
src/topoSort.js:25:20     - Unknown word (edges)       -- exports = function(edges) {
src/topoSort.js:26:29     - Unknown word (edges)       -- return sort(uniqueNodes(edges), edges);
src/topoSort.js:26:37     - Unknown word (edges)       -- uniqueNodes(edges), edges);
src/topoSort.js:44:11     - Unknown word (visited)     -- const visited = {};
src/topoSort.js:48:14     - Unknown word (visited)     -- if (!visited[i]) visit(nodes[i],
src/topoSort.js:51:29     - Unknown word (predecessors) -- function visit(node, i, predecessors) {
src/topoSort.js:52:13     - Unknown word (predecessors) -- if (predecessors.indexOf(node) >= 0)
src/topoSort.js:53:30     - Unknown word (Cyclic)       -- throw new Error('Cyclic dependency: ' + JSON
src/topoSort.js:56:13     - Unknown word (visited)      -- if (visited[i]) return;
src/topoSort.js:57:9      - Unknown word (visited)      -- visited[i] = true;
src/topoSort.js:5:5       - Unknown word (edges)       -- * |edges |Dependencies|
src/topoSort.js:65:19     - Unknown word (preds)        -- const preds = predecessors.concat
src/topoSort.js:65:27     - Unknown word (predecessors) -- const preds = predecessors.concat(node);
src/topoSort.js:68:52     - Unknown word (preds)        -- nodes.indexOf(child), preds);
src/trim.js:24:10     - Unknown word (rtrim)      -- _('ltrim rtrim');
src/trim.js:24:4      - Unknown word (ltrim)      -- _('ltrim rtrim');
src/trim.js:31:12     - Unknown word (ltrim)      -- return ltrim(rtrim(str, chars), chars
src/trim.js:31:18     - Unknown word (rtrim)      -- return ltrim(rtrim(str, chars), chars)
src/trim.js:7:12      - Unknown word (Trimmed)    -- * |return|Trimmed string    |
src/truncate.js:14:30     - Unknown word (indicate)   -- ellipsis='...'|String to indicate text is omitted|
src/truncate.js:14:5      - Unknown word (ellipsis)   -- * |ellipsis='...'|String to indicate
src/truncate.js:22:8      - Unknown word (ellipsis)   -- * ellipsis: '……'
src/truncate.js:36:12     - Unknown word (ellipsis)   -- * ellipsis?: string;
src/truncate.js:47:13     - Unknown word (ellipsis)   -- const { ellipsis, separator } = options
src/truncate.js:52:25     - Unknown word (ellipsis)   -- const end = width - ellipsis.length;
src/truncate.js:8:13      - Unknown word (Truncated)  -- * |return |Truncated string     |
src/tryIt.js:12:33     - Unknown word (might)      -- / Do something that might cause an error.
src/type.js:1:4       - Unknown word (Determine)  -- /* Determine the internal JavaScript
src/types.js:33:13     - Unknown word (Plain)      -- * type PlainObj<T> = { [name: string
src/ucs2.js:14:41     - Unknown word (using)      -- of code point values using a string.
src/ucs2.js:50:39     - Unknown word (nums)       -- map(chunk(arr, 32767), nums =>
src/ucs2.js:51:48     - Unknown word (nums)       -- fromCodePoint.apply(String, nums)
src/ucs2.js:5:20      - Unknown word (using)      -- * Create a string using an array of code point
src/ucs2.js:63:23     - Unknown word (surrogate)  -- // A high surrogate
src/uncaught.js:1:18      - Unknown word (uncaught)   -- /* Handle global uncaught errors and promise rejections
src/uncaught.js:29:4      - Unknown word (uncaught)   -- * uncaught.start();
src/uncaught.js:30:4      - Unknown word (uncaught)   -- * uncaught.addListener(err =>
src/uncaught.js:42:25     - Unknown word (uncaught)   -- export declare const uncaught: {
src/uniqId.js:10:12     - Unknown word (eustia)     -- * uniqId('eustia_'); // -> 'eustia_xxx
src/uniqId.js:10:30     - Unknown word (eustia)     -- uniqId('eustia_'); // -> 'eustia_xxx'
src/uniqId.js:1:15      - Unknown word (globally)   -- /* Generate a globally-unique id.
src/uniqId.js:6:12      - Unknown word (Globally)   -- * |return|Globally-unique id|
src/unique.js:6:25      - Unknown word (comparing)  -- cmp |Function for comparing values|
src/universalify.js:17:15     - Unknown word (universalify) -- * const fn = universalify(callbackFn, 'callback
src/universalify.js:18:8      - Unknown word (licia)        -- * fn('licia', (err, result) =>
src/universalify.js:19:36     - Unknown word (licia)        -- log(result); // -> 'licia'
src/universalify.js:21:8      - Unknown word (licia)        -- * fn('licia').then(result => {
src/universalify.js:22:36     - Unknown word (licia)        -- log(result); // -> 'licia'
src/universalify.js:32:28     - Unknown word (universalify) -- export declare function universalify(
src/unzip.js:1:4       - Unknown word (Opposite)   -- /* Opposite of zip.
src/unzip.js:24:8      - Unknown word (pluck)      -- _('map pluck max');
src/unzip.js:36:18     - Unknown word (pluck)      -- ret[i] = pluck(arr, i);
src/unzip.js:5:21      - Unknown word (grouped)    -- * |arr   |Array of grouped elements to process
src/unzip.js:6:25      - Unknown word (regrouped)  -- return|New array of regrouped elements     |
src/upperCase.js:6:12      - Unknown word (Uppercased) -- * |return|Uppercased string|
src/upperFirst.js:6:12      - Unknown word (Converted)  -- * |return|Converted string |
src/use.js:6:26      - Unknown word (executed)   -- method |Codes to be executed|
src/utf8.js:158:48    - Unknown word (detected)   -- Error('Invalid UTF-8 detected');
src/utf8.js:169:38    - Unknown word (continuation) -- throw new Error('Invalid continuation byte');
src/utf8.js:88:26     - Unknown word (inclusive)  -- / U+0080 to U+07FF, inclusive
src/utf8.js:93:30     - Unknown word (inclusive)  -- / U+0800 to U+FFFF, inclusive
src/utf8.js:97:33     - Unknown word (inclusive)  -- U+10000 to U+10FFFF, inclusive
src/uuid.js:1:22      - Unknown word (compliant)  -- * RFC4122 version 4 compliant uuid generator.
src/viewportScale.js:44:55     - Unknown word (avoid)      -- the separator, need to avoid the wrong result.
src/vlq.js:102:26    - Unknown word (CONTINUATION) -- digit |= VLQ_CONTINUATION_BIT;
src/vlq.js:120:11    - Unknown word (negate)       -- const negate = (value & 1) === 1
src/vlq.js:122:12    - Unknown word (negate)       -- return negate ? -value : value;
src/vlq.js:1:20      - Unknown word (quantity)   -- /* Variable-length quantity encoding and decoding
src/vlq.js:24:41     - Unknown word (Hwcqx)      -- 456, 789]); // -> '2HwcqxB'
src/vlq.js:26:17     - Unknown word (Hwcqx)      -- * vlq.decode('2HwcqxB'); // -> [123, 456
src/vlq.js:62:17     - Unknown word (continuation) -- let continuation = false;
src/vlq.js:66:21     - Unknown word (digit)        -- let digit = charToInt[str[i++
src/vlq.js:67:17     - Unknown word (continuation) -- continuation = (digit & VLQ_CONTINUATION
src/vlq.js:67:33     - Unknown word (digit)        -- continuation = (digit & VLQ_CONTINUATION_BIT
src/vlq.js:67:45     - Unknown word (CONTINUATION) -- continuation = (digit & VLQ_CONTINUATION_BIT) !== 0;
src/vlq.js:68:17     - Unknown word (digit)        -- digit &= VLQ_BASE_MASK;
src/vlq.js:69:34     - Unknown word (digit)        -- value = value + (digit << shift);
src/vlq.js:71:22     - Unknown word (continuation) -- } while (continuation);
src/vlq.js:92:11     - Unknown word (CONTINUATION) -- const VLQ_CONTINUATION_BIT = VLQ_BASE;
src/vlq.js:99:13     - Unknown word (digit)        -- let digit = value & VLQ_BASE_MASK
src/waterfall.js:10:4      - Unknown word (waterfall)  -- * waterfall(
src/waterfall.js:31:28     - Unknown word (waterfall)  -- export declare function waterfall(tasks: types.AnyFn[
src/wordWrap.js:11:14     - Unknown word (Licia)      -- * wordWrap('Licia is a utility library
src/wordWrap.js:11:25     - Unknown word (utility)    -- wordWrap('Licia is a utility library.', 10);
src/wordWrap.js:12:11     - Unknown word (Licia)      -- * // -> 'Licia is \na utility \nlibrary
src/wordWrap.js:12:24     - Unknown word (utility)    -- // -> 'Licia is \na utility \nlibrary.'
src/workerize.js:10:19     - Unknown word (workerize)  -- * const worker = workerize(function(a, b) {
src/workerize.js:1:11      - Unknown word (stand)      -- /* Move a stand-alone function to a
src/workerize.js:1:17      - Unknown word (alone)      -- /* Move a stand-alone function to a worker
src/workerize.js:23:28     - Unknown word (workerize)  -- export declare function workerize(fn: types.AnyFn): types
src/workerize.js:6:12      - Unknown word (Workerized) -- * |return|Workerized Function|
src/workerize.js:79:28     - Unknown word (workerize)  -- const id = uniqId('workerize');
src/wrap.js:1:31      - Unknown word (wrapper)    -- the function inside a wrapper function, passing it
src/wrap.js:1:49      - Unknown word (passing)    -- a wrapper function, passing it as the first argument
src/wrap.js:24:8      - Unknown word (wrapper)    -- * wrapper: types.AnyFn
src/wrap.js:30:24     - Unknown word (wrapper)    -- exports = function(fn, wrapper) {
src/wrap.js:31:20     - Unknown word (wrapper)    -- return partial(wrapper, fn);
src/wrap.js:6:13      - Unknown word (Wrapper)    -- * |wrapper|Wrapper function|
src/wrap.js:6:5       - Unknown word (wrapper)    -- * |wrapper|Wrapper function|
src/wx.js:11:9      - Unknown word (miniprogram) -- * env: miniprogram
src/wx.js:1:24      - Unknown word (mini)       -- Promised version of mini program wx object.
src/wx.js:1:4       - Unknown word (Promised)   -- /* Promised version of mini program
src/wx.js:44:11     - Unknown word (Characteristic) -- 'onBLECharacteristicValueChange',
src/wx.js:47:10     - Unknown word (Toast)          -- 'hideToast',
src/xpath.js:1:20      - Unknown word (using)      -- /* Select elements using xpath, IE is not supported
src/zip.js:1:10      - Unknown word (together)   -- /* Merge together the values of each of
src/zip.js:6:25      - Unknown word (grouped)    -- return|New array of grouped elements|
test/$.js:1:32      - Unknown word (because)    -- to write full tests because each module is already
test/$.js:90:28     - Unknown word (licia)      -- dom.attr('data-name', 'licia');
test/$.js:91:46     - Unknown word (licia)      -- data-name')).to.equal('licia');
test/$.js:98:23     - Unknown word (licia)      -- dom.data('name', 'licia');
test/$.js:99:46     - Unknown word (licia)      -- data-name')).to.equal('licia');
test/$insert.js:1:27      - Unknown word (licia)      -- el = util.h('div', 'licia');
test/$insert.js:21:15     - Unknown word (licia)      -- '<div>licia</div><div id="test"
test/$insert.js:25:35     - Unknown word (licia)      -- before('#test', '<div>licia</div>');
test/$insert.js:31:60     - Unknown word (licia)      -- mark"></div></div><div>licia</div>';
test/$insert.js:35:34     - Unknown word (licia)      -- after('#test', '<div>licia</div>');
test/$property.js:17:15     - Unknown word (Eustia)     -- $el.text('Eustia rocks!');
test/$property.js:17:22     - Unknown word (rocks)      -- $el.text('Eustia rocks!');
test/$property.js:18:43     - Unknown word (Eustia)     -- text($el)).to.equal('Eustia rocks!');
test/$property.js:18:50     - Unknown word (rocks)      -- el)).to.equal('Eustia rocks!');
test/$property.js:26:26     - Unknown word (Eustia)     -- property.text($el, 'Eustia rocks!!');
test/$property.js:26:33     - Unknown word (rocks)      -- property.text($el, 'Eustia rocks!!');
test/$property.js:27:34     - Unknown word (Eustia)     -- el.text()).to.equal('Eustia rocks!!');
test/$property.js:27:41     - Unknown word (rocks)      -- )).to.equal('Eustia rocks!!');
test/$property.js:32:28     - Unknown word (effects)    -- property.text([], 'No effects');
test/BloomFilter.js:1:19      - Unknown word (Bloom)      -- const bloom = new BloomFilter(256, 3);
test/BloomFilter.js:1:7       - Unknown word (bloom)      -- const bloom = new BloomFilter(2
test/BloomFilter.js:2:1       - Unknown word (bloom)      -- bloom.add('Bruce Wayne');
test/BloomFilter.js:2:12      - Unknown word (Bruce)      -- bloom.add('Bruce Wayne');
test/BloomFilter.js:2:18      - Unknown word (Wayne)      -- bloom.add('Bruce Wayne');
test/BloomFilter.js:3:1       - Unknown word (bloom)      -- bloom.add('Clark Kent');
test/BloomFilter.js:3:12      - Unknown word (Clark)      -- bloom.add('Clark Kent');
test/BloomFilter.js:3:18      - Unknown word (Kent)       -- bloom.add('Clark Kent');
test/BloomFilter.js:4:20      - Unknown word (Clark)      -- expect(bloom.test('Clark Kent')).to.equal(true
test/BloomFilter.js:4:26      - Unknown word (Kent)       -- expect(bloom.test('Clark Kent')).to.equal(true);
test/BloomFilter.js:4:8       - Unknown word (bloom)      -- expect(bloom.test('Clark Kent'))
test/BloomFilter.js:5:20      - Unknown word (Bruce)      -- expect(bloom.test('Bruce Wayne')).to.equal(true
test/BloomFilter.js:5:26      - Unknown word (Wayne)      -- expect(bloom.test('Bruce Wayne')).to.equal(true);
test/BloomFilter.js:5:8       - Unknown word (bloom)      -- expect(bloom.test('Bruce Wayne')
test/BloomFilter.js:6:20      - Unknown word (Tony)       -- expect(bloom.test('Tony Stark')).to.equal(false
test/BloomFilter.js:6:25      - Unknown word (Stark)      -- expect(bloom.test('Tony Stark')).to.equal(false);
test/Caseless.js:2:15      - Unknown word (Caseless)   -- const c = new Caseless(headers);
test/Class.js:12:5      - Unknown word (introduce)  -- introduce() {
test/Class.js:19:15     - Unknown word (meters)     -- ' meters tall. '
test/Class.js:19:22     - Unknown word (tall)       -- ' meters tall. '
test/Class.js:25:42     - Unknown word (blood)      -- function B(name, height, bloodType) {
test/Class.js:27:15     - Unknown word (blood)      -- this._bloodType = bloodType;
test/Class.js:27:27     - Unknown word (blood)      -- this._bloodType = bloodType;
test/Class.js:29:8      - Unknown word (Blood)      -- getBloodType() {
test/Class.js:30:22     - Unknown word (blood)      -- return this._bloodType;
test/Class.js:32:5      - Unknown word (introduce)  -- introduce() {
test/Class.js:34:32     - Unknown word (introduce)  -- this.callSuper(A, 'introduce') +
test/Class.js:35:21     - Unknown word (blood)      -- 'And my blood type is ' +
test/Class.js:51:18     - Unknown word (eustia)     -- const a = new A('eustia', 1.496);
test/Class.js:52:18     - Unknown word (eustia)     -- const b = new B('eustia', 1.496, 'A');
test/Class.js:53:18     - Unknown word (eustia)     -- const c = new C('eustia', 1.496);
test/Class.js:56:35     - Unknown word (eustia)     -- getName()).to.equal('eustia');
test/Class.js:61:17     - Unknown word (Blood)      -- expect(b.getBloodType()).to.equal('A'
test/Class.js:65:14     - Unknown word (introduce)  -- expect(a.introduce()).to.equal(
test/Class.js:66:21     - Unknown word (eustia)     -- 'My name is eustia. ' + "I'm 1.496 meters
test/Class.js:66:44     - Unknown word (meters)     -- eustia. ' + "I'm 1.496 meters tall. "
test/Class.js:66:51     - Unknown word (tall)       -- + "I'm 1.496 meters tall. "
test/Class.js:68:14     - Unknown word (introduce)  -- expect(b.introduce()).to.equal(
test/Class.js:70:24     - Unknown word (meters)     -- "I'm 1.496 meters tall. " +
test/Class.js:70:31     - Unknown word (tall)       -- "I'm 1.496 meters tall. " +
test/Delegator.js:11:23     - Unknown word (Delegator)  -- const delegator = new Delegator(host, 'target');
test/Delegator.js:11:7      - Unknown word (delegator)  -- const delegator = new Delegator(host
test/Delegator.js:14:5      - Unknown word (delegator)  -- delegator.method('a');
test/Delegator.js:19:5      - Unknown word (delegator)  -- delegator.getter('b');
test/Delegator.js:26:5      - Unknown word (delegator)  -- delegator.setter('c');
test/Delegator.js:34:5      - Unknown word (delegator)  -- delegator.access('d');
test/Dispatcher.js:12:5      - Unknown word (dispatcher) -- dispatcher.register(function(p
test/Dispatcher.js:14:16     - Unknown word (dispatcher) -- expect(dispatcher.isDispatching()).to
test/Dispatcher.js:14:29     - Unknown word (Dispatching) -- expect(dispatcher.isDispatching()).to.be.true;
test/Dispatcher.js:18:5      - Unknown word (dispatcher)  -- dispatcher.register(function(p
test/Dispatcher.js:1:5       - Unknown word (dispatcher) -- let dispatcher;
test/Dispatcher.js:23:25     - Unknown word (Dispatching) -- expect(dispatcher.isDispatching()).to.be.false;
test/Dispatcher.js:4:22      - Unknown word (Dispatcher) -- dispatcher = new Dispatcher();
test/Dispatcher.js:4:5       - Unknown word (dispatcher) -- dispatcher = new Dispatcher();
test/Emitter.js:44:5      - Unknown word (nonsense)   -- it('nonsense off', function() {
test/FileStore.js:28:20     - Unknown word (licia)      -- writeFile(p, '"licia"');
test/FileStore.js:8:20      - Unknown word (licia)      -- writeFile(p, '{licia}');
test/HashTable.js:2:24      - Unknown word (redhoodsu)  -- hashTable.set('name', 'redhoodsu');
test/HashTable.js:3:41      - Unknown word (redhoodsu)  -- get('name')).to.equal('redhoodsu');
test/HashTable.js:4:24      - Unknown word (licia)      -- hashTable.set('name', 'licia');
test/HashTable.js:5:41      - Unknown word (licia)      -- get('name')).to.equal('licia');
test/Heap.js:12:17     - Unknown word (peek)       -- expect(heap.peek()).to.equal(4);
test/Heap.js:16:17     - Unknown word (peek)       -- expect(heap.peek()).to.be.an('undefined
test/HeapSnapshot.js:20:20     - Unknown word (edges)      -- const { nodes, edges } = heapSnapshot;
test/HeapSnapshot.js:22:12     - Unknown word (edges)      -- expect(edges.size).to.equal(1193
test/HeapSnapshot.js:30:9      - Unknown word (detachedness) -- detachedness: false
test/HeapSnapshot.js:32:22     - Unknown word (edges)        -- const lastEdge = edges.tail.value;
test/I18n.js:17:16     - Unknown word (welcome)    -- expect(i18n.t('welcome', { name: 'licia' }
test/I18n.js:17:35     - Unknown word (licia)      -- 'welcome', { name: 'licia' })).to.equal('Hello
test/I18n.js:17:63     - Unknown word (licia)      -- )).to.equal('Hello, licia!');
test/I18n.js:3:9       - Unknown word (welcome)    -- welcome: 'Hello, {{name}}!'
test/I18n.js:9:9       - Unknown word (welcome)    -- welcome: '你好，{{name}}！'
test/JsonTransformer.js:14:13     - Unknown word (lastname)   -- lastname: 'Su',
test/JsonTransformer.js:15:13     - Unknown word (firstname)  -- firstname: 'RedHood'
test/JsonTransformer.js:15:28     - Unknown word (Hood)       -- firstname: 'RedHood'
test/JsonTransformer.js:22:23     - Unknown word (firstname)  -- return author.firstname + author.lastname;
test/JsonTransformer.js:22:42     - Unknown word (lastname)   -- author.firstname + author.lastname;
test/JsonTransformer.js:27:21     - Unknown word (Hood)       -- author: 'RedHoodSu',
test/LocalStore.js:21:38     - Unknown word (licia)      -- setItem('LocalStore', '"licia"');
test/LocalStore.js:3:38      - Unknown word (licia)      -- setItem('LocalStore', '{licia}');
test/Logger.js:1:28      - Unknown word (Licia)      -- logger = new Logger('Licia', Logger.level.ERROR
test/Logger.js:24:8      - Unknown word (formatter)  -- logger.formatter = function(type, argList
test/Logger.js:2:31      - Unknown word (Licia)      -- logger.name).to.equal('Licia');
test/Lru.js:18:25     - Unknown word (licia)      -- cache.set('test1', 'licia1');
test/Lru.js:3:24      - Unknown word (licia)      -- cache.set('test', 'licia');
test/Lru.js:4:25      - Unknown word (licia)      -- cache.set('test1', 'licia1');
test/Lru.js:5:25      - Unknown word (licia)      -- cache.set('test2', 'licia2');
test/Lru.js:6:41      - Unknown word (licia)      -- get('test')).to.equal('licia');
test/Lru.js:7:24      - Unknown word (redhoodsu)  -- cache.set('test', 'redhoodsu');
test/Lru.js:8:41      - Unknown word (redhoodsu)  -- get('test')).to.equal('redhoodsu');
test/PriorityQueue.js:12:13     - Unknown word (orange)     -- value: 'orange'
test/PriorityQueue.js:16:14     - Unknown word (peek)       -- expect(queue.peek()).to.eql({ priority
test/PriorityQueue.js:16:54     - Unknown word (orange)     -- priority: 500, value: 'orange' });
test/Promise.js:20:39     - Unknown word (adapter)    -- aplus-tests').mocha(adapter);
test/Promise.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia promises-aplus-tests
test/Promise.js:5:7       - Unknown word (adapter)    -- const adapter = {
test/Queue.js:16:18     - Unknown word (peek)       -- expect(queue.peek()).to.be.an('undefined
test/Queue.js:9:18      - Unknown word (peek)       -- expect(queue.peek()).to.equal(3);
test/QuickLru.js:2:20      - Unknown word (licia)      -- cache.set('test', 'licia');
test/QuickLru.js:3:21      - Unknown word (licia)      -- cache.set('test1', 'licia1');
test/QuickLru.js:4:21      - Unknown word (licia)      -- cache.set('test2', 'licia2');
test/QuickLru.js:5:37      - Unknown word (licia)      -- get('test')).to.equal('licia');
test/QuickLru.js:6:20      - Unknown word (redhoodsu)  -- cache.set('test', 'redhoodsu');
test/QuickLru.js:8:37      - Unknown word (redhoodsu)  -- get('test')).to.equal('redhoodsu');
test/Readiness.js:10:32     - Unknown word (Initialized) -- readiness.signal('countInitialized');
test/Readiness.js:10:9      - Unknown word (readiness)   -- readiness.signal('countInitialized
test/Readiness.js:12:12     - Unknown word (readiness)   -- expect(readiness.isReady('expectCalled
test/Readiness.js:12:37     - Unknown word (Called)      -- readiness.isReady('expectCalled')).to.be.false;
test/Readiness.js:13:28     - Unknown word (Initialized) -- readiness.ready(['countInitialized', 'expectCalled']).then
test/Readiness.js:13:49     - Unknown word (Called)      -- countInitialized', 'expectCalled']).then(function()
test/Readiness.js:14:41     - Unknown word (Called)      -- readiness.isReady('expectCalled')).to.be.true;
test/Readiness.js:2:11      - Unknown word (readiness)  -- const readiness = new Readiness();
test/Readiness.js:2:27      - Unknown word (Readiness)  -- const readiness = new Readiness();
test/Readiness.js:3:27      - Unknown word (Initialized) -- readiness.ready('countInitialized', function() {
test/Readiness.js:3:5       - Unknown word (readiness)  -- readiness.ready('countInitialized
test/Readiness.js:5:33      - Unknown word (Called)      -- readiness.signal('expectCalled');
test/Readiness.js:5:9       - Unknown word (readiness)   -- readiness.signal('expectCalled
test/ReduceStore.js:55:11     - Unknown word (unscribe)   -- it('delay unscribe', function() {
test/ResizeSensor.js:26:25     - Unknown word (above)      -- expect(i).to.be.above(0);
test/Select.js:10:45     - Unknown word (licia)      -- ).html()).to.equal('licia');
test/Select.js:8:23      - Unknown word (licia)      -- this.innerHTML = 'licia';
test/SessionStore.js:21:42     - Unknown word (licia)      -- setItem('SessionStore', '"licia"');
test/SessionStore.js:3:42      - Unknown word (licia)      -- setItem('SessionStore', '{licia}');
test/Socket.js:10:32     - Unknown word (Closure)    -- close(1000, 'Normal Closure');
test/Socket.js:17:43     - Unknown word (Closure)    -- reason).to.equal('Normal Closure');
test/Socket.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia ws && node ./lib/server
test/Stack.js:13:18     - Unknown word (peek)       -- expect(stack.peek()).to.be.an('undefined
test/State.js:12:27     - Unknown word (eustia)     -- expect(src).to.equal('eustia');
test/State.js:18:13     - Unknown word (eustia)     -- state.play('eustia');
test/Trace.js:11:50     - Unknown word (licia)      -- resolve(process.cwd(), '.licia/test/Trace.json');
test/Tracing.js:23:19     - Unknown word (licia)      -- '.licia/test/Tracing.json'
test/Tracing.js:2:24      - Unknown word (fibonacci)  -- const fibonacci = util.fibonacci;
test/Tracing.js:2:7       - Unknown word (fibonacci)  -- const fibonacci = util.fibonacci;
test/Tracing.js:37:13     - Unknown word (instant)    -- tracing.instant('instant', 'startDurationTest
test/Tracing.js:37:22     - Unknown word (instant)    -- tracing.instant('instant', 'startDurationTest
test/Tracing.js:39:29     - Unknown word (fibonacci)  -- tracing.begin('basic', 'fibonacci(50)');
test/Tracing.js:40:5      - Unknown word (fibonacci)  -- fibonacci(50);
test/Tracing.js:51:13     - Unknown word (instant)    -- tracing.instant('instant', 'finishTest
test/Tracing.js:51:22     - Unknown word (instant)    -- tracing.instant('instant', 'finishTest', 'g'
test/Tracing.js:73:16     - Unknown word (Licia)      -- name: 'Licia'
test/Tracing.js:79:13     - Unknown word (instant)    -- tracing.instant('pause', 'do nothing
test/Tracing.js:9:23      - Unknown word (Licia)      -- processName: 'Licia',
test/Trie.js:10:18     - Unknown word (carpet)     -- expect(trie.has('carpet')).to.be.false;
test/Trie.js:11:11     - Unknown word (carry)      -- trie.add('carry');
test/Trie.js:12:43     - Unknown word (cart)       -- car')).to.eql(['car', 'cart', 'carry']);
test/Trie.js:12:51     - Unknown word (carry)      -- eql(['car', 'cart', 'carry']);
test/Trie.js:2:11      - Unknown word (carpet)     -- trie.add('carpet');
test/Trie.js:5:11      - Unknown word (cart)       -- trie.add('cart');
test/Trie.js:7:14      - Unknown word (carpet)     -- trie.remove('carpet');
test/Trie.js:8:14      - Unknown word (carbon)     -- trie.remove('carbon');
test/Trie.js:9:20      - Unknown word (carpet)     -- expect(trie.words('carpet')).to.eql([]);
test/Tween.js:13:5      - Unknown word (tween)      -- tween.to({ a: 100 }, 100,
test/Tween.js:19:11     - Unknown word (tween)      -- const tween = new Tween(obj);
test/Tween.js:19:23     - Unknown word (Tween)      -- const tween = new Tween(obj);
test/Tween.js:29:26     - Unknown word (below)      -- expect(obj.a).to.below(100);
test/Tween.js:2:11      - Unknown word (tween)      -- const tween = new Tween({ a: 0
test/Tween.js:2:23      - Unknown word (Tween)      -- const tween = new Tween({ a: 0 });
test/Tween.js:38:23     - Unknown word (Tween)      -- const tween = new Tween(obj);
test/Tween.js:4:5       - Unknown word (tween)      -- tween.on('update', function
test/Tween.js:5:35      - Unknown word (least)      -- expect(target.a).to.be.at.least(0);
test/Tween.js:8:5       - Unknown word (tween)      -- tween.on('end', function(target
test/Url.js:16:37     - Unknown word (surunzi)    -- parseUrl.auth).to.equal('surunzi');
test/Url.js:31:5      - Unknown word (manipulate) -- it('manipulate query', function()
test/Url.js:4:41      - Unknown word (surunzi)    -- hostname).to.equal('surunzi.com');
test/Wrr.js:17:24     - Unknown word (above)      -- expect(counts.A).to.be.above(counts.C);
test/Wrr.js:18:24     - Unknown word (above)      -- expect(counts.B).to.be.above(counts.A);
test/abbrev.js:17:10     - Unknown word (fool)       -- 'fool',
test/abbrev.js:18:10     - Unknown word (foom)       -- 'foom',
test/abbrev.js:20:10     - Unknown word (pope)       -- 'pope',
test/abbrev.js:22:13     - Unknown word (fool)       -- fool: 'fool',
test/abbrev.js:22:20     - Unknown word (fool)       -- fool: 'fool',
test/abbrev.js:23:13     - Unknown word (foom)       -- foom: 'foom',
test/abbrev.js:23:20     - Unknown word (foom)       -- foom: 'foom',
test/abbrev.js:26:19     - Unknown word (pope)       -- pop: 'pope',
test/abbrev.js:27:13     - Unknown word (pope)       -- pope: 'pope'
test/abbrev.js:27:20     - Unknown word (pope)       -- pope: 'pope'
test/abbrev.js:45:10     - Unknown word (fool)       -- 'fool',
test/abbrev.js:46:10     - Unknown word (folding)    -- 'folding',
test/abbrev.js:47:10     - Unknown word (flop)       -- 'flop',
test/abbrev.js:49:18     - Unknown word (flop)       -- fl: 'flop',
test/abbrev.js:50:19     - Unknown word (flop)       -- flo: 'flop',
test/abbrev.js:51:13     - Unknown word (flop)       -- flop: 'flop',
test/abbrev.js:51:20     - Unknown word (flop)       -- flop: 'flop',
test/abbrev.js:52:19     - Unknown word (folding)    -- fol: 'folding',
test/abbrev.js:53:13     - Unknown word (fold)       -- fold: 'folding',
test/abbrev.js:53:20     - Unknown word (folding)    -- fold: 'folding',
test/abbrev.js:54:13     - Unknown word (foldi)      -- foldi: 'folding',
test/abbrev.js:54:21     - Unknown word (folding)    -- foldi: 'folding',
test/abbrev.js:55:13     - Unknown word (foldin)     -- foldin: 'folding',
test/abbrev.js:55:22     - Unknown word (folding)    -- foldin: 'folding',
test/abbrev.js:58:13     - Unknown word (fool)       -- fool: 'fool'
test/abbrev.js:67:10     - Unknown word (acde)       -- 'acde',
test/abbrev.js:74:18     - Unknown word (acde)       -- ac: 'acde',
test/abbrev.js:75:19     - Unknown word (acde)       -- acd: 'acde',
test/abbrev.js:76:13     - Unknown word (acde)       -- acde: 'acde'
test/abbrev.js:76:20     - Unknown word (acde)       -- acde: 'acde'
test/ajax.js:10:11     - Unknown word (fake)       -- const fakeXMLHttpRequest = sinon
test/ajax.js:10:41     - Unknown word (Fake)       -- fakeXMLHttpRequest = sinon.useFakeXMLHttpRequest();
test/ajax.js:12:5      - Unknown word (fake)       -- fakeXMLHttpRequest.onCreate
test/ajax.js:159:25    - Unknown word (going)      -- // It's not going to work in nodejs environment
test/ajax.js:159:61    - Unknown word (because)    -- in nodejs environment because of sinon's implementation
test/ajax.js:15:5      - Unknown word (ajax)       -- ajax.setting.xhr = function
test/ajax.js:16:20     - Unknown word (fake)       -- return new fakeXMLHttpRequest();
test/ajax.js:25:12     - Unknown word (ajax)       -- expect(ajax).to.be.a('function'
test/ajax.js:27:5      - Unknown word (ajax)       -- ajax({
test/ajax.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia sinon
test/ajax.js:44:5      - Unknown word (ajax)       -- ajax({
test/ajax.js:55:5      - Unknown word (ajax)       -- ajax({
test/allKeys.js:14:5      - Unknown word (four)       -- obj.four = 4;
test/allKeys.js:15:29     - Unknown word (four)       -- defineProperty(obj, 'four', {
test/allKeys.js:18:22     - Unknown word (five)       -- const five = Symbol('five');
test/allKeys.js:18:7      - Unknown word (five)       -- const five = Symbol('five');
test/allKeys.js:19:5      - Unknown word (five)       -- obj[five] = 5;
test/allKeys.js:33:5      - Unknown word (unenumerable) -- it('unenumerable', () => {
test/allKeys.js:35:9      - Unknown word (unenumerable) -- unenumerable: true
test/allKeys.js:37:27     - Unknown word (four)         -- expect(keys).to.eql(['four', 'one', 'two', 'zero
test/allKeys.js:46:26     - Unknown word (five)         -- expect(contain(keys, five)).to.be.true;
test/ansiColor.js:17:21     - Unknown word (ansi)       -- console.log(ansiColor[color](TEXT));
test/ansiColor.js:32:21     - Unknown word (ansi)       -- console.log(ansiColor[color](TEXT));
test/ansiColor.js:36:5      - Unknown word (bright)     -- it('bright colors', () => {
test/ansiColor.js:47:21     - Unknown word (ansi)       -- console.log(ansiColor[color](TEXT));
test/ansiColor.js:51:5      - Unknown word (bright)     -- it('bright background colors',
test/ansiColor.js:62:21     - Unknown word (ansi)       -- console.log(ansiColor[color](TEXT));
test/bind.js:5:14      - Unknown word (eustia)     -- { name: 'eustia' },
test/bind.js:6:13      - Unknown word (utility)    -- 'I am a utility library.'
test/bind.js:9:24      - Unknown word (eustia)     -- expect(fn()).to.equal('eustia: I am a utility library
test/bind.js:9:39      - Unknown word (utility)    -- equal('eustia: I am a utility library.');
test/bytesToStr.js:3:36      - Unknown word (licia)      -- 105, 99, 105, 97], 'licia'],
test/callbackify.js:3:55      - Unknown word (shouldn't)  -- reject(new Error("value shouldn't less then 5"));
test/cgroup.js:4:14      - Unknown word (cpuset)     -- console.log('cpuset cpus', cgroup.cpuset
test/cgroup.js:4:35      - Unknown word (cpuset)     -- cpuset cpus', cgroup.cpuset.cpus());
test/cliHelp.js:17:12     - Unknown word (licia)      -- name: 'licia',
test/cliHelp.js:1:12      - Unknown word (Ansi)       -- const stripAnsi = util.stripAnsi;
test/cliHelp.js:1:29      - Unknown word (Ansi)       -- stripAnsi = util.stripAnsi;
test/cliHelp.js:22:13     - Unknown word (Ansi)       -- expect(stripAnsi(cliHelp(data))).to.eql
test/cliHelp.js:25:3      - Unknown word (licia)      -- licia <command> [options]
test/cliHelp.js:31:32     - Unknown word (more)       -- help <command>' for more information on a specific
test/cliHelp.js:31:6      - Unknown word (licia)      -- Run 'licia help <command>' for
test/cliHelp.js:34:13     - Unknown word (Ansi)       -- expect(stripAnsi(cliHelp(test))).to.eql
test/cliHelp.js:38:8      - Unknown word (lpad)       -- test lpad --browser
test/cliHelp.js:7:41      - Unknown word (lpad)       -- module-name> [options]', 'lpad --browser'],
test/clone.js:2:24      - Unknown word (licia)      -- const a = { name: 'licia' };
test/compose.js:10:17     - Unknown word (licia)      -- expect(welcome('licia')).to.equal('hi: LICIA
test/compose.js:10:40     - Unknown word (LICIA)      -- licia')).to.equal('hi: LICIA!');
test/compose.js:10:8      - Unknown word (welcome)    -- expect(welcome('licia')).to.equal(
test/compose.js:1:7       - Unknown word (welcome)    -- const welcome = compose(
test/container.js:32:29     - Unknown word (adding)     -- 'memory usage after adding 10M',
test/container.js:35:36     - Unknown word (adding)     -- log('memory load after adding 10M', container.memLoad
test/container.js:36:42     - Unknown word (above)      -- newMemUsage - memUsage).to.be.above(1024 * 1024 * 8);
test/container.js:44:33     - Unknown word (vars)       -- eslint-disable no-unused-vars */
test/cookie.js:2:25      - Unknown word (eustia)     -- cookie.set('name', 'eustia');
test/cookie.js:3:42      - Unknown word (eustia)     -- get('name')).to.equal('eustia');
test/cookie.js:6:16      - Unknown word (eustia)     -- name: 'eustia',
test/createAssigner.js:3:7       - Unknown word (Assigner)   -- createAssigner(function() {
test/createUrl.js:10:28     - Unknown word (plain)      -- test', { type: 'text/plain' }],
test/css.js:135:32    - Unknown word (Sans)       -- font-family: "Open Sans";
test/css.js:136:24    - Unknown word (fonts)      -- src: url("/fonts/OpenSans-Regular-webfont
test/css.js:136:34    - Unknown word (Sans)       -- src: url("/fonts/OpenSans-Regular-webfont.woff
test/css.js:146:39    - Unknown word (Sans)       -- value: '"Open Sans"'
test/css.js:152:36    - Unknown word (fonts)      -- 'url("/fonts/OpenSans-Regular-webfont
test/css.js:152:46    - Unknown word (Sans)       -- 'url("/fonts/OpenSans-Regular-webfont.woff
test/cssPriority.js:6:17      - Unknown word (important)  -- important: true,
test/curry.js:5:20      - Unknown word (curry)      -- const curriedAdd = curry(add);
test/curry.js:5:7       - Unknown word (curried)    -- const curriedAdd = curry(add);
test/curry.js:6:8       - Unknown word (curried)    -- expect(curriedAdd(1, 2, 3)).to.equal
test/curry.js:7:8       - Unknown word (curried)    -- expect(curriedAdd(1, 2)).to.be.a('function
test/curry.js:8:8       - Unknown word (curried)    -- expect(curriedAdd(1)(2)).to.be.a('function
test/curry.js:9:8       - Unknown word (curried)    -- expect(curriedAdd(1)(2)(3)).to.equal
test/dataUrl.js:21:37     - Unknown word (plain)      -- dataUrl.parse('data:text/plain;base64,SGVsbG8sIFdvcmxkIQ
test/dataUrl.js:21:59     - Unknown word (Fdvcmxk)    -- plain;base64,SGVsbG8sIFdvcmxkIQ==')).to.eql(
test/dataUrl.js:23:29     - Unknown word (Fdvcmxk)    -- data: 'SGVsbG8sIFdvcmxkIQ==',
test/dataUrl.js:24:25     - Unknown word (plain)      -- mime: 'text/plain',
test/dataUrl.js:50:19     - Unknown word (plain)      -- 'text/plain'
test/dataUrl.js:52:27     - Unknown word (plain)      -- to.equal('data:text/plain;base64,SGVsbG8sIFdvcmxkIQ
test/dataUrl.js:52:49     - Unknown word (Fdvcmxk)    -- plain;base64,SGVsbG8sIFdvcmxkIQ==');
test/dataUrl.js:61:49     - Unknown word (Fdvcmxk)    -- plain;base64,SGVsbG8sIFdvcmxkIQ==');
test/dataUrl.js:7:21      - Unknown word (plain)      -- mime: 'text/plain',
test/dateFormat.js:10:20     - Unknown word (November)   -- longDate: 'November 19, 2016',
test/dateFormat.js:11:20     - Unknown word (Saturday)   -- fullDate: 'Saturday, November 19, 2016'
test/dateFormat.js:11:30     - Unknown word (November)   -- fullDate: 'Saturday, November 19, 2016',
test/dateFormat.js:19:10     - Unknown word (expects)    -- each(expects, function(val, key)
test/dateFormat.js:3:17      - Unknown word (using)      -- it('format date using mask', function() {
test/dateFormat.js:6:11      - Unknown word (expects)    -- const expects = {
test/debug.js:11:12     - Unknown word (another)    -- d2('create another 100000 uuid');
test/debug.js:14:18     - Unknown word (uninteresting) -- d('doing lots of uninteresting work');
test/debug.js:14:4      - Unknown word (doing)      -- d('doing lots of uninteresting
test/debug.js:6:4       - Unknown word (booting)    -- d('booting %s', 'test');
test/debug.js:7:5       - Unknown word (booting)    -- d2('booting %s', 'test2');
test/deburr.js:1:19      - Unknown word (deja)       -- test(['déjà vu', 'deja vu']);
test/deburr.js:1:8       - Unknown word (déjà)       -- test(['déjà vu', 'deja vu']);
test/delRequireCache.js:11:11     - Unknown word (licia)      -- const licia = require('licia');
test/delRequireCache.js:11:28     - Unknown word (licia)      -- const licia = require('licia');
test/delRequireCache.js:12:5      - Unknown word (licia)      -- licia.a = 5;
test/delRequireCache.js:13:22     - Unknown word (licia)      -- delRequireCache('licia');
test/delRequireCache.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia underscore@1.12.1
test/detectBrowser.js:104:14    - Unknown word (safari)     -- 'safari',
test/detectBrowser.js:123:47    - Unknown word (Nexus)      -- Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit
test/detectBrowser.js:130:12    - Unknown word (expects)    -- function t(expects) {
test/detectBrowser.js:131:10    - Unknown word (expects)    -- each(expects, function(val) {
test/detectBrowser.js:16:65     - Unknown word (Trident)    -- .0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath
test/detectBrowser.js:22:98     - Unknown word (Trident)    -- .NET CLR 3.1.40767; Trident/6.0; en-IN)',
test/detectBrowser.js:27:50     - Unknown word (Trident)    -- Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like
test/detectBrowser.js:27:81     - Unknown word (Gecko)      -- ; AS; rv:11.0) like Gecko',
test/detectBrowser.js:37:101    - Unknown word (Safari)     -- Chrome/41.0.2228.0 Safari/537.36',
test/detectBrowser.js:37:63     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/detectBrowser.js:37:75     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/41.0.2228.0
test/detectBrowser.js:42:110    - Unknown word (Safari)     -- Chrome/56.0.2924.87 Safari/537.36',
test/detectBrowser.js:42:71     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/detectBrowser.js:42:83     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/56.0.2924.8
test/detectBrowser.js:4:10      - Unknown word (Nonsense)   -- t([['Nonsense', 'unknown', -1]]);
test/detectBrowser.js:52:116    - Unknown word (Safari)     -- Chrome/42.0.2311.135 Safari/537.36 Edge/12.246'
test/detectBrowser.js:52:76     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/detectBrowser.js:52:88     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/42.0.2311.1
test/detectBrowser.js:57:115    - Unknown word (Safari)     -- Chrome/51.0.2704.79 Safari/537.36 Edge/14.1439
test/detectBrowser.js:57:76     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/detectBrowser.js:57:88     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/51.0.2704.7
test/detectBrowser.js:64:5      - Unknown word (firefox)    -- it('firefox', function() {
test/detectBrowser.js:67:84     - Unknown word (Firefox)    -- 3.0) Gecko/20100101 Firefox/33.0',
test/detectBrowser.js:68:14     - Unknown word (firefox)    -- 'firefox',
test/detectBrowser.js:72:75     - Unknown word (Firefox)    -- 0.0) Gecko/20100101 Firefox/50.0',
test/detectBrowser.js:73:14     - Unknown word (firefox)    -- 'firefox',
test/detectBrowser.js:79:5      - Unknown word (opera)      -- it('opera', function() {
test/detectBrowser.js:82:14     - Unknown word (Opera)      -- 'Opera/9.80 (Macintosh; Intel
test/detectBrowser.js:82:67     - Unknown word (Presto)     -- OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.
test/detectBrowser.js:83:14     - Unknown word (opera)      -- 'opera',
test/detectBrowser.js:87:14     - Unknown word (Opera)      -- 'Opera/9.80 (X11; Linux i6
test/detectBrowser.js:87:50     - Unknown word (Presto)     -- Linux i686; U; it) Presto/2.5.24 Version/10.5
test/detectBrowser.js:88:14     - Unknown word (opera)      -- 'opera',
test/detectBrowser.js:91:11     - Unknown word (Opera)      -- ['Opera/9.70 (Linux i686 ; U
test/detectBrowser.js:91:46     - Unknown word (Presto)     -- Linux i686 ; U; zh-cn) Presto/2.2.0', 'opera', 9]
test/detectBrowser.js:91:62     - Unknown word (opera)      -- cn) Presto/2.2.0', 'opera', 9]
test/detectBrowser.js:95:5      - Unknown word (safari)     -- it('safari', function() {
test/detectBrowser.js:98:107    - Unknown word (Safari)     -- like Gecko) Version/5.0 Safari/531.2+',
test/detectBrowser.js:98:76     - Unknown word (KHTML)      -- AppleWebKit/531.2+ (KHTML, like Gecko) Version
test/detectBrowser.js:99:14     - Unknown word (safari)     -- 'safari',
test/detectOs.js:12:110    - Unknown word (Safari)     -- Chrome/56.0.2924.87 Safari/537.36',
test/detectOs.js:12:71     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/detectOs.js:12:83     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/56.0.2924.8
test/detectOs.js:16:55     - Unknown word (Gecko)      -- Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31
test/detectOs.js:16:70     - Unknown word (Firefox)    -- 1.0) Gecko/20100101 Firefox/31.0',
test/detectOs.js:20:71     - Unknown word (Trident)    -- Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0)'
test/detectOs.js:24:115    - Unknown word (Safari)     -- Gecko) Version/5.1.7 Safari/534.57.2',
test/detectOs.js:24:82     - Unknown word (KHTML)      -- AppleWebKit/537.13+ (KHTML, like Gecko) Version
test/detectOs.js:24:94     - Unknown word (Gecko)      -- 37.13+ (KHTML, like Gecko) Version/5.1.7 Safari
test/detectOs.js:27:11     - Unknown word (Nonsense)   -- ['Nonsense', 'unknown']
test/detectOs.js:4:102     - Unknown word (Gecko)      -- 1.1.46 (KHTML, like Gecko) Version/9.0 Mobile
test/detectOs.js:4:135     - Unknown word (Safari)     -- Version/9.0 Mobile/13B143 Safari/601.1',
test/detectOs.js:4:90      - Unknown word (KHTML)      -- AppleWebKit/601.1.46 (KHTML, like Gecko) Version
test/detectOs.js:8:103     - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/56.0.2924.8
test/detectOs.js:8:137     - Unknown word (Safari)     -- 56.0.2924.87 Mobile Safari/537.36',
test/detectOs.js:8:49      - Unknown word (Nexus)      -- Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit
test/detectOs.js:8:91      - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/easing.js:17:5      - Unknown word (quart)      -- it('quart', function() {
test/easing.js:18:21     - Unknown word (Quart)      -- expect(easing.inQuart(0.5)).to.equal(0.06
test/easing.js:19:22     - Unknown word (Quart)      -- expect(easing.outQuart(0.5)).to.equal(0.93
test/easing.js:22:5      - Unknown word (quint)      -- it('quint', function() {
test/easing.js:23:21     - Unknown word (Quint)      -- expect(easing.inQuint(0.5)).to.equal(0.03
test/easing.js:24:22     - Unknown word (Quint)      -- expect(easing.outQuint(0.5)).to.equal(0.96
test/easing.js:27:5      - Unknown word (expo)       -- it('expo', function() {
test/easing.js:28:21     - Unknown word (Expo)       -- expect(easing.inExpo(0.5)).to.equal(0.01
test/easing.js:29:22     - Unknown word (Expo)       -- expect(easing.outExpo(0.5)).to.equal(0.98
test/easing.js:37:5      - Unknown word (circ)       -- it('circ', function() {
test/easing.js:38:21     - Unknown word (Circ)       -- expect(easing.inCirc(0.5)).to.equal(0.13
test/easing.js:39:22     - Unknown word (Circ)       -- expect(easing.outCirc(0.5)).to.equal(0.86
test/emulateTouch.js:15:5      - Unknown word (emulate)    -- emulateTouch(dom);
test/emulateTouch.js:4:37      - Unknown word (emulate)    -- body').append('<div id="emulateTouch"></div>');
test/emulateTouch.js:5:21      - Unknown word (emulate)    -- $dom = jQuery('#emulateTouch');
test/escape.js:2:32      - Unknown word (quot)       -- '`', '&amp;&lt;&gt;&quot;&#x27;&#x60;'],
test/every.js:1:10      - Unknown word (even)       -- function even(val) {
test/every.js:5:22      - Unknown word (even)       -- expect(every([2, 4], even)).to.be.true;
test/every.js:6:25      - Unknown word (even)       -- expect(every([1, 2, 4], even)).to.be.false;
test/every.js:7:30      - Unknown word (even)       -- every({ a: 1, b: 2 }, even)).to.be.false;
test/extendDeep.js:12:13     - Unknown word (brother)    -- brother: 'Bruce'
test/extendDeep.js:12:23     - Unknown word (Bruce)      -- brother: 'Bruce'
test/extendDeep.js:17:19     - Unknown word (Hood)       -- name: 'RedHood',
test/extendDeep.js:19:13     - Unknown word (mother)     -- mother: 'Jane',
test/extendDeep.js:19:22     - Unknown word (Jane)       -- mother: 'Jane',
test/extendDeep.js:21:13     - Unknown word (brother)    -- brother: 'Bruce'
test/extendDeep.js:21:23     - Unknown word (Bruce)      -- brother: 'Bruce'
test/extendDeep.js:26:15     - Unknown word (pollution)  -- it('prototype pollution', () => {
test/extendDeep.js:28:35     - Unknown word (oops)       -- extendDeep({}, { __proto__: { oops: 'It works!' } });
test/extendDeep.js:29:14     - Unknown word (oops)       -- expect(a.oops).to.not.equal('It works
test/extendDeep.js:3:19      - Unknown word (Hood)       -- name: 'RedHood',
test/extendDeep.js:5:13      - Unknown word (mother)     -- mother: 'Jane',
test/extendDeep.js:5:22      - Unknown word (Jane)       -- mother: 'Jane',
test/extractBlockCmts.js:4:24      - Unknown word (Cmts)       -- expect(extractBlockCmts(src)).to.eql(['line
test/extractBlockCmts.js:8:24      - Unknown word (Cmts)       -- expect(extractBlockCmts('')).to.eql([]);
test/extractUrls.js:3:11      - Unknown word (Official)   -- '[Official site: http://eustia
test/fetch.js:11:11     - Unknown word (fake)       -- const fakeXMLHttpRequest = sinon
test/fetch.js:11:41     - Unknown word (Fake)       -- fakeXMLHttpRequest = sinon.useFakeXMLHttpRequest();
test/fetch.js:13:5      - Unknown word (fake)       -- fakeXMLHttpRequest.onCreate
test/fetch.js:17:20     - Unknown word (fake)       -- return new fakeXMLHttpRequest();
test/fetch.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia sinon
test/fibonacci.js:6:12      - Unknown word (fibonacci)  -- expect(fibonacci(idx + 1)).to.equal(test
test/fileType.js:13:15     - Unknown word (AQABAAAAADs) -- ['R0lGODlhAQABAAAAADs=', 'gif'],
test/fileType.js:14:13     - Unknown word (IAAABXRUJQ)  -- ['UklGRhIAAABXRUJQVlA4TAYAAAAvQWxvAGs=
test/fileType.js:14:27     - Unknown word (TAYAAA)      -- UklGRhIAAABXRUJQVlA4TAYAAAAvQWxvAGs=', 'webp']
test/fileType.js:16:21     - Unknown word (MAAAAAAAAAAAA) -- ['H4sIAK6G4VsCAwMAAAAAAAAAAAA=', 'gz'],
test/fileUrl.js:3:38      - Unknown word (Fbar)       -- , 'file:///%23foo/%3Fbar'],
test/fileUrl.js:4:30      - Unknown word (redhood)    -- redhood·su', 'file:///redhood%C2%B7su'],
test/fileUrl.js:4:8       - Unknown word (redhood)    -- ['/redhood·su', 'file:///redhood
test/find.js:18:16     - Unknown word (jane)       -- name: 'jane',
test/find.js:31:9      - Unknown word (jane)       -- jane: {
test/find.js:35:9      - Unknown word (john)       -- john: {
test/find.js:4:20      - Unknown word (john)       -- name: 'john',
test/find.js:8:20      - Unknown word (jane)       -- name: 'jane',
test/findIdx.js:3:16      - Unknown word (john)       -- name: 'john',
test/findIdx.js:7:16      - Unknown word (jane)       -- name: 'jane',
test/findLastIdx.js:11:16     - Unknown word (kitty)      -- name: 'kitty',
test/findLastIdx.js:3:16      - Unknown word (john)       -- name: 'john',
test/findLastIdx.js:7:16      - Unknown word (jane)       -- name: 'jane',
test/fnParams.js:1:29      - Unknown word (vars)       -- eslint-disable no-unused-vars */
test/freeze.js:10:5      - Unknown word (shallow)    -- it('shallow', function() {
test/fuzzySearch.js:18:28     - Unknown word (Licia)      -- fuzzySearch('Li', ['Licia', 'li'])).to.eql(['li
test/fuzzySearch.js:18:59     - Unknown word (Licia)      -- li'])).to.eql(['li', 'Licia']);
test/fuzzySearch.js:1:29      - Unknown word (licia)      -- fuzzySearch('lic', ['licia', 'll', 'lic'])).to
test/fuzzySearch.js:1:68      - Unknown word (licia)      -- ])).to.eql(['lic', 'licia']);
test/fuzzySearch.js:20:25     - Unknown word (Licia)      -- fuzzySearch('Li', ['Licia', 'li'], {
test/fuzzySearch.js:23:12     - Unknown word (Licia)      -- ).to.eql(['Licia']);
test/golangify.js:10:18     - Unknown word (golangify)  -- expect(await golangify(Promise.reject(err)
test/golangify.js:11:18     - Unknown word (golangify)  -- expect(await golangify(Promise.resolve(4))
test/golangify.js:3:14      - Unknown word (golangify)  -- let fn = golangify(async () => {
test/golangify.js:7:10      - Unknown word (golangify)  -- fn = golangify(async num => num *
test/hookFn.js:6:31      - Unknown word (bigger)     -- throw Error('a is bigger than 100');
test/hotkey.js:20:5      - Unknown word (hotkey)     -- hotkey.on('shift+a', addOne
test/hotkey.js:23:5      - Unknown word (hotkey)     -- hotkey.off('shift+a', addOne
test/hotkey.js:36:5      - Unknown word (hotkey)     -- hotkey.on('ctrl+a, b', addOne
test/hotkey.js:5:37      - Unknown word (hotkey)     -- body').append('<div id="hotkey"><div class="inner"
test/hotkey.js:6:21      - Unknown word (hotkey)     -- $dom = jQuery('#hotkey');
test/html.js:19:28     - Unknown word (licia)      -- 'data-name': '"licia'
test/html.js:2:102     - Unknown word (licia)      -- span>name</span><span>licia</span></div>';
test/html.js:2:52      - Unknown word (quot)       -- comment--><div data-name="&quot;licia">test</div><div
test/html.js:2:57      - Unknown word (licia)      -- div data-name="&quot;licia">test</div><div><span
test/html.js:4:35      - Unknown word (licia)      -- parse('<div id="name">licia</div>')).to.eql([
test/html.js:5:53      - Unknown word (licia)      -- name' }, content: ['licia'] }
test/inherits.js:13:10     - Unknown word (Student)    -- function Student(name) {
test/inherits.js:16:10     - Unknown word (Student)    -- inherits(Student, People);
test/inherits.js:18:1      - Unknown word (Student)    -- Student.prototype.is = function
test/inherits.js:19:13     - Unknown word (Student)    -- return 'Student';
test/inherits.js:22:15     - Unknown word (Student)    -- const s = new Student('RedHood');
test/inherits.js:22:27     - Unknown word (Hood)       -- s = new Student('RedHood');
test/inherits.js:24:34     - Unknown word (Hood)       -- getName()).to.equal('RedHood');
test/ini.js:14:15     - Unknown word (licia)      -- library: 'licia',
test/ini.js:15:28     - Unknown word (surunzi)    -- user: { info: { name: 'surunzi', alias: ['redhoodsu
test/ini.js:15:47     - Unknown word (redhoodsu)  -- 'surunzi', alias: ['redhoodsu', 'red'] } }
test/ini.js:21:19     - Unknown word (licia)      -- library = licia
test/ini.js:24:16     - Unknown word (surunzi)    -- name = surunzi
test/ini.js:25:19     - Unknown word (redhoodsu)  -- alias[] = redhoodsu
test/ini.js:5:15      - Unknown word (licia)      -- library = licia
test/ini.js:8:12      - Unknown word (surunzi)    -- name = surunzi
test/ini.js:9:15      - Unknown word (redhoodsu)  -- alias[] = redhoodsu
test/intersect.js:1:8       - Unknown word (intersect)  -- expect(intersect([2, 4, 3, 1, 5, 3],
test/intersectRange.js:17:8      - Unknown word (intersect)  -- expect(intersectRange({ start: 0, end
test/intersectRange.js:2:5       - Unknown word (intersect)  -- intersectRange(
test/invariant.js:14:5      - Unknown word (production) -- it('production', () => {
test/invariant.js:15:13     - Unknown word (production) -- setEnv('production');
test/invariant.js:21:46     - Unknown word (Minified)   -- invariant(false)).to.throw('Minified exception occurred'
test/invariant.js:21:65     - Unknown word (occurred)   -- 'Minified exception occurred');
test/isAbsoluteUrl.js:3:13      - Unknown word (surunzi)    -- ['//www.surunzi.com', false],
test/isAbsoluteUrl.js:4:7       - Unknown word (surunzi)    -- ['surunzi.com', false]
test/isClose.js:10:14     - Unknown word (tolerance)  -- it('absolute tolerance', () => test([1, 1.
test/isClose.js:8:14      - Unknown word (tolerance)  -- it('relative tolerance', () => test([1, 1.
test/isDarkMode.js:1:10      - Unknown word (Dark)       -- expect(isDarkMode()).to.be.a('boolean
test/isDataUrl.js:4:17      - Unknown word (plain)      -- ['data:text/plain;base64,SGVsbG8sIFdvcmxkIQ
test/isDataUrl.js:4:39      - Unknown word (Fdvcmxk)    -- plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D', true],
test/isEmail.js:3:7       - Unknown word (surunzi)    -- ['surunzi', false],
test/isEmail.js:4:7       - Unknown word (surunzi)    -- ['surunzi@', false]
test/isFile.js:1:60      - Unknown word (plain)      -- txt', { type: 'text/plain' }))).to.be
test/isMiniProgram.js:1:10      - Unknown word (Mini)       -- expect(isMiniProgram).to.be.false
test/isMobile.js:10:128    - Unknown word (Safari)     -- Version/9.0 Mobile/13G34 Safari/601.1';
test/isMobile.js:10:84     - Unknown word (KHTML)      -- AppleWebKit/601.1.46 (KHTML, like Gecko) Version
test/isMobile.js:10:96     - Unknown word (Gecko)      -- 1.1.46 (KHTML, like Gecko) Version/9.0 Mobile
test/isMobile.js:12:156    - Unknown word (Safari)     -- 46.0.2490.85 Mobile Safari/537.36 XiaoMi/MiuiBrowser
test/isMobile.js:12:177    - Unknown word (Miui)       -- Safari/537.36 XiaoMi/MiuiBrowser/8.0.11';
test/isMobile.js:12:51     - Unknown word (Redmi)      -- Android 5.0.2; zh-cn; Redmi Note 2 Build/LRX22G
test/isMobile.js:12:98     - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Version
test/isMobile.js:26:5      - Unknown word (firefox)    -- it('firefox', function() {
test/isMobile.js:27:21     - Unknown word (firefox)    -- expect(isMobile(firefox)).to.be.false;
test/isMobile.js:2:114     - Unknown word (Safari)     -- Chrome/50.0.2661.102 Safari/537.36';
test/isMobile.js:2:74      - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/isMobile.js:2:86      - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/50.0.2661.1
test/isMobile.js:30:5      - Unknown word (safari)     -- it('safari', function() {
test/isMobile.js:31:21     - Unknown word (safari)     -- expect(isMobile(safari)).to.be.false;
test/isMobile.js:4:108     - Unknown word (Safari)     -- Chrome/42.0.2311.135 Safari/537.36 Edge/12.1024
test/isMobile.js:4:68      - Unknown word (KHTML)      -- AppleWebKit/537.36 (KHTML, like Gecko) Chrome
test/isMobile.js:4:80      - Unknown word (Gecko)      -- 537.36 (KHTML, like Gecko) Chrome/42.0.2311.1
test/isMobile.js:5:7       - Unknown word (firefox)    -- const firefox =
test/isMobile.js:6:52      - Unknown word (Gecko)      -- .0; WOW64; rv:43.0) Gecko/20100101 Firefox/43
test/isMobile.js:6:67      - Unknown word (Firefox)    -- 3.0) Gecko/20100101 Firefox/43.0';
test/isMobile.js:7:7       - Unknown word (safari)     -- const safari =
test/isMobile.js:8:109     - Unknown word (Safari)     -- Gecko) Version/9.1.1 Safari/601.6.17';
test/isMobile.js:8:76      - Unknown word (KHTML)      -- AppleWebKit/601.6.17 (KHTML, like Gecko) Version
test/isMobile.js:8:88      - Unknown word (Gecko)      -- 1.6.17 (KHTML, like Gecko) Version/9.1.1 Safari
test/isObj.js:10:19     - Unknown word (licia)      -- expect(isObj('licia')).to.be.false;
test/isPlainObj.js:12:14     - Unknown word (Plain)      -- expect(isPlainObj(obj)).to.be.false
test/isPlainObj.js:2:14      - Unknown word (Plain)      -- expect(isPlainObj({})).to.be.true;
test/isPlainObj.js:6:14      - Unknown word (Plain)      -- expect(isPlainObj([])).to.be.false
test/isPlainObj.js:7:14      - Unknown word (Plain)      -- expect(isPlainObj(function() {})).to
test/isPlainObj.js:8:14      - Unknown word (Plain)      -- expect(isPlainObj(5)).to.be.false;
test/isRetina.js:1:10      - Unknown word (Retina)     -- expect(isRetina).to.be.a('boolean')
test/isStr.js:2:7       - Unknown word (eustia)     -- ['eustia', true],
test/isStrBlank.js:2:7       - Unknown word (licia)      -- ['licia', false],
test/jsonClone.js:1:27      - Unknown word (licia)      -- expect(jsonClone({ name: 'licia' })).to.eql({ name:
test/jsonClone.js:1:54      - Unknown word (licia)      -- })).to.eql({ name: 'licia' });
test/kebabCase.js:1:8       - Unknown word (kebab)      -- expect(kebabCase('foo')).to.equal
test/kebabCase.js:2:8       - Unknown word (kebab)      -- expect(kebabCase('foo--bar')).to
test/kebabCase.js:3:8       - Unknown word (kebab)      -- expect(kebabCase('__foo__bar__')
test/kebabCase.js:4:8       - Unknown word (kebab)      -- expect(kebabCase('foo bar')).to.equal
test/kebabCase.js:5:8       - Unknown word (kebab)      -- expect(kebabCase('foo.bar')).to.equal
test/lazyImport.js:125:37    - Unknown word (licia)      -- join('')).to.equal('licia');
test/lazyImport.js:140:32    - Unknown word (surunzi)    -- man.name).to.equal('surunzi');
test/lazyImport.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia underscore@1.12.1
test/lazyImport.js:31:12     - Unknown word (licia)      -- _.a = 'licia';
test/lazyImport.js:40:21     - Unknown word (licia)      -- return 'licia';
test/lazyImport.js:45:24     - Unknown word (surunzi)    -- name: 'surunzi',
test/lazyImport.js:64:30     - Unknown word (surunzi)    -- this.name = 'surunzi';
test/lazyImport.js:73:46     - Unknown word (licia)      -- } hello`).to.equal('licia hello');
test/lazyImport.js:75:40     - Unknown word (surunzi)    -- object').name).to.equal('surunzi');
test/lazyRequire.js:17:13     - Unknown word (licia)      -- '../../.licia/node_modules/underscore
test/lazyRequire.js:2:28      - Unknown word (licia)      -- before: npm i --prefix .licia underscore@1.12.1
test/levenshtein.js:7:17      - Unknown word (abroad)     -- ['aboard', 'abroad', 2],
test/levenshtein.js:7:7       - Unknown word (aboard)     -- ['aboard', 'abroad', 2],
test/linkify.js:10:6      - Unknown word (Official)   -- 'Official site: <a href="http
test/linkify.js:1:14      - Unknown word (Official)   -- const str = 'Official site: http://eustia
test/linkify.js:2:8       - Unknown word (linkify)    -- expect(linkify(str)).to.equal(
test/linkify.js:3:6       - Unknown word (Official)   -- 'Official site: <a href="http
test/linkify.js:6:5       - Unknown word (linkify)    -- linkify(str, function(url)
test/lpad.js:5:23      - Unknown word (ababc)      -- ['abc', 5, 'ab', 'ababc'],
test/md5.js:2:7       - Unknown word (licia)      -- ['licia', 'e59f337d85e9a467f
test/md5.js:4:23      - Unknown word (licia)      -- [util.strToBytes('licia'), 'e59f337d85e9a46
test/memStorage.js:17:34     - Unknown word (licia)      -- memStorage.setItem('test2', 'licia');
test/memStorage.js:19:17     - Unknown word (licia)      -- test2: 'licia',
test/memStorage.js:20:16     - Unknown word (licia)      -- test: 'licia'
test/memStorage.js:3:33      - Unknown word (licia)      -- memStorage.setItem('test', 'licia');
test/memStorage.js:4:50      - Unknown word (licia)      -- getItem('test')).to.equal('licia');
test/meta.js:12:13     - Unknown word (licia)      -- $('meta[licia="true"]').remove();
test/meta.js:4:41      - Unknown word (licia)      -- name="a" content="1" licia="true">',
test/meta.js:5:41      - Unknown word (licia)      -- name="b" content="2" licia="true">',
test/meta.js:6:41      - Unknown word (licia)      -- name="c" content="3" licia="true">'
test/moment.js:107:14    - Unknown word (millisecond) -- expect(m.millisecond()).to.equal(300);
test/moment.js:10:7      - Unknown word (Leap)       -- it('isLeapYear', function() {
test/moment.js:11:33     - Unknown word (Leap)       -- moment('20120501').isLeapYear()).to.be.true;
test/moment.js:12:33     - Unknown word (Leap)       -- moment('20150501').isLeapYear()).to.be.false;
test/moment.js:204:45    - Unknown word (above)       -- year', true)).to.be.above(1);
test/moment.js:31:33     - Unknown word (millisecond) -- month date hour minute millisecond', function() {
test/moment.js:58:14     - Unknown word (millisecond) -- expect(m.millisecond()).to.equal(649);
test/moment.js:59:7      - Unknown word (millisecond) -- m.millisecond(600);
test/moment.js:60:14     - Unknown word (millisecond) -- expect(m.millisecond()).to.equal(600);
test/morphDom.js:11:23     - Unknown word (licia)      -- t('<i>test</i>', 'licia');
test/morphDom.js:12:34     - Unknown word (licia)      -- /div>', '<div><span>licia</span><span>licia</span
test/morphDom.js:12:52     - Unknown word (licia)      -- span>licia</span><span>licia</span></div>');
test/morphDom.js:38:11     - Unknown word (morphed)    -- const morphed = morphDom(from, to
test/morphDom.js:38:21     - Unknown word (morph)      -- const morphed = morphDom(from, to);
test/morphDom.js:39:15     - Unknown word (morphed)    -- let val = morphed.outerHTML || morphed
test/morphDom.js:39:36     - Unknown word (morphed)    -- morphed.outerHTML || morphed.nodeValue;
test/morphDom.js:40:9      - Unknown word (morphed)    -- if (morphed.nodeType === 8) {
test/morphDom.js:7:22      - Unknown word (licia)      -- el2.className = 'licia';
test/morphDom.js:8:5       - Unknown word (morph)      -- morphDom(el1, el2);
test/morphDom.js:9:37      - Unknown word (licia)      -- className).to.equal('licia');
test/morse.js:2:7       - Unknown word (morse)      -- const morseCode =
test/morse.js:5:36      - Unknown word (morse)      -- encode(txt)).to.equal(morseCode);
test/morse.js:5:8       - Unknown word (morse)      -- expect(morse.encode(txt)).to.equal
test/morse.js:6:21      - Unknown word (morse)      -- expect(morse.decode(morseCode)).to.equal(util
test/morse.js:6:8       - Unknown word (morse)      -- expect(morse.decode(morseCode)).to
test/negate.js:1:10      - Unknown word (even)       -- function even(n) {
test/negate.js:4:13      - Unknown word (negate)     -- const odd = negate(even);
test/negate.js:4:20      - Unknown word (even)       -- const odd = negate(even);
test/normalizePhone.js:31:13     - Unknown word (trunk)      -- trunkPrefix: true
test/notify.js:4:9       - Unknown word (licia)      -- notify('licia', {
test/now.js:4:14      - Unknown word (above)      -- expect(a).to.above(b - 100);
test/now.js:5:14      - Unknown word (below)      -- expect(a).to.below(b + 100);
test/objToStr.js:2:18      - Unknown word (eustia)     -- expect(objToStr('eustia')).to.equal('[object
test/pad.js:5:23      - Unknown word (babca)      -- ['abc', 5, 'ab', 'babca'],
test/pad.js:6:22      - Unknown word (babab)      -- ['ab', 5, 'ab', 'babab'],
test/parseArgs.js:14:15     - Unknown word (eustia)     -- remain: ['eustia'],
test/parseArgs.js:14:5      - Unknown word (remain)     -- remain: ['eustia'],
test/parseArgs.js:2:17      - Unknown word (eustia)     -- parseArgs(['eustia', '--output', 'util
test/parseArgs.js:8:9       - Unknown word (shorthands) -- shorthands: {
test/perfNow.js:7:27      - Unknown word (above)      -- expect(end).to.be.above(start);
test/pluck.js:1:7       - Unknown word (stooges)    -- const stooges = [
test/pluck.js:3:14      - Unknown word (larry)      -- { name: 'larry', age: 50 },
test/pluck.js:4:14      - Unknown word (curly)      -- { name: 'curly', age: 60 }
test/pluck.js:7:14      - Unknown word (stooges)    -- expect(pluck(stooges, 'name')).to.eql(['moe
test/pluck.js:7:48      - Unknown word (larry)      -- name')).to.eql(['moe', 'larry', 'curly']);
test/pluck.js:7:57      - Unknown word (curly)      -- eql(['moe', 'larry', 'curly']);
test/pluck.js:7:8       - Unknown word (pluck)      -- expect(pluck(stooges, 'name')).to
test/promisify.js:2:47      - Unknown word (shouldn't)  -- cb(new Error("value shouldn't less then 5"));
test/query.js:20:13     - Unknown word (eustia)     -- eustia: 'false',
test/query.js:23:28     - Unknown word (eustia)     -- to.equal('eruda=true&eustia=false&number=156');
test/query.js:3:36      - Unknown word (eustia)     -- query.parse('eruda=true&eustia=false')).to.eql({
test/query.js:5:9       - Unknown word (eustia)     -- eustia: 'false'
test/random.js:10:9      - Unknown word (above)      -- .to.above(1.1);
test/random.js:15:9      - Unknown word (below)      -- .to.below(6)
test/random.js:16:9      - Unknown word (above)      -- .to.above(-1);
test/random.js:3:9       - Unknown word (below)      -- .to.below(6)
test/random.js:4:9       - Unknown word (above)      -- .to.above(0);
test/random.js:9:9       - Unknown word (below)      -- .to.below(5.3)
test/rc4.js:2:25      - Unknown word (licia)      -- expect(rc4.encrypt('licia', 'Hello world')).to
test/rc4.js:3:25      - Unknown word (licia)      -- expect(rc4.encrypt('licia', '中文')).to.equal('IwF
test/rc4.js:6:5       - Unknown word (decryption) -- it('decryption', function() {
test/rc4.js:7:25      - Unknown word (licia)      -- expect(rc4.decrypt('licia', 'j9y2VpSfR3AdNN8=
test/rc4.js:8:25      - Unknown word (licia)      -- expect(rc4.decrypt('licia', 'IwF33G04')).to.equal
test/remove.js:10:16     - Unknown word (john)       -- name: 'john',
test/remove.js:14:16     - Unknown word (jane)       -- name: 'jane',
test/remove.js:18:16     - Unknown word (kitty)      -- name: 'kitty',
test/remove.js:23:52     - Unknown word (jane)       -- item => item.name === 'jane');
test/remove.js:23:7      - Unknown word (jane)       -- const jane = remove(people, item
test/remove.js:26:16     - Unknown word (john)       -- name: 'john',
test/remove.js:2:7       - Unknown word (evens)      -- const evens = remove(arr, function
test/remove.js:30:16     - Unknown word (kitty)      -- name: 'kitty',
test/remove.js:34:31     - Unknown word (jane)       -- jane).to.eql([{ name: 'jane', age: 23 }]);
test/remove.js:34:8      - Unknown word (jane)       -- expect(jane).to.eql([{ name: 'jane
test/remove.js:6:8       - Unknown word (evens)      -- expect(evens).to.eql([2, 4]);
test/replaceAll.js:2:18      - Unknown word (goodbye)    -- 'hello world goodbye world',
test/replaceAll.js:4:6       - Unknown word (licia)      -- 'licia',
test/replaceAll.js:5:12      - Unknown word (licia)      -- 'hello licia goodbye licia'
test/replaceAll.js:5:18      - Unknown word (goodbye)    -- 'hello licia goodbye licia'
test/replaceAll.js:5:26      - Unknown word (licia)      -- hello licia goodbye licia'
test/ric.js:4:24      - Unknown word (Remaining)  -- expect(val.timeRemaining).to.be.a('function'
test/rpad.js:5:23      - Unknown word (abcab)      -- ['abc', 5, 'ab', 'abcab'],
test/safeSet.js:13:15     - Unknown word (pollution)  -- it('prototype pollution', function() {
test/safeSet.js:15:28     - Unknown word (oops)       -- safeSet({}, '__proto__.oops', 'It works!');
test/safeSet.js:16:14     - Unknown word (oops)       -- expect(a.oops).to.not.equal('It works
test/safeSet.js:18:40     - Unknown word (oops)       -- constructor.prototype.oops', 'It works!');
test/safeSet.js:19:14     - Unknown word (oops)       -- expect(a.oops).to.not.equal('It works
test/safeSet.js:21:34     - Unknown word (oops)       -- }, [['__proto__'], 'oops'], 'It works!');
test/scrollTo.js:13:21     - Unknown word (orig)       -- window.scroll = origScroll;
test/scrollTo.js:19:9      - Unknown word (tolerance)  -- tolerance: -50,
test/scrollTo.js:1:20      - Unknown word (orig)       -- let $dom, windowY, origScroll;
test/scrollTo.js:4:5       - Unknown word (orig)       -- origScroll = window.scroll
test/selector.js:2:29      - Unknown word (licia)      -- t, input.user[name="licia"]', [
test/selector.js:7:48      - Unknown word (licia)      -- attribute', value: 'name="licia"' }
test/singleton.js:2:19      - Unknown word (singleton)  -- const fetch = singleton(async function fetch
test/sizeof.js:21:40     - Unknown word (above)      -- sizeof(location)).to.be.above(0);
test/sizeof.js:23:39     - Unknown word (above)      -- sizeof(process)).to.be.above(0);
test/sleep.js:4:38      - Unknown word (above)      -- now() - start).to.be.above(500);
test/slugify.js:2:11      - Unknown word (pony)       -- ['I ♥ pony', 'I-love-pony'],
test/slugify.js:2:21      - Unknown word (love)       -- ['I ♥ pony', 'I-love-pony'],
test/slugify.js:2:26      - Unknown word (pony)       -- 'I ♥ pony', 'I-love-pony'],
test/slugify.js:3:11      - Unknown word (pony)       -- ['I ♥ pony', { ' ': '_' }, 'I_love
test/slugify.js:3:35      - Unknown word (love)       -- pony', { ' ': '_' }, 'I_love_pony']
test/slugify.js:3:40      - Unknown word (pony)       -- ' ': '_' }, 'I_love_pony']
test/some.js:1:10      - Unknown word (even)       -- function even(val) {
test/some.js:5:21      - Unknown word (even)       -- expect(some([2, 4], even)).to.be.true;
test/some.js:6:24      - Unknown word (even)       -- expect(some([1, 2, 4], even)).to.be.true;
test/some.js:7:24      - Unknown word (even)       -- expect(some([1, 3, 5], even)).to.be.false;
test/some.js:8:23      - Unknown word (even)       -- expect(some({ a: 1 }, even)).to.be.false;
test/sortKeys.js:32:5      - Unknown word (comparator) -- it('comparator', () => {
test/sortKeys.js:36:13     - Unknown word (comparator) -- comparator: (a, b) => -isSorted
test/sortKeys.js:36:48     - Unknown word (Comparator) -- b) => -isSorted.defComparator(a, b)
test/strHash.js:3:42      - Unknown word (least)      -- test' + i)).to.be.at.least(0);
test/strToBytes.js:3:11      - Unknown word (licia)      -- ['licia', [108, 105, 99, 10
test/strTpl.js:1:51      - Unknown word (licia)      -- , { name: { first: 'licia' } }, 'Hello, licia
test/strTpl.js:1:71      - Unknown word (licia)      -- licia' } }, 'Hello, licia!']);
test/stringifyAll.js:137:14    - Unknown word (Student)      -- function Student(name) {
test/stringifyAll.js:140:23    - Unknown word (introduce)    -- Student.prototype.introduce = function() {
test/stringifyAll.js:140:5     - Unknown word (Student)      -- Student.prototype.introduce
test/stringifyAll.js:149:9     - Unknown word (inifinity)    -- inifinity: Number.POSITIVE_INFINITY
test/stringifyAll.js:150:17    - Unknown word (Inifinity)    -- negativeInifinity: Number.NEGATIVE_INFINITY
test/stringifyAll.js:155:22    - Unknown word (Student)      -- student: new Student('licia')
test/stringifyAll.js:155:31    - Unknown word (licia)        -- student: new Student('licia')
test/stringifyAll.js:155:9     - Unknown word (student)      -- student: new Student('licia
test/stringifyAll.js:158:33    - Unknown word (unenumerable) -- defineProperty(obj, 'unenumerable', {
test/stringifyAll.js:159:17    - Unknown word (unenumerable) -- value: 'unenumerable',
test/stringifyAll.js:170:16    - Unknown word (inifinity)    -- expect(obj.inifinity).to.equal(Number.POSITIVE
test/stringifyAll.js:171:24    - Unknown word (Inifinity)    -- expect(obj.negativeInifinity).to.equal(Number.NEGATIVE
test/stringifyAll.js:177:16    - Unknown word (student)      -- expect(obj.student.name).to.equal('licia
test/stringifyAll.js:177:40    - Unknown word (licia)        -- student.name).to.equal('licia');
test/stringifyAll.js:178:16    - Unknown word (student)      -- expect(obj.student.introduce).to.be.a(
test/stringifyAll.js:178:24    - Unknown word (introduce)    -- expect(obj.student.introduce).to.be.a('function'
test/stringifyAll.js:71:5      - Unknown word (unenumerable) -- it('unenumerable', () => {
test/stringifyAll.js:72:11     - Unknown word (orig)         -- const origObj = { one: 1 };
test/stringifyAll.js:73:27     - Unknown word (orig)         -- Object.defineProperty(origObj, 'one', {
test/stringifyAll.js:76:27     - Unknown word (orig)         -- const obj = transform(origObj, {
test/stringifyAll.js:77:9      - Unknown word (unenumerable) -- unenumerable: true
test/stringifyAll.js:79:16     - Unknown word (unenumerable) -- expect(obj.unenumerable.one).to.equal(1);
test/stringifyAll.js:84:11     - Unknown word (orig)         -- const origObj = { [symbol]: 1,
test/stringifyAll.js:85:27     - Unknown word (orig)         -- const obj = transform(origObj, {
test/stripAnsi.js:1:16      - Unknown word (mcake)      -- test(['\u001b[4mcake\u001b[0m', 'cake'])
test/stripBom.js:1:14      - Unknown word (licia)      -- test(['\uFEFFlicia', 'licia']);
test/stripBom.js:1:23      - Unknown word (licia)      -- test(['\uFEFFlicia', 'licia']);
test/stripColor.js:1:17      - Unknown word (mred)       -- test(['\u001b[31mred\u001b[39m', 'red'])
test/stripIndent.js:21:5      - Unknown word (backticks)  -- it('backticks', () => {
test/table.js:105:20    - Unknown word (ttys)       -- ['68667', 'ttys000', '0:00.01', 'login
test/table.js:105:52    - Unknown word (runzisu)    -- :00.01', 'login -fp runzisu']
test/table.js:110:39    - Unknown word (VIRT)       -- USER PR  NI VIRT RES  SHR S %CPU %MEM
test/table.js:127:14    - Unknown word (VIRT)       -- 'VIRT',
test/table.js:17:15     - Unknown word (daughter)   -- │ daughter │ Emily     │ Smith
test/table.js:17:26     - Unknown word (Emily)      -- │ daughter │ Emily │ Smith    │
test/table.js:19:26     - Unknown word (John)       -- │ father   │ John │ Smith    │
test/table.js:21:15     - Unknown word (mother)     -- │ mother │ Jane      │ Smith
test/table.js:21:26     - Unknown word (Jane)       -- │ mother   │ Jane │ Smith    │
test/table.js:26:18     - Unknown word (borders)    -- it('custom table borders', () => {
test/table.js:41:15     - Unknown word (daughter)   -- │ daughter Emily       Smith
test/table.js:41:26     - Unknown word (Emily)      -- │ daughter   Emily Smith    │
test/table.js:43:26     - Unknown word (John)       -- │ father     John Smith    │
test/table.js:45:15     - Unknown word (mother)     -- │ mother Jane        Smith
test/table.js:45:26     - Unknown word (Jane)       -- │ mother     Jane Smith    │
test/table.js:56:15     - Unknown word (daughter)   -- │ daughter │ Emily     │ Smith
test/table.js:56:26     - Unknown word (Emily)      -- │ daughter │ Emily │ Smith    │
test/table.js:58:26     - Unknown word (John)       -- │ father   │ John │ Smith    │
test/table.js:5:19      - Unknown word (Emily)      -- ['daughter', 'Emily', 'Smith'],
test/table.js:5:7       - Unknown word (daughter)   -- ['daughter', 'Emily', 'Smith']
test/table.js:60:15     - Unknown word (mother)     -- │ mother │ Jane      │ Smith
test/table.js:60:26     - Unknown word (Jane)       -- │ mother   │ Jane │ Smith    │
test/table.js:67:13     - Unknown word (daughter)   -- daughter Emily     Smith
test/table.js:67:22     - Unknown word (Emily)      -- daughter Emily Smith
test/table.js:68:22     - Unknown word (John)       -- father John Smith
test/table.js:69:13     - Unknown word (mother)     -- mother Jane      Smith`,
test/table.js:69:22     - Unknown word (Jane)       -- mother Jane Smith`,
test/table.js:6:17      - Unknown word (John)       -- ['father', 'John', 'Smith'],
test/table.js:7:17      - Unknown word (Jane)       -- ['mother', 'Jane', 'Smith']
test/table.js:7:7       - Unknown word (mother)     -- ['mother', 'Jane', 'Smith']
test/table.js:84:20     - Unknown word (ttys)       -- │68667│ttys000│0:00.01│login -fp
test/table.js:84:46     - Unknown word (runzisu)    -- 0│0:00.01│login -fp runzisu│
test/table.js:88:20     - Unknown word (ttys)       -- ['68667', 'ttys000', '0:00.01', 'login
test/table.js:88:52     - Unknown word (runzisu)    -- :00.01', 'login -fp runzisu']
test/table.js:94:19     - Unknown word (ttys)       -- 68667 ttys000 0:00.01 login
test/table.js:94:48     - Unknown word (runzisu)    -- 0:00.01 login -fp runzisu`,
test/template.js:13:13     - Unknown word (LICIA)      -- '<p>LICIA</p>'
test/template.js:2:37      - Unknown word (licia)      -- name %>!', { name: 'licia' }, 'Hello licia!']
test/template.js:2:54      - Unknown word (licia)      -- name: 'licia' }, 'Hello licia!'],
test/template.js:3:38      - Unknown word (licia)      -- name %></p>', { name: '<licia>' }, '<p>&lt;licia&gt
test/template.js:3:57      - Unknown word (licia)      -- <licia>' }, '<p>&lt;licia&gt;</p>'],
test/template.js:4:28      - Unknown word (licia)      -- %if (echo) {%>Hello licia!<%}%>', { echo: true
test/theme.js:1:18      - Unknown word (Dark)       -- const t = util.isDarkMode() ? 'dark' : 'light
test/theme.js:1:32      - Unknown word (dark)       -- util.isDarkMode() ? 'dark' : 'light';
test/theme.js:2:8       - Unknown word (theme)      -- expect(theme.get()).to.equal(t);
test/through.js:11:51     - Unknown word (ifmmp)      -- 'ascii')).to.equal('ifmmp');
test/timeAgo.js:1:42      - Unknown word (just)       -- 00 * 6))).to.equal('just now');
test/timeTaken.js:1:22      - Unknown word (Taken)      -- const execTime = timeTaken(function() {
test/toAsync.js:10:31     - Unknown word (licia)      -- expect(str).to.equal('licia');
test/toAsync.js:6:17      - Unknown word (licia)      -- return 'licia';
test/truncate.js:8:13      - Unknown word (ellipsis)   -- ellipsis: '……'
test/uncaught.js:1:8       - Unknown word (uncaught)   -- expect(uncaught.start).to.be.a('function
test/uncaught.js:2:8       - Unknown word (uncaught)   -- expect(uncaught.stop).to.be.a('function
test/uncaught.js:3:8       - Unknown word (uncaught)   -- expect(uncaught.addListener).to.be.a
test/uncaught.js:4:8       - Unknown word (uncaught)   -- expect(uncaught.rmListener).to.be.a
test/uncaught.js:5:8       - Unknown word (uncaught)   -- expect(uncaught.rmAllListeners).to.be
test/unescape.js:1:22      - Unknown word (quot)       -- test(['&amp;&lt;&gt;&quot;&#x27;&#x60;', '&<>
test/uniqId.js:11:23     - Unknown word (eustia)     -- expect(a.indexOf('eustia')).to.equal(0);
test/uniqId.js:9:23      - Unknown word (eustia)     -- const a = uniqId('eustia');
test/universalify.js:10:34     - Unknown word (licia)        -- expect(result).to.equal('licia');
test/universalify.js:11:13     - Unknown word (licia)        -- fn('licia').then(result => {
test/universalify.js:12:38     - Unknown word (licia)        -- expect(result).to.equal('licia');
test/universalify.js:27:16     - Unknown word (universalify) -- const fn = universalify(promiseFn, 'promise
test/universalify.js:28:9      - Unknown word (licia)        -- fn('licia', (err, result) =>
test/universalify.js:8:16      - Unknown word (universalify) -- const fn = universalify(callbackFn, 'callback
test/universalify.js:9:9       - Unknown word (licia)        -- fn('licia', (err, result) =>
test/utf8.js:14:16     - Unknown word (continuation) -- // Invalid continuation byte
test/utf8.js:24:22     - Unknown word (detected)     -- // Invalid UTF-8 detected
test/vlq.js:2:48      - Unknown word (Hwcqx)      -- , 789])).to.equal('2HwcqxB');
test/vlq.js:4:21      - Unknown word (Hwcqx)      -- expect(vlq.decode('2HwcqxB')).to.eql([123, 45
test/waitUntil.js:28:37     - Unknown word (below)      -- - startTime).to.be.below(50);
test/waterfall.js:21:5      - Unknown word (occur)      -- it('occur error', function(done
test/waterfall.js:24:5      - Unknown word (waterfall)  -- waterfall(
test/waterfall.js:2:5       - Unknown word (waterfall)  -- waterfall(
test/waterfall.js:43:5      - Unknown word (waterfall)  -- waterfall([
test/waterfall.js:58:5      - Unknown word (waterfall)  -- waterfall([], function() {
test/wordWrap.js:2:18      - Unknown word (utility)    -- ['Licia is a utility library.', 10, 'Licia
test/wordWrap.js:2:42      - Unknown word (Licia)      -- utility library.', 10, 'Licia is \na utility \nlibrary
test/wordWrap.js:2:55      - Unknown word (utility)    -- , 10, 'Licia is \na utility \nlibrary.'],
test/wordWrap.js:2:7       - Unknown word (Licia)      -- ['Licia is a utility library
test/wordWrap.js:3:19      - Unknown word (utility)    -- ['Licia\nis a utility library.', 10, 'Licia
test/wordWrap.js:3:43      - Unknown word (Licia)      -- utility library.', 10, 'Licia\nis a \nutility \nlibrary
test/wordWrap.js:3:56      - Unknown word (nutility)   -- , 10, 'Licia\nis a \nutility \nlibrary.'],
test/wordWrap.js:3:7       - Unknown word (Licia)      -- ['Licia\nis a utility library
test/wordWrap.js:4:7       - Unknown word (Licia)      -- ['Licia 是一个工具库。', 5, 'Licia
test/workerize.js:2:20      - Unknown word (workerize)  -- const worker = workerize(function(a, b) {
test/wrap.js:1:10      - Unknown word (five)       -- function five() {
test/wrap.js:2:13      - Unknown word (five)       -- return 'five';
test/wrap.js:4:10      - Unknown word (Five)       -- const sayFive = wrap(five, function
test/wrap.js:4:22      - Unknown word (five)       -- const sayFive = wrap(five, function(fn) {
test/wrap.js:7:11      - Unknown word (Five)       -- expect(sayFive()).to.be.equal('Say
test/wrap.js:7:36      - Unknown word (five)       -- )).to.be.equal('Say five');
tsconfig.json:3:17      - Unknown word (licia)      -- "outDir": ".licia/testTsOut",
tsconfig.json:7:7       - Unknown word (licia)      -- ".licia/testTs/**/*"
