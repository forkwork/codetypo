
Repository: typescript-cheatsheets/react
Url: "https://github.com/typescript-cheatsheets/react.git"
Args: ["**/*.{ts,js,md}"]
Lines:
 Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
 exit code: 1
-------------------------------------------
-------------------------------------------
CONTRIBUTING.md:11:106    - Unknown word (cover)        -- is vast, so we won't cover everything. If you think
CONTRIBUTING.md:11:112    - Unknown word (everything)   -- vast, so we won't cover everything. If you think there
CONTRIBUTING.md:11:131    - Unknown word (think)        -- cover everything. If you think there's a need, consider
CONTRIBUTING.md:11:137    - Unknown word (there's)      -- everything. If you think there's a need, consider maintaining
CONTRIBUTING.md:11:147    - Unknown word (need)         -- you think there's a need, consider maintaining
CONTRIBUTING.md:11:153    - Unknown word (consider)     -- think there's a need, consider maintaining separate
CONTRIBUTING.md:11:162    - Unknown word (maintaining)  -- there's a need, consider maintaining separate lists for specialize
CONTRIBUTING.md:11:174    - Unknown word (separate)     -- consider maintaining separate lists for specialized
CONTRIBUTING.md:11:193    - Unknown word (specialized)  -- aintaining separate lists for specialized topics, like React
CONTRIBUTING.md:11:213    - Unknown word (like)         -- specialized topics, like React + Apollo GraphQL
CONTRIBUTING.md:11:245    - Unknown word (also)         -- Apollo GraphQL. We also don't aim to convince
CONTRIBUTING.md:11:263    - Unknown word (convince)     -- We also don't aim to convince people to use TypeScript
CONTRIBUTING.md:11:304    - Unknown word (here)         -- use TypeScript; we're here to assist those who
CONTRIBUTING.md:11:312    - Unknown word (assist)       -- TypeScript; we're here to assist those who have already
CONTRIBUTING.md:11:334    - Unknown word (already)      -- assist those who have already chosen to use it.
CONTRIBUTING.md:11:342    - Unknown word (chosen)       -- those who have already chosen to use it.
CONTRIBUTING.md:11:75     - Unknown word (ecosystem)    -- TypeScript. React's ecosystem is vast, so we won't
CONTRIBUTING.md:11:88     - Unknown word (vast)         -- React's ecosystem is vast, so we won't cover everything
CONTRIBUTING.md:13:21     - Unknown word (Playground)   -- 4. **Add TypeScript Playground Links**: For code examples
CONTRIBUTING.md:13:59     - Unknown word (longer)       -- : For code examples longer than four lines, include
CONTRIBUTING.md:13:66     - Unknown word (than)         -- code examples longer than four lines, include
CONTRIBUTING.md:13:71     - Unknown word (four)         -- examples longer than four lines, include a link
CONTRIBUTING.md:15:25     - Unknown word (help)          -- Your contributions will help countless developers
CONTRIBUTING.md:15:30     - Unknown word (countless)     -- contributions will help countless developers, including
CONTRIBUTING.md:15:40     - Unknown word (developers)    -- will help countless developers, including your future
CONTRIBUTING.md:15:6      - Unknown word (contributions) -- Your contributions will help countless
CONTRIBUTING.md:15:74     - Unknown word (self)          -- including your future self! 🙌
CONTRIBUTING.md:19:43     - Unknown word (resides)       -- **: All the content resides here.
CONTRIBUTING.md:1:20      - Unknown word (Together)   -- # Let's Contribute Together! 🚀
CONTRIBUTING.md:1:9       - Unknown word (Contribute) -- # Let's Contribute Together! 🚀
CONTRIBUTING.md:20:37     - Unknown word (compiled)      -- in `/docs/basic` is compiled into `README.md` to
CONTRIBUTING.md:21:129    - Unknown word (thanks)        -- Algolia search. A big thanks to both the Docusaurus
CONTRIBUTING.md:21:36     - Unknown word (consumes)      -- Folder**: This part consumes the content in `/docs
CONTRIBUTING.md:21:89     - Unknown word (site)          -- It's a Docusaurus 2 site and includes Algolia
CONTRIBUTING.md:23:43     - Unknown word (swyx's)        -- deployed on Netlify, under swyx's personal account.
CONTRIBUTING.md:25:12     - Unknown word (docsite)       -- To run the docsite locally, follow these
CONTRIBUTING.md:25:20     - Unknown word (locally)       -- To run the docsite locally, follow these steps
CONTRIBUTING.md:25:36     - Unknown word (these)         -- docsite locally, follow these steps:
CONTRIBUTING.md:27:4      - Unknown word (bash)          -- ```bash
CONTRIBUTING.md:29:33     - Unknown word (installed)     -- dependencies are also installed in /website
CONTRIBUTING.md:33:1      - Unknown word (Here's)        -- Here's an example of the expected
CONTRIBUTING.md:33:11     - Unknown word (example)       -- Here's an example of the expected output
CONTRIBUTING.md:33:70     - Unknown word (starts)        -- the development server starts successfully:
CONTRIBUTING.md:33:77     - Unknown word (successfully)  -- development server starts successfully:
CONTRIBUTING.md:39:1      - Unknown word (Starting)      -- Starting the development server
CONTRIBUTING.md:3:140     - Unknown word (contribution) -- structure to make your contribution process more efficient
CONTRIBUTING.md:3:161     - Unknown word (more)         -- contribution process more efficient and effective
CONTRIBUTING.md:3:166     - Unknown word (efficient)    -- contribution process more efficient and effective:
CONTRIBUTING.md:3:20      - Unknown word (interest)   -- We appreciate your interest in contributing to this
CONTRIBUTING.md:3:32      - Unknown word (contributing) -- appreciate your interest in contributing to this project. Here
CONTRIBUTING.md:3:4       - Unknown word (appreciate) -- We appreciate your interest in contributing
CONTRIBUTING.md:3:62      - Unknown word (Here)         -- contributing to this project. Here are some core principles
CONTRIBUTING.md:3:81      - Unknown word (principles)   -- Here are some core principles and a simplified project
CONTRIBUTING.md:3:98      - Unknown word (simplified)   -- core principles and a simplified project structure to
CONTRIBUTING.md:42:3      - Unknown word (Compiled)      -- Compiled successfully in 9.6
CONTRIBUTING.md:45:28     - Unknown word (served)        -- : webpack output is served from /
CONTRIBUTING.md:46:57     - Unknown word (wanshawn)      -- is served from /Users/wanshawn/Work/react-typescript
CONTRIBUTING.md:46:88     - Unknown word (cheatsheet)    -- Work/react-typescript-cheatsheet/website
CONTRIBUTING.md:47:20     - Unknown word (fallback)      -- ℹ ｢wds｣: 404s will fallback to /index.html
CONTRIBUTING.md:53:12     - Unknown word (together)      -- Let's work together to enhance this resource
CONTRIBUTING.md:53:24     - Unknown word (enhance)       -- Let's work together to enhance this resource and make
CONTRIBUTING.md:53:58     - Unknown word (even)          -- resource and make it even more valuable to the
CONTRIBUTING.md:53:68     - Unknown word (valuable)      -- and make it even more valuable to the developer community
CONTRIBUTING.md:5:12      - Unknown word (Principles)   -- ## 📋 Core Principles
CONTRIBUTING.md:7:130     - Unknown word (simple)       -- code examples should be simple, easily searchable,
CONTRIBUTING.md:7:138     - Unknown word (easily)       -- examples should be simple, easily searchable, and ready
CONTRIBUTING.md:7:145     - Unknown word (searchable)   -- should be simple, easily searchable, and ready for copy
CONTRIBUTING.md:7:16      - Unknown word (About)        -- 1. **We're All About Cheatsheets**: Our main
CONTRIBUTING.md:7:161     - Unknown word (ready)        -- easily searchable, and ready for copy-and-paste.
CONTRIBUTING.md:7:180     - Unknown word (paste)        -- and ready for copy-and-paste.
CONTRIBUTING.md:7:22      - Unknown word (Cheatsheets)  -- . **We're All About Cheatsheets**: Our main goal is
CONTRIBUTING.md:7:46      - Unknown word (goal)         -- Cheatsheets**: Our main goal is to provide concise
CONTRIBUTING.md:7:57      - Unknown word (provide)      -- Our main goal is to provide concise and easy-to
CONTRIBUTING.md:7:65      - Unknown word (concise)      -- main goal is to provide concise and easy-to-use cheatsheets
CONTRIBUTING.md:7:77      - Unknown word (easy)         -- provide concise and easy-to-use cheatsheets.
CONTRIBUTING.md:9:107     - Unknown word (depth)        -- sentences. For more in-depth explanations, use `details
CONTRIBUTING.md:9:18      - Unknown word (Explanations) -- 2. **Collapsible Explanations**: Keep explanations
CONTRIBUTING.md:9:34      - Unknown word (Keep)         -- Collapsible Explanations**: Keep explanations short and
CONTRIBUTING.md:9:39      - Unknown word (explanations) -- Explanations**: Keep explanations short and sweet, limited
CONTRIBUTING.md:9:6       - Unknown word (Collapsible)  -- 2. **Collapsible Explanations**: Keep
CONTRIBUTING.md:9:62      - Unknown word (sweet)        -- explanations short and sweet, limited to 1-2 sentences
CONTRIBUTING.md:9:84      - Unknown word (sentences)    -- sweet, limited to 1-2 sentences. For more in-depth explanatio
CONTRIBUTORS.md:10:234    - Unknown word (ideas)        -- </a><br /><a href="#ideas-sw-yx" title="Ideas
CONTRIBUTORS.md:10:254    - Unknown word (Ideas)        -- ideas-sw-yx" title="Ideas, Planning, & Feedback
CONTRIBUTORS.md:10:261    - Unknown word (Planning)     -- sw-yx" title="Ideas, Planning, & Feedback">🤔</a>
CONTRIBUTORS.md:10:536    - Unknown word (question)     -- Content">🖋</a> <a href="#question-sw-yx" title="Answering
CONTRIBUTORS.md:10:559    - Unknown word (Answering)    -- question-sw-yx" title="Answering Questions">💬</a></td
CONTRIBUTORS.md:10:569    - Unknown word (Questions)    -- yx" title="Answering Questions">💬</a></td>
CONTRIBUTORS.md:11:182    - Unknown word (Sebastian)    -- width="100px;" alt="Sebastian Silbermann"/><br />
CONTRIBUTORS.md:11:192    - Unknown word (Silbermann)   -- px;" alt="Sebastian Silbermann"/><br /><sub><b>Sebastian
CONTRIBUTORS.md:12:206    - Unknown word (Islam)        -- width="100px;" alt="Islam Attrash"/><br /><sub
CONTRIBUTORS.md:12:212    - Unknown word (Attrash)      -- "100px;" alt="Islam Attrash"/><br /><sub><b>Islam
CONTRIBUTORS.md:13:185    - Unknown word (Stephen)      -- width="100px;" alt="Stephen Koo"/><br /><sub><b
CONTRIBUTORS.md:13:263    - Unknown word (stephenkoo)   -- ><a href="#question-stephenkoo" title="Answering Questions
CONTRIBUTORS.md:14:188    - Unknown word (Andreas)      -- width="100px;" alt="Andreas"/><br /><sub><b>Andreas
CONTRIBUTORS.md:14:472    - Unknown word (infra)        -- cumentation">📖</a> <a href="#infra-andreasgruenh" title
CONTRIBUTORS.md:14:478    - Unknown word (andreasgruenh) -- /a> <a href="#infra-andreasgruenh" title="Infrastructure
CONTRIBUTORS.md:14:500    - Unknown word (Infrastructure) -- andreasgruenh" title="Infrastructure (Hosting, Build-Tools
CONTRIBUTORS.md:14:516    - Unknown word (Hosting)        -- title="Infrastructure (Hosting, Build-Tools, etc)"
CONTRIBUTORS.md:15:187    - Unknown word (Arvind)         -- width="100px;" alt="Arvind Srinivasan"/><br />
CONTRIBUTORS.md:15:194    - Unknown word (Srinivasan)     -- 100px;" alt="Arvind Srinivasan"/><br /><sub><b>Arvind
CONTRIBUTORS.md:15:382    - Unknown word (arvindcheenu)   -- a> <a href="#content-arvindcheenu" title="Content">🖋
CONTRIBUTORS.md:18:186    - Unknown word (William)        -- width="100px;" alt="William R. J. Ribeiro"/><br
CONTRIBUTORS.md:18:200    - Unknown word (Ribeiro)        -- alt="William R. J. Ribeiro"/><br /><sub><b>William
CONTRIBUTORS.md:18:281    - Unknown word (williamrjribeiro) -- br /><a href="#ideas-williamrjribeiro" title="Ideas, Planning
CONTRIBUTORS.md:19:184    - Unknown word (Alexandru)        -- width="100px;" alt="Alexandru-Dan Pop"/><br /><sub
CONTRIBUTORS.md:1:4       - Unknown word (Contributors) -- ## Contributors
CONTRIBUTORS.md:20:182    - Unknown word (Mathias)          -- width="100px;" alt="Mathias Storm"/><br /><sub>
CONTRIBUTORS.md:20:190    - Unknown word (Storm)            -- 00px;" alt="Mathias Storm"/><br /><sub><b>Mathias
CONTRIBUTORS.md:21:371    - Unknown word (dance)            -- /a> <a href="#ideas-dance2die" title="Ideas, Planning
CONTRIBUTORS.md:22:188    - Unknown word (Ryota)            -- width="100px;" alt="Ryota Murakami"/><br /><sub
CONTRIBUTORS.md:22:194    - Unknown word (Murakami)         -- "100px;" alt="Ryota Murakami"/><br /><sub><b>Ryota
CONTRIBUTORS.md:22:271    - Unknown word (ryota)            -- /><a href="#example-ryota-murakami" title="Examples
CONTRIBUTORS.md:22:277    - Unknown word (murakami)         -- href="#example-ryota-murakami" title="Examples">�
CONTRIBUTORS.md:23:181    - Unknown word (Árpád)            -- width="100px;" alt="Árpád Illyés"/><br /><sub
CONTRIBUTORS.md:23:187    - Unknown word (Illyés)           -- "100px;" alt="Árpád Illyés"/><br /><sub><b>Árp
CONTRIBUTORS.md:24:182    - Unknown word (Igor)             -- width="100px;" alt="Igor Strebezhev"/><br />
CONTRIBUTORS.md:24:187    - Unknown word (Strebezhev)       -- width="100px;" alt="Igor Strebezhev"/><br /><sub><b>Igor
CONTRIBUTORS.md:24:265    - Unknown word (xamgore)          -- br /><a href="#ideas-xamgore" title="Ideas, Planning
CONTRIBUTORS.md:27:176    - Unknown word (David)            -- width="100px;" alt="David Johnston"/><br /><sub
CONTRIBUTORS.md:27:182    - Unknown word (Johnston)         -- "100px;" alt="David Johnston"/><br /><sub><b>David
CONTRIBUTORS.md:28:181    - Unknown word (Kristóf)          -- width="100px;" alt="Kristóf Poduszló"/><br /><sub
CONTRIBUTORS.md:28:189    - Unknown word (Poduszló)         -- 00px;" alt="Kristóf Poduszló"/><br /><sub><b>Krist
CONTRIBUTORS.md:30:193    - Unknown word (Ivan)             -- width="100px;" alt="Ivan"/><br /><sub><b>Ivan
CONTRIBUTORS.md:31:190    - Unknown word (Andil)            -- px;" alt="Sebastian Andil"/><br /><sub><b>Sebastian
CONTRIBUTORS.md:32:188    - Unknown word (Adnan)            -- width="100px;" alt="Adnan Husain"/><br /><sub
CONTRIBUTORS.md:32:194    - Unknown word (Husain)           -- "100px;" alt="Adnan Husain"/><br /><sub><b>Adnan
CONTRIBUTORS.md:36:176    - Unknown word (Filip)            -- width="100px;" alt="Filip Tammergård"/><br />
CONTRIBUTORS.md:36:182    - Unknown word (Tammergård)       -- "100px;" alt="Filip Tammergård"/><br /><sub><b>Filip
CONTRIBUTORS.md:37:181    - Unknown word (Previte)          -- width="100px;" alt="Joe Previte"/><br /><sub><b>Joe
CONTRIBUTORS.md:38:182    - Unknown word (Sasiru)           -- width="100px;" alt="Sasiru Ravihansa"/><br /><sub
CONTRIBUTORS.md:38:189    - Unknown word (Ravihansa)        -- 100px;" alt="Sasiru Ravihansa"/><br /><sub><b>Sasiru
CONTRIBUTORS.md:3:10      - Unknown word (CONTRIBUTORS) -- <!-- ALL-CONTRIBUTORS-LIST:START - Do not
CONTRIBUTORS.md:48:22     - Unknown word (wonderful)        -- Thanks goes to these wonderful people ([emoji key]
CONTRIBUTORS.md:48:41     - Unknown word (emoji)            -- these wonderful people ([emoji key](https://allcontributors
CONTRIBUTORS.md:48:8      - Unknown word (goes)             -- Thanks goes to these wonderful people
CONTRIBUTORS.md:54:114    - Unknown word (Contributions)    -- contributors) specification. Contributions of any kind welcome
CONTRIBUTORS.md:54:14     - Unknown word (follows)          -- This project follows the [all-contributors
CONTRIBUTORS.md:54:140    - Unknown word (welcome)          -- Contributions of any kind welcome!
CONTRIBUTORS.md:54:31     - Unknown word (contributors)     -- project follows the [all-contributors](https://github.com
CONTRIBUTORS.md:9:183     - Unknown word (Ferdy)        -- width="100px;" alt="Ferdy Budhidharma"/><br /
CONTRIBUTORS.md:9:189     - Unknown word (Budhidharma)  -- "100px;" alt="Ferdy Budhidharma"/><br /><sub><b>Ferdy
CONTRIBUTORS.md:9:358     - Unknown word (Reviewed)     -- by%3Aferdaber" title="Reviewed Pull Requests">👀</a
CONTRIBUTORS.md:9:411     - Unknown word (ferdaber)     -- a href="#maintenance-ferdaber" title="Maintenance
CodeTypo: Files checked: 53, Issues found: 7956 in 53 files with 4 errors.
Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Errors:
README.md:1258:321  - Unknown word (achieved)    -- State can be easily achieved using hooks which can
README.md:143:24    - Unknown word (answered)    -- [My question isn't answered here!](#my-question
README.md:21:146    - Unknown word (happy)      -- tammergard). We're so happy you want to try out
README.md:21:2      - Unknown word (wave)       -- :wave: This repo is maintained
README.md:27:95     - Unknown word (focused)    -- docs/basic/setup) is focused on helping React devs
README.md:28:14     - Unknown word (opinionated) -- - Focus on opinionated best practices, copy
README.md:28:47     - Unknown word (pastable)    -- best practices, copy+pastable examples.
README.md:29:5      - Unknown word (Explains)    -- - Explains some basic TS types
README.md:29:50     - Unknown word (along)       -- types usage and setup along the way.
README.md:30:22     - Unknown word (Frequently)  -- - Answers the most Frequently Asked Questions.
README.md:30:33     - Unknown word (Asked)       -- the most Frequently Asked Questions.
README.md:30:5      - Unknown word (Answers)     -- - Answers the most Frequently
README.md:31:100    - Unknown word (techniques)  -- simple troubleshooting techniques for newbies.
README.md:31:115    - Unknown word (newbies)     -- roubleshooting techniques for newbies.
README.md:31:5      - Unknown word (Does)        -- - Does not cover generic type
README.md:37:100    - Unknown word (collate)     -- docs/migration) helps collate advice for incrementally
README.md:38:86     - Unknown word (decided)     -- people who have already decided.
README.md:39:37     - Unknown word (assistance)  -- new cheatsheet, all assistance is welcome.
README.md:40:95     - Unknown word (teaches)     -- docs/hoc) specifically teaches people to write HOCs
README.md:42:19     - Unknown word (newest)      -- - ⚠️This is the newest cheatsheet, all assistance
README.md:61:19     - Unknown word (Getting)     -- - [Section 2: Getting Started](#section-2
README.md:61:27     - Unknown word (Started)     -- [Section 2: Getting Started](#section-2-getting
code-of-conduct.md:10:21     - Unknown word (patient)      -- - **Be friendly and patient.**
code-of-conduct.md:10:8      - Unknown word (friendly)     -- - **Be friendly and patient.**
code-of-conduct.md:11:24     - Unknown word (strive)       -- *Be welcoming**: We strive to be a community that
code-of-conduct.md:11:49     - Unknown word (that)         -- strive to be a community that welcomes and supports
code-of-conduct.md:11:54     - Unknown word (welcomes)     -- be a community that welcomes and supports people
code-of-conduct.md:11:67     - Unknown word (supports)     -- community that welcomes and supports people of all backgrounds
code-of-conduct.md:11:90     - Unknown word (backgrounds)  -- supports people of all backgrounds and identities.
code-of-conduct.md:12:106    - Unknown word (immigration)  -- national origin, colour, immigration
code-of-conduct.md:12:61     - Unknown word (ethnicity)    -- members of any race, ethnicity, culture, national origin
code-of-conduct.md:12:72     - Unknown word (culture)      -- any race, ethnicity, culture, national origin, colour
code-of-conduct.md:12:8      - Unknown word (includes)     -- This includes, but is not limited
code-of-conduct.md:12:98     - Unknown word (colour)       -- culture, national origin, colour, immigration
code-of-conduct.md:13:11     - Unknown word (social)       -- status, social and economic class,
code-of-conduct.md:13:22     - Unknown word (economic)     -- status, social and economic class, educational level
code-of-conduct.md:13:38     - Unknown word (educational)  -- and economic class, educational level, sex, sexual orientatio
code-of-conduct.md:13:62     - Unknown word (sexual)       -- educational level, sex, sexual orientation, gender
code-of-conduct.md:13:82     - Unknown word (gender)       -- sexual orientation, gender identity and expression
code-of-conduct.md:14:34     - Unknown word (belief)       -- family status, political belief, religion, and mental
code-of-conduct.md:14:42     - Unknown word (religion)     -- status, political belief, religion, and mental and physical
code-of-conduct.md:14:56     - Unknown word (mental)       -- belief, religion, and mental and physical ability
code-of-conduct.md:14:67     - Unknown word (physical)     -- religion, and mental and physical ability.
code-of-conduct.md:14:76     - Unknown word (ability)      -- mental and physical ability.
code-of-conduct.md:15:106    - Unknown word (others)       -- depend on the work of others. Any
code-of-conduct.md:15:23     - Unknown word (Your)         -- **Be considerate**: Your work will be used by
code-of-conduct.md:15:33     - Unknown word (will)         -- considerate**: Your work will be used by other people
code-of-conduct.md:15:74     - Unknown word (turn)         -- other people, and you in turn will depend on the work
code-of-conduct.md:15:8      - Unknown word (considerate)  -- - **Be considerate**: Your work will be
code-of-conduct.md:15:84     - Unknown word (depend)       -- and you in turn will depend on the work of others
code-of-conduct.md:16:112    - Unknown word (making)       -- onsequences into account when making
code-of-conduct.md:16:16     - Unknown word (take)         -- decision you take will affect users and
code-of-conduct.md:16:26     - Unknown word (affect)       -- decision you take will affect users and colleagues
code-of-conduct.md:16:43     - Unknown word (colleagues)   -- will affect users and colleagues, and you should take
code-of-conduct.md:16:75     - Unknown word (those)        -- and you should take those consequences into account
code-of-conduct.md:16:81     - Unknown word (consequences) -- you should take those consequences into account when making
code-of-conduct.md:17:14     - Unknown word (Remember)     -- decisions. Remember that we're a world-wide
code-of-conduct.md:17:3      - Unknown word (decisions)    -- decisions. Remember that we're
code-of-conduct.md:17:42     - Unknown word (wide)         -- Remember that we're a world-wide community, so you might
code-of-conduct.md:17:65     - Unknown word (might)        -- wide community, so you might not be communicating
code-of-conduct.md:17:78     - Unknown word (communicating) -- so you might not be communicating in someone else's primary
code-of-conduct.md:17:95     - Unknown word (someone)       -- be communicating in someone else's primary
code-of-conduct.md:19:41     - Unknown word (agree)         -- Not all of us will agree all the time, but disagreemen
code-of-conduct.md:19:65     - Unknown word (disagreement)  -- agree all the time, but disagreement is no excuse for poor
code-of-conduct.md:19:8      - Unknown word (respectful)    -- - **Be respectful**: Not all of us will
code-of-conduct.md:19:84     - Unknown word (excuse)        -- but disagreement is no excuse for poor behavior and
code-of-conduct.md:19:95     - Unknown word (poor)          -- disagreement is no excuse for poor behavior and poor
code-of-conduct.md:1:15      - Unknown word (Conduct)    -- # Our Code of Conduct
code-of-conduct.md:20:25     - Unknown word (experience)    -- manners. We might all experience some frustration now
code-of-conduct.md:20:3      - Unknown word (manners)       -- manners. We might all experience
code-of-conduct.md:20:36     - Unknown word (some)          -- might all experience some frustration now and
code-of-conduct.md:20:41     - Unknown word (frustration)   -- all experience some frustration now and then, but we
code-of-conduct.md:20:74     - Unknown word (cannot)        -- now and then, but we cannot allow that frustration
code-of-conduct.md:21:25     - Unknown word (important)     -- personal attack. It’s important to remember that a community
code-of-conduct.md:21:38     - Unknown word (remember)      -- attack. It’s important to remember that a community where
code-of-conduct.md:21:64     - Unknown word (where)         -- remember that a community where people feel uncomfortable
code-of-conduct.md:21:77     - Unknown word (feel)          -- community where people feel uncomfortable or threatened
code-of-conduct.md:21:82     - Unknown word (uncomfortable) -- community where people feel uncomfortable or threatened is not
code-of-conduct.md:21:99     - Unknown word (threatened)    -- feel uncomfortable or threatened is not a
code-of-conduct.md:22:3      - Unknown word (productive)    -- productive one.
code-of-conduct.md:23:100    - Unknown word (ourselves)     -- professionals, and we conduct ourselves
code-of-conduct.md:23:38     - Unknown word (choose)        -- in the words that you choose**: we are a community
code-of-conduct.md:23:70     - Unknown word (professionals) -- we are a community of professionals, and we conduct ourselves
code-of-conduct.md:23:8      - Unknown word (careful)       -- - **Be careful in the words that you
code-of-conduct.md:24:105    - Unknown word (exclusionary)   -- Harassment and other exclusionary
code-of-conduct.md:24:22     - Unknown word (kind)           -- professionally. Be kind to others. Do not insult
code-of-conduct.md:24:3      - Unknown word (professionally) -- professionally. Be kind to others.
code-of-conduct.md:24:45     - Unknown word (insult)         -- kind to others. Do not insult or put down other participant
code-of-conduct.md:24:84     - Unknown word (Harassment)     -- other participants. Harassment and other exclusionary
code-of-conduct.md:25:12     - Unknown word (aren't)         -- behavior aren't acceptable. This includes
code-of-conduct.md:25:19     - Unknown word (acceptable)     -- behavior aren't acceptable. This includes, but
code-of-conduct.md:26:13     - Unknown word (threats)        -- - Violent threats or language directed
code-of-conduct.md:26:33     - Unknown word (directed)       -- threats or language directed against another person
code-of-conduct.md:26:42     - Unknown word (against)        -- or language directed against another person.
code-of-conduct.md:26:5      - Unknown word (Violent)        -- - Violent threats or language
code-of-conduct.md:26:50     - Unknown word (another)        -- language directed against another person.
code-of-conduct.md:27:20     - Unknown word (jokes)          -- - Discriminatory jokes and language.
code-of-conduct.md:27:5      - Unknown word (Discriminatory) -- - Discriminatory jokes and language.
code-of-conduct.md:28:13     - Unknown word (sexually)       -- - Posting sexually explicit or violent
code-of-conduct.md:28:22     - Unknown word (explicit)       -- - Posting sexually explicit or violent material
code-of-conduct.md:28:34     - Unknown word (violent)        -- sexually explicit or violent material.
code-of-conduct.md:28:5      - Unknown word (Posting)        -- - Posting sexually explicit or
code-of-conduct.md:29:17     - Unknown word (threatening)    -- - Posting (or threatening to post) other people
code-of-conduct.md:29:53     - Unknown word (personally)     -- post) other people's personally identifying information
code-of-conduct.md:29:64     - Unknown word (identifying)    -- people's personally identifying information ("doxing
code-of-conduct.md:30:14     - Unknown word (insults)        -- - Personal insults, especially those using
code-of-conduct.md:30:23     - Unknown word (especially)     -- - Personal insults, especially those using racist or
code-of-conduct.md:30:40     - Unknown word (using)          -- insults, especially those using racist or sexist terms
code-of-conduct.md:30:46     - Unknown word (racist)         -- especially those using racist or sexist terms.
code-of-conduct.md:30:56     - Unknown word (sexist)         -- those using racist or sexist terms.
code-of-conduct.md:31:22     - Unknown word (attention)      -- - Unwelcome sexual attention.
code-of-conduct.md:31:5      - Unknown word (Unwelcome)      -- - Unwelcome sexual attention.
code-of-conduct.md:32:24     - Unknown word (encouraging)    -- Advocating for, or encouraging, any of the above behavior
code-of-conduct.md:32:48     - Unknown word (above)          -- encouraging, any of the above behavior.
code-of-conduct.md:32:5      - Unknown word (Advocating)     -- - Advocating for, or encouraging
code-of-conduct.md:33:14     - Unknown word (harassment)     -- - Repeated harassment of others. In general
code-of-conduct.md:33:5      - Unknown word (Repeated)       -- - Repeated harassment of others
code-of-conduct.md:33:59     - Unknown word (asks)           -- general, if someone asks you to stop, then stop
code-of-conduct.md:34:13     - Unknown word (disagree)       -- - **When we disagree, try to understand why
code-of-conduct.md:34:30     - Unknown word (understand)     -- we disagree, try to understand why**: Disagreements
code-of-conduct.md:34:48     - Unknown word (Disagreements)  -- to understand why**: Disagreements, both social and technical
code-of-conduct.md:34:63     - Unknown word (both)           -- why**: Disagreements, both social and technical
code-of-conduct.md:34:90     - Unknown word (happen)         -- social and technical, happen all the time. It is
code-of-conduct.md:35:29     - Unknown word (disagreements)  -- important that we resolve disagreements and differing views
code-of-conduct.md:35:47     - Unknown word (differing)      -- resolve disagreements and differing views constructively
code-of-conduct.md:35:63     - Unknown word (constructively) -- and differing views constructively. Remember that we’re
code-of-conduct.md:35:99     - Unknown word (different)      -- Remember that we’re different. The
code-of-conduct.md:36:113    - Unknown word (have)           -- backgrounds. Different people have
code-of-conduct.md:36:29     - Unknown word (comes)          -- strength of our community comes from its diversity,
code-of-conduct.md:36:3      - Unknown word (strength)       -- strength of our community comes
code-of-conduct.md:36:44     - Unknown word (diversity)      -- community comes from its diversity, people from a wide
code-of-conduct.md:36:96     - Unknown word (Different)      -- range of backgrounds. Different people have
code-of-conduct.md:37:102    - Unknown word (mean)           -- a viewpoint doesn’t mean that they’re
code-of-conduct.md:37:112    - Unknown word (they’re)        -- viewpoint doesn’t mean that they’re
code-of-conduct.md:37:13     - Unknown word (perspectives)   -- different perspectives on issues. Being unable
code-of-conduct.md:37:29     - Unknown word (issues)         -- different perspectives on issues. Being unable to understand
code-of-conduct.md:37:37     - Unknown word (Being)          -- perspectives on issues. Being unable to understand
code-of-conduct.md:37:43     - Unknown word (unable)         -- perspectives on issues. Being unable to understand why someone
code-of-conduct.md:37:76     - Unknown word (holds)          -- understand why someone holds a viewpoint doesn’t
code-of-conduct.md:37:84     - Unknown word (viewpoint)      -- why someone holds a viewpoint doesn’t mean that they
code-of-conduct.md:37:94     - Unknown word (doesn’t)        -- someone holds a viewpoint doesn’t mean that they’re
code-of-conduct.md:38:104    - Unknown word (focus)          -- us anywhere. Instead, focus on helping
code-of-conduct.md:38:113    - Unknown word (helping)        -- anywhere. Instead, focus on helping
code-of-conduct.md:38:3      - Unknown word (wrong)          -- wrong. Don’t forget that it
code-of-conduct.md:38:34     - Unknown word (human)          -- t forget that it is human to err and blaming each
code-of-conduct.md:38:51     - Unknown word (blaming)        -- is human to err and blaming each other doesn’t get
code-of-conduct.md:38:85     - Unknown word (anywhere)       -- other doesn’t get us anywhere. Instead, focus on helping
code-of-conduct.md:38:95     - Unknown word (Instead)        -- doesn’t get us anywhere. Instead, focus on helping
code-of-conduct.md:39:25     - Unknown word (learning)       -- to resolve issues and learning from mistakes.
code-of-conduct.md:39:39     - Unknown word (mistakes)       -- issues and learning from mistakes.
code-of-conduct.md:3:14      - Unknown word (conduct)    -- This code of conduct outlines our expectations
code-of-conduct.md:3:22      - Unknown word (outlines)   -- This code of conduct outlines our expectations for
code-of-conduct.md:3:35      - Unknown word (expectations) -- conduct outlines our expectations for participants within
code-of-conduct.md:3:52      - Unknown word (participants) -- our expectations for participants within
code-of-conduct.md:3:65      - Unknown word (within)       -- expectations for participants within
code-of-conduct.md:41:18     - Unknown word (exhaustive)     -- This code is not exhaustive or complete. It serves
code-of-conduct.md:41:45     - Unknown word (serves)         -- exhaustive or complete. It serves to distill our common
code-of-conduct.md:41:55     - Unknown word (distill)        -- complete. It serves to distill our common understanding
code-of-conduct.md:41:74     - Unknown word (understanding)  -- to distill our common understanding of a collaborative,
code-of-conduct.md:41:93     - Unknown word (collaborative)  -- common understanding of a collaborative, shared
code-of-conduct.md:42:18     - Unknown word (goals)          -- environment, and goals. We expect it to be
code-of-conduct.md:42:44     - Unknown word (followed)       -- We expect it to be followed in spirit as much as
code-of-conduct.md:42:56     - Unknown word (spirit)         -- it to be followed in spirit as much as in the letter
code-of-conduct.md:42:66     - Unknown word (much)           -- followed in spirit as much as in the letter.
code-of-conduct.md:44:5      - Unknown word (Diversity)      -- ### Diversity Statement
code-of-conduct.md:46:113    - Unknown word (able)           -- Although we may not be able to
code-of-conduct.md:46:14     - Unknown word (everyone)       -- We encourage everyone to participate and are
code-of-conduct.md:46:26     - Unknown word (participate)    -- encourage everyone to participate and are committed to
code-of-conduct.md:46:4      - Unknown word (encourage)      -- We encourage everyone to participate
code-of-conduct.md:46:90     - Unknown word (Although)       -- repository for all. Although we may not be able to
code-of-conduct.md:47:1      - Unknown word (satisfy)        -- satisfy everyone, we all agree
code-of-conduct.md:47:109    - Unknown word (them)           -- a mistake, we expect them to take
code-of-conduct.md:47:56     - Unknown word (Whenever)       -- that everyone is equal. Whenever a participant has made
code-of-conduct.md:47:67     - Unknown word (participant)    -- is equal. Whenever a participant has made a mistake,
code-of-conduct.md:47:83     - Unknown word (made)           -- Whenever a participant has made a mistake, we expect
code-of-conduct.md:47:90     - Unknown word (mistake)        -- participant has made a mistake, we expect them to take
code-of-conduct.md:48:1      - Unknown word (responsibility) -- responsibility for it. If someone has
code-of-conduct.md:48:39     - Unknown word (been)           -- for it. If someone has been harmed or offended,
code-of-conduct.md:48:44     - Unknown word (harmed)         -- If someone has been harmed or offended, it is our
code-of-conduct.md:48:54     - Unknown word (offended)       -- someone has been harmed or offended, it is our responsibility
code-of-conduct.md:48:92     - Unknown word (listen)         -- our responsibility to listen carefully and
code-of-conduct.md:48:99     - Unknown word (carefully)      -- responsibility to listen carefully and
code-of-conduct.md:49:1      - Unknown word (respectfully)   -- respectfully, and do our best to
code-of-conduct.md:4:17      - Unknown word (cheatsheets)  -- the [typescript-cheatsheets/react](https://github
code-of-conduct.md:51:45     - Unknown word (explicitly)     -- cannot be exhaustive, we explicitly honor diversity in age
code-of-conduct.md:51:56     - Unknown word (honor)          -- exhaustive, we explicitly honor diversity in age, gender
code-of-conduct.md:52:58     - Unknown word (beliefs)        -- national origin, political beliefs, profession, race, religion
code-of-conduct.md:52:67     - Unknown word (profession)     -- political beliefs, profession, race, religion, sexual
code-of-conduct.md:53:1      - Unknown word (socioeconomic)  -- socioeconomic status, and technical
code-of-conduct.md:53:58     - Unknown word (tolerate)       -- ability. We will not tolerate discrimination based
code-of-conduct.md:53:67     - Unknown word (discrimination) -- We will not tolerate discrimination based on any of the
code-of-conduct.md:54:1      - Unknown word (characteristics) -- characteristics above, including participants
code-of-conduct.md:54:24     - Unknown word (including)       -- characteristics above, including participants with disabilitie
code-of-conduct.md:54:52     - Unknown word (disabilities)    -- including participants with disabilities.
code-of-conduct.md:56:15     - Unknown word (Issues)          -- ### Reporting Issues
code-of-conduct.md:56:5      - Unknown word (Reporting)       -- ### Reporting Issues
code-of-conduct.md:58:22     - Unknown word (witness)         -- If you experience or witness unacceptable behavior
code-of-conduct.md:58:70     - Unknown word (concerns)        -- behavior—or have any other concerns—please report it by
code-of-conduct.md:58:79     - Unknown word (please)          -- have any other concerns—please report it by contacting
code-of-conduct.md:58:99     - Unknown word (contacting)      -- please report it by contacting us (This
code-of-conduct.md:59:25     - Unknown word (swyx)            -- repo is maintained by [@swyx](https://twitter.com
code-of-conduct.md:59:9      - Unknown word (maintained)      -- repo is maintained by [@swyx](https://twitter
code-of-conduct.md:5:1       - Unknown word (reporting)    -- reporting unacceptable behavior
code-of-conduct.md:5:11      - Unknown word (unacceptable) -- reporting unacceptable behavior. We are committed
code-of-conduct.md:5:24      - Unknown word (behavior)     -- reporting unacceptable behavior. We are committed to
code-of-conduct.md:5:41      - Unknown word (committed)    -- unacceptable behavior. We are committed to providing a welcoming
code-of-conduct.md:5:54      - Unknown word (providing)    -- We are committed to providing a welcoming and inspiring
code-of-conduct.md:5:66      - Unknown word (welcoming)    -- committed to providing a welcoming and inspiring community
code-of-conduct.md:5:80      - Unknown word (inspiring)    -- providing a welcoming and inspiring community for all and
code-of-conduct.md:60:107    - Unknown word (your)            -- with discretion. In your report
code-of-conduct.md:60:7      - Unknown word (filiptammergard) -- and [@filiptammergard](https://twitter.com
code-of-conduct.md:60:79     - Unknown word (handled)         -- All reports will be handled with discretion. In
code-of-conduct.md:60:92     - Unknown word (discretion)      -- will be handled with discretion. In your report
code-of-conduct.md:64:16     - Unknown word (nicknames)       -- - Names (real, nicknames, or pseudonyms) of any
code-of-conduct.md:64:30     - Unknown word (pseudonyms)      -- real, nicknames, or pseudonyms) of any individuals
code-of-conduct.md:64:49     - Unknown word (individuals)     -- or pseudonyms) of any individuals involved. If there are
code-of-conduct.md:64:61     - Unknown word (involved)        -- of any individuals involved. If there are additional
code-of-conduct.md:64:74     - Unknown word (there)           -- individuals involved. If there are additional witnesses
code-of-conduct.md:64:84     - Unknown word (additional)      -- involved. If there are additional witnesses, please include
code-of-conduct.md:64:95     - Unknown word (witnesses)       -- there are additional witnesses, please include
code-of-conduct.md:65:106    - Unknown word (publicly)        -- ongoing. If there is a publicly
code-of-conduct.md:65:33     - Unknown word (what)            -- well. Your account of what occurred, and if you
code-of-conduct.md:65:38     - Unknown word (occurred)        -- Your account of what occurred, and if you believe
code-of-conduct.md:65:59     - Unknown word (believe)         -- occurred, and if you believe the incident is ongoing
code-of-conduct.md:65:71     - Unknown word (incident)        -- and if you believe the incident is ongoing. If there
code-of-conduct.md:65:83     - Unknown word (ongoing)         -- believe the incident is ongoing. If there is a publicly
code-of-conduct.md:66:28     - Unknown word (mailing)         -- available record (e.g. a mailing list archive or a public
code-of-conduct.md:67:42     - Unknown word (helpful)         -- information that may be helpful.
code-of-conduct.md:69:26     - Unknown word (representative)  -- After filing a report, a representative will contact you personally
code-of-conduct.md:69:7      - Unknown word (filing)          -- After filing a report, a representative
code-of-conduct.md:69:91     - Unknown word (harassing)       -- If the person who is harassing you is part of the
code-of-conduct.md:6:27      - Unknown word (honored)      -- code of conduct to be honored. Anyone who violates
code-of-conduct.md:6:36      - Unknown word (Anyone)       -- conduct to be honored. Anyone who violates this code
code-of-conduct.md:6:47      - Unknown word (violates)     -- honored. Anyone who violates this code of conduct
code-of-conduct.md:6:84      - Unknown word (banned)       -- code of conduct may be banned from the community.
code-of-conduct.md:70:16     - Unknown word (they)            -- response team, they will recuse themselves
code-of-conduct.md:70:26     - Unknown word (recuse)          -- response team, they will recuse themselves from handling
code-of-conduct.md:70:33     - Unknown word (themselves)      -- team, they will recuse themselves from handling your incident
code-of-conduct.md:70:49     - Unknown word (handling)        -- recuse themselves from handling your incident. A representati
code-of-conduct.md:71:1      - Unknown word (follow)          -- follow up with any additional
code-of-conduct.md:71:100    - Unknown word (confidentiality) -- respond. We will respect confidentiality
code-of-conduct.md:71:31     - Unknown word (questions)       -- with any additional questions, and make a decision
code-of-conduct.md:71:92     - Unknown word (respect)         -- to respond. We will respect confidentiality
code-of-conduct.md:72:18     - Unknown word (purpose)         -- requests for the purpose of protecting victims
code-of-conduct.md:72:29     - Unknown word (protecting)      -- requests for the purpose of protecting victims of abuse.
code-of-conduct.md:72:40     - Unknown word (victims)         -- purpose of protecting victims of abuse.
code-of-conduct.md:72:51     - Unknown word (abuse)           -- protecting victims of abuse.
code-of-conduct.md:74:47     - Unknown word (expected)        -- unacceptable behavior is expected to comply immediately
code-of-conduct.md:74:59     - Unknown word (comply)          -- behavior is expected to comply immediately. If an individual
code-of-conduct.md:74:66     - Unknown word (immediately)     -- is expected to comply immediately. If an individual engages
code-of-conduct.md:74:8      - Unknown word (asked)           -- Anyone asked to stop unacceptable
code-of-conduct.md:74:85     - Unknown word (individual)      -- comply immediately. If an individual engages in unacceptable
code-of-conduct.md:74:96     - Unknown word (engages)         -- immediately. If an individual engages in unacceptable
code-of-conduct.md:75:55     - Unknown word (deem)            -- take any action they deem appropriate, up to and
code-of-conduct.md:75:60     - Unknown word (appropriate)     -- any action they deem appropriate, up to and including
code-of-conduct.md:75:95     - Unknown word (permanent)       -- up to and including a permanent ban from our
code-of-conduct.md:82:4      - Unknown word (Thanks)          -- ## Thanks
code-of-conduct.md:87:21     - Unknown word (their)           -- We are thankful for their work and all the communities
code-of-conduct.md:87:65     - Unknown word (paved)           -- communities who have paved the way with code of
code-of-conduct.md:87:8      - Unknown word (thankful)        -- We are thankful for their work and all
code-of-conduct.md:87:92     - Unknown word (conducts)        -- the way with code of conducts.
code-of-conduct.md:8:28      - Unknown word (strives)      -- open source repository strives to:
copyFile.js:18:26     - Unknown word (copied)     -- console.log("Files copied");
copyFile.js:5:16      - Unknown word (pages)      -- dest: "src/pages/contributors.md",
docs/advanced/index.md:10:3      - Unknown word (Advice)        -- - Advice for contributing to
docs/advanced/index.md:10:30     - Unknown word (Definitely)    -- for contributing to DefinitelyTyped
docs/advanced/index.md:11:24     - Unknown word (full)          -- The goal is to take _full advantage_ of TypeScript
docs/advanced/index.md:11:29     - Unknown word (advantage)     -- goal is to take _full advantage_ of TypeScript.
docs/advanced/index.md:13:3      - Unknown word (Creating)      -- **Creating React + TypeScript Libraries
docs/advanced/index.md:13:31     - Unknown word (Libraries)     -- Creating React + TypeScript Libraries**
docs/advanced/index.md:15:188    - Unknown word (Guide)         -- view [the React User Guide](https://github.com
docs/advanced/index.md:15:19     - Unknown word (creating)      -- The best tool for creating React + TS libraries
docs/advanced/index.md:15:265    - Unknown word (library)       -- few tips on React+TS library best practices and optimizati
docs/advanced/index.md:15:278    - Unknown word (practices)     -- React+TS library best practices and optimizations for
docs/advanced/index.md:15:292    - Unknown word (optimizations) -- library best practices and optimizations for production.
docs/advanced/index.md:15:310    - Unknown word (production)    -- and optimizations for production.
docs/advanced/index.md:15:64     - Unknown word (tsdx)          -- libraries right now is [`tsdx`](https://github.com
docs/advanced/index.md:17:1      - Unknown word (Another)       -- Another option is [Rollpkg]
docs/advanced/index.md:17:20     - Unknown word (Rollpkg)       -- Another option is [Rollpkg](https://github.com
docs/advanced/index.md:17:217    - Unknown word (setup)         -- Prettier, ESLint, and Jest (setup for use with React)
docs/advanced/index.md:17:255    - Unknown word (Bundlephobia)  -- with React), as well as Bundlephobia package stats for each
docs/advanced/index.md:17:276    - Unknown word (stats)         -- Bundlephobia package stats for each build.
docs/advanced/index.md:17:73     - Unknown word (uses)          -- rafgraph/rollpkg), which uses Rollup and the TypeScript
docs/advanced/index.md:19:27     - Unknown word (basarat)       -- sure to also check [`basarat`'s guide](https://basarat
docs/advanced/index.md:19:38     - Unknown word (guide)         -- also check [`basarat`'s guide](https://basarat.gitbooks
docs/advanced/index.md:19:6      - Unknown word (sure)          -- - Be sure to also check [`basarat
docs/advanced/index.md:20:3      - Unknown word (Alec)          -- - Alec Larson: [The best Rollup
docs/advanced/index.md:20:8      - Unknown word (Larson)        -- - Alec Larson: [The best Rollup config
docs/advanced/index.md:2:5       - Unknown word (intro)      -- id: intro
docs/advanced/index.md:3:1       - Unknown word (sidebar)    -- sidebar_label: Intro
docs/advanced/index.md:3:16      - Unknown word (Intro)      -- sidebar_label: Intro
docs/advanced/index.md:4:17      - Unknown word (Cheatsheet) -- title: Advanced Cheatsheet
docs/advanced/index.md:7:150     - Unknown word (higher)     -- functions/render prop/higher order components and
docs/advanced/index.md:7:189     - Unknown word (libraries)  -- components and TS+React **libraries**.
docs/advanced/index.md:7:30      - Unknown word (helps)      -- Advanced Cheatsheet** helps show and explain advanced
docs/advanced/index.md:7:45      - Unknown word (explain)    -- Cheatsheet** helps show and explain advanced usage of generic
docs/advanced/index.md:9:15      - Unknown word (miscellaneous) -- - It also has miscellaneous tips and tricks for
docs/advanced/index.md:9:29      - Unknown word (tips)          -- also has miscellaneous tips and tricks for pro users
docs/advanced/index.md:9:38      - Unknown word (tricks)        -- miscellaneous tips and tricks for pro users.
docs/advanced/misc-concerns.md:100:1     - Unknown word (Useful)         -- Useful libraries:
docs/advanced/misc-concerns.md:106:22    - Unknown word (advice)         -- If you have specific advice in this area, please
docs/advanced/misc-concerns.md:112:1     - Unknown word (There)          -- There isn't any real secret
docs/advanced/misc-concerns.md:112:67    - Unknown word (great)          -- TypeScript. But its a great idea to run prettier
docs/advanced/misc-concerns.md:112:73    - Unknown word (idea)           -- TypeScript. But its a great idea to run prettier on every
docs/advanced/misc-concerns.md:112:97    - Unknown word (every)          -- idea to run prettier on every commit!
docs/advanced/misc-concerns.md:119:4     - Unknown word (inside)         -- // inside package.json
docs/advanced/misc-concerns.md:11:118    - Unknown word (still)       -- apps**, but they are still relevant when writing
docs/advanced/misc-concerns.md:11:17     - Unknown word (seem)       -- `propTypes` may seem unnecessary with TypeScript
docs/advanced/misc-concerns.md:11:22     - Unknown word (unnecessary) -- propTypes` may seem unnecessary with TypeScript, especially
docs/advanced/misc-concerns.md:128:6     - Unknown word (linters)        -- "linters": {
docs/advanced/misc-concerns.md:130:21    - Unknown word (trailing)       -- "prettier --trailing-comma es5 --single-quote
docs/advanced/misc-concerns.md:133:38    - Unknown word (modules)        -- "**/dist/*, **/node_modules/*"]
docs/advanced/misc-concerns.md:137:6     - Unknown word (print)          -- "printWidth": 80,
docs/advanced/misc-concerns.md:138:13    - Unknown word (false)          -- "semi": false,
docs/advanced/misc-concerns.md:139:20    - Unknown word (true)           -- "singleQuote": true,
docs/advanced/misc-concerns.md:145:1     - Unknown word (Integrating)    -- Integrating this with ESlint may
docs/advanced/misc-concerns.md:145:124   - Unknown word (opinion)        -- if you have a strong opinion. [Here's a helpful gist
docs/advanced/misc-concerns.md:145:151   - Unknown word (gist)           -- opinion. [Here's a helpful gist.](https://gist.github
docs/advanced/misc-concerns.md:145:51    - Unknown word (haven't)        -- may be a problem. We haven't written much on this
docs/advanced/misc-concerns.md:145:59    - Unknown word (written)        -- problem. We haven't written much on this yet, please
docs/advanced/misc-concerns.md:145:92    - Unknown word (contribute)     -- on this yet, please contribute if you have a strong
docs/advanced/misc-concerns.md:147:117   - Unknown word (wish)           -- files). You may also wish to check out the newer
docs/advanced/misc-concerns.md:147:13    - Unknown word (authors)        -- For library authors, this is set up for
docs/advanced/misc-concerns.md:14:22     - Unknown word (Props)       -- interface MyComponentProps {
docs/advanced/misc-concerns.md:151:35    - Unknown word (shouldn't)      -- test your types! You shouldn't use it for EVERYTHING
docs/advanced/misc-concerns.md:151:56    - Unknown word (EVERYTHING)     -- shouldn't use it for EVERYTHING, but it can help prevent
docs/advanced/misc-concerns.md:151:84    - Unknown word (prevent)        -- EVERYTHING, but it can help prevent regressions:
docs/advanced/misc-concerns.md:151:92    - Unknown word (regressions)    -- it can help prevent regressions:
docs/advanced/misc-concerns.md:155:42    - Unknown word (Demo)           -- ikatyang/dts-jest ([Demo](https://codesandbox
docs/advanced/misc-concerns.md:160:1     - Unknown word (Lets)           -- Lets say you want to use
docs/advanced/misc-concerns.md:160:14    - Unknown word (want)           -- Lets say you want to use `de-indent`,
docs/advanced/misc-concerns.md:160:30    - Unknown word (indent)         -- you want to use `de-indent`, but it isn't typed
docs/advanced/misc-concerns.md:164:1     - Unknown word (Could)          -- Could not find a declaration
docs/advanced/misc-concerns.md:164:11    - Unknown word (find)           -- Could not find a declaration file for
docs/advanced/misc-concerns.md:164:127   - Unknown word (implicitly)     -- de-indent/index.js' implicitly has an 'any' type.
docs/advanced/misc-concerns.md:164:18    - Unknown word (declaration)    -- Could not find a declaration file for module 'de
docs/advanced/misc-concerns.md:164:39    - Unknown word (module)         -- declaration file for module 'de-indent'. '/Users
docs/advanced/misc-concerns.md:164:87    - Unknown word (loader)         -- swyx/Work/react-sfc-loader/node_modules/de-indent
docs/advanced/misc-concerns.md:165:101   - Unknown word (declare)        -- ts) file containing `declare module 'de-indent';
docs/advanced/misc-concerns.md:165:89    - Unknown word (containing)     -- declaration (.d.ts) file containing `declare module 'de
docs/advanced/misc-concerns.md:16:3      - Unknown word (second)      -- secondProp: number;
docs/advanced/misc-concerns.md:173:12    - Unknown word (deindent)       -- function deindent(): void;
docs/advanced/misc-concerns.md:173:24    - Unknown word (void)           -- function deindent(): void;
docs/advanced/misc-concerns.md:180:10    - Unknown word (Further)        -- <summary>Further Discussion</summary
docs/advanced/misc-concerns.md:180:18    - Unknown word (Discussion)     -- <summary>Further Discussion</summary>
docs/advanced/misc-concerns.md:182:17    - Unknown word (Please)         -- Any other tips? Please contribute on this topic
docs/advanced/misc-concerns.md:186:16    - Unknown word (Speed)          -- ## Compilation Speed
docs/advanced/misc-concerns.md:188:1     - Unknown word (Compiling)      -- Compiling large TS projects can
docs/advanced/misc-concerns.md:188:37    - Unknown word (slow)           -- TS projects can get slow. Here are some tips
docs/advanced/misc-concerns.md:190:40    - Unknown word (speed)          -- dedicated repo tracking TS speed recommendations: https
docs/advanced/misc-concerns.md:192:13    - Unknown word (official)       -- - Check the official [TS performance wiki
docs/advanced/misc-concerns.md:192:130   - Unknown word (Rossenwasser)   -- Performance) - note that [Dan Rossenwasser says to take it with
docs/advanced/misc-concerns.md:192:143   - Unknown word (says)           -- that [Dan Rossenwasser says to take it with a grain
docs/advanced/misc-concerns.md:192:166   - Unknown word (grain)          -- says to take it with a grain of salt](https://news
docs/advanced/misc-concerns.md:192:175   - Unknown word (salt)           -- take it with a grain of salt](https://news.ycombinator
docs/advanced/misc-concerns.md:192:26    - Unknown word (performance)    -- Check the official [TS performance wiki guidelines](https
docs/advanced/misc-concerns.md:192:43    - Unknown word (guidelines)     -- TS performance wiki guidelines](https://github.com
docs/advanced/misc-concerns.md:194:17    - Unknown word (pathinfo)      -- - set `output.pathinfo = false`
docs/advanced/misc-concerns.md:195:10    - Unknown word (optimization)  -- - set `optimization.splitChunks`, `optimization
docs/advanced/misc-concerns.md:195:28    - Unknown word (Chunks)        -- set `optimization.splitChunks`, `optimization.removeAvailab
docs/advanced/misc-concerns.md:195:66    - Unknown word (Modules)       -- optimization.removeAvailableModules`, `optimization.removeEmptyCh
docs/advanced/misc-concerns.md:19:26     - Unknown word (extends)     -- export class MyComponent extends React.Component<MyComponentPr
docs/advanced/misc-concerns.md:27:2      - Unknown word (Something)   -- [Something to add? File an issue
docs/advanced/misc-concerns.md:29:4      - Unknown word (Commenting)  -- ## Commenting Components
docs/advanced/misc-concerns.md:2:5       - Unknown word (misc)       -- id: misc_concerns
docs/advanced/misc-concerns.md:31:105    - Unknown word (very)        -- TypeScript. This is very handy for writing component
docs/advanced/misc-concerns.md:31:110    - Unknown word (handy)       -- TypeScript. This is very handy for writing component
docs/advanced/misc-concerns.md:31:152    - Unknown word (having)      -- component libraries and having useful descriptions
docs/advanced/misc-concerns.md:31:159    - Unknown word (useful)      -- libraries and having useful descriptions pop up
docs/advanced/misc-concerns.md:31:212    - Unknown word (tooling)     -- autocomplete and other tooling (like the [Docz PropsTable
docs/advanced/misc-concerns.md:31:231    - Unknown word (Docz)        -- other tooling (like the [Docz PropsTable](https:/
docs/advanced/misc-concerns.md:31:346    - Unknown word (YOUR)        -- remember is to use `/** YOUR_COMMENT_HERE */` syntax
docs/advanced/misc-concerns.md:31:359    - Unknown word (HERE)        -- use `/** YOUR_COMMENT_HERE */` syntax in the line
docs/advanced/misc-concerns.md:31:398    - Unknown word (whatever)    -- the line just above whatever you're annotating.
docs/advanced/misc-concerns.md:31:414    - Unknown word (annotating)  -- above whatever you're annotating.
docs/advanced/misc-concerns.md:36:15     - Unknown word (foobar)      -- * @default foobar
docs/advanced/misc-concerns.md:3:20      - Unknown word (Misc)       -- title: "Section 3: Misc. Concerns"
docs/advanced/misc-concerns.md:3:26      - Unknown word (Concerns)   -- title: "Section 3: Misc. Concerns"
docs/advanced/misc-concerns.md:55:1      - Unknown word (Often)       -- Often when creating similar
docs/advanced/misc-concerns.md:55:156    - Unknown word (added)        -- Types can easily be added be using `Object.assign
docs/advanced/misc-concerns.md:55:21     - Unknown word (similar)     -- Often when creating similar components or components
docs/advanced/misc-concerns.md:55:79     - Unknown word (relationship) -- have a parent-child relationship, it is useful to namespace
docs/advanced/misc-concerns.md:60:16     - Unknown word (props)        -- const Input = (props: any) => <input {..
docs/advanced/misc-concerns.md:71:4      - Unknown word (Exported)     -- * Exported components now can be
docs/advanced/misc-concerns.md:78:18     - Unknown word (bryceosterhaus) -- (Contributed by @bryceosterhaus, see [further discussion
docs/advanced/misc-concerns.md:78:2      - Unknown word (Contributed)  -- (Contributed by @bryceosterhaus,
docs/advanced/misc-concerns.md:78:39     - Unknown word (further)        -- bryceosterhaus, see [further discussion](https:/
docs/advanced/misc-concerns.md:78:47     - Unknown word (discussion)     -- bryceosterhaus, see [further discussion](https://github.com
docs/advanced/misc-concerns.md:7:1       - Unknown word (Sometimes)  -- Sometimes writing React isn't
docs/advanced/misc-concerns.md:7:105     - Unknown word (below)      -- libraries like Redux (see below for more on that), here
docs/advanced/misc-concerns.md:7:31      - Unknown word (just)       -- writing React isn't just about React. While we
docs/advanced/misc-concerns.md:7:36      - Unknown word (about)      -- writing React isn't just about React. While we don
docs/advanced/misc-concerns.md:7:49      - Unknown word (While)      -- t just about React. While we don't focus on other
docs/advanced/misc-concerns.md:84:171    - Unknown word (However)        -- to accept TypeScript. However it is newer and has
docs/advanced/misc-concerns.md:84:185    - Unknown word (newer)          -- TypeScript. However it is newer and has a few more rough
docs/advanced/misc-concerns.md:84:210    - Unknown word (rough)          -- newer and has a few more rough edges (many breaking
docs/advanced/misc-concerns.md:84:216    - Unknown word (edges)          -- has a few more rough edges (many breaking changes
docs/advanced/misc-concerns.md:84:223    - Unknown word (many)           -- few more rough edges (many breaking changes since
docs/advanced/misc-concerns.md:84:228    - Unknown word (breaking)       -- more rough edges (many breaking changes since it is
docs/advanced/misc-concerns.md:84:245    - Unknown word (since)          -- many breaking changes since it is still < v1.0)
docs/advanced/misc-concerns.md:84:44     - Unknown word (takes)          -- //docz.site/) which takes basically [1 line of
docs/advanced/misc-concerns.md:84:50     - Unknown word (basically)      -- docz.site/) which takes basically [1 line of config](https
docs/advanced/misc-concerns.md:86:151    - Unknown word (proptype)       -- This includes automatic proptype documentation generation
docs/advanced/misc-concerns.md:86:174    - Unknown word (generation)     -- proptype documentation generation, which is awesome :
docs/advanced/misc-concerns.md:86:195    - Unknown word (awesome)        -- generation, which is awesome :)
docs/advanced/misc-concerns.md:86:48     - Unknown word (wrote)          -- Storybook, read the docs I wrote over here: <https:/
docs/advanced/misc-concerns.md:86:5      - Unknown word (developing)     -- For developing with Storybook, read
docs/advanced/misc-concerns.md:90:4      - Unknown word (Migrating)      -- ## Migrating From Flow
docs/advanced/misc-concerns.md:92:22     - Unknown word (large)          -- You should check out large projects that are migrating
docs/advanced/misc-concerns.md:92:46     - Unknown word (migrating)      -- large projects that are migrating from flow to pick up
docs/advanced/misc-concerns.md:95:4      - Unknown word (Expo)           -- - [Expo](https://github.com
docs/advanced/misc-concerns.md:96:10     - Unknown word (beautiful)      -- - [React-beautiful-dnd](https://github
docs/advanced/misc-concerns.md:9:33      - Unknown word (instead)    -- TypeScript Libraries instead of Apps
docs/advanced/patterns_by_usecase.md:1001:3    - Unknown word (constructor)  -- constructor(private value: T) {
docs/advanced/patterns_by_usecase.md:1030:21   - Unknown word (parsing)      -- .getOrElse("error parsing string");
docs/advanced/patterns_by_usecase.md:108:22    - Unknown word (needs)          -- TODO: this section needs work to make it simplified
docs/advanced/patterns_by_usecase.md:110:10    - Unknown word (same)           -- Usecase: same as above, but for a
docs/advanced/patterns_by_usecase.md:117:7     - Unknown word (Card)           -- const Card = (
docs/advanced/patterns_by_usecase.md:118:87    - Unknown word (utility)        -- ementProps<typeof Box> // new utility, see below
docs/advanced/patterns_by_usecase.md:11:1      - Unknown word (Usecase)    -- Usecase: you want to make a
docs/advanced/patterns_by_usecase.md:11:90     - Unknown word (does)       -- props of `<button>` and does extra stuff.
docs/advanced/patterns_by_usecase.md:126:11    - Unknown word (extract)        -- Strategy: extract a component's props
docs/advanced/patterns_by_usecase.md:126:42    - Unknown word (inferring)      -- component's props by inferring them
docs/advanced/patterns_by_usecase.md:128:1     - Unknown word (Example)        -- Example:
docs/advanced/patterns_by_usecase.md:131:9     - Unknown word (Utility)        -- // ReactUtilityTypes.d.ts
docs/advanced/patterns_by_usecase.md:135:7     - Unknown word (never)          -- : never
docs/advanced/patterns_by_usecase.md:13:1      - Unknown word (Strategy)   -- Strategy: extend `React.ComponentProps
docs/advanced/patterns_by_usecase.md:145:13    - Unknown word (Partial)        -- D extends Partial<$ElementProps<C>>
docs/advanced/patterns_by_usecase.md:153:10    - Unknown word (dmisdm)         -- _thanks [dmisdm](https://github.com
docs/advanced/patterns_by_usecase.md:164:14    - Unknown word (Fancy)          -- export const FancyButton = forwardRef<Ref
docs/advanced/patterns_by_usecase.md:171:4     - Unknown word (Polymorphic)    -- ## Polymorphic Components (e.g. with
docs/advanced/patterns_by_usecase.md:173:30    - Unknown word (passing)        -- Polymorphic Components" = passing a component to be rendered
docs/advanced/patterns_by_usecase.md:173:56    - Unknown word (rendered)       -- passing a component to be rendered, e.g. with `as` props
docs/advanced/patterns_by_usecase.md:175:18    - Unknown word (pretty)         -- `ElementType` is pretty useful to cover most
docs/advanced/patterns_by_usecase.md:175:64    - Unknown word (passed)         -- most types that can be passed to createElement e.g
docs/advanced/patterns_by_usecase.md:189:13    - Unknown word (Logged)         -- const { isLoggedIn } = useAuth();
docs/advanced/patterns_by_usecase.md:18:26     - Unknown word (assignable) -- Type '"foo"' is not assignable to type '"button" |
docs/advanced/patterns_by_usecase.md:18:78     - Unknown word (undefined)  -- submit" | "reset" | undefined'.(2322)
docs/advanced/patterns_by_usecase.md:191:50    - Unknown word (Redirect)       -- Component {...rest} /> : <Redirect to="/" />;
docs/advanced/patterns_by_usecase.md:195:23    - Unknown word (refer)          -- For more info you can refer to these resources:
docs/advanced/patterns_by_usecase.md:19:33     - Unknown word (sldkj)      -- <Button type="foo"> sldkj </Button>
docs/advanced/patterns_by_usecase.md:201:162   - Unknown word (thoughts)       -- react/issues/151) for thoughts!
docs/advanced/patterns_by_usecase.md:201:82    - Unknown word (karol)          -- react/pull/69) and [@karol-majewski](https://github
docs/advanced/patterns_by_usecase.md:201:88    - Unknown word (majewski)       -- pull/69) and [@karol-majewski](https://github.com
docs/advanced/patterns_by_usecase.md:205:1     - Unknown word (Just)           -- Just as you can make generic
docs/advanced/patterns_by_usecase.md:205:159   - Unknown word (safety)         -- system for reusable type safety. Both Props and State
docs/advanced/patterns_by_usecase.md:205:167   - Unknown word (Both)           -- reusable type safety. Both Props and State can
docs/advanced/patterns_by_usecase.md:205:234   - Unknown word (although)       -- same generic types, although it probably makes more
docs/advanced/patterns_by_usecase.md:205:246   - Unknown word (probably)       -- generic types, although it probably makes more sense for
docs/advanced/patterns_by_usecase.md:205:255   - Unknown word (makes)          -- although it probably makes more sense for Props
docs/advanced/patterns_by_usecase.md:205:266   - Unknown word (sense)          -- probably makes more sense for Props than for State
docs/advanced/patterns_by_usecase.md:205:335   - Unknown word (annotate)       -- the generic type to annotate types of any variables
docs/advanced/patterns_by_usecase.md:205:44    - Unknown word (classes)        -- generic functions and classes in TypeScript, you can
docs/advanced/patterns_by_usecase.md:222:30    - Unknown word (null)           -- JSON.stringify(state, null, 2)}
docs/advanced/patterns_by_usecase.md:228:49    - Unknown word (nice)           -- generic components and get nice type safety through
docs/advanced/patterns_by_usecase.md:233:44    - Unknown word (inferred)       -- // type of 'string' inferred
docs/advanced/patterns_by_usecase.md:257:18    - Unknown word (Generics)       -- You can also use Generics using fat arrow function
docs/advanced/patterns_by_usecase.md:25:4      - Unknown word (implementation) -- // implementation
docs/advanced/patterns_by_usecase.md:267:24    - Unknown word (unknown)        -- Note the <T extends unknown> before the function
docs/advanced/patterns_by_usecase.md:267:33    - Unknown word (before)         -- <T extends unknown> before the function definition
docs/advanced/patterns_by_usecase.md:268:40    - Unknown word (confuse)        -- just `<T>` as it will confuse the TSX parser whether
docs/advanced/patterns_by_usecase.md:268:99    - Unknown word (Declaration)    -- JSX tag or a Generic Declaration.
docs/advanced/patterns_by_usecase.md:27:3      - Unknown word (special)        -- specialProp?: string;
docs/advanced/patterns_by_usecase.md:283:39    - Unknown word (Karol)          -- using classes: (Credit: [Karol Majewski](https://twitter
docs/advanced/patterns_by_usecase.md:283:45    - Unknown word (Majewski)       -- classes: (Credit: [Karol Majewski](https://twitter.com
docs/advanced/patterns_by_usecase.md:286:10    - Unknown word (Pure)           -- import { PureComponent, ReactNode
docs/advanced/patterns_by_usecase.md:2:17      - Unknown word (usecase)    -- id: patterns_by_usecase
docs/advanced/patterns_by_usecase.md:317:1     - Unknown word (Though)         -- Though you can't use Generic
docs/advanced/patterns_by_usecase.md:31:9      - Unknown word (something)      -- // do something with specialProp
docs/advanced/patterns_by_usecase.md:322:13    - Unknown word (Derived)        -- static getDerivedStateFromProps(props
docs/advanced/patterns_by_usecase.md:328:25    - Unknown word (convert)        -- fix this you need to convert your static function
docs/advanced/patterns_by_usecase.md:338:4     - Unknown word (Typing)         -- ## Typing Children
docs/advanced/patterns_by_usecase.md:340:1     - Unknown word (Some)           -- Some API designs require
docs/advanced/patterns_by_usecase.md:340:10    - Unknown word (designs)        -- Some API designs require some restriction
docs/advanced/patterns_by_usecase.md:340:111   - Unknown word (enforce)        -- is common to want to enforce these in types, but
docs/advanced/patterns_by_usecase.md:340:153   - Unknown word (aware)          -- types, but you should be aware of limitations to this
docs/advanced/patterns_by_usecase.md:340:162   - Unknown word (limitations)    -- you should be aware of limitations to this ability.
docs/advanced/patterns_by_usecase.md:340:18    - Unknown word (require)        -- Some API designs require some restriction on
docs/advanced/patterns_by_usecase.md:340:31    - Unknown word (restriction)    -- designs require some restriction on `children` passed
docs/advanced/patterns_by_usecase.md:342:5     - Unknown word (What)           -- ### What You CAN Do
docs/advanced/patterns_by_usecase.md:344:71    - Unknown word (tuple)          -- just one child, or a tuple of children.
docs/advanced/patterns_by_usecase.md:346:5     - Unknown word (following)      -- The following are valid:
docs/advanced/patterns_by_usecase.md:358:55    - Unknown word (fails)          -- use `prop-types` if TS fails you.
docs/advanced/patterns_by_usecase.md:365:10    - Unknown word (could)          -- // could share `propTypes` to
docs/advanced/patterns_by_usecase.md:374:14    - Unknown word (CANNOT)         -- ### What You CANNOT Do
docs/advanced/patterns_by_usecase.md:376:107   - Unknown word (fact)          -- want to express the fact that "React Router
docs/advanced/patterns_by_usecase.md:376:179   - Unknown word (nothing)       -- Route>` as children, nothing else is allowed" in
docs/advanced/patterns_by_usecase.md:376:30    - Unknown word (specify)        -- thing you cannot do is **specify which components** the
docs/advanced/patterns_by_usecase.md:378:114   - Unknown word (blackboxed)    -- the resultant type is blackboxed into a generic React
docs/advanced/patterns_by_usecase.md:378:96    - Unknown word (resultant)     -- foo='foo' />`), the resultant type is blackboxed into
docs/advanced/patterns_by_usecase.md:380:9     - Unknown word (Narrowing)     -- ## Type Narrowing based on Props
docs/advanced/patterns_by_usecase.md:389:18    - Unknown word (good)          -- {/* 😎 All good */}
docs/advanced/patterns_by_usecase.md:38:133    - Unknown word (however)        -- component libraries, however, `forwardRef` is often
docs/advanced/patterns_by_usecase.md:38:158    - Unknown word (often)          -- however, `forwardRef` is often needed for exposing
docs/advanced/patterns_by_usecase.md:38:164    - Unknown word (needed)         -- forwardRef` is often needed for exposing the underlying
docs/advanced/patterns_by_usecase.md:38:175    - Unknown word (exposing)       -- is often needed for exposing the underlying DOM node
docs/advanced/patterns_by_usecase.md:38:188    - Unknown word (underlying)     -- needed for exposing the underlying DOM node of an inner
docs/advanced/patterns_by_usecase.md:38:22     - Unknown word (Most)           -- *Forwarding Refs**: Most use cases will not need
docs/advanced/patterns_by_usecase.md:38:297    - Unknown word (grab)           -- ComponentPropsWithRef` to grab props for your wrapper
docs/advanced/patterns_by_usecase.md:38:31     - Unknown word (cases)          -- Forwarding Refs**: Most use cases will not need to obtain
docs/advanced/patterns_by_usecase.md:38:317    - Unknown word (wrapper)        -- grab props for your wrapper component. Check [our
docs/advanced/patterns_by_usecase.md:38:54     - Unknown word (obtain)         -- cases will not need to obtain a ref to the inner element
docs/advanced/patterns_by_usecase.md:38:74     - Unknown word (inner)          -- obtain a ref to the inner element. When building
docs/advanced/patterns_by_usecase.md:393:32    - Unknown word (doesnt)        -- � Error, `disabled` doesnt exist on anchor element
docs/advanced/patterns_by_usecase.md:402:29    - Unknown word (guards)        -- implement: Use [type guards](https://basarat.gitbook
docs/advanced/patterns_by_usecase.md:421:4     - Unknown word (Guard)         -- // Guard to check if href exists
docs/advanced/patterns_by_usecase.md:436:161   - Unknown word (overloaded)    -- how a function can be overloaded to have multiple call
docs/advanced/patterns_by_usecase.md:436:180   - Unknown word (multiple)      -- be overloaded to have multiple call signatures. In
docs/advanced/patterns_by_usecase.md:436:189   - Unknown word (call)          -- overloaded to have multiple call signatures. In the same
docs/advanced/patterns_by_usecase.md:436:194   - Unknown word (signatures)    -- to have multiple call signatures. In the same way, you
docs/advanced/patterns_by_usecase.md:436:268   - Unknown word (signature)     -- function component's call signature to list all of its different
docs/advanced/patterns_by_usecase.md:436:37    - Unknown word (analogous)     -- JSX in general, are analogous to functions. When a
docs/advanced/patterns_by_usecase.md:436:89    - Unknown word (differently)   -- component can render differently based on their props
docs/advanced/patterns_by_usecase.md:438:104   - Unknown word (receives)      -- anchor, based on if it receives a `href` attribute.
docs/advanced/patterns_by_usecase.md:43:30     - Unknown word (Intrinsic)      -- ComponentProps` or `IntrinsicElements` or `[Element
docs/advanced/patterns_by_usecase.md:444:33    - Unknown word (guard)         -- optionally use a custom type guard
docs/advanced/patterns_by_usecase.md:444:4     - Unknown word (optionally)    -- // optionally use a custom type guard
docs/advanced/patterns_by_usecase.md:451:10    - Unknown word (Clickable)     -- function Clickable(props: ButtonProps
docs/advanced/patterns_by_usecase.md:460:1     - Unknown word (They)          -- They don't even need to be
docs/advanced/patterns_by_usecase.md:460:28    - Unknown word (completely)    -- don't even need to be completely different props, as
docs/advanced/patterns_by_usecase.md:460:90    - Unknown word (difference)    -- they have at least one difference in properties:
docs/advanced/patterns_by_usecase.md:477:15    - Unknown word (Approach)      -- <summary><b>Approach: Generic Components
docs/advanced/patterns_by_usecase.md:479:91    - Unknown word (jpavon)        -- solutions. _thanks to [@jpavon](https://github.com
docs/advanced/patterns_by_usecase.md:49:107    - Unknown word (whether)        -- to be explicit about whether or not the component
docs/advanced/patterns_by_usecase.md:49:190    - Unknown word (demonstrate)    -- what we have chosen to demonstrate. The tradeoff is slightly
docs/advanced/patterns_by_usecase.md:49:207    - Unknown word (tradeoff)       -- to demonstrate. The tradeoff is slightly more intimidating
docs/advanced/patterns_by_usecase.md:49:219    - Unknown word (slightly)       -- demonstrate. The tradeoff is slightly more intimidating terminology
docs/advanced/patterns_by_usecase.md:49:233    - Unknown word (intimidating)   -- tradeoff is slightly more intimidating terminology.
docs/advanced/patterns_by_usecase.md:49:33     - Unknown word (place)          -- `ComponentProps` in place of `ComponentPropsWithRef
docs/advanced/patterns_by_usecase.md:49:79     - Unknown word (prefer)         -- entPropsWithRef`, but you may prefer to be explicit about
docs/advanced/patterns_by_usecase.md:506:25    - Unknown word (Composition)   -- summary><b>Approach: Composition</b></summary>
docs/advanced/patterns_by_usecase.md:508:16    - Unknown word (conditionally) -- If you want to conditionally render a component,
docs/advanced/patterns_by_usecase.md:508:174   - Unknown word (simpler)       -- inheritance.html) to have simpler components and better
docs/advanced/patterns_by_usecase.md:508:50    - Unknown word (sometimes)     -- render a component, sometimes it is better to use
docs/advanced/patterns_by_usecase.md:508:66    - Unknown word (better)        -- component, sometimes it is better to use [React's composition
docs/advanced/patterns_by_usecase.md:508:89    - Unknown word (composition)   -- better to use [React's composition model](https://reactjs
docs/advanced/patterns_by_usecase.md:51:1      - Unknown word (More)           -- More info: https://react
docs/advanced/patterns_by_usecase.md:53:5      - Unknown word (Maybe)          -- ### Maybe `React.JSX.IntrinsicElements
docs/advanced/patterns_by_usecase.md:545:26    - Unknown word (Discriminated) -- may also want to use Discriminated Unions, please check
docs/advanced/patterns_by_usecase.md:545:40    - Unknown word (Unions)        -- to use Discriminated Unions, please check out [Expressive
docs/advanced/patterns_by_usecase.md:545:66    - Unknown word (Expressive)    -- Unions, please check out [Expressive React Component APIs
docs/advanced/patterns_by_usecase.md:547:11    - Unknown word (brief)         -- Here is a brief intuition for **Discriminated
docs/advanced/patterns_by_usecase.md:547:17    - Unknown word (intuition)     -- Here is a brief intuition for **Discriminated
docs/advanced/patterns_by_usecase.md:55:14     - Unknown word (least)          -- There are at least 2 other equivalent ways
docs/advanced/patterns_by_usecase.md:55:28     - Unknown word (equivalent)     -- are at least 2 other equivalent ways to do this, but
docs/advanced/patterns_by_usecase.md:55:39     - Unknown word (ways)           -- least 2 other equivalent ways to do this, but they
docs/advanced/patterns_by_usecase.md:55:74     - Unknown word (verbose)        -- this, but they are more verbose:
docs/advanced/patterns_by_usecase.md:561:10    - Unknown word (handle)        -- function handle(event: UserEvent) {
docs/advanced/patterns_by_usecase.md:574:3     - Unknown word (Take)          -- Take care: TypeScript does
docs/advanced/patterns_by_usecase.md:574:34    - Unknown word (narrow)        -- TypeScript does not narrow the type of a Discriminated
docs/advanced/patterns_by_usecase.md:574:8     - Unknown word (care)          -- Take care: TypeScript does not
docs/advanced/patterns_by_usecase.md:574:82    - Unknown word (basis)         -- Discriminated Union on the basis of typeof checks. The
docs/advanced/patterns_by_usecase.md:592:47    - Unknown word (checking)      -- not work as we are not checking the value of `event
docs/advanced/patterns_by_usecase.md:598:105   - Unknown word (automatically) -- The type matched is automatically updated when the correspondin
docs/advanced/patterns_by_usecase.md:598:119   - Unknown word (updated)       -- matched is automatically updated when the corresponding
docs/advanced/patterns_by_usecase.md:598:136   - Unknown word (corresponding) -- utomatically updated when the corresponding union member based on
docs/advanced/patterns_by_usecase.md:598:185   - Unknown word (depends)       -- based on which a hook depends, changes. Expand more
docs/advanced/patterns_by_usecase.md:598:203   - Unknown word (Expand)        -- hook depends, changes. Expand more to see an example
docs/advanced/patterns_by_usecase.md:598:94    - Unknown word (matched)       -- pendencies in React. The type matched is automatically updated
docs/advanced/patterns_by_usecase.md:603:13    - Unknown word (Memo)          -- import { useMemo } from "react";
docs/advanced/patterns_by_usecase.md:609:11    - Unknown word (Multi)         -- interface MultiElement {
docs/advanced/patterns_by_usecase.md:615:10    - Unknown word (Sequence)      -- function Sequence(p: Props) {
docs/advanced/patterns_by_usecase.md:624:100   - Unknown word (dependency)    -- value type based on dependency change
docs/advanced/patterns_by_usecase.md:645:33    - Unknown word (combine)       -- streamline this you may also combine this with the concept
docs/advanced/patterns_by_usecase.md:645:4     - Unknown word (streamline)    -- To streamline this you may also combine
docs/advanced/patterns_by_usecase.md:645:55    - Unknown word (concept)       -- combine this with the concept of **User-Defined Type
docs/advanced/patterns_by_usecase.md:645:86    - Unknown word (Guards)        -- **User-Defined Type Guards**:
docs/advanced/patterns_by_usecase.md:653:50    - Unknown word (Handbook)      -- Defined Type Guards in the Handbook](https://www.typescriptlang
docs/advanced/patterns_by_usecase.md:661:1     - Unknown word (Since)         -- Since TypeScript is a structural
docs/advanced/patterns_by_usecase.md:661:106   - Unknown word (exact)         -- described rather than _exact_, which makes it a bit
docs/advanced/patterns_by_usecase.md:661:140   - Unknown word (difficult)     -- makes it a bit more difficult to disallow certain
docs/advanced/patterns_by_usecase.md:661:153   - Unknown word (disallow)      -- bit more difficult to disallow certain props compared
docs/advanced/patterns_by_usecase.md:661:162   - Unknown word (certain)       -- difficult to disallow certain props compared to what
docs/advanced/patterns_by_usecase.md:661:23    - Unknown word (structural)    -- Since TypeScript is a structural type system, _minimum
docs/advanced/patterns_by_usecase.md:661:48    - Unknown word (minimum)       -- structural type system, _minimum_ property requirements
docs/advanced/patterns_by_usecase.md:661:66    - Unknown word (requirements)  -- _minimum_ property requirements are described rather
docs/advanced/patterns_by_usecase.md:661:83    - Unknown word (described)     -- property requirements are described rather than _exact_
docs/advanced/patterns_by_usecase.md:661:93    - Unknown word (rather)        -- requirements are described rather than _exact_, which
docs/advanced/patterns_by_usecase.md:66:1      - Unknown word (Looking)        -- Looking at [the source for
docs/advanced/patterns_by_usecase.md:66:172    - Unknown word (shows)          -- react/index.d.ts#L821) shows that this is a clever
docs/advanced/patterns_by_usecase.md:66:193    - Unknown word (clever)         -- shows that this is a clever wrapper for `React.JSX
docs/advanced/patterns_by_usecase.md:66:243    - Unknown word (whereas)        -- IntrinsicElements`, whereas the second method relies
docs/advanced/patterns_by_usecase.md:66:269    - Unknown word (relies)         -- whereas the second method relies on specialized interfaces
docs/advanced/patterns_by_usecase.md:66:307    - Unknown word (unfamiliar)     -- specialized interfaces with unfamiliar naming/capitalization
docs/advanced/patterns_by_usecase.md:66:318    - Unknown word (naming)         -- interfaces with unfamiliar naming/capitalization.
docs/advanced/patterns_by_usecase.md:66:325    - Unknown word (capitalization) -- with unfamiliar naming/capitalization.
docs/advanced/patterns_by_usecase.md:687:10    - Unknown word (alternative)   -- A better alternative might be to use a discriminan
docs/advanced/patterns_by_usecase.md:687:40    - Unknown word (discriminant)  -- alternative might be to use a discriminant prop like this:
docs/advanced/patterns_by_usecase.md:68:120    - Unknown word (commentary)     -- our [`@types/react` commentary](https://react-typescript
docs/advanced/patterns_by_usecase.md:68:71     - Unknown word (look)           -- interfaces available - look for `HTMLAttributes
docs/advanced/patterns_by_usecase.md:70:1      - Unknown word (Ultimately)     -- Ultimately, [we picked the `ComponentPro
docs/advanced/patterns_by_usecase.md:70:117    - Unknown word (involves)       -- react/pull/276) as it involves the least TS specific
docs/advanced/patterns_by_usecase.md:70:148    - Unknown word (jargon)         -- the least TS specific jargon and has the most ease
docs/advanced/patterns_by_usecase.md:70:167    - Unknown word (most)           -- specific jargon and has the most ease of use. But you
docs/advanced/patterns_by_usecase.md:70:17     - Unknown word (picked)         -- Ultimately, [we picked the `ComponentProps
docs/advanced/patterns_by_usecase.md:70:172    - Unknown word (ease)           -- jargon and has the most ease of use. But you'll be
docs/advanced/patterns_by_usecase.md:70:199    - Unknown word (fine)           -- of use. But you'll be fine with either of these
docs/advanced/patterns_by_usecase.md:70:209    - Unknown word (either)         -- you'll be fine with either of these methods if
docs/advanced/patterns_by_usecase.md:719:1     - Unknown word (Passing)       -- Passing no props is equivalent
docs/advanced/patterns_by_usecase.md:719:200   - Unknown word (means)         -- interface, `{}` and `Object` means](/docs/basic/getting
docs/advanced/patterns_by_usecase.md:719:324   - Unknown word (closest)       -- never>` is probably the closest you can get to an empty
docs/advanced/patterns_by_usecase.md:719:377   - Unknown word (recommended)   -- object type, and is [recommended by typescript-eslint
docs/advanced/patterns_by_usecase.md:719:480   - Unknown word (allowing)      -- Here's an example of allowing "nothing or all":
docs/advanced/patterns_by_usecase.md:727:6     - Unknown word (Nothing)       -- type Nothing = Record<string, never
docs/advanced/patterns_by_usecase.md:746:19    - Unknown word (representing)  -- While this works, representing an empty object with
docs/advanced/patterns_by_usecase.md:746:207   - Unknown word (approaching)   -- It might be better approaching this in another way
docs/advanced/patterns_by_usecase.md:746:243   - Unknown word (avoid)         -- this in another way, to avoid trying to type "an exactly
docs/advanced/patterns_by_usecase.md:746:249   - Unknown word (trying)        -- another way, to avoid trying to type "an exactly
docs/advanced/patterns_by_usecase.md:746:268   - Unknown word (exactly)       -- avoid trying to type "an exactly empty object". One way
docs/advanced/patterns_by_usecase.md:746:302   - Unknown word (grouping)      -- object". One way is grouping the required props in
docs/advanced/patterns_by_usecase.md:746:336   - Unknown word (optional)      -- required props in an optional object:
docs/advanced/patterns_by_usecase.md:746:85    - Unknown word (officially)    -- string, never>` [is not officially recommended](https:
docs/advanced/patterns_by_usecase.md:74:14     - Unknown word (happens)        -- This is what happens when you use `React
docs/advanced/patterns_by_usecase.md:775:41    - Unknown word (Passed)        -- ONLY IF the Other Is Passed
docs/advanced/patterns_by_usecase.md:777:165   - Unknown word (clicks)        -- (e.g. when the user clicks the text).
docs/advanced/patterns_by_usecase.md:777:36    - Unknown word (gets)          -- Text component that gets truncated if `truncate
docs/advanced/patterns_by_usecase.md:777:41    - Unknown word (truncated)     -- component that gets truncated if `truncate` prop is
docs/advanced/patterns_by_usecase.md:777:55    - Unknown word (truncate)      -- that gets truncated if `truncate` prop is passed but
docs/advanced/patterns_by_usecase.md:777:84    - Unknown word (expands)       -- prop is passed but expands to show the full text
docs/advanced/patterns_by_usecase.md:798:36    - Unknown word (overloads)     -- implement this by function overloads:
docs/advanced/patterns_by_usecase.md:7:13      - Unknown word (Mirroring)  -- ## Wrapping/Mirroring
docs/advanced/patterns_by_usecase.md:7:4       - Unknown word (Wrapping)   -- ## Wrapping/Mirroring
docs/advanced/patterns_by_usecase.md:808:8     - Unknown word (Truncate)      -- type NoTruncateProps = CommonProps
docs/advanced/patterns_by_usecase.md:830:16    - Unknown word (intersecting)  -- Sometimes when intersecting types, we want to define
docs/advanced/patterns_by_usecase.md:834:40    - Unknown word (conflict)      -- ReactNode; // this will conflict with the InputElement
docs/advanced/patterns_by_usecase.md:837:15    - Unknown word (inbuilt)       -- // this comes inbuilt with TS 3.5
docs/advanced/patterns_by_usecase.md:856:146   - Unknown word (removed)       -- your fields should be removed from the underlying
docs/advanced/patterns_by_usecase.md:856:202   - Unknown word (operator)      -- component using the `keyof` operator:
docs/advanced/patterns_by_usecase.md:856:21    - Unknown word (defines)       -- When your component defines multiple props, chances
docs/advanced/patterns_by_usecase.md:856:45    - Unknown word (chances)       -- defines multiple props, chances of those conflicts increase
docs/advanced/patterns_by_usecase.md:871:169   - Unknown word (operators)     -- is a nice toolkit of operators you may wish to check
docs/advanced/patterns_by_usecase.md:871:59    - Unknown word (significant)   -- above, you can write significant logic in your types
docs/advanced/patterns_by_usecase.md:871:71    - Unknown word (logic)         -- can write significant logic in your types as well
docs/advanced/patterns_by_usecase.md:873:11    - Unknown word (Extracting)    -- ## Props: Extracting Prop Types of a Component
docs/advanced/patterns_by_usecase.md:875:64    - Unknown word (exported)      -- component, but it isn't exported.
docs/advanced/patterns_by_usecase.md:87:4      - Unknown word (infers)         -- It infers a too-wide type of
docs/advanced/patterns_by_usecase.md:87:98     - Unknown word (hood)           -- AllHTMLAttributes` under the hood](https://github.com
docs/advanced/patterns_by_usecase.md:880:30    - Unknown word (elsewhere)     -- Modal component defined elsewhere
docs/advanced/patterns_by_usecase.md:883:3     - Unknown word (visible)       -- visible: true,
docs/advanced/patterns_by_usecase.md:888:104   - Unknown word (internal)      -- taking into account internal props, `propTypes`,
docs/advanced/patterns_by_usecase.md:888:180   - Unknown word (helper)        -- check our issue here for helper utilities that resolve
docs/advanced/patterns_by_usecase.md:888:20    - Unknown word (edge)          -- There are advanced edge cases if you want to
docs/advanced/patterns_by_usecase.md:888:84    - Unknown word (taking)        -- types of a component taking into account internal
docs/advanced/patterns_by_usecase.md:892:107   - Unknown word (completeness)  -- include this merely for completeness.
docs/advanced/patterns_by_usecase.md:892:11    - Unknown word (Where)         -- > Advice: Where possible, you should
docs/advanced/patterns_by_usecase.md:892:17    - Unknown word (possible)      -- > Advice: Where possible, you should try to use
docs/advanced/patterns_by_usecase.md:892:96    - Unknown word (merely)        -- Props. We include this merely for completeness.
docs/advanced/patterns_by_usecase.md:894:141   - Unknown word (such)          -- best Type to use for such a situation is `ReactNode
docs/advanced/patterns_by_usecase.md:894:148   - Unknown word (situation)     -- Type to use for such a situation is `ReactNode` which
docs/advanced/patterns_by_usecase.md:894:179   - Unknown word (fits)          -- is `ReactNode` which fits anywhere a normal, well
docs/advanced/patterns_by_usecase.md:894:220   - Unknown word (would)         -- normal, well, React Node would fit:
docs/advanced/patterns_by_usecase.md:926:13    - Unknown word (Exceptions)    -- ## Handling Exceptions
docs/advanced/patterns_by_usecase.md:926:4     - Unknown word (Handling)      -- ## Handling Exceptions
docs/advanced/patterns_by_usecase.md:936:46    - Unknown word (entered)       -- alidDateFormatError} The user entered date incorrectly
docs/advanced/patterns_by_usecase.md:936:5     - Unknown word (throws)        -- * @throws {InvalidDateFormatError
docs/advanced/patterns_by_usecase.md:936:59    - Unknown word (incorrectly)   -- The user entered date incorrectly
docs/advanced/patterns_by_usecase.md:942:5     - Unknown word (throw)         -- throw new InvalidDateFormatError
docs/advanced/patterns_by_usecase.md:948:23    - Unknown word (somewhere)     -- // call parse(date) somewhere
docs/advanced/patterns_by_usecase.md:949:3     - Unknown word (catch)         -- } catch (e) {
docs/advanced/patterns_by_usecase.md:953:13    - Unknown word (warn)          -- console.warn("date is in future"
docs/advanced/patterns_by_usecase.md:962:1     - Unknown word (Simply)       -- Simply throwing an exception
docs/advanced/patterns_by_usecase.md:962:165   - Unknown word (returning)    -- can do that just by returning instead of throwing
docs/advanced/patterns_by_usecase.md:962:20    - Unknown word (exception)    -- Simply throwing an exception is fine, however it
docs/advanced/patterns_by_usecase.md:962:8     - Unknown word (throwing)     -- Simply throwing an exception is fine
docs/advanced/patterns_by_usecase.md:962:83    - Unknown word (remind)       -- nice to make TypeScript remind the consumer of your
docs/advanced/patterns_by_usecase.md:975:21    - Unknown word (mydate)       -- let result = parse("mydate");
docs/advanced/patterns_by_usecase.md:981:18    - Unknown word (safely)       -- /// use result safely
docs/advanced/patterns_by_usecase.md:984:4     - Unknown word (alternately)  -- // alternately you can just handle
docs/advanced/patterns_by_usecase.md:992:132   - Unknown word (Either)       -- (or `Maybe`), and `Either` data types:
docs/advanced/patterns_by_usecase.md:992:23    - Unknown word (exceptions)   -- You can also describe exceptions with special-purpose
docs/advanced/patterns_by_usecase.md:992:77    - Unknown word (monads)       -- data types (don't say monads...) like the `Try`,
docs/advanced/patterns_by_version.md:122:32    - Unknown word (know)          -- blame this change. Don't know what this should've
docs/advanced/patterns_by_version.md:122:57    - Unknown word (done)          -- what this should've done
docs/advanced/patterns_by_version.md:122:7     - Unknown word (blame)         -- TODO: blame this change. Don't know
docs/advanced/patterns_by_version.md:124:100   - Unknown word (resorting)     -- This is better than resorting to `any`.
docs/advanced/patterns_by_version.md:128:175   - Unknown word (lets)          -- tsconfig.json files. This lets large codebases scale
docs/advanced/patterns_by_version.md:128:210   - Unknown word (recompiling)   -- codebases scale without recompiling every part of the codebase
docs/advanced/patterns_by_version.md:135:27    - Unknown word (tells)         -- composite": true, // tells TSC it is a subproject
docs/advanced/patterns_by_version.md:135:45    - Unknown word (subproject)    -- / tells TSC it is a subproject of a larger project
docs/advanced/patterns_by_version.md:135:61    - Unknown word (larger)        -- is a subproject of a larger project
docs/advanced/patterns_by_version.md:136:29    - Unknown word (emit)          -- declaration": true, // emit .d.ts declaration files
docs/advanced/patterns_by_version.md:136:83    - Unknown word (dont)          -- since project references dont have access to source
docs/advanced/patterns_by_version.md:138:42    - Unknown word (relative)      -- specify compile it relative to root project at
docs/advanced/patterns_by_version.md:13:11     - Unknown word (Notes)         -- [[Release Notes](https://www.typescriptlang
docs/advanced/patterns_by_version.md:142:28    - Unknown word (subprojects)   -- (optional) array of subprojects your subproject depends
docs/advanced/patterns_by_version.md:144:19    - Unknown word (myreferencedproject) -- "path": "../myreferencedproject", // must have tsconfig
docs/advanced/patterns_by_version.md:144:44    - Unknown word (must)                -- myreferencedproject", // must have tsconfig.json
docs/advanced/patterns_by_version.md:145:26    - Unknown word (concatenate)         -- "prepend": true // concatenate js and sourcemaps generated
docs/advanced/patterns_by_version.md:145:56    - Unknown word (generated)           -- concatenate js and sourcemaps generated by this subproject,
docs/advanced/patterns_by_version.md:156:31    - Unknown word (proj)                -- references": [{ "path": "./proj1" }, { "path": "./proj
docs/advanced/patterns_by_version.md:15:23     - Unknown word (tagged)        -- Type arguments for tagged template strings (e
docs/advanced/patterns_by_version.md:15:39     - Unknown word (strings)       -- for tagged template strings (e.g. `styled-components
docs/advanced/patterns_by_version.md:15:9      - Unknown word (arguments)     -- 1. Type arguments for tagged template
docs/advanced/patterns_by_version.md:175:15    - Unknown word (declarations)        -- 1. Properties declarations on functions
docs/advanced/patterns_by_version.md:177:1     - Unknown word (Attaching)           -- Attaching properties to functions
docs/advanced/patterns_by_version.md:19:27     - Unknown word (understood)    -- string; // this is understood inside the template
docs/advanced/patterns_by_version.md:206:13    - Unknown word (Loading)             -- function useLoading() {
docs/advanced/patterns_by_version.md:211:21    - Unknown word (finally)             -- return aPromise.finally(() => setState(false
docs/advanced/patterns_by_version.md:218:14    - Unknown word (places)              -- More info on places you can use [const assertions
docs/advanced/patterns_by_version.md:226:4     - Unknown word (Higher)              -- 2. Higher order type inference
docs/advanced/patterns_by_version.md:226:45    - Unknown word (constructors)        -- inference from generic constructors
docs/advanced/patterns_by_version.md:237:6     - Unknown word (Nested)              -- type NestedProps<T> = { foo: number
docs/advanced/patterns_by_version.md:245:29    - Unknown word (upgrading)           -- also [Notes from Google upgrading to 3.5](https://github
docs/advanced/patterns_by_version.md:24:14     - Unknown word (theme)         -- ${({ themeName }) => (themeName
docs/advanced/patterns_by_version.md:24:46     - Unknown word (dark)          -- => (themeName === "dark" ? "black" : "white
docs/advanced/patterns_by_version.md:251:126   - Unknown word (Ambient)             -- got an upgrade and [Ambient Classes and Functions
docs/advanced/patterns_by_version.md:251:134   - Unknown word (Classes)             -- upgrade and [Ambient Classes and Functions Can Merge
docs/advanced/patterns_by_version.md:251:46    - Unknown word (playground)          -- React specific but [the playground](https://github.com
docs/advanced/patterns_by_version.md:251:9     - Unknown word (particularly)        -- Nothing particularly React specific but
docs/advanced/patterns_by_version.md:257:13    - Unknown word (Chaining)            -- 1. Optional Chaining
docs/advanced/patterns_by_version.md:257:4     - Unknown word (Optional)            -- 1. Optional Chaining
docs/advanced/patterns_by_version.md:25:5      - Unknown word (border)        -- border-color: ${({ foo })
docs/advanced/patterns_by_version.md:271:13    - Unknown word (Call)                -- // Optional Call
docs/advanced/patterns_by_version.md:273:18    - Unknown word (started)             -- log?.(`Request started at ${new Date().toISOString
docs/advanced/patterns_by_version.md:274:19    - Unknown word (await)               -- const result = (await fetch(url)).json();
docs/advanced/patterns_by_version.md:275:18    - Unknown word (finished)            -- log?.(`Request finished at at ${new Date().toISOStrin
docs/advanced/patterns_by_version.md:280:12    - Unknown word (Coalescing)          -- 2. Nullish Coalescing
docs/advanced/patterns_by_version.md:290:14    - Unknown word (USUALLY)             -- **YOU SHOULD USUALLY USE `??` WHEREVER YOU
docs/advanced/patterns_by_version.md:290:31    - Unknown word (WHEREVER)            -- SHOULD USUALLY USE `??` WHEREVER YOU NORMALLY USE `|
docs/advanced/patterns_by_version.md:290:44    - Unknown word (NORMALLY)            -- USE `??` WHEREVER YOU NORMALLY USE `||`** unless you
docs/advanced/patterns_by_version.md:290:64    - Unknown word (unless)              -- NORMALLY USE `||`** unless you truly mean falsiness
docs/advanced/patterns_by_version.md:290:75    - Unknown word (truly)               -- USE `||`** unless you truly mean falsiness:
docs/advanced/patterns_by_version.md:290:86    - Unknown word (falsiness)           -- unless you truly mean falsiness:
docs/advanced/patterns_by_version.md:294:70    - Unknown word (really)              -- with 0.5 even if user really means 0
docs/advanced/patterns_by_version.md:299:4     - Unknown word (Assertion)           -- 3. Assertion Functions
docs/advanced/patterns_by_version.md:302:48    - Unknown word (asserts)             -- any, msg?: string): asserts condition {
docs/advanced/patterns_by_version.md:307:10    - Unknown word (yell)                -- function yell(str) {
docs/advanced/patterns_by_version.md:310:16    - Unknown word (Uppercase)           -- return str.toUppercase();
docs/advanced/patterns_by_version.md:328:21    - Unknown word (knows)               -- // Now TypeScript knows that 'str' is a 'string
docs/advanced/patterns_by_version.md:339:75    - Unknown word (migrations)          -- TypeScript files! good for migrations.
docs/advanced/patterns_by_version.md:33:1      - Unknown word (Helps)         -- Helps with typing/using generic
docs/advanced/patterns_by_version.md:33:12     - Unknown word (typing)        -- Helps with typing/using generic components
docs/advanced/patterns_by_version.md:374:27    - Unknown word (Myles)               -- React specific but gj Myles
docs/advanced/patterns_by_version.md:376:19    - Unknown word (Modifiers)           -- 5. JSDoc Property Modifiers
docs/advanced/patterns_by_version.md:380:21    - Unknown word (Watching)            -- 6. Better Directory Watching on Linux and watchOptions
docs/advanced/patterns_by_version.md:380:4     - Unknown word (Better)              -- 6. Better Directory Watching on
docs/advanced/patterns_by_version.md:381:14    - Unknown word (Loose)               -- 7. “Fast and Loose” Incremental Checking
docs/advanced/patterns_by_version.md:381:21    - Unknown word (Incremental)         -- 7. “Fast and Loose” Incremental Checking
docs/advanced/patterns_by_version.md:381:33    - Unknown word (Checking)            -- and Loose” Incremental Checking
docs/advanced/patterns_by_version.md:383:19    - Unknown word (Affect)              -- `assumeChangesOnlyAffectDirectDependencies` reduces
docs/advanced/patterns_by_version.md:383:45    - Unknown word (reduces)             -- OnlyAffectDirectDependencies` reduces build times for extremely
docs/advanced/patterns_by_version.md:383:69    - Unknown word (extremely)           -- reduces build times for extremely large codebases.
docs/advanced/patterns_by_version.md:395:19    - Unknown word (octopus)             -- console.log(47 * "octopus");
docs/advanced/patterns_by_version.md:400:38    - Unknown word (actually)            -- test code where you actually want the type system
docs/advanced/patterns_by_version.md:401:26    - Unknown word (coming)              -- you expect a fix to be coming in fairly quickly and
docs/advanced/patterns_by_version.md:401:36    - Unknown word (fairly)              -- fix to be coming in fairly quickly and you just
docs/advanced/patterns_by_version.md:401:43    - Unknown word (quickly)             -- be coming in fairly quickly and you just need a
docs/advanced/patterns_by_version.md:401:77    - Unknown word (workaround)          -- you just need a quick workaround
docs/advanced/patterns_by_version.md:402:107   - Unknown word (soon)               -- suppression comments as soon affected code is valid
docs/advanced/patterns_by_version.md:402:135   - Unknown word (again)              -- affected code is valid again
docs/advanced/patterns_by_version.md:402:15    - Unknown word (reasonably)          -- - you’re in a reasonably-sized project with a
docs/advanced/patterns_by_version.md:402:26    - Unknown word (sized)              -- you’re in a reasonably-sized project with a proactive
docs/advanced/patterns_by_version.md:402:47    - Unknown word (proactive)          -- sized project with a proactive team that wants to remove
docs/advanced/patterns_by_version.md:402:67    - Unknown word (wants)              -- proactive team that wants to remove suppression
docs/advanced/patterns_by_version.md:402:83    - Unknown word (suppression)        -- that wants to remove suppression comments as soon affected
docs/advanced/patterns_by_version.md:406:56    - Unknown word (appeared)           -- and new errors have appeared in code with no clear
docs/advanced/patterns_by_version.md:407:18    - Unknown word (middle)             -- - you are in the middle of an upgrade between
docs/advanced/patterns_by_version.md:408:39    - Unknown word (decide)             -- don’t have the time to decide which of these options
docs/advanced/patterns_by_version.md:408:7     - Unknown word (honestly)           -- - you honestly don’t have the time
docs/advanced/patterns_by_version.md:410:41    - Unknown word (Characters)         -- Now Invalid JSX Text Characters
docs/advanced/patterns_by_version.md:412:11    - Unknown word (always)             -- They were always invalid, but now TypeScript
docs/advanced/patterns_by_version.md:412:6     - Unknown word (were)               -- They were always invalid, but
docs/advanced/patterns_by_version.md:412:60    - Unknown word (enforcing)          -- TypeScript and Babel are enforcing it:
docs/advanced/patterns_by_version.md:415:1     - Unknown word (Unexpected)         -- Unexpected token. Did you mean
docs/advanced/patterns_by_version.md:425:13    - Unknown word (Tuple)              -- - [Variadic Tuple Types](https://devblogs
docs/advanced/patterns_by_version.md:427:28    - Unknown word (Reducer)            -- useful for [simplified Reducer-like State](https:/
docs/advanced/patterns_by_version.md:429:15    - Unknown word (Factories)          -- - [Custom JSX Factories](https://devblogs.microsoft
docs/advanced/patterns_by_version.md:437:9     - Unknown word (Frag)               -- /** @jsxFrag Fragment */
docs/advanced/patterns_by_version.md:446:4     - Unknown word (transformed)        -- // transformed to
docs/advanced/patterns_by_version.md:456:11    - Unknown word (HUGE)               -- This is a HUGE feature.
docs/advanced/patterns_by_version.md:458:13    - Unknown word (Generating)         -- Usecase 1 - Generating string literal types
docs/advanced/patterns_by_version.md:458:50    - Unknown word (permutations)       -- string literal types from permutations of other string literal
docs/advanced/patterns_by_version.md:464:4     - Unknown word (Takes)              -- // Takes
docs/advanced/patterns_by_version.md:473:19    - Unknown word (middel)             -- setAlignment("top-middel"); // error!
docs/advanced/patterns_by_version.md:474:45    - Unknown word (doughnuts)          -- // error! but good doughnuts if you're ever in Seattle
docs/advanced/patterns_by_version.md:474:73    - Unknown word (Seattle)            -- doughnuts if you're ever in Seattle
docs/advanced/patterns_by_version.md:477:13    - Unknown word (Modeling)           -- Usecase 2 - Modeling dynaming string literal
docs/advanced/patterns_by_version.md:477:22    - Unknown word (dynaming)           -- Usecase 2 - Modeling dynaming string literal types
docs/advanced/patterns_by_version.md:481:37    - Unknown word (Changed)            -- `${string & keyof T}Changed`, callback: () => void
docs/advanced/patterns_by_version.md:481:47    - Unknown word (callback)           -- & keyof T}Changed`, callback: () => void): void;
docs/advanced/patterns_by_version.md:484:15    - Unknown word (watched)            -- /// Create a "watched object" with an 'on
docs/advanced/patterns_by_version.md:486:22    - Unknown word (Watched)            -- declare function makeWatchedObject<T>(obj: T): T
docs/advanced/patterns_by_version.md:489:104   - Unknown word (Uncapitalize)       -- , `Capitalize` and `Uncapitalize`.
docs/advanced/patterns_by_version.md:489:16    - Unknown word (manipulation)       -- To make string manipulation easier there are new
docs/advanced/patterns_by_version.md:489:29    - Unknown word (easier)             -- string manipulation easier there are new generics
docs/advanced/patterns_by_version.md:489:50    - Unknown word (generics)           -- easier there are new generics: `Uppercase`, `Lowercase
docs/advanced/patterns_by_version.md:489:74    - Unknown word (Lowercase)          -- generics: `Uppercase`, `Lowercase`, `Capitalize` and
docs/advanced/patterns_by_version.md:489:87    - Unknown word (Capitalize)         -- Uppercase`, `Lowercase`, `Capitalize` and `Uncapitalize`
docs/advanced/patterns_by_version.md:491:37    - Unknown word (keyword)            -- it with the `infer` keyword [like this](https:/
docs/advanced/patterns_by_version.md:501:27    - Unknown word (flexible)           -- feature is extremely flexible, see other usecase ideas
docs/advanced/patterns_by_version.md:508:34    - Unknown word (offer)              -- new compiler option to offer output inline with React
docs/advanced/patterns_by_version.md:517:10    - Unknown word (strict)             -- "strict": true
docs/advanced/patterns_by_version.md:524:48    - Unknown word (extending)          -- - for development - extending the production config
docs/advanced/patterns_by_version.md:528:23    - Unknown word (jsxdev)             -- "jsx": "react-jsxdev"
docs/advanced/patterns_by_version.md:535:22    - Unknown word (Mapped)             -- . [Key Remapping in Mapped Types](https://devblogs
docs/advanced/patterns_by_version.md:535:9     - Unknown word (Remapping)          -- 2. [Key Remapping in Mapped Types](https
docs/advanced/patterns_by_version.md:536:5     - Unknown word (Recursive)          -- 3. [Recursive Conditional Types](https
docs/advanced/patterns_by_version.md:537:13    - Unknown word (Indexed)            -- 4. [Checked Indexed Accesses](https://devblogs
docs/advanced/patterns_by_version.md:537:21    - Unknown word (Accesses)           -- 4. [Checked Indexed Accesses](https://devblogs.microsoft
docs/advanced/patterns_by_version.md:561:18    - Unknown word (improvement)        -- 1. (minor VSCode improvement) Snippet Completions
docs/advanced/patterns_by_version.md:561:31    - Unknown word (Snippet)            -- VSCode improvement) Snippet Completions for JSX
docs/advanced/patterns_by_version.md:561:39    - Unknown word (Completions)        -- improvement) Snippet Completions for JSX Attributes
docs/advanced/patterns_by_version.md:567:22    - Unknown word (Removed)            -- . (extremely minor) Removed Unnecessary Arguments
docs/advanced/patterns_by_version.md:567:30    - Unknown word (Unnecessary)        -- extremely minor) Removed Unnecessary Arguments in `react
docs/advanced/patterns_by_version.md:567:42    - Unknown word (Arguments)          -- Removed Unnecessary Arguments in `react-jsx` compile
docs/advanced/patterns_by_version.md:569:27    - Unknown word (Spec)               -- TypeScript Roadmap and Spec
docs/advanced/patterns_by_version.md:573:47    - Unknown word (spec)              -- read the TypeScript spec online?? https://github
docs/advanced/patterns_by_version.md:58:60     - Unknown word (length)        -- arguments of variable length:
docs/advanced/patterns_by_version.md:70:68     - Unknown word (Library)       -- defaultProps` in JSX using `LibraryManagedAttributes`:
docs/advanced/patterns_by_version.md:77:14     - Unknown word (Greet)         -- export class Greet extends React.Component
docs/advanced/patterns_by_version.md:7:147     - Unknown word (explore)    -- TypeScript versions and explore patterns commonly used
docs/advanced/patterns_by_version.md:7:164     - Unknown word (commonly)   -- and explore patterns commonly used by TypeScript
docs/advanced/patterns_by_version.md:7:234     - Unknown word (duplications) -- libraries. This may have duplications with other sections
docs/advanced/patterns_by_version.md:7:27      - Unknown word (introduce)  -- TypeScript Versions often introduce new ways to do things
docs/advanced/patterns_by_version.md:7:284     - Unknown word (discrepancies) -- sections; if you spot any discrepancies, [file an issue](https
docs/advanced/patterns_by_version.md:80:32     - Unknown word (Upper)         -- <div>Hello ${name.toUpperCase()}!</div>;
docs/advanced/patterns_by_version.md:85:25     - Unknown word (assertions)    -- Type-checks! No type assertions needed!
docs/advanced/patterns_by_version.md:89:9      - Unknown word (Unknown)       -- 3. new `Unknown` type
docs/advanced/patterns_by_version.md:91:113    - Unknown word (responses)     -- for dealing with API responses:
docs/advanced/patterns_by_version.md:91:45     - Unknown word (specifically)  -- force type checks - not specifically React related, however
docs/advanced/patterns_by_version.md:91:96     - Unknown word (dealing)       -- however very handy for dealing with API responses:
docs/advanced/patterns_by_version.md:9:114     - Unknown word (communication) -- from official TS team communication we also recommend [Marius
docs/advanced/patterns_by_version.md:9:136     - Unknown word (recommend)     -- communication we also recommend [Marius Schulz's blog
docs/advanced/patterns_by_version.md:9:147     - Unknown word (Marius)        -- munication we also recommend [Marius Schulz's blog for version
docs/advanced/patterns_by_version.md:9:154     - Unknown word (Schulz's)      -- also recommend [Marius Schulz's blog for version notes
docs/advanced/patterns_by_version.md:9:180     - Unknown word (notes)         -- Schulz's blog for version notes](https://mariusschulz
docs/advanced/patterns_by_version.md:9:21      - Unknown word (guides)        -- _TypeScript version guides before 2.9 are unwritten
docs/advanced/patterns_by_version.md:9:251     - Unknown word (Brief)         -- TypeScript history, see [A Brief History of TypeScript
docs/advanced/patterns_by_version.md:9:43      - Unknown word (unwritten)     -- guides before 2.9 are unwritten, please feel free to
docs/advanced/patterns_by_version.md:9:497     - Unknown word (lesser)        -- also wish to explore lesser known alternative typings
docs/advanced/patterns_by_version.md:9:86      - Unknown word (Apart)         -- free to send a PR!_ Apart from official TS team
docs/advanced/types-react-ap.md:105:147   - Unknown word (boxy)        -- because of how black-boxy `React.JSX.Element`
docs/advanced/types-react-ap.md:105:187   - Unknown word (almost)      -- Element` is. You should almost always assume that anything
docs/advanced/types-react-ap.md:105:3     - Unknown word (Ferdaber's)  -- [@Ferdaber's note](https://github
docs/advanced/types-react-ap.md:105:80    - Unknown word (discourage)  -- cheatsheets/react/pull/69): I discourage the use of most `..
docs/advanced/types-react-ap.md:109:122   - Unknown word (limitation)  -- you do because of [a limitation of TypeScript](https
docs/advanced/types-react-ap.md:109:58    - Unknown word (ideally)     -- expression. You should ideally never need to see or
docs/advanced/types-react-ap.md:110:35    - Unknown word (specifies)   -- ibraryManagedAttributes` - It specifies other places where JSX
docs/advanced/types-react-ap.md:111:219   - Unknown word (readable)    -- element>` may be more readable as it doesn't require
docs/advanced/types-react-ap.md:111:234   - Unknown word (doesn't)     -- more readable as it doesn't require knowing what
docs/advanced/types-react-ap.md:111:250   - Unknown word (knowing)     -- as it doesn't require knowing what "Intrinsic" means
docs/advanced/types-react-ap.md:111:85    - Unknown word (lowercase)   -- can be typed in as a lowercase tag name in JSX. If
docs/advanced/types-react-ap.md:116:123   - Unknown word (Basically)   -- component supports. Basically the `children` property
docs/advanced/types-react-ap.md:119:13    - Unknown word (Internal)    -- **Don't use/Internal/Deprecated**
docs/advanced/types-react-ap.md:119:22    - Unknown word (Deprecated)  -- *Don't use/Internal/Deprecated**
docs/advanced/types-react-ap.md:121:1     - Unknown word (Anything)    -- Anything not listed above is
docs/advanced/types-react-ap.md:121:14    - Unknown word (listed)      -- Anything not listed above is considered
docs/advanced/types-react-ap.md:121:155   - Unknown word (annotated)   -- react`. The types are annotated accordingly.
docs/advanced/types-react-ap.md:121:165   - Unknown word (accordingly) -- types are annotated accordingly.
docs/advanced/types-react-ap.md:121:30    - Unknown word (considered)  -- not listed above is considered an internal type and
docs/advanced/types-react-ap.md:126:4     - Unknown word (Legacy)      -- - `LegacyRef`
docs/advanced/types-react-ap.md:127:4     - Unknown word (Stateless)   -- - `StatelessComponent`
docs/advanced/types-react-ap.md:130:5     - Unknown word (Adding)      -- ### Adding non-standard attributes
docs/advanced/types-react-ap.md:133:7     - Unknown word (living)      -- [HTML living standard](https://html
docs/advanced/types-react-ap.md:134:36    - Unknown word (browsers)    -- implemented by certain browsers will therefore cause
docs/advanced/types-react-ap.md:134:60    - Unknown word (cause)       -- browsers will therefore cause a type error. If
docs/advanced/types-react-ap.md:136:13    - Unknown word (augmentation) -- use [module augmentation](https://www.typescriptlang
docs/advanced/types-react-ap.md:139:114   - Unknown word (adds)         -- 16) attribute which adds support for [lazy-loading
docs/advanced/types-react-ap.md:139:193   - Unknown word (Chrome)       -- lazy-loading) images on Chrome:
docs/advanced/types-react-ap.md:139:33    - Unknown word (loading)      -- example we'll add the [`loading`](https://www.chromestatus
docs/advanced/types-react-ap.md:142:10    - Unknown word (unstable)     -- // react-unstable-attributes.d.ts
docs/advanced/types-react-ap.md:147:25    - Unknown word (eager)        -- loading?: "auto" | "eager" | "lazy";
docs/advanced/types-react-ap.md:17:6      - Unknown word (Commonly)   -- Most Commonly Used Interfaces and
docs/advanced/types-react-ap.md:19:17     - Unknown word (anything)   -- - `ReactNode` - anything that is renderable
docs/advanced/types-react-ap.md:19:34     - Unknown word (renderable) -- - anything that is renderable _inside_ of JSX, this
docs/advanced/types-react-ap.md:21:52     - Unknown word (optimized)  -- for all class-based optimized components
docs/advanced/types-react-ap.md:24:34     - Unknown word (handlers)   -- used to type event handlers
docs/advanced/types-react-ap.md:26:62     - Unknown word (reflect)    -- are all public and reflect the React runtime namespace
docs/advanced/types-react-ap.md:28:23     - Unknown word (Good)       -- Not Commonly Used but Good to know
docs/advanced/types-react-ap.md:32:197    - Unknown word (rarely)     -- npahe/) aka it's pretty rarely used
docs/advanced/types-react-ap.md:33:83     - Unknown word (deal)       -- you don't specifically deal with the intrinsic components
docs/advanced/types-react-ap.md:33:97     - Unknown word (intrinsic)  -- specifically deal with the intrinsic components
docs/advanced/types-react-ap.md:34:77     - Unknown word (otherwise)  -- a prop as a portal, otherwise it is part of `ReactNode
docs/advanced/types-react-ap.md:35:51     - Unknown word (produced)   -- complete interface for the produced constructor function
docs/advanced/types-react-ap.md:36:105    - Unknown word (opening)     -- that can go into the opening tag of a JSX expression
docs/advanced/types-react-ap.md:36:14     - Unknown word (Constructor) -- - `JSXElementConstructor` - anything that TypeScript
docs/advanced/types-react-ap.md:36:54     - Unknown word (considers)   -- anything that TypeScript considers to be a valid thing
docs/advanced/types-react-ap.md:47:95     - Unknown word (covered)     -- elements which are not covered.
docs/advanced/types-react-ap.md:61:4      - Unknown word (Dialog)      -- - `DialogHTMLAttributes`
docs/advanced/types-react-ap.md:7:49      - Unknown word (meant)      -- both "public" types meant for your use as well
docs/advanced/types-react-ap.md:9:13      - Unknown word (Crane's)    -- Check [SaltyCrane's React TypeScript Cheatsheet
docs/advanced/types-react-ap.md:9:8       - Unknown word (Salty)      -- Check [SaltyCrane's React TypeScript
docs/advanced/utility-types.md:11:101    - Unknown word (scratch)    -- inbuilt utility types from scratch. See [Dr. Rauschmayer
docs/advanced/utility-types.md:11:119    - Unknown word (Rauschmayer's) -- from scratch. See [Dr. Rauschmayer's guide](https://2ality
docs/advanced/utility-types.md:11:208    - Unknown word (introduction)  -- html) for a concise introduction.
docs/advanced/utility-types.md:11:60     - Unknown word (construct)  -- knowledge of how to construct the inbuilt utility
docs/advanced/utility-types.md:13:12     - Unknown word (comfort)       -- A level of comfort with **generic types
docs/advanced/utility-types.md:7:16      - Unknown word (knowledge)  -- We will assume knowledge of utility types covered
docs/advanced/utility-types.md:7:164     - Unknown word (Look)       -- cheatsheets/utilities). Look up libraries included
docs/advanced/utility-types.md:7:182     - Unknown word (included)   -- . Look up libraries included there as well for your
docs/advanced/utility-types.md:7:58      - Unknown word (sister)     -- types covered in the sister project [`typescript
docs/advanced/utility-types.md:9:102     - Unknown word (exploring)  -- we strongly recommend exploring these utilities** so
docs/advanced/utility-types.md:9:148     - Unknown word (reinvent)   -- * so that you don't reinvent the wheel and/or lose
docs/advanced/utility-types.md:9:161     - Unknown word (wheel)      -- you don't reinvent the wheel and/or lose sanity trying
docs/advanced/utility-types.md:9:174     - Unknown word (lose)       -- reinvent the wheel and/or lose sanity trying to do
docs/advanced/utility-types.md:9:18      - Unknown word (maintain)   -- If you intend to maintain a large TS codebase
docs/advanced/utility-types.md:9:203     - Unknown word (Studying)   -- sanity trying to do so. Studying their code can also
docs/advanced/utility-types.md:9:232     - Unknown word (teach)      -- their code can also teach you a lot of advanced
docs/advanced/utility-types.md:9:49      - Unknown word (nontrivial) -- large TS codebase/a nontrivial React+TS library, *
docs/advanced/utility-types.md:9:8       - Unknown word (intend)     -- If you intend to maintain a large
docs/advanced/utility-types.md:9:83      - Unknown word (strongly)   -- React+TS library, **we strongly recommend exploring
docs/basic/editor-integration.md:11:5      - Unknown word (nvim)       -- - nvim-typescript?
docs/basic/editor-integration.md:13:5      - Unknown word (peitalin)   -- - peitalin/vim-jsx-typescript
docs/basic/editor-integration.md:17:37     - Unknown word (logo)       -- use this repo's TSX logo if you wish:
docs/basic/editor-integration.md:21:38     - Unknown word (logos)      -- wish to use alternative logos - [jsx-tsx-logos](https
docs/basic/editor-integration.md:3:15      - Unknown word (Tooling)    -- title: Editor Tooling and Integration
docs/basic/examples.md:8:18      - Unknown word (hour)       -- - [Ben Awad's 14 hour Fullstack React/GraphQL
docs/basic/examples.md:8:58      - Unknown word (Tutorial)   -- React/GraphQL/TypeScript Tutorial](https://www.youtube
docs/basic/examples.md:8:8       - Unknown word (Awad's)     -- - [Ben Awad's 14 hour Fullstack React
docs/basic/examples.md:9:12      - Unknown word (Realworld)  -- - [Cypress Realworld App](https://github
docs/basic/getting-started/basic-type-examples.md:103:1     - Unknown word (Before)           -- Before the [React 18 type updates
docs/basic/getting-started/basic-type-examples.md:10:37     - Unknown word (likely)        -- TypeScript types you will likely use in a React+TypeScript
docs/basic/getting-started/basic-type-examples.md:122:10    - Unknown word (pomle)            -- [Thanks @pomle for raising this.](https
docs/basic/getting-started/basic-type-examples.md:122:20    - Unknown word (raising)          -- [Thanks @pomle for raising this.](https://github
docs/basic/getting-started/basic-type-examples.md:129:203   - Unknown word (Regardless)       -- React.createElement`. Regardless of what a component
docs/basic/getting-started/basic-type-examples.md:129:234   - Unknown word (ends)             -- of what a component ends up rendering, `React
docs/basic/getting-started/basic-type-examples.md:129:282   - Unknown word (returns)          -- createElement` always returns an object, which is
docs/basic/getting-started/basic-type-examples.md:129:96    - Unknown word (explanation)      -- ): A more technical explanation is that a valid React
docs/basic/getting-started/basic-type-examples.md:136:44    - Unknown word (overlap)          -- Where ReactNode does not overlap with React.JSX.Element
docs/basic/getting-started/basic-type-examples.md:142:68    - Unknown word (naturally)        -- Props and State, so naturally the question arises
docs/basic/getting-started/basic-type-examples.md:142:91    - Unknown word (arises)           -- naturally the question arises - which do you use?
docs/basic/getting-started/basic-type-examples.md:146:15    - Unknown word (until)            -- Use Interface until You Need Type - [orta
docs/basic/getting-started/basic-type-examples.md:146:25    - Unknown word (Need)             -- Interface until You Need Type - [orta](https
docs/basic/getting-started/basic-type-examples.md:146:38    - Unknown word (orta)             -- until You Need Type - [orta](https://twitter.com
docs/basic/getting-started/basic-type-examples.md:150:26    - Unknown word (thumb)            -- s a helpful rule of thumb:
docs/basic/getting-started/basic-type-examples.md:152:126   - Unknown word (allows)           -- definitions, as this allows a consumer to extend
docs/basic/getting-started/basic-type-examples.md:152:176   - Unknown word (merging)          -- them via _declaration merging_ if some definitions
docs/basic/getting-started/basic-type-examples.md:152:59    - Unknown word (authoring)        -- API's definition when authoring a library or 3rd party
docs/basic/getting-started/basic-type-examples.md:152:92    - Unknown word (ambient)          -- library or 3rd party ambient type definitions, as
docs/basic/getting-started/basic-type-examples.md:154:106   - Unknown word (constrained)      -- and because it is more constrained.
docs/basic/getting-started/basic-type-examples.md:154:71    - Unknown word (consistency)      -- Props and State, for consistency and because it is more
docs/basic/getting-started/basic-type-examples.md:156:29    - Unknown word (reasoning)        -- read more about the reasoning behind this rule of
docs/basic/getting-started/basic-type-examples.md:156:39    - Unknown word (behind)           -- about the reasoning behind this rule of thumb in
docs/basic/getting-started/basic-type-examples.md:158:43    - Unknown word (guidance)         -- Handbook now also includes guidance on [Differences Between
docs/basic/getting-started/basic-type-examples.md:160:41    - Unknown word (reasons)          -- there are performance reasons to prefer interfaces
docs/basic/getting-started/basic-type-examples.md:162:105   - Unknown word (declaring)        -- Interfaces are better for declaring dictionary shapes and
docs/basic/getting-started/basic-type-examples.md:162:115   - Unknown word (dictionary)       -- better for declaring dictionary shapes and then `implementing
docs/basic/getting-started/basic-type-examples.md:162:126   - Unknown word (shapes)           -- declaring dictionary shapes and then `implementing
docs/basic/getting-started/basic-type-examples.md:166:37    - Unknown word (hung)             -- topic, don't get too hung up on it. Here's a handy
docs/basic/getting-started/basic-type-examples.md:166:8     - Unknown word (nuanced)          -- It's a nuanced topic, don't get too
docs/basic/getting-started/basic-type-examples.md:172:16    - Unknown word (tuples)           -- | Can describe tuples
docs/basic/getting-started/basic-type-examples.md:176:7     - Unknown word (intersect)        -- | Can intersect another one of its kind
docs/basic/getting-started/basic-type-examples.md:178:25    - Unknown word (mapped)           -- Can be used to create mapped types
docs/basic/getting-started/basic-type-examples.md:180:3     - Unknown word (Expands)          -- | Expands in error messages and
docs/basic/getting-started/basic-type-examples.md:181:10    - Unknown word (augmented)        -- | Can be augmented
docs/basic/getting-started/basic-type-examples.md:182:10    - Unknown word (recursive)        -- | Can be recursive
docs/basic/getting-started/basic-type-examples.md:19:14     - Unknown word (literals)      -- /** string literals to specify exact string
docs/basic/getting-started/basic-type-examples.md:20:12     - Unknown word (waiting)       -- status: "waiting" | "success";
docs/basic/getting-started/basic-type-examples.md:33:63     - Unknown word (except)        -- properties - (NOT COMMON, except for things like `React
docs/basic/getting-started/basic-type-examples.md:40:54     - Unknown word (VERY)          -- or return anything (VERY COMMON) */
docs/basic/getting-started/basic-type-examples.md:52:51     - Unknown word (returned)      -- state setter function returned by `useState` to a child
docs/basic/getting-started/basic-type-examples.md:53:19     - Unknown word (Dispatch)      -- setState: React.Dispatch<React.SetStateAction
docs/basic/getting-started/basic-type-examples.md:59:146    - Unknown word (represents)       -- type", which means it represents anything that is not
docs/basic/getting-started/basic-type-examples.md:59:220    - Unknown word (symbol)           -- string`, `boolean`, `symbol`, `null` or `undefined
docs/basic/getting-started/basic-type-examples.md:59:32     - Unknown word (misunderstanding) -- is a common source of misunderstanding in TypeScript. It does
docs/basic/getting-started/basic-type-examples.md:65:120    - Unknown word (Using)            -- as you might think. [Using these types is a common
docs/basic/getting-started/basic-type-examples.md:65:43     - Unknown word (represent)        -- }` and `Object` all represent "any non-nullish value
docs/basic/getting-started/basic-type-examples.md:6:76      - Unknown word (familiarizing) -- for React developers familiarizing with TypeScript.
docs/basic/getting-started/basic-type-examples.md:6:9       - Unknown word (intended)   -- This is intended as a basic orientation
docs/basic/getting-started/basic-type-examples.md:75:15     - Unknown word (alert)            -- value = () => alert("foo");
docs/basic/getting-started/basic-type-examples.md:93:29     - Unknown word (Handler)          -- onChange?: React.FormEventHandler<HTMLInputElement>;
docs/basic/getting-started/basic-type-examples.md:95:66     - Unknown word (impersonate)      -- psWithoutRef<"button">; // to impersonate all the props of a button
docs/basic/getting-started/class-components.md:113:178   - Unknown word (Probably)     -- rivedstatefromprops) and [You Probably Don't Need Derived State
docs/basic/getting-started/class-components.md:117:128   - Unknown word (conforms)     -- getDerivedStateFromProps` conforms to it.
docs/basic/getting-started/class-components.md:117:38    - Unknown word (derived)      -- explicitly typed your derived state and want to make
docs/basic/getting-started/class-components.md:130:49    - Unknown word (determine)    -- function's return value to determine your state.
docs/basic/getting-started/class-components.md:33:75     - Unknown word (reuse)      -- types/interfaces for reuse.
docs/basic/getting-started/class-components.md:36:45     - Unknown word (twice)      -- annotate <code>state</code> twice?</b></summary>
docs/basic/getting-started/class-components.md:38:10     - Unknown word (strictly)   -- It isn't strictly necessary to annotate
docs/basic/getting-started/class-components.md:38:110    - Unknown word (accessing)  -- type inference when accessing `this.state` and also
docs/basic/getting-started/class-components.md:38:142    - Unknown word (initializing) -- this.state` and also initializing the state.
docs/basic/getting-started/class-components.md:38:19     - Unknown word (necessary)  -- It isn't strictly necessary to annotate the `state
docs/basic/getting-started/class-components.md:40:118    - Unknown word (correctly)    -- setState()` to work correctly, because that method
docs/basic/getting-started/class-components.md:40:222    - Unknown word (overrides)    -- inside the component overrides the base implementation
docs/basic/getting-started/class-components.md:40:290    - Unknown word (tell)         -- to make sure that you tell the compiler that you
docs/basic/getting-started/class-components.md:40:333    - Unknown word (doing)        -- you're not actually doing anything different.
docs/basic/getting-started/class-components.md:60:57     - Unknown word (marks)        -- Component<P,S>` already marks them as immutable.
docs/basic/getting-started/class-components.md:6:1       - Unknown word (Within)     -- Within TypeScript, `React.Component
docs/basic/getting-started/class-components.md:71:32     - Unknown word (increment)    -- onClick={() => this.increment(1)}>
docs/basic/getting-started/class-components.md:87:67     - Unknown word (later)        -- class properties for later use, just declare it
docs/basic/getting-started/concurrent.md:2:5       - Unknown word (concurrent) -- id: concurrent
docs/basic/getting-started/concurrent.md:3:31      - Unknown word (Suspense)   -- Concurrent React/React Suspense
docs/basic/getting-started/concurrent.md:3:8       - Unknown word (Concurrent) -- title: Concurrent React/React Suspense
docs/basic/getting-started/concurrent.md:6:107     - Unknown word (Slicing)    -- React Suspense and Time Slicing.
docs/basic/getting-started/context.md:110:129   - Unknown word (wrapping)   -- when a provider is not wrapping the components properly
docs/basic/getting-started/context.md:110:153   - Unknown word (properly)   -- wrapping the components properly. Now it's possible to
docs/basic/getting-started/context.md:110:49    - Unknown word (benefit)    -- in this will has the benefit of printing a clear
docs/basic/getting-started/context.md:110:60    - Unknown word (printing)   -- will has the benefit of printing a clear error message
docs/basic/getting-started/context.md:122:10    - Unknown word (assertion)  -- ### Type assertion as an alternative
docs/basic/getting-started/context.md:136:63    - Unknown word (cast)       -- as default value and cast it to the expected context
docs/basic/getting-started/context.md:13:6      - Unknown word (Theme)      -- type ThemeContextType = "light
docs/basic/getting-started/context.md:150:84    - Unknown word (asserting)  -- and throwing over type asserting.
docs/basic/getting-started/context.md:18:1      - Unknown word (Wrap)       -- Wrap the components that
docs/basic/getting-started/context.md:48:23     - Unknown word (meaningful) -- If you don't have any meaningful default value, specify
docs/basic/getting-started/context.md:74:200    - Unknown word (chaining)   -- You can use optional chaining to access `username
docs/basic/getting-started/context.md:74:56     - Unknown word (notice)     -- can be `null`, you'll notice that you'll get a `
docs/basic/getting-started/context.md:74:99     - Unknown word (possibly)   -- a `'currentUser' is possibly 'null'` TypeScript error
docs/basic/getting-started/context.md:86:199    - Unknown word (thrown)     -- context, where an error is thrown if the context is not
docs/basic/getting-started/context.md:86:22     - Unknown word (preferable) -- However, it would be preferable to not have to check
docs/basic/getting-started/context.md:86:228    - Unknown word (provided)   -- if the context is not provided:
docs/basic/getting-started/default-props.md:100:13    - Unknown word (Apparent)        -- export type ApparentGreetProps = React.JSX
docs/basic/getting-started/default-props.md:106:35    - Unknown word (hovering)        -- work properly, although hovering over`ApparentGreetProps
docs/basic/getting-started/default-props.md:106:77    - Unknown word (little)          -- ApparentGreetProps`may be a little intimidating. You can
docs/basic/getting-started/default-props.md:10:4      - Unknown word (Original)    -- - [Original tweet](https://twitter
docs/basic/getting-started/default-props.md:110:4     - Unknown word (Consuming)       -- ## Consuming Props of a Component
docs/basic/getting-started/default-props.md:11:25     - Unknown word (found)       -- More info can also be found in [this article](https
docs/basic/getting-started/default-props.md:13:5      - Unknown word (consensus)   -- The consensus is to use object default
docs/basic/getting-started/default-props.md:140:23    - Unknown word (applies)         -- Define a utility that applies `React.JSX.LibraryManagedAttr
docs/basic/getting-started/default-props.md:159:25    - Unknown word (Knowledge)       -- Misc Discussions and Knowledge
docs/basic/getting-started/default-props.md:159:9     - Unknown word (Discussions)     -- ## Misc Discussions and Knowledge
docs/basic/getting-started/default-props.md:162:44    - Unknown word (break)           -- code>React.FC</code> break <code>defaultProps<
docs/basic/getting-started/default-props.md:175:32    - Unknown word (earlier)         -- b>TypeScript 2.9 and earlier</b></summary>
docs/basic/getting-started/default-props.md:177:107   - Unknown word (seen)            -- best advice we've yet seen:
docs/basic/getting-started/default-props.md:191:118   - Unknown word (fulfill)         -- current interface will fulfill a partial version on
docs/basic/getting-started/default-props.md:191:128   - Unknown word (partial)         -- interface will fulfill a partial version on the wrapped
docs/basic/getting-started/default-props.md:191:151   - Unknown word (wrapped)         -- partial version on the wrapped interface. In that way
docs/basic/getting-started/default-props.md:191:5     - Unknown word (former)          -- Our former recommendation used
docs/basic/getting-started/default-props.md:206:23    - Unknown word (approach)        -- The problem with this approach is it causes complex
docs/basic/getting-started/default-props.md:206:38    - Unknown word (causes)          -- this approach is it causes complex issues with
docs/basic/getting-started/default-props.md:206:45    - Unknown word (complex)         -- approach is it causes complex issues with the type
docs/basic/getting-started/default-props.md:42:16     - Unknown word (improved)    -- Type inference improved greatly for `defaultProps
docs/basic/getting-started/default-props.md:42:190    - Unknown word (problematic) -- edge cases are still problematic](https://github.com
docs/basic/getting-started/default-props.md:42:25     - Unknown word (greatly)     -- Type inference improved greatly for `defaultProps` in
docs/basic/getting-started/default-props.md:47:22     - Unknown word (shortcut)    -- / using typeof as a shortcut; note that it hoists
docs/basic/getting-started/default-props.md:47:45     - Unknown word (hoists)      -- shortcut; note that it hoists!
docs/basic/getting-started/default-props.md:64:215    - Unknown word (reverse)     -- recommendation is to "reverse" the props definition
docs/basic/getting-started/default-props.md:64:40     - Unknown word (couple)      -- components**, there are [a couple ways to do it](https
docs/basic/getting-started/default-props.md:83:61     - Unknown word (nuance)      -- braryManagedAttributes</code> nuance for library authors
docs/basic/getting-started/default-props.md:85:11     - Unknown word (implementations) -- The above implementations work fine for App creators
docs/basic/getting-started/default-props.md:85:131    - Unknown word (consume)         -- so that others can consume it. The problem here
docs/basic/getting-started/default-props.md:85:45     - Unknown word (creators)        -- ementations work fine for App creators, but sometimes you want
docs/basic/getting-started/default-props.md:87:124    - Unknown word (facing)          -- external_, consumer facing contract](https://github
docs/basic/getting-started/default-props.md:87:66     - Unknown word (contract)        -- GreetProps` is the _internal_ contract for your component,
docs/basic/getting-started/default-props.md:8:100     - Unknown word (eventually) -- , defaultProps will eventually be deprecated. You can
docs/basic/getting-started/default-props.md:8:114     - Unknown word (deprecated) -- faultProps will eventually be deprecated. You can check the discussion
docs/basic/getting-started/default-props.md:8:14      - Unknown word (tweet)      -- As per [this tweet](https://twitter.com
docs/basic/getting-started/default-props.md:8:144     - Unknown word (discussions) -- deprecated. You can check the discussions here:
docs/basic/getting-started/error-boundaries.md:2:11      - Unknown word (boundaries) -- id: error_boundaries
docs/basic/getting-started/error-boundaries.md:36:22     - Unknown word (Catch)       -- public componentDidCatch(error: Error, errorInfo
docs/basic/getting-started/error-boundaries.md:37:20     - Unknown word (Uncaught)    -- console.error("Uncaught error:", error, errorInfo
docs/basic/getting-started/error-boundaries.md:3:14      - Unknown word (Boundaries) -- title: Error Boundaries
docs/basic/getting-started/error-boundaries.md:42:18     - Unknown word (Sorry)       -- return <h1>Sorry.. there was an error
docs/basic/getting-started/error-boundaries.md:8:122     - Unknown word (scenario)    -- ready to use for this scenario with TS support built
docs/basic/getting-started/error-boundaries.md:8:80      - Unknown word (lightweight) -- error-boundary) - is a lightweight package ready to use
docs/basic/getting-started/error-boundaries.md:9:70      - Unknown word (popular)     -- components that are not that popular anymore.
docs/basic/getting-started/error-boundaries.md:9:78      - Unknown word (anymore)     -- are not that popular anymore.
docs/basic/getting-started/forms-and-events.md:100:4     - Unknown word (course)        -- Of course, if you're making any
docs/basic/getting-started/forms-and-events.md:107:22    - Unknown word (Changing)      -- ChangeEvent | Changing the value of `<input
docs/basic/getting-started/forms-and-events.md:109:141   - Unknown word (appear)        -- a popup window may appear with additional characters
docs/basic/getting-started/forms-and-events.md:109:164   - Unknown word (characters)    -- appear with additional characters if you e.g. want to
docs/basic/getting-started/forms-and-events.md:109:200   - Unknown word (Japanese)      -- you e.g. want to type Japanese on a US Keyboard)
docs/basic/getting-started/forms-and-events.md:109:217   - Unknown word (Keyboard)      -- type Japanese on a US Keyboard)
docs/basic/getting-started/forms-and-events.md:109:34    - Unknown word (occur)         -- ompositionEvent | Events that occur due to the user indirectly
docs/basic/getting-started/forms-and-events.md:109:56    - Unknown word (indirectly)    -- occur due to the user indirectly entering text (e.g.
docs/basic/getting-started/forms-and-events.md:109:67    - Unknown word (entering)      -- the user indirectly entering text (e.g. depending
docs/basic/getting-started/forms-and-events.md:109:87    - Unknown word (depending)     -- entering text (e.g. depending on Browser and PC setup
docs/basic/getting-started/forms-and-events.md:110:3     - Unknown word (Drag)          -- | DragEvent | Drag and
docs/basic/getting-started/forms-and-events.md:110:36    - Unknown word (interaction)   -- | Drag and drop interaction with a pointer device
docs/basic/getting-started/forms-and-events.md:111:3     - Unknown word (Focus)         -- | FocusEvent | Event that
docs/basic/getting-started/forms-and-events.md:111:33    - Unknown word (occurs)        -- FocusEvent | Event that occurs when elements gets or
docs/basic/getting-started/forms-and-events.md:111:62    - Unknown word (loses)         -- when elements gets or loses focus.
docs/basic/getting-started/forms-and-events.md:112:114   - Unknown word (changed)       -- form element value is changed or the form is submitted
docs/basic/getting-started/forms-and-events.md:112:137   - Unknown word (submitted)     -- changed or the form is submitted.
docs/basic/getting-started/forms-and-events.md:112:40    - Unknown word (whenever)      -- | Event that occurs whenever a form or form element
docs/basic/getting-started/forms-and-events.md:113:22    - Unknown word (Fired)         -- InvalidEvent | Fired when validity restrictions
docs/basic/getting-started/forms-and-events.md:113:33    - Unknown word (validity)      -- InvalidEvent | Fired when validity restrictions of an input
docs/basic/getting-started/forms-and-events.md:113:42    - Unknown word (restrictions)  -- Fired when validity restrictions of an input fails (e
docs/basic/getting-started/forms-and-events.md:114:48    - Unknown word (keyboard)      -- interaction with the keyboard. Each event describes
docs/basic/getting-started/forms-and-events.md:114:69    - Unknown word (describes)     -- keyboard. Each event describes a single key interaction
docs/basic/getting-started/forms-and-events.md:115:56    - Unknown word (interacting)   -- occur due to the user interacting with a pointing device
docs/basic/getting-started/forms-and-events.md:115:75    - Unknown word (pointing)      -- user interacting with a pointing device (e.g. mouse)
docs/basic/getting-started/forms-and-events.md:116:128   - Unknown word (touchscreen)   -- mouse, pen/stylus, a touchscreen and which also supports
docs/basic/getting-started/forms-and-events.md:116:164   - Unknown word (multi)         -- which also supports multi-touch. Unless you develop
docs/basic/getting-started/forms-and-events.md:116:177   - Unknown word (Unless)        -- supports multi-touch. Unless you develop for older
docs/basic/getting-started/forms-and-events.md:116:188   - Unknown word (develop)       -- multi-touch. Unless you develop for older browsers
docs/basic/getting-started/forms-and-events.md:116:200   - Unknown word (older)         -- Unless you develop for older browsers (IE10 or Safari
docs/basic/getting-started/forms-and-events.md:116:224   - Unknown word (Safari)        -- older browsers (IE10 or Safari 12), pointer events
docs/basic/getting-started/forms-and-events.md:116:268   - Unknown word (Extends)       -- events are recommended. Extends UIEvent. |
docs/basic/getting-started/forms-and-events.md:116:71    - Unknown word (variety)       -- user interaction with a variety pointing of devices
docs/basic/getting-started/forms-and-events.md:118:42    - Unknown word (fully)         -- CSS Transition. Not fully browser supported. Extends
docs/basic/getting-started/forms-and-events.md:120:109   - Unknown word (confused)      -- event should not be confused with the `scroll` event
docs/basic/getting-started/forms-and-events.md:120:128   - Unknown word (scroll)        -- be confused with the `scroll` event)
docs/basic/getting-started/forms-and-events.md:120:22    - Unknown word (Scrolling)     -- WheelEvent | Scrolling on a mouse wheel or
docs/basic/getting-started/forms-and-events.md:120:3     - Unknown word (Wheel)         -- | WheelEvent | Scrolling
docs/basic/getting-started/forms-and-events.md:121:79    - Unknown word (unsure)        -- Should be used when unsure about event type
docs/basic/getting-started/forms-and-events.md:126:163   - Unknown word (behave)        -- browser support and may behave differently in different
docs/basic/getting-started/forms-and-events.md:126:17    - Unknown word (noticed)       -- You've probably noticed that there is no `InputEvent
docs/basic/getting-started/forms-and-events.md:18:123    - Unknown word (come)       -- the @type definitions come with a wealth of typing
docs/basic/getting-started/forms-and-events.md:18:135    - Unknown word (wealth)     -- definitions come with a wealth of typing. Type what
docs/basic/getting-started/forms-and-events.md:18:171    - Unknown word (looking)    -- typing. Type what you are looking for and usually the
docs/basic/getting-started/forms-and-events.md:18:38     - Unknown word (handler)    -- to define your event handler separately, IDE tooling
docs/basic/getting-started/forms-and-events.md:18:46     - Unknown word (separately) -- define your event handler separately, IDE tooling really
docs/basic/getting-started/forms-and-events.md:29:22     - Unknown word (hand)       -- // typing on RIGHT hand side of =
docs/basic/getting-started/forms-and-events.md:45:143    - Unknown word (itself)        -- to the event handler itself (_contributed by @TomasHubelb
docs/basic/getting-started/forms-and-events.md:45:152    - Unknown word (contributed)   -- event handler itself (_contributed by @TomasHubelbauer
docs/basic/getting-started/forms-and-events.md:45:168    - Unknown word (Tomas)         -- itself (_contributed by @TomasHubelbauer_):
docs/basic/getting-started/forms-and-events.md:45:173    - Unknown word (Hubelbauer)    -- contributed by @TomasHubelbauer_):
docs/basic/getting-started/forms-and-events.md:45:96     - Unknown word (alternatively) -- and `void`, you may alternatively apply types to the event
docs/basic/getting-started/forms-and-events.md:58:121    - Unknown word (enforces)      -- and the second method enforces a type of the delegate
docs/basic/getting-started/forms-and-events.md:58:216    - Unknown word (simply)        -- ChangeEventHandler<>` is simply a "blessed" typing by
docs/basic/getting-started/forms-and-events.md:58:318    - Unknown word (artisanally)   -- inferred method as more... _artisanally hand-rolled_. Either
docs/basic/getting-started/forms-and-events.md:58:335    - Unknown word (rolled)        -- . _artisanally hand-rolled_. Either way it's a
docs/basic/getting-started/forms-and-events.md:62:25     - Unknown word (Uncontrolled)  -- Typing onSubmit, with Uncontrolled components in a Form
docs/basic/getting-started/forms-and-events.md:64:14     - Unknown word (quite)         -- If you don't quite care about the type
docs/basic/getting-started/forms-and-events.md:64:78     - Unknown word (Synthetic)     -- can just use `React.SyntheticEvent`. If your target
docs/basic/getting-started/forms-and-events.md:6:126     - Unknown word (contextual) -- [type inference and contextual typing](https://www
docs/basic/getting-started/forms-and-events.md:6:40      - Unknown word (usually)    -- not an issue (and it usually isn't!), inlining handlers
docs/basic/getting-started/forms-and-events.md:6:78      - Unknown word (easiest)    -- inlining handlers is easiest as you can just use
docs/basic/getting-started/forms-and-events.md:75:42     - Unknown word (typechecks)    -- target.email.value; // typechecks!
docs/basic/getting-started/forward-create-ref.md:113:23    - Unknown word (Inner)      -- function ClickableListInner<T>(
docs/basic/getting-started/forward-create-ref.md:146:1     - Unknown word (Credits)    -- Credits: https://stackoverflow
docs/basic/getting-started/forward-create-ref.md:40:85     - Unknown word (mutable)    -- forwardRef</code> is mutable so you can assign to
docs/basic/getting-started/forward-create-ref.md:42:177    - Unknown word (nobody)     -- if you want to ensure nobody reassigns it:
docs/basic/getting-started/forward-create-ref.md:42:184    - Unknown word (reassigns)  -- want to ensure nobody reassigns it:
docs/basic/getting-started/forward-create-ref.md:66:12     - Unknown word (grabbing)   -- If you are grabbing the props of a component
docs/basic/getting-started/forward-create-ref.md:66:51     - Unknown word (forwards)   -- of a component that forwards refs, use [`ComponentPropsWit
docs/basic/getting-started/forward-create-ref.md:72:16     - Unknown word (Wrapper)    -- ### Option 1 - Wrapper component
docs/basic/getting-started/forward-create-ref.md:78:20     - Unknown word (HTMLU)      -- mRef?: React.Ref<HTMLUListElement> | null;
docs/basic/getting-started/function-components.md:105:67    - Unknown word (though)        -- props as `readonly`, though that's a moot point
docs/basic/getting-started/function-components.md:105:74    - Unknown word (that's)        -- as `readonly`, though that's a moot point if the
docs/basic/getting-started/function-components.md:105:83    - Unknown word (moot)          -- readonly`, though that's a moot point if the props object
docs/basic/getting-started/function-components.md:107:106   - Unknown word (nature)        -- prefer the more explicit nature of `React.FunctionComponent
docs/basic/getting-started/function-components.md:12:26     - Unknown word (exporting)  -- use `interface` if exporting so that consumers can
docs/basic/getting-started/function-components.md:14:4      - Unknown word (Easiest)    -- // Easiest way to declare a Function
docs/basic/getting-started/function-components.md:17:62     - Unknown word (raised)     -- type so an error is raised if you accidentally
docs/basic/getting-started/function-components.md:17:76     - Unknown word (accidentally) -- error is raised if you accidentally return some other type
docs/basic/getting-started/function-components.md:20:46     - Unknown word (eliminates)   -- the type declaration; eliminates naming the prop types
docs/basic/getting-started/function-components.md:20:90     - Unknown word (repetitive)   -- prop types, but looks repetitive
docs/basic/getting-started/function-components.md:23:4      - Unknown word (Alternatively) -- // Alternatively, you can use `React
docs/basic/getting-started/function-components.md:24:53     - Unknown word (mostly)        -- TypeScript 5.1. it's mostly a stylistic choice,
docs/basic/getting-started/function-components.md:24:62     - Unknown word (stylistic)     -- TypeScript 5.1. it's mostly a stylistic choice, otherwise discouraged
docs/basic/getting-started/function-components.md:24:72     - Unknown word (choice)        -- s mostly a stylistic choice, otherwise discouraged
docs/basic/getting-started/function-components.md:24:9      - Unknown word (latest)        -- // With latest React types and TypeScript
docs/basic/getting-started/function-components.md:24:90     - Unknown word (discouraged)   -- stylistic choice, otherwise discouraged.
docs/basic/getting-started/function-components.md:32:143    - Unknown word (automate)      -- typescript-toolkit) to automate the type destructure
docs/basic/getting-started/function-components.md:32:186    - Unknown word (incl)          -- destructure declaration (incl a [keyboard shortcut
docs/basic/getting-started/function-components.md:32:23     - Unknown word (Paul)          -- Tip: You might use [Paul Shen's VS Code Extension
docs/basic/getting-started/function-components.md:32:28     - Unknown word (Shen's)        -- You might use [Paul Shen's VS Code Extension](https
docs/basic/getting-started/function-components.md:36:114    - Unknown word (Void)          -- nComponent</code>/<code>React.VoidFunctionComponent</code
docs/basic/getting-started/function-components.md:46:162    - Unknown word (lower)         -- React 17 or TypeScript lower than 5.1, it is even
docs/basic/getting-started/function-components.md:46:32     - Unknown word (today)         -- the general consensus today is that `React.FunctionCompon
docs/basic/getting-started/function-components.md:46:382    - Unknown word (jscodeshift)   -- codebase, you can use [this jscodeshift codemod](https://github
docs/basic/getting-started/function-components.md:46:394    - Unknown word (codemod)       -- use [this jscodeshift codemod](https://github.com
docs/basic/getting-started/function-components.md:46:80     - Unknown word (shorthand)     -- FunctionComponent` (or the shorthand `React.FC`) is not needed
docs/basic/getting-started/function-components.md:50:101    - Unknown word (implicit)      -- function version is implicit (or else needs additional
docs/basic/getting-started/function-components.md:50:64     - Unknown word (while)         -- about the return type, while the normal function
docs/basic/getting-started/function-components.md:52:6      - Unknown word (provides)      -- - It provides typechecking and autocomplete
docs/basic/getting-started/function-components.md:56:197    - Unknown word (heavily)       -- see below), which was heavily debated and is one of
docs/basic/getting-started/function-components.md:56:205    - Unknown word (debated)       -- , which was heavily debated and is one of the reasons
docs/basic/getting-started/function-components.md:6:1       - Unknown word (These)      -- These can be written as normal
docs/basic/getting-started/function-components.md:6:62      - Unknown word (argument)   -- that take a `props` argument and return a JSX element
docs/basic/getting-started/function-components.md:70:178    - Unknown word (interim)       -- pull/59882), so this interim solution is no longer
docs/basic/getting-started/function-components.md:72:12     - Unknown word (regular)       -- Please use regular function components
docs/basic/getting-started/function-components.md:9:4       - Unknown word (Declaring)  -- // Declaring type of props - see
docs/basic/getting-started/hooks.md:107:10    - Unknown word (Counter)     -- function Counter() {
docs/basic/getting-started/hooks.md:108:17    - Unknown word (dispatch)    -- const [state, dispatch] = useReducer(reducer
docs/basic/getting-started/hooks.md:129:112   - Unknown word (convenient)  -- function, It provides a convenient helper of the format
docs/basic/getting-started/hooks.md:131:30    - Unknown word (becomes)     -- above reducer example becomes:
docs/basic/getting-started/hooks.md:141:19    - Unknown word (Layout)      -- ## useEffect / useLayoutEffect
docs/basic/getting-started/hooks.md:143:110   - Unknown word (cleanup)     -- and return an optional cleanup function which means
docs/basic/getting-started/hooks.md:143:366   - Unknown word (subtle)      -- at you. This can be subtle when using arrow functions
docs/basic/getting-started/hooks.md:143:56    - Unknown word (performing)  -- useLayoutEffect` are used for performing <b>side effects</b>
docs/basic/getting-started/hooks.md:143:75    - Unknown word (effects)     -- for performing <b>side effects</b> and return an optional
docs/basic/getting-started/hooks.md:146:10    - Unknown word (Delayed)     -- function DelayedEffect(props: { timerMs
docs/basic/getting-started/hooks.md:151:10    - Unknown word (Timeout)     -- setTimeout(() => {
docs/basic/getting-started/hooks.md:157:55    - Unknown word (curly)       -- body isn't wrapped in curly braces
docs/basic/getting-started/hooks.md:157:61    - Unknown word (braces)      -- isn't wrapped in curly braces
docs/basic/getting-started/hooks.md:183:404   - Unknown word (covers)      -- type argument fully covers the initial value or
docs/basic/getting-started/hooks.md:183:437   - Unknown word (Choose)      -- initial value or not. Choose one that suits your
docs/basic/getting-started/hooks.md:183:453   - Unknown word (suits)       -- not. Choose one that suits your use case.
docs/basic/getting-started/hooks.md:187:263   - Unknown word (expects)     -- by React. TypeScript expects you to give this ref
docs/basic/getting-started/hooks.md:187:278   - Unknown word (give)        -- TypeScript expects you to give this ref to an element
docs/basic/getting-started/hooks.md:18:195    - Unknown word (relied)     -- complex type that you've relied on inference for.
docs/basic/getting-started/hooks.md:18:21     - Unknown word (Inferred)   -- See also the [Using Inferred Types](https://react
docs/basic/getting-started/hooks.md:193:18    - Unknown word (wise)        -- // - Technical-wise, this returns RefObject
docs/basic/getting-started/hooks.md:199:53    - Unknown word (assigned)    -- Error("divRef is not assigned");
docs/basic/getting-started/hooks.md:205:6     - Unknown word (Give)        -- // Give the ref to an element
docs/basic/getting-started/hooks.md:20:108    - Unknown word (Explicitly)  -- how to provide types. Explicitly declare the type, and
docs/basic/getting-started/hooks.md:20:25     - Unknown word (initialized) -- However, many hooks are initialized with null-ish default
docs/basic/getting-started/hooks.md:20:79     - Unknown word (wonder)      -- values, and you may wonder how to provide types
docs/basic/getting-started/hooks.md:214:4     - Unknown word (Later)       -- // Later... No need to check
docs/basic/getting-started/hooks.md:218:19    - Unknown word (opting)      -- Note that you are opting out of type safety here
docs/basic/getting-started/hooks.md:221:18    - Unknown word (Choosing)    -- <summary><b>Tip: Choosing which <code>HTMLElement
docs/basic/getting-started/hooks.md:223:13    - Unknown word (specificity) -- Refs demand specificity - it is not enough to
docs/basic/getting-started/hooks.md:223:262   - Unknown word (intentional) -- -L19343) or make an intentional type error and let the
docs/basic/getting-started/hooks.md:223:37    - Unknown word (enough)      -- specificity - it is not enough to just specify any
docs/basic/getting-started/hooks.md:229:15    - Unknown word (Mutable)     -- ### Option 2: Mutable value ref
docs/basic/getting-started/hooks.md:231:181   - Unknown word (belongs)     -- initial value fully belongs to that type:
docs/basic/getting-started/hooks.md:236:9     - Unknown word (interval)    -- const intervalRef = useRef<number
docs/basic/getting-started/hooks.md:238:25    - Unknown word (yourself)    -- You manage the ref yourself (that's why it's called
docs/basic/getting-started/hooks.md:238:51    - Unknown word (called)      -- yourself (that's why it's called MutableRefObject!)
docs/basic/getting-started/hooks.md:240:30    - Unknown word (Interval)    -- intervalRef.current = setInterval(...);
docs/basic/getting-started/hooks.md:251:22    - Unknown word (rajivpunjabi) -- [Related issue by @rajivpunjabi](https://github.com
docs/basic/getting-started/hooks.md:252:17    - Unknown word (Stefan)       -- - [Example from Stefan Baumgartner](https:
docs/basic/getting-started/hooks.md:252:24    - Unknown word (Baumgartner)  -- Example from Stefan Baumgartner](https://fettblog.eu
docs/basic/getting-started/hooks.md:254:17    - Unknown word (Handle)       -- ## useImperativeHandle
docs/basic/getting-started/hooks.md:254:7     - Unknown word (Imperative)   -- ## useImperativeHandle
docs/basic/getting-started/hooks.md:256:16    - Unknown word (Stackoverflow) -- Based on this [Stackoverflow answer](https://stackoverflow
docs/basic/getting-started/hooks.md:325:13    - Unknown word (Alternative)   -- <summary><b>Alternative: Asserting a tuple return
docs/basic/getting-started/hooks.md:325:26    - Unknown word (Asserting)     -- summary><b>Alternative: Asserting a tuple return type
docs/basic/getting-started/hooks.md:327:20    - Unknown word (trouble)       -- If you are [having trouble with const assertions
docs/basic/getting-started/hooks.md:348:10    - Unknown word (tuplify)       -- function tuplify<T extends any[]>(..
docs/basic/getting-started/hooks.md:367:26    - Unknown word (recommends)    -- that the React team recommends that custom hooks that
docs/basic/getting-started/hooks.md:367:99    - Unknown word (proper)        -- two values should use proper objects instead of tuples
docs/basic/getting-started/hooks.md:374:77    - Unknown word (expose)        -- that you should also expose your types for users
docs/basic/getting-started/hooks.md:38:172    - Unknown word (rely)        -- rest of your code may rely on the fact that `user
docs/basic/getting-started/hooks.md:38:19     - Unknown word (lies)        -- This temporarily "lies" to the TypeScript compiler
docs/basic/getting-started/hooks.md:38:232    - Unknown word (lead)        -- `User` and that may lead to runtime errors.
docs/basic/getting-started/hooks.md:38:6      - Unknown word (temporarily) -- This temporarily "lies" to the TypeScript
docs/basic/getting-started/hooks.md:40:7      - Unknown word (Callback)    -- ## useCallback
docs/basic/getting-started/hooks.md:64:9      - Unknown word (Dependency)  -- deps: DependencyList
docs/basic/getting-started/hooks.md:74:36     - Unknown word (yield)       -- following code will yield "`Parameter 'e' implicitly
docs/basic/getting-started/hooks.md:79:4      - Unknown word (Explicit)    -- // Explicit 'any' type.
docs/basic/getting-started/hooks.md:85:141    - Unknown word (reducer)     -- discriminated-unions) for reducer actions. Don't forget
docs/basic/getting-started/hooks.md:90:7      - Unknown word (initial)     -- const initialState = { count: 0 }
docs/basic/getting-started/hooks.md:93:26     - Unknown word (payload)     -- type: "increment"; payload: number }
docs/basic/getting-started/hooks.md:94:14     - Unknown word (decrement)   -- | { type: "decrement"; payload: string }
docs/basic/getting-started/portals.md:10:4      - Unknown word (assuming)   -- // assuming in your html file has
docs/basic/getting-started/portals.md:112:37    - Unknown word (Bubbling)   -- based on the [Event Bubbling Through Portal](https
docs/basic/getting-started/portals.md:19:12     - Unknown word (Will)       -- componentWillUnmount() {
docs/basic/getting-started/portals.md:2:5       - Unknown word (portals)    -- id: portals
docs/basic/getting-started/portals.md:34:1      - Unknown word (Same)       -- Same as above but using hooks
docs/basic/getting-started/portals.md:3:8       - Unknown word (Portals)    -- title: Portals
docs/basic/getting-started/portals.md:87:28     - Unknown word (rgba)       -- background: "rgba(0,0,0,0.1)",
docs/basic/getting-started/portals.md:93:37     - Unknown word (papyawhip)  -- style={{ background: "papyawhip" }}
docs/basic/linting.md:101:173   - Unknown word (robertcoopercode) -- typescript-project-53jb) by @robertcoopercode.
docs/basic/linting.md:10:1      - Unknown word (Follow)     -- Follow the TypeScript + ESLint
docs/basic/linting.md:24:7      - Unknown word (suitable)   -- and a suitable `.eslintrc.js` (using
docs/basic/linting.md:2:5       - Unknown word (linting)    -- id: linting
docs/basic/linting.md:3:8       - Unknown word (Linting)    -- title: Linting
docs/basic/linting.md:45:16     - Unknown word (vars)       -- "no-unused-vars": "off",
docs/basic/linting.md:45:9      - Unknown word (unused)     -- "no-unused-vars": "off",
docs/basic/linting.md:48:52     - Unknown word (Siblings)   -- after-used", ignoreRestSiblings: false },
docs/basic/linting.md:50:68     - Unknown word (Consider)   -- return-type": "warn", // Consider using explicit annotations
docs/basic/linting.md:50:92     - Unknown word (annotations) -- Consider using explicit annotations for object literals
docs/basic/linting.md:56:17     - Unknown word (taken)       -- Most of this is taken from [the `tsdx` PR
docs/basic/linting.md:68:13     - Unknown word (unicorn)     -- "plugin:unicorn/recommended"
docs/basic/linting.md:6:156     - Unknown word (interested) -- c2317a9). If you are interested in TSLint tips, please
docs/basic/linting.md:6:211     - Unknown word (azdanov)    -- check this PR from [@azdanov](https://github.com
docs/basic/linting.md:6:308     - Unknown word (focuses)    -- of this section just focuses on ESLint. [You can
docs/basic/linting.md:8:106     - Unknown word (begun)      -- and [work has recently begun on `typescript-eslint
docs/basic/linting.md:8:16      - Unknown word (evolving)   -- > ⚠️This is an evolving topic. `typescript-eslint
docs/basic/linting.md:8:221     - Unknown word (bring)      -- typescript-eslint) to bring ESLint up to full parity
docs/basic/linting.md:8:245     - Unknown word (parity)     -- bring ESLint up to full parity and interop with TSLint
docs/basic/linting.md:8:97      - Unknown word (recently)   -- maintained and [work has recently begun on `typescript
docs/basic/recommended/codebases.md:23:46     - Unknown word (Native)      -- artsy/emission (React Native)
docs/basic/recommended/codebases.md:24:7      - Unknown word (reach)       -- - [@reach/ui's community typings
docs/basic/recommended/codebases.md:27:1      - Unknown word (Older)       -- Older but still worth checking
docs/basic/recommended/codebases.md:27:17     - Unknown word (worth)       -- Older but still worth checking:
docs/basic/recommended/codebases.md:34:118    - Unknown word (authenticated) -- tested, typed, and authenticated
docs/basic/recommended/codebases.md:34:82     - Unknown word (Starter)     -- Next.js + Firebase Starter: styled, tested, typed
docs/basic/recommended/codebases.md:36:61     - Unknown word (visual)        -- jakoblind.no/) is a visual tool for creating webpack
docs/basic/recommended/codebases.md:39:46     - Unknown word (spoeck)        -- ilerplates: _contributed by [@spoeck](https://github.com
docs/basic/recommended/codebases.md:3:52      - Unknown word (learn)       -- TypeScript codebases to learn from
docs/basic/recommended/codebases.md:3:8       - Unknown word (Recommended) -- title: Recommended React + TypeScript codebases
docs/basic/recommended/codebases.md:46:25     - Unknown word (study)         -- Library Codebases to study
docs/basic/recommended/resources.md:10:22     - Unknown word (Habits)      -- [10 Bad TypeScript Habits](https://startup-cto
docs/basic/recommended/resources.md:16:45     - Unknown word (modeling)    -- properties instead of modeling which combinations exist
docs/basic/recommended/resources.md:16:6      - Unknown word (Marking)     -- 6. Marking optional properties
docs/basic/recommended/resources.md:16:60     - Unknown word (combinations) -- instead of modeling which combinations exist by extending interfaces
docs/basic/recommended/resources.md:18:23     - Unknown word (nonboolean)   -- 8. Non-boolean `if (nonboolean)` checks
docs/basic/recommended/resources.md:19:6      - Unknown word (bangbang)     -- 9. bangbang checks `if (!!nonboolean
docs/basic/recommended/resources.md:21:4      - Unknown word (Ultimate)     -- - [Ultimate React Component Patterns
docs/basic/recommended/resources.md:22:112    - Unknown word (Egghead)      -- tsx/react) with an [Egghead.io course](https://egghead
docs/basic/recommended/resources.md:22:25     - Unknown word (gitbook)      -- Basarat's TypeScript gitbook has a React section
docs/basic/recommended/resources.md:22:4      - Unknown word (Basarat's)    -- - [Basarat's TypeScript gitbook has
docs/basic/recommended/resources.md:23:101    - Unknown word (Jared's)      -- typescript) as well as Jared's other work like [disco
docs/basic/recommended/resources.md:23:126    - Unknown word (disco)        -- Jared's other work like [disco.chat](https://github
docs/basic/recommended/resources.md:23:132    - Unknown word (chat)         -- other work like [disco.chat](https://github.com
docs/basic/recommended/resources.md:23:38     - Unknown word (Guidelines)   -- s TypeScript + React Guidelines](https://github.com
docs/basic/recommended/resources.md:23:4      - Unknown word (Palmer)       -- - [Palmer Group's TypeScript
docs/basic/recommended/resources.md:24:11     - Unknown word (Sorhus)       -- - [Sindre Sorhus' TypeScript Style Guide
docs/basic/recommended/resources.md:24:4      - Unknown word (Sindre)       -- - [Sindre Sorhus' TypeScript Style
docs/basic/recommended/resources.md:25:109    - Unknown word (starter)      -- TypeScript-React-Starter) A starter template for TypeScript
docs/basic/recommended/resources.md:25:174    - Unknown word (describing)   -- with a detailed README describing how to use the two together
docs/basic/recommended/resources.md:25:244    - Unknown word (frequently)   -- this doesn't seem to be frequently updated anymore.
docs/basic/recommended/resources.md:26:10     - Unknown word (Kinney's)     -- - [Steve Kinney's React and TypeScript
docs/basic/recommended/resources.md:26:4      - Unknown word (Steve)        -- - [Steve Kinney's React and TypeScript
docs/basic/recommended/resources.md:26:59     - Unknown word (Masters)      -- TypeScript course on Frontend Masters (paid)](https://frontendmaste
docs/basic/recommended/resources.md:26:68     - Unknown word (paid)         -- on Frontend Masters (paid)](https://frontendmasters
docs/basic/recommended/resources.md:27:10     - Unknown word (Holt's)       -- - [Brian Holt's Intermediate React course
docs/basic/recommended/resources.md:27:163    - Unknown word (Converting)   -- app-to-typescript/) - Converting App To TypeScript Section
docs/basic/recommended/resources.md:27:17     - Unknown word (Intermediate) -- - [Brian Holt's Intermediate React course on Frontend
docs/basic/recommended/resources.md:27:4      - Unknown word (Brian)        -- - [Brian Holt's Intermediate
docs/basic/recommended/resources.md:28:17     - Unknown word (Production)   -- - [Mike North's Production TypeScript course on
docs/basic/recommended/resources.md:28:4      - Unknown word (Mike)         -- - [Mike North's Production TypeScript
docs/basic/recommended/resources.md:29:51     - Unknown word (gojutin)      -- github.io/chota/) by [gojutin](https://github.com
docs/basic/recommended/resources.md:32:13     - Unknown word (Wengel's)     -- - [Gustav Wengel's blogpost - converting
docs/basic/recommended/resources.md:32:33     - Unknown word (converting)   -- Wengel's blogpost - converting a React codebase to
docs/basic/recommended/resources.md:32:6      - Unknown word (Gustav)       -- - [Gustav Wengel's blogpost -
docs/basic/recommended/resources.md:34:18     - Unknown word (Beginner's)   -- - [Matt Pocock's Beginner's Typescript Tutorial
docs/basic/recommended/resources.md:34:4      - Unknown word (Matt)         -- - [Matt Pocock's Beginner's
docs/basic/recommended/resources.md:34:9      - Unknown word (Pocock's)     -- - [Matt Pocock's Beginner's Typescript
docs/basic/recommended/resources.md:9:68      - Unknown word (HIGHLY)     -- typescript-guide> - **HIGHLY HIGHLY RECOMMENDED*
docs/basic/recommended/resources.md:9:82      - Unknown word (RECOMMENDED) -- guide> - **HIGHLY HIGHLY RECOMMENDED**, i wrote this repo
docs/basic/recommended/talks.md:10:90     - Unknown word (Nikhil)     -- FmrgOq667svX6C9O), by Nikhil Verma 2019
docs/basic/recommended/talks.md:10:97     - Unknown word (Verma)      -- svX6C9O), by Nikhil Verma 2019
docs/basic/recommended/talks.md:11:115    - Unknown word (Coder)      -- watch?v=Y4u97vJqmhM), by CoderOne 2023
docs/basic/recommended/talks.md:11:4      - Unknown word (Senior)     -- - [Senior Typescript Features
docs/basic/recommended/talks.md:11:41     - Unknown word (Know)       -- Typescript Features You don't Know About - clean-code]
docs/basic/recommended/talks.md:11:54     - Unknown word (clean)      -- You don't Know About - clean-code](https://www.youtube
docs/basic/recommended/talks.md:12:104    - Unknown word (Camp)       -- FJDVKeh7RJI), by FreeCodeCamp 2022
docs/basic/recommended/talks.md:12:25     - Unknown word (Course)     -- React & TypeScript - Course for Beginners](https
docs/basic/recommended/talks.md:12:36     - Unknown word (Beginners)  -- TypeScript - Course for Beginners](https://www.youtube
docs/basic/recommended/talks.md:13:73     - Unknown word (Chris)      -- watch?v=1ZnrX3wiNTU), by Chris Toomey 2019
docs/basic/recommended/talks.md:13:79     - Unknown word (Toomey)     -- ZnrX3wiNTU), by Chris Toomey 2019
docs/basic/recommended/talks.md:14:4      - Unknown word (Mastering)  -- - [Mastering React Hooks](https:
docs/basic/recommended/talks.md:14:81     - Unknown word (Herrington) -- zM_ZiSl2n2E), by Jack Herrington 2021
docs/basic/recommended/talks.md:15:20     - Unknown word (codegen)    -- - [Using Hooks and codegen](https://www.youtube
docs/basic/recommended/talks.md:15:77     - Unknown word (Tejas)      -- watch?v=cdsnzfJUqm0) by Tejas Kumar 2019
docs/basic/recommended/talks.md:15:83     - Unknown word (Kumar)      -- cdsnzfJUqm0) by Tejas Kumar 2019
docs/basic/recommended/talks.md:2:5       - Unknown word (talks)      -- id: talks
docs/basic/recommended/talks.md:4:16      - Unknown word (Talks)      -- sidebar_label: Talks
docs/basic/recommended/talks.md:7:111     - Unknown word (Hochel)     -- PBQ3if6Fmg), by Martin Hochel, GeeCon Prague 2018
docs/basic/recommended/talks.md:8:104     - Unknown word (Edge)       -- 8yj7TuXxS), by ClearEdge Tech Talk 2022
docs/basic/recommended/talks.md:8:114     - Unknown word (Talk)       -- , by ClearEdge Tech Talk 2022
docs/basic/recommended/talks.md:9:114     - Unknown word (Emma)       -- IFZZIMEiXz7AsiBv), by Emma Brillhart 2019
docs/basic/recommended/talks.md:9:119     - Unknown word (Brillhart)  -- IFZZIMEiXz7AsiBv), by Emma Brillhart 2019
docs/basic/recommended/talks.md:9:18      - Unknown word (Readable)   -- - [Create a More Readable React Codebase Using
docs/basic/setup.md:11:110    - Unknown word (Everyday)      -- basic-types.html) and [Everyday Types](https://www.typescript
docs/basic/setup.md:11:3      - Unknown word (Familiarity)   -- - Familiarity with [TypeScript Basics
docs/basic/setup.md:11:32     - Unknown word (Basics)        -- Familiarity with [TypeScript Basics](https://www.typescriptlang
docs/basic/setup.md:15:33     - Unknown word (kits)          -- and TypeScript starter kits
docs/basic/setup.md:17:145    - Unknown word (frameworks)    -- of the most popular frameworks. Here's how to start
docs/basic/setup.md:20:4      - Unknown word (Remix)         -- - [Remix](https://remix.run/docs
docs/basic/setup.md:20:63     - Unknown word (remix)         -- tutorials/blog): `npx create-remix@latest`
docs/basic/setup.md:21:4      - Unknown word (Gatsby)        -- - [Gatsby](https://www.gatsbyjs
docs/basic/setup.md:21:94     - Unknown word (gatsby)        -- typescript/): `npm init gatsby --ts`
docs/basic/setup.md:22:65     - Unknown word (expo)          -- typescript/): `npx create-expo-app -t with-typescript
docs/basic/setup.md:26:113    - Unknown word (sharable)      -- debugging or making sharable reproductions.
docs/basic/setup.md:26:122    - Unknown word (reproductions) -- debugging or making sharable reproductions.
docs/basic/setup.md:29:9      - Unknown word (Blitz)         -- - [StackBlitz](https://stackblitz
docs/basic/setup.md:3:8       - Unknown word (Setup)      -- title: Setup
docs/basic/setup.md:6:4       - Unknown word (Prerequisites) -- ## Prerequisites
docs/basic/setup.md:8:114     - Unknown word (assumed)       -- React and TypeScript is assumed. Here is a list of prerequisi
docs/basic/setup.md:8:141     - Unknown word (prerequisites) -- assumed. Here is a list of prerequisites:
docs/basic/troubleshooting/learn-ts.md:11:13     - Unknown word (mentioning)      -- It is worth mentioning some resources to help
docs/basic/troubleshooting/learn-ts.md:13:135    - Unknown word (Orta)            -- section, written by @Orta
docs/basic/troubleshooting/learn-ts.md:13:44     - Unknown word (playground's)    -- examples under [the playground's](http://www.typescriptlang
docs/basic/troubleshooting/learn-ts.md:14:10     - Unknown word (Hejlsberg's)     -- - Anders Hejlsberg's overview of TS: https
docs/basic/troubleshooting/learn-ts.md:14:22     - Unknown word (overview)        -- Anders Hejlsberg's overview of TS: https://www.youtube
docs/basic/troubleshooting/learn-ts.md:14:3      - Unknown word (Anders)          -- - Anders Hejlsberg's overview
docs/basic/troubleshooting/learn-ts.md:15:10     - Unknown word (Schultz)         -- - Marius Schultz: https://blog.mariusschulz
docs/basic/troubleshooting/learn-ts.md:16:13     - Unknown word (Deep)            -- - Basarat's Deep Dive: https://basarat
docs/basic/troubleshooting/learn-ts.md:16:18     - Unknown word (Dive)            -- - Basarat's Deep Dive: https://basarat.gitbook
docs/basic/troubleshooting/learn-ts.md:17:23     - Unknown word (Tackling)        -- Axel Rauschmeyer's [Tackling TypeScript](https:/
docs/basic/troubleshooting/learn-ts.md:17:3      - Unknown word (Axel)            -- - Axel Rauschmeyer's [Tackling
docs/basic/troubleshooting/learn-ts.md:17:8      - Unknown word (Rauschmeyer's)   -- - Axel Rauschmeyer's [Tackling TypeScript
docs/basic/troubleshooting/learn-ts.md:18:180    - Unknown word (practical)       -- typescript features and practical type logic applications
docs/basic/troubleshooting/learn-ts.md:18:220    - Unknown word (recursively)     -- logic applications (e.g. recursively making all properties
docs/basic/troubleshooting/learn-ts.md:18:3      - Unknown word (Rares)           -- - Rares Matei: [Egghead.io course
docs/basic/troubleshooting/learn-ts.md:18:9      - Unknown word (Matei)           -- - Rares Matei: [Egghead.io course
docs/basic/troubleshooting/learn-ts.md:20:31     - Unknown word (Beginner)        -- Uesugi: [TypeScript for Beginner Programmers](https:
docs/basic/troubleshooting/learn-ts.md:20:40     - Unknown word (Programmers)     -- TypeScript for Beginner Programmers](https://ts.chibicode
docs/basic/troubleshooting/learn-ts.md:20:7      - Unknown word (Uesugi)          -- - Shu Uesugi: [TypeScript for Beginner
docs/basic/troubleshooting/learn-ts.md:3:17      - Unknown word (Really)     -- title: "Time to Really Learn TypeScript"
docs/basic/troubleshooting/learn-ts.md:3:24      - Unknown word (Learn)      -- title: "Time to Really Learn TypeScript"
docs/basic/troubleshooting/learn-ts.md:7:1       - Unknown word (Believe)    -- Believe it or not, we have only
docs/basic/troubleshooting/learn-ts.md:7:122     - Unknown word (troubleshooting) -- still facing TypeScript troubleshooting issues, it is likely
docs/basic/troubleshooting/learn-ts.md:7:202     - Unknown word (superficial)     -- erstanding of TS is still too superficial.
docs/basic/troubleshooting/learn-ts.md:7:33      - Unknown word (barely)     -- or not, we have only barely introduced TypeScript
docs/basic/troubleshooting/learn-ts.md:7:40      - Unknown word (introduced) -- we have only barely introduced TypeScript here in this
docs/basic/troubleshooting/learn-ts.md:9:138     - Unknown word (getting)         -- with React than just getting good at TypeScript so
docs/basic/troubleshooting/non-ts-files.md:14:7      - Unknown word (Vendor)          -- MyVendorThing: MyVendorType;
docs/basic/troubleshooting/non-ts-files.md:19:1      - Unknown word (Likewise)        -- Likewise if you wish to "import
docs/basic/troubleshooting/non-ts-files.md:26:4      - Unknown word (importing)       -- // importing in a tsx file
docs/basic/troubleshooting/non-ts-files.md:3:9       - Unknown word (Troubleshooting) -- title: "Troubleshooting Handbook: Globals, Images
docs/basic/troubleshooting/non-ts-files.md:9:53      - Unknown word (attaches)        -- party JS script that attaches on to the `window` global
docs/basic/troubleshooting/official-typings-bugs.md:19:13     - Unknown word (adamrackis) -- [Thanks to @adamrackis for the tip.](https
docs/basic/troubleshooting/official-typings-bugs.md:21:68     - Unknown word (existing)   -- missing members to an existing interface, you don't
docs/basic/troubleshooting/official-typings-bugs.md:25:17     - Unknown word (plotly)     -- declare module "plotly.js" {
docs/basic/troubleshooting/official-typings-bugs.md:26:13     - Unknown word (Plotly)     -- interface PlotlyHTMLElement {
docs/basic/troubleshooting/official-typings-bugs.md:3:8       - Unknown word (Fixing)     -- title: Fixing bugs in official typings
docs/basic/troubleshooting/official-typings-bugs.md:46:239    - Unknown word (mode)       -- do AMD's in a script-mode `.ts` file (no imports
docs/basic/troubleshooting/official-typings-bugs.md:7:32      - Unknown word (library's)  -- into bugs with your library's official typings, you
docs/basic/troubleshooting/operators.md:12:36     - Unknown word (addition)       -- or `readonly` or `?`: addition and subtraction and
docs/basic/troubleshooting/operators.md:12:49     - Unknown word (subtraction)    -- or `?`: addition and subtraction and readonly and optional
docs/basic/troubleshooting/operators.md:12:87     - Unknown word (modifiers)      -- readonly and optional modifiers
docs/basic/troubleshooting/operators.md:14:8      - Unknown word (Nonnull)        -- - `!`: Nonnull assertion for nullable
docs/basic/troubleshooting/operators.md:19:48     - Unknown word (around)         -- difficult topic to get around so here are some extra
docs/basic/troubleshooting/operators.md:21:9      - Unknown word (walked)         -- - fully walked through explanation
docs/basic/troubleshooting/operators.md:22:3      - Unknown word (Bailing)        -- - Bailing out and other advanced
docs/basic/troubleshooting/operators.md:3:35      - Unknown word (Operators)  -- Troubleshooting Handbook: Operators"
docs/basic/troubleshooting/operators.md:7:50      - Unknown word (refinement) -- type query used for refinement
docs/basic/troubleshooting/operators.md:9:11      - Unknown word (misconceptions) -- - [Some misconceptions here](https://twitter
docs/basic/troubleshooting/ts-config.md:12:6      - Unknown word (incremental) -- "incremental": true,
docs/basic/troubleshooting/ts-config.md:18:12     - Unknown word (Helpers)     -- "importHelpers": true,
docs/basic/troubleshooting/ts-config.md:22:14     - Unknown word (Locals)      -- "noUnusedLocals": true,
docs/basic/troubleshooting/ts-config.md:22:8      - Unknown word (Unused)      -- "noUnusedLocals": true,
docs/basic/troubleshooting/ts-config.md:24:16     - Unknown word (Returns)     -- "noImplicitReturns": true,
docs/basic/troubleshooting/ts-config.md:24:8      - Unknown word (Implicit)    -- "noImplicitReturns": true,
docs/basic/troubleshooting/ts-config.md:25:19     - Unknown word (Cases)       -- "noFallthroughCasesInSwitch": true,
docs/basic/troubleshooting/ts-config.md:30:11     - Unknown word (Consistent)  -- "forceConsistentCasingInFileNames": true
docs/basic/troubleshooting/ts-config.md:30:21     - Unknown word (Casing)      -- "forceConsistentCasingInFileNames": true,
docs/basic/troubleshooting/ts-config.md:31:8      - Unknown word (Module)      -- "esModuleInterop": true,
docs/basic/troubleshooting/ts-config.md:32:6      - Unknown word (suppress)    -- "suppressImplicitAnyIndexErrors
docs/basic/troubleshooting/ts-config.md:34:18     - Unknown word (Decorators)  -- "experimentalDecorators": true
docs/basic/troubleshooting/ts-config.md:43:26     - Unknown word (discuss)     -- Please open an issue and discuss if there are better
docs/basic/troubleshooting/ts-config.md:43:66     - Unknown word (choices)     -- are better recommended choices for React.
docs/basic/troubleshooting/ts-config.md:45:10     - Unknown word (flags)       -- Selected flags and why we like them
docs/basic/troubleshooting/ts-config.md:47:22     - Unknown word (disables)    -- `esModuleInterop`: disables namespace imports (
docs/basic/troubleshooting/ts-config.md:47:84     - Unknown word (enables)     -- foo from "foo"`) and enables CJS/AMD/UMD style imports
docs/basic/troubleshooting/ts-config.md:48:167    - Unknown word (definite)       -- opt out of this with a definite assignment assertion
docs/basic/troubleshooting/ts-config.md:48:28     - Unknown word (Initialization) -- strict`: `strictPropertyInitialization` forces you to initialize
docs/basic/troubleshooting/ts-config.md:48:44     - Unknown word (forces)         -- strictPropertyInitialization` forces you to initialize class
docs/basic/troubleshooting/ts-config.md:51:18     - Unknown word (grows)          -- Compilation time grows linearly with size of
docs/basic/troubleshooting/ts-config.md:51:24     - Unknown word (linearly)       -- Compilation time grows linearly with size of codebase
docs/basic/troubleshooting/ts-config.md:7:163     - Unknown word (flag)       -- TS docs also has per-flag annotations of what
docs/basic/troubleshooting/ts-config.md:7:290     - Unknown word (roll)       -- This is the setup I roll with for APPS (not libraries
docs/basic/troubleshooting/types.md:104:19    - Unknown word (Sizes)      -- export enum ButtonSizes {
docs/basic/troubleshooting/types.md:118:124   - Unknown word (asserted)   -- union types need to be asserted to a more specific type
docs/basic/troubleshooting/types.md:118:73    - Unknown word (narrower)   -- type you're using is narrower than it thinks, or union
docs/basic/troubleshooting/types.md:118:90    - Unknown word (thinks)     -- is narrower than it thinks, or union types need
docs/basic/troubleshooting/types.md:11:124    - Unknown word (familiar)   -- Instead, let's try to be familiar with some of the common
docs/basic/troubleshooting/types.md:11:157    - Unknown word (strategies) -- with some of the common strategies to solve these issues
docs/basic/troubleshooting/types.md:11:171    - Unknown word (solve)      -- common strategies to solve these issues.
docs/basic/troubleshooting/types.md:11:75     - Unknown word (benefits)   -- experience the full benefits of TypeScript. Instead
docs/basic/troubleshooting/types.md:127:39    - Unknown word (Special)    -- message={message as SpecialMessageType}>{message
docs/basic/troubleshooting/types.md:135:126   - Unknown word (casting)    -- is not the same as "casting" a type.
docs/basic/troubleshooting/types.md:13:25     - Unknown word (Guarding)   -- Union Types and Type Guarding
docs/basic/troubleshooting/types.md:141:36    - Unknown word (dialog)     -- document.getElementById(dialog.id!)!); // ! after the
docs/basic/troubleshooting/types.md:147:15    - Unknown word (Nominal)    -- ## Simulating Nominal Types
docs/basic/troubleshooting/types.md:147:4     - Unknown word (Simulating) -- ## Simulating Nominal Types
docs/basic/troubleshooting/types.md:149:111   - Unknown word (branding)     -- nominal typing with [`type branding`](https://basarat.gitbook
docs/basic/troubleshooting/types.md:149:45    - Unknown word (inconvenient) -- is handy, until it is inconvenient. However you can simulate
docs/basic/troubleshooting/types.md:149:84    - Unknown word (nominal)      -- However you can simulate nominal typing with [`type branding
docs/basic/troubleshooting/types.md:152:36    - Unknown word (brand)        -- string & { readonly brand: unique symbol };
docs/basic/troubleshooting/types.md:15:27     - Unknown word (solving)    -- types are handy for solving some of these typing
docs/basic/troubleshooting/types.md:174:44    - Unknown word (Argument)     -- foobar")); // Error, Argument of type 'OrderID' is
docs/basic/troubleshooting/types.md:181:110   - Unknown word (native)       -- mirror the props of a native component like a `button
docs/basic/troubleshooting/types.md:181:76    - Unknown word (supposed)     -- when your component is supposed to mirror the props
docs/basic/troubleshooting/types.md:181:88    - Unknown word (mirror)       -- component is supposed to mirror the props of a native
docs/basic/troubleshooting/types.md:190:16    - Unknown word (buttony)      -- // do custom buttony stuff
docs/basic/troubleshooting/types.md:197:54    - Unknown word (subsets)      -- Types to make reusable subsets of props for similar
docs/basic/troubleshooting/types.md:206:3     - Unknown word (tails)        -- tailsCount: number
docs/basic/troubleshooting/types.md:208:6     - Unknown word (Human)        -- type HumanProps = {
docs/basic/troubleshooting/types.md:209:3     - Unknown word (hands)        -- handsCount: number
docs/basic/troubleshooting/types.md:221:103   - Unknown word (usecases)     -- commentary on Union Types usecases](https://github.com
docs/basic/troubleshooting/types.md:221:57    - Unknown word (Meanwhile)    -- please contribute!). Meanwhile, see our [commentary
docs/basic/troubleshooting/types.md:223:129   - Unknown word (narrowing)    -- TypeScript doesn't seem to be narrowing your union type as you
docs/basic/troubleshooting/types.md:225:4     - Unknown word (Overloading)  -- ## Overloading Function Types
docs/basic/troubleshooting/types.md:227:1     - Unknown word (Specifically) -- Specifically when it comes to functions
docs/basic/troubleshooting/types.md:233:33    - Unknown word (overloading)  -- doesn't let you do any overloading. If you have the implementati
docs/basic/troubleshooting/types.md:236:24    - Unknown word (suit)         -- function pickCard(x: { suit: string; card: number
docs/basic/troubleshooting/types.md:236:38    - Unknown word (card)         -- pickCard(x: { suit: string; card: number }[]): number
docs/basic/troubleshooting/types.md:239:26    - Unknown word (combined)     -- implementation with combined signature
docs/basic/troubleshooting/types.md:244:143   - Unknown word (forego)       -- In this case you can forego any shorthand and write
docs/basic/troubleshooting/types.md:244:257   - Unknown word (concerned)    -- far as TypeScript is concerned, `functions are just
docs/basic/troubleshooting/types.md:244:288   - Unknown word (callable)     -- `functions are just callable objects with no key
docs/basic/troubleshooting/types.md:251:76    - Unknown word (Called)       -- here eg `pickCard.wasCalled`
docs/basic/troubleshooting/types.md:255:193   - Unknown word (readily)      -- inferred for you. You can readily see examples of overloads
docs/basic/troubleshooting/types.md:255:34    - Unknown word (actual)       -- when you implement the actual overloaded function
docs/basic/troubleshooting/types.md:261:1     - Unknown word (Leaning)      -- Leaning on TypeScript's Type
docs/basic/troubleshooting/types.md:261:120   - Unknown word (back)         -- inferred, and have to go back and explicitly declare
docs/basic/troubleshooting/types.md:261:62    - Unknown word (realize)      -- is great... until you realize you need a type that
docs/basic/troubleshooting/types.md:263:1     - Unknown word (Fortunately)  -- Fortunately, with `typeof`, you
docs/basic/troubleshooting/types.md:280:108   - Unknown word (redefine)     -- to go and explicitly redefine your types if you use
docs/basic/troubleshooting/types.md:280:14    - Unknown word (slicing)      -- Working with slicing state and props is common
docs/basic/troubleshooting/types.md:280:58    - Unknown word (Again)        -- is common in React. Again, you don't really have
docs/basic/troubleshooting/types.md:289:16    - Unknown word (demonstrating) -- // we are just demonstrating how to use Partial here
docs/basic/troubleshooting/types.md:298:19    - Unknown word (caveats)       -- <summary><b>Minor caveats on using <code>Partial
docs/basic/troubleshooting/types.md:300:105   - Unknown word (pitfalls)      -- behaves today. See [subtle pitfalls of the above example
docs/basic/troubleshooting/types.md:300:78    - Unknown word (behaves)       -- using `Partial` as it behaves today. See [subtle pitfalls
docs/basic/troubleshooting/types.md:304:21    - Unknown word (weren't)       -- ## The Types I need weren't exported!
docs/basic/troubleshooting/types.md:306:13    - Unknown word (annoying)      -- This can be annoying but here are ways to
docs/basic/troubleshooting/types.md:308:110   - Unknown word (overlapping)   -- optionally `Omit` any overlapping types
docs/basic/troubleshooting/types.md:308:3     - Unknown word (Grabbing)      -- - Grabbing the Prop types of a
docs/basic/troubleshooting/types.md:313:6     - Unknown word (Alert)         -- type AlertButtonProps = Omit<ButtonProps
docs/basic/troubleshooting/types.md:333:22    - Unknown word (virtually)     -- In fact you can grab virtually anything public: [see
docs/basic/troubleshooting/types.md:333:78    - Unknown word (Koshelev)      -- this blogpost from Ivan Koshelev](http://ikoshelev.azurewebsit
docs/basic/troubleshooting/types.md:340:8     - Unknown word (Inst)          -- subInstArr: [
docs/basic/troubleshooting/types.md:358:30    - Unknown word (liner)         -- could just write a one-liner,
docs/basic/troubleshooting/types.md:360:66    - Unknown word (jumps)         -- left-to-right with no jumps)
docs/basic/troubleshooting/types.md:368:11    - Unknown word (ships)         -- - TS also ships with a `Parameters`
docs/basic/troubleshooting/types.md:368:54    - Unknown word (extracting)    -- Parameters` utility type for extracting the parameters of a
docs/basic/troubleshooting/types.md:369:275   - Unknown word (Basarat)       -- 0) to get the idea. Basarat [also has a good video
docs/basic/troubleshooting/types.md:373:1     - Unknown word (What's)        -- What's more annoying than modules
docs/basic/troubleshooting/types.md:375:14    - Unknown word (proceed)       -- > Before you proceed - make sure you have
docs/basic/troubleshooting/types.md:377:1     - Unknown word (Fret)          -- Fret not! There are more
docs/basic/troubleshooting/types.md:379:5     - Unknown word (Slapping)      -- ### Slapping `any` on everything
docs/basic/troubleshooting/types.md:381:149   - Unknown word (resolvable)    -- the path to file is resolvable by TypeScript by checking
docs/basic/troubleshooting/types.md:381:5     - Unknown word (lazier)        -- A **lazier** way would be to create
docs/basic/troubleshooting/types.md:381:71    - Unknown word (typedec)       -- declaration file, say `typedec.d.ts`– if you don't
docs/basic/troubleshooting/types.md:388:28    - Unknown word (resolves)      -- src" // automatically resolves if the path to declaration
docs/basic/troubleshooting/types.md:401:83    - Unknown word (hackier)       -- without errors. A even hackier, write-once-and-forget
docs/basic/troubleshooting/types.md:403:120   - Unknown word (ticking)       -- more, you now have a ticking type-bomb in your hands
docs/basic/troubleshooting/types.md:403:133   - Unknown word (bomb)          -- have a ticking type-bomb in your hands. The only
docs/basic/troubleshooting/types.md:403:169   - Unknown word (circumventing) -- hands. The only way of circumventing this problem would be
docs/basic/troubleshooting/types.md:403:262   - Unknown word (explained)     -- those untyped modules as explained in the following sections
docs/basic/troubleshooting/types.md:407:87    - Unknown word (guess)         -- see TypeScript's "best guess" at the types of the
docs/basic/troubleshooting/types.md:409:131   - Unknown word (accurately)    -- shape of the object to accurately enumerate all available
docs/basic/troubleshooting/types.md:409:142   - Unknown word (enumerate)     -- object to accurately enumerate all available properties
docs/basic/troubleshooting/types.md:409:183   - Unknown word (tends)         -- available properties. This tends to be very accurate
docs/basic/troubleshooting/types.md:409:200   - Unknown word (accurate)      -- This tends to be very accurate, BUT the tool does not
docs/basic/troubleshooting/types.md:409:244   - Unknown word (scraping)      -- does not yet support scraping JSDoc comments to populate
docs/basic/troubleshooting/types.md:409:271   - Unknown word (populate)      -- scraping JSDoc comments to populate additional types.
docs/basic/troubleshooting/types.md:40:220    - Unknown word (confusion)  -- , which causes some confusion if you expected it to
docs/basic/troubleshooting/types.md:420:34    - Unknown word (pure)          -- is just like typing pure functions.
docs/basic/troubleshooting/types.md:422:36    - Unknown word (assumptions)   -- steps work under two assumptions:
docs/basic/troubleshooting/types.md:424:55    - Unknown word (stated)        -- declaration file as stated earlier in the section
docs/basic/troubleshooting/types.md:425:144   - Unknown word (housed)        -- most cases, it would be housed in an `index.js` file
docs/basic/troubleshooting/types.md:425:67    - Unknown word (directly)      -- specifically the code that directly exports the functions
docs/basic/troubleshooting/types.md:426:149   - Unknown word (Suppose)       -- define a hook completely. Suppose the hook you wish to
docs/basic/troubleshooting/types.md:426:3     - Unknown word (Typically)     -- Typically you need a minimum of
docs/basic/troubleshooting/types.md:453:85    - Unknown word (Dark)          -- donavon/use-dark-mode">useDarkMode hook</a> exports
docs/basic/troubleshooting/types.md:453:89    - Unknown word (Mode)          -- use-dark-mode">useDarkMode hook</a> exports the
docs/basic/troubleshooting/types.md:476:5     - Unknown word (toggle)        -- toggle: useCallback(() => setState
docs/basic/troubleshooting/types.md:482:86    - Unknown word (aforementioned) -- props following the aforementioned structure will result
docs/basic/troubleshooting/types.md:487:54    - Unknown word (aspects)        -- you to specify certain aspects of `useDarkMode`
docs/basic/troubleshooting/types.md:494:108   - Unknown word (persistent)     -- to `null` to disable persistent storage.
docs/basic/troubleshooting/types.md:494:29    - Unknown word (Specify)        -- storageKey?: string; // Specify the `localStorage` key
docs/basic/troubleshooting/types.md:51:10     - Unknown word (redirect)   -- function redirect(user: Admin | User)
docs/basic/troubleshooting/types.md:523:24    - Unknown word (Gist)           -- For instance, [sw-yx's Gist on React Router 6 types
docs/basic/troubleshooting/types.md:529:8     - Unknown word (Navigate)       -- type NavigateProps<T> = {
docs/basic/troubleshooting/types.md:53:34     - Unknown word (typeguards) -- the `in` operator for typeguards since TS 2.7+
docs/basic/troubleshooting/types.md:541:4     - Unknown word (Frequent)       -- ## Frequent Known Problems with
docs/basic/troubleshooting/types.md:543:98    - Unknown word (necessarily)    -- no solution for. Not necessarily TSX only.
docs/basic/troubleshooting/types.md:551:32    - Unknown word (restrict)       -- TypeScript doesn't let you restrict the type of children
docs/basic/troubleshooting/types.md:553:1     - Unknown word (Guaranteeing)   -- Guaranteeing typesafety for this
docs/basic/troubleshooting/types.md:553:14    - Unknown word (typesafety)     -- Guaranteeing typesafety for this kind of API
docs/basic/troubleshooting/types.md:60:88     - Unknown word (isnt)       -- versions or where `in` isnt enough
docs/basic/troubleshooting/types.md:68:210    - Unknown word (refines)    -- This is how TS itself refines types with `typeof`
docs/basic/troubleshooting/types.md:70:25     - Unknown word (chains)     -- you need `if...else` chains or the `switch` statement
docs/basic/troubleshooting/types.md:70:252    - Unknown word (writeup)    -- See also: [Basarat's writeup](https://basarat.gitbook
docs/basic/troubleshooting/types.md:70:359    - Unknown word (reducers)   -- This is handy in typing reducers for `useReducer` or
docs/basic/troubleshooting/types.md:74:69     - Unknown word (during)     -- question mark and assign during destructure (or use
docs/basic/troubleshooting/types.md:7:6       - Unknown word (Have)       -- > ⚠️ Have you read [the TypeScript
docs/basic/troubleshooting/types.md:87:93     - Unknown word (encouraged) -- undefined, but this is not encouraged.
docs/basic/troubleshooting/types.md:93:16     - Unknown word (avoiding)   -- **We recommend avoiding using enums as far as
docs/basic/troubleshooting/types.md:95:102    - Unknown word (agrees)     -- enums/) (the TS team [agrees](https://twitter.com
docs/basic/troubleshooting/types.md:95:19     - Unknown word (documented) -- Enums have a few [documented issues](https://fettblog
docs/basic/troubleshooting/types.md:9:1       - Unknown word (Facing)     -- Facing weird type errors? You
docs/basic/troubleshooting/types.md:9:38      - Unknown word (alone)      -- type errors? You aren't alone. This is the hardest
docs/basic/troubleshooting/types.md:9:57      - Unknown word (hardest)    -- t alone. This is the hardest part of using TypeScript
docs/basic/troubleshooting/types.md:9:8       - Unknown word (weird)      -- Facing weird type errors? You aren
docs/basic/troubleshooting/utilities.md:10:67     - Unknown word (uppercase)  -- string literal type to uppercase
docs/basic/troubleshooting/utilities.md:11:45     - Unknown word (constructor's) -- Parameters`: a tuple of class constructor's parameter types
docs/basic/troubleshooting/utilities.md:13:4      - Unknown word (Extract)       -- - `Extract`: select a subtype that
docs/basic/troubleshooting/utilities.md:22:51     - Unknown word (given)         -- immutable array of the given type
docs/basic/troubleshooting/utilities.md:9:14      - Unknown word (emulate)    -- - `Awaited`: emulate the behavior of `await
docs/basic/troubleshooting/utilities.md:9:4       - Unknown word (Awaited)    -- - `Awaited`: emulate the behavior
docs/hoc/excluding-props.md:127:25    - Unknown word (lessons)     -- will need to extract lessons from here in future
docs/hoc/excluding-props.md:17:16     - Unknown word (Woof)        -- return <div> Woof: {name}, Owner: {owner
docs/hoc/excluding-props.md:21:36     - Unknown word (injects)     -- withOwner` HOC that injects the `owner`:
docs/hoc/excluding-props.md:24:7      - Unknown word (Owned)       -- const OwnedDog = withOwner("swyx
docs/hoc/excluding-props.md:2:5       - Unknown word (excluding)  -- id: excluding_props
docs/hoc/excluding-props.md:32:12     - Unknown word (fido)        -- <Dog name="fido" owner="swyx" />; /
docs/hoc/excluding-props.md:39:3      - Unknown word (lives)       -- lives: number;
docs/hoc/excluding-props.md:3:16      - Unknown word (Excluding)  -- sidebar_label: Excluding Props
docs/hoc/excluding-props.md:61:81     - Unknown word (leaves)      -- keyof T, 'owner'>`, this leaves you with a list of names
docs/hoc/excluding-props.md:62:110    - Unknown word (moreprop)    -- owner' | 'otherprop' | 'moreprop'>`
docs/hoc/excluding-props.md:62:96     - Unknown word (otherprop)   -- keyof T, 'owner' | 'otherprop' | 'moreprop'>`
docs/hoc/excluding-props.md:63:166    - Unknown word (original)    -- names to `Pick` from the original props: `Pick<keyof T
docs/hoc/excluding-props.md:63:256    - Unknown word (filtered)    -- leaves you with the new, filtered props, e.g. `{ name
docs/hoc/excluding-props.md:7:106     - Unknown word (inject)     -- common issue. HOCs often inject props to premade components
docs/hoc/excluding-props.md:7:122     - Unknown word (premade)    -- often inject props to premade components. The problem
docs/hoc/excluding-props.md:7:228     - Unknown word (reflects)   -- exposing a type that reflects the reduced surface
docs/hoc/excluding-props.md:7:241     - Unknown word (reduced)    -- type that reflects the reduced surface area of props
docs/hoc/excluding-props.md:7:281     - Unknown word (manually)   -- area of props - without manually retyping the HOC every
docs/hoc/excluding-props.md:7:290     - Unknown word (retyping)   -- props - without manually retyping the HOC every time.
docs/hoc/excluding-props.md:7:348     - Unknown word (fortunately) -- involves some generics, fortunately with some helper utilities
docs/hoc/excluding-props.md:82:32     - Unknown word (coercion)    -- we need to do a type coercion here.
docs/hoc/excluding-props.md:90:11     - Unknown word (snippet)     -- The above snippet can be modified to create
docs/hoc/excluding-props.md:90:26     - Unknown word (modified)    -- above snippet can be modified to create a generic
docs/hoc/excluding-props.md:93:14     - Unknown word (Injected)    -- function withInjectedProps<U extends Record
docs/hoc/excluding-props.md:94:3      - Unknown word (injected)    -- injectedProps: U
docs/hoc/full-example.md:21:81     - Unknown word (subtracted)  -- for the component, but subtracted out for the consumers
docs/hoc/full-example.md:3:16      - Unknown word (Full)       -- sidebar_label: Full HOC Example
docs/hoc/full-example.md:43:10     - Unknown word (consuming)   -- Now when consuming the component you can
docs/hoc/full-example.md:47:58     - Unknown word (Also)        -- Button</MyButton> // Also valid
docs/hoc/full-example.md:56:3      - Unknown word (Wrapped)     -- WrappedComponent: React.ComponentType
docs/hoc/full-example.md:62:40     - Unknown word (calculated)  -- inner component. The calculated Props type here is the
docs/hoc/full-example.md:67:20     - Unknown word (afterwards)  -- // props comes afterwards so the can override
docs/hoc/full-example.md:67:63     - Unknown word (ones)        -- override the default ones.
docs/hoc/full-example.md:79:133    - Unknown word (being)       -- props of the component being passed in:
docs/hoc/full-example.md:79:74     - Unknown word (bases)       -- order component that bases some of its parameters
docs/hoc/full-example.md:7:251     - Unknown word (translation) -- walkthrough via a complete translation of the React docs in
docs/hoc/full-example.md:7:64      - Unknown word (pieces)     -- and paste. If certain pieces don't make sense for
docs/hoc/full-example.md:82:48     - Unknown word (they're)     -- a component so that they're always provided
docs/hoc/full-example.md:85:3      - Unknown word (injector)    -- injector: Pick<TProps, TInjectedKeys
docs/hoc/full-example.md:95:12     - Unknown word (reusability) -- For "true" reusability you should also consider
docs/hoc/full-example.md:95:329    - Unknown word (practice)    -- is a nice example in practice](https://gist.github
docs/hoc/full-example.md:95:414    - Unknown word (Oliver)      -- 8ca7915d010e) from @OliverJAsh (note - it still
docs/hoc/full-example.md:97:5      - Unknown word (Supporting)  -- ### Supporting `defaultProps` of Wrapped
docs/hoc/full-example.md:9:125     - Unknown word (continually) -- provider) and don't want to continually pass down the props
docs/hoc/index.md:16:12     - Unknown word (wrap)       -- - HOCs can wrap components to check
docs/hoc/index.md:18:34     - Unknown word (functionality) -- provide translation functionality to components.
docs/hoc/index.md:19:70     - Unknown word (modifying)     -- to components without modifying their core logic.
docs/hoc/index.md:21:47     - Unknown word (away)          -- example you can copy right away:
docs/hoc/index.md:44:31     - Unknown word (justify)       -- something special to justify the HoC.
docs/hoc/index.md:50:74     - Unknown word (memo)          -- WithSampleHoc : React.memo(WithSampleHoc, propsAreEqual
docs/hoc/index.md:58:11     - Unknown word (meets)         -- This code meets these criteria:
docs/hoc/index.md:58:23     - Unknown word (criteria)      -- This code meets these criteria:
docs/hoc/index.md:60:4      - Unknown word (Allows)        -- 1. Allows a component to return
docs/hoc/index.md:61:4      - Unknown word (Wraps)         -- 2. Wraps it in a memo unless
docs/hoc/index.md:62:16     - Unknown word (nested)        -- 3. Removes the nested component, so React
docs/hoc/index.md:62:4      - Unknown word (Removes)       -- 3. Removes the nested component
docs/hoc/index.md:63:4      - Unknown word (Indicates)     -- 4. Indicates with `displayName` in
docs/hoc/index.md:64:14     - Unknown word (Copies)        -- 5. Optional: Copies over static properties
docs/hoc/index.md:7:25      - Unknown word (compiles)   -- This HOC Cheatsheet** compiles all available knowledge
docs/hoc/index.md:9:109     - Unknown word (initially)  -- order-components.html) initially
docs/hoc/index.md:9:15      - Unknown word (closely)    -- - We will map closely to [the official docs
docs/hoc/react-hoc-docs.md:105:82    - Unknown word (Wraped)      -- will take the type of WrapedComponent and resolve
docs/hoc/react-hoc-docs.md:114:45    - Unknown word (bind)        -- = this.handleChange.bind(this);
docs/hoc/react-hoc-docs.md:131:25    - Unknown word (spreading)   -- // the typing for spreading this.props is... very
docs/hoc/react-hoc-docs.md:14:19     - Unknown word (referenced) -- <b>Misc variables referenced in the example below
docs/hoc/react-hoc-docs.md:154:25    - Unknown word (Mutate)      -- Docs Example: [Don’t Mutate the Original Component
docs/hoc/react-hoc-docs.md:156:16    - Unknown word (straightforward) -- This is pretty straightforward - make sure to assert
docs/hoc/react-hoc-docs.md:168:60    - Unknown word (mutating)        -- a container, without mutating it. Good!
docs/hoc/react-hoc-docs.md:175:24    - Unknown word (Unrelated)       -- Docs Example: [Pass Unrelated Props Through to the
docs/hoc/react-hoc-docs.md:179:19    - Unknown word (Maximizing)      -- ## Docs Example: [Maximizing Composability](https
docs/hoc/react-hoc-docs.md:183:69    - Unknown word (inspiration)     -- overloads you can take inspiration [from in the source
docs/hoc/react-hoc-docs.md:185:23    - Unknown word (mini)            -- Here we build our own mini `connect` to understand
docs/hoc/react-hoc-docs.md:18:5      - Unknown word (dummy)      -- /** dummy child components that
docs/hoc/react-hoc-docs.md:267:45    - Unknown word (Easy)            -- the Display Name for Easy Debugging](https://reactjs
docs/hoc/react-hoc-docs.md:293:16    - Unknown word (Caveats)         -- ## Unwritten: [Caveats section](https://reactjs
docs/hoc/react-hoc-docs.md:293:4     - Unknown word (Unwritten)       -- ## Unwritten: [Caveats section](https
docs/hoc/react-hoc-docs.md:295:18    - Unknown word (Inside)          -- - Don’t Use HOCs Inside the render Method
docs/hoc/react-hoc-docs.md:296:18    - Unknown word (Must)            -- - Static Methods Must Be Copied Over
docs/hoc/react-hoc-docs.md:296:26    - Unknown word (Copied)          -- Static Methods Must Be Copied Over
docs/hoc/react-hoc-docs.md:297:8     - Unknown word (Aren’t)          -- - Refs Aren’t Passed Through
docs/hoc/react-hoc-docs.md:36:5      - Unknown word (mock)       -- /** mock data source */
docs/hoc/react-hoc-docs.md:57:9      - Unknown word (Optionalize) -- // type Optionalize<T extends K, K> = Omit
docs/hoc/react-hoc-docs.md:59:5      - Unknown word (Rewritten)   -- /** Rewritten Components from the
docs/hoc/react-hoc-docs.md:7:151     - Unknown word (parallels)  -- offer direct TypeScript parallels.
docs/hoc/react-hoc-docs.md:85:29     - Unknown word (translated)  -- HOC from React Docs translated to TypeScript
docs/hoc/react-hoc-docs.md:96:98     - Unknown word (interfering) -- separately without it interfering with the inference of
docs/hoc/react-hoc-docs.md:98:22     - Unknown word (functor)     -- // selectData is a functor for T
docs/hoc/react-hoc-docs.md:9:38      - Unknown word (Cutting)    -- [Use HOCs For Cross-Cutting Concerns](https://reactjs
docs/migration/from-flow.md:10:13     - Unknown word (Studio's)   -- - [MemSQL's Studio's migration](https://davidgom
docs/migration/from-flow.md:10:7      - Unknown word (SQL's)      -- - [MemSQL's Studio's migration]
docs/migration/from-flow.md:11:11     - Unknown word (dirty)      -- - Quick-n-dirty [Flow to TS Codemod
docs/migration/from-flow.md:11:29     - Unknown word (Codemod)    -- n-dirty [Flow to TS Codemod](https://gist.github
docs/migration/from-flow.md:12:4      - Unknown word (Ecobee's)   -- - [Ecobee's brief experience](https
docs/migration/from-flow.md:13:20     - Unknown word (SLOC)       -- - [Migrating a 50K SLOC Flow + React Native
docs/migration/from-flow.md:14:11     - Unknown word (migrated)   -- - [How we migrated 400K+ lines of code
docs/migration/from-flow.md:14:67     - Unknown word (Factorial)  -- Flow to TypeScript at Factorial](https://labs.factorialhr
docs/migration/from-flow.md:6:169     - Unknown word (podcast)    -- migrating-to-typescript), [podcast discussion](https:/
docs/migration/from-flow.md:7:102     - Unknown word (braposo)    -- and other tips from @braposo](https://github.com
docs/migration/from-flow.md:7:194     - Unknown word (Travel)     -- issuecomment-458227322) at TravelRepublic)
docs/migration/from-flow.md:7:54      - Unknown word (saves)      -- doesn't work 100% but saves some time ([see this
docs/migration/from-flow.md:8:8       - Unknown word (Airtable's) -- - Try [Airtable's codemod](https://github
docs/migration/from-flow.md:9:45      - Unknown word (Flowtype)   -- Migration to TypeScript on a Flowtype codebase][entria] at
docs/migration/from-flow.md:9:75      - Unknown word (Entria)     -- codebase][entria] at Entria
docs/migration/from-js.md:106:86    - Unknown word (Benefits)   -- typing-in-javascript/ "Benefits of gradual strong typing
docs/migration/from-js.md:106:98    - Unknown word (gradual)    -- javascript/ "Benefits of gradual strong typing in JavaScript
docs/migration/from-js.md:10:13     - Unknown word (converter)  -- - [js-to-ts-converter](https://github.com
docs/migration/from-js.md:110:105   - Unknown word (Thoughts)   -- typescript-5e1a04288202 "Thoughts on migrating to TypeScript
docs/migration/from-js.md:11:7      - Unknown word (migrate)    -- - [TS-migrate](https://github.com
docs/migration/from-js.md:12:78     - Unknown word (generates)  -- gen` is a tool that generates TypeScript definition
docs/migration/from-js.md:16:4      - Unknown word (Manual)     -- ## Manual JS to TS Conversion
docs/migration/from-js.md:18:11     - Unknown word (Renaming)   -- the "Just Renaming" strategy
docs/migration/from-js.md:18:21     - Unknown word (strategy)   -- the "Just Renaming" strategy
docs/migration/from-js.md:20:38     - Unknown word (exec)       -- find src -name "*.js" -exec sh -c 'mv "$0" "${0
docs/migration/from-js.md:45:33     - Unknown word (egregious)  -- should throw up some egregious errors here which should
docs/migration/from-js.md:47:20     - Unknown word (swallow)    -- Once you are done, swallow the red pill by turning
docs/migration/from-js.md:47:36     - Unknown word (pill)       -- done, swallow the red pill by turning off implicit
docs/migration/from-js.md:47:44     - Unknown word (turning)    -- swallow the red pill by turning off implicit `any`'s
docs/migration/from-js.md:59:11     - Unknown word (raise)      -- This will raise a bunch of type errors
docs/migration/from-js.md:59:19     - Unknown word (bunch)      -- This will raise a bunch of type errors and you
docs/migration/from-js.md:61:81     - Unknown word (keep)       -- for `any` so you can keep track of what you need
docs/migration/from-js.md:64:11     - Unknown word (TYPEME)     -- type TODO_TYPEME = any;
docs/migration/from-js.md:70:1      - Unknown word (Gradually)  -- Gradually add [more `strict` mode
docs/migration/from-js.md:70:140    - Unknown word (Null)       -- noImplicitThis`, `strictNullChecks`, and so on until
docs/migration/from-js.md:88:4      - Unknown word (Adopting)   -- - [Adopting TypeScript at Scale
docs/migration/from-js.md:88:55     - Unknown word (story)      -- AirBnB's conversion story and strategy](https
docs/migration/from-js.md:8:69      - Unknown word (Codecademy) -- TypeStat) ([used by Codecademy](https://mobile.twitter
docs/migration/from-js.md:8:8       - Unknown word (Stat)       -- - [TypeStat](https://github.com
docs/migration/from-js.md:91:17     - Unknown word (EJECTED)    -- - [Migrating an EJECTED CRA app to TS](https
docs/migration/from-js.md:93:4      - Unknown word (Hootsuite)  -- - [Hootsuite][hootsuite]
docs/migration/from-js.md:94:11     - Unknown word (Journey)    -- - [Etsy's Journey to TypeScript](https
docs/migration/from-js.md:96:102    - Unknown word (Coherent)   -- story][coherentlabs] - Coherent Labs - using `grunt
docs/migration/from-js.md:96:147    - Unknown word (Kendo)      -- grunt-ts`, jQuery and Kendo UI
docs/migration/from-js.md:96:58     - Unknown word (survived)   -- project to TypeScript and survived to tell the story][coherentla
docs/migration/from-js.md:97:17     - Unknown word (adding)     -- - incrementally adding strict null checks https
docs/migration/index.md:102:12    - Unknown word (adoption)     -- - [Netflix adoption story](https://www.youtube
docs/migration/index.md:104:3     - Unknown word (Dropbox)      -- - Dropbox
docs/migration/index.md:105:20    - Unknown word (Loop)         -- - [Talk at React Loop](https://www.youtube
docs/migration/index.md:106:20    - Unknown word (Great)        -- - [Blogpost: The Great CoffeeScript to TypeScript
docs/migration/index.md:107:31    - Unknown word (succeeded)    -- How we failed, then succeeded, at migrating to TypeScript
docs/migration/index.md:107:4     - Unknown word (Heap)         -- - [Heap - How we failed, then
docs/migration/index.md:108:11    - Unknown word (Program)      -- - Execute Program (Gary Bernhardt) https
docs/migration/index.md:108:20    - Unknown word (Gary)         -- - Execute Program (Gary Bernhardt) https://www
docs/migration/index.md:108:25    - Unknown word (Bernhardt)    -- Execute Program (Gary Bernhardt) https://www.executeprogram
docs/migration/index.md:113:4     - Unknown word (Expo's)       -- - [Expo's migration (issue)](https
docs/migration/index.md:114:11    - Unknown word (Workbox)      -- - [Google Workbox migration](https://github
docs/migration/index.md:11:4      - Unknown word (Prerequisite) -- ## Prerequisite
docs/migration/index.md:123:69    - Unknown word (final)        -- history/pull/774) - [final](https://github.com
docs/migration/index.md:128:4     - Unknown word (Hasura)       -- - [Hasura Console](https://github
docs/migration/index.md:130:4     - Unknown word (Dojo)         -- - [Dojo 1 -> 2 migration](https
docs/migration/index.md:134:24    - Unknown word (deploys)      -- Number of production deploys doubled for [Hootsuite
docs/migration/index.md:134:32    - Unknown word (doubled)      -- of production deploys doubled for [Hootsuite][hootsuite
docs/migration/index.md:135:3     - Unknown word (Found)        -- - Found accidental globals for
docs/migration/index.md:135:9     - Unknown word (accidental)   -- - Found accidental globals for [Tiny][tiny
docs/migration/index.md:136:28    - Unknown word (calls)        -- Found incorrect function calls for [Tiny][tiny]
docs/migration/index.md:136:9     - Unknown word (incorrect)    -- - Found incorrect function calls for
docs/migration/index.md:137:22    - Unknown word (buggy)        -- Found rarely used, buggy code that was untested
docs/migration/index.md:137:42    - Unknown word (untested)     -- buggy code that was untested for [Tiny][tiny]
docs/migration/index.md:15:23     - Unknown word (approaches)   -- General Conversion approaches
docs/migration/index.md:19:13     - Unknown word (Majority)     -- - Level 1A: Majority JavaScript, increasingly
docs/migration/index.md:19:34     - Unknown word (increasingly) -- Majority JavaScript, increasingly strict TypeScript
docs/migration/index.md:21:20     - Unknown word (Experiences)  -- - use `allowJS` (Experiences: [clayallsop][clayallsop
docs/migration/index.md:21:34     - Unknown word (clayallsop)   -- allowJS` (Experiences: [clayallsop][clayallsop], [pleo
docs/migration/index.md:21:60     - Unknown word (pleo)         -- clayallsop][clayallsop], [pleo][pleo])
docs/migration/index.md:24:13     - Unknown word (loosest)      -- - use the loosest, bare minimum settings
docs/migration/index.md:24:22     - Unknown word (bare)         -- - use the loosest, bare minimum settings to
docs/migration/index.md:25:12     - Unknown word (Strict)       -- - Level 2: Strict TypeScript
docs/migration/index.md:29:22     - Unknown word (successful)   -- Misc tips/approaches successful companies have taken
docs/migration/index.md:33:149    - Unknown word (rewrite)      -- JavaScript code, you need to rewrite it. (Source: [Hootsuite
docs/migration/index.md:33:97     - Unknown word (requires)     -- existing code: If your task requires you to change JavaScript
docs/migration/index.md:42:127    - Unknown word (awesome's)    -- about this - but read [awesome's point of view](https
docs/migration/index.md:53:11     - Unknown word (maps)         -- // Source maps support ('inline-source
docs/migration/index.md:58:3      - Unknown word (loaders)      -- loaders: [{
docs/migration/index.md:78:13     - Unknown word (Studies)      -- ## Academic Studies of Migration
docs/migration/index.md:78:4      - Unknown word (Academic)     -- ## Academic Studies of Migration
docs/migration/index.md:7:113     - Unknown word (plain)      -- significant codebases from plain JS or Flow over to TypeScript
docs/migration/index.md:7:162     - Unknown word (attempt)    -- TypeScript. It makes no attempt to _convince_ people
docs/migration/index.md:7:17      - Unknown word (collates)   -- This Cheatsheet collates advice and utilities
docs/migration/index.md:7:211     - Unknown word (collect)    -- to do so, but we do collect what few statistics
docs/migration/index.md:7:62      - Unknown word (studies)    -- utilities from real case studies of teams moving significant
docs/migration/index.md:80:144    - Unknown word (gentle)       -- dont-know/). Please be gentle but also please share
docs/migration/index.md:80:185    - Unknown word (quality)      -- please share if you find quality research!
docs/migration/index.md:80:43     - Unknown word (desirable)    -- Software Engineering is desirable, but [extremely hard
docs/migration/index.md:80:69     - Unknown word (hard)         -- desirable, but [extremely hard](https://hillelwayne
docs/migration/index.md:80:9      - Unknown word (Empirical)    -- > Note: Empirical Software Engineering
docs/migration/index.md:82:28     - Unknown word (Quantifying)  -- Type or Not to Type: Quantifying Detectable Bugs in JavaScript
docs/migration/index.md:82:40     - Unknown word (Detectable)   -- to Type: Quantifying Detectable Bugs in JavaScript]
docs/migration/index.md:84:15     - Unknown word (finding)      -- > Our central finding is that both static
docs/migration/index.md:84:74     - Unknown word (percentage)   -- systems find an important percentage of public bugs: both
docs/migration/index.md:86:27     - Unknown word (impact)       -- Empirical study on the impact of static typing](https
docs/migration/index.md:88:121    - Unknown word (Large)        -- about/1-types/) and [A Large Scale Study of Programming
docs/migration/index.md:88:133    - Unknown word (Study)        -- and [A Large Scale Study of Programming Languages
docs/migration/index.md:88:142    - Unknown word (Programming)  -- Large Scale Study of Programming Languages
docs/migration/index.md:88:154    - Unknown word (Languages)    -- Study of Programming Languages
docs/migration/index.md:88:24     - Unknown word (Wrong)        -- see also [Things I was Wrong About: Types](https
docs/migration/index.md:89:10     - Unknown word (Quality)      -- and Code Quality in GitHub](https://web
docs/migration/index.md:91:19     - Unknown word (stories)      -- ## Misc migration stories by notable companies
docs/migration/index.md:91:30     - Unknown word (notable)      -- migration stories by notable companies and open source
docs/migration/index.md:94:98     - Unknown word (Podcast)      -- typescript-at-scale/) - [Podcast form](https://talkscript
docs/migration/index.md:96:19     - Unknown word (Bang)         -- - Airtable's [Big Bang Migration from Flow
docs/migration/index.md:99:4      - Unknown word (Tiny)         -- - [Tiny][tiny] - [Talk from
docs/migration/js-docs.md:12:15     - Unknown word (converted)  -- - `object` is converted to `any` for some reason
docs/migration/js-docs.md:13:72     - Unknown word (silently)   -- warning/error. TS just silently doesn't type annotate
docs/migration/js-docs.md:16:15     - Unknown word (Tayar)      -- (_thanks [Gil Tayar](https://twitter.com
docs/migration/js-docs.md:16:84     - Unknown word (Gleb)       -- 8919260221441) and [Gleb Bahmutov](https://twitter
docs/migration/js-docs.md:16:89     - Unknown word (Bahmutov)   -- 60221441) and [Gleb Bahmutov](https://twitter.com
docs/migration/js-docs.md:7:115     - Unknown word (crazy)      -- 9953927327744 (some crazy hack: https://twitter
docs/migration/js-docs.md:7:121     - Unknown word (hack)       -- 7327744 (some crazy hack: https://twitter.com
docs/migration/js-docs.md:8:33      - Unknown word (closure)    -- type check if using closure-compiler https://github
docs/react-types/ComponentProps.md:54:171    - Unknown word (determines) -- takes a `name` prop that determines what icon is shown.
docs/react-types/ComponentProps.md:54:187    - Unknown word (icon)       -- that determines what icon is shown. You need to
docs/react-types/ComponentProps.md:54:195    - Unknown word (shown)      -- determines what icon is shown. You need to use the
docs/react-types/ComponentProps.md:54:89     - Unknown word (Icon)       -- say you are using an `<Icon>` component from a component
docs/react-types/ComponentProps.md:5:31      - Unknown word (constructs) -- ComponentProps<ElementType>` constructs a type with all valid
docs/react-types/ComponentProps.md:60:34     - Unknown word (reflecting) -- this type is not really reflecting the actual set of icons
docs/react-types/ComponentProps.md:69:57     - Unknown word (accomplish) -- Keys>` utility type to accomplish the same thing:
docs/react-types/ComponentProps.md:9:1       - Unknown word (Prefer)     -- Prefer `ComponentPropsWithRef
docs/react-types/index.md:5:85      - Unknown word (alphabetical) -- useful. Here's a list in alphabetical order with links to
genReadme.js:12:62     - Unknown word (displayed)  -- generated content is displayed
genReadme.js:140:18    - Unknown word (encountered) -- `🚨 You've encountered a ${err.name} ➜ ${err
genReadme.js:141:49    - Unknown word (exist)       -- ensure the comments exist and are separated by
genReadme.js:141:63    - Unknown word (separated)   -- comments exist and are separated by a newline.`
genReadme.js:53:10     - Unknown word (Fences)     -- let oldFences = getFenceForSection
genReadme.js:77:14     - Unknown word (Rewrote)    -- `✅ 🗜️ Rewrote Table of Contents for
genReadme.js:84:16     - Unknown word (headings)   -- * Adjusts the headings in the given `markdown
genReadme.js:84:4      - Unknown word (Adjusts)    -- * Adjusts the headings in the
genReadme.js:85:4      - Unknown word (Headings)   -- * Headings must start in a line
genReadme.js:86:85     - Unknown word (recognized) -- the heading not being recognized.
website/README.md:17:95     - Unknown word (reflected)    -- window. Most changes are reflected live without having
website/README.md:25:110    - Unknown word (hosting)      -- any static contents hosting service.
website/README.md:3:74      - Unknown word (modern)     -- .docusaurus.io/), a modern static website generator
website/README.md:5:5       - Unknown word (Installation) -- ### Installation
website/docusaurus.config.js:102:23    - Unknown word (Introduction) -- label: "Introduction",
website/docusaurus.config.js:110:32    - Unknown word (Guides)       -- label: "Advanced Guides",
website/docusaurus.config.js:127:28    - Unknown word (Showcase)     -- label: "User Showcase",
website/docusaurus.config.js:153:178   - Unknown word (stars)        -- 592000" alt="GitHub stars" data-canonical-src
website/docusaurus.config.js:176:21    - Unknown word (UPXZ)         -- appId: "J65EL4UPXZ",
website/docusaurus.config.js:186:13    - Unknown word (useless)      -- // TODO useless user showcase page
website/docusaurus.config.js:186:26    - Unknown word (showcase)     -- / TODO useless user showcase page ?
website/docusaurus.config.js:18:3      - Unknown word (tagline)    -- tagline:
website/docusaurus.config.js:19:22     - Unknown word (experienced) -- "Cheatsheets for experienced React developers getting
website/docusaurus.config.js:1:9       - Unknown word (themes)     -- const { themes } = require("prism-react
website/docusaurus.config.js:35:14     - Unknown word (Sidebars)    -- // Sidebars file relative to website
website/docusaurus.config.js:36:43     - Unknown word (sidebars)    -- require.resolve("./sidebars.json"),
website/docusaurus.config.js:53:8      - Unknown word (Equivalent)  -- // Equivalent to `docsSideNavCollapsible
website/docusaurus.config.js:59:25     - Unknown word (dracula)     -- darkTheme: themes.dracula,
website/docusaurus.config.js:65:15     - Unknown word (Logo)        -- alt: "Logo",
website/docusaurus.config.js:9:5       - Unknown word (pinned)     -- pinned: true,
website/src/pages/help.js:19:15     - Unknown word (Browse)     -- title: "Browse Docs",
website/src/pages/help.js:35:15     - Unknown word (Stay)       -- title: "Stay up to date",
website/src/pages/help.js:42:40     - Unknown word (vert)       -- className="container margin-vert--xl">
website/src/pages/index.js:16:23     - Unknown word (hero)       -- <div className="hero text--center">
website/src/pages/index.js:20:33     - Unknown word (subtitle)   -- <p className="hero__subtitle">{siteConfig.tagline
website/src/pages/index.js:33:20     - Unknown word (Official)   -- Join Official Discord
website/src/pages/users.js:16:45     - Unknown word (folks)      -- project is used by many folks</p>
