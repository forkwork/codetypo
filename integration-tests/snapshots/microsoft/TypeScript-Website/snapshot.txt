
Repository: microsoft/TypeScript-Website
Url: "https://github.com/microsoft/TypeScript-Website.git"
Args: ["--config=../../../../config/repositories/microsoft/TypeScript-Website/codetypo.json","**/*.*"]
Lines:
 Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
 exit code: 1
-------------------------------------------
-------------------------------------------
CodeTypo: Files checked: 758, Issues found: 72349 in 716 files with 4 errors.
Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Errors:
README.md:106:3     - Unknown word (Jams)            -- # Jams them all into a single
README.md:124:142   - Unknown word (intermingled)    -- TypeScript-Handbook/) then intermingled with [microsoft/TypeScript
README.md:144:3     - Unknown word (Infra)           -- # Infra Packages
README.md:170:14    - Unknown word (welcomes)        -- This project welcomes contributions and suggestions
README.md:171:1     - Unknown word (Contributor)     -- Contributor License Agreement (CLA
README.md:178:61    - Unknown word (Conduct)         -- Open Source Code of Conduct](https://opensource
README.md:185:31    - Unknown word (Creative)        -- repository under the [Creative Commons Attribution
README.md:185:40    - Unknown word (Commons)         -- under the [Creative Commons Attribution 4.0 International
README.md:190:15    - Unknown word (trademarks)      -- may be either trademarks or registered trademarks
README.md:192:21    - Unknown word (trademark)       -- Microsoft's general trademark guidelines can be found
README.md:196:101   - Unknown word (patents)         -- respective copyrights, patents,
README.md:196:89    - Unknown word (copyrights)      -- under their respective copyrights, patents,
README.md:197:27    - Unknown word (implication)     -- trademarks, whether by implication, estoppel or otherwise
README.md:197:40    - Unknown word (estoppel)        -- whether by implication, estoppel or otherwise.
README.md:35:44     - Unknown word (troubleshooting) -- set up? [Consult the troubleshooting](./docs/Setup%20Troubleshooti
README.md:41:3      - Unknown word (Pushes)          -- - Pushes to the branch `v2` deploy
README.md:4:5       - Unknown word (Translations) -- - **Translations:** [microsoft/TypeScript
README.md:52:14     - Unknown word (Went)            -- - [Something Went Wrong](./docs/Something
README.md:56:64     - Unknown word (bumps)           -- manage package version bumps and releases.
README.md:71:55     - Unknown word (committed)       -- changeset` and must be committed.
README.md:8:159     - Unknown word (chocolatey)   -- install [watchman via chocolatey](https://chocolatey
README.md:90:54     - Unknown word (useable)         -- TypeScript Playground REPL, useable for all sites which
SECURITY.md:11:33     - Unknown word (vulnerabilities) -- not report security vulnerabilities through public GitHub
SECURITY.md:13:72     - Unknown word (MSRC)            -- Security Response Center (MSRC) at [https://msrc.microsoft
SECURITY.md:17:205    - Unknown word (msrc)            -- found at [microsoft.com/msrc](https://aka.ms/opensource
SECURITY.md:22:49     - Unknown word (manifestation)   -- file(s) related to the manifestation of the issue
SECURITY.md:26:25     - Unknown word (exploit)         -- Proof-of-concept or exploit code (if possible)
SECURITY.md:26:5      - Unknown word (Proof)           -- * Proof-of-concept or exploit
SECURITY.md:27:43     - Unknown word (attacker)        -- issue, including how an attacker might exploit the issue
SECURITY.md:29:31     - Unknown word (triage)          -- information will help us triage your report more quickly
SECURITY.md:31:135    - Unknown word (Bounty)          -- visit our [Microsoft Bug Bounty Program](https://aka
SECURITY.md:31:32     - Unknown word (bounty)          -- reporting for a bug bounty, more complete reports
SECURITY.md:39:37     - Unknown word (Coordinated)     -- follows the principle of [Coordinated Vulnerability Disclosure
SECURITY.md:39:49     - Unknown word (Vulnerability)   -- principle of [Coordinated Vulnerability Disclosure](https:/
SECURITY.md:39:63     - Unknown word (Disclosure)      -- Coordinated Vulnerability Disclosure](https://aka.ms/opensource
SECURITY.md:5:332     - Unknown word (Xamarin)    -- github.com/aspnet), [Xamarin](https://github.com
SECURITY.md:7:42      - Unknown word (vulnerability) -- have found a security vulnerability in any Microsoft-owned
SECURITY.md:9:23      - Unknown word (Issues)        -- Reporting Security Issues
SECURITY.md:9:4       - Unknown word (Reporting)     -- ## Reporting Security Issues
dangerfile.ts:2:9       - Unknown word (danger)     -- // pnpm danger pr https://github.com
dangerfile.ts:6:18      - Unknown word (deploys)    -- // Blocked on PR deploys, see CI.yml
dangerfile.ts:7:11      - Unknown word (lighthouse) -- // import lighthouse from "danger-plugin
docs/Converting Twoslash Code Samples.md:11:14     - Unknown word (tuple)      -- // Declare a tuple type
docs/Converting Twoslash Code Samples.md:11:4      - Unknown word (Declare)    -- // Declare a tuple type
docs/Converting Twoslash Code Samples.md:16:18     - Unknown word (incorrectly) -- // Initialize it incorrectly
docs/Converting Twoslash Code Samples.md:1:16      - Unknown word (Converting) -- ### A Guide to Converting to Twoslash
docs/Converting Twoslash Code Samples.md:1:7       - Unknown word (Guide)      -- ### A Guide to Converting to Twoslash
docs/Converting Twoslash Code Samples.md:35:105    - Unknown word (great)       -- compiler error, this is great. Let's fix that by telling
docs/Converting Twoslash Code Samples.md:35:122    - Unknown word (that)        -- is great. Let's fix that by telling TypeScript
docs/Converting Twoslash Code Samples.md:35:130    - Unknown word (telling)     -- great. Let's fix that by telling TypeScript this error
docs/Converting Twoslash Code Samples.md:35:16     - Unknown word (break)       -- This would now break the TypeScript website
docs/Converting Twoslash Code Samples.md:35:166    - Unknown word (purpose)     -- TypeScript this error is on purpose:
docs/Converting Twoslash Code Samples.md:35:6      - Unknown word (would)       -- This would now break the TypeScript
docs/Converting Twoslash Code Samples.md:3:12      - Unknown word (site)       -- To run the site with Twoslash enabled
docs/Converting Twoslash Code Samples.md:3:43      - Unknown word (need)       -- Twoslash enabled you need to use `pnpm start`
docs/Converting Twoslash Code Samples.md:50:105    - Unknown word (tell)        -- because the compiler will tell you that info, so let
docs/Converting Twoslash Code Samples.md:50:134    - Unknown word (trim)        -- that info, so let's trim those:
docs/Converting Twoslash Code Samples.md:50:139    - Unknown word (those)       -- info, so let's trim those:
docs/Converting Twoslash Code Samples.md:50:34     - Unknown word (here)        -- pass. The thing from here is that the comments
docs/Converting Twoslash Code Samples.md:50:64     - Unknown word (kind)        -- that the comments are kind redundant because the
docs/Converting Twoslash Code Samples.md:50:69     - Unknown word (redundant)   -- the comments are kind redundant because the compiler
docs/Converting Twoslash Code Samples.md:50:8      - Unknown word (will)        -- Now it will pass. The thing from
docs/Converting Twoslash Code Samples.md:5:176     - Unknown word (lets)       -- typescript-twoslash) which lets the compiler do more
docs/Converting Twoslash Code Samples.md:5:197     - Unknown word (more)       -- lets the compiler do more of the work.
docs/Converting Twoslash Code Samples.md:68:160    - Unknown word (where)       -- org/dev/bug-workbench) where you can test your code
docs/Converting Twoslash Code Samples.md:68:179    - Unknown word (your)        -- where you can test your code sample live and
docs/Converting Twoslash Code Samples.md:68:77     - Unknown word (lives)       -- documentation for twoslash lives inside the [bug workbench
docs/Converting Twoslash Code Samples.md:68:83     - Unknown word (inside)      -- umentation for twoslash lives inside the [bug workbench]
docs/Converting Twoslash Code Samples.md:68:99     - Unknown word (workbench)   -- lives inside the [bug workbench](https://www.typescriptlang
docs/Converting Twoslash Code Samples.md:7:38      - Unknown word (like)       -- a code sample looks like:
docs/Deprecating a page.md:11:1      - Unknown word (There)         -- There are two new attributes
docs/Deprecating a page.md:11:106    - Unknown word (deprecated)    -- to indicate a page is deprecated:
docs/Deprecating a page.md:11:87     - Unknown word (indicate)      -- the markdown doc to indicate a page is deprecated
docs/Deprecating a page.md:16:1      - Unknown word (layout)        -- layout: docs
docs/Deprecating a page.md:17:18     - Unknown word (handbook)      -- permalink: /docs/handbook/advanced-types.html
docs/Deprecating a page.md:18:28     - Unknown word (around)        -- oneline: Advanced concepts around types in TypeScript
docs/Deprecating a page.md:1:4       - Unknown word (Deprecating) -- ## Deprecating a documentation page
docs/Deprecating a page.md:22:1      - Unknown word (deprecation)   -- deprecation_redirects: [
docs/Deprecating a page.md:22:13     - Unknown word (redirects)     -- deprecation_redirects: [
docs/Deprecating a page.md:23:19     - Unknown word (differentiating) -- type-guards-and-differentiating-types, /docs/handbook
docs/Deprecating a page.md:23:59     - Unknown word (narrowing)       -- types, /docs/handbook/2/narrowing.html,
docs/Deprecating a page.md:23:8      - Unknown word (guards)        -- type-guards-and-differentiating
docs/Deprecating a page.md:24:61     - Unknown word (using)           -- handbook/2/narrowing.html#using-type-predicates,
docs/Deprecating a page.md:27:36     - Unknown word (everyday)        -- types, /docs/handbook/2/everyday-types.html#null-and
docs/Deprecating a page.md:27:56     - Unknown word (null)            -- everyday-types.html#null-and-undefined,
docs/Deprecating a page.md:27:65     - Unknown word (undefined)       -- types.html#null-and-undefined,
docs/Deprecating a page.md:31:3      - Unknown word (polymorphic)     -- polymorphic-this-types, /docs/handbook
docs/Deprecating a page.md:31:44     - Unknown word (classes)         -- types, /docs/handbook/2/classes.html,
docs/Deprecating a page.md:32:33     - Unknown word (indexed)         -- types, /docs/handbook/2/indexed-access-types.html,
docs/Deprecating a page.md:33:25     - Unknown word (signatures)      -- index-types-and-index-signatures, /docs/handbook/2/indexed
docs/Deprecating a page.md:34:3      - Unknown word (mapped)          -- mapped-types, /docs/handbook
docs/Deprecating a page.md:37:3      - Unknown word (distributive)    -- distributive-conditional-types,
docs/Deprecating a page.md:38:80     - Unknown word (inferring)       -- conditional-types.html#inferring-within-conditional-types
docs/Deprecating a page.md:38:90     - Unknown word (within)          -- types.html#inferring-within-conditional-types,
docs/Deprecating a page.md:39:3      - Unknown word (predefined)      -- predefined-conditional-types,
docs/Deprecating a page.md:39:48     - Unknown word (utility)         -- types, /docs/handbook/utility-types.html,
docs/Deprecating a page.md:3:17      - Unknown word (question)    -- Start with this question: are you deprecating
docs/Deprecating a page.md:3:175     - Unknown word (something)   -- Style/URI.html) but for something which intentionally
docs/Deprecating a page.md:3:191     - Unknown word (intentionally) -- for something which intentionally had a limited self-life
docs/Deprecating a page.md:3:219     - Unknown word (self)          -- intentionally had a limited self-life, that's OK.
docs/Deprecating a page.md:3:230     - Unknown word (that's)        -- a limited self-life, that's OK.
docs/Deprecating a page.md:3:35      - Unknown word (deprecating) -- this question: are you deprecating or deleting? Ideally
docs/Deprecating a page.md:3:50      - Unknown word (deleting)    -- are you deprecating or deleting? Ideally you're never
docs/Deprecating a page.md:3:60      - Unknown word (Ideally)     -- deprecating or deleting? Ideally you're never deleting
docs/Deprecating a page.md:3:75      - Unknown word (never)       -- deleting? Ideally you're never deleting because [Cool
docs/Deprecating a page.md:3:99      - Unknown word (Cool)        -- never deleting because [Cool URIs Don't Change](https
docs/Deprecating a page.md:43:107    - Unknown word (Utility)         -- in tandem with the [Utility Types](/docs/handbook
docs/Deprecating a page.md:43:167    - Unknown word (includes)        -- types.html) doc which includes types which are included
docs/Deprecating a page.md:43:17     - Unknown word (some)            -- This page lists some of the more advanced
docs/Deprecating a page.md:43:192    - Unknown word (included)        -- includes types which are included in TypeScript and available
docs/Deprecating a page.md:43:229    - Unknown word (globally)        -- TypeScript and available globally.
docs/Deprecating a page.md:43:43     - Unknown word (ways)            -- of the more advanced ways in which you can model
docs/Deprecating a page.md:43:90     - Unknown word (tandem)          -- model types, it works in tandem with the [Utility Types
docs/Deprecating a page.md:45:20     - Unknown word (Differentiating) -- ## Type Guards and Differentiating Types
docs/Deprecating a page.md:45:9      - Unknown word (Guards)          -- ## Type Guards and Differentiating
docs/Deprecating a page.md:47:17     - Unknown word (useful)          -- Union types are useful for modeling situations
docs/Deprecating a page.md:47:37     - Unknown word (situations)      -- useful for modeling situations when values can overlap
docs/Deprecating a page.md:47:64     - Unknown word (overlap)         -- situations when values can overlap in the types they can
docs/Deprecating a page.md:47:85     - Unknown word (they)            -- overlap in the types they can take on.
docs/Deprecating a page.md:47:94     - Unknown word (take)            -- in the types they can take on.
docs/Deprecating a page.md:48:1      - Unknown word (What)            -- What happens when we need
docs/Deprecating a page.md:48:30     - Unknown word (know)            -- happens when we need to know specifically whether
docs/Deprecating a page.md:48:35     - Unknown word (specifically)    -- when we need to know specifically whether we have a `Fish
docs/Deprecating a page.md:48:48     - Unknown word (whether)         -- to know specifically whether we have a `Fish`?
docs/Deprecating a page.md:48:59     - Unknown word (have)            -- specifically whether we have a `Fish`?
docs/Deprecating a page.md:48:6      - Unknown word (happens)         -- What happens when we need to know
docs/Deprecating a page.md:48:67     - Unknown word (Fish)            -- ecifically whether we have a `Fish`?
docs/Deprecating a page.md:51:1      - Unknown word (Including)       -- Including the `deprecated_by`
docs/Deprecating a page.md:51:106    - Unknown word (consider)        -- tell search engines to consider that other page the
docs/Deprecating a page.md:51:135    - Unknown word (canonical)       -- that other page the canonical source instead. That
docs/Deprecating a page.md:51:152    - Unknown word (instead)         -- the canonical source instead. That should be enough
docs/Deprecating a page.md:51:161    - Unknown word (That)            -- canonical source instead. That should be enough for
docs/Deprecating a page.md:51:176    - Unknown word (enough)          -- instead. That should be enough for simple pages.
docs/Deprecating a page.md:51:187    - Unknown word (simple)          -- should be enough for simple pages.
docs/Deprecating a page.md:51:49     - Unknown word (pages)           -- by` tag will mark the pages visually as deprecated
docs/Deprecating a page.md:51:55     - Unknown word (visually)        -- will mark the pages visually as deprecated, and tell
docs/Deprecating a page.md:53:147    - Unknown word (hashes)          -- make a map of query hashes to new pages.
docs/Deprecating a page.md:53:33     - Unknown word (linking)         -- page which people are linking to a lot, and you want
docs/Deprecating a page.md:53:68     - Unknown word (really)          -- lot, and you want to _really_ carry someone to their
docs/Deprecating a page.md:53:76     - Unknown word (carry)           -- you want to _really_ carry someone to their right
docs/Deprecating a page.md:53:82     - Unknown word (someone)         -- want to _really_ carry someone to their right location
docs/Deprecating a page.md:53:93     - Unknown word (their)           -- really_ carry someone to their right location then
docs/Deprecating a page.md:5:13      - Unknown word (Redirect)      -- ### Keep or Redirect?
docs/Deprecating a page.md:5:5       - Unknown word (Keep)          -- ### Keep or Redirect?
docs/Deprecating a page.md:61:186    - Unknown word (detects)         -- url at runtime if it detects a user has a matching
docs/Deprecating a page.md:61:207    - Unknown word (matching)        -- detects a user has a matching hash in the URL.
docs/Deprecating a page.md:61:39     - Unknown word (anchors)         -- all the of header's anchors, and that is the left
docs/Deprecating a page.md:61:69     - Unknown word (hand)            -- and that is the left hand side of your array couplets
docs/Deprecating a page.md:61:9      - Unknown word (print)           -- It will print out all the of header
docs/Deprecating a page.md:61:93     - Unknown word (couplets)        -- hand side of your array couplets. The site has client
docs/Deprecating a page.md:7:104     - Unknown word (setup)         -- and add the URI to [setupRedirects.ts](https:
docs/Deprecating a page.md:7:109     - Unknown word (Redirects)     -- add the URI to [setupRedirects.ts](https://github.com
docs/Deprecating a page.md:7:14      - Unknown word (want)          -- If you don't want the keep the content
docs/Deprecating a page.md:7:23      - Unknown word (keep)          -- If you don't want the keep the content at all,
docs/How i18n Works For Site Copy.md:11:39     - Unknown word (large)      -- "nav-item show-only-large"><IntlLink to="/docs
docs/How i18n Works For Site Copy.md:11:75     - Unknown word (intro)      -- IntlLink to="/docs/handbook/intro.html">{i("nav_handbook
docs/How i18n Works For Site Copy.md:13:39     - Unknown word (largest)    -- "nav-item show-only-largest"><IntlLink to="/play
docs/How i18n Works For Site Copy.md:13:63     - Unknown word (play)       -- largest"><IntlLink to="/play">{i("nav_playground
docs/How i18n Works For Site Copy.md:13:77     - Unknown word (playground) -- IntlLink to="/play">{i("nav_playground")}</IntlLink></li>
docs/How i18n Works For Site Copy.md:1:34      - Unknown word (Site)       -- The i18n Work in The Site?
docs/How i18n Works For Site Copy.md:1:8       - Unknown word (Does)       -- ## How Does The i18n Work in The
docs/How i18n Works For Site Copy.md:26:43     - Unknown word (effectively) -- Link> element, which is effectively an `<a>`, but that it
docs/How i18n Works For Site Copy.md:26:77     - Unknown word (knows)       -- an `<a>`, but that it knows the entire sitemap and
docs/How i18n Works For Site Copy.md:26:87     - Unknown word (entire)      -- but that it knows the entire sitemap and the current
docs/How i18n Works For Site Copy.md:26:94     - Unknown word (sitemap)     -- it knows the entire sitemap and the current locale
docs/How i18n Works For Site Copy.md:28:107    - Unknown word (possible)    -- the current locale if possible. You just write the
docs/How i18n Works For Site Copy.md:28:121    - Unknown word (just)        -- locale if possible. You just write the English URL
docs/How i18n Works For Site Copy.md:28:136    - Unknown word (English)     -- You just write the English URL.
docs/How i18n Works For Site Copy.md:28:41     - Unknown word (there)       -- will detect whether there is a version of the
docs/How i18n Works For Site Copy.md:28:6      - Unknown word (means)       -- This means the link will detect
docs/How i18n Works For Site Copy.md:34:29     - Unknown word (lead)        -- are a few parts which lead up to having an `i(
docs/How i18n Works For Site Copy.md:34:40     - Unknown word (having)      -- parts which lead up to having an `i("x")`. Let's go
docs/How i18n Works For Site Copy.md:36:28     - Unknown word (internationalized) -- site page which can be internationalized must be wrapped in an
docs/How i18n Works For Site Copy.md:36:46     - Unknown word (must)              -- be internationalized must be wrapped in an [`Intl
docs/How i18n Works For Site Copy.md:36:54     - Unknown word (wrapped)           -- internationalized must be wrapped in an [`Intl` component
docs/How i18n Works For Site Copy.md:38:239    - Unknown word (outer)             -- ts`. This sets up the outer context.
docs/How i18n Works For Site Copy.md:38:58     - Unknown word (uses)              -- based in the locale, it uses a dynamic require to
docs/How i18n Works For Site Copy.md:38:73     - Unknown word (require)           -- locale, it uses a dynamic require to [the `copy/`](https
docs/How i18n Works For Site Copy.md:3:17      - Unknown word (example)    -- Let's take some example code from inside the
docs/How i18n Works For Site Copy.md:43:19     - Unknown word (props)             -- export default (props: Props) => (
docs/How i18n Works For Site Copy.md:43:26     - Unknown word (Props)             -- export default (props: Props) => (
docs/How i18n Works For Site Copy.md:45:8      - Unknown word (Comm)              -- <Comm {...props} />
docs/How i18n Works For Site Copy.md:67:14     - Unknown word (wraps)             -- The second wraps the result of `useIntl
docs/How i18n Works For Site Copy.md:67:7      - Unknown word (second)            -- The second wraps the result of
docs/How i18n Works For Site Copy.md:67:92     - Unknown word (determine)         -- you use the types to determine the keys available in
docs/How i18n Works For Site Copy.md:9:29      - Unknown word (hide)       -- className="nav-item hide-small"><IntlLink to
docs/New TypeScript Version.md:111:15    - Unknown word (didn't)        -- # Validate it didn't break
docs/New TypeScript Version.md:116:3     - Unknown word (Shippit)       -- # Shippit
docs/New TypeScript Version.md:21:114    - Unknown word (broke)        -- of the website's code broke.
docs/New TypeScript Version.md:23:41     - Unknown word (modules)      -- twoslash cache: `rm node_modules/.cache/twoslash`.
docs/New TypeScript Version.md:25:11     - Unknown word (Handbook)     -- ##### New Handbook Docs
docs/New TypeScript Version.md:27:190    - Unknown word (languages)    -- copy). You can ignore languages other than `en`. The
docs/New TypeScript Version.md:27:206    - Unknown word (than)         -- ignore languages other than `en`. The folder structure
docs/New TypeScript Version.md:27:276    - Unknown word (bearing)      -- reference and has no bearing on the site navigation
docs/New TypeScript Version.md:27:331    - Unknown word (needs)        -- Each markdown document needs a header like:
docs/New TypeScript Version.md:27:5      - Unknown word (might)        -- You might have a new reference
docs/New TypeScript Version.md:34:23     - Unknown word (learning)     -- oneline: "Step one in learning TypeScript: The basic
docs/New TypeScript Version.md:38:52     - Unknown word (ready)        -- build. Once that file is ready, add it to the sidebar
docs/New TypeScript Version.md:38:73     - Unknown word (sidebar)      -- ready, add it to the sidebar via the file [`packages
docs/New TypeScript Version.md:3:102     - Unknown word (everything)   -- explanations, assuming everything compiles then it'll
docs/New TypeScript Version.md:3:113     - Unknown word (compiles)     -- assuming everything compiles then it'll probably
docs/New TypeScript Version.md:3:133     - Unknown word (probably)     -- compiles then it'll probably take about 15-30m.
docs/New TypeScript Version.md:3:147     - Unknown word (about)        -- it'll probably take about 15-30m.
docs/New TypeScript Version.md:3:62      - Unknown word (there's)    -- this looks long because there's a lot of explanations
docs/New TypeScript Version.md:3:79      - Unknown word (explanations) -- because there's a lot of explanations, assuming everything
docs/New TypeScript Version.md:3:93      - Unknown word (assuming)     -- lot of explanations, assuming everything compiles
docs/New TypeScript Version.md:42:15     - Unknown word (truth)        -- The source of truth for the JSON Schema
docs/New TypeScript Version.md:44:45     - Unknown word (handle)       -- that into our repo to handle new PRs sent to it in
docs/New TypeScript Version.md:44:60     - Unknown word (sent)         -- repo to handle new PRs sent to it in-between TS
docs/New TypeScript Version.md:44:85     - Unknown word (releases)     -- to it in-between TS releases, run: `node ./node_modules
docs/New TypeScript Version.md:48:1      - Unknown word (Updating)     -- Updating the version of TypeScript
docs/New TypeScript Version.md:48:155    - Unknown word (flag)         -- each missing compiler flag.
docs/New TypeScript Version.md:52:44     - Unknown word (flags)        -- for the new compiler flags. The build will crash
docs/New TypeScript Version.md:52:66     - Unknown word (crash)        -- flags. The build will crash and give you a command
docs/New TypeScript Version.md:52:76     - Unknown word (give)         -- build will crash and give you a command to run
docs/New TypeScript Version.md:54:223    - Unknown word (added)        -- there as it will be added by the site.
docs/New TypeScript Version.md:59:5      - Unknown word (Linking)      -- - Linking compiler versions
docs/New TypeScript Version.md:62:6      - Unknown word (Playground)   -- #### Playground
docs/New TypeScript Version.md:64:180    - Unknown word (shouldn't)     -- deploys.yml) - so you shouldn't have to do anything
docs/New TypeScript Version.md:64:19     - Unknown word (automatically) -- The tag should be automatically generated on a [daily
docs/New TypeScript Version.md:64:201    - Unknown word (anything)      -- shouldn't have to do anything
docs/New TypeScript Version.md:64:33     - Unknown word (generated)     -- should be automatically generated on a [daily basis](https
docs/New TypeScript Version.md:64:49     - Unknown word (daily)         -- automatically generated on a [daily basis](https://github
docs/New TypeScript Version.md:64:55     - Unknown word (basis)         -- generated on a [daily basis](https://github.com
docs/New TypeScript Version.md:70:108    - Unknown word (responses)     -- compiler errors or LSP responses in them.
docs/New TypeScript Version.md:70:121    - Unknown word (them)          -- or LSP responses in them.
docs/New TypeScript Version.md:71:80     - Unknown word (otherwise)     -- update all snapshots, otherwise use `pnpm run --filter
docs/New TypeScript Version.md:75:1      - Unknown word (Unless)        -- Unless something drastic has
docs/New TypeScript Version.md:75:18     - Unknown word (drastic)       -- Unless something drastic has change, you shouldn
docs/New TypeScript Version.md:75:77     - Unknown word (could)         -- to do anything. You could run through the playground
docs/New TypeScript Version.md:79:14     - Unknown word (Notes)         -- #### Release Notes
docs/New TypeScript Version.md:81:1      - Unknown word (Grab)          -- Grab the markdown from the
docs/New TypeScript Version.md:81:159    - Unknown word (notes)         -- documentation/copy/en/release-notes/TypeScript 3.9.md`
docs/New TypeScript Version.md:81:34     - Unknown word (posts)         -- markdown from the [blog posts repo](https://github
docs/New TypeScript Version.md:83:29     - Unknown word (previous)      -- the header info from a previous release notes, and add
docs/New TypeScript Version.md:98:1      - Unknown word (Using)         -- Using the GitHub CLI, from
docs/New TypeScript Version.md:9:102     - Unknown word (overrides)    -- package.json` inside the `overrides` field. It's always
docs/New TypeScript Version.md:9:125     - Unknown word (always)       -- overrides` field. It's always a specific version,
docs/New TypeScript Version.md:9:58      - Unknown word (find)         -- TypeScript which you can find in the root `package
docs/README.md:3:131     - Unknown word (back)       -- You can find those back in the [packages folder
docs/Setup Troubleshooting.md:11:1      - Unknown word (Though)          -- Though, for _a lot_ of changes
docs/Setup Troubleshooting.md:11:202    - Unknown word (gatsby)          -- typescriptlang-org` (the gatsby website).
docs/Setup Troubleshooting.md:11:57     - Unknown word (optional)        -- the site: Watchman is optional. All the watchman script
docs/Setup Troubleshooting.md:11:91     - Unknown word (does)            -- the watchman script does is run `pnpm run --filter
docs/Setup Troubleshooting.md:1:29      - Unknown word (Troubleshooting) -- Getting this Repo Set Up Troubleshooting
docs/Setup Troubleshooting.md:1:4       - Unknown word (Getting)    -- ## Getting this Repo Set Up Troubleshoot
docs/Setup Troubleshooting.md:3:6       - Unknown word (Module)          -- #### Module `x` is not built
docs/Setup Troubleshooting.md:5:1       - Unknown word (Sometimes)       -- Sometimes, and it's not been tracked
docs/Setup Troubleshooting.md:5:100     - Unknown word (though)          -- site aren't built even though it says they are. In
docs/Setup Troubleshooting.md:5:110     - Unknown word (says)            -- built even though it says they are. In those cases
docs/Setup Troubleshooting.md:5:134     - Unknown word (cases)           -- says they are. In those cases, re-run `pnpm bootstrap
docs/Setup Troubleshooting.md:5:202     - Unknown word (internal)        -- to re-build all the internal site deps.
docs/Setup Troubleshooting.md:5:25      - Unknown word (been)            -- Sometimes, and it's not been tracked down exactly
docs/Setup Troubleshooting.md:5:30      - Unknown word (tracked)         -- Sometimes, and it's not been tracked down exactly, some dependenci
docs/Setup Troubleshooting.md:5:43      - Unknown word (exactly)         -- not been tracked down exactly, some dependencies of
docs/Setup Troubleshooting.md:5:82      - Unknown word (aren't)          -- dependencies of the site aren't built even though it
docs/Setup Troubleshooting.md:5:95      - Unknown word (even)            -- the site aren't built even though it says they
docs/Setup Troubleshooting.md:7:16      - Unknown word (Watchman)        -- #### Windows + Watchman
docs/Setup Troubleshooting.md:9:25      - Unknown word (watchman)        -- Windows support for watchman is a bit meh. It's not
docs/Setup Troubleshooting.md:9:57      - Unknown word (likely)          -- a bit meh. It's not likely to get better, given
docs/Setup Troubleshooting.md:9:71      - Unknown word (better)          -- s not likely to get better, given how well WSL
docs/Setup Troubleshooting.md:9:79      - Unknown word (given)           -- likely to get better, given how well WSL works now
docs/Something Went Wrong.md:11:5      - Unknown word (Places)     -- ### Places to read logs
docs/Something Went Wrong.md:13:45     - Unknown word (places)     -- on App Service, the places where you can find info
docs/Something Went Wrong.md:13:7      - Unknown word (currently)  -- We're currently running on App Service
docs/Something Went Wrong.md:15:3      - Unknown word (Look)       -- - Look at the [deploy logs
docs/Something Went Wrong.md:17:284    - Unknown word (Generally)  -- 7b7bb25/logStream). Generally speaking, they probably
docs/Something Went Wrong.md:17:294    - Unknown word (speaking)   -- logStream). Generally speaking, they probably aren
docs/Something Went Wrong.md:17:355    - Unknown word (hammered)   -- and would probably get hammered to the 35MB per day
docs/Something Went Wrong.md:17:384    - Unknown word (pretty)     -- to the 35MB per day pretty quickly anyway.
docs/Something Went Wrong.md:17:391    - Unknown word (quickly)    -- 35MB per day pretty quickly anyway.
docs/Something Went Wrong.md:17:399    - Unknown word (anyway)     -- per day pretty quickly anyway.
docs/Something Went Wrong.md:1:14      - Unknown word (look)       -- ### Where to look if something goes wrong
docs/Something Went Wrong.md:1:32      - Unknown word (goes)       -- to look if something goes wrong
docs/Something Went Wrong.md:1:37      - Unknown word (wrong)      -- look if something goes wrong
docs/Something Went Wrong.md:1:5       - Unknown word (Where)      -- ### Where to look if something
docs/Something Went Wrong.md:21:21     - Unknown word (train)      -- The build to deploy train normally looks like
docs/Something Went Wrong.md:21:27     - Unknown word (normally)   -- build to deploy train normally looks like this:
docs/Something Went Wrong.md:23:15     - Unknown word (gets)       -- - `v2` branch gets pushed
docs/Something Went Wrong.md:23:20     - Unknown word (pushed)     -- - `v2` branch gets pushed
docs/Something Went Wrong.md:26:24     - Unknown word (production) -- You can deploy `v2` to production anytime via the ["Run
docs/Something Went Wrong.md:26:35     - Unknown word (anytime)    -- deploy `v2` to production anytime via the ["Run workflow
docs/Something Went Wrong.md:28:156    - Unknown word (Here's)     -- static/Web.config). [Here's a reference on the format
docs/Something Went Wrong.md:28:22     - Unknown word (configured) -- App Service apps are configured by [`Web.config`](https
docs/Something Went Wrong.md:28:255    - Unknown word (seen)       -- l2LMpNh9hAEEE). I've seen files (`*.json` & `
docs/Something Went Wrong.md:28:325    - Unknown word (were)       -- the site because they were not in the config.
docs/Something Went Wrong.md:3:32      - Unknown word (today)      -- is a static site, but today it's still being hosted
docs/Something Went Wrong.md:3:43      - Unknown word (still)      -- site, but today it's still being hosted on a server
docs/Something Went Wrong.md:3:49      - Unknown word (being)      -- but today it's still being hosted on a server we
docs/Something Went Wrong.md:5:121     - Unknown word (wasn't)     -- was because a deploy wasn't atomically updated.
docs/Something Went Wrong.md:5:128     - Unknown word (atomically) -- because a deploy wasn't atomically updated. Let's look
docs/Something Went Wrong.md:5:139     - Unknown word (updated)    -- deploy wasn't atomically updated. Let's look at how you
docs/Something Went Wrong.md:5:29      - Unknown word (outage)     -- last time [there was an outage](https://github.com
docs/Something Went Wrong.md:7:16      - Unknown word (Need)       -- ### Access You Need
docs/Something Went Wrong.md:9:56      - Unknown word (Facing)     -- TypeScript - Public Facing Services"](https://ms
docs/User Flows.md:10:22     - Unknown word (doing)         -- On a desktop, you're doing deeper learning usually
docs/User Flows.md:10:28     - Unknown word (deeper)        -- desktop, you're doing deeper learning usually, with
docs/User Flows.md:10:44     - Unknown word (usually)       -- doing deeper learning usually, with a specific goal
docs/User Flows.md:10:69     - Unknown word (goal)          -- usually, with a specific goal in mind.
docs/User Flows.md:10:77     - Unknown word (mind)          -- with a specific goal in mind.
docs/User Flows.md:12:1      - Unknown word (Four)          -- Four main user goals:
docs/User Flows.md:12:16     - Unknown word (goals)         -- Four main user goals:
docs/User Flows.md:14:14     - Unknown word (what)          -- - Understand what TypeScript is
docs/User Flows.md:14:3      - Unknown word (Understand)    -- - Understand what TypeScript is
docs/User Flows.md:17:3      - Unknown word (Learn)         -- - Learn the language
docs/User Flows.md:1:45      - Unknown word (throughout) -- we structure linking throughout the docs.
docs/User Flows.md:1:5       - Unknown word (thinking)   -- The thinking about how we structure
docs/User Flows.md:28:23     - Unknown word (Locally)       -- Homepage -> Install Locally -> Download
docs/User Flows.md:33:34     - Unknown word (Tutorials)     -- Install Locally -> Tutorials -> Install -> Playground
docs/User Flows.md:42:155    - Unknown word (come)          -- know that you'd want to come back with an IDE)
docs/User Flows.md:42:26     - Unknown word (experience)    -- mobile the first user experience is oriented towards
docs/User Flows.md:42:40     - Unknown word (oriented)      -- first user experience is oriented towards shallow learning
docs/User Flows.md:42:49     - Unknown word (towards)       -- experience is oriented towards shallow learning ('what
docs/User Flows.md:42:57     - Unknown word (shallow)       -- is oriented towards shallow learning ('what is this
docs/User Flows.md:59:3      - Unknown word (Existing)      -- # Existing User
docs/User Flows.md:5:101     - Unknown word (programmer)  -- programming to an experienced programmer who is interested in
docs/User Flows.md:5:119     - Unknown word (interested)  -- experienced programmer who is interested in understanding a new
docs/User Flows.md:5:133     - Unknown word (understanding) -- who is interested in understanding a new language.
docs/User Flows.md:5:35      - Unknown word (covers)     -- range of people, but it covers someone who has just
docs/User Flows.md:5:63      - Unknown word (started)    -- someone who has just started programming to an experienced
docs/User Flows.md:5:71      - Unknown word (programming) -- who has just started programming to an experienced programmer
docs/User Flows.md:5:89      - Unknown word (experienced) -- started programming to an experienced programmer who is interested
docs/User Flows.md:61:103    - Unknown word (knowledge)     -- in their TypeScript knowledge and are coming back
docs/User Flows.md:61:11     - Unknown word (narrower)      -- This is a narrower range of people, representing
docs/User Flows.md:61:121    - Unknown word (coming)        -- TypeScript knowledge and are coming back to the website
docs/User Flows.md:61:37     - Unknown word (representing)  -- narrower range of people, representing someone with a bit of
docs/User Flows.md:61:72     - Unknown word (confidence)    -- someone with a bit of confidence in their TypeScript
docs/User Flows.md:67:3      - Unknown word (Improve)       -- - Improve my knowledge on TypeScript
docs/User Flows.md:68:44     - Unknown word (looking)       -- bit of information I'm looking for
docs/User Flows.md:6:37      - Unknown word (exploratory)   -- TypeScript website is exploratory.
docs/User Flows.md:76:6      - Unknown word (Finding)       -- #### Finding Information
docs/User Flows.md:80:30     - Unknown word (handled)       -- via search engines (handled by SEO, titles, headers
docs/User Flows.md:80:46     - Unknown word (titles)        -- engines (handled by SEO, titles, headers, head metadata
packages/ata/README.md:14:5      - Unknown word (received)      -- receivedFile: (code: string,
packages/ata/README.md:1:31      - Unknown word (Acquisition) -- TypeScript - Automatic Type Acquisition
packages/ata/README.md:23:5      - Unknown word (finished)      -- finished: vfs => {
packages/ata/README.md:24:24     - Unknown word (done)          -- console.log("ATA done", vfs)
packages/ata/README.md:33:176    - Unknown word (going)         -- triggered when some work is going to happen, so you can
packages/ata/README.md:33:185    - Unknown word (happen)        -- some work is going to happen, so you can use those
packages/ata/README.md:33:265    - Unknown word (every)         -- progress` is triggered every 5 downloads.
packages/ata/README.md:33:273    - Unknown word (downloads)     -- is triggered every 5 downloads.
packages/ata/README.md:33:31     - Unknown word (convenient)    -- call `ata` when it is convenient to you, it will not
packages/ata/README.md:33:62     - Unknown word (grab)          -- to you, it will not grab the same dependencies
packages/ata/README.md:33:71     - Unknown word (same)          -- it will not grab the same dependencies twice.
packages/ata/README.md:33:89     - Unknown word (twice)         -- the same dependencies twice. The callbacks for
packages/ata/README.md:33:9      - Unknown word (call)          -- You can call `ata` when it is convenient
packages/ata/README.md:3:101     - Unknown word (provided)      -- file. Relies on API's provided by [jsdelivr](https
packages/ata/README.md:3:3       - Unknown word (dependency)  -- A dependency for downloading `*.d
packages/ata/README.md:3:45      - Unknown word (corresponding) -- downloading `*.d.ts` files corresponding to a Node.js source
packages/ata/README.md:3:85      - Unknown word (Relies)        -- Node.js source file. Relies on API's provided by
packages/ata/README.md:43:5      - Unknown word (library)       -- The library will
packages/ata/README.md:45:16     - Unknown word (latest)        -- - Look for the latest npm module of "danger
packages/ata/README.md:45:27     - Unknown word (module)        -- Look for the latest npm module of "danger", then get
packages/ata/README.md:48:34     - Unknown word (these)         -- `.d.ts` and look at these modules from usage:
packages/ata/README.md:49:25     - Unknown word (sees)          -- `"node-fetch"` - it sees that "node-fetch" has
packages/ata/README.md:50:42     - Unknown word (ships)         -- it sees that command ships its own types
packages/ata/README.md:52:21     - Unknown word (also)          -- - `"gitlab"` - it also sees
packages/ata/README.md:54:74     - Unknown word (prefer)        -- of the `vfs` if you prefer to set them in bulk
packages/ata/README.md:56:5      - Unknown word (Niceties)      -- ### Niceties
packages/ata/README.md:64:43     - Unknown word (against)       -- something you want, I'm not against a flag to disable it
packages/ata/README.md:8:57      - Unknown word (callbacks)     -- ATA with a series of callbacks
packages/ata/jest.config.cjs:8:9       - Unknown word (loaders)    -- loaders: {
packages/ata/src/apis.ts:17:17     - Unknown word (Filetree)   -- export const getFiletreeForModuleWithVersion
packages/ata/src/apis.ts:41:11     - Unknown word (comes)      -- // file comes with a prefix /
packages/ata/src/apis.ts:43:20     - Unknown word (fetcher)    -- const f = config.fetcher || fetch
packages/ata/src/edgeCases.ts:1:5       - Unknown word (Converts)   -- /** Converts some of the known global
packages/ata/src/edgeCases.ts:5:20      - Unknown word (Mods)       -- const builtInNodeMods = [
packages/ata/src/index.ts:13:33     - Unknown word (called)     -- callback which gets called when ATA decides a file
packages/ata/src/index.ts:13:49     - Unknown word (decides)    -- gets called when ATA decides a file needs to be written
packages/ata/src/index.ts:158:17    - Unknown word (potential)  -- * Pull out any potential references to other
packages/ata/src/index.ts:158:66    - Unknown word (relatives)  -- other modules (including relatives) with their
packages/ata/src/index.ts:159:19    - Unknown word (strat)      -- * npm versioning strat too if someone opts
packages/ata/src/index.ts:159:52    - Unknown word (different)  -- someone opts into a different version via an inline
packages/ata/src/index.ts:16:37     - Unknown word (estimated)  -- downloaded: number, estimatedTotal: number) => void
packages/ata/src/index.ts:198:26    - Unknown word (because)    -- Drop relative paths because we're getting all the
packages/ata/src/index.ts:19:20     - Unknown word (indicating) -- /** A callback indicating that ATA actually has
packages/ata/src/index.ts:19:40     - Unknown word (actually)   -- indicating that ATA actually has work to do */
packages/ata/src/index.ts:203:46    - Unknown word (filetree)   -- work in getting the filetree based on how people
packages/ata/src/index.ts:203:75    - Unknown word (think)      -- based on how people think about npm names and
packages/ata/src/index.ts:211:24    - Unknown word (least)      -- / I think having at least 2 dots is a reasonable
packages/ata/src/index.ts:211:32    - Unknown word (dots)       -- think having at least 2 dots is a reasonable approx
packages/ata/src/index.ts:211:42    - Unknown word (reasonable) -- at least 2 dots is a reasonable approx for being a semver
packages/ata/src/index.ts:211:53    - Unknown word (approx)     -- dots is a reasonable approx for being a semver and
packages/ata/src/index.ts:220:100   - Unknown word (typo)       -- moduleName} - possible typo?`,
packages/ata/src/index.ts:262:4     - Unknown word (Taken)      -- // Taken from dts-gen: https
packages/ata/src/index.ts:266:24    - Unknown word (converted)  -- // which should be converted to   bla__foo
packages/ata/src/index.ts:26:7      - Unknown word (Your)       -- /** Your local copy of typescript
packages/ata/src/index.ts:42:4      - Unknown word (basically)  -- * basically exported for tests and
packages/ata/src/index.ts:42:47     - Unknown word (considered) -- tests and should be considered
packages/ata/src/index.ts:69:36     - Unknown word (gives)      -- the module trees which gives us a list of files to
packages/ata/src/index.ts:73:48     - Unknown word (directly)   -- modules which we can grab directly
packages/ata/src/index.ts:73:8      - Unknown word (These)      -- // These are the modules which
packages/ata/src/index.ts:77:18     - Unknown word (ones)       -- // These are ones we need to look on DT
packages/ata/tests/ata.spec.ts:11:27     - Unknown word (asda)       -- const code = "import {asda} from '123'"
packages/ata/tests/ata.spec.ts:21:11     - Unknown word (ignores)    -- describe("ignores lib references", ()
packages/ata/tests/ata.spec.ts:5:7       - Unknown word (extracts)   -- it("extracts imports", () => {
packages/ata/tests/edgeCases.spec.ts:12:15     - Unknown word (mandatorily) -- it("handles mandatorily-prefixed node: identifiers
packages/ata/tests/edgeCases.spec.ts:12:27     - Unknown word (prefixed)    -- handles mandatorily-prefixed node: identifiers",
packages/ata/tests/edgeCases.spec.ts:17:7      - Unknown word (strips)      -- it("strips module filepaths",
packages/ata/tests/edgeCases.spec.ts:4:28      - Unknown word (identifiers) -- gives node for known identifiers", () => {
packages/ata/tests/edgeCases.spec.ts:8:19      - Unknown word (weird)       -- it("handles the weird node: prefix", () =
packages/ata/tests/edgeCases.spec.ts:8:7       - Unknown word (handles)     -- it("handles the weird node: prefix
packages/community-meta/README.md:10:14     - Unknown word (aims)         -- Each example aims to cover one or two
packages/community-meta/README.md:10:22     - Unknown word (cover)        -- Each example aims to cover one or two specific
packages/community-meta/README.md:11:1      - Unknown word (either)       -- either how JavaScript works
packages/community-meta/README.md:14:24     - Unknown word (assumptions)  -- example should make assumptions that the reader is in
packages/community-meta/README.md:15:1      - Unknown word (monaco)       -- monaco/IDE-like environment
packages/community-meta/README.md:16:4      - Unknown word (provide)      -- to provide extra analysis. As well
packages/community-meta/README.md:16:47     - Unknown word (fluency)      -- As well as a minor fluency in
packages/community-meta/README.md:19:31     - Unknown word (stone)        -- examples are not set in stone, and we're open to new
packages/community-meta/README.md:1:14      - Unknown word (Example)    -- # TypeScript Example Code
packages/community-meta/README.md:20:1      - Unknown word (ideas)        -- ideas. If you'd like to help
packages/community-meta/README.md:20:25     - Unknown word (help)         -- ideas. If you'd like to help out and speak more than
packages/community-meta/README.md:20:38     - Unknown word (speak)        -- like to help out and speak more than one
packages/community-meta/README.md:21:16     - Unknown word (love)         -- language, we'd love to see translations
packages/community-meta/README.md:21:28     - Unknown word (translations) -- language, we'd love to see translations.
packages/community-meta/README.md:23:4      - Unknown word (Adding)       -- ## Adding a new example section
packages/community-meta/README.md:25:24     - Unknown word (english)      -- Create a folder in the english section of the [`copy
packages/community-meta/README.md:29:13     - Unknown word (localization) -- ## Adding a localization
packages/community-meta/README.md:31:5      - Unknown word (localizations) -- All localizations live inside the `copy
packages/community-meta/README.md:34:28     - Unknown word (copying)       -- language is created by copying over an english example
packages/community-meta/README.md:34:89     - Unknown word (translating)   -- same path, and then translating it
packages/community-meta/README.md:35:20     - Unknown word (copied)        -- - Any examples not copied over fall back to the
packages/community-meta/README.md:35:32     - Unknown word (fall)          -- examples not copied over fall back to the english
packages/community-meta/README.md:38:1      - Unknown word (Languages)     -- Languages are compiled to TOC
packages/community-meta/README.md:38:15     - Unknown word (compiled)      -- Languages are compiled to TOC JSON files in
packages/community-meta/README.md:3:29      - Unknown word (found)      -- English examples can be found in [`en/`](en/).
packages/community-meta/README.md:42:46     - Unknown word (contains)      -- contents JSON file which contains
packages/community-meta/README.md:43:35     - Unknown word (hierarchy)     -- useful metadata about the hierarchy and sort
packages/community-meta/README.md:46:48     - Unknown word (translation)   -- need to create this per translation
packages/community-meta/README.md:7:29      - Unknown word (hyperlinking) -- samples are built for hyperlinking between each-other
packages/community-meta/scripts/generateRichMeetupData.js:21:13     - Unknown word (Deets)      -- let meetupDeets = []
packages/community-meta/scripts/generateRichMeetupData.js:21:7      - Unknown word (meetup)     -- let meetupDeets = []
packages/community-meta/scripts/generateRichMeetupData.js:22:16     - Unknown word (Looking)    -- console.log("Looking at meetups: ")
packages/community-meta/scripts/generateRichMeetupData.js:37:18     - Unknown word (upcoming)   -- // const upcomingEvent = ical.events[
packages/community-meta/scripts/generateRichMeetupData.js:3:29      - Unknown word (meetups)    -- Given that COVID dropped meetups, lets disable this
packages/community-meta/scripts/generateRichMeetupData.js:4:25      - Unknown word (again)      -- until things pick up again in 2021
packages/community-meta/scripts/generateRichMeetupData.js:54:52     - Unknown word (term)       -- assume meetup.com's long term health, and it's rss
packages/community-meta/scripts/generateRichMeetupData.js:68:16     - Unknown word (filtered)   -- // let filteredRichText = richDescription
packages/community-meta/scripts/generateRichMeetupData.js:93:67     - Unknown word (Meetup)     -- throw new Error("\n\nMeetup Deets was not the same
packages/community-meta/scripts/meetups.js:100:24    - Unknown word (Brazil)       -- title: "TypeScript Brazil Meetup",
packages/community-meta/scripts/meetups.js:103:13    - Unknown word (brazil)       -- image: "brazil-ts.jpg",
packages/community-meta/scripts/meetups.js:113:20    - Unknown word (Asia)         -- continentish: "Asia"
packages/community-meta/scripts/meetups.js:131:13    - Unknown word (Wroclaw)      -- title: "Wroclaw TypeScript",
packages/community-meta/scripts/meetups.js:135:13    - Unknown word (wroclaw)      -- image: "wroclaw-ts.jpg",
packages/community-meta/scripts/meetups.js:27:31     - Unknown word (Club)       -- "Boston TypeScript Club",
packages/community-meta/scripts/meetups.js:29:23     - Unknown word (club)       -- image: "boston-ts-club.png",
packages/community-meta/scripts/meetups.js:31:5      - Unknown word (continentish) -- continentish: "North America"
packages/community-meta/scripts/meetups.js:38:20     - Unknown word (Europe)       -- continentish: "Europe"
packages/community-meta/scripts/meetups.js:41:13     - Unknown word (Krakow)       -- title: "Krakow TypeScript User Group
packages/community-meta/scripts/meetups.js:63:13     - Unknown word (Seattle)      -- title: "Seattle TypeScript",
packages/community-meta/scripts/meetups.js:65:13     - Unknown word (seattle)      -- image: "seattle.jpg",
packages/community-meta/scripts/meetups.js:78:17     - Unknown word (Francisco)    -- title: "San Francisco TypeScript Meetup",
packages/community-meta/scripts/meetups.js:80:17     - Unknown word (fran)         -- image: "san-fran-ts.jpg",
packages/create-typescript-playground-plugin/README.md:10:49     - Unknown word (That's)     -- and see the new tab. That's your plugin up and running
packages/create-typescript-playground-plugin/README.md:12:131    - Unknown word (mode)       -- plugin. The plugin in dev mode will always become forefront
packages/create-typescript-playground-plugin/README.md:12:148    - Unknown word (become)     -- dev mode will always become forefront when connected
packages/create-typescript-playground-plugin/README.md:12:155    - Unknown word (forefront)  -- mode will always become forefront when connected, so you
packages/create-typescript-playground-plugin/README.md:12:19     - Unknown word (pieces)     -- <p>That's all the pieces working in tandem, now
packages/create-typescript-playground-plugin/README.md:12:218    - Unknown word (clicks)     -- load without a lot off clicks. To understand the template
packages/create-typescript-playground-plugin/README.md:12:229    - Unknown word (understand) -- a lot off clicks. To understand the template's technology
packages/create-typescript-playground-plugin/README.md:14:5      - Unknown word (Alternatives) -- <h2>Alternatives</h2>
packages/create-typescript-playground-plugin/README.md:15:110    - Unknown word (libraries)    -- with well-known view libraries:</p>
packages/create-typescript-playground-plugin/README.md:20:4      - Unknown word (They)         -- <p>They have their own up-to
packages/create-typescript-playground-plugin/README.md:3:16      - Unknown word (creating)   -- A template for creating new plugins for the
packages/create-typescript-playground-plugin/README.md:5:11      - Unknown word (Tutorial)   -- <h2>Quick Tutorial</h2>
packages/create-typescript-playground-plugin/README.md:6:21      - Unknown word (minutes)    -- <p>You need about 5 minutes, Node.js, yarn and Firefox
packages/create-typescript-playground-plugin/README.md:6:48      - Unknown word (Firefox)    -- minutes, Node.js, yarn and Firefox/Edge or Chrome.</p>
packages/create-typescript-playground-plugin/README.md:6:56      - Unknown word (Edge)       -- js, yarn and Firefox/Edge or Chrome.</p>
packages/create-typescript-playground-plugin/README.md:6:64      - Unknown word (Chrome)     -- and Firefox/Edge or Chrome.</p>
packages/create-typescript-playground-plugin/index.js:126:18    - Unknown word (Alright)    -- console.log("\nAlright, you're good to go!
packages/create-typescript-playground-plugin/index.js:126:34    - Unknown word (good)       -- log("\nAlright, you're good to go!\n")
packages/create-typescript-playground-plugin/index.js:134:21    - Unknown word (questions)  -- "\nCome and ask questions to other plugin authors
packages/create-typescript-playground-plugin/index.js:134:47    - Unknown word (authors)    -- questions to other plugin authors in the TypeScript Community
packages/create-typescript-playground-plugin/index.js:134:8     - Unknown word (Come)       -- "\nCome and ask questions to
packages/create-typescript-playground-plugin/index.js:5:17      - Unknown word (licensed)   -- // which is MIT licensed
packages/create-typescript-playground-plugin/index.js:9:7       - Unknown word (Ability)    -- // - Ability for me to define the
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:15:19     - Unknown word (documented)   -- The plugin API is documented in the [interface PlaygroundP
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:17:1      - Unknown word (Roughly)      -- Roughly:
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:19:22     - Unknown word (mounting)     -- There are a set of mounting and un-mounting functions
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:1:4       - Unknown word (Contributing) -- ## Contributing to a TypeScript Playground
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:20:103    - Unknown word (changed)      -- in monaco editor has changed
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:20:19     - Unknown word (Changed)      -- - There are `modelChanged` methods, which are
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:20:47     - Unknown word (shortcuts)    -- methods, which are shortcuts to knowing when the
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:20:60     - Unknown word (knowing)      -- which are shortcuts to knowing when the code in monaco
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:24:17     - Unknown word (passed)       -- The plugins are passed copies of the TypeScript
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:24:170    - Unknown word (learn)        -- monaco-editor/). You can learn more about the sandbox
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:24:24     - Unknown word (copies)       -- The plugins are passed copies of the TypeScript sandbox
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:24:84     - Unknown word (wrapper)      -- is a high level API wrapper to the [`monaco-editor
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:28:192    - Unknown word (Monaco)       -- bundles are used in Monaco, TypeScript Sandbox
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:28:261    - Unknown word (consistency)  -- so, this is used for consistency with the rest of the
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:28:294    - Unknown word (ecosystem)    -- with the rest of the ecosystem.
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:32:9      - Unknown word (most)         -- Because most node_modules expect
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:39:32     - Unknown word (edit)         -- did, you may need to edit your `rollup.config
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:40:180    - Unknown word (adding)       -- rollup.config.js) and by adding any extra externals
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:40:197    - Unknown word (externals)    -- by adding any extra externals and globals.
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:40:33     - Unknown word (taking)       -- could probably start by taking the [rollup config from
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:48:120    - Unknown word (staging)      -- making your code handle a staging vs production environment
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:48:89     - Unknown word (mean)         -- to see it, this may mean making your code handle
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:48:94     - Unknown word (making)       -- see it, this may mean making your code handle a staging
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:50:41     - Unknown word (getting)      -- is how you can handle getting the URL for a CSS file
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:5:36      - Unknown word (both)         -- pnpm start` to set up both a copy of Rollup to
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:60:72     - Unknown word (passing)      -- TypeScript playground by passing in the name of your
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:62:13     - Unknown word (happy)        -- Once you're happy and it's polished, you
packages/create-typescript-playground-plugin/template/CONTRIBUTING.md:66:49     - Unknown word (issues)       -- [TypeScript Website issues](https://github.com
packages/create-typescript-playground-plugin/template/README.md:21:50     - Unknown word (full)         -- CONTRIBUTING.md) for the full details, however, TLDR
packages/create-typescript-playground-plugin/template/README.md:21:6      - Unknown word (CONTRIBUTING) -- See [CONTRIBUTING.md](./CONTRIBUTING.md
packages/create-typescript-playground-plugin/template/README.md:21:64     - Unknown word (however)      -- for the full details, however, TLDR:
packages/create-typescript-playground-plugin/template/README.md:29:23     - Unknown word (starting)     -- Then tick the box for starting plugin development inside
packages/create-typescript-playground-plugin/template/README.md:29:6      - Unknown word (tick)         -- Then tick the box for starting
packages/create-typescript-playground-plugin/template/rollup.config.js:26:18     - Unknown word (wanting)    -- * if you end up wanting to import a dependency
packages/create-typescript-playground-plugin/template/rollup.config.js:26:55     - Unknown word (relies)     -- import a dependency which relies on typescript, you will
packages/create-typescript-playground-plugin/template/rollup.config.js:27:19     - Unknown word (adds)       -- * settings which adds these extra options
packages/create-typescript-playground-plugin/template/rollup.config.js:28:29     - Unknown word (figured)    -- dependency, and I've not figured a way to remove fs and
packages/create-typescript-playground-plugin/template/rollup.config.js:6:38      - Unknown word (extending)  -- more root bundles by extending this array
packages/create-typescript-playground-plugin/template/scripts/getDTS.js:12:9      - Unknown word (editing)    -- const editingFunc = editFunc ? editFunc
packages/create-typescript-playground-plugin/template/scripts/getDTS.js:27:25     - Unknown word (purposes)   -- For playground-dev purposes
packages/create-typescript-playground-plugin/template/scripts/getDTS.js:63:18     - Unknown word (TSVFS)      -- const replaceTSVFS = removeImports.replace
packages/create-typescript-playground-plugin/template/scripts/getDTS.js:64:23     - Unknown word (tsvfs)      -- '// import * as tsvfs from "./vendor/typescript
packages/create-typescript-playground-plugin/template/src/index.ts:11:80     - Unknown word (dark)       -- handle mobile/light/dark etc)
packages/create-typescript-playground-plugin/template/src/index.ts:15:82     - Unknown word (below)      -- in the editor, click below to test it")
packages/create-typescript-playground-plugin/template/src/index.ts:23:33     - Unknown word (clicked)    -- sandbox.setText("// You clicked the button!")
packages/create-typescript-playground-plugin/template/src/index.ts:27:23     - Unknown word (occasionally) -- // This is called occasionally as text changes in monaco
packages/create-typescript-playground-plugin/template/src/index.ts:35:8      - Unknown word (Gives)        -- // Gives you a chance to remove
packages/create-typescript-playground-plugin/template/src/index.ts:36:22     - Unknown word (itself)       -- // the container itself if wiped of children
packages/create-typescript-playground-plugin/template/src/index.ts:36:32     - Unknown word (wiped)        -- container itself if wiped of children after this
packages/create-typescript-playground-plugin/template/src/index.ts:38:23     - Unknown word (focusing)     -- console.log("De-focusing plugin")
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:11:9      - Unknown word (para)         -- const para = document.createElement
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:1:58      - Unknown word (depending)  -- in your dist folder depending on if you're in dev
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:3:96      - Unknown word (browse)     -- /dist/x.js => unpkg/browse/typescript-playground
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:5:66      - Unknown word (presentation) -- typescript-playground-presentation-mode/dist/'
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:9:28      - Unknown word (dumb)         -- Use this to make a few dumb element generation funcs
packages/create-typescript-playground-plugin/template/src/vendor/utils.ts:9:41      - Unknown word (generation)   -- make a few dumb element generation funcs */
packages/documentation/copy/en/Nightly Builds.md:26:43     - Unknown word (selecting)  -- has documentation on selecting a workspace version
packages/documentation/copy/en/Nightly Builds.md:27:7      - Unknown word (installing) -- After installing a nightly version of
packages/documentation/copy/en/Nightly Builds.md:27:84     - Unknown word (directions) -- workspace, you can follow directions there, or simply update
packages/documentation/copy/en/Nightly Builds.md:2:8       - Unknown word (Nightly)    -- title: Nightly Builds
packages/documentation/copy/en/Nightly Builds.md:31:13     - Unknown word (tsdk)       -- "typescript.tsdk": "<path to your folder
packages/documentation/copy/en/Nightly Builds.md:36:5      - Unknown word (Sublime)    -- ### Sublime Text
packages/documentation/copy/en/Nightly Builds.md:4:27      - Unknown word (nightly)    -- permalink: /docs/handbook/nightly-builds.html
packages/documentation/copy/en/Nightly Builds.md:50:105    - Unknown word (installer)  -- working on publishing an installer on a nightly basis as
packages/documentation/copy/en/Nightly Builds.md:60:4      - Unknown word (posh)       -- ```posh
packages/documentation/copy/en/Nightly Builds.md:70:14     - Unknown word (IDEA)       -- ### IntelliJ IDEA (Mac)
packages/documentation/copy/en/Nightly Builds.md:72:36     - Unknown word (Frameworks) -- Preferences` > `Languages & Frameworks` > `TypeScript`:
packages/documentation/copy/en/Nightly Builds.md:80:77     - Unknown word (Roaming)    -- Users\USERNAME\AppData\Roaming\npm\node_modules\typescript
packages/documentation/copy/en/Nightly Builds.md:9:122     - Unknown word (midnight)   -- branch is published by midnight PST to npm.
packages/documentation/copy/en/declaration-files/By Example.md:102:103   - Unknown word (Greeter)       -- returning a `string`, or a `Greeter` instance.
packages/documentation/copy/en/declaration-files/By Example.md:102:26    - Unknown word (expected)      -- Anywhere a greeting is expected, you can provide a
packages/documentation/copy/en/declaration-files/By Example.md:102:3     - Unknown word (Anywhere)      -- > Anywhere a greeting is expected
packages/documentation/copy/en/declaration-files/By Example.md:102:75    - Unknown word (returning)     -- string`, a function returning a `string`, or a `Greeter
packages/documentation/copy/en/declaration-files/By Example.md:108:11    - Unknown word (howdy)         -- return "howdy";
packages/documentation/copy/en/declaration-files/By Example.md:10:5      - Unknown word (explaining)  -- and explaining how to write the correspondin
packages/documentation/copy/en/declaration-files/By Example.md:110:17    - Unknown word (extends)       -- class MyGreeter extends Greeter {}
packages/documentation/copy/en/declaration-files/By Example.md:119:36    - Unknown word (shorthand)     -- type alias to make a shorthand for a type:
packages/documentation/copy/en/declaration-files/By Example.md:122:14    - Unknown word (Like)          -- type GreetingLike = string | (() => string
packages/documentation/copy/en/declaration-files/By Example.md:127:4     - Unknown word (Organizing)    -- ## Organizing Types
packages/documentation/copy/en/declaration-files/By Example.md:12:20     - Unknown word (ordered)     -- These examples are ordered in approximately increasing
packages/documentation/copy/en/declaration-files/By Example.md:12:31     - Unknown word (approximately) -- examples are ordered in approximately increasing order of
packages/documentation/copy/en/declaration-files/By Example.md:12:45     - Unknown word (increasing)    -- ordered in approximately increasing order of complexity
packages/documentation/copy/en/declaration-files/By Example.md:12:65     - Unknown word (complexity)    -- increasing order of complexity.
packages/documentation/copy/en/declaration-files/By Example.md:131:56    - Unknown word (alert)         -- a file or display an alert.
packages/documentation/copy/en/declaration-files/By Example.md:131:8     - Unknown word (greeter)       -- > The `greeter` object can log to a
packages/documentation/copy/en/declaration-files/By Example.md:138:18    - Unknown word (true)          -- g.log({ verbose: true });
packages/documentation/copy/en/declaration-files/By Example.md:138:9     - Unknown word (verbose)       -- g.log({ verbose: true });
packages/documentation/copy/en/declaration-files/By Example.md:139:18    - Unknown word (false)         -- g.alert({ modal: false, title: "Current Greeting
packages/documentation/copy/en/declaration-files/By Example.md:144:19    - Unknown word (organize)      -- Use namespaces to organize types.
packages/documentation/copy/en/declaration-files/By Example.md:151:13    - Unknown word (Alert)         -- interface AlertOptions {
packages/documentation/copy/en/declaration-files/By Example.md:159:21    - Unknown word (nested)        -- You can also create nested namespaces in one declaration
packages/documentation/copy/en/declaration-files/By Example.md:163:6     - Unknown word (Refer)         -- // Refer to via GreetingLib.Options
packages/documentation/copy/en/declaration-files/By Example.md:175:4     - Unknown word (Classes)       -- ## Classes
packages/documentation/copy/en/declaration-files/By Example.md:179:79    - Unknown word (customized)    -- object, or create a customized greeter by extending
packages/documentation/copy/en/declaration-files/By Example.md:188:7     - Unknown word (Special)       -- class SpecialGreeter extends Greeter
packages/documentation/copy/en/declaration-files/By Example.md:189:3     - Unknown word (constructor)   -- constructor() {
packages/documentation/copy/en/declaration-files/By Example.md:18:51     - Unknown word (Greeting)      -- has a function `makeGreeting` for creating greetings
packages/documentation/copy/en/declaration-files/By Example.md:18:74     - Unknown word (greetings)     -- makeGreeting` for creating greetings,
packages/documentation/copy/en/declaration-files/By Example.md:190:12    - Unknown word (Very)          -- super("Very special greetings")
packages/documentation/copy/en/declaration-files/By Example.md:190:17    - Unknown word (special)       -- super("Very special greetings");
packages/documentation/copy/en/declaration-files/By Example.md:19:27     - Unknown word (Greetings)     -- a property `numberOfGreetings` indicating the number
packages/documentation/copy/en/declaration-files/By Example.md:19:73     - Unknown word (made)          -- number of greetings made so far.
packages/documentation/copy/en/declaration-files/By Example.md:213:60    - Unknown word (present)       -- the number of widgets present.
packages/documentation/copy/en/declaration-files/By Example.md:225:57    - Unknown word (scoped)        -- the variable is block-scoped.
packages/documentation/copy/en/declaration-files/By Example.md:25:18     - Unknown word (computed)      -- console.log("The computed greeting is:" + result
packages/documentation/copy/en/declaration-files/By Example.md:25:27     - Unknown word (greeting)      -- console.log("The computed greeting is:" + result);
packages/documentation/copy/en/declaration-files/By Example.md:2:8       - Unknown word (Declaration) -- title: Declaration Reference
packages/documentation/copy/en/declaration-files/By Example.md:32:6      - Unknown word (declare)       -- Use `declare namespace` to describe
packages/documentation/copy/en/declaration-files/By Example.md:32:65     - Unknown word (dotted)        -- or values accessed by dotted notation.
packages/documentation/copy/en/declaration-files/By Example.md:32:72     - Unknown word (notation)      -- values accessed by dotted notation.
packages/documentation/copy/en/declaration-files/By Example.md:41:4      - Unknown word (Overloaded)    -- ## Overloaded Functions
packages/documentation/copy/en/declaration-files/By Example.md:45:47     - Unknown word (returns)       -- accepts a number and returns a Widget, or accepts
packages/documentation/copy/en/declaration-files/By Example.md:4:27      - Unknown word (declaration) -- permalink: /docs/handbook/declaration-files/by-example.html
packages/documentation/copy/en/declaration-files/By Example.md:66:8      - Unknown word (specifying)    -- > When specifying a greeting, you must
packages/documentation/copy/en/declaration-files/By Example.md:67:23     - Unknown word (following)     -- This object has the following properties:
packages/documentation/copy/en/declaration-files/By Example.md:69:17     - Unknown word (Mandatory)     -- > 1 - greeting: Mandatory string
packages/documentation/copy/en/declaration-files/By Example.md:71:17     - Unknown word (Optional)      -- > 2 - duration: Optional length of time (in millisecon
packages/documentation/copy/en/declaration-files/By Example.md:71:26     - Unknown word (length)        -- duration: Optional length of time (in milliseconds
packages/documentation/copy/en/declaration-files/By Example.md:71:45     - Unknown word (milliseconds)  -- Optional length of time (in milliseconds)
packages/documentation/copy/en/declaration-files/By Example.md:71:7      - Unknown word (duration)      -- > 2 - duration: Optional length of
packages/documentation/copy/en/declaration-files/By Example.md:78:1      - Unknown word (greet)         -- greet({
packages/documentation/copy/en/declaration-files/By Example.md:8:21      - Unknown word (guide)       -- The purpose of this guide is to teach you how
packages/documentation/copy/en/declaration-files/By Example.md:8:33      - Unknown word (teach)       -- of this guide is to teach you how to write a high
packages/documentation/copy/en/declaration-files/By Example.md:8:63      - Unknown word (quality)     -- how to write a high-quality definition file.
packages/documentation/copy/en/declaration-files/By Example.md:95:52     - Unknown word (void)          -- GreetingSettings): void;
packages/documentation/copy/en/declaration-files/By Example.md:9:15      - Unknown word (structured)  -- This guide is structured by showing documentation
packages/documentation/copy/en/declaration-files/By Example.md:9:29      - Unknown word (showing)     -- guide is structured by showing documentation for some
packages/documentation/copy/en/declaration-files/By Example.md:9:65      - Unknown word (along)       -- documentation for some API, along with sample usage of
packages/documentation/copy/en/declaration-files/Consumption.md:10:14     - Unknown word (declarations) -- Getting type declarations requires no tools apart
packages/documentation/copy/en/declaration-files/Consumption.md:10:27     - Unknown word (requires)     -- Getting type declarations requires no tools apart from
packages/documentation/copy/en/declaration-files/Consumption.md:10:45     - Unknown word (apart)        -- eclarations requires no tools apart from npm.
packages/documentation/copy/en/declaration-files/Consumption.md:12:67     - Unknown word (takes)        -- library like lodash takes nothing more than the
packages/documentation/copy/en/declaration-files/Consumption.md:12:73     - Unknown word (nothing)      -- library like lodash takes nothing more than the following
packages/documentation/copy/en/declaration-files/Consumption.md:18:13     - Unknown word (noting)       -- It is worth noting that if the npm package
packages/documentation/copy/en/declaration-files/Consumption.md:18:216    - Unknown word (needed)       -- types` package is not needed.
packages/documentation/copy/en/declaration-files/Consumption.md:18:44     - Unknown word (already)      -- that if the npm package already includes its declaration
packages/documentation/copy/en/declaration-files/Consumption.md:18:7      - Unknown word (worth)        -- It is worth noting that if the npm
packages/documentation/copy/en/declaration-files/Consumption.md:18:85     - Unknown word (described)    -- declaration file as described in [Publishing](/docs
packages/documentation/copy/en/declaration-files/Consumption.md:18:99     - Unknown word (Publishing)   -- file as described in [Publishing](/docs/handbook/declaration
packages/documentation/copy/en/declaration-files/Consumption.md:20:4      - Unknown word (Consuming)    -- ## Consuming
packages/documentation/copy/en/declaration-files/Consumption.md:22:22     - Unknown word (able)         -- From there you’ll be able to use lodash in your
packages/documentation/copy/en/declaration-files/Consumption.md:22:73     - Unknown word (fuss)         -- TypeScript code with no fuss.
packages/documentation/copy/en/declaration-files/Consumption.md:2:8       - Unknown word (Consumption) -- title: Consumption
packages/documentation/copy/en/declaration-files/Consumption.md:38:4      - Unknown word (Searching)    -- ## Searching
packages/documentation/copy/en/declaration-files/Consumption.md:41:107    - Unknown word (favorite)     -- the package for your favorite library.
packages/documentation/copy/en/declaration-files/Consumption.md:43:41     - Unknown word (searching)    -- declaration file you are searching for is not present,
packages/documentation/copy/en/declaration-files/Consumption.md:43:86     - Unknown word (contribute)   -- present, you can always contribute one back and help out
packages/documentation/copy/en/declaration-files/Consumption.md:44:3      - Unknown word (Please)       -- > Please see the DefinitelyTyped
packages/documentation/copy/en/declaration-files/Consumption.md:44:35     - Unknown word (contribution) -- the DefinitelyTyped [contribution guidelines page](https
packages/documentation/copy/en/declaration-files/Consumption.md:44:48     - Unknown word (guidelines)   -- DefinitelyTyped [contribution guidelines page](https://definitelytyped
packages/documentation/copy/en/declaration-files/Consumption.md:4:45      - Unknown word (consumption) -- handbook/declaration-files/consumption.html
packages/documentation/copy/en/declaration-files/Deep Dive.md:108:27    - Unknown word (opportunity)  -- presents a very good opportunity for destructuring in
packages/documentation/copy/en/declaration-files/Deep Dive.md:108:6     - Unknown word (presents)     -- This presents a very good opportunity
packages/documentation/copy/en/declaration-files/Deep Dive.md:108:64    - Unknown word (consuming)    -- destructuring in the consuming code:
packages/documentation/copy/en/declaration-files/Deep Dive.md:10:1      - Unknown word (Structuring) -- Structuring modules to give the
packages/documentation/copy/en/declaration-files/Deep Dive.md:10:33     - Unknown word (exact)       -- modules to give the exact API shape you want can
packages/documentation/copy/en/declaration-files/Deep Dive.md:10:65     - Unknown word (tricky)      -- shape you want can be tricky.
packages/documentation/copy/en/declaration-files/Deep Dive.md:117:83    - Unknown word (they're)      -- of the `Bar` type -- they're independent.
packages/documentation/copy/en/declaration-files/Deep Dive.md:117:91    - Unknown word (independent)  -- Bar` type -- they're independent.
packages/documentation/copy/en/declaration-files/Deep Dive.md:11:49     - Unknown word (invoked)     -- a module that can be invoked with or without `new
packages/documentation/copy/en/declaration-files/Deep Dive.md:11:82     - Unknown word (produce)     -- or without `new` to produce different types,
packages/documentation/copy/en/declaration-files/Deep Dive.md:121:35    - Unknown word (combined)     -- declarations can be combined across multiple declarations
packages/documentation/copy/en/declaration-files/Deep Dive.md:121:44    - Unknown word (across)       -- declarations can be combined across multiple declarations
packages/documentation/copy/en/declaration-files/Deep Dive.md:121:6     - Unknown word (kinds)        -- Some kinds of declarations can
packages/documentation/copy/en/declaration-files/Deep Dive.md:124:47    - Unknown word (conflict)     -- it does not create a conflict.
packages/documentation/copy/en/declaration-files/Deep Dive.md:125:107   - Unknown word (declared)     -- name unless they are declared as `namespace`s,
packages/documentation/copy/en/declaration-files/Deep Dive.md:125:19    - Unknown word (thumb)        -- A general rule of thumb is that values always
packages/documentation/copy/en/declaration-files/Deep Dive.md:125:91    - Unknown word (unless)       -- values of the same name unless they are declared as
packages/documentation/copy/en/declaration-files/Deep Dive.md:12:30     - Unknown word (exposed)     -- variety of named types exposed in a hierarchy,
packages/documentation/copy/en/declaration-files/Deep Dive.md:12:7      - Unknown word (variety)     -- has a variety of named types exposed
packages/documentation/copy/en/declaration-files/Deep Dive.md:133:12    - Unknown word (additional)   -- We can add additional members to an `interface
packages/documentation/copy/en/declaration-files/Deep Dive.md:133:54    - Unknown word (another)      -- an `interface` with another `interface` declaration
packages/documentation/copy/en/declaration-files/Deep Dive.md:139:8     - Unknown word (elsewhere)    -- // ... elsewhere ...
packages/documentation/copy/en/declaration-files/Deep Dive.md:15:55     - Unknown word (complex)     -- have the tools to write complex declaration files that
packages/documentation/copy/en/declaration-files/Deep Dive.md:15:86     - Unknown word (expose)      -- declaration files that expose a friendly API surface
packages/documentation/copy/en/declaration-files/Deep Dive.md:15:95     - Unknown word (friendly)    -- files that expose a friendly API surface.
packages/documentation/copy/en/declaration-files/Deep Dive.md:161:14    - Unknown word (cannot)       -- Note that we cannot add to type aliases
packages/documentation/copy/en/declaration-files/Deep Dive.md:16:12     - Unknown word (focuses)     -- This guide focuses on module (or UMD) libraries
packages/documentation/copy/en/declaration-files/Deep Dive.md:16:83     - Unknown word (varied)      -- options here are more varied.
packages/documentation/copy/en/declaration-files/Deep Dive.md:180:12    - Unknown word (contained)    -- (types are contained by namespaces, and namespaces
packages/documentation/copy/en/declaration-files/Deep Dive.md:193:47    - Unknown word (until)        -- wasn't a namespace `C` until we wrote the `namespace
packages/documentation/copy/en/declaration-files/Deep Dive.md:194:32    - Unknown word (doesn't)      -- meaning `C` as a namespace doesn't conflict with the value
packages/documentation/copy/en/declaration-files/Deep Dive.md:194:5     - Unknown word (meaning)      -- The meaning `C` as a namespace doesn
packages/documentation/copy/en/declaration-files/Deep Dive.md:196:1     - Unknown word (Finally)      -- Finally, we could perform many
packages/documentation/copy/en/declaration-files/Deep Dive.md:196:19    - Unknown word (perform)      -- Finally, we could perform many different merges
packages/documentation/copy/en/declaration-files/Deep Dive.md:196:27    - Unknown word (many)         -- Finally, we could perform many different merges using
packages/documentation/copy/en/declaration-files/Deep Dive.md:196:42    - Unknown word (merges)       -- perform many different merges using `namespace` declaration
packages/documentation/copy/en/declaration-files/Deep Dive.md:197:14    - Unknown word (particularly) -- This isn't a particularly realistic example, but
packages/documentation/copy/en/declaration-files/Deep Dive.md:197:27    - Unknown word (realistic)    -- isn't a particularly realistic example, but shows all
packages/documentation/copy/en/declaration-files/Deep Dive.md:197:50    - Unknown word (shows)        -- realistic example, but shows all sorts of interesting
packages/documentation/copy/en/declaration-files/Deep Dive.md:197:60    - Unknown word (sorts)        -- example, but shows all sorts of interesting behavior
packages/documentation/copy/en/declaration-files/Deep Dive.md:197:69    - Unknown word (interesting)  -- but shows all sorts of interesting behavior:
packages/documentation/copy/en/declaration-files/Deep Dive.md:20:9      - Unknown word (fully)       -- You can fully understand how to make
packages/documentation/copy/en/declaration-files/Deep Dive.md:25:52     - Unknown word (roughly)     -- you probably already roughly know what a type in
packages/documentation/copy/en/declaration-files/Deep Dive.md:26:12     - Unknown word (explicit)    -- To be more explicit, though, a _type_ is
packages/documentation/copy/en/declaration-files/Deep Dive.md:26:42     - Unknown word (introduced)  -- though, a _type_ is introduced with:
packages/documentation/copy/en/declaration-files/Deep Dive.md:2:13      - Unknown word (Dive)       -- title: Deep Dive
packages/documentation/copy/en/declaration-files/Deep Dive.md:2:8       - Unknown word (Deep)       -- title: Deep Dive
packages/documentation/copy/en/declaration-files/Deep Dive.md:32:33     - Unknown word (refers)      -- import` declaration which refers to a type
packages/documentation/copy/en/declaration-files/Deep Dive.md:34:33     - Unknown word (creates)     -- these declaration forms creates a new type name.
packages/documentation/copy/en/declaration-files/Deep Dive.md:42:1      - Unknown word (Again)       -- Again, being explicit, the
packages/documentation/copy/en/declaration-files/Deep Dive.md:4:45      - Unknown word (deep)       -- handbook/declaration-files/deep-dive.html
packages/documentation/copy/en/declaration-files/Deep Dive.md:4:50      - Unknown word (dive)       -- declaration-files/deep-dive.html
packages/documentation/copy/en/declaration-files/Deep Dive.md:57:21     - Unknown word (subtle)      -- This distinction is subtle and important -- here
packages/documentation/copy/en/declaration-files/Deep Dive.md:57:32     - Unknown word (important)   -- distinction is subtle and important -- here, `A.B` is not
packages/documentation/copy/en/declaration-files/Deep Dive.md:57:6      - Unknown word (distinction) -- This distinction is subtle and important
packages/documentation/copy/en/declaration-files/Deep Dive.md:57:64     - Unknown word (necessarily) -- here, `A.B` is not necessarily a type or a value.
packages/documentation/copy/en/declaration-files/Deep Dive.md:59:11     - Unknown word (Combinations) -- ## Simple Combinations: One name, multiple
packages/documentation/copy/en/declaration-files/Deep Dive.md:59:35     - Unknown word (multiple)     -- Combinations: One name, multiple meanings
packages/documentation/copy/en/declaration-files/Deep Dive.md:59:4      - Unknown word (Simple)      -- ## Simple Combinations: One name
packages/documentation/copy/en/declaration-files/Deep Dive.md:59:44     - Unknown word (meanings)     -- One name, multiple meanings
packages/documentation/copy/en/declaration-files/Deep Dive.md:61:1      - Unknown word (Given)        -- Given a name `A`, we might
packages/documentation/copy/en/declaration-files/Deep Dive.md:62:17     - Unknown word (interpreted)  -- How the name is interpreted depends on the context
packages/documentation/copy/en/declaration-files/Deep Dive.md:62:29     - Unknown word (depends)      -- name is interpreted depends on the context in which
packages/documentation/copy/en/declaration-files/Deep Dive.md:65:29     - Unknown word (referring)    -- meanings might end up referring to entirely different
packages/documentation/copy/en/declaration-files/Deep Dive.md:65:42     - Unknown word (entirely)     -- end up referring to entirely different declarations
packages/documentation/copy/en/declaration-files/Deep Dive.md:67:10     - Unknown word (seem)         -- This may seem confusing, but it's
packages/documentation/copy/en/declaration-files/Deep Dive.md:67:15     - Unknown word (confusing)    -- This may seem confusing, but it's actually very
packages/documentation/copy/en/declaration-files/Deep Dive.md:67:44     - Unknown word (very)         -- confusing, but it's actually very convenient as long as
packages/documentation/copy/en/declaration-files/Deep Dive.md:67:80     - Unknown word (excessively)  -- as long as we don't excessively overload things.
packages/documentation/copy/en/declaration-files/Deep Dive.md:68:27     - Unknown word (aspects)      -- look at some useful aspects of this combining behavior
packages/documentation/copy/en/declaration-files/Deep Dive.md:68:43     - Unknown word (combining)    -- useful aspects of this combining behavior.
packages/documentation/copy/en/declaration-files/Deep Dive.md:72:1      - Unknown word (Astute)       -- Astute readers will notice
packages/documentation/copy/en/declaration-files/Deep Dive.md:72:21     - Unknown word (notice)       -- Astute readers will notice that, for example,
packages/documentation/copy/en/declaration-files/Deep Dive.md:72:55     - Unknown word (appeared)     -- for example, `class` appeared in both the _type_ and
packages/documentation/copy/en/declaration-files/Deep Dive.md:72:8      - Unknown word (readers)      -- Astute readers will notice that, for
packages/documentation/copy/en/declaration-files/Deep Dive.md:76:19     - Unknown word (behave)       -- Enum declarations behave similarly.
packages/documentation/copy/en/declaration-files/Deep Dive.md:76:26     - Unknown word (similarly)    -- declarations behave similarly.
packages/documentation/copy/en/declaration-files/Deep Dive.md:80:14     - Unknown word (wrote)        -- Let's say we wrote a module file `foo.d
packages/documentation/copy/en/declaration-files/Deep Dive.md:83:12     - Unknown word (Some)         -- export var SomeVar: { a: SomeType }
packages/documentation/copy/en/declaration-files/Deep Dive.md:89:6      - Unknown word (consumed)     -- Then consumed it:
packages/documentation/copy/en/declaration-files/Deep Dive.md:8:21      - Unknown word (Theory)     -- ## Declaration File Theory: A Deep Dive
packages/documentation/copy/en/declaration-files/Deep Dive.md:97:38     - Unknown word (imagine)      -- enough, but we might imagine that `SomeType` and
packages/documentation/copy/en/declaration-files/Deep Dive.md:97:86     - Unknown word (closely)      -- `SomeVar` were very closely related
packages/documentation/copy/en/declaration-files/Deep Dive.md:98:1      - Unknown word (such)         -- such that you'd like them
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:100:5     - Unknown word (Overloads)     -- ### Overloads and Callbacks
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:102:19    - Unknown word (separate)      -- ❌ **Don't** write separate overloads that differ
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:102:28    - Unknown word (overloads)     -- Don't** write separate overloads that differ only on
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:102:43    - Unknown word (differ)        -- separate overloads that differ only on callback arity
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:106:18    - Unknown word (before)        -- declare function beforeAll(action: () => void
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:106:48    - Unknown word (timeout)       -- action: () => void, timeout?: number): void;
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:108:18    - Unknown word (Done)          -- action: (done: DoneFn) => void,
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:10:37     - Unknown word (Symbol)     -- String`, `Boolean`, `Symbol` and `Object`
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:113:44    - Unknown word (maximum)       -- single overload using the maximum arity:
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:123:48    - Unknown word (disregard)     -- legal for a callback to disregard a parameter, so there
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:123:98    - Unknown word (shorter)       -- there's no need for the shorter overload.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:124:1     - Unknown word (Providing)     -- Providing a shorter callback first
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:124:36    - Unknown word (allows)        -- shorter callback first allows incorrectly-typed functions
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:128:5     - Unknown word (Ordering)      -- ### Ordering
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:138:7     - Unknown word (Elem)          -- var myElem: HTMLDivElement;
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:13:13     - Unknown word (refer)      -- These types refer to non-primitive boxed
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:13:36     - Unknown word (boxed)      -- refer to non-primitive boxed objects that are almost
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:13:59     - Unknown word (almost)     -- boxed objects that are almost never used appropriately
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:13:77     - Unknown word (appropriately) -- are almost never used appropriately in JavaScript code.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:154:23    - Unknown word (chooses)       -- **Why:** TypeScript chooses the _first matching
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:154:66    - Unknown word (resolving)     -- matching overload_ when resolving function calls.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:154:85    - Unknown word (calls)         -- when resolving function calls.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:155:51    - Unknown word (later)         -- more general" than a later one, the later one is
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:155:9     - Unknown word (earlier)       -- When an earlier overload is "more general
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:159:19    - Unknown word (several)       -- ❌ **Don't** write several overloads that differ
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:159:57    - Unknown word (trailing)      -- that differ only in trailing parameters:
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:16:4      - Unknown word (WRONG)         -- /* WRONG */
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:170:34    - Unknown word (whenever)      -- optional parameters whenever possible:
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:179:16    - Unknown word (collapsing)    -- Note that this collapsing should only occur when
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:179:39    - Unknown word (occur)         -- collapsing should only occur when all overloads have
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:17:10     - Unknown word (reverse)       -- function reverse(s: String): String;
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:181:38    - Unknown word (reasons)       -- is important for two reasons.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:183:12    - Unknown word (resolves)      -- TypeScript resolves signature compatibility
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:183:21    - Unknown word (signature)     -- TypeScript resolves signature compatibility by seeing
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:183:48    - Unknown word (seeing)        -- signature compatibility by seeing if any signature of
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:184:6     - Unknown word (extraneous)    -- _and extraneous arguments are allowed
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:185:25    - Unknown word (exposes)       -- This code, for example, exposes a bug only when the
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:185:66    - Unknown word (correctly)     -- when the signature is correctly written using optional
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:185:76    - Unknown word (written)       -- signature is correctly written using optional parameters
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:191:22    - Unknown word (optionals)     -- / When written with optionals, correctly an error
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:195:48    - Unknown word (strict)        -- a consumer uses the "strict null checking" feature
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:196:32    - Unknown word (appear)        -- unspecified parameters appear as `undefined` in JavaScript
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:196:82    - Unknown word (fine)          -- JavaScript, it's usually fine to pass an explicit
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:196:9     - Unknown word (unspecified)   -- Because unspecified parameters appear as
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:197:51    - Unknown word (nulls)         -- should be OK under strict nulls:
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:203:41    - Unknown word (hour)          -- true ? undefined : "hour");
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:20:60     - Unknown word (symbol)        -- string`, `boolean`, and `symbol`.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:213:6     - Unknown word (Offset)       -- utcOffset(): number;
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:27:1      - Unknown word (Instead)       -- Instead of `Object`, use the
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:29:5      - Unknown word (Generics)      -- ### Generics
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:139    - Unknown word (treats)        -- compiler _effectively_ treats `any` as "please turn
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:156    - Unknown word (please)        -- effectively_ treats `any` as "please turn off type checking
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:163    - Unknown word (turn)          -- treats `any` as "please turn off type checking for
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:177    - Unknown word (checking)      -- please turn off type checking for this thing". It
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:209    - Unknown word (similar)       -- for this thing". It is similar to putting an `@ts-ignore
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:220    - Unknown word (putting)       -- thing". It is similar to putting an `@ts-ignore` comment
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:305    - Unknown word (helpful)       -- variable. This can be very helpful when you are first migrating
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:415    - Unknown word (haven't)       -- the type for stuff you haven't migrated yet as `any
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:423    - Unknown word (migrated)      -- for stuff you haven't migrated yet as `any`, but in
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:487    - Unknown word (disabling)     -- TypeScript project you are disabling type checking for any
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:533    - Unknown word (program)       -- for any parts of your program that use it.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:36:66     - Unknown word (migrating)     -- are in the process of migrating a JavaScript project
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:38:117    - Unknown word (blindly)       -- because you will be blindly passing it through without
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:38:152    - Unknown word (interacting)   -- passing it through without interacting with it, you can use
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:38:187    - Unknown word (unknown)       -- with it, you can use [`unknown`](/play/#example/unknown
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:40:12     - Unknown word (More)          -- <!-- TODO: More -->
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:42:4      - Unknown word (Callback)      -- ## Callback Types
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:44:21     - Unknown word (Callbacks)     -- ### Return Types of Callbacks
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:46:12     - Unknown word (Reword)        -- <!-- TODO: Reword; these examples make
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:46:43     - Unknown word (sense)         -- these examples make no sense in the context of a
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:48:53     - Unknown word (whose)         -- `any` for callbacks whose value will be ignored
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:48:73     - Unknown word (ignored)       -- whose value will be ignored:
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:66:28     - Unknown word (safer)         -- Why:** Using `void` is safer because it prevents
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:66:45     - Unknown word (prevents)      -- is safer because it prevents you from accidentally
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:66:63     - Unknown word (accidentally)  -- it prevents you from accidentally using the return value
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:70:19     - Unknown word (oops)          -- var k = x(); // oops! meant to do something
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:70:25     - Unknown word (meant)         -- var k = x(); // oops! meant to do something else
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:81:11     - Unknown word (Fetcher)       -- interface Fetcher {
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:82:35     - Unknown word (elapsed)       -- done: (data: unknown, elapsedTime?: number) => void
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:86:115    - Unknown word (arguments)     -- might be invoked with 2 arguments.
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:86:46     - Unknown word (callback)      -- meaning: the `done` callback might be invoked with
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:86:79     - Unknown word (argument)      -- might be invoked with 1 argument or might be invoked
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:87:21     - Unknown word (intended)      -- The author probably intended to say that the callback
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:87:65     - Unknown word (care)          -- the callback might not care about the `elapsedTime
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:88:55     - Unknown word (accomplish)    -- parameter optional to accomplish this --
packages/documentation/copy/en/declaration-files/Do's and Don'ts.md:89:54     - Unknown word (fewer)         -- callback that accepts fewer arguments.
packages/documentation/copy/en/declaration-files/Introduction.md:11:16     - Unknown word (yourself)     -- to familiarize yourself with basic concepts
packages/documentation/copy/en/declaration-files/Introduction.md:11:4      - Unknown word (familiarize)  -- to familiarize yourself with basic
packages/documentation/copy/en/declaration-files/Introduction.md:11:46     - Unknown word (especially)   -- with basic concepts, especially types and modules.
packages/documentation/copy/en/declaration-files/Introduction.md:13:71     - Unknown word (typing)       -- work is that you're typing an npm package with
packages/documentation/copy/en/declaration-files/Introduction.md:14:23     - Unknown word (jump)         -- In that case, you can jump straight to [Modules
packages/documentation/copy/en/declaration-files/Introduction.md:14:28     - Unknown word (straight)     -- that case, you can jump straight to [Modules .d.ts](
packages/documentation/copy/en/declaration-files/Introduction.md:14:41     - Unknown word (Modules)      -- can jump straight to [Modules .d.ts](/docs/handbook
packages/documentation/copy/en/declaration-files/Introduction.md:16:34     - Unknown word (broken)       -- Declaration Files section is broken down into the following
packages/documentation/copy/en/declaration-files/Introduction.md:20:14     - Unknown word (faced)        -- We are often faced with writing a declaration
packages/documentation/copy/en/declaration-files/Introduction.md:20:8      - Unknown word (often)        -- We are often faced with writing a
packages/documentation/copy/en/declaration-files/Introduction.md:20:86     - Unknown word (underlying)   -- have examples of the underlying library to guide us
packages/documentation/copy/en/declaration-files/Introduction.md:22:15     - Unknown word (aimed)        -- This guide is aimed at the TypeScript novice
packages/documentation/copy/en/declaration-files/Introduction.md:22:39     - Unknown word (novice)       -- aimed at the TypeScript novice who may not yet be familiar
packages/documentation/copy/en/declaration-files/Introduction.md:22:65     - Unknown word (familiar)     -- novice who may not yet be familiar with every language
packages/documentation/copy/en/declaration-files/Introduction.md:22:94     - Unknown word (construct)    -- with every language construct in TypeScript.
packages/documentation/copy/en/declaration-files/Introduction.md:24:13     - Unknown word (Structures)   -- ## [Library Structures](/docs/handbook/declaration
packages/documentation/copy/en/declaration-files/Introduction.md:24:5      - Unknown word (Library)      -- ## [Library Structures](/docs/handbook
packages/documentation/copy/en/declaration-files/Introduction.md:26:126    - Unknown word (formats)      -- understand common library formats and how to write a proper
packages/documentation/copy/en/declaration-files/Introduction.md:26:153    - Unknown word (proper)       -- formats and how to write a proper declaration file for
packages/documentation/copy/en/declaration-files/Introduction.md:26:90     - Unknown word (helps)        -- structures.html) guide helps you understand common
packages/documentation/copy/en/declaration-files/Introduction.md:27:22     - Unknown word (existing)     -- If you're editing an existing file, you probably don
packages/documentation/copy/en/declaration-files/Introduction.md:28:1      - Unknown word (Authors)      -- Authors of new declaration files
packages/documentation/copy/en/declaration-files/Introduction.md:28:132    - Unknown word (influences)   -- format of the library influences the writing of the declaratio
packages/documentation/copy/en/declaration-files/Introduction.md:28:38     - Unknown word (strongly)     -- declaration files are strongly encouraged to read this
packages/documentation/copy/en/declaration-files/Introduction.md:28:47     - Unknown word (encouraged)   -- eclaration files are strongly encouraged to read this section
packages/documentation/copy/en/declaration-files/Introduction.md:28:82     - Unknown word (properly)     -- read this section to properly understand how the format
packages/documentation/copy/en/declaration-files/Introduction.md:2:8       - Unknown word (Introduction) -- title: Introduction
packages/documentation/copy/en/declaration-files/Introduction.md:35:1      - Unknown word (Many)         -- Many common mistakes in declaratio
packages/documentation/copy/en/declaration-files/Introduction.md:35:13     - Unknown word (mistakes)     -- Many common mistakes in declaration files
packages/documentation/copy/en/declaration-files/Introduction.md:35:50     - Unknown word (easily)       -- declaration files can be easily avoided.
packages/documentation/copy/en/declaration-files/Introduction.md:35:57     - Unknown word (avoided)      -- files can be easily avoided.
packages/documentation/copy/en/declaration-files/Introduction.md:36:86     - Unknown word (identifies)   -- don-ts.html) section identifies common errors,
packages/documentation/copy/en/declaration-files/Introduction.md:37:1      - Unknown word (describes)    -- describes how to detect them,
packages/documentation/copy/en/declaration-files/Introduction.md:39:1      - Unknown word (Everyone)     -- Everyone should read this section
packages/documentation/copy/en/declaration-files/Introduction.md:39:43     - Unknown word (themselves)   -- this section to help themselves avoid common mistakes
packages/documentation/copy/en/declaration-files/Introduction.md:39:54     - Unknown word (avoid)        -- section to help themselves avoid common mistakes.
packages/documentation/copy/en/declaration-files/Introduction.md:43:5      - Unknown word (seasoned)     -- For seasoned authors interested in
packages/documentation/copy/en/declaration-files/Introduction.md:43:51     - Unknown word (mechanics)    -- interested in the underlying mechanics of how declaration files
packages/documentation/copy/en/declaration-files/Introduction.md:44:74     - Unknown word (explains)     -- deep-dive.html) section explains many advanced concepts
packages/documentation/copy/en/declaration-files/Introduction.md:45:18     - Unknown word (leverage)     -- and shows how to leverage these concepts to create
packages/documentation/copy/en/declaration-files/Introduction.md:45:52     - Unknown word (cleaner)      -- these concepts to create cleaner and more intuitive declaratio
packages/documentation/copy/en/declaration-files/Introduction.md:49:171    - Unknown word (dependent)    -- shows how to manage your dependent packages.
packages/documentation/copy/en/declaration-files/Introduction.md:4:45      - Unknown word (introduction) -- handbook/declaration-files/introduction.html
packages/documentation/copy/en/declaration-files/Introduction.md:51:5      - Unknown word (Find)         -- ## [Find and Install Declaration
packages/documentation/copy/en/declaration-files/Introduction.md:53:108    - Unknown word (offers)       -- consumption.html) section offers a few simple steps to
packages/documentation/copy/en/declaration-files/Introduction.md:53:137    - Unknown word (locate)       -- few simple steps to locate and install corresponding
packages/documentation/copy/en/declaration-files/Introduction.md:8:137     - Unknown word (familiarity)  -- need to assume basic familiarity with the TypeScript
packages/documentation/copy/en/declaration-files/Introduction.md:8:34      - Unknown word (designed)     -- Declaration Files section is designed to teach you how to
packages/documentation/copy/en/declaration-files/Library Structures.md:101:130   - Unknown word (constructed)   -- your module can be _constructed_ using `new`:
packages/documentation/copy/en/declaration-files/Library Structures.md:105:22    - Unknown word (operator)      -- / Note: using 'new' operator on the imported variable
packages/documentation/copy/en/declaration-files/Library Structures.md:109:43    - Unknown word (makes)         -- which when imported, makes changes to other modules
packages/documentation/copy/en/declaration-files/Library Structures.md:10:101    - Unknown word (correspond) -- declaration files which correspond to that pattern.
packages/documentation/copy/en/declaration-files/Library Structures.md:10:26     - Unknown word (identify)   -- guide covers how to identify common library patterns
packages/documentation/copy/en/declaration-files/Library Structures.md:113:15    - Unknown word (matchers)      -- require("jest-matchers-files");
packages/documentation/copy/en/declaration-files/Library Structures.md:119:16    - Unknown word (simply)        -- Many libraries simply expose one or more global
packages/documentation/copy/en/declaration-files/Library Structures.md:128:20    - Unknown word (guidance)      -- You'll usually see guidance in the documentation
packages/documentation/copy/en/declaration-files/Library Structures.md:12:14     - Unknown word (major)      -- Each type of major library structuring
packages/documentation/copy/en/declaration-files/Library Structures.md:12:28     - Unknown word (structuring) -- type of major library structuring pattern has a corresponding
packages/documentation/copy/en/declaration-files/Library Structures.md:134:1     - Unknown word (Today)         -- Today, most popular globally
packages/documentation/copy/en/declaration-files/Library Structures.md:134:13    - Unknown word (popular)       -- Today, most popular globally-accessible
packages/documentation/copy/en/declaration-files/Library Structures.md:134:30    - Unknown word (accessible)    -- most popular globally-accessible libraries are actually
packages/documentation/copy/en/declaration-files/Library Structures.md:135:30    - Unknown word (hard)          -- library documentation is hard to distinguish from
packages/documentation/copy/en/declaration-files/Library Structures.md:135:38    - Unknown word (distinguish)   -- documentation is hard to distinguish from global library
packages/documentation/copy/en/declaration-files/Library Structures.md:136:1     - Unknown word (Before)        -- Before writing a global declaration
packages/documentation/copy/en/declaration-files/Library Structures.md:13:58     - Unknown word (faster)      -- to help you get going faster.
packages/documentation/copy/en/declaration-files/Library Structures.md:140:32    - Unknown word (extremely)     -- library code is usually extremely simple.
packages/documentation/copy/en/declaration-files/Library Structures.md:15:16     - Unknown word (Kinds)       -- ## Identifying Kinds of Libraries
packages/documentation/copy/en/declaration-files/Library Structures.md:15:25     - Unknown word (Libraries)   -- Identifying Kinds of Libraries
packages/documentation/copy/en/declaration-files/Library Structures.md:15:4      - Unknown word (Identifying) -- ## Identifying Kinds of Libraries
packages/documentation/copy/en/declaration-files/Library Structures.md:162:4     - Unknown word (Potentially)   -- // Potentially any runtime
packages/documentation/copy/en/declaration-files/Library Structures.md:172:3     - Unknown word (Assumptions)   -- - Assumptions that DOM primitives
packages/documentation/copy/en/declaration-files/Library Structures.md:178:3     - Unknown word (Calls)         -- - Calls to `define(...)`
packages/documentation/copy/en/declaration-files/Library Structures.md:179:17    - Unknown word (describing)    -- - Documentation describing how to `require` or
packages/documentation/copy/en/declaration-files/Library Structures.md:17:77     - Unknown word (represent)   -- declaration files can represent.
packages/documentation/copy/en/declaration-files/Library Structures.md:183:22    - Unknown word (easy)          -- Because it's usually easy to turn a global library
packages/documentation/copy/en/declaration-files/Library Structures.md:184:1     - Unknown word (However)       -- However, libraries that are
packages/documentation/copy/en/declaration-files/Library Structures.md:188:96    - Unknown word (defines)       -- templates/global-d-ts.html) defines an example library
packages/documentation/copy/en/declaration-files/Library Structures.md:189:23    - Unknown word (Preventing)    -- Be sure to read the ["Preventing Name Conflicts" footnote
packages/documentation/copy/en/declaration-files/Library Structures.md:189:50    - Unknown word (footnote)      -- Preventing Name Conflicts" footnote](#preventing-name-conflicts
packages/documentation/copy/en/declaration-files/Library Structures.md:18:7      - Unknown word (briefly)     -- We'll briefly show how each kind of
packages/documentation/copy/en/declaration-files/Library Structures.md:202:1     - Unknown word (whereas)       -- whereas in a vanilla browser
packages/documentation/copy/en/declaration-files/Library Structures.md:202:14    - Unknown word (vanilla)       -- whereas in a vanilla browser environment
packages/documentation/copy/en/declaration-files/Library Structures.md:210:59    - Unknown word (existence)     -- umdjs/umd) check for the existence of a module loader environmen
packages/documentation/copy/en/declaration-files/Library Structures.md:214:18    - Unknown word (factory)       -- (function (root, factory) {
packages/documentation/copy/en/declaration-files/Library Structures.md:21:12     - Unknown word (hints)       -- We'll give hints on how to identify structure
packages/documentation/copy/en/declaration-files/Library Structures.md:227:49    - Unknown word (demonstrate)   -- libraries will also often demonstrate a "Using in Node.js
packages/documentation/copy/en/declaration-files/Library Structures.md:22:1      - Unknown word (Depending)   -- Depending on the library's documentatio
packages/documentation/copy/en/declaration-files/Library Structures.md:22:18     - Unknown word (library's)   -- Depending on the library's documentation and organizatio
packages/documentation/copy/en/declaration-files/Library Structures.md:22:73     - Unknown word (easier)      -- organization, one might be easier than the other.
packages/documentation/copy/en/declaration-files/Library Structures.md:232:1     - Unknown word (Most)          -- Most popular libraries are
packages/documentation/copy/en/declaration-files/Library Structures.md:23:20     - Unknown word (whichever)   -- We recommend using whichever is more comfortable
packages/documentation/copy/en/declaration-files/Library Structures.md:23:38     - Unknown word (comfortable) -- using whichever is more comfortable to you.
packages/documentation/copy/en/declaration-files/Library Structures.md:23:4      - Unknown word (recommend)   -- We recommend using whichever is more
packages/documentation/copy/en/declaration-files/Library Structures.md:27:1      - Unknown word (Question)    -- Question to ask yourself while
packages/documentation/copy/en/declaration-files/Library Structures.md:27:26     - Unknown word (while)       -- Question to ask yourself while looking at a library
packages/documentation/copy/en/declaration-files/Library Structures.md:27:61     - Unknown word (trying)      -- at a library you are trying to type.
packages/documentation/copy/en/declaration-files/Library Structures.md:286:4     - Unknown word (Footnotes)     -- ## Footnotes
packages/documentation/copy/en/declaration-files/Library Structures.md:291:13    - Unknown word (discourage)    -- We strongly discourage this as it leads to
packages/documentation/copy/en/declaration-files/Library Structures.md:291:35    - Unknown word (leads)         -- discourage this as it leads to possible unresolvable
packages/documentation/copy/en/declaration-files/Library Structures.md:291:53    - Unknown word (unresolvable)  -- it leads to possible unresolvable name conflicts when
packages/documentation/copy/en/declaration-files/Library Structures.md:293:18    - Unknown word (follow)        -- A simple rule to follow is to only declare types
packages/documentation/copy/en/declaration-files/Library Structures.md:293:66    - Unknown word (whatever)      -- types _namespaced_ by whatever global variable the
packages/documentation/copy/en/declaration-files/Library Structures.md:294:55    - Unknown word (cats)          -- defines the global value 'cats', you should write
packages/documentation/copy/en/declaration-files/Library Structures.md:298:13    - Unknown word (Kitty)         -- interface KittySettings {}
packages/documentation/copy/en/declaration-files/Library Structures.md:29:15     - Unknown word (obtain)      -- 1. How do you obtain the library?
packages/documentation/copy/en/declaration-files/Library Structures.md:306:11    - Unknown word (Cats)          -- interface CatsKittySettings {}
packages/documentation/copy/en/declaration-files/Library Structures.md:309:20    - Unknown word (ensures)       -- This guidance also ensures that the library can
packages/documentation/copy/en/declaration-files/Library Structures.md:309:52    - Unknown word (transitioned)  -- that the library can be transitioned to UMD without breaking
packages/documentation/copy/en/declaration-files/Library Structures.md:309:80    - Unknown word (breaking)      -- transitioned to UMD without breaking declaration file users
packages/documentation/copy/en/declaration-files/Library Structures.md:311:33    - Unknown word (Call)          -- Impact of ES6 on Module Call Signatures
packages/documentation/copy/en/declaration-files/Library Structures.md:311:38    - Unknown word (Signatures)    -- of ES6 on Module Call Signatures
packages/documentation/copy/en/declaration-files/Library Structures.md:311:9     - Unknown word (Impact)        -- ### The Impact of ES6 on Module Call
packages/documentation/copy/en/declaration-files/Library Structures.md:313:65    - Unknown word (callable)      -- expose themselves as a callable function when imported
packages/documentation/copy/en/declaration-files/Library Structures.md:314:18    - Unknown word (typical)       -- For example, the typical Express usage looks
packages/documentation/copy/en/declaration-files/Library Structures.md:321:8     - Unknown word (compliant)     -- In ES6-compliant module loaders, the
packages/documentation/copy/en/declaration-files/Library Structures.md:324:78    - Unknown word (constructable) -- export for a callable/constructable object;
packages/documentation/copy/en/declaration-files/Library Structures.md:325:16    - Unknown word (commonly)      -- module loaders commonly detect this situation
packages/documentation/copy/en/declaration-files/Library Structures.md:325:37    - Unknown word (situation)     -- commonly detect this situation automatically and replace
packages/documentation/copy/en/declaration-files/Library Structures.md:35:76     - Unknown word (statements)  -- or `import`/`export` statements?
packages/documentation/copy/en/declaration-files/Library Structures.md:37:5      - Unknown word (Smaller)     -- ### Smaller samples for different
packages/documentation/copy/en/declaration-files/Library Structures.md:39:5      - Unknown word (Modular)     -- ### Modular Libraries
packages/documentation/copy/en/declaration-files/Library Structures.md:41:1      - Unknown word (Almost)      -- Almost every modern Node.js
packages/documentation/copy/en/declaration-files/Library Structures.md:41:14     - Unknown word (modern)      -- Almost every modern Node.js library falls
packages/documentation/copy/en/declaration-files/Library Structures.md:41:37     - Unknown word (falls)       -- modern Node.js library falls into the module family
packages/documentation/copy/en/declaration-files/Library Structures.md:42:69     - Unknown word (loader)      -- environment with a module loader.
packages/documentation/copy/en/declaration-files/Library Structures.md:43:58     - Unknown word (loaded)      -- Node.js and must be loaded using the CommonJS
packages/documentation/copy/en/declaration-files/Library Structures.md:45:101    - Unknown word (notions)     -- RequireJS have similar notions of _importing_ a _module
packages/documentation/copy/en/declaration-files/Library Structures.md:45:113    - Unknown word (importing)   -- similar notions of _importing_ a _module_.
packages/documentation/copy/en/declaration-files/Library Structures.md:4:53      - Unknown word (structures) -- declaration-files/library-structures.html
packages/documentation/copy/en/declaration-files/Library Structures.md:52:36     - Unknown word (keyword)     -- or ES6, the `import` keyword serves the same purpose
packages/documentation/copy/en/declaration-files/Library Structures.md:52:44     - Unknown word (serves)      -- the `import` keyword serves the same purpose:
packages/documentation/copy/en/declaration-files/Library Structures.md:58:22     - Unknown word (modular)     -- You'll typically see modular libraries include one
packages/documentation/copy/en/declaration-files/Library Structures.md:58:8      - Unknown word (typically)   -- You'll typically see modular libraries
packages/documentation/copy/en/declaration-files/Library Structures.md:72:106    - Unknown word (sure)        -- #umd) module, so be sure to check the code or
packages/documentation/copy/en/declaration-files/Library Structures.md:78:3      - Unknown word (Unconditional) -- - Unconditional calls to `require` or
packages/documentation/copy/en/declaration-files/Library Structures.md:79:3      - Unknown word (Declarations)  -- - Declarations like `import * as a
packages/documentation/copy/en/declaration-files/Library Structures.md:82:11     - Unknown word (rarely)        -- They will rarely have:
packages/documentation/copy/en/declaration-files/Library Structures.md:88:11     - Unknown word (four)          -- There are four templates available
packages/documentation/copy/en/declaration-files/Library Structures.md:8:1       - Unknown word (Broadly)    -- Broadly speaking, the way you
packages/documentation/copy/en/declaration-files/Library Structures.md:91:107    - Unknown word (overview)      -- module-d-ts.html) for an overview on the way they all
packages/documentation/copy/en/declaration-files/Publishing.md:113:21    - Unknown word (tells)      -- This `package.json` tells TypeScript to first
packages/documentation/copy/en/declaration-files/Publishing.md:114:100   - Unknown word (reads)      -- to the package, and reads from the package's
packages/documentation/copy/en/declaration-files/Publishing.md:114:71    - Unknown word (relative)   -- path you've imported relative to the package, and
packages/documentation/copy/en/declaration-files/Publishing.md:118:8     - Unknown word (above)      -- In the above example, if we're importing
packages/documentation/copy/en/declaration-files/Publishing.md:122:148   - Unknown word (redirected) -- and earlier will be redirected to `[...]/node_modules
packages/documentation/copy/en/declaration-files/Publishing.md:122:52    - Unknown word (matched)    -- `typesVersions` get matched, TypeScript falls back
packages/documentation/copy/en/declaration-files/Publishing.md:126:118   - Unknown word (differently) -- the file to resolve differently by passing in the exact
packages/documentation/copy/en/declaration-files/Publishing.md:141:11    - Unknown word (redirections) -- Note that redirections only affect the _external
packages/documentation/copy/en/declaration-files/Publishing.md:141:191   - Unknown word (containing)   -- the previous example containing `import * as foo from
packages/documentation/copy/en/declaration-files/Publishing.md:141:29    - Unknown word (affect)       -- that redirections only affect the _external_ API of
packages/documentation/copy/en/declaration-files/Publishing.md:143:4     - Unknown word (Matching)     -- ## Matching behavior
packages/documentation/copy/en/declaration-files/Publishing.md:147:4     - Unknown word (Multiple)     -- ## Multiple fields
packages/documentation/copy/en/declaration-files/Publishing.md:149:70    - Unknown word (specified)    -- where each field name is specified by the range to match
packages/documentation/copy/en/declaration-files/Publishing.md:14:91     - Unknown word (Both)       -- with your source code. Both TypeScript and JavaScript
packages/documentation/copy/en/declaration-files/Publishing.md:163:1     - Unknown word (Since)        -- Since ranges have the potential
packages/documentation/copy/en/declaration-files/Publishing.md:163:45    - Unknown word (determining)  -- potential to overlap, determining which redirect applies
packages/documentation/copy/en/declaration-files/Publishing.md:163:63    - Unknown word (redirect)     -- overlap, determining which redirect applies is order-specific
packages/documentation/copy/en/declaration-files/Publishing.md:163:72    - Unknown word (applies)      -- determining which redirect applies is order-specific.
packages/documentation/copy/en/declaration-files/Publishing.md:164:122   - Unknown word (reversing)    -- TypeScript 3.2 and above, reversing the order could have
packages/documentation/copy/en/declaration-files/Publishing.md:164:206   - Unknown word (equivalent)   -- sample would not be equivalent to the following.
packages/documentation/copy/en/declaration-files/Publishing.md:16:1      - Unknown word (Otherwise)  -- Otherwise, we recommend submitting
packages/documentation/copy/en/declaration-files/Publishing.md:16:25     - Unknown word (submitting) -- Otherwise, we recommend submitting the types to DefinitelyTyped
packages/documentation/copy/en/declaration-files/Publishing.md:181:192   - Unknown word (publisher)    -- nitelyTyped) using the [types-publisher tool](https://github
packages/documentation/copy/en/declaration-files/Publishing.md:21:43     - Unknown word (bundled)    -- property to point to your bundled declaration file.
packages/documentation/copy/en/declaration-files/Publishing.md:26:12     - Unknown word (awesome)    -- "name": "awesome",
packages/documentation/copy/en/declaration-files/Publishing.md:27:14     - Unknown word (Vandelay)   -- "author": "Vandelay Industries",
packages/documentation/copy/en/declaration-files/Publishing.md:34:36     - Unknown word (synonymous) -- "typings"` field is synonymous with `types`, and could
packages/documentation/copy/en/declaration-files/Publishing.md:40:44     - Unknown word (depend)     -- declaration packages you depend on are marked appropriately
packages/documentation/copy/en/declaration-files/Publishing.md:4:45      - Unknown word (publishing) -- handbook/declaration-files/publishing.html
packages/documentation/copy/en/declaration-files/Publishing.md:58:1      - Unknown word (Here)       -- Here, our package depends
packages/documentation/copy/en/declaration-files/Publishing.md:63:125    - Unknown word (manually)   -- would have needed to manually install those packages
packages/documentation/copy/en/declaration-files/Publishing.md:84:14     - Unknown word (revisit)    -- Make sure to revisit the [Consuming dependencies
packages/documentation/copy/en/declaration-files/Publishing.md:8:19      - Unknown word (authored)   -- Now that you have authored a declaration file following
packages/documentation/copy/en/declaration-files/Publishing.md:90:11     - Unknown word (combine)    -- - _Don't_ combine it with yours, keep
packages/documentation/copy/en/declaration-files/Publishing.md:90:27     - Unknown word (yours)      -- Don't_ combine it with yours, keep each in their
packages/documentation/copy/en/declaration-files/Publishing.md:96:17     - Unknown word (opens)      -- When TypeScript opens a `package.json` file
packages/documentation/copy/en/declaration-files/Templates.md:5:11      - Unknown word (Different)  -- oneline: "Different d.ts module template
packages/documentation/copy/en/declaration-files/Templates.md:8:9       - Unknown word (modifying)  -- [global-modifying-module.d.ts](./templates
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:11:17     - Unknown word (somewhat)   -- This pattern is somewhat dangerous due to the
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:11:26     - Unknown word (dangerous)  -- pattern is somewhat dangerous due to the possibility
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:11:47     - Unknown word (possibility) -- dangerous due to the possibility of runtime conflicts
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:16:30     - Unknown word (generally)   -- modifying modules are generally easy to identify from
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:17:92     - Unknown word (effects)     -- call to activate their effects.
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:23:5      - Unknown word (unused)      -- var unused = require("magic-string
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:28:4      - Unknown word (Creates)     -- // Creates new methods on built
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:2:17      - Unknown word (Modifying)  -- title: "Global: Modifying Module"
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:39:31     - Unknown word (LIBRARY)     -- definitions for [~THE LIBRARY NAME~] [~OPTIONAL VERSION
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:39:48     - Unknown word (OPTIONAL)    -- THE LIBRARY NAME~] [~OPTIONAL VERSION NUMBER~]
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:41:22     - Unknown word (YOUR)        -- / Definitions by: [~YOUR NAME~] <[~A URL FOR
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:44:9      - Unknown word (place)       -- *~ and place it in a folder with
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:54:64     - Unknown word (augment)     -- global namespace, or augment
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:58:17     - Unknown word (opts)        -- fancyFormat(opts: StringFormatOptions
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:58:5      - Unknown word (fancy)       -- fancyFormat(opts: StringFormatOptio
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:62:59     - Unknown word (usual)       -- values, write them as usual */
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:64:3      - Unknown word (fanciness)   -- fancinessLevel: number;
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:67:18     - Unknown word (declaring)   -- /*~ For example, declaring a method on the module
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:67:55     - Unknown word (addition)    -- method on the module (in addition to its global side effects
packages/documentation/copy/en/declaration-files/templates/global-modifying-module.d.ts.md:9:29      - Unknown word (alters)     -- global-modifying module_ alters existing values in the
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:224:1     - Unknown word (While)      -- While this is legal in CommonJS
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:225:108   - Unknown word (intending)   -- policy, but developers intending to transition to an
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:225:166   - Unknown word (aware)       -- module loader should be aware of this.
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:225:30    - Unknown word (agnostic)   -- TypeScript is loader-agnostic, there is no compile
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:225:65    - Unknown word (enforcement) -- there is no compile-time enforcement of this policy, but
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:225:97    - Unknown word (developers)  -- of this policy, but developers intending to transition
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:240:20    - Unknown word (shims)       -- some module loader shims will automatically detect
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:244:45    - Unknown word (mirror)      -- declaration files should mirror the layout of the library
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:246:15    - Unknown word (consist)     -- A library can consist of multiple modules
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:266:31    - Unknown word (thus)        -- declaration files should thus be
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:284:33    - Unknown word (original)    -- declaration for the original type and add new members
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:285:33    - Unknown word (Binary)      -- example, this adds a 'toBinaryString' method with overloads
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:304:5     - Unknown word (padding)     -- padding: number;
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:83:114    - Unknown word (plain)      -- module being changed is a plain module or UMD module
packages/documentation/copy/en/declaration-files/templates/global-plugin.d.ts.md:92:43     - Unknown word (raise)      -- modifying modules_, these raise the possibility of runtime
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:117:7     - Unknown word (There's)      -- //~ There's some class we can create
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:125:26    - Unknown word (purr)         -- /~ We can invoke 'c.purr()' from a 'Cat' instance
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:12:24     - Unknown word (nearly)     -- mention that global nearly always means 'browser
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:12:4      - Unknown word (mention)    -- 1. mention that global nearly always
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:130:39    - Unknown word (weight)       -- myLib.CatSettings = { weight: 5, name: "Maru" };
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:130:57    - Unknown word (Maru)         -- { weight: 5, name: "Maru" };'
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:134:5     - Unknown word (tail)         -- tailLength?: number;
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:134:9     - Unknown word (Length)       -- tailLength?: number;
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:13:42     - Unknown word (suspect)    -- global library that you suspect is UMD, look for instructions
packages/documentation/copy/en/declaration-files/templates/global.d.ts.md:13:67     - Unknown word (instructions) -- suspect is UMD, look for instructions on
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:10:25     - Unknown word (thrown)     -- Not clear why UMD is thrown in here.
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:11:4      - Unknown word (Give)       -- 2. Give both commonjs and ES
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:38:32     - Unknown word (MODULE)     -- import x = require('[~THE MODULE~]');
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:40:29     - Unknown word (Synthetic)     -- Alternatively, if --allowSyntheticDefaultImports or
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:40:4      - Unknown word (Alternatively) -- // Alternatively, if --allowSyntheticDefaultIm
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:41:25     - Unknown word (turned)        -- -esModuleInterop is turned on, this file can also
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:47:25     - Unknown word (workarounds)   -- to understand common workarounds for this limitation
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:47:46     - Unknown word (limitation)    -- workarounds for this limitation of ES6 modules.
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:50:12     - Unknown word (outside)       -- *~ loaded outside a module loader environment
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:55:22     - Unknown word (specifies)     -- *~ This declaration specifies that the class constructor
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:56:12     - Unknown word (exported)      -- *~ is the exported object from the file
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:60:16     - Unknown word (module's)      -- /*~ Write your module's methods and properties
packages/documentation/copy/en/declaration-files/templates/module-class.d.ts.md:72:22     - Unknown word (decide)        -- *~ Note that if you decide to include this namespace
packages/documentation/copy/en/declaration-files/templates/module-function.d.ts.md:58:31     - Unknown word (Often)      -- them in this block. Often you will want to describe
packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md:18:14     - Unknown word (Greet)      -- greeter.hyperGreet();
packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md:51:13     - Unknown word (expand)     -- *~ then we expand the existing declaration
packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md:55:9      - Unknown word (Greets)     -- /** Greets even better! */
packages/documentation/copy/en/declaration-files/templates/module-plugin.d.ts.md:61:24     - Unknown word (merging)    -- This uses [declaration merging](/docs/handbook/declaration
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:110:4     - Unknown word (Handling)   -- ## Handling Many Consuming Import
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:11:150    - Unknown word (numerical)  -- exports a function and a numerical constant:
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:124:1     - Unknown word (Covering)   -- Covering all of these cases requires
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:136:4     - Unknown word (Allows)     -- // Allows for { fastify }
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:14:10     - Unknown word (Interval)   -- const maxInterval = 12;
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:171:105   - Unknown word (richer)     -- generic-types) to provide richer type information:
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:171:40    - Unknown word (generics)   -- good case for [using generics](/docs/handbook/generics
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:184:27    - Unknown word (propagates) -- the type of the array propagates into the `ArrayMetadata
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:190:1     - Unknown word (Trying)     -- Trying to describe the runtime
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:190:32    - Unknown word (relationship) -- describe the runtime relationship of JavaScript code can
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:193:69    - Unknown word (choose)       -- to describe that you choose to namespace them inside
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:196:9     - Unknown word (represents)   -- // This represents the JavaScript class
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:202:22    - Unknown word (merged)       -- / This namespace is merged with the API class and
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:203:35    - Unknown word (away)         -- types which are nested away in their own sections
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:220:108   - Unknown word (contexts)     -- global scope in UMD contexts:
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:228:16    - Unknown word (idea)         -- To give you an idea of how all these pieces
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:228:54    - Unknown word (together)     -- these pieces can come together, here is a reference
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:300:12    - Unknown word (planning)     -- If you are planning on submitting these
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:300:72    - Unknown word (everyone)     -- DefinitelyTyped for everyone to also use, then we
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:304:41    - Unknown word (breaks)       -- usage of the module breaks, and start to fill out
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:304:62    - Unknown word (fill)         -- breaks, and start to fill out the index.d.ts
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:311:34    - Unknown word (braces)       -- template inside the braces of the declare module
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:36:16     - Unknown word (ratified)   -- ES Modules was ratified by TC39 in 2015 as part
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:52:83     - Unknown word (regular)    -- for example here is a regular expression module:
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:76:14     - Unknown word (exporting)  -- One style of exporting in CommonJS is to export
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:7:4       - Unknown word (Comparing)  -- ## Comparing JavaScript to an example
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:96:171    - Unknown word (older)      -- syntax instead. This older syntax is harder to
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:96:187    - Unknown word (harder)     -- This older syntax is harder to use but works everywhere
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:96:211    - Unknown word (everywhere) -- harder to use but works everywhere.
packages/documentation/copy/en/declaration-files/templates/module.d.ts.md:96:99     - Unknown word (Definitely) -- re submitting a PR to Definitely Typed, you'll have to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:105:6     - Unknown word (Boxed)         -- #### Boxed types
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:107:22    - Unknown word (equivalents)   -- JavaScript has boxed equivalents of primitive types that
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:107:58    - Unknown word (contain)       -- primitive types that contain the
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:109:1     - Unknown word (reflects)      -- reflects this with, for example
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:109:38    - Unknown word (difference)    -- with, for example, the difference between the primitive
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:10:27     - Unknown word (programmers) -- JavaScript so that the programmers at Microsoft could bring
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:111:9     - Unknown word (since)         -- needed, since their methods return
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:114:7     - Unknown word (Exponential)   -- (1).toExponential();
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:119:33    - Unknown word (numeric)       -- calling a method on a numeric literal requires it
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:11:29     - Unknown word (programs)    -- traditional object-oriented programs to the web. As it has
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:11:60     - Unknown word (developed)   -- to the web. As it has developed, TypeScript's type
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:120:1     - Unknown word (parentheses)   -- parentheses to aid the parser.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:122:5     - Unknown word (Gradual)       -- ### Gradual typing
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:126:30    - Unknown word (turns)         -- overstatement. It just turns off the type checker
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:126:7     - Unknown word (overstatement) -- is an overstatement. It just turns off the
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:127:1     - Unknown word (wherever)      -- wherever it appears. For example
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:127:13    - Unknown word (appears)       -- wherever it appears. For example, you can
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:128:17    - Unknown word (marking)       -- `any[]` without marking the value in any way
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:12:12     - Unknown word (evolved)     -- system has evolved to model code written
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:12:45     - Unknown word (native)      -- model code written by native JavaScripters. The
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:12:56     - Unknown word (Scripters)   -- written by native JavaScripters. The
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:131:12    - Unknown word (Implicit)      -- // with "noImplicitAny": false in tsconfig
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:138:45    - Unknown word (anywhere)      -- expression of type `any` anywhere:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:13:1      - Unknown word (resulting)   -- resulting system is powerful,
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:13:21     - Unknown word (powerful)    -- resulting system is powerful, interesting and messy
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:13:47     - Unknown word (messy)       -- powerful, interesting and messy.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:144:10    - Unknown word (contagious)    -- `any` is contagious, too &mdash; if you
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:148:5     - Unknown word (sepsis)        -- let sepsis = anys[0] + anys[1]
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:151:33    - Unknown word (produces)      -- error when TypeScript produces an `any`, use
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:154:5     - Unknown word (Structural)    -- ### Structural typing
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:156:33    - Unknown word (concept)       -- typing is a familiar concept to most functional
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:157:14    - Unknown word (although)      -- programmers, although Haskell and most MLs
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:158:1     - Unknown word (structurally)  -- structurally typed. Its basic form
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:15:43     - Unknown word (Haskell)     -- designed for working Haskell or ML programmers
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:168:9     - Unknown word (assignable)    -- type is assignable to `{ x: string }` since
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:170:46    - Unknown word (prevent)       -- extra property doesn't prevent assignment, it
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:173:45    - Unknown word (assignability) -- name to a type; for assignability purposes
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:176:41    - Unknown word (respect)       -- from interfaces with respect to recursive
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:176:52    - Unknown word (recursive)     -- interfaces with respect to recursive
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:17:12     - Unknown word (differs)     -- TypeScript differs from Haskell's type
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:17:25     - Unknown word (Haskell's)   -- TypeScript differs from Haskell's type system. It also
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:18:50     - Unknown word (arise)       -- TypeScript's type system that arise from its
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:194:5     - Unknown word (Unions)        -- ### Unions
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:196:32    - Unknown word (untagged)      -- TypeScript, union types are untagged. In other words, they
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:197:1     - Unknown word (discriminated) -- discriminated unions like `data` in
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:197:15    - Unknown word (unions)        -- discriminated unions like `data` in Haskell
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:198:1     - Unknown word (discriminate)  -- discriminate types in a union using
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:19:1      - Unknown word (modelling)   -- modelling of JavaScript code.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:216:22    - Unknown word (convert)       -- // finally, just convert a string to another
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:216:8     - Unknown word (finally)       -- // finally, just convert a string
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:223:1     - Unknown word (conveniently)  -- conveniently leaving the object type
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:223:14    - Unknown word (leaving)       -- conveniently leaving the object type for
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:224:48    - Unknown word (difficult)     -- generate unions that are difficult to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:225:1     - Unknown word (differentiate) -- differentiate at runtime. For new
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:22:1      - Unknown word (practice)    -- practice, object-oriented programs
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:245:6     - Unknown word (Intersections) -- #### Intersections
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:247:44    - Unknown word (intersections) -- TypeScript also has intersections:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:250:6     - Unknown word (Combined)      -- type Combined = { a: number } & {
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:251:6     - Unknown word (Conflicting)   -- type Conflicting = { a: number } & {
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:25:4      - Unknown word (Prerequisites) -- ## Prerequisites
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:260:16    - Unknown word (subtypes)      -- Unit types are subtypes of primitive types that
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:263:12    - Unknown word (strings)       -- well-known strings instead. Unions of string
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:271:28    - Unknown word (widens)        -- needed, the compiler _widens_ &mdash; converts to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:271:44    - Unknown word (converts)      -- compiler _widens_ &mdash; converts to a
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:273:60    - Unknown word (hamper)        -- mutability, which can hamper some
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:2:23      - Unknown word (Functional) -- title: TypeScript for Functional Programmers
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:2:34      - Unknown word (Programmers) -- TypeScript for Functional Programmers
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:303:5     - Unknown word (Contextual)    -- ### Contextual typing
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:305:21    - Unknown word (obvious)       -- TypeScript has some obvious places where it can
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:30:22     - Unknown word (descended)     -- Type syntax of a C-descended language.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:312:13    - Unknown word (infers)        -- But it also infers types in a few other
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:313:11    - Unknown word (worked)        -- if you've worked with other C-syntax
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:320:41    - Unknown word (despite)       -- in this example also, despite the fact that `T` and
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:320:53    - Unknown word (fact)          -- example also, despite the fact that `T` and `U`
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:321:15    - Unknown word (inferred)      -- have not been inferred before the call. In
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:323:30    - Unknown word (causing)       -- to infer `U=string`, causing `sns` to have the type
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:327:35    - Unknown word (prefers)       -- right, so TypeScript prefers to declare `map` with
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:334:30    - Unknown word (recursively)   -- Contextual typing also works recursively through object literals
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:334:57    - Unknown word (literals)      -- recursively through object literals, and
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:33:18     - Unknown word (Good)          -- [JavaScript: The Good Parts](https://shop
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:341:31    - Unknown word (HERE)          -- inference = "INSERT STATE HERE";
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:345:20    - Unknown word (determined)    -- The type of `o` is determined to be `{ inference:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:347:33    - Unknown word (contextually)  -- Declaration initializers are contextually typed by the
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:348:4     - Unknown word (declaration's) -- declaration's type: `{ inference:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:349:39    - Unknown word (contextual)    -- type of a call uses the contextual type for inferences
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:349:59    - Unknown word (inferences)    -- contextual type for inferences,
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:34:20     - Unknown word (skip)          -- You may be able to skip the book if you know
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:355:5     - Unknown word (completions)   -- get completions for the property `inference
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:357:1     - Unknown word (Altogether)    -- Altogether, this feature can make
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:358:8     - Unknown word (unifying)      -- like a unifying type inference engine
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:35:17     - Unknown word (lexically)     -- a call-by-value lexically scoped language with
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:362:18    - Unknown word (mere)          -- Type aliases are mere aliases, just like
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:364:38    - Unknown word (succeed)       -- but does not always succeed.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:36:5      - Unknown word (much)          -- not much else.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:371:43    - Unknown word (tagged)        -- equivalent to `newtype` is a _tagged intersection_:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:371:5     - Unknown word (closest)       -- The closest equivalent to `newtype
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:377:44    - Unknown word (except)        -- like a normal string, except that the compiler
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:378:1     - Unknown word (thinks)        -- thinks it has a property named
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:379:56    - Unknown word (assigned)      -- FString` can still be assigned to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:380:33    - Unknown word (round)         -- but not the other way round.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:382:5     - Unknown word (Discriminated) -- ### Discriminated Unions
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:384:59    - Unknown word (discriminant)  -- union of types with discriminant
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:389:14    - Unknown word (circle)        -- | { kind: "circle"; radius: number }
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:395:34    - Unknown word (identical)     -- Each variant has an identical property with a different
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:396:51    - Unknown word (leading)       -- normal union type; the leading `|` is
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:39:10     - Unknown word (Programming)   -- [The C++ Programming Language](http://www
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:40:50     - Unknown word (Unlike)        -- C-style type syntax. Unlike C++,
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:419:1     - Unknown word (covered)       -- covered, the return type of
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:421:1     - Unknown word (Also)          -- Also, unlike Haskell, common
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:421:7     - Unknown word (unlike)        -- Also, unlike Haskell, common properties
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:422:5     - Unknown word (usefully)      -- can usefully discriminate multiple
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:446:10    - Unknown word (lift)          -- function liftArray<T>(t: T): Array
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:451:18    - Unknown word (requirement)   -- There is no case requirement, but type parameters
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:451:55    - Unknown word (conventionally) -- type parameters are conventionally
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:452:18    - Unknown word (letters)        -- single uppercase letters. Type parameters can
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:452:55    - Unknown word (constrained)    -- parameters can also be constrained to a
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:453:13    - Unknown word (behaves)        -- type, which behaves a bit like type class
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:464:23    - Unknown word (structural)     -- Because TypeScript is structural, it doesn't need type
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:465:26    - Unknown word (Specifically)   -- as nominal systems. Specifically, they are not needed
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:465:9     - Unknown word (nominal)        -- much as nominal systems. Specifically
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:467:2     - Unknown word (propagate)      -- _propagate_ type information, such
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:467:39    - Unknown word (constraining)   -- information, such as constraining parameters to be
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:476:33    - Unknown word (necessary)      -- first `length`, T is not necessary; notice that it's only
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:477:1     - Unknown word (referenced)     -- referenced once, so it's not being
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:477:44    - Unknown word (constrain)      -- s not being used to constrain the type of the
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:480:6     - Unknown word (Higher)         -- #### Higher-kinded types
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:482:26    - Unknown word (higher)         -- TypeScript does not have higher kinded types, so the
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:490:45    - Unknown word (currying)       -- mdash; heavy use of currying and function
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:491:1     - Unknown word (composition)    -- composition &mdash; is possible
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:492:37    - Unknown word (fails)          -- type inference often fails for point-free programs
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:49:17     - Unknown word (Explanation)   -- | Type        | Explanation
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:500:39    - Unknown word (implicitly)     -- import` or `export` is implicitly a module:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:526:27    - Unknown word (individually)   -- marking each export individually:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:533:5     - Unknown word (latter)         -- The latter style is more common
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:540:16    - Unknown word (referent)       -- immutable. The referent is still mutable:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:548:12    - Unknown word (additionally)   -- TypeScript additionally has a `readonly` modifier
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:548:42    - Unknown word (modifier)       -- additionally has a `readonly` modifier for properties.
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:569:52    - Unknown word (removes)        -- ReadonlyArray<T>` type that removes
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:56:4      - Unknown word (Null)          -- | `Null` | equivalent to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:570:6     - Unknown word (affecting)      -- side-affecting methods and prevents
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:57:4      - Unknown word (Undefined)     -- | `Undefined` | also equivalent to
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:580:26    - Unknown word (assertion)      -- can also use a const-assertion, which operates on arrays
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:580:43    - Unknown word (operates)       -- const-assertion, which operates on arrays and
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:590:1     - Unknown word (consistently)   -- consistently used in TypeScript code
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:596:41    - Unknown word (finish)         -- Handbook [from start to finish](/docs/handbook/intro
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:597:3     - Unknown word (Explore)        -- - Explore the [Playground examples
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:6:55      - Unknown word (functional)  -- have a background in functional programming
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:81:20     - Unknown word (mutable)       -- | `T[]`          | mutable arrays, also written
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:82:20     - Unknown word (tuples)        -- | `[T, T]`       | tuples, which are fixed-length
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:92:15     - Unknown word (precisely)     -- // or more precisely:
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:97:39     - Unknown word (mirrors)       -- type syntax closely mirrors object literal value
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:9:12      - Unknown word (began)       -- TypeScript began its life as an attempt
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:9:33      - Unknown word (attempt)     -- began its life as an attempt to bring traditional
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:9:44      - Unknown word (bring)       -- life as an attempt to bring traditional object-oriented
packages/documentation/copy/en/get-started/TS for Functional Programmers.md:9:50      - Unknown word (traditional) -- an attempt to bring traditional object-oriented types
packages/documentation/copy/en/get-started/TS for JS Programmers.md:103:27    - Unknown word (annotate)   -- can use interfaces to annotate parameters and return
packages/documentation/copy/en/get-started/TS for JS Programmers.md:11:25     - Unknown word (provides)   -- example, JavaScript provides language primitives
packages/documentation/copy/en/get-started/TS for JS Programmers.md:121:340   - Unknown word (declares)   -- someone using this type declares what the type is),
packages/documentation/copy/en/get-started/TS for JS Programmers.md:123:31    - Unknown word (syntaxes)   -- see that there are two syntaxes for building types:
packages/documentation/copy/en/get-started/TS for JS Programmers.md:125:4     - Unknown word (Composing)  -- ## Composing Types
packages/documentation/copy/en/get-started/TS for JS Programmers.md:137:65    - Unknown word (classed)    -- you'll see that it is classed as `boolean`. That's
packages/documentation/copy/en/get-started/TS for JS Programmers.md:13:136    - Unknown word (unexpected) -- that it can highlight unexpected behavior in your code
packages/documentation/copy/en/get-started/TS for JS Programmers.md:13:170    - Unknown word (lowering)   -- behavior in your code, lowering the chance of bugs.
packages/documentation/copy/en/get-started/TS for JS Programmers.md:13:89     - Unknown word (benefit)    -- TypeScript code. The main benefit of TypeScript is that
packages/documentation/copy/en/get-started/TS for JS Programmers.md:142:42    - Unknown word (minimized)  -- open" | "closed" | "minimized";
packages/documentation/copy/en/get-started/TS for JS Programmers.md:143:31    - Unknown word (unlocked)   -- LockStates = "locked" | "unlocked";
packages/documentation/copy/en/get-started/TS for JS Programmers.md:144:6     - Unknown word (Positive)   -- type PositiveOddNumbersUnderTen =
packages/documentation/copy/en/get-started/TS for JS Programmers.md:15:26     - Unknown word (brief)      -- tutorial provides a brief overview of TypeScript
packages/documentation/copy/en/get-started/TS for JS Programmers.md:15:6      - Unknown word (tutorial)   -- This tutorial provides a brief overview
packages/documentation/copy/en/get-started/TS for JS Programmers.md:170:10    - Unknown word (wrap)       -- function wrapInArray(obj: string
packages/documentation/copy/en/get-started/TS for JS Programmers.md:193:11    - Unknown word (Backpack)   -- interface Backpack<Type> {
packages/documentation/copy/en/get-started/TS for JS Programmers.md:198:19    - Unknown word (shortcut)   -- // This line is a shortcut to tell TypeScript there
packages/documentation/copy/en/get-started/TS for JS Programmers.md:199:21    - Unknown word (backpack)   -- // constant called `backpack`, and to not worry about
packages/documentation/copy/en/get-started/TS for JS Programmers.md:199:43    - Unknown word (worry)      -- backpack`, and to not worry about where it came
packages/documentation/copy/en/get-started/TS for JS Programmers.md:199:64    - Unknown word (came)       -- worry about where it came from.
packages/documentation/copy/en/get-started/TS for JS Programmers.md:20:40     - Unknown word (assigning)  -- creating a variable and assigning it to a particular value
packages/documentation/copy/en/get-started/TS for JS Programmers.md:20:58     - Unknown word (particular) -- and assigning it to a particular value, TypeScript will
packages/documentation/copy/en/get-started/TS for JS Programmers.md:211:108   - Unknown word (sometimes)  -- values have. This is sometimes called "duck typing
packages/documentation/copy/en/get-started/TS for JS Programmers.md:211:126   - Unknown word (duck)       -- is sometimes called "duck typing" or "structural
packages/documentation/copy/en/get-started/TS for JS Programmers.md:211:26    - Unknown word (principles) -- of TypeScript's core principles is that type checking
packages/documentation/copy/en/get-started/TS for JS Programmers.md:230:193   - Unknown word (passes)     -- same shape, so the code passes.
packages/documentation/copy/en/get-started/TS for JS Programmers.md:230:82    - Unknown word (compares)   -- However, TypeScript compares the shape of `point
packages/documentation/copy/en/get-started/TS for JS Programmers.md:255:56    - Unknown word (conform)    -- classes and objects conform to shapes:
packages/documentation/copy/en/get-started/TS for JS Programmers.md:255:67    - Unknown word (shapes)     -- and objects conform to shapes:
packages/documentation/copy/en/get-started/TS for JS Programmers.md:27:153    - Unknown word (needing)    -- type-system without needing to add extra characters
packages/documentation/copy/en/get-started/TS for JS Programmers.md:27:174    - Unknown word (characters) -- needing to add extra characters to make types explicit
packages/documentation/copy/en/get-started/TS for JS Programmers.md:282:107   - Unknown word (implementation) -- match, regardless of the implementation details.
packages/documentation/copy/en/get-started/TS for JS Programmers.md:282:89    - Unknown word (regardless) -- will say they match, regardless of the implementation
packages/documentation/copy/en/get-started/TS for JS Programmers.md:29:133    - Unknown word (hood)       -- TypeScript under the hood to make it easier to
packages/documentation/copy/en/get-started/TS for JS Programmers.md:29:36     - Unknown word (Visual)     -- written JavaScript in Visual Studio Code, and had
packages/documentation/copy/en/get-started/TS for JS Programmers.md:29:43     - Unknown word (Studio)     -- JavaScript in Visual Studio Code, and had editor
packages/documentation/copy/en/get-started/TS for JS Programmers.md:29:76     - Unknown word (completion) -- and had editor auto-completion. Visual Studio Code
packages/documentation/copy/en/get-started/TS for JS Programmers.md:31:4      - Unknown word (Defining)   -- ## Defining Types
packages/documentation/copy/en/get-started/TS for JS Programmers.md:33:15     - Unknown word (wide)       -- You can use a wide variety of design patterns
packages/documentation/copy/en/get-started/TS for JS Programmers.md:33:236    - Unknown word (supports)   -- these cases, TypeScript supports an extension of the
packages/documentation/copy/en/get-started/TS for JS Programmers.md:39:10     - Unknown word (Hayes)      -- name: "Hayes",
packages/documentation/copy/en/get-started/TS for JS Programmers.md:44:9      - Unknown word (explicitly) -- You can explicitly describe this object
packages/documentation/copy/en/get-started/TS for JS Programmers.md:53:47     - Unknown word (conforms)   -- a JavaScript object conforms to the shape of your
packages/documentation/copy/en/get-started/TS for JS Programmers.md:67:94     - Unknown word (warn)       -- provided, TypeScript will warn you:
packages/documentation/copy/en/get-started/TS for JS Programmers.md:9:12      - Unknown word (stands)     -- TypeScript stands in an unusual relationship
packages/documentation/copy/en/get-started/TS for JS Programmers.md:9:25      - Unknown word (unusual)    -- TypeScript stands in an unusual relationship to JavaScript
packages/documentation/copy/en/get-started/TS for OOPers.md:113:5     - Unknown word (relationships)  -- The relationships between types are determined
packages/documentation/copy/en/get-started/TS for OOPers.md:118:1     - Unknown word (Going)          -- Going back to the idea of
packages/documentation/copy/en/get-started/TS for OOPers.md:11:125    - Unknown word (clearer)    -- detection of errors, and clearer communication between
packages/documentation/copy/en/get-started/TS for OOPers.md:11:133    - Unknown word (communication) -- errors, and clearer communication between parts of your
packages/documentation/copy/en/get-started/TS for OOPers.md:11:50     - Unknown word (benefits)   -- offers many of the same benefits, such as better code
packages/documentation/copy/en/get-started/TS for OOPers.md:120:32    - Unknown word (Typing)         -- Consequences of Structural Typing
packages/documentation/copy/en/get-started/TS for OOPers.md:120:5     - Unknown word (Consequences)   -- ### Consequences of Structural Typing
packages/documentation/copy/en/get-started/TS for OOPers.md:122:27    - Unknown word (surprised)      -- programmers are often surprised by two particular aspects
packages/documentation/copy/en/get-started/TS for OOPers.md:126:36    - Unknown word (seems)          -- that the _empty type_ seems to defy expectation
packages/documentation/copy/en/get-started/TS for OOPers.md:126:45    - Unknown word (defy)           -- empty type_ seems to defy expectation:
packages/documentation/copy/en/get-started/TS for OOPers.md:12:83     - Unknown word (stepping)      -- developers, it's worth stepping back to see how JavaScript
packages/documentation/copy/en/get-started/TS for OOPers.md:139:12    - Unknown word (determines)     -- TypeScript determines if the call to `fn`
packages/documentation/copy/en/get-started/TS for OOPers.md:13:1      - Unknown word (Understanding) -- Understanding these differences will
packages/documentation/copy/en/get-started/TS for OOPers.md:13:94     - Unknown word (pitfalls)      -- code, and avoid common pitfalls that programmers who
packages/documentation/copy/en/get-started/TS for OOPers.md:140:15    - Unknown word (examining)      -- It does so by examining the _structure_ of
packages/documentation/copy/en/get-started/TS for OOPers.md:144:15    - Unknown word (surprising)     -- This may seem surprising, but it's ultimately
packages/documentation/copy/en/get-started/TS for OOPers.md:144:36    - Unknown word (ultimately)     -- surprising, but it's ultimately a very similar relationship
packages/documentation/copy/en/get-started/TS for OOPers.md:144:82    - Unknown word (enforced)       -- relationship to one enforced in nominal OOP languages
packages/documentation/copy/en/get-started/TS for OOPers.md:145:134   - Unknown word (derived)        -- relationship between the derived class and its base.
packages/documentation/copy/en/get-started/TS for OOPers.md:145:3     - Unknown word (subclass)       -- A subclass cannot _remove_ a property
packages/documentation/copy/en/get-started/TS for OOPers.md:148:6     - Unknown word (Identical)      -- #### Identical Types
packages/documentation/copy/en/get-started/TS for OOPers.md:150:1     - Unknown word (Another)        -- Another frequent source of surprise
packages/documentation/copy/en/get-started/TS for OOPers.md:150:28    - Unknown word (surprise)       -- Another frequent source of surprise comes with identical
packages/documentation/copy/en/get-started/TS for OOPers.md:150:9     - Unknown word (frequent)       -- Another frequent source of surprise comes
packages/documentation/copy/en/get-started/TS for OOPers.md:154:3     - Unknown word (drive)          -- drive() {
packages/documentation/copy/en/get-started/TS for OOPers.md:158:7     - Unknown word (Golfer)         -- class Golfer {
packages/documentation/copy/en/get-started/TS for OOPers.md:169:48    - Unknown word (confusion)      -- potential source of confusion, in practice, identical
packages/documentation/copy/en/get-started/TS for OOPers.md:171:36    - Unknown word (relate)         -- more about how classes relate to each other in the
packages/documentation/copy/en/get-started/TS for OOPers.md:171:72    - Unknown word (chapter)        -- other in the Classes chapter.
packages/documentation/copy/en/get-started/TS for OOPers.md:173:5     - Unknown word (Reflection)     -- ### Reflection
packages/documentation/copy/en/get-started/TS for OOPers.md:17:119    - Unknown word (explain)       -- introductory page can help explain some of the common misconcept
packages/documentation/copy/en/get-started/TS for OOPers.md:17:146    - Unknown word (misconceptions) -- explain some of the common misconceptions and pitfalls you might
packages/documentation/copy/en/get-started/TS for OOPers.md:17:187    - Unknown word (susceptible)    -- pitfalls you might be susceptible to.
packages/documentation/copy/en/get-started/TS for OOPers.md:17:52     - Unknown word (primarily)     -- JavaScript already but are primarily a Java or C# programmer
packages/documentation/copy/en/get-started/TS for OOPers.md:17:92     - Unknown word (introductory)  -- C# programmer, this introductory page can help explain
packages/documentation/copy/en/get-started/TS for OOPers.md:184:43    - Unknown word (erased)         -- type system is fully erased, information about e
packages/documentation/copy/en/get-started/TS for OOPers.md:186:102   - Unknown word (operators)      -- remember that these operators are still working on
packages/documentation/copy/en/get-started/TS for OOPers.md:18:51     - Unknown word (quite)          -- TypeScript models types are quite different from Java
packages/documentation/copy/en/get-started/TS for OOPers.md:20:97     - Unknown word (little)         -- recommend learning a little bit of JavaScript _without
packages/documentation/copy/en/get-started/TS for OOPers.md:23:151    - Unknown word (converting)     -- specific runtime behavior (converting a string to a number
packages/documentation/copy/en/get-started/TS for OOPers.md:23:184    - Unknown word (displaying)     -- string to a number, displaying an alert, writing a
packages/documentation/copy/en/get-started/TS for OOPers.md:23:19     - Unknown word (remember)       -- It's important to remember that TypeScript uses
packages/documentation/copy/en/get-started/TS for OOPers.md:23:253    - Unknown word (equally)        -- ) will always apply equally well to TypeScript programs
packages/documentation/copy/en/get-started/TS for OOPers.md:26:4      - Unknown word (Rethinking)     -- ## Rethinking the Class
packages/documentation/copy/en/get-started/TS for OOPers.md:28:37     - Unknown word (mandatory)      -- what we might call _mandatory OOP_ languages.
packages/documentation/copy/en/get-started/TS for OOPers.md:30:1      - Unknown word (Forcing)        -- Forcing all functionality and
packages/documentation/copy/en/get-started/TS for OOPers.md:30:13     - Unknown word (functionality)  -- Forcing all functionality and data to be held
packages/documentation/copy/en/get-started/TS for OOPers.md:30:139    - Unknown word (represented)    -- domain _needs_ to be represented this way.
packages/documentation/copy/en/get-started/TS for OOPers.md:30:42     - Unknown word (held)           -- functionality and data to be held in classes can be a
packages/documentation/copy/en/get-started/TS for OOPers.md:34:75     - Unknown word (freely)         -- can be passed around freely without being inside
packages/documentation/copy/en/get-started/TS for OOPers.md:35:6      - Unknown word (flexibility)    -- This flexibility is extremely powerful
packages/documentation/copy/en/get-started/TS for OOPers.md:36:105    - Unknown word (tend)           -- implied OOP hierarchy tend to be the preferred
packages/documentation/copy/en/get-started/TS for OOPers.md:36:120    - Unknown word (preferred)      -- hierarchy tend to be the preferred model for writing programs
packages/documentation/copy/en/get-started/TS for OOPers.md:36:83     - Unknown word (implied)        -- over data without an implied OOP hierarchy tend to
packages/documentation/copy/en/get-started/TS for OOPers.md:40:1      - Unknown word (Additionally)   -- Additionally, certain constructs
packages/documentation/copy/en/get-started/TS for OOPers.md:40:15     - Unknown word (certain)        -- Additionally, certain constructs from C# and
packages/documentation/copy/en/get-started/TS for OOPers.md:40:23     - Unknown word (constructs)     -- Additionally, certain constructs from C# and Java such
packages/documentation/copy/en/get-started/TS for OOPers.md:40:59     - Unknown word (singletons)     -- C# and Java such as singletons and static classes are
packages/documentation/copy/en/get-started/TS for OOPers.md:40:93     - Unknown word (unnecessary)    -- and static classes are unnecessary in TypeScript.
packages/documentation/copy/en/get-started/TS for OOPers.md:44:6      - Unknown word (said)           -- That said, you can still use classes
packages/documentation/copy/en/get-started/TS for OOPers.md:45:24     - Unknown word (suited)         -- Some problems are well-suited to being solved by a
packages/documentation/copy/en/get-started/TS for OOPers.md:45:40     - Unknown word (solved)         -- well-suited to being solved by a traditional OOP
packages/documentation/copy/en/get-started/TS for OOPers.md:46:75     - Unknown word (inheritance)    -- implementing interfaces, inheritance, and static methods
packages/documentation/copy/en/get-started/TS for OOPers.md:53:7      - Unknown word (explore)        -- Let's explore some differences.
packages/documentation/copy/en/get-started/TS for OOPers.md:55:13     - Unknown word (Reified)        -- ### Nominal Reified Type Systems
packages/documentation/copy/en/get-started/TS for OOPers.md:55:5      - Unknown word (Nominal)        -- ### Nominal Reified Type Systems
packages/documentation/copy/en/get-started/TS for OOPers.md:59:130    - Unknown word (lieu)           -- with similar shapes in lieu of each other unless
packages/documentation/copy/en/get-started/TS for OOPers.md:59:34     - Unknown word (reside)         -- definition of this type will reside in a class somewhere
packages/documentation/copy/en/get-started/TS for OOPers.md:59:52     - Unknown word (somewhere)      -- will reside in a class somewhere with some name, and
packages/documentation/copy/en/get-started/TS for OOPers.md:61:27     - Unknown word (reified)        -- aspects describe a _reified, nominal_ type system
packages/documentation/copy/en/get-started/TS for OOPers.md:66:21     - Unknown word (meaningful)     -- In C# or Java, it's meaningful to think of a one-to
packages/documentation/copy/en/get-started/TS for OOPers.md:66:57     - Unknown word (correspondence) -- think of a one-to-one correspondence between runtime types
packages/documentation/copy/en/get-started/TS for OOPers.md:69:53     - Unknown word (belong)         -- particular value can belong to _many_ sets at the
packages/documentation/copy/en/get-started/TS for OOPers.md:72:26     - Unknown word (awkward)        -- example, in C#, it's awkward to pass around a value
packages/documentation/copy/en/get-started/TS for OOPers.md:74:21     - Unknown word (becomes)        -- In TypeScript, this becomes very natural once you
packages/documentation/copy/en/get-started/TS for OOPers.md:74:51     - Unknown word (realize)        -- very natural once you realize that every type is just
packages/documentation/copy/en/get-started/TS for OOPers.md:75:41     - Unknown word (belongs)        -- a value that either belongs in the `string` set
packages/documentation/copy/en/get-started/TS for OOPers.md:78:33     - Unknown word (mechanisms)     -- provides a number of mechanisms to work with types in
packages/documentation/copy/en/get-started/TS for OOPers.md:78:72     - Unknown word (theoretic)      -- with types in a set-theoretic way, and you'll find
packages/documentation/copy/en/get-started/TS for OOPers.md:80:5      - Unknown word (Erased)         -- ### Erased Structural Types
packages/documentation/copy/en/get-started/TS for OOPers.md:83:150    - Unknown word (declarative)    -- though there was no declarative relationship between
packages/documentation/copy/en/get-started/TS for OOPers.md:83:45     - Unknown word (satisfies)      -- construct an object that satisfies an interface, we can
packages/documentation/copy/en/get-started/TS for OOPers.md:9:25      - Unknown word (choice)     -- TypeScript is a popular choice for programmers accustomed
packages/documentation/copy/en/get-started/TS for OOPers.md:9:48      - Unknown word (accustomed) -- choice for programmers accustomed to other languages with
packages/documentation/copy/en/get-started/TS for the New Programmer.md:100:21    - Unknown word (considers)       -- TypeScript, though, considers division of number by
packages/documentation/copy/en/get-started/TS for the New Programmer.md:100:31    - Unknown word (division)        -- TypeScript, though, considers division of number by an array
packages/documentation/copy/en/get-started/TS for the New Programmer.md:100:70    - Unknown word (nonsensical)     -- by an array to be a nonsensical operation, and will
packages/documentation/copy/en/get-started/TS for the New Programmer.md:107:157   - Unknown word (mistake)        -- this is a programming mistake.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:107:32    - Unknown word (intend)          -- possible you really _did_ intend to divide a number by
packages/documentation/copy/en/get-started/TS for the New Programmer.md:107:71    - Unknown word (perhaps)         -- number by an array, perhaps just to see what happens
packages/documentation/copy/en/get-started/TS for the New Programmer.md:108:48    - Unknown word (correct)        -- is designed to allow correct programs through while
packages/documentation/copy/en/get-started/TS for the New Programmer.md:108:85    - Unknown word (catching)       -- through while still catching as many common errors
packages/documentation/copy/en/get-started/TS for the New Programmer.md:109:2     - Unknown word (Later)          -- (Later, we'll learn about settings
packages/documentation/copy/en/get-started/TS for the New Programmer.md:109:65    - Unknown word (strictly)       -- use to configure how strictly TypeScript checks your
packages/documentation/copy/en/get-started/TS for the New Programmer.md:112:14    - Unknown word (legitimate)     -- These may be legitimate problems with the code
packages/documentation/copy/en/get-started/TS for the New Programmer.md:112:69    - Unknown word (overly)         -- or TypeScript being overly conservative.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:112:76    - Unknown word (conservative)   -- TypeScript being overly conservative.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:113:1     - Unknown word (Throughout)     -- Throughout this guide we'll demonstrate
packages/documentation/copy/en/get-started/TS for the New Programmer.md:113:52    - Unknown word (various)        -- demonstrate how to add various TypeScript syntax to
packages/documentation/copy/en/get-started/TS for the New Programmer.md:113:81    - Unknown word (eliminate)      -- TypeScript syntax to eliminate such errors.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:117:48    - Unknown word (preserves)      -- programming language that preserves the _runtime behavior
packages/documentation/copy/en/get-started/TS for the New Programmer.md:118:14    - Unknown word (dividing)       -- For example, dividing by zero in JavaScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:118:76    - Unknown word (throwing)       -- Infinity` instead of throwing a runtime exception
packages/documentation/copy/en/get-started/TS for the New Programmer.md:118:95    - Unknown word (exception)      -- of throwing a runtime exception.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:119:6     - Unknown word (principle)      -- As a principle, TypeScript **never
packages/documentation/copy/en/get-started/TS for the New Programmer.md:11:25     - Unknown word (heard)           -- ve probably already heard that TypeScript is a
packages/documentation/copy/en/get-started/TS for the New Programmer.md:11:53     - Unknown word (flavor)          -- that TypeScript is a "flavor" or "variant" of JavaScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:121:73    - Unknown word (guaranteed)     -- TypeScript, it is **guaranteed** to run the same way
packages/documentation/copy/en/get-started/TS for the New Programmer.md:123:1     - Unknown word (Keeping)        -- Keeping the same runtime behavior
packages/documentation/copy/en/get-started/TS for the New Programmer.md:123:54    - Unknown word (foundational)   -- behavior as JavaScript is a foundational promise of TypeScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:126:9     - Unknown word (subsection)     -- Missing subsection on the fact that TS
packages/documentation/copy/en/get-started/TS for the New Programmer.md:127:28    - Unknown word (immediately)    -- specification. (Since the immediately preceding text was raving
packages/documentation/copy/en/get-started/TS for the New Programmer.md:127:40    - Unknown word (preceding)      -- Since the immediately preceding text was raving about
packages/documentation/copy/en/get-started/TS for the New Programmer.md:127:59    - Unknown word (raving)         -- mmediately preceding text was raving about
packages/documentation/copy/en/get-started/TS for the New Programmer.md:12:65     - Unknown word (rather)          -- and JavaScript (JS) is rather unique among modern
packages/documentation/copy/en/get-started/TS for the New Programmer.md:12:79     - Unknown word (among)           -- JS) is rather unique among modern programming languages
packages/documentation/copy/en/get-started/TS for the New Programmer.md:133:83    - Unknown word (erases)         -- checking your code, it _erases_ the types to produce
packages/documentation/copy/en/get-started/TS for the New Programmer.md:143:20    - Unknown word (paragraph)      -- Should extend this paragraph to say that there's
packages/documentation/copy/en/get-started/TS for the New Programmer.md:144:1     - Unknown word (allowing)       -- allowing you to use newer JS
packages/documentation/copy/en/get-started/TS for the New Programmer.md:144:21    - Unknown word (newer)          -- allowing you to use newer JS features and transpile
packages/documentation/copy/en/get-started/TS for the New Programmer.md:145:30    - Unknown word (stubs)          -- this might add small stubs of functionality when
packages/documentation/copy/en/get-started/TS for the New Programmer.md:145:68    - Unknown word (Maybe)          -- functionality when needed.  (Maybe
packages/documentation/copy/en/get-started/TS for the New Programmer.md:147:23    - Unknown word (maintained)     -- that this document is maintained.)
packages/documentation/copy/en/get-started/TS for the New Programmer.md:14:26     - Unknown word (Brief)           -- What is JavaScript? A Brief History
packages/documentation/copy/en/get-started/TS for the New Programmer.md:150:4     - Unknown word (Learning)       -- ## Learning JavaScript and TypeScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:155:106   - Unknown word (helping)        -- about JavaScript is helping you learn TypeScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:162:139   - Unknown word (answers)        -- TypeScript-specific answers for everyday questions
packages/documentation/copy/en/get-started/TS for the New Programmer.md:168:32    - Unknown word (fundamentals)   -- some of the JavaScript fundamentals, we recommend either
packages/documentation/copy/en/get-started/TS for the New Programmer.md:16:68     - Unknown word (scripting)       -- its life as a simple scripting language for browsers
packages/documentation/copy/en/get-started/TS for the New Programmer.md:16:91     - Unknown word (browsers)        -- scripting language for browsers.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:17:133    - Unknown word (dozen)           -- writing more than a few dozen lines of code would
packages/documentation/copy/en/get-started/TS for the New Programmer.md:17:20     - Unknown word (invented)        -- At the time it was invented, it was expected to
packages/documentation/copy/en/get-started/TS for the New Programmer.md:17:67     - Unknown word (snippets)        -- to be used for short snippets of code embedded in
packages/documentation/copy/en/get-started/TS for the New Programmer.md:181:27    - Unknown word (newbies)        -- What's a type? (For newbies)
packages/documentation/copy/en/get-started/TS for the New Programmer.md:181:7     - Unknown word (What's)         -- * What's a type? (For newbies
packages/documentation/copy/en/get-started/TS for the New Programmer.md:18:14     - Unknown word (early)           -- Due to this, early web browsers executed
packages/documentation/copy/en/get-started/TS for the New Programmer.md:18:33     - Unknown word (executed)        -- early web browsers executed such code pretty slowly
packages/documentation/copy/en/get-started/TS for the New Programmer.md:18:59     - Unknown word (slowly)          -- executed such code pretty slowly.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:190:61    - Unknown word (boundaries)     -- the type is: Function boundaries, and later-initialized
packages/documentation/copy/en/get-started/TS for the New Programmer.md:190:83    - Unknown word (initialized)    -- boundaries, and later-initialized values
packages/documentation/copy/en/get-started/TS for the New Programmer.md:193:14    - Unknown word (paste)          -- * Just paste it in and see what happens
packages/documentation/copy/en/get-started/TS for the New Programmer.md:193:9     - Unknown word (Just)           -- * Just paste it in and see
packages/documentation/copy/en/get-started/TS for the New Programmer.md:194:18    - Unknown word (turning)        -- * Consider turning off 'strict' -->
packages/documentation/copy/en/get-started/TS for the New Programmer.md:194:9     - Unknown word (Consider)       -- * Consider turning off 'strict
packages/documentation/copy/en/get-started/TS for the New Programmer.md:19:111    - Unknown word (experiences)     -- to create interactive experiences.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:19:23     - Unknown word (became)          -- Over time, though, JS became more and more popular
packages/documentation/copy/en/get-started/TS for the New Programmer.md:21:24     - Unknown word (responded)       -- Web browser developers responded to this increased JS
packages/documentation/copy/en/get-started/TS for the New Programmer.md:21:42     - Unknown word (increased)       -- developers responded to this increased JS usage by optimizing
packages/documentation/copy/en/get-started/TS for the New Programmer.md:21:64     - Unknown word (optimizing)      -- increased JS usage by optimizing their execution engines
packages/documentation/copy/en/get-started/TS for the New Programmer.md:22:11     - Unknown word (websites)        -- On modern websites, your browser is frequently
packages/documentation/copy/en/get-started/TS for the New Programmer.md:22:37     - Unknown word (frequently)      -- websites, your browser is frequently running applications
packages/documentation/copy/en/get-started/TS for the New Programmer.md:22:79     - Unknown word (hundreds)        -- applications that span hundreds of thousands of lines
packages/documentation/copy/en/get-started/TS for the New Programmer.md:22:91     - Unknown word (thousands)       -- that span hundreds of thousands of lines of code.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:23:101    - Unknown word (evolving)        -- of static pages, and evolving into a platform for
packages/documentation/copy/en/get-started/TS for the New Programmer.md:23:130    - Unknown word (rich)            -- into a platform for rich _applications_ of all
packages/documentation/copy/en/get-started/TS for the New Programmer.md:23:22     - Unknown word (gradual)         -- This is the long and gradual growth of "the web"
packages/documentation/copy/en/get-started/TS for the New Programmer.md:23:30     - Unknown word (growth)          -- the long and gradual growth of "the web", starting
packages/documentation/copy/en/get-started/TS for the New Programmer.md:26:20     - Unknown word (nature)          -- The "run anywhere" nature of JS makes it an attractive
packages/documentation/copy/en/get-started/TS for the New Programmer.md:26:45     - Unknown word (attractive)      -- nature of JS makes it an attractive choice for cross-platform
packages/documentation/copy/en/get-started/TS for the New Programmer.md:27:33     - Unknown word (days)            -- many developers these days that use _only_ JavaScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:29:132    - Unknown word (millions)        -- write applications with millions of lines.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:29:4      - Unknown word (summarize)       -- To summarize, we have a language
packages/documentation/copy/en/get-started/TS for the New Programmer.md:29:77     - Unknown word (grew)            -- quick uses, and then grew to a full-fledged tool
packages/documentation/copy/en/get-started/TS for the New Programmer.md:29:92     - Unknown word (fledged)         -- then grew to a full-fledged tool to write applications
packages/documentation/copy/en/get-started/TS for the New Programmer.md:2:31      - Unknown word (Programmer) -- TypeScript for the New Programmer
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:1      - Unknown word (Every)           -- Every language has its own
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:29     - Unknown word (quirks)          -- language has its own _quirks_ — oddities and surprises
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:39     - Unknown word (oddities)        -- has its own _quirks_ — oddities and surprises, and JavaScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:52     - Unknown word (surprises)       -- quirks_ — oddities and surprises, and JavaScript's humble
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:80     - Unknown word (humble)          -- surprises, and JavaScript's humble beginning makes it have
packages/documentation/copy/en/get-started/TS for the New Programmer.md:30:87     - Unknown word (beginning)       -- JavaScript's humble beginning makes it have _many
packages/documentation/copy/en/get-started/TS for the New Programmer.md:32:16     - Unknown word (equality)        -- - JavaScript's equality operator (`==`) _coerces
packages/documentation/copy/en/get-started/TS for the New Programmer.md:32:42     - Unknown word (coerces)         -- equality operator (`==`) _coerces_ its operands, leading
packages/documentation/copy/en/get-started/TS for the New Programmer.md:32:55     - Unknown word (operands)        -- `==`) _coerces_ its operands, leading to unexpected
packages/documentation/copy/en/get-started/TS for the New Programmer.md:39:8      - Unknown word (True)            -- // True for *any* value of x
packages/documentation/copy/en/get-started/TS for the New Programmer.md:43:26     - Unknown word (accessing)       -- JavaScript also allows accessing properties which aren
packages/documentation/copy/en/get-started/TS for the New Programmer.md:47:23     - Unknown word (Spelling)        -- // Why is this NaN? Spelling is hard!
packages/documentation/copy/en/get-started/TS for the New Programmer.md:51:100    - Unknown word (during)          -- occur, some would do so during compilation — before
packages/documentation/copy/en/get-started/TS for the New Programmer.md:51:34     - Unknown word (throw)           -- programming languages would throw an error when these
packages/documentation/copy/en/get-started/TS for the New Programmer.md:52:173    - Unknown word (serious)         -- constant surprises are a serious problem.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:52:46     - Unknown word (annoying)        -- programs, such quirks are annoying but manageable; when
packages/documentation/copy/en/get-started/TS for the New Programmer.md:52:59     - Unknown word (manageable)      -- quirks are annoying but manageable; when writing applications
packages/documentation/copy/en/get-started/TS for the New Programmer.md:56:37     - Unknown word (wouldn't)        -- that some languages wouldn't allow those buggy programs
packages/documentation/copy/en/get-started/TS for the New Programmer.md:56:58     - Unknown word (buggy)           -- wouldn't allow those buggy programs to run at all
packages/documentation/copy/en/get-started/TS for the New Programmer.md:57:1      - Unknown word (Detecting)       -- Detecting errors in code without
packages/documentation/copy/en/get-started/TS for the New Programmer.md:57:48     - Unknown word (referred)        -- without running it is referred to as _static checking
packages/documentation/copy/en/get-started/TS for the New Programmer.md:58:1      - Unknown word (Determining)     -- Determining what's an error and
packages/documentation/copy/en/get-started/TS for the New Programmer.md:58:13     - Unknown word (what's)          -- Determining what's an error and what's
packages/documentation/copy/en/get-started/TS for the New Programmer.md:58:79     - Unknown word (operated)        -- kinds of values being operated on is known as static
packages/documentation/copy/en/get-started/TS for the New Programmer.md:5:43      - Unknown word (scratch)    -- handbook/typescript-from-scratch.html
packages/documentation/copy/en/get-started/TS for the New Programmer.md:86:93     - Unknown word (worrying)        -- TypeScript file without worrying about exactly how it
packages/documentation/copy/en/get-started/TS for the New Programmer.md:91:124    - Unknown word (incorrect)       -- value (a _type_) in an incorrect way.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:99:40     - Unknown word (Infinity)        -- legal program logs `Infinity`.
packages/documentation/copy/en/get-started/TS for the New Programmer.md:99:6      - Unknown word (syntactically)   -- This syntactically-legal program logs
packages/documentation/copy/en/get-started/TS for the New Programmer.md:9:1       - Unknown word (Congratulations) -- Congratulations on choosing TypeScript
packages/documentation/copy/en/get-started/TS for the New Programmer.md:9:100     - Unknown word (decisions)       -- already making good decisions!
packages/documentation/copy/en/get-started/TS for the New Programmer.md:9:20      - Unknown word (choosing)        -- Congratulations on choosing TypeScript as one of
packages/documentation/copy/en/handbook-v1/Basic Types.md:110:67    - Unknown word (retrieved)   -- the correct type is retrieved:
packages/documentation/copy/en/handbook-v1/Basic Types.md:118:18    - Unknown word (substring)   -- console.log(x[0].substring(1));
packages/documentation/copy/en/handbook-v1/Basic Types.md:123:1     - Unknown word (Accessing)   -- Accessing an element outside the
packages/documentation/copy/en/handbook-v1/Basic Types.md:138:46    - Unknown word (giving)      -- an enum is a way of giving more friendly names
packages/documentation/copy/en/handbook-v1/Basic Types.md:149:25    - Unknown word (numbering)   -- default, enums begin numbering their members starting
packages/documentation/copy/en/handbook-v1/Basic Types.md:16:72     - Unknown word (simplest)   -- work with some of the simplest units of data: numbers
packages/documentation/copy/en/handbook-v1/Basic Types.md:173:3     - Unknown word (handy)       -- A handy feature of enums is
packages/documentation/copy/en/handbook-v1/Basic Types.md:174:42    - Unknown word (weren't)     -- had the value `2` but weren't sure what that mapped
packages/documentation/copy/en/handbook-v1/Basic Types.md:17:91     - Unknown word (enumeration) -- JavaScript, with an extra enumeration type thrown in to help
packages/documentation/copy/en/handbook-v1/Basic Types.md:184:4     - Unknown word (Displays)    -- // Displays 'Green'
packages/documentation/copy/en/handbook-v1/Basic Types.md:188:4     - Unknown word (Unknown)     -- ## Unknown
packages/documentation/copy/en/handbook-v1/Basic Types.md:195:8     - Unknown word (Sure)        -- let notSure: unknown = 4;
packages/documentation/copy/en/handbook-v1/Basic Types.md:196:12    - Unknown word (maybe)       -- notSure = "maybe a string instead";
packages/documentation/copy/en/handbook-v1/Basic Types.md:198:8     - Unknown word (definitely)  -- // OK, definitely a boolean
packages/documentation/copy/en/handbook-v1/Basic Types.md:202:117   - Unknown word (comparison)  -- doing `typeof` checks, comparison checks, or more advanced
packages/documentation/copy/en/handbook-v1/Basic Types.md:202:178   - Unknown word (discussed)   -- guards that will be discussed in a later chapter:
packages/documentation/copy/en/handbook-v1/Basic Types.md:202:54    - Unknown word (narrow)      -- unknown type, you can narrow it to something more
packages/documentation/copy/en/handbook-v1/Basic Types.md:21:16     - Unknown word (datatype)    -- The most basic datatype is the simple true/false
packages/documentation/copy/en/handbook-v1/Basic Types.md:227:106   - Unknown word (amount)        -- take an inappropriate amount of effort.
packages/documentation/copy/en/handbook-v1/Basic Types.md:227:116   - Unknown word (effort)        -- inappropriate amount of effort.
packages/documentation/copy/en/handbook-v1/Basic Types.md:227:92    - Unknown word (inappropriate) -- declaration would take an inappropriate amount of effort.
packages/documentation/copy/en/handbook-v1/Basic Types.md:238:84    - Unknown word (gradually)     -- JavaScript, allowing you to gradually opt-in and opt-out of
packages/documentation/copy/en/handbook-v1/Basic Types.md:245:5     - Unknown word (loosely)       -- let looselyTyped: any = 4;
packages/documentation/copy/en/handbook-v1/Basic Types.md:263:34    - Unknown word (convenience)   -- remember that all the convenience of `any` comes at the
packages/documentation/copy/en/handbook-v1/Basic Types.md:263:76    - Unknown word (losing)        -- comes at the cost of losing type safety.
packages/documentation/copy/en/handbook-v1/Basic Types.md:263:88    - Unknown word (safety)        -- cost of losing type safety.
packages/documentation/copy/en/handbook-v1/Basic Types.md:264:32    - Unknown word (motivations)   -- safety is one of the main motivations for using TypeScript
packages/documentation/copy/en/handbook-v1/Basic Types.md:266:4     - Unknown word (Void)          -- ## Void
packages/documentation/copy/en/handbook-v1/Basic Types.md:268:29    - Unknown word (opposite)      -- is a little like the opposite of `any`: the absence
packages/documentation/copy/en/handbook-v1/Basic Types.md:268:52    - Unknown word (absence)       -- opposite of `any`: the absence of having any type at
packages/documentation/copy/en/handbook-v1/Basic Types.md:277:1     - Unknown word (Declaring)     -- Declaring variables of type `void
packages/documentation/copy/en/handbook-v1/Basic Types.md:281:5     - Unknown word (unusable)      -- let unusable: void = undefined;
packages/documentation/copy/en/handbook-v1/Basic Types.md:288:99    - Unknown word (respectively)  -- undefined` and `null` respectively.
packages/documentation/copy/en/handbook-v1/Basic Types.md:289:1     - Unknown word (Much)          -- Much like `void`, they're
packages/documentation/copy/en/handbook-v1/Basic Types.md:300:153   - Unknown word (respective)    -- unknown`, `any` and their respective types (the one exception
packages/documentation/copy/en/handbook-v1/Basic Types.md:306:17    - Unknown word (encourage)     -- > As a note: we encourage the use of [`strictNullChecks
packages/documentation/copy/en/handbook-v1/Basic Types.md:308:4     - Unknown word (Never)         -- ## Never
packages/documentation/copy/en/handbook-v1/Basic Types.md:311:112   - Unknown word (throws)        -- expression that always throws an exception or one
packages/documentation/copy/en/handbook-v1/Basic Types.md:312:16    - Unknown word (acquire)       -- Variables also acquire the type `never` when
packages/documentation/copy/en/handbook-v1/Basic Types.md:312:46    - Unknown word (narrowed)      -- the type `never` when narrowed by any type guards that
packages/documentation/copy/en/handbook-v1/Basic Types.md:315:1     - Unknown word (Even)          -- Even `any` isn't assignable
packages/documentation/copy/en/handbook-v1/Basic Types.md:31:16     - Unknown word (hexadecimal) -- In addition to hexadecimal and decimal literals
packages/documentation/copy/en/handbook-v1/Basic Types.md:31:32     - Unknown word (decimal)     -- addition to hexadecimal and decimal literals, TypeScript
packages/documentation/copy/en/handbook-v1/Basic Types.md:31:75     - Unknown word (binary)      -- TypeScript also supports binary and octal literals introduced
packages/documentation/copy/en/handbook-v1/Basic Types.md:31:86     - Unknown word (octal)       -- supports binary and octal literals introduced
packages/documentation/copy/en/handbook-v1/Basic Types.md:320:45    - Unknown word (reachable)     -- never must not have a reachable end point
packages/documentation/copy/en/handbook-v1/Basic Types.md:325:4     - Unknown word (Inferred)      -- // Inferred return type is never
packages/documentation/copy/en/handbook-v1/Basic Types.md:327:17    - Unknown word (Something)     -- return error("Something failed");
packages/documentation/copy/en/handbook-v1/Basic Types.md:331:10    - Unknown word (infinite)      -- function infiniteLoop(): never {
packages/documentation/copy/en/handbook-v1/Basic Types.md:331:18    - Unknown word (Loop)          -- function infiniteLoop(): never {
packages/documentation/copy/en/handbook-v1/Basic Types.md:358:9     - Unknown word (assertions)    -- ## Type assertions
packages/documentation/copy/en/handbook-v1/Basic Types.md:361:1     - Unknown word (Usually)       -- Usually, this will happen when
packages/documentation/copy/en/handbook-v1/Basic Types.md:364:33    - Unknown word (cast)          -- assertion is like a type cast in other languages,
packages/documentation/copy/en/handbook-v1/Basic Types.md:364:65    - Unknown word (performs)      -- other languages, but it performs no special checking
packages/documentation/copy/en/handbook-v1/Basic Types.md:364:97    - Unknown word (restructuring) -- special checking or restructuring of data.
packages/documentation/copy/en/handbook-v1/Basic Types.md:365:19    - Unknown word (impact)        -- It has no runtime impact and is used purely by
packages/documentation/copy/en/handbook-v1/Basic Types.md:365:38    - Unknown word (purely)        -- runtime impact and is used purely by the compiler.
packages/documentation/copy/en/handbook-v1/Basic Types.md:366:12    - Unknown word (assumes)       -- TypeScript assumes that you, the programmer
packages/documentation/copy/en/handbook-v1/Basic Types.md:366:51    - Unknown word (performed)     -- the programmer, have performed any special checks that
packages/documentation/copy/en/handbook-v1/Basic Types.md:387:29    - Unknown word (mostly)        -- one over the other is mostly a choice of preference
packages/documentation/copy/en/handbook-v1/Basic Types.md:391:14    - Unknown word (noticed)       -- You may have noticed that so far, we've been
packages/documentation/copy/en/handbook-v1/Basic Types.md:395:4     - Unknown word (About)         -- ## About `Number`, `String`,
packages/documentation/copy/en/handbook-v1/Basic Types.md:397:11    - Unknown word (tempting)      -- It can be tempting to think that the types
packages/documentation/copy/en/handbook-v1/Basic Types.md:397:136   - Unknown word (recommended)   -- the lowercase versions recommended above.
packages/documentation/copy/en/handbook-v1/Basic Types.md:44:108    - Unknown word (textual)     -- alike is working with textual data.
packages/documentation/copy/en/handbook-v1/Basic Types.md:44:65     - Unknown word (webpages)    -- programs in JavaScript for webpages and servers alike is
packages/documentation/copy/en/handbook-v1/Basic Types.md:44:86     - Unknown word (alike)       -- webpages and servers alike is working with textual
packages/documentation/copy/en/handbook-v1/Basic Types.md:44:9      - Unknown word (fundamental) -- Another fundamental part of creating programs
packages/documentation/copy/en/handbook-v1/Basic Types.md:46:90     - Unknown word (surround)    -- single quotes (`'`) to surround string data.
packages/documentation/copy/en/handbook-v1/Basic Types.md:55:19     - Unknown word (surrounded)  -- These strings are surrounded by the backtick/backquote
packages/documentation/copy/en/handbook-v1/Basic Types.md:58:29     - Unknown word (Bobbington)  -- fullName: string = `Bob Bobbington`;
packages/documentation/copy/en/handbook-v1/Basic Types.md:60:5      - Unknown word (sentence)    -- let sentence: string = `Hello, my
packages/documentation/copy/en/handbook-v1/Basic Types.md:62:20     - Unknown word (years)       -- I'll be ${age + 1} years old next month.`;
packages/documentation/copy/en/handbook-v1/Basic Types.md:84:48     - Unknown word (followed)    -- type of the elements followed by `[]` to denote an
packages/documentation/copy/en/handbook-v1/Basic Types.md:84:68     - Unknown word (denote)      -- followed by `[]` to denote an array of that element
packages/documentation/copy/en/handbook-v1/Basic Types.md:90:50     - Unknown word (elem)        -- generic array type, `Array<elemType>`:
packages/documentation/copy/en/handbook-v1/Basic Types.md:96:4      - Unknown word (Tuple)       -- ## Tuple
packages/documentation/copy/en/handbook-v1/Classes.md:103:18    - Unknown word (Galloping)    -- console.log("Galloping...");
packages/documentation/copy/en/handbook-v1/Classes.md:108:22    - Unknown word (Sammy)        -- let sam = new Snake("Sammy the Python");
packages/documentation/copy/en/handbook-v1/Classes.md:109:30    - Unknown word (Tommy)        -- Animal = new Horse("Tommy the Palomino");
packages/documentation/copy/en/handbook-v1/Classes.md:109:40    - Unknown word (Palomino)     -- new Horse("Tommy the Palomino");
packages/documentation/copy/en/handbook-v1/Classes.md:10:1      - Unknown word (Traditional) -- Traditional JavaScript uses functions
packages/documentation/copy/en/handbook-v1/Classes.md:10:117    - Unknown word (feel)        -- components, but this may feel a bit awkward to programmers
packages/documentation/copy/en/handbook-v1/Classes.md:10:192    - Unknown word (approach)    -- with an object-oriented approach, where classes inherit
packages/documentation/copy/en/handbook-v1/Classes.md:10:216    - Unknown word (inherit)     -- approach, where classes inherit functionality and objects
packages/documentation/copy/en/handbook-v1/Classes.md:115:52    - Unknown word (previously)   -- other features we didn't previously mention.
packages/documentation/copy/en/handbook-v1/Classes.md:118:25    - Unknown word (prior)        -- difference from the prior example is that each
packages/documentation/copy/en/handbook-v1/Classes.md:11:1      - Unknown word (Starting)    -- Starting with ECMAScript 201
packages/documentation/copy/en/handbook-v1/Classes.md:120:48    - Unknown word (enforce)      -- that TypeScript will enforce.
packages/documentation/copy/en/handbook-v1/Classes.md:122:88    - Unknown word (specialized)  -- with methods that are specialized for the subclass.
packages/documentation/copy/en/handbook-v1/Classes.md:124:124   - Unknown word (overriding)   -- move(34)` will call the overriding method in `Horse`:
packages/documentation/copy/en/handbook-v1/Classes.md:12:171    - Unknown word (wait)        -- platforms, without having to wait for the next version
packages/documentation/copy/en/handbook-v1/Classes.md:12:49     - Unknown word (techniques)  -- developers to use these techniques now, and compile them
packages/documentation/copy/en/handbook-v1/Classes.md:133:35    - Unknown word (modifiers)    -- private, and protected modifiers
packages/documentation/copy/en/handbook-v1/Classes.md:138:213   - Unknown word (labeled)      -- member be explicitly labeled `public` to be visible
packages/documentation/copy/en/handbook-v1/Classes.md:138:236   - Unknown word (visible)      -- labeled `public` to be visible.
packages/documentation/copy/en/handbook-v1/Classes.md:174:70    - Unknown word (guarantees)   -- and can have better guarantees about the isolation
packages/documentation/copy/en/handbook-v1/Classes.md:174:91    - Unknown word (isolation)    -- guarantees about the isolation of each private field
packages/documentation/copy/en/handbook-v1/Classes.md:197:15    - Unknown word (comparing)    -- However, when comparing types that have `private
packages/documentation/copy/en/handbook-v1/Classes.md:197:79    - Unknown word (treat)        -- protected` members, we treat these types differently
packages/documentation/copy/en/handbook-v1/Classes.md:198:132   - Unknown word (originated)   -- private` member that originated in the same declaration
packages/documentation/copy/en/handbook-v1/Classes.md:201:49    - Unknown word (plays)        -- better see how this plays out in practice:
packages/documentation/copy/en/handbook-v1/Classes.md:212:7     - Unknown word (Rhino)        -- class Rhino extends Animal {
packages/documentation/copy/en/handbook-v1/Classes.md:218:7     - Unknown word (Employee)     -- class Employee {
packages/documentation/copy/en/handbook-v1/Classes.md:225:26    - Unknown word (Goat)         -- animal = new Animal("Goat");
packages/documentation/copy/en/handbook-v1/Classes.md:225:5     - Unknown word (animal)       -- let animal = new Animal("Goat"
packages/documentation/copy/en/handbook-v1/Classes.md:226:5     - Unknown word (rhino)        -- let rhino = new Rhino();
packages/documentation/copy/en/handbook-v1/Classes.md:227:5     - Unknown word (employee)     -- let employee = new Employee("Bob
packages/documentation/copy/en/handbook-v1/Classes.md:242:145   - Unknown word (deriving)     -- also be accessed within deriving classes. For example
packages/documentation/copy/en/handbook-v1/Classes.md:242:26    - Unknown word (acts)         -- protected` modifier acts much like the `private
packages/documentation/copy/en/handbook-v1/Classes.md:254:11    - Unknown word (department)   -- private department: string;
packages/documentation/copy/en/handbook-v1/Classes.md:261:13    - Unknown word (Elevator)     -- public getElevatorPitch() {
packages/documentation/copy/en/handbook-v1/Classes.md:261:21    - Unknown word (Pitch)        -- public getElevatorPitch() {
packages/documentation/copy/en/handbook-v1/Classes.md:266:28    - Unknown word (Howard)       -- howard = new Employee("Howard", "Sales");
packages/documentation/copy/en/handbook-v1/Classes.md:266:5     - Unknown word (howard)       -- let howard = new Employee("Howard
packages/documentation/copy/en/handbook-v1/Classes.md:271:1     - Unknown word (Notice)       -- Notice that while we can't
packages/documentation/copy/en/handbook-v1/Classes.md:274:37    - Unknown word (instantiated) -- the class cannot be instantiated outside of its containing
packages/documentation/copy/en/handbook-v1/Classes.md:300:24    - Unknown word (John)         -- let john = new Person("John");
packages/documentation/copy/en/handbook-v1/Classes.md:300:5     - Unknown word (john)         -- let john = new Person("John"
packages/documentation/copy/en/handbook-v1/Classes.md:310:7     - Unknown word (Octopus)      -- class Octopus {
packages/documentation/copy/en/handbook-v1/Classes.md:312:20    - Unknown word (Legs)         -- readonly numberOfLegs: number = 8;
packages/documentation/copy/en/handbook-v1/Classes.md:319:46    - Unknown word (legs)         -- Man with the 8 strong legs");
packages/documentation/copy/en/handbook-v1/Classes.md:320:28    - Unknown word (piece)        -- name = "Man with the 3-piece suit";
packages/documentation/copy/en/handbook-v1/Classes.md:320:34    - Unknown word (suit)         -- Man with the 3-piece suit";
packages/documentation/copy/en/handbook-v1/Classes.md:327:10    - Unknown word (further)      -- Here's a further revision of the previous
packages/documentation/copy/en/handbook-v1/Classes.md:339:15    - Unknown word (dropped)      -- Notice how we dropped `theName` altogether
packages/documentation/copy/en/handbook-v1/Classes.md:339:33    - Unknown word (altogether)   -- we dropped `theName` altogether and just use the shortened
packages/documentation/copy/en/handbook-v1/Classes.md:339:61    - Unknown word (shortened)    -- altogether and just use the shortened `readonly name: string
packages/documentation/copy/en/handbook-v1/Classes.md:342:38    - Unknown word (prefixing)    -- properties are declared by prefixing a constructor parameter
packages/documentation/copy/en/handbook-v1/Classes.md:342:80    - Unknown word (accessibility) -- constructor parameter with an accessibility modifier or `readonly
packages/documentation/copy/en/handbook-v1/Classes.md:343:55    - Unknown word (initializes)   -- property declares and initializes a private member; likewise
packages/documentation/copy/en/handbook-v1/Classes.md:343:85    - Unknown word (likewise)      -- initializes a private member; likewise, the same is done for
packages/documentation/copy/en/handbook-v1/Classes.md:345:4     - Unknown word (Accessors)     -- ## Accessors
packages/documentation/copy/en/handbook-v1/Classes.md:347:21    - Unknown word (getters)       -- TypeScript supports getters/setters as a way of
packages/documentation/copy/en/handbook-v1/Classes.md:347:29    - Unknown word (setters)       -- TypeScript supports getters/setters as a way of intercepting
packages/documentation/copy/en/handbook-v1/Classes.md:347:49    - Unknown word (intercepting)  -- setters as a way of intercepting accesses to a member
packages/documentation/copy/en/handbook-v1/Classes.md:347:62    - Unknown word (accesses)      -- way of intercepting accesses to a member of an object
packages/documentation/copy/en/handbook-v1/Classes.md:348:32    - Unknown word (finer)         -- you a way of having finer-grained control over
packages/documentation/copy/en/handbook-v1/Classes.md:348:38    - Unknown word (grained)       -- way of having finer-grained control over how a member
packages/documentation/copy/en/handbook-v1/Classes.md:367:26    - Unknown word (randomly)      -- While allowing people to randomly set `fullName` directly
packages/documentation/copy/en/handbook-v1/Classes.md:369:130   - Unknown word (backing)       -- the max-length of our backing database field. If it
packages/documentation/copy/en/handbook-v1/Classes.md:369:184   - Unknown word (notifying)     -- t we throw an error notifying client code that something
packages/documentation/copy/en/handbook-v1/Classes.md:369:221   - Unknown word (went)          -- code that something went wrong.
packages/documentation/copy/en/handbook-v1/Classes.md:371:70    - Unknown word (retrieves)     -- a simple getter that retrieves `fullName` unmodified
packages/documentation/copy/en/handbook-v1/Classes.md:38:6      - Unknown word (denotes)     -- This denotes that it's a member access
packages/documentation/copy/en/handbook-v1/Classes.md:401:111   - Unknown word (longer)        -- attempt to assign a name longer than 10 characters and
packages/documentation/copy/en/handbook-v1/Classes.md:401:13    - Unknown word (ourselves)     -- To prove to ourselves that our accessor is
packages/documentation/copy/en/handbook-v1/Classes.md:401:4     - Unknown word (prove)         -- To prove to ourselves that our
packages/documentation/copy/en/handbook-v1/Classes.md:403:3     - Unknown word (couple)        -- A couple of things to note about
packages/documentation/copy/en/handbook-v1/Classes.md:403:34    - Unknown word (accessors)     -- things to note about accessors:
packages/documentation/copy/en/handbook-v1/Classes.md:407:1     - Unknown word (Second)        -- Second, accessors with a `get
packages/documentation/copy/en/handbook-v1/Classes.md:408:22    - Unknown word (generating)    -- This is helpful when generating a `.d.ts` file from
packages/documentation/copy/en/handbook-v1/Classes.md:412:30    - Unknown word (talked)        -- this point, we've only talked about the _instance
packages/documentation/copy/en/handbook-v1/Classes.md:414:81    - Unknown word (grids)         -- general value for all grids.
packages/documentation/copy/en/handbook-v1/Classes.md:416:1     - Unknown word (Similarly)     -- Similarly to prepending `this
packages/documentation/copy/en/handbook-v1/Classes.md:422:12    - Unknown word (Distance)      -- calculateDistanceFromOrigin(point: { x
packages/documentation/copy/en/handbook-v1/Classes.md:422:3     - Unknown word (calculate)     -- calculateDistanceFromOrigin(point
packages/documentation/copy/en/handbook-v1/Classes.md:438:4     - Unknown word (Abstract)      -- ## Abstract Classes
packages/documentation/copy/en/handbook-v1/Classes.md:43:4      - Unknown word (Inheritance) -- ## Inheritance
packages/documentation/copy/en/handbook-v1/Classes.md:442:25    - Unknown word (abstract)      -- Unlike an interface, an abstract class may contain implementat
packages/documentation/copy/en/handbook-v1/Classes.md:447:16    - Unknown word (Sound)         -- abstract makeSound(): void;
packages/documentation/copy/en/handbook-v1/Classes.md:450:18    - Unknown word (roaming)       -- console.log("roaming the earth...");
packages/documentation/copy/en/handbook-v1/Classes.md:450:30    - Unknown word (earth)         -- console.log("roaming the earth...");
packages/documentation/copy/en/handbook-v1/Classes.md:457:47    - Unknown word (including)     -- of a method without including a method body.
packages/documentation/copy/en/handbook-v1/Classes.md:458:71    - Unknown word (optionally)    -- abstract` keyword and may optionally include access modifiers
packages/documentation/copy/en/handbook-v1/Classes.md:462:16    - Unknown word (Department)    -- abstract class Department {
packages/documentation/copy/en/handbook-v1/Classes.md:472:7     - Unknown word (Accounting)    -- class AccountingDepartment extends Department
packages/documentation/copy/en/handbook-v1/Classes.md:474:27    - Unknown word (Auditing)      -- super("Accounting and Auditing"); // constructors in
packages/documentation/copy/en/handbook-v1/Classes.md:474:42    - Unknown word (constructors)  -- Accounting and Auditing"); // constructors in derived classes must
packages/documentation/copy/en/handbook-v1/Classes.md:478:44    - Unknown word (meets)         -- Accounting Department meets each Monday at 10am
packages/documentation/copy/en/handbook-v1/Classes.md:478:55    - Unknown word (Monday)        -- Department meets each Monday at 10am.");
packages/documentation/copy/en/handbook-v1/Classes.md:482:18    - Unknown word (Generating)    -- console.log("Generating accounting reports.
packages/documentation/copy/en/handbook-v1/Classes.md:482:29    - Unknown word (accounting)    -- console.log("Generating accounting reports...");
packages/documentation/copy/en/handbook-v1/Classes.md:494:13    - Unknown word (Techniques)    -- ## Advanced Techniques
packages/documentation/copy/en/handbook-v1/Classes.md:496:4     - Unknown word (Constructor)   -- ## Constructor functions
packages/documentation/copy/en/handbook-v1/Classes.md:51:7      - Unknown word (Animal)      -- class Animal {
packages/documentation/copy/en/handbook-v1/Classes.md:52:18     - Unknown word (Meters)      -- move(distanceInMeters: number = 0) {
packages/documentation/copy/en/handbook-v1/Classes.md:52:8      - Unknown word (distance)    -- move(distanceInMeters: number = 0
packages/documentation/copy/en/handbook-v1/Classes.md:53:25     - Unknown word (moved)       -- console.log(`Animal moved ${distanceInMeters}m
packages/documentation/copy/en/handbook-v1/Classes.md:570:12    - Unknown word (Maker)         -- let greeterMaker: typeof Greeter = Greeter
packages/documentation/copy/en/handbook-v1/Classes.md:582:4     - Unknown word (instantiate)   -- We instantiate the `Greeter` class
packages/documentation/copy/en/handbook-v1/Classes.md:58:3      - Unknown word (bark)        -- bark() {
packages/documentation/copy/en/handbook-v1/Classes.md:591:88    - Unknown word (invoking)      -- instances of `Greeter` and invoking them as before.
packages/documentation/copy/en/handbook-v1/Classes.md:592:33    - Unknown word (changing)      -- good to mention that changing static property is frowned
packages/documentation/copy/en/handbook-v1/Classes.md:592:61    - Unknown word (frowned)       -- changing static property is frowned upon, here `greeter
packages/documentation/copy/en/handbook-v1/Classes.md:592:69    - Unknown word (upon)          -- property is frowned upon, here `greeter3` has
packages/documentation/copy/en/handbook-v1/Classes.md:59:18     - Unknown word (Woof)        -- console.log("Woof! Woof!");
packages/documentation/copy/en/handbook-v1/Classes.md:70:39     - Unknown word (derives)     -- derived_ class that derives from the `Animal` _base
packages/documentation/copy/en/handbook-v1/Classes.md:71:1      - Unknown word (Derived)     -- Derived classes are often called
packages/documentation/copy/en/handbook-v1/Classes.md:71:35     - Unknown word (subclasses)  -- classes are often called _subclasses_, and base classes are
packages/documentation/copy/en/handbook-v1/Classes.md:71:83     - Unknown word (superclasses) -- classes are often called _superclasses_.
packages/documentation/copy/en/handbook-v1/Classes.md:88:7      - Unknown word (Snake)        -- class Snake extends Animal {
packages/documentation/copy/en/handbook-v1/Classes.md:93:18     - Unknown word (Slithering)   -- console.log("Slithering...");
packages/documentation/copy/en/handbook-v1/Classes.md:98:7      - Unknown word (Horse)        -- class Horse extends Animal {
packages/documentation/copy/en/handbook-v1/Functions.md:102:1     - Unknown word (Captured)     -- Captured variables are not reflected
packages/documentation/copy/en/handbook-v1/Functions.md:102:28    - Unknown word (reflected)    -- Captured variables are not reflected in the type.
packages/documentation/copy/en/handbook-v1/Functions.md:103:12    - Unknown word (captured)     -- In effect, captured variables are part of
packages/documentation/copy/en/handbook-v1/Functions.md:105:5     - Unknown word (Inferring)    -- ### Inferring the types
packages/documentation/copy/en/handbook-v1/Functions.md:107:145   - Unknown word (equation)     -- types on one side of the equation:
packages/documentation/copy/en/handbook-v1/Functions.md:107:4     - Unknown word (playing)      -- In playing with the example, you
packages/documentation/copy/en/handbook-v1/Functions.md:11:1      - Unknown word (They're)    -- They're how you build up layers
packages/documentation/copy/en/handbook-v1/Functions.md:11:36     - Unknown word (abstraction) -- you build up layers of abstraction, mimicking classes,
packages/documentation/copy/en/handbook-v1/Functions.md:11:49     - Unknown word (mimicking)   -- layers of abstraction, mimicking classes, information
packages/documentation/copy/en/handbook-v1/Functions.md:11:80     - Unknown word (hiding)      -- classes, information hiding, and modules.
packages/documentation/copy/en/handbook-v1/Functions.md:126:35    - Unknown word (assumed)      -- every parameter is assumed to be required by the
packages/documentation/copy/en/handbook-v1/Functions.md:129:106   - Unknown word (expects)      -- parameters the function expects.
packages/documentation/copy/en/handbook-v1/Functions.md:138:33    - Unknown word (Adams)        -- = buildName("Bob", "Adams", "Sr."); // error,
packages/documentation/copy/en/handbook-v1/Functions.md:13:31     - Unknown word (capabilities) -- TypeScript also adds some new capabilities to the standard JavaScript
packages/documentation/copy/en/handbook-v1/Functions.md:160:8     - Unknown word (wanted)       -- Had we wanted to make the first name
packages/documentation/copy/en/handbook-v1/Functions.md:178:139   - Unknown word (omitted)      -- optional parameters, can be omitted when calling their respective
packages/documentation/copy/en/handbook-v1/Functions.md:178:76    - Unknown word (treated)      -- required parameters are treated as optional, and just
packages/documentation/copy/en/handbook-v1/Functions.md:179:75    - Unknown word (commonality)  -- parameters will share commonality in their types, so both
packages/documentation/copy/en/handbook-v1/Functions.md:17:104    - Unknown word (anonymous)    -- named function or as an anonymous function.
packages/documentation/copy/en/handbook-v1/Functions.md:18:36     - Unknown word (appropriate)  -- you to choose the most appropriate approach for your application
packages/documentation/copy/en/handbook-v1/Functions.md:196:33    - Unknown word (disappears)   -- value of `lastName` disappears in the type, only leaving
packages/documentation/copy/en/handbook-v1/Functions.md:196:70    - Unknown word (behind)       -- the type, only leaving behind the fact that the parameter
packages/documentation/copy/en/handbook-v1/Functions.md:204:33    - Unknown word (Will)         -- buildName(firstName = "Will", lastName: string)
packages/documentation/copy/en/handbook-v1/Functions.md:20:12     - Unknown word (recap)        -- To quickly recap what these two approaches
packages/documentation/copy/en/handbook-v1/Functions.md:20:33     - Unknown word (approaches)   -- recap what these two approaches look like in JavaScript
packages/documentation/copy/en/handbook-v1/Functions.md:210:45    - Unknown word (okay)         -- "Bob", "Adams"); // okay and returns "Bob Adams
packages/documentation/copy/en/handbook-v1/Functions.md:216:79    - Unknown word (talk)         -- thing in common: they talk about one parameter
packages/documentation/copy/en/handbook-v1/Functions.md:220:24    - Unknown word (gather)       -- TypeScript, you can gather these arguments together
packages/documentation/copy/en/handbook-v1/Functions.md:227:26    - Unknown word (Joseph)       -- employeeName will be "Joseph Samuel Lucas MacKinzie
packages/documentation/copy/en/handbook-v1/Functions.md:227:33    - Unknown word (Samuel)       -- employeeName will be "Joseph Samuel Lucas MacKinzie"
packages/documentation/copy/en/handbook-v1/Functions.md:227:40    - Unknown word (Lucas)        -- will be "Joseph Samuel Lucas MacKinzie"
packages/documentation/copy/en/handbook-v1/Functions.md:231:36    - Unknown word (boundless)    -- parameters_ are treated as a boundless number of optional parameters
packages/documentation/copy/en/handbook-v1/Functions.md:233:91    - Unknown word (ellipsis)     -- name given after the ellipsis (`...`), allowing you
packages/documentation/copy/en/handbook-v1/Functions.md:247:68    - Unknown word (passage)      -- something of a rite of passage.
packages/documentation/copy/en/handbook-v1/Functions.md:249:1     - Unknown word (Fortunately)  -- Fortunately, TypeScript lets you
packages/documentation/copy/en/handbook-v1/Functions.md:249:34    - Unknown word (catch)        -- TypeScript lets you catch incorrect uses of `this
packages/documentation/copy/en/handbook-v1/Functions.md:250:73    - Unknown word (Yehuda)       -- though, first read Yehuda Katz's [Understanding
packages/documentation/copy/en/handbook-v1/Functions.md:251:1     - Unknown word (Yehuda's)     -- Yehuda's article explains the
packages/documentation/copy/en/handbook-v1/Functions.md:251:31    - Unknown word (inner)        -- article explains the inner workings of `this` very
packages/documentation/copy/en/handbook-v1/Functions.md:251:37    - Unknown word (workings)     -- article explains the inner workings of `this` very well
packages/documentation/copy/en/handbook-v1/Functions.md:251:91    - Unknown word (basics)       -- we'll just cover the basics here.
packages/documentation/copy/en/handbook-v1/Functions.md:256:140   - Unknown word (executing)    -- context that a function is executing in.
packages/documentation/copy/en/handbook-v1/Functions.md:256:35    - Unknown word (flexible)     -- a very powerful and flexible feature, but it comes
packages/documentation/copy/en/handbook-v1/Functions.md:257:9     - Unknown word (notoriously)  -- This is notoriously confusing, especially
packages/documentation/copy/en/handbook-v1/Functions.md:263:5     - Unknown word (deck)         -- let deck = {
packages/documentation/copy/en/handbook-v1/Functions.md:264:3     - Unknown word (suits)        -- suits: ["hearts", "spades
packages/documentation/copy/en/handbook-v1/Functions.md:264:41    - Unknown word (diamonds)     -- "spades", "clubs", "diamonds"],
packages/documentation/copy/en/handbook-v1/Functions.md:265:3     - Unknown word (cards)        -- cards: Array(52),
packages/documentation/copy/en/handbook-v1/Functions.md:266:13    - Unknown word (Picker)       -- createCardPicker: function () {
packages/documentation/copy/en/handbook-v1/Functions.md:266:9     - Unknown word (Card)         -- createCardPicker: function ()
packages/documentation/copy/en/handbook-v1/Functions.md:268:11    - Unknown word (picked)       -- let pickedCard = Math.floor(Math
packages/documentation/copy/en/handbook-v1/Functions.md:268:29    - Unknown word (floor)        -- let pickedCard = Math.floor(Math.random() * 52)
packages/documentation/copy/en/handbook-v1/Functions.md:269:17    - Unknown word (Suit)         -- let pickedSuit = Math.floor(pickedCard
packages/documentation/copy/en/handbook-v1/Functions.md:271:46    - Unknown word (card)         -- this.suits[pickedSuit], card: pickedCard % 13 };
packages/documentation/copy/en/handbook-v1/Functions.md:283:7     - Unknown word (tried)        -- If we tried to run the example,
packages/documentation/copy/en/handbook-v1/Functions.md:289:48    - Unknown word (bound)        -- sure the function is bound to the correct `this
packages/documentation/copy/en/handbook-v1/Functions.md:29:4      - Unknown word (Anonymous)    -- // Anonymous function
packages/documentation/copy/en/handbook-v1/Functions.md:321:1     - Unknown word (Unfortunately) -- Unfortunately, the type of `this.suits
packages/documentation/copy/en/handbook-v1/Functions.md:324:23    - Unknown word (fake)          -- this` parameters are fake parameters that come
packages/documentation/copy/en/handbook-v1/Functions.md:328:43    - Unknown word (standalone)    -- is unusable in this standalone function
packages/documentation/copy/en/handbook-v1/Functions.md:332:115   - Unknown word (reuse)         -- clearer and easier to reuse:
packages/documentation/copy/en/handbook-v1/Functions.md:332:68    - Unknown word (Deck)          -- example above, `Card` and `Deck`, to make the types
packages/documentation/copy/en/handbook-v1/Functions.md:367:115   - Unknown word (cause)         -- noImplicitThis) will not cause any errors.
packages/documentation/copy/en/handbook-v1/Functions.md:36:35     - Unknown word (capture)      -- so, they're said to _capture_ these variables.
packages/documentation/copy/en/handbook-v1/Functions.md:37:133    - Unknown word (firm)         -- this article, having a firm understanding how this
packages/documentation/copy/en/handbook-v1/Functions.md:37:161    - Unknown word (mechanic)     -- understanding how this mechanic works is an important
packages/documentation/copy/en/handbook-v1/Functions.md:37:51     - Unknown word (offs)         -- works (and the trade-offs when using this technique
packages/documentation/copy/en/handbook-v1/Functions.md:37:72     - Unknown word (technique)    -- offs when using this technique) is outside of the scope
packages/documentation/copy/en/handbook-v1/Functions.md:396:7     - Unknown word (Handler)       -- class Handler {
packages/documentation/copy/en/handbook-v1/Functions.md:408:13    - Unknown word (annotated)     -- With `this` annotated, you make it explicit
packages/documentation/copy/en/handbook-v1/Functions.md:435:4     - Unknown word (course)        -- Of course, this also means that
packages/documentation/copy/en/handbook-v1/Functions.md:457:5     - Unknown word (downside)      -- The downside is that one arrow function
packages/documentation/copy/en/handbook-v1/Functions.md:458:67    - Unknown word (Handler's)     -- once and attached to Handler's prototype.
packages/documentation/copy/en/handbook-v1/Functions.md:463:15    - Unknown word (inherently)    -- JavaScript is inherently a very dynamic language
packages/documentation/copy/en/handbook-v1/Functions.md:464:10    - Unknown word (uncommon)      -- It's not uncommon for a single JavaScript
packages/documentation/copy/en/handbook-v1/Functions.md:472:18    - Unknown word (gave)          -- // if so, they gave us the deck and we'll
packages/documentation/copy/en/handbook-v1/Functions.md:499:13    - Unknown word (picks)         -- If the user picks the card, we tell them
packages/documentation/copy/en/handbook-v1/Functions.md:499:53    - Unknown word (they've)       -- tell them which card they've picked.
packages/documentation/copy/en/handbook-v1/Functions.md:540:62    - Unknown word (follows)       -- correct type check, it follows a similar process to
packages/documentation/copy/en/handbook-v1/Functions.md:541:36    - Unknown word (proceeding)    -- the overload list and, proceeding with the first overload
packages/documentation/copy/en/handbook-v1/Functions.md:541:72    - Unknown word (attempts)      -- the first overload, attempts to call the function
packages/documentation/copy/en/handbook-v1/Functions.md:542:7     - Unknown word (finds)         -- If it finds a match, it picks this
packages/documentation/copy/en/handbook-v1/Functions.md:543:23    - Unknown word (customary)     -- For this reason, it's customary to order overloads from
packages/documentation/copy/en/handbook-v1/Functions.md:83:32     - Unknown word (readability)  -- is just to help with readability.
packages/documentation/copy/en/handbook-v1/Functions.md:87:32     - Unknown word (increment)    -- (baseValue: number, increment: number) => number
packages/documentation/copy/en/handbook-v1/Functions.md:99:4      - Unknown word (mentioned)    -- As mentioned before, this is a required
packages/documentation/copy/en/handbook-v1/Generics.md:100:13    - Unknown word (tempted)     -- We might be tempted to write this:
packages/documentation/copy/en/handbook-v1/Generics.md:10:97     - Unknown word (consistent) -- have well-defined and consistent APIs, but are also reusable
packages/documentation/copy/en/handbook-v1/Generics.md:110:100   - Unknown word (nowhere)     -- member of `arg`, but nowhere have we said that `arg
packages/documentation/copy/en/handbook-v1/Generics.md:111:1     - Unknown word (Remember)    -- Remember, we said earlier that
packages/documentation/copy/en/handbook-v1/Generics.md:111:53    - Unknown word (stand)       -- these type variables stand in for any and all types
packages/documentation/copy/en/handbook-v1/Generics.md:11:21     - Unknown word (capable)    -- Components that are capable of working on the data
packages/documentation/copy/en/handbook-v1/Generics.md:11:84     - Unknown word (tomorrow)   -- well as the data of tomorrow will give you the most
packages/documentation/copy/en/handbook-v1/Generics.md:124:90    - Unknown word (bind)        -- back out, as `T` would bind to `number`.
packages/documentation/copy/en/handbook-v1/Generics.md:125:132   - Unknown word (greater)     -- whole type, giving us greater flexibility.
packages/documentation/copy/en/handbook-v1/Generics.md:127:8     - Unknown word (alternatively) -- We can alternatively write the sample example
packages/documentation/copy/en/handbook-v1/Generics.md:13:61     - Unknown word (toolbox)    -- the main tools in the toolbox for creating reusable
packages/documentation/copy/en/handbook-v1/Generics.md:144:101   - Unknown word (listed)        -- the type parameters listed first, similarly to
packages/documentation/copy/en/handbook-v1/Generics.md:14:22     - Unknown word (consume)    -- This allows users to consume these components and
packages/documentation/copy/en/handbook-v1/Generics.md:190:57    - Unknown word (Dictionary)    -- generic over (e.g. `Dictionary<string>` rather than
packages/documentation/copy/en/handbook-v1/Generics.md:205:53    - Unknown word (slightly)      -- changed to be something slightly different.
packages/documentation/copy/en/handbook-v1/Generics.md:207:129   - Unknown word (locking)       -- number`), effectively locking in what the underlying
packages/documentation/copy/en/handbook-v1/Generics.md:207:59    - Unknown word (specify)       -- now will also need to specify the corresponding type
packages/documentation/copy/en/handbook-v1/Generics.md:20:48     - Unknown word (echo)       -- similar way to the `echo` command.
packages/documentation/copy/en/handbook-v1/Generics.md:232:101   - Unknown word (restricting)   -- noticed that nothing is restricting it to only use the
packages/documentation/copy/en/handbook-v1/Generics.md:242:11    - Unknown word (Numeric)       -- let stringNumeric = new GenericNumber
packages/documentation/copy/en/handbook-v1/Generics.md:253:89    - Unknown word (sides)         -- html), a class has two sides to its type: the static
packages/documentation/copy/en/handbook-v1/Generics.md:259:180   - Unknown word (warns)         -- length` property, so it warns us that we can't make
packages/documentation/copy/en/handbook-v1/Generics.md:259:213   - Unknown word (assumption)    -- that we can't make this assumption.
packages/documentation/copy/en/handbook-v1/Generics.md:277:11    - Unknown word (Lengthwise)    -- interface Lengthwise {
packages/documentation/copy/en/handbook-v1/Generics.md:322:49    - Unknown word (grabbing)      -- re not accidentally grabbing a property that does
packages/documentation/copy/en/handbook-v1/Generics.md:338:15    - Unknown word (factories)     -- When creating factories in TypeScript using
packages/documentation/copy/en/handbook-v1/Generics.md:350:10    - Unknown word (Keeper)        -- class BeeKeeper {
packages/documentation/copy/en/handbook-v1/Generics.md:363:3     - Unknown word (keeper)        -- keeper: BeeKeeper;
packages/documentation/copy/en/handbook-v1/Generics.md:366:7     - Unknown word (Lion)          -- class Lion extends Animal {
packages/documentation/copy/en/handbook-v1/Generics.md:38:22     - Unknown word (certainly)  -- While using `any` is certainly generic in that it will
packages/documentation/copy/en/handbook-v1/Generics.md:39:82     - Unknown word (returned)   -- that any type could be returned.
packages/documentation/copy/en/handbook-v1/Generics.md:41:27     - Unknown word (capturing)  -- Instead, we need a way of capturing the type of the argument
packages/documentation/copy/en/handbook-v1/Generics.md:52:47     - Unknown word (inspection) -- the return type. On inspection, we can now see the
packages/documentation/copy/en/handbook-v1/Generics.md:56:39     - Unknown word (precise)    -- , it's also just as precise (ie, it doesn't lose
packages/documentation/copy/en/handbook-v1/Generics.md:56:63     - Unknown word (lose)       -- precise (ie, it doesn't lose any information) as
packages/documentation/copy/en/handbook-v1/Generics.md:70:89     - Unknown word (denoted)    -- to the function call, denoted using the `<>` around
packages/documentation/copy/en/handbook-v1/Generics.md:83:104    - Unknown word (looked)     -- ; the compiler just looked at the value `"myString
packages/documentation/copy/en/handbook-v1/Generics.md:83:69     - Unknown word (brackets)   -- the type in the angle brackets (`<>`); the compiler
packages/documentation/copy/en/handbook-v1/Generics.md:84:83     - Unknown word (readable)   -- code shorter and more readable, you may need to explicitly
packages/documentation/copy/en/handbook-v1/Generics.md:88:146    - Unknown word (generically) -- enforce that you use any generically typed parameters in
packages/documentation/copy/en/handbook-v1/Interfaces.md:113:32    - Unknown word (modifiable)   -- properties should only be modifiable when an object is first
packages/documentation/copy/en/handbook-v1/Interfaces.md:137:106   - Unknown word (removed)      -- all mutating methods removed, so you can make sure
packages/documentation/copy/en/handbook-v1/Interfaces.md:137:89    - Unknown word (mutating)     -- `Array<T>` with all mutating methods removed, so
packages/documentation/copy/en/handbook-v1/Interfaces.md:14:44     - Unknown word (naming)     -- interfaces fill the role of naming these types, and are
packages/documentation/copy/en/handbook-v1/Interfaces.md:14:90     - Unknown word (defining)   -- are a powerful way of defining contracts within your
packages/documentation/copy/en/handbook-v1/Interfaces.md:14:99     - Unknown word (contracts)  -- powerful way of defining contracts within your code as
packages/documentation/copy/en/handbook-v1/Interfaces.md:150:25    - Unknown word (snippet)      -- the last line of the snippet you can see that even
packages/documentation/copy/en/handbook-v1/Interfaces.md:165:4     - Unknown word (Excess)       -- ## Excess Property Checks
packages/documentation/copy/en/handbook-v1/Interfaces.md:168:14    - Unknown word (learned)      -- We also just learned about optional properties
packages/documentation/copy/en/handbook-v1/Interfaces.md:170:28    - Unknown word (naively)      -- However, combining the two naively would allow an error
packages/documentation/copy/en/handbook-v1/Interfaces.md:170:60    - Unknown word (sneak)        -- would allow an error to sneak in. For example, taking
packages/documentation/copy/en/handbook-v1/Interfaces.md:186:31    - Unknown word (colour)       -- mySquare = createSquare({ colour: "red", width: 100
packages/documentation/copy/en/handbook-v1/Interfaces.md:189:48    - Unknown word (spelled)      -- to `createSquare` is spelled _`colour`_ instead of
packages/documentation/copy/en/handbook-v1/Interfaces.md:18:5      - Unknown word (easiest)    -- The easiest way to see how interfaces
packages/documentation/copy/en/handbook-v1/Interfaces.md:190:47    - Unknown word (silently)     -- sort of thing fails silently.
packages/documentation/copy/en/handbook-v1/Interfaces.md:192:11    - Unknown word (argue)        -- You could argue that this program is
packages/documentation/copy/en/handbook-v1/Interfaces.md:192:172   - Unknown word (insignificant) -- colour` property is insignificant.
packages/documentation/copy/en/handbook-v1/Interfaces.md:194:31    - Unknown word (stance)        -- TypeScript takes the stance that there's probably
packages/documentation/copy/en/handbook-v1/Interfaces.md:195:29    - Unknown word (treatment)     -- literals get special treatment and undergo _excess
packages/documentation/copy/en/handbook-v1/Interfaces.md:195:43    - Unknown word (undergo)       -- special treatment and undergo _excess property checking
packages/documentation/copy/en/handbook-v1/Interfaces.md:246:181   - Unknown word (matter)        -- , their types don't matter.
packages/documentation/copy/en/handbook-v1/Interfaces.md:246:57    - Unknown word (saying)        -- bit, but here we're saying a `SquareConfig` can
packages/documentation/copy/en/handbook-v1/Interfaces.md:246:7     - Unknown word (discuss)       -- We'll discuss index signatures in
packages/documentation/copy/en/handbook-v1/Interfaces.md:248:5     - Unknown word (final)         -- One final way to get around these
packages/documentation/copy/en/handbook-v1/Interfaces.md:269:11    - Unknown word (workaround)    -- The above workaround will work as long as
packages/documentation/copy/en/handbook-v1/Interfaces.md:291:123   - Unknown word (majority)      -- techniques in mind, but a majority of excess property errors
packages/documentation/copy/en/handbook-v1/Interfaces.md:292:119   - Unknown word (revise)        -- bags, you might need to revise some of your type declaration
packages/documentation/copy/en/handbook-v1/Interfaces.md:293:164   - Unknown word (reflect)       -- of `SquareConfig` to reflect that.
packages/documentation/copy/en/handbook-v1/Interfaces.md:32:48     - Unknown word (lenient)    -- TypeScript isn't as lenient, which we'll cover in
packages/documentation/copy/en/handbook-v1/Interfaces.md:358:105   - Unknown word (indicates)     -- have made an error that indicates return type doesn't
packages/documentation/copy/en/handbook-v1/Interfaces.md:376:146   - Unknown word (daniel)        -- a[10]`, or `ageMap["daniel"]`.
packages/documentation/copy/en/handbook-v1/Interfaces.md:37:11     - Unknown word (Labeled)    -- interface LabeledValue {
packages/documentation/copy/en/handbook-v1/Interfaces.md:387:20    - Unknown word (Fred)          -- myArray = ["Bob", "Fred"];
packages/documentation/copy/en/handbook-v1/Interfaces.md:392:1     - Unknown word (Above)         -- Above, we have a `StringArray
packages/documentation/copy/en/handbook-v1/Interfaces.md:396:41    - Unknown word (indexers)      -- support many types of indexers, but the type returned
packages/documentation/copy/en/handbook-v1/Interfaces.md:396:88    - Unknown word (indexer)       -- returned from a numeric indexer must be a subtype of
packages/documentation/copy/en/handbook-v1/Interfaces.md:403:19    - Unknown word (Initialization) -- // @strictPropertyInitialization: false
packages/documentation/copy/en/handbook-v1/Interfaces.md:409:3     - Unknown word (breed)          -- breed: string;
packages/documentation/copy/en/handbook-v1/Interfaces.md:412:58    - Unknown word (completely)     -- string might get you a completely separate type of Animal
packages/documentation/copy/en/handbook-v1/Interfaces.md:413:14    - Unknown word (Okay)           -- interface NotOkay {
packages/documentation/copy/en/handbook-v1/Interfaces.md:419:67    - Unknown word (dictionary)     -- way to describe the "dictionary" pattern, they also
packages/documentation/copy/en/handbook-v1/Interfaces.md:433:44    - Unknown word (acceptable)     -- different types are acceptable if the index signature
packages/documentation/copy/en/handbook-v1/Interfaces.md:453:15    - Unknown word (Mallory)        -- myArray[2] = "Mallory"; // error!
packages/documentation/copy/en/handbook-v1/Interfaces.md:458:35    - Unknown word (Strings)        -- Types with Template Strings
packages/documentation/copy/en/handbook-v1/Interfaces.md:470:6     - Unknown word (Permit)         -- // Permit any property starting
packages/documentation/copy/en/handbook-v1/Interfaces.md:475:6     - Unknown word (Handle)         -- // Handle known, and x- prefixed
packages/documentation/copy/en/handbook-v1/Interfaces.md:477:26    - Unknown word (powered)        -- const poweredBy = r["x-powered-by"]
packages/documentation/copy/en/handbook-v1/Interfaces.md:488:135   - Unknown word (contract)       -- class meets a particular contract, is also possible in
packages/documentation/copy/en/handbook-v1/Interfaces.md:488:93    - Unknown word (enforcing)      -- that of explicitly enforcing that a class meets a
packages/documentation/copy/en/handbook-v1/Interfaces.md:491:11    - Unknown word (Clock)          -- interface ClockInterface {
packages/documentation/copy/en/handbook-v1/Interfaces.md:520:6     - Unknown word (prohibits)      -- This prohibits you from using them
packages/documentation/copy/en/handbook-v1/Interfaces.md:522:5     - Unknown word (Difference)     -- ### Difference between the static and
packages/documentation/copy/en/handbook-v1/Interfaces.md:52:32     - Unknown word (matters)    -- only the shape that matters. If the object we pass
packages/documentation/copy/en/handbook-v1/Interfaces.md:52:89     - Unknown word (requirements) -- the function meets the requirements listed, then it's allowed
packages/documentation/copy/en/handbook-v1/Interfaces.md:542:23    - Unknown word (sits)           -- Since the constructor sits in the static side,
packages/documentation/copy/en/handbook-v1/Interfaces.md:54:12     - Unknown word (pointing)     -- It's worth pointing out that the type checker
packages/documentation/copy/en/handbook-v1/Interfaces.md:568:18    - Unknown word (beep)           -- console.log("beep beep");
packages/documentation/copy/en/handbook-v1/Interfaces.md:605:5     - Unknown word (clock)          -- let clock = new Clock(12, 17)
packages/documentation/copy/en/handbook-v1/Interfaces.md:609:4     - Unknown word (Extending)      -- ## Extending Interfaces
packages/documentation/copy/en/handbook-v1/Interfaces.md:60:157    - Unknown word (filled)       -- couple of properties filled in.
packages/documentation/copy/en/handbook-v1/Interfaces.md:60:75     - Unknown word (bags)         -- patterns like "option bags" where you pass an object
packages/documentation/copy/en/handbook-v1/Interfaces.md:628:57    - Unknown word (combination)    -- interfaces, creating a combination of all of the interfaces
packages/documentation/copy/en/handbook-v1/Interfaces.md:649:4     - Unknown word (Hybrid)         -- ## Hybrid Types
packages/documentation/copy/en/handbook-v1/Interfaces.md:652:75    - Unknown word (encounter)      -- you may occasionally encounter an object that works
packages/documentation/copy/en/handbook-v1/Interfaces.md:657:11    - Unknown word (Counter)        -- interface Counter {
packages/documentation/copy/en/handbook-v1/Interfaces.md:659:3     - Unknown word (interval)       -- interval: number;
packages/documentation/copy/en/handbook-v1/Interfaces.md:664:7     - Unknown word (counter)        -- let counter = function (start: number
packages/documentation/copy/en/handbook-v1/Interfaces.md:680:96    - Unknown word (implementations) -- class but not their implementations.
packages/documentation/copy/en/handbook-v1/Interfaces.md:681:80    - Unknown word (providing)       -- of the class without providing an implementation.
packages/documentation/copy/en/handbook-v1/Interfaces.md:686:41    - Unknown word (besides)         -- t have to be related besides inheriting from the
packages/documentation/copy/en/handbook-v1/Interfaces.md:686:49    - Unknown word (inheriting)      -- to be related besides inheriting from the base class
packages/documentation/copy/en/handbook-v1/Interfaces.md:695:11    - Unknown word (Selectable)      -- interface SelectableControl extends Control
packages/documentation/copy/en/handbook-v1/Interfaces.md:714:59    - Unknown word (descendants)     -- is only possible for descendants of `Control` to implement
packages/documentation/copy/en/handbook-v1/Interfaces.md:715:87    - Unknown word (originates)      -- private member that originates in the same declaration
packages/documentation/copy/en/handbook-v1/Interfaces.md:717:1     - Unknown word (Within)          -- Within the `Control` class
packages/documentation/copy/en/handbook-v1/Interfaces.md:718:1     - Unknown word (Effectively)     -- Effectively, a `SelectableControl
packages/documentation/copy/en/handbook-v1/Interfaces.md:86:116    - Unknown word (preventing)   -- properties while still also preventing use of properties that
packages/documentation/copy/en/handbook-v1/Interfaces.md:86:5      - Unknown word (advantage)    -- The advantage of optional properties
packages/documentation/copy/en/handbook-v1/Interfaces.md:86:69     - Unknown word (possibly)     -- you can describe these possibly available properties
packages/documentation/copy/en/handbook-v1/Interfaces.md:87:112    - Unknown word (letting)      -- get an error message letting us know:
packages/documentation/copy/en/handbook-v1/Interfaces.md:87:21     - Unknown word (mistyped)     -- For example, had we mistyped the name of the `color
packages/documentation/copy/en/handbook-v1/Interfaces.md:9:4       - Unknown word (excess)     -- [excess-property-checks, /docs
packages/documentation/copy/en/handbook-v1/Literal Types.md:106:112   - Unknown word (interrelated) -- whose properties are interrelated.
packages/documentation/copy/en/handbook-v1/Literal Types.md:10:21     - Unknown word (concrete)   -- A literal is a more concrete sub-type of a collective
packages/documentation/copy/en/handbook-v1/Literal Types.md:10:44     - Unknown word (collective) -- concrete sub-type of a collective type.
packages/documentation/copy/en/handbook-v1/Literal Types.md:15:12     - Unknown word (Narrowing)  -- ## Literal Narrowing
packages/documentation/copy/en/handbook-v1/Literal Types.md:18:4      - Unknown word (contrast)   -- In contrast, using `const` to declare
packages/documentation/copy/en/handbook-v1/Literal Types.md:18:55     - Unknown word (inform)     -- declare a variable will inform TypeScript that this
packages/documentation/copy/en/handbook-v1/Literal Types.md:21:19     - Unknown word (guarantee)  -- // We're making a guarantee that this variable
packages/documentation/copy/en/handbook-v1/Literal Types.md:31:126    - Unknown word (smaller)    -- string values) to a smaller, finite number of potential
packages/documentation/copy/en/handbook-v1/Literal Types.md:31:135    - Unknown word (finite)     -- values) to a smaller, finite number of potential
packages/documentation/copy/en/handbook-v1/Literal Types.md:35:42     - Unknown word (nicely)     -- literal types combine nicely with union types, type
packages/documentation/copy/en/handbook-v1/Literal Types.md:40:16     - Unknown word (ease)       -- type Easing = "ease-in" | "ease-out" |
packages/documentation/copy/en/handbook-v1/Literal Types.md:49:43     - Unknown word (reach)      -- possible that someone could reach this
packages/documentation/copy/en/handbook-v1/Literal Types.md:50:13     - Unknown word (ignoring)   -- // by ignoring your types though.
packages/documentation/copy/en/handbook-v1/Literal Types.md:57:23     - Unknown word (uneasy)     -- button.animate(0, 0, "uneasy");
packages/documentation/copy/en/handbook-v1/Literal Types.md:63:1      - Unknown word (Argument)   -- Argument of type '"uneasy"' is
packages/documentation/copy/en/handbook-v1/Literal Types.md:82:10     - Unknown word (roll)       -- function rollDice(): 1 | 2 | 3 |
packages/documentation/copy/en/handbook-v1/Literal Types.md:82:14     - Unknown word (Dice)       -- function rollDice(): 1 | 2 | 3 | 4 |
packages/documentation/copy/en/handbook-v1/Literal Types.md:92:19     - Unknown word (centered)   -- /** Creates a map centered at loc/lat */
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:104:66    - Unknown word (intuition)      -- just takes a bit of intuition to get used to.
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:10:3      - Unknown word (discriminating) -- discriminating-unions, /docs/handbook
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:110:5     - Unknown word (Discriminating) -- ### Discriminating Unions
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:115:13    - Unknown word (Loading)        -- type NetworkLoadingState = {
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:116:11    - Unknown word (loading)        -- state: "loading";
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:143:10    - Unknown word (collapse)       -- border-collapse:collapse;
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:143:3     - Unknown word (border)         -- border-collapse:collapse;
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:193:79    - Unknown word (safe)           -- NetworkState` - it is safe for your code to access
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:21:1      - Unknown word (Occasionally)   -- Occasionally, you'll run into a library
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:247:9     - Unknown word (switching)      -- // By switching on state, TypeScript
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:262:11    - Unknown word (Exhaustiveness) -- ### Union Exhaustiveness checking
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:264:63    - Unknown word (variants)       -- when we don't cover all variants of the discriminated
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:265:36    - Unknown word (Cached)         -- if we add `NetworkFromCachedState` to `NetworkState
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:26:4      - Unknown word (Takes)          -- * Takes a string and adds "padding
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:27:48     - Unknown word (appended)       -- string, then 'padding' is appended to the left side.
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:28:50     - Unknown word (spaces)         -- then that number of spaces is added to the left
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:333:35    - Unknown word (exhaustive)     -- switch` is no longer exhaustive, TypeScript is aware
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:337:77    - Unknown word (exhaustiveness) -- compiler uses to check for exhaustiveness:
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:353:20    - Unknown word (Unexpected)     -- throw new Error("Unexpected object: " + x);
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:377:22    - Unknown word (combines)       -- An intersection type combines multiple types into
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:379:39    - Unknown word (Loggable)       -- Person & Serializable & Loggable` is a type which is
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:37:20     - Unknown word (Expected)       -- throw new Error(`Expected string or number, got
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:382:25    - Unknown word (networking)     -- example, if you had networking requests with consistent
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:382:67    - Unknown word (handling)       -- with consistent error handling then you could separate
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:390:11    - Unknown word (Artworks)       -- interface ArtworksData {
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:391:3     - Unknown word (artworks)       -- artworks: { title: string }[
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:394:11    - Unknown word (Artists)        -- interface ArtistsData {
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:395:3     - Unknown word (artists)        -- artists: { name: string }[]
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:398:25    - Unknown word (composed)       -- These interfaces are composed to have
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:44:56     - Unknown word (neither)        -- with an argument that's neither a `number` nor a `string
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:50:5      - Unknown word (indented)       -- let indentedString = padLeft("Hello
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:54:58     - Unknown word (overkill)       -- s also a little bit overkill.
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:55:12     - Unknown word (nice)           -- One of the nice things about the original
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:56:38     - Unknown word (concise)        -- usage was simple and concise.
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:85:11     - Unknown word (Bird)           -- interface Bird {
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:87:6      - Unknown word (Eggs)           -- layEggs(): void;
packages/documentation/copy/en/handbook-v1/Unions and Intersections.md:91:3      - Unknown word (swim)           -- swim(): void;
packages/documentation/copy/en/handbook-v2/Basics.md:100:19    - Unknown word (discussing)  -- So far we've been discussing certain things like
packages/documentation/copy/en/handbook-v2/Basics.md:101:1     - Unknown word (Those)       -- Those cases come up because
packages/documentation/copy/en/handbook-v2/Basics.md:109:10    - Unknown word (Daniel)      -- name: "Daniel",
packages/documentation/copy/en/handbook-v2/Basics.md:10:67     - Unknown word (observe)    -- of behaviors you can observe from running different
packages/documentation/copy/en/handbook-v2/Basics.md:116:1     - Unknown word (Ultimately)  -- Ultimately, a static type system
packages/documentation/copy/en/handbook-v2/Basics.md:116:80    - Unknown word (flagged)     -- what code should be flagged as an error in its system
packages/documentation/copy/en/handbook-v2/Basics.md:11:6      - Unknown word (sounds)     -- That sounds abstract, but as a quick
packages/documentation/copy/en/handbook-v2/Basics.md:130:16    - Unknown word (catches)     -- And TypeScript catches _a lot_ of legitimate
packages/documentation/copy/en/handbook-v2/Basics.md:132:14    - Unknown word (typos)       -- For example: typos,
packages/documentation/copy/en/handbook-v2/Basics.md:136:7     - Unknown word (announcement) -- const announcement = "Hello World!";
packages/documentation/copy/en/handbook-v2/Basics.md:146:1     - Unknown word (uncalled)     -- uncalled functions,
packages/documentation/copy/en/handbook-v2/Basics.md:149:13    - Unknown word (Locals)       -- // @noUnusedLocals
packages/documentation/copy/en/handbook-v2/Basics.md:149:7     - Unknown word (Unused)       -- // @noUnusedLocals
packages/documentation/copy/en/handbook-v2/Basics.md:151:14    - Unknown word (Coin)         -- function flipCoin() {
packages/documentation/copy/en/handbook-v2/Basics.md:152:6     - Unknown word (Meant)        -- // Meant to be Math.random()
packages/documentation/copy/en/handbook-v2/Basics.md:157:10    - Unknown word (logic)        -- or basic logic errors.
packages/documentation/copy/en/handbook-v2/Basics.md:165:12    - Unknown word (unreachable)  -- // Oops, unreachable
packages/documentation/copy/en/handbook-v2/Basics.md:165:6     - Unknown word (Oops)         -- // Oops, unreachable
packages/documentation/copy/en/handbook-v2/Basics.md:169:14    - Unknown word (Tooling)      -- ## Types for Tooling
packages/documentation/copy/en/handbook-v2/Basics.md:175:50    - Unknown word (suggesting)   -- it can also start _suggesting_ which properties you
packages/documentation/copy/en/handbook-v2/Basics.md:177:30    - Unknown word (leveraged)    -- means TypeScript can be leveraged for editing code too
packages/documentation/copy/en/handbook-v2/Basics.md:178:64    - Unknown word (tooling)      -- when they talk about tooling in TypeScript.
packages/documentation/copy/en/handbook-v2/Basics.md:192:5     - Unknown word (listen)       -- app.listen(3000);
packages/documentation/copy/en/handbook-v2/Basics.md:195:26    - Unknown word (seriously)    -- TypeScript takes tooling seriously, and that goes beyond
packages/documentation/copy/en/handbook-v2/Basics.md:196:167   - Unknown word (jumping)      -- navigation features for jumping to definitions of a
packages/documentation/copy/en/handbook-v2/Basics.md:196:208   - Unknown word (finding)      -- definitions of a variable, or finding all references to a
packages/documentation/copy/en/handbook-v2/Basics.md:196:55    - Unknown word (fixes)        -- TypeScript can deliver "quick fixes" to automatically fix
packages/documentation/copy/en/handbook-v2/Basics.md:201:12    - Unknown word (talking)      -- We've been talking about type-checking
packages/documentation/copy/en/handbook-v2/Basics.md:202:11    - Unknown word (acquainted)   -- Let's get acquainted with our new friend
packages/documentation/copy/en/handbook-v2/Basics.md:202:35    - Unknown word (friend)       -- acquainted with our new friend `tsc`, the TypeScript
packages/documentation/copy/en/handbook-v2/Basics.md:209:8     - Unknown word (installs)     -- > This installs the TypeScript Compiler
packages/documentation/copy/en/handbook-v2/Basics.md:219:21    - Unknown word (frills)       -- Notice there are no frills here; this "hello world
packages/documentation/copy/en/handbook-v2/Basics.md:220:68    - Unknown word (installed)    -- command `tsc` which was installed for us by the `typescript
packages/documentation/copy/en/handbook-v2/Basics.md:228:1     - Unknown word (Wait)         -- Wait, "tada" _what_ exactly
packages/documentation/copy/en/handbook-v2/Basics.md:229:26    - Unknown word (happened)     -- ran `tsc` and nothing happened!
packages/documentation/copy/en/handbook-v2/Basics.md:234:71    - Unknown word (transforms)   -- tsc` _compiles_ or _transforms_ it into a plain JavaScript
packages/documentation/copy/en/handbook-v2/Basics.md:235:57    - Unknown word (spits)        -- see what TypeScript spits out after it processes
packages/documentation/copy/en/handbook-v2/Basics.md:243:23    - Unknown word (emit)         -- The compiler tries to emit clean readable code
packages/documentation/copy/en/handbook-v2/Basics.md:243:28    - Unknown word (clean)        -- compiler tries to emit clean readable code that looks
packages/documentation/copy/en/handbook-v2/Basics.md:244:45    - Unknown word (indents)      -- so easy, TypeScript indents consistently, is mindful
packages/documentation/copy/en/handbook-v2/Basics.md:244:70    - Unknown word (mindful)      -- indents consistently, is mindful of when our code spans
packages/documentation/copy/en/handbook-v2/Basics.md:244:95    - Unknown word (spans)        -- mindful of when our code spans across different lines
packages/documentation/copy/en/handbook-v2/Basics.md:246:24    - Unknown word (introduce)    -- What about if we _did_ introduce a type-checking error
packages/documentation/copy/en/handbook-v2/Basics.md:247:7     - Unknown word (rewrite)      -- Let's rewrite `hello.ts`:
packages/documentation/copy/en/handbook-v2/Basics.md:251:26    - Unknown word (grade)        -- This is an industrial-grade general-purpose greeter
packages/documentation/copy/en/handbook-v2/Basics.md:256:8     - Unknown word (Brendan)      -- greet("Brendan");
packages/documentation/copy/en/handbook-v2/Basics.md:25:89     - Unknown word (reliably)   -- pretty common - we can't reliably say what results we
packages/documentation/copy/en/handbook-v2/Basics.md:265:85    - Unknown word (rightfully)   -- greet` function, and rightfully so.
packages/documentation/copy/en/handbook-v2/Basics.md:267:1     - Unknown word (Thanks)       -- Thanks TypeScript!
packages/documentation/copy/en/handbook-v2/Basics.md:269:4     - Unknown word (Emitting)     -- ## Emitting with Errors
packages/documentation/copy/en/handbook-v2/Basics.md:273:58    - Unknown word (reported)     -- the fact that `tsc` reported an error about our code
packages/documentation/copy/en/handbook-v2/Basics.md:275:106   - Unknown word (tradeoff)     -- run, and so there's a tradeoff on what sorts of things
packages/documentation/copy/en/handbook-v2/Basics.md:275:4     - Unknown word (reiterate)    -- To reiterate from earlier, type-checking
packages/documentation/copy/en/handbook-v2/Basics.md:276:45    - Unknown word (scenarios)    -- okay, but there are scenarios where those checks get
packages/documentation/copy/en/handbook-v2/Basics.md:278:1     - Unknown word (Eventually)   -- Eventually you'll get around to
packages/documentation/copy/en/handbook-v2/Basics.md:278:33    - Unknown word (cleaning)     -- you'll get around to cleaning things up for the type
packages/documentation/copy/en/handbook-v2/Basics.md:282:53    - Unknown word (defensive)    -- want to be a bit more defensive against mistakes, and
packages/documentation/copy/en/handbook-v2/Basics.md:283:35    - Unknown word (Emit)         -- you can use the [`noEmitOnError`](/tsconfig#noEmitOnEr
packages/documentation/copy/en/handbook-v2/Basics.md:292:4     - Unknown word (Explicit)     -- ## Explicit Types
packages/documentation/copy/en/handbook-v2/Basics.md:294:26    - Unknown word (told)         -- until now, we haven't told TypeScript what `person
packages/documentation/copy/en/handbook-v2/Basics.md:2:12      - Unknown word (Basics)     -- title: The Basics
packages/documentation/copy/en/handbook-v2/Basics.md:304:27    - Unknown word (annotations)  -- we did was add _type annotations_ on `person` and `date
packages/documentation/copy/en/handbook-v2/Basics.md:316:8     - Unknown word (Maddison)     -- greet("Maddison", Date());
packages/documentation/copy/en/handbook-v2/Basics.md:322:1     - Unknown word (Perhaps)      -- Perhaps surprisingly, calling
packages/documentation/copy/en/handbook-v2/Basics.md:322:9     - Unknown word (surprisingly) -- Perhaps surprisingly, calling `Date()` in
packages/documentation/copy/en/handbook-v2/Basics.md:323:20    - Unknown word (constructing) -- On the other hand, constructing a `Date` with `new Date
packages/documentation/copy/en/handbook-v2/Basics.md:323:91    - Unknown word (expecting)    -- gives us what we were expecting.
packages/documentation/copy/en/handbook-v2/Basics.md:325:1     - Unknown word (Anyway)       -- Anyway, we can quickly fix
packages/documentation/copy/en/handbook-v2/Basics.md:33:113    - Unknown word (hope)       -- JavaScript, and we have to hope we got all the details
packages/documentation/copy/en/handbook-v2/Basics.md:33:66     - Unknown word (heads)      -- things we keep in our heads when we write JavaScript
packages/documentation/copy/en/handbook-v2/Basics.md:346:102   - Unknown word (hovered)      -- would show if you had hovered over the word.
packages/documentation/copy/en/handbook-v2/Basics.md:365:122   - Unknown word (concatenations) -- to plain strings with concatenations.
packages/documentation/copy/en/handbook-v2/Basics.md:367:48    - Unknown word (focus)          -- later, but let's now focus on that first point
packages/documentation/copy/en/handbook-v2/Basics.md:368:65    - Unknown word (pedantic)       -- or ECMAScript to be pedantic), so there really aren
packages/documentation/copy/en/handbook-v2/Basics.md:369:82    - Unknown word (strip)          -- it needs some way to strip out or transform any
packages/documentation/copy/en/handbook-v2/Basics.md:376:70    - Unknown word (rewritten)      -- template string was rewritten from
packages/documentation/copy/en/handbook-v2/Basics.md:391:20    - Unknown word (ability)        -- TypeScript has the ability to rewrite code from
packages/documentation/copy/en/handbook-v2/Basics.md:395:15    - Unknown word (chosen)         -- We could have chosen something a little bit
packages/documentation/copy/en/handbook-v2/Basics.md:395:50    - Unknown word (recent)         -- something a little bit more recent by using the [`target
packages/documentation/copy/en/handbook-v2/Basics.md:407:111   - Unknown word (ancient)        -- compatibility with certain ancient browsers is important
packages/documentation/copy/en/handbook-v2/Basics.md:407:33    - Unknown word (safely)         -- developers can therefore safely specify ES2015 or above
packages/documentation/copy/en/handbook-v2/Basics.md:409:4     - Unknown word (Strictness)     -- ## Strictness
packages/documentation/copy/en/handbook-v2/Basics.md:412:133   - Unknown word (decent)         -- program, and still have decent tooling.
packages/documentation/copy/en/handbook-v2/Basics.md:412:36    - Unknown word (loose)          -- are looking for a more loose opt-in experience which
packages/documentation/copy/en/handbook-v2/Basics.md:413:143   - Unknown word (potentially)    -- there's no checking for potentially `null`/`undefined` values
packages/documentation/copy/en/handbook-v2/Basics.md:414:21    - Unknown word (emits)          -- Much like how `tsc` emits in the face of errors
packages/documentation/copy/en/handbook-v2/Basics.md:414:85    - Unknown word (stay)           -- are put in place to stay out of your way.
packages/documentation/copy/en/handbook-v2/Basics.md:415:58    - Unknown word (desirable)      -- JavaScript, that might be a desirable first step.
packages/documentation/copy/en/handbook-v2/Basics.md:417:134   - Unknown word (strictness)     -- the language provides strictness settings as well.
packages/documentation/copy/en/handbook-v2/Basics.md:418:119   - Unknown word (closer)         -- not) into something closer to a dial.
packages/documentation/copy/en/handbook-v2/Basics.md:418:131   - Unknown word (dial)           -- something closer to a dial.
packages/documentation/copy/en/handbook-v2/Basics.md:41:104    - Unknown word (lower)      -- same string only in lower-case.
packages/documentation/copy/en/handbook-v2/Basics.md:41:21     - Unknown word (guess)      -- As you can probably guess, if we try to run `message
packages/documentation/copy/en/handbook-v2/Basics.md:420:102   - Unknown word (enables)        -- in the long run, and enables more thorough checks
packages/documentation/copy/en/handbook-v2/Basics.md:420:115   - Unknown word (thorough)       -- run, and enables more thorough checks and more accurate
packages/documentation/copy/en/handbook-v2/Basics.md:420:140   - Unknown word (accurate)       -- thorough checks and more accurate tooling.
packages/documentation/copy/en/handbook-v2/Basics.md:420:65    - Unknown word (pays)           -- generally speaking it pays for itself in the long
packages/documentation/copy/en/handbook-v2/Basics.md:423:167   - Unknown word (stated)         -- enabled unless otherwise stated.
packages/documentation/copy/en/handbook-v2/Basics.md:424:159   - Unknown word (toggles)        -- tsconfig-json.html) toggles them all on simultaneously
packages/documentation/copy/en/handbook-v2/Basics.md:424:179   - Unknown word (simultaneously) -- toggles them all on simultaneously, but we can opt out
packages/documentation/copy/en/handbook-v2/Basics.md:425:9     - Unknown word (biggest)        -- The two biggest ones you should know
packages/documentation/copy/en/handbook-v2/Basics.md:429:1     - Unknown word (Recall)         -- Recall that in some places
packages/documentation/copy/en/handbook-v2/Basics.md:430:16    - Unknown word (worst)          -- This isn't the worst thing that can happen
packages/documentation/copy/en/handbook-v2/Basics.md:430:57    - Unknown word (falling)        -- happen - after all, falling back to `any` is just
packages/documentation/copy/en/handbook-v2/Basics.md:432:28    - Unknown word (defeats)        -- However, using `any` often defeats the purpose of using
packages/documentation/copy/en/handbook-v2/Basics.md:434:1     - Unknown word (Turning)        -- Turning on the [`noImplicitAny
packages/documentation/copy/en/handbook-v2/Basics.md:439:105   - Unknown word (countless)      -- undefined` is the cause of countless bugs in the world -
packages/documentation/copy/en/handbook-v2/Basics.md:439:155   - Unknown word (billion)        -- some consider it a [billion dollar mistake](https
packages/documentation/copy/en/handbook-v2/Basics.md:439:45    - Unknown word (forgetting)     -- some code easier, but forgetting to handle `null` and
packages/documentation/copy/en/handbook-v2/Basics.md:440:117   - Unknown word (spares)         -- more explicit, and _spares_ us from worrying about
packages/documentation/copy/en/handbook-v2/Basics.md:52:84     - Unknown word (figuring)   -- chooses what to do is by figuring out the _type_ of the
packages/documentation/copy/en/handbook-v2/Basics.md:53:41     - Unknown word (alluding)   -- that `TypeError` is alluding to - it's saying that
packages/documentation/copy/en/handbook-v2/Basics.md:56:71     - Unknown word (mechanism)  -- corresponding runtime mechanism to identify their types
packages/documentation/copy/en/handbook-v2/Basics.md:61:12     - Unknown word (flip)       -- return x.flip();
packages/documentation/copy/en/handbook-v2/Basics.md:66:17     - Unknown word (pure)       -- The only way in pure JavaScript to tell what
packages/documentation/copy/en/handbook-v2/Basics.md:69:1      - Unknown word (Seen)       -- Seen in this way, a _type
packages/documentation/copy/en/handbook-v2/Basics.md:6:1       - Unknown word (preamble)   -- preamble: >
packages/documentation/copy/en/handbook-v2/Basics.md:70:17     - Unknown word (truly)      -- JavaScript only truly provides _dynamic_ typing
packages/documentation/copy/en/handbook-v2/Basics.md:72:5      - Unknown word (alternative) -- The alternative is to use a _static
packages/documentation/copy/en/handbook-v2/Basics.md:76:1      - Unknown word (Think)       -- Think back to that `TypeError
packages/documentation/copy/en/handbook-v2/Basics.md:78:54     - Unknown word (introducing) -- try our best to avoid introducing new bugs.
packages/documentation/copy/en/handbook-v2/Basics.md:7:223     - Unknown word (Started)    -- get-started'>Getting Started</a>' guides</a>
packages/documentation/copy/en/handbook-v2/Basics.md:7:236     - Unknown word (guides)     -- Getting Started</a>' guides</a>
packages/documentation/copy/en/handbook-v2/Basics.md:7:6       - Unknown word (Welcome)    -- <p>Welcome to the first page of
packages/documentation/copy/en/handbook-v2/Basics.md:80:114    - Unknown word (isolate)     -- we might be able to isolate the problem quickly
packages/documentation/copy/en/handbook-v2/Basics.md:81:38     - Unknown word (thoroughly)  -- have tested the feature thoroughly enough, so we might
packages/documentation/copy/en/handbook-v2/Basics.md:82:144    - Unknown word (forced)      -- different code that we're forced to dig through.
packages/documentation/copy/en/handbook-v2/Basics.md:82:15     - Unknown word (lucky)       -- Or if we were lucky enough to witness the
packages/documentation/copy/en/handbook-v2/Basics.md:82:31     - Unknown word (witness)     -- were lucky enough to witness the error, we might
packages/documentation/copy/en/handbook-v2/Basics.md:82:64     - Unknown word (ended)       -- error, we might have ended up doing large refactorings
packages/documentation/copy/en/handbook-v2/Basics.md:87:102    - Unknown word (rails)       -- might be going off the rails.
packages/documentation/copy/en/handbook-v2/Basics.md:98:18     - Unknown word (Failures)    -- ## Non-exception Failures
packages/documentation/copy/en/handbook-v2/Classes.md:1000:6    - Unknown word (story)          -- Long story short, by default, the
packages/documentation/copy/en/handbook-v2/Classes.md:1004:34   - Unknown word (mitigate)       -- provides some ways to mitigate or prevent this kind
packages/documentation/copy/en/handbook-v2/Classes.md:1014:64   - Unknown word (loses)          -- called in a way that loses its `this` context,
packages/documentation/copy/en/handbook-v2/Classes.md:1025:32   - Unknown word (crashing)       -- MyClass" instead of crashing
packages/documentation/copy/en/handbook-v2/Classes.md:1032:22   - Unknown word (memory)         -- This will use more memory, because each class
packages/documentation/copy/en/handbook-v2/Classes.md:1037:40   - Unknown word (initial)        -- function definition, an initial parameter named `this
packages/documentation/copy/en/handbook-v2/Classes.md:1057:92   - Unknown word (statically)     -- method definitions to statically enforce that the method
packages/documentation/copy/en/handbook-v2/Classes.md:1078:75   - Unknown word (realizing)      -- incorrectly without realizing it
packages/documentation/copy/en/handbook-v2/Classes.md:1079:47   - Unknown word (allocated)      -- class definition gets allocated, rather than one per
packages/documentation/copy/en/handbook-v2/Classes.md:1084:50   - Unknown word (dynamically)    -- called `this` refers _dynamically_ to the type of the
packages/documentation/copy/en/handbook-v2/Classes.md:1111:7    - Unknown word (Clearable)      -- class ClearableBox extends Box {
packages/documentation/copy/en/handbook-v2/Classes.md:1156:6    - Unknown word (mixed)          -- When mixed with a type narrowing
packages/documentation/copy/en/handbook-v2/Classes.md:1168:5    - Unknown word (Networked)      -- isNetworked(): this is Networked
packages/documentation/copy/en/handbook-v2/Classes.md:1169:17   - Unknown word (networked)      -- return this.networked;
packages/documentation/copy/en/handbook-v2/Classes.md:1202:41   - Unknown word (guard)          -- for a this-based type guard is to allow for lazy
packages/documentation/copy/en/handbook-v2/Classes.md:1214:14   - Unknown word (Gameboy)        -- box.value = "Gameboy";
packages/documentation/copy/en/handbook-v2/Classes.md:127:5     - Unknown word (Constructors)    -- ### Constructors
packages/documentation/copy/en/handbook-v2/Classes.md:1301:54   - Unknown word (hasn't)         -- abstract field_ is one that hasn't had an implementation
packages/documentation/copy/en/handbook-v2/Classes.md:1355:14   - Unknown word (Construct)      -- ### Abstract Construct Signatures
packages/documentation/copy/en/handbook-v2/Classes.md:1380:50   - Unknown word (perfectly)      -- definition of `greet`, it's perfectly legal to write this
packages/documentation/copy/en/handbook-v2/Classes.md:1413:4    - Unknown word (Relationships)  -- ## Relationships Between Classes
packages/documentation/copy/en/handbook-v2/Classes.md:1446:3    - Unknown word (salary)         -- salary: number;
packages/documentation/copy/en/handbook-v2/Classes.md:1453:13   - Unknown word (straightforward) -- This sounds straightforward, but there are a few
packages/documentation/copy/en/handbook-v2/Classes.md:1453:66   - Unknown word (stranger)        -- few cases that seem stranger than others.
packages/documentation/copy/en/handbook-v2/Classes.md:189:1     - Unknown word (Forgetting)      -- Forgetting to call `super` is an
packages/documentation/copy/en/handbook-v2/Classes.md:217:4     - Unknown word (unqualified)     -- An unqualified name in a method body
packages/documentation/copy/en/handbook-v2/Classes.md:217:76    - Unknown word (enclosing)       -- to something in the enclosing scope:
packages/documentation/copy/en/handbook-v2/Classes.md:233:15    - Unknown word (Setters)         -- ### Getters / Setters
packages/documentation/copy/en/handbook-v2/Classes.md:233:5     - Unknown word (Getters)         -- ### Getters / Setters
packages/documentation/copy/en/handbook-v2/Classes.md:249:21    - Unknown word (backed)          -- > Note that a field-backed get/set pair with no
packages/documentation/copy/en/handbook-v2/Classes.md:272:19    - Unknown word (Finite)          -- if (!Number.isFinite(num)) {
packages/documentation/copy/en/handbook-v2/Classes.md:28:38     - Unknown word (writeable)  -- declaration creates a public writeable property on a class
packages/documentation/copy/en/handbook-v2/Classes.md:299:10    - Unknown word (Heritage)        -- ## Class Heritage
packages/documentation/copy/en/handbook-v2/Classes.md:303:18    - Unknown word (Clauses)         -- ### `implements` Clauses
packages/documentation/copy/en/handbook-v2/Classes.md:305:29    - Unknown word (clause)          -- use an `implements` clause to check that a class
packages/documentation/copy/en/handbook-v2/Classes.md:306:18    - Unknown word (issued)          -- An error will be issued if a class fails to
packages/documentation/copy/en/handbook-v2/Classes.md:314:7     - Unknown word (Sonar)           -- class Sonar implements Pingable
packages/documentation/copy/en/handbook-v2/Classes.md:321:3     - Unknown word (pong)            -- pong() {
packages/documentation/copy/en/handbook-v2/Classes.md:329:6     - Unknown word (Cautions)        -- #### Cautions
packages/documentation/copy/en/handbook-v2/Classes.md:337:11    - Unknown word (Checkable)       -- interface Checkable {
packages/documentation/copy/en/handbook-v2/Classes.md:350:63    - Unknown word (influenced)      -- `s`'s type would be influenced by the `name: string
packages/documentation/copy/en/handbook-v2/Classes.md:351:26    - Unknown word (clauses)         -- is not - `implements` clauses don't change how the
packages/documentation/copy/en/handbook-v2/Classes.md:387:3     - Unknown word (woof)            -- woof(times: number) {
packages/documentation/copy/en/handbook-v2/Classes.md:401:6     - Unknown word (Overriding)      -- #### Overriding Methods
packages/documentation/copy/en/handbook-v2/Classes.md:411:78    - Unknown word (notion)          -- object, there is no notion of a "super field".
packages/documentation/copy/en/handbook-v2/Classes.md:413:12    - Unknown word (enforces)        -- TypeScript enforces that a derived class
packages/documentation/copy/en/handbook-v2/Classes.md:415:14    - Unknown word (here's)          -- For example, here's a legal way to override
packages/documentation/copy/en/handbook-v2/Classes.md:42:74     - Unknown word (implicit)   -- optional, but will be an implicit `any` if not specified
packages/documentation/copy/en/handbook-v2/Classes.md:484:4     - Unknown word (Crashes)         -- // Crashes because "name" will
packages/documentation/copy/en/handbook-v2/Classes.md:490:166   - Unknown word (completes)       -- parent class constructor completes, overwriting any value
packages/documentation/copy/en/handbook-v2/Classes.md:490:177   - Unknown word (overwriting)     -- constructor completes, overwriting any value set by the
packages/documentation/copy/en/handbook-v2/Classes.md:490:307   - Unknown word (inherited)       -- accurate type for an inherited field. To handle these
packages/documentation/copy/en/handbook-v2/Classes.md:494:9     - Unknown word (Birth)           -- dateOfBirth: any;
packages/documentation/copy/en/handbook-v2/Classes.md:502:3     - Unknown word (resident)        -- resident: Animal;
packages/documentation/copy/en/handbook-v2/Classes.md:53:4      - Unknown word (Prints)     -- // Prints 0, 0
packages/documentation/copy/en/handbook-v2/Classes.md:541:20    - Unknown word (initialization)  -- The order of class initialization, as defined by JavaScript
packages/documentation/copy/en/handbook-v2/Classes.md:548:149   - Unknown word (hadn't)          -- field initializations hadn't run yet.
packages/documentation/copy/en/handbook-v2/Classes.md:550:6     - Unknown word (Inheriting)      -- #### Inheriting Built-in Types
packages/documentation/copy/en/handbook-v2/Classes.md:554:59    - Unknown word (substitute)      -- an object implicitly substitute the value of `this`
packages/documentation/copy/en/handbook-v2/Classes.md:554:98    - Unknown word (callers)         -- value of `this` for any callers of `super(...)`.
packages/documentation/copy/en/handbook-v2/Classes.md:557:48    - Unknown word (others)          -- Error`, `Array`, and others may no longer work as
packages/documentation/copy/en/handbook-v2/Classes.md:558:143   - Unknown word (chain)           -- adjust the prototype chain;
packages/documentation/copy/en/handbook-v2/Classes.md:560:17    - Unknown word (compilers)       -- Other downlevel compilers generally have the same
packages/documentation/copy/en/handbook-v2/Classes.md:600:61    - Unknown word (Explorer)        -- not work on Internet Explorer 10 and prior](<https
packages/documentation/copy/en/handbook-v2/Classes.md:601:50    - Unknown word (onto)            -- methods from the prototype onto the instance itself
packages/documentation/copy/en/handbook-v2/Classes.md:642:18    - Unknown word (Howdy)           -- console.log("Howdy, " + this.getName()
packages/documentation/copy/en/handbook-v2/Classes.md:651:6     - Unknown word (Exposure)        -- #### Exposure of `protected` members
packages/documentation/copy/en/handbook-v2/Classes.md:668:84    - Unknown word (meaningfully)    -- m`, so this doesn't meaningfully alter the "security
packages/documentation/copy/en/handbook-v2/Classes.md:668:97    - Unknown word (alter)           -- doesn't meaningfully alter the "security" of this
packages/documentation/copy/en/handbook-v2/Classes.md:669:124   - Unknown word (exposure)        -- protected` modifier if this exposure isn't intentional.
packages/documentation/copy/en/handbook-v2/Classes.md:669:139   - Unknown word (intentional)     -- this exposure isn't intentional.
packages/documentation/copy/en/handbook-v2/Classes.md:669:73    - Unknown word (careful)         -- class, we need to be careful to repeat the `protected
packages/documentation/copy/en/handbook-v2/Classes.md:673:61    - Unknown word (sibling)         -- protected` members of a sibling class in a class hierarchy
packages/documentation/copy/en/handbook-v2/Classes.md:694:1     - Unknown word (Moreover)        -- Moreover, if accessing `x` through
packages/documentation/copy/en/handbook-v2/Classes.md:694:165   - Unknown word (improve)         -- reference should never improve the situation.
packages/documentation/copy/en/handbook-v2/Classes.md:696:216   - Unknown word (reasoning)       -- explains more of C#'s reasoning on the same topic.
packages/documentation/copy/en/handbook-v2/Classes.md:740:25    - Unknown word (disagree)        -- Different OOP languages disagree about whether different
packages/documentation/copy/en/handbook-v2/Classes.md:756:6     - Unknown word (Caveats)         -- #### Caveats
packages/documentation/copy/en/handbook-v2/Classes.md:763:9     - Unknown word (Safe)            -- class MySafe {
packages/documentation/copy/en/handbook-v2/Classes.md:775:178   - Unknown word (drawback)        -- unit tests, with the drawback that these fields are
packages/documentation/copy/en/handbook-v2/Classes.md:775:210   - Unknown word (soft)            -- that these fields are _soft private_ and don't strictly
packages/documentation/copy/en/handbook-v2/Classes.md:792:165   - Unknown word (remain)          -- class_fields) (`#`) remain private after compilation
packages/documentation/copy/en/handbook-v2/Classes.md:792:249   - Unknown word (hatches)         -- previously mentioned escape hatches like bracket notation
packages/documentation/copy/en/handbook-v2/Classes.md:796:8     - Unknown word (Amount)          -- #barkAmount = 0;
packages/documentation/copy/en/handbook-v2/Classes.md:797:3     - Unknown word (personality)     -- personality = "happy";
packages/documentation/copy/en/handbook-v2/Classes.md:814:55    - Unknown word (Weak)            -- TypeScript will use WeakMaps in place of `#`
packages/documentation/copy/en/handbook-v2/Classes.md:814:59    - Unknown word (Maps)            -- TypeScript will use WeakMaps in place of `#`.
packages/documentation/copy/en/handbook-v2/Classes.md:814:6     - Unknown word (compiling)       -- When compiling to ES2021 or less, TypeScript
packages/documentation/copy/en/handbook-v2/Classes.md:827:135   - Unknown word (closures)       -- runtime privacy, such as closures, WeakMaps, or private
packages/documentation/copy/en/handbook-v2/Classes.md:827:16    - Unknown word (protect)         -- If you need to protect values in your class
packages/documentation/copy/en/handbook-v2/Classes.md:827:239   - Unknown word (performance)    -- runtime could affect performance.
packages/documentation/copy/en/handbook-v2/Classes.md:827:50    - Unknown word (malicious)       -- values in your class from malicious actors, you should use
packages/documentation/copy/en/handbook-v2/Classes.md:827:60    - Unknown word (actors)          -- class from malicious actors, you should use mechanisms
packages/documentation/copy/en/handbook-v2/Classes.md:827:99    - Unknown word (offer)           -- use mechanisms that offer hard runtime privacy
packages/documentation/copy/en/handbook-v2/Classes.md:877:37    - Unknown word (overwrite)      -- not safe/possible to overwrite properties from the
packages/documentation/copy/en/handbook-v2/Classes.md:892:119   - Unknown word (restriction)    -- class; because that restriction doesn't exist in TypeScript
packages/documentation/copy/en/handbook-v2/Classes.md:898:4     - Unknown word (Unnecessary)    -- // Unnecessary "static" class
packages/documentation/copy/en/handbook-v2/Classes.md:903:4     - Unknown word (Preferred)      -- // Preferred (alternative 1)
packages/documentation/copy/en/handbook-v2/Classes.md:907:9     - Unknown word (Helper)         -- const MyHelperObject = {
packages/documentation/copy/en/handbook-v2/Classes.md:912:13    - Unknown word (Blocks)         -- ## `static` Blocks in Classes
packages/documentation/copy/en/handbook-v2/Classes.md:914:241   - Unknown word (leakage)        -- writing statements, no leakage of variables, and full
packages/documentation/copy/en/handbook-v2/Classes.md:914:294   - Unknown word (internals)      -- access to our class's internals.
packages/documentation/copy/en/handbook-v2/Classes.md:914:36    - Unknown word (sequence)       -- allow you to write a sequence of statements with their
packages/documentation/copy/en/handbook-v2/Classes.md:914:8     - Unknown word (blocks)         -- Static blocks allow you to write a
packages/documentation/copy/en/handbook-v2/Classes.md:92:79     - Unknown word (initializations) -- constructor to detect initializations, because a derived class
packages/documentation/copy/en/handbook-v2/Classes.md:94:132    - Unknown word (filling)         -- external library is filling in part of your class
packages/documentation/copy/en/handbook-v2/Classes.md:94:189    - Unknown word (definite)        -- you), you can use the _definite assignment assertion
packages/documentation/copy/en/handbook-v2/Classes.md:979:127   - Unknown word (famous)         -- JavaScript is somewhat famous for having some peculiar
packages/documentation/copy/en/handbook-v2/Classes.md:979:150   - Unknown word (peculiar)       -- famous for having some peculiar runtime behaviors.
packages/documentation/copy/en/handbook-v2/Classes.md:981:36    - Unknown word (indeed)         -- handling of `this` is indeed unusual:
packages/documentation/copy/en/handbook-v2/Everyday Types.md:112:4     - Unknown word (Would)       -- // Would be a runtime error if
packages/documentation/copy/en/handbook-v2/Everyday Types.md:124:13    - Unknown word (Favorite)    -- function getFavoriteNumber(): number {
packages/documentation/copy/en/handbook-v2/Everyday Types.md:132:93    - Unknown word (accidental)  -- purposes, to prevent accidental changes, or just for
packages/documentation/copy/en/handbook-v2/Everyday Types.md:134:29    - Unknown word (Promises)    -- Functions Which Return Promises
packages/documentation/copy/en/handbook-v2/Everyday Types.md:168:100   - Unknown word (informs)     -- function occurred within informs what type it should
packages/documentation/copy/en/handbook-v2/Everyday Types.md:168:84    - Unknown word (occurred)    -- context_ that the function occurred within informs what
packages/documentation/copy/en/handbook-v2/Everyday Types.md:170:1     - Unknown word (Similar)     -- Similar to the inference rules
packages/documentation/copy/en/handbook-v2/Everyday Types.md:171:64    - Unknown word (occurs)      -- context that a value occurs in can affect its type
packages/documentation/copy/en/handbook-v2/Everyday Types.md:175:1     - Unknown word (Apart)       -- Apart from primitives, the
packages/documentation/copy/en/handbook-v2/Everyday Types.md:185:20    - Unknown word (coordinate's) -- console.log("The coordinate's x value is " + pt.x
packages/documentation/copy/en/handbook-v2/Everyday Types.md:208:36    - Unknown word (Alisson)      -- first: "Alice", last: "Alisson" });
packages/documentation/copy/en/handbook-v2/Everyday Types.md:237:24    - Unknown word (formed)       -- union type is a type formed from two or more other
packages/documentation/copy/en/handbook-v2/Everyday Types.md:240:33    - Unknown word (operate)      -- a function that can operate on strings or numbers
packages/documentation/copy/en/handbook-v2/Everyday Types.md:27:180    - Unknown word (Always)     -- appear in your code. _Always_ use `string`, `number
packages/documentation/copy/en/handbook-v2/Everyday Types.md:283:40    - Unknown word (deduce)       -- when TypeScript can deduce a more specific type
packages/documentation/copy/en/handbook-v2/Everyday Types.md:2:8       - Unknown word (Everyday)   -- title: Everyday Types
packages/documentation/copy/en/handbook-v2/Everyday Types.md:302:10    - Unknown word (welcome)      -- function welcomePeople(x: string[] |
packages/documentation/copy/en/handbook-v2/Everyday Types.md:308:26    - Unknown word (lone)         -- console.log("Welcome lone traveler " + x);
packages/documentation/copy/en/handbook-v2/Everyday Types.md:308:31    - Unknown word (traveler)     -- console.log("Welcome lone traveler " + x);
packages/documentation/copy/en/handbook-v2/Everyday Types.md:327:18    - Unknown word (accident)     -- > This is not an accident - the name _union_ comes
packages/documentation/copy/en/handbook-v2/Everyday Types.md:327:62    - Unknown word (theory)       -- union_ comes from type theory.
packages/documentation/copy/en/handbook-v2/Everyday Types.md:329:49    - Unknown word (facts)        -- sets with corresponding facts about each set, only
packages/documentation/copy/en/handbook-v2/Everyday Types.md:330:36    - Unknown word (tall)         -- if we had a room of tall people wearing hats
packages/documentation/copy/en/handbook-v2/Everyday Types.md:330:48    - Unknown word (wearing)      -- room of tall people wearing hats, and another room
packages/documentation/copy/en/handbook-v2/Everyday Types.md:330:56    - Unknown word (hats)         -- tall people wearing hats, and another room of
packages/documentation/copy/en/handbook-v2/Everyday Types.md:330:82    - Unknown word (Spanish)      -- and another room of Spanish speakers wearing hats
packages/documentation/copy/en/handbook-v2/Everyday Types.md:330:90    - Unknown word (speakers)     -- another room of Spanish speakers wearing hats, after
packages/documentation/copy/en/handbook-v2/Everyday Types.md:346:4     - Unknown word (Exactly)      -- // Exactly the same as the earlier
packages/documentation/copy/en/handbook-v2/Everyday Types.md:35:71     - Unknown word (Tuples)     -- refer to the section on [Tuples](/docs/handbook/2/objects
packages/documentation/copy/en/handbook-v2/Everyday Types.md:362:88    - Unknown word (distinct)     -- to create different/distinct "versions" of the same
packages/documentation/copy/en/handbook-v2/Everyday Types.md:363:64    - Unknown word (aliased)      -- you had written the aliased type.
packages/documentation/copy/en/handbook-v2/Everyday Types.md:364:59    - Unknown word (according)    -- illegal, but is OK according to TypeScript because
packages/documentation/copy/en/handbook-v2/Everyday Types.md:368:18    - Unknown word (sanitize)     -- declare function sanitize(str: string): string
packages/documentation/copy/en/handbook-v2/Everyday Types.md:370:15    - Unknown word (Sanitized)    -- type UserInputSanitizedString = string;
packages/documentation/copy/en/handbook-v2/Everyday Types.md:376:13    - Unknown word (sanitized)    -- // Create a sanitized input
packages/documentation/copy/en/handbook-v2/Everyday Types.md:402:100   - Unknown word (cares)        -- printCoord` - it only cares that it has the expected
packages/documentation/copy/en/handbook-v2/Everyday Types.md:402:20    - Unknown word (concerned)    -- TypeScript is only concerned with the _structure
packages/documentation/copy/en/handbook-v2/Everyday Types.md:403:1     - Unknown word (Being)        -- Being concerned only with
packages/documentation/copy/en/handbook-v2/Everyday Types.md:408:112   - Unknown word (opened)       -- a type cannot be re-opened to add new properties
packages/documentation/copy/en/handbook-v2/Everyday Types.md:408:173   - Unknown word (extendable)   -- interface which is always extendable.
packages/documentation/copy/en/handbook-v2/Everyday Types.md:424:11    - Unknown word (Bear)         -- interface Bear extends Animal {
packages/documentation/copy/en/handbook-v2/Everyday Types.md:425:3     - Unknown word (honey)        -- honey: boolean;
packages/documentation/copy/en/handbook-v2/Everyday Types.md:427:7     - Unknown word (bear)         -- const bear = getBear();
packages/documentation/copy/en/handbook-v2/Everyday Types.md:46:16     - Unknown word (disables)   -- // Using `any` disables all further type checking
packages/documentation/copy/en/handbook-v2/Everyday Types.md:470:41    - Unknown word (Duplicate)    -- #A31515"> // Error: Duplicate identifier 'Window'
packages/documentation/copy/en/handbook-v2/Everyday Types.md:480:3     - Unknown word (Prior)        -- - Prior to TypeScript version
packages/documentation/copy/en/handbook-v2/Everyday Types.md:481:24    - Unknown word (participate)  -- Type aliases may not participate [in declaration merging
packages/documentation/copy/en/handbook-v2/Everyday Types.md:486:173   - Unknown word (heuristic)    -- If you would like a heuristic, use `interface` until
packages/documentation/copy/en/handbook-v2/Everyday Types.md:488:9     - Unknown word (Assertions)   -- ## Type Assertions
packages/documentation/copy/en/handbook-v2/Everyday Types.md:508:3     - Unknown word (Reminder)     -- > Reminder: Because type assertions
packages/documentation/copy/en/handbook-v2/Everyday Types.md:512:21    - Unknown word (impossible)   -- This rule prevents "impossible" coercions like:
packages/documentation/copy/en/handbook-v2/Everyday Types.md:512:33    - Unknown word (coercions)    -- prevents "impossible" coercions like:
packages/documentation/copy/en/handbook-v2/Everyday Types.md:519:54    - Unknown word (disallow)     -- conservative and will disallow more complex coercions
packages/documentation/copy/en/handbook-v2/Everyday Types.md:531:112   - Unknown word (positions)    -- and numbers in type positions.
packages/documentation/copy/en/handbook-v2/Everyday Types.md:545:23    - Unknown word (representation) -- has a literal type representation
packages/documentation/copy/en/handbook-v2/Everyday Types.md:550:42    - Unknown word (valuable)       -- literal types aren't very valuable:
packages/documentation/copy/en/handbook-v2/Everyday Types.md:55:79     - Unknown word (convince)   -- a long type just to convince TypeScript that a particular
packages/documentation/copy/en/handbook-v2/Everyday Types.md:571:19    - Unknown word (mate)           -- printText("G'day, mate", "centre");
packages/documentation/copy/en/handbook-v2/Everyday Types.md:571:27    - Unknown word (centre)         -- printText("G'day, mate", "centre");
packages/documentation/copy/en/handbook-v2/Everyday Types.md:628:207   - Unknown word (GUESS)          -- a new string like `"GUESS"` to `req.method`, TypeScript
packages/documentation/copy/en/handbook-v2/Everyday Types.md:628:96    - Unknown word (evaluated)      -- Because code can be evaluated between the creation
packages/documentation/copy/en/handbook-v2/Everyday Types.md:64:9      - Unknown word (Annotations) -- ## Type Annotations on Variables
packages/documentation/copy/en/handbook-v2/Everyday Types.md:655:16    - Unknown word (suffix)         -- The `as const` suffix acts like `const` but
packages/documentation/copy/en/handbook-v2/Everyday Types.md:655:66    - Unknown word (ensuring)       -- for the type system, ensuring that all properties
packages/documentation/copy/en/handbook-v2/Everyday Types.md:659:52    - Unknown word (absent)         -- values used to signal absent or uninitialized value
packages/documentation/copy/en/handbook-v2/Everyday Types.md:659:62    - Unknown word (uninitialized)  -- to signal absent or uninitialized value: `null` and `undefined
packages/documentation/copy/en/handbook-v2/Everyday Types.md:667:167   - Unknown word (practical)      -- strictNullChecks) on if it's practical to do so in their codebase
packages/documentation/copy/en/handbook-v2/Everyday Types.md:667:39    - Unknown word (tends)          -- checking for these values tends to be a major source
packages/documentation/copy/en/handbook-v2/Everyday Types.md:667:5     - Unknown word (lack)           -- The lack of checking for these
packages/documentation/copy/en/handbook-v2/Everyday Types.md:684:14    - Unknown word (Assertion)      -- ### Non-null Assertion Operator (Postfix `
packages/documentation/copy/en/handbook-v2/Everyday Types.md:684:24    - Unknown word (Operator)       -- Non-null Assertion Operator (Postfix `!`)
packages/documentation/copy/en/handbook-v2/Everyday Types.md:686:42    - Unknown word (removing)       -- a special syntax for removing `null` and `undefined
packages/documentation/copy/en/handbook-v2/Everyday Types.md:690:14    - Unknown word (Dangerously)    -- function liveDangerously(x?: number | null)
packages/documentation/copy/en/handbook-v2/Everyday Types.md:704:12    - Unknown word (mentioning)     -- It's worth mentioning the rest of the primitives
packages/documentation/copy/en/handbook-v2/Everyday Types.md:705:28    - Unknown word (depth)          -- we will not go into depth here.
packages/documentation/copy/en/handbook-v2/Everyday Types.md:709:13    - Unknown word (onwards)        -- From ES2020 onwards, there is a primitive
packages/documentation/copy/en/handbook-v2/Everyday Types.md:714:4     - Unknown word (Creating)       -- // Creating a bigint via the BigInt
packages/documentation/copy/en/handbook-v2/Everyday Types.md:715:10    - Unknown word (Hundred)        -- const oneHundred: bigint = BigInt(10
packages/documentation/copy/en/handbook-v2/Everyday Types.md:737:35    - Unknown word (Symbols)        -- more about them in [Symbols reference page](/docs
packages/documentation/copy/en/handbook-v2/Everyday Types.md:77:1      - Unknown word (Wherever)    -- Wherever possible, TypeScript
packages/documentation/copy/en/handbook-v2/Everyday Types.md:9:43      - Unknown word (chapters)   -- exhaustive list, and future chapters will describe more ways
packages/documentation/copy/en/handbook-v2/Modules.md:119:18    - Unknown word (renamed)       -- An import can be renamed using a format like
packages/documentation/copy/en/handbook-v2/Modules.md:11:70     - Unknown word (broad)         -- 15, and by 2020 had broad support in most web
packages/documentation/copy/en/handbook-v2/Modules.md:13:72     - Unknown word (cursor)        -- and its popular pre-cursor CommonJS `module.exports
packages/documentation/copy/en/handbook-v2/Modules.md:166:7     - Unknown word (positive)      -- const positivePhi = math.absolute(math
packages/documentation/copy/en/handbook-v2/Modules.md:190:36    - Unknown word (year)          -- Cat = { breed: string; yearOfBirth: number };
packages/documentation/copy/en/handbook-v2/Modules.md:193:3     - Unknown word (breeds)        -- breeds: string[];
packages/documentation/copy/en/handbook-v2/Modules.md:199:6     - Unknown word (Animals)       -- type Animals = Cat | Dog;
packages/documentation/copy/en/handbook-v2/Modules.md:19:1      - Unknown word (Conversely)    -- Conversely, a file without any
packages/documentation/copy/en/handbook-v2/Modules.md:212:37    - Unknown word (fluffy)        -- createCatName = () => "fluffy";
packages/documentation/copy/en/handbook-v2/Modules.md:226:32    - Unknown word (individual)    -- 4.5 also allows for individual imports to be prefixed
packages/documentation/copy/en/handbook-v2/Modules.md:241:1     - Unknown word (Together)      -- Together these allow a non-TypeScript
packages/documentation/copy/en/handbook-v2/Modules.md:245:50    - Unknown word (correlates)    -- syntax which _directly_ correlates to a CommonJS and AMD
packages/documentation/copy/en/handbook-v2/Modules.md:259:54    - Unknown word (delivered)     -- most modules on npm are delivered in. Even if you are
packages/documentation/copy/en/handbook-v2/Modules.md:261:6     - Unknown word (Exporting)     -- #### Exporting
packages/documentation/copy/en/handbook-v2/Modules.md:28:122    - Unknown word (await)         -- export`, or top-level `await` should be considered
packages/documentation/copy/en/handbook-v2/Modules.md:305:12    - Unknown word (simplify)      -- Or you can simplify a bit using the destructuring
packages/documentation/copy/en/handbook-v2/Modules.md:31:1      - Unknown word (Inside)        -- Inside a script file variables
packages/documentation/copy/en/handbook-v2/Modules.md:331:200   - Unknown word (friction)      -- compiler flag to reduce the friction between the two different
packages/documentation/copy/en/handbook-v2/Modules.md:331:66    - Unknown word (regarding)     -- CommonJS and ES Modules regarding the distinction between
packages/documentation/copy/en/handbook-v2/Modules.md:337:176   - Unknown word (backwards)     -- commonjs`, is included for backwards compatibility.
packages/documentation/copy/en/handbook-v2/Modules.md:337:36    - Unknown word (strategies)    -- includes two resolution strategies: Classic and Node. Classic
packages/documentation/copy/en/handbook-v2/Modules.md:338:10    - Unknown word (strategy)      -- The Node strategy replicates how Node
packages/documentation/copy/en/handbook-v2/Modules.md:338:19    - Unknown word (replicates)    -- The Node strategy replicates how Node.js works in
packages/documentation/copy/en/handbook-v2/Modules.md:340:37    - Unknown word (influence)     -- TSConfig flags which influence the module strategy
packages/documentation/copy/en/handbook-v2/Modules.md:342:60    - Unknown word (consult)       -- strategies work, you can consult the [Module Resolution
packages/documentation/copy/en/handbook-v2/Modules.md:348:150   - Unknown word (intact)        -- and which are left intact
packages/documentation/copy/en/handbook-v2/Modules.md:349:82    - Unknown word (interact)      -- used for modules to interact with each other
packages/documentation/copy/en/handbook-v2/Modules.md:351:171   - Unknown word (oldest)        -- That could be: the oldest web browser you support
packages/documentation/copy/en/handbook-v2/Modules.md:351:207   - Unknown word (lowest)        -- browser you support, the lowest version of Node.js you
packages/documentation/copy/en/handbook-v2/Modules.md:354:33    - Unknown word (responsible)   -- the module loader is responsible for locating and executing
packages/documentation/copy/en/handbook-v2/Modules.md:354:49    - Unknown word (locating)      -- loader is responsible for locating and executing all dependencie
packages/documentation/copy/en/handbook-v2/Modules.md:356:65    - Unknown word (showcasing)    -- using ES Modules syntax, showcasing a few different options
packages/documentation/copy/en/handbook-v2/Modules.md:44:7      - Unknown word (Additional)    -- <p>Additional Reading:<br />
packages/documentation/copy/en/handbook-v2/Modules.md:54:44     - Unknown word (emitted)       -- Target**: What should my emitted JavaScript module look
packages/documentation/copy/en/handbook-v2/Modules.md:5:34      - Unknown word (communicating) -- How JavaScript handles communicating across file boundaries
packages/documentation/copy/en/handbook-v2/Modules.md:80:117    - Unknown word (omitting)      -- via the `export` by omitting `default`:
packages/documentation/copy/en/handbook-v2/Modules.md:83:15     - Unknown word (maths)         -- // @filename: maths.ts
packages/documentation/copy/en/handbook-v2/Modules.md:8:59      - Unknown word (modularizing)  -- different ways to handle modularizing code.
packages/documentation/copy/en/handbook-v2/Modules.md:90:17     - Unknown word (absolute)      -- export function absolute(num: number) {
packages/documentation/copy/en/handbook-v2/Modules.md:9:1       - Unknown word (Having)        -- Having been around since 2
packages/documentation/copy/en/handbook-v2/Modules.md:9:160     - Unknown word (converged)     -- JavaScript specification has converged on a format called ES
packages/documentation/copy/en/handbook-v2/More on Functions.md:120:33    - Unknown word (unfortunately) -- function does its job, but unfortunately has the return type
packages/documentation/copy/en/handbook-v2/More on Functions.md:161:5     - Unknown word (parsed)        -- // 'parsed' is of type 'number
packages/documentation/copy/en/handbook-v2/More on Functions.md:179:10    - Unknown word (longest)       -- function longest<Type extends { length
packages/documentation/copy/en/handbook-v2/More on Functions.md:203:34    - Unknown word (relating)      -- generics are all about relating two or more values with
packages/documentation/copy/en/handbook-v2/More on Functions.md:207:18    - Unknown word (Constrained)   -- ### Working with Constrained Values
packages/documentation/copy/en/handbook-v2/More on Functions.md:213:10    - Unknown word (minimum)       -- function minimumLength<Type extends
packages/documentation/copy/en/handbook-v2/More on Functions.md:226:34    - Unknown word (promises)      -- is that the function promises to return the _same
packages/documentation/copy/en/handbook-v2/More on Functions.md:237:8     - Unknown word (crashes)       -- // and crashes here because arrays
packages/documentation/copy/en/handbook-v2/More on Functions.md:242:21    - Unknown word (Arguments)     -- ### Specifying Type Arguments
packages/documentation/copy/en/handbook-v2/More on Functions.md:242:5     - Unknown word (Specifying)    -- ### Specifying Type Arguments
packages/documentation/copy/en/handbook-v2/More on Functions.md:253:1     - Unknown word (Normally)      -- Normally it would be an error
packages/documentation/copy/en/handbook-v2/More on Functions.md:253:58    - Unknown word (mismatched)    -- call this function with mismatched arrays:
packages/documentation/copy/en/handbook-v2/More on Functions.md:270:5     - Unknown word (Guidelines)    -- ### Guidelines for Writing Good Generic
packages/documentation/copy/en/handbook-v2/More on Functions.md:272:61    - Unknown word (carried)       -- it can be easy to get carried away with type parameters
packages/documentation/copy/en/handbook-v2/More on Functions.md:273:103   - Unknown word (successful)    -- make inference less successful, frustrating callers
packages/documentation/copy/en/handbook-v2/More on Functions.md:273:115   - Unknown word (frustrating)   -- inference less successful, frustrating callers of your function
packages/documentation/copy/en/handbook-v2/More on Functions.md:294:37    - Unknown word (glance)        -- seem identical at first glance, but `firstElement1
packages/documentation/copy/en/handbook-v2/More on Functions.md:295:187   - Unknown word (waiting)       -- constraint type, rather than "waiting" to resolve the element
packages/documentation/copy/en/handbook-v2/More on Functions.md:299:10    - Unknown word (Fewer)         -- #### Use Fewer Type Parameters
packages/documentation/copy/en/handbook-v2/More on Functions.md:322:29    - Unknown word (Appear)        -- Type Parameters Should Appear Twice
packages/documentation/copy/en/handbook-v2/More on Functions.md:322:36    - Unknown word (Twice)         -- Parameters Should Appear Twice
packages/documentation/copy/en/handbook-v2/More on Functions.md:334:40    - Unknown word (simpler)       -- easily have written a simpler version:
packages/documentation/copy/en/handbook-v2/More on Functions.md:344:197   - Unknown word (appearing)     -- used _twice_ despite appearing only once in the written
packages/documentation/copy/en/handbook-v2/More on Functions.md:346:72    - Unknown word (reconsider)    -- one location, strongly reconsider if you actually need
packages/documentation/copy/en/handbook-v2/More on Functions.md:351:65    - Unknown word (digit)         -- number` takes an optional digit count:
packages/documentation/copy/en/handbook-v2/More on Functions.md:370:1     - Unknown word (Although)      -- Although the parameter is specified
packages/documentation/copy/en/handbook-v2/More on Functions.md:380:94    - Unknown word (replaced)      -- undefined` argument will be replaced with `10`.
packages/documentation/copy/en/handbook-v2/More on Functions.md:381:93    - Unknown word (simulates)     -- undefined`, as this simply simulates a "missing" argument
packages/documentation/copy/en/handbook-v2/More on Functions.md:475:46    - Unknown word (accepting)     -- wrote two overloads: one accepting one argument, and another
packages/documentation/copy/en/handbook-v2/More on Functions.md:482:33    - Unknown word (Implementation) -- Overload Signatures and the Implementation Signature
packages/documentation/copy/en/handbook-v2/More on Functions.md:482:48    - Unknown word (Signature)      -- and the Implementation Signature
packages/documentation/copy/en/handbook-v2/More on Functions.md:500:19    - Unknown word (overloaded)     -- > When writing an overloaded function, you should
packages/documentation/copy/en/handbook-v2/More on Functions.md:50:6      - Unknown word (Describable) -- type DescribableFunction = {
packages/documentation/copy/en/handbook-v2/More on Functions.md:526:1     - Unknown word (Following)      -- Following these principles will
packages/documentation/copy/en/handbook-v2/More on Functions.md:560:1     - Unknown word (Callers)        -- Callers can invoke this with
packages/documentation/copy/en/handbook-v2/More on Functions.md:579:12    - Unknown word (understands)    -- TypeScript understands that the function `user
packages/documentation/copy/en/handbook-v2/More on Functions.md:593:7     - Unknown word (admins)         -- const admins = db.filterUsers(function
packages/documentation/copy/en/handbook-v2/More on Functions.md:616:19    - Unknown word (Know)           -- ## Other Types to Know About
packages/documentation/copy/en/handbook-v2/More on Functions.md:690:54    - Unknown word (observed)       -- values which are _never_ observed.
packages/documentation/copy/en/handbook-v2/More on Functions.md:691:71    - Unknown word (terminates)     -- throws an exception or terminates execution of the program
packages/documentation/copy/en/handbook-v2/More on Functions.md:718:81    - Unknown word (unsafe)         -- avoided because of the unsafe `any` return type.
packages/documentation/copy/en/handbook-v2/More on Functions.md:733:168   - Unknown word (unbounded)      -- functions that take an _unbounded_ number of arguments
packages/documentation/copy/en/handbook-v2/More on Functions.md:738:10    - Unknown word (multiply)       -- function multiply(n: number, ...m: number
packages/documentation/copy/en/handbook-v2/More on Functions.md:778:103   - Unknown word (targeting)      -- downlevelIteration) when targeting older runtimes.
packages/documentation/copy/en/handbook-v2/More on Functions.md:780:29    - Unknown word (iteration)      -- TODO link to downlevel iteration -->
packages/documentation/copy/en/handbook-v2/More on Functions.md:790:53    - Unknown word (unpack)         -- destructuring to conveniently unpack objects provided as
packages/documentation/copy/en/handbook-v2/More on Functions.md:811:4     - Unknown word (Same)           -- // Same as prior example
packages/documentation/copy/en/handbook-v2/More on Functions.md:818:4     - Unknown word (Assignability)  -- ## Assignability of Functions
packages/documentation/copy/en/handbook-v2/More on Functions.md:826:1     - Unknown word (Thus)           -- Thus, the following implementation
packages/documentation/copy/en/handbook-v2/More on Functions.md:842:94    - Unknown word (retain)         -- another variable, it will retain the type of `void`:
packages/documentation/copy/en/handbook-v2/More on Functions.md:86:64     - Unknown word (arbitrarily) -- signatures in the same type arbitrarily:
packages/documentation/copy/en/handbook-v2/More on Functions.md:95:6      - Unknown word (Passing)     -- // Passing an argument of type
packages/documentation/copy/en/handbook-v2/Narrowing.md:101:126   - Unknown word (reinforce)     -- might be a good time to reinforce that arrays are object
packages/documentation/copy/en/handbook-v2/Narrowing.md:103:22    - Unknown word (unfortunate)   -- This is one of those unfortunate accidents of history
packages/documentation/copy/en/handbook-v2/Narrowing.md:103:34    - Unknown word (accidents)     -- of those unfortunate accidents of history.
packages/documentation/copy/en/handbook-v2/Narrowing.md:105:104   - Unknown word (luckily)       -- this in JavaScript; luckily, TypeScript lets us
packages/documentation/copy/en/handbook-v2/Narrowing.md:107:22    - Unknown word (segue)         -- This might be a good segue into what we'll call
packages/documentation/copy/en/handbook-v2/Narrowing.md:109:3     - Unknown word (Truthiness)    -- # Truthiness narrowing
packages/documentation/copy/en/handbook-v2/Narrowing.md:111:99    - Unknown word (hear)          -- much something you'll hear about in JavaScript
packages/documentation/copy/en/handbook-v2/Narrowing.md:113:98    - Unknown word (negations)     -- statements, Boolean negations (`!`), and more.
packages/documentation/copy/en/handbook-v2/Narrowing.md:121:11    - Unknown word (Nobody's)      -- return "Nobody's here. :(";
packages/documentation/copy/en/handbook-v2/Narrowing.md:125:44    - Unknown word (coerce)        -- constructs like `if` first "coerce" their conditions to
packages/documentation/copy/en/handbook-v2/Narrowing.md:135:45    - Unknown word (coerced)       -- and other values get coerced to `true`.
packages/documentation/copy/en/handbook-v2/Narrowing.md:136:131   - Unknown word (negation)      -- shorter double-Boolean negation. (The latter has the
packages/documentation/copy/en/handbook-v2/Narrowing.md:144:6     - Unknown word (fairly)        -- It's fairly popular to leverage
packages/documentation/copy/en/handbook-v2/Narrowing.md:144:63    - Unknown word (guarding)      -- behavior, especially for guarding against values like
packages/documentation/copy/en/handbook-v2/Narrowing.md:159:26    - Unknown word (gotten)        -- ll notice that we've gotten rid of the error above
packages/documentation/copy/en/handbook-v2/Narrowing.md:160:32    - Unknown word (dreaded)       -- least prevents us from dreaded errors when we run our
packages/documentation/copy/en/handbook-v2/Narrowing.md:166:79    - Unknown word (prone)         -- primitives can often be error prone.
packages/documentation/copy/en/handbook-v2/Narrowing.md:173:8     - Unknown word (KEEP)          -- // KEEP READING
packages/documentation/copy/en/handbook-v2/Narrowing.md:189:20    - Unknown word (hurt)          -- TypeScript doesn't hurt us here at all, but
packages/documentation/copy/en/handbook-v2/Narrowing.md:190:157   - Unknown word (prescriptive)  -- without being overly prescriptive.
packages/documentation/copy/en/handbook-v2/Narrowing.md:193:93    - Unknown word (negated)       -- `!` filter out from negated branches.
packages/documentation/copy/en/handbook-v2/Narrowing.md:208:4     - Unknown word (Equality)      -- ## Equality narrowing
packages/documentation/copy/en/handbook-v2/Narrowing.md:230:82    - Unknown word (knew)          -- example, TypeScript knew their types also had
packages/documentation/copy/en/handbook-v2/Narrowing.md:233:1     - Unknown word (Checking)      -- Checking against specific literal
packages/documentation/copy/en/handbook-v2/Narrowing.md:233:46    - Unknown word (opposed)       -- specific literal values (as opposed to variables) works
packages/documentation/copy/en/handbook-v2/Narrowing.md:253:14    - Unknown word (looser)        -- JavaScript's looser equality checks with
packages/documentation/copy/en/handbook-v2/Narrowing.md:254:11    - Unknown word (unfamiliar)    -- If you're unfamiliar, checking whether something
packages/documentation/copy/en/handbook-v2/Narrowing.md:280:19    - Unknown word (narrows)       -- The "true" branch narrows `x`'s types which have
packages/documentation/copy/en/handbook-v2/Narrowing.md:295:90    - Unknown word (human)         -- narrowing. For example, a human could both swim and
packages/documentation/copy/en/handbook-v2/Narrowing.md:301:6     - Unknown word (Human)         -- type Human = { swim?: () => void
packages/documentation/copy/en/handbook-v2/Narrowing.md:319:19    - Unknown word (guessed)       -- As you might have guessed, `instanceof` is also
packages/documentation/copy/en/handbook-v2/Narrowing.md:319:98    - Unknown word (guarded)       -- narrows in branches guarded by `instanceof`s.
packages/documentation/copy/en/handbook-v2/Narrowing.md:344:6     - Unknown word (goodbye)       -- x = "goodbye!";
packages/documentation/copy/en/handbook-v2/Narrowing.md:372:28    - Unknown word (gone)          -- until this point, we've gone through some basic examples
packages/documentation/copy/en/handbook-v2/Narrowing.md:373:43    - Unknown word (walking)       -- more going on than just walking up from every variable
packages/documentation/copy/en/handbook-v2/Narrowing.md:389:141   - Unknown word (encounters)    -- to narrow types as it encounters type guards and assignments
packages/documentation/copy/en/handbook-v2/Narrowing.md:390:20    - Unknown word (analyzed)      -- When a variable is analyzed, control flow can split
packages/documentation/copy/en/handbook-v2/Narrowing.md:40:27     - Unknown word (uninteresting) -- this mostly looks like uninteresting JavaScript code, that
packages/documentation/copy/en/handbook-v2/Narrowing.md:42:120    - Unknown word (bending)       -- JavaScript code without bending over backwards to get
packages/documentation/copy/en/handbook-v2/Narrowing.md:45:172    - Unknown word (ternaries)     -- if/else`, conditional ternaries, loops, truthiness checks
packages/documentation/copy/en/handbook-v2/Narrowing.md:45:183    - Unknown word (loops)         -- conditional ternaries, loops, truthiness checks,
packages/documentation/copy/en/handbook-v2/Narrowing.md:45:190    - Unknown word (truthiness)    -- conditional ternaries, loops, truthiness checks, etc., which
packages/documentation/copy/en/handbook-v2/Narrowing.md:45:26     - Unknown word (analyzes)      -- like how TypeScript analyzes runtime values using
packages/documentation/copy/en/handbook-v2/Narrowing.md:45:73     - Unknown word (overlays)      -- using static types, it overlays type analysis on JavaScript
packages/documentation/copy/en/handbook-v2/Narrowing.md:470:8     - Unknown word (equivalently)  -- // or, equivalently
packages/documentation/copy/en/handbook-v2/Narrowing.md:473:27    - Unknown word (repeating)     -- The predicate may need repeating for more complex examples
packages/documentation/copy/en/handbook-v2/Narrowing.md:475:21    - Unknown word (sharkey)       -- if (pet.name === "sharkey") return false;
packages/documentation/copy/en/handbook-v2/Narrowing.md:488:50    - Unknown word (focused)       -- looked at so far have focused around narrowing single
packages/documentation/copy/en/handbook-v2/Narrowing.md:489:63    - Unknown word (dealing)       -- JavaScript we'll be dealing with slightly more complex
packages/documentation/copy/en/handbook-v2/Narrowing.md:491:10    - Unknown word (motivation)    -- For some motivation, let's imagine we're
packages/documentation/copy/en/handbook-v2/Narrowing.md:491:52    - Unknown word (encode)        -- imagine we're trying to encode shapes like circles
packages/documentation/copy/en/handbook-v2/Narrowing.md:491:71    - Unknown word (circles)       -- to encode shapes like circles and squares.
packages/documentation/copy/en/handbook-v2/Narrowing.md:491:83    - Unknown word (squares)       -- shapes like circles and squares.
packages/documentation/copy/en/handbook-v2/Narrowing.md:492:1     - Unknown word (Circles)       -- Circles keep track of their
packages/documentation/copy/en/handbook-v2/Narrowing.md:492:29    - Unknown word (radiuses)      -- keep track of their radiuses and squares keep track
packages/documentation/copy/en/handbook-v2/Narrowing.md:492:75    - Unknown word (lengths)       -- track of their side lengths.
packages/documentation/copy/en/handbook-v2/Narrowing.md:505:66    - Unknown word (misspelling)   -- string`, we can avoid misspelling issues.
packages/documentation/copy/en/handbook-v2/Narrowing.md:581:23    - Unknown word (ideal)         -- But this doesn't feel ideal.
packages/documentation/copy/en/handbook-v2/Narrowing.md:582:11    - Unknown word (shout)         -- We had to shout a bit at the type-checker
packages/documentation/copy/en/handbook-v2/Narrowing.md:586:23    - Unknown word (encoding)      -- The problem with this encoding of `Shape` is that the
packages/documentation/copy/en/handbook-v2/Narrowing.md:587:12    - Unknown word (communicate)   -- We need to communicate what _we_ know to the
packages/documentation/copy/en/handbook-v2/Narrowing.md:588:39    - Unknown word (swing)         -- let's take another swing at defining `Shape`
packages/documentation/copy/en/handbook-v2/Narrowing.md:591:11    - Unknown word (Circle)        -- interface Circle {
packages/documentation/copy/en/handbook-v2/Narrowing.md:604:22    - Unknown word (separated)     -- Here, we've properly separated `Shape` out into two
packages/documentation/copy/en/handbook-v2/Narrowing.md:629:128   - Unknown word (couldn't)      -- because TypeScript couldn't tell whether the property
packages/documentation/copy/en/handbook-v2/Narrowing.md:631:6     - Unknown word (interpretations) -- Both interpretations are correct, but only
packages/documentation/copy/en/handbook-v2/Narrowing.md:665:60    - Unknown word (pesky)           -- getArea` without any pesky `!` non-null assertions
packages/documentation/copy/en/handbook-v2/Narrowing.md:694:1     - Unknown word (Communicating)   -- Communicating the right information
packages/documentation/copy/en/handbook-v2/Narrowing.md:694:145   - Unknown word (crucial)         -- `kind` fields - was crucial.
packages/documentation/copy/en/handbook-v2/Narrowing.md:695:1     - Unknown word (Doing)           -- Doing that lets us write type
packages/documentation/copy/en/handbook-v2/Narrowing.md:695:99    - Unknown word (would've)        -- than the JavaScript we would've written otherwise.
packages/documentation/copy/en/handbook-v2/Narrowing.md:702:162   - Unknown word (mutations)       -- communication), or encoding mutations in a state management
packages/documentation/copy/en/handbook-v2/Narrowing.md:702:43    - Unknown word (messaging)       -- representing any sort of messaging scheme in JavaScript
packages/documentation/copy/en/handbook-v2/Narrowing.md:706:93    - Unknown word (possibilities)   -- you have removed all possibilities and have nothing left
packages/documentation/copy/en/handbook-v2/Narrowing.md:711:151   - Unknown word (rely)            -- can use narrowing and rely on `never` turning up
packages/documentation/copy/en/handbook-v2/Narrowing.md:82:20     - Unknown word (encodes)       -- Because TypeScript encodes how `typeof` operates
packages/documentation/copy/en/handbook-v2/Narrowing.md:8:1       - Unknown word (Imagine)    -- Imagine we have a function called
packages/documentation/copy/en/handbook-v2/Object Types.md:1002:114  - Unknown word (ending)        -- number of `boolean`s and ending with a `number`.
packages/documentation/copy/en/handbook-v2/Object Types.md:1011:35   - Unknown word (beautiful)     -- StringNumberBooleans = ["beautiful", 2, true];
packages/documentation/copy/en/handbook-v2/Object Types.md:1034:166  - Unknown word (intermediate)  -- t want to introduce intermediate variables.
packages/documentation/copy/en/handbook-v2/Object Types.md:1066:98   - Unknown word (sticking)      -- can be specified by sticking a `readonly` modifier
packages/documentation/copy/en/handbook-v2/Object Types.md:1084:39   - Unknown word (modified)      -- created and left un-modified in most code, so annotating
packages/documentation/copy/en/handbook-v2/Object Types.md:1084:65   - Unknown word (annotating)    -- modified in most code, so annotating types as `readonly`
packages/documentation/copy/en/handbook-v2/Object Types.md:1098:34   - Unknown word (modifies)      -- distanceFromOrigin` never modifies its elements, but expects
packages/documentation/copy/en/handbook-v2/Object Types.md:1099:164  - Unknown word (mutated)       -- s elements won't be mutated.
packages/documentation/copy/en/handbook-v2/Object Types.md:114:32    - Unknown word (specially)   -- just handle `undefined` specially by checking for it.
packages/documentation/copy/en/handbook-v2/Object Types.md:150:18    - Unknown word (coordinate)  -- console.log("x coordinate at", xPos);
packages/documentation/copy/en/handbook-v2/Object Types.md:170:12    - Unknown word (draw)        -- > function draw({ shape: Shape, xPos
packages/documentation/copy/en/handbook-v2/Object Types.md:176:103   - Unknown word (locally)     -- shape` and redefine it locally as a variable named
packages/documentation/copy/en/handbook-v2/Object Types.md:176:91    - Unknown word (redefine)    -- property `shape` and redefine it locally as a variable
packages/documentation/copy/en/handbook-v2/Object Types.md:177:3     - Unknown word (Likewise)    -- > Likewise `xPos: number` creates
packages/documentation/copy/en/handbook-v2/Object Types.md:199:51    - Unknown word (imply)       -- doesn't necessarily imply that a value is totally
packages/documentation/copy/en/handbook-v2/Object Types.md:199:73    - Unknown word (totally)     -- imply that a value is totally immutable - or in other
packages/documentation/copy/en/handbook-v2/Object Types.md:208:10    - Unknown word (visit)       -- function visitForBirthday(home: Home
packages/documentation/copy/en/handbook-v2/Object Types.md:208:18    - Unknown word (Birthday)    -- function visitForBirthday(home: Home) {
packages/documentation/copy/en/handbook-v2/Object Types.md:210:16    - Unknown word (Happy)       -- console.log(`Happy birthday ${home.resident
packages/documentation/copy/en/handbook-v2/Object Types.md:210:22    - Unknown word (birthday)    -- console.log(`Happy birthday ${home.resident.name
packages/documentation/copy/en/handbook-v2/Object Types.md:214:10    - Unknown word (evict)       -- function evict(home: Home) {
packages/documentation/copy/en/handbook-v2/Object Types.md:217:12    - Unknown word (Victor)      -- name: "Victor the Evictor",
packages/documentation/copy/en/handbook-v2/Object Types.md:217:23    - Unknown word (Evictor)     -- name: "Victor the Evictor",
packages/documentation/copy/en/handbook-v2/Object Types.md:223:26    - Unknown word (expectations) -- important to manage expectations of what `readonly` implies
packages/documentation/copy/en/handbook-v2/Object Types.md:225:172   - Unknown word (aliasing)     -- can also change via aliasing.
packages/documentation/copy/en/handbook-v2/Object Types.md:238:5     - Unknown word (writable)     -- let writablePerson: Person = {
packages/documentation/copy/en/handbook-v2/Object Types.md:246:37    - Unknown word (prints)       -- readonlyPerson.age); // prints '42'
packages/documentation/copy/en/handbook-v2/Object Types.md:255:63    - Unknown word (ahead)        -- a type's properties ahead of time, but you do
packages/documentation/copy/en/handbook-v2/Object Types.md:274:133   - Unknown word (consisting)   -- patterns, and union types consisting only of these.
packages/documentation/copy/en/handbook-v2/Object Types.md:344:71    - Unknown word (validates)    -- property checking, which validates the object more thoroughly
packages/documentation/copy/en/handbook-v2/Object Types.md:479:3     - Unknown word (country)      -- country: string;
packages/documentation/copy/en/handbook-v2/Object Types.md:500:137   - Unknown word (additive)     -- changes were purely additive.
packages/documentation/copy/en/handbook-v2/Object Types.md:518:106   - Unknown word (signaling)    -- have to write, and for signaling intent that several
packages/documentation/copy/en/handbook-v2/Object Types.md:518:24    - Unknown word (cutting)      -- This can be useful for cutting down the amount of type
packages/documentation/copy/en/handbook-v2/Object Types.md:524:11    - Unknown word (Colorful)     -- interface Colorful {
packages/documentation/copy/en/handbook-v2/Object Types.md:52:15     - Unknown word (sheets)     -- We have cheat-sheets available for both
packages/documentation/copy/en/handbook-v2/Object Types.md:52:9      - Unknown word (cheat)      -- We have cheat-sheets available for
packages/documentation/copy/en/handbook-v2/Object Types.md:543:75    - Unknown word (mainly)       -- intersection types_ that is mainly used to combine existing
packages/documentation/copy/en/handbook-v2/Object Types.md:54:13     - Unknown word (Modifiers)  -- ## Property Modifiers
packages/documentation/copy/en/handbook-v2/Object Types.md:558:13    - Unknown word (intersected)  -- Here, we've intersected `Colorful` and `Circle
packages/documentation/copy/en/handbook-v2/Object Types.md:583:81    - Unknown word (subtly)       -- similar, but are actually subtly different.
packages/documentation/copy/en/handbook-v2/Object Types.md:589:166   - Unknown word (satisfy)      -- expect the property to satisfy both types simultaneously
packages/documentation/copy/en/handbook-v2/Object Types.md:591:80    - Unknown word (incompatible) -- because the properties are incompatible:
packages/documentation/copy/en/handbook-v2/Object Types.md:614:6     - Unknown word (Staff)        -- type Staff = Person1 & Person2
packages/documentation/copy/en/handbook-v2/Object Types.md:616:15    - Unknown word (staffer)      -- declare const staffer: Staff;
packages/documentation/copy/en/handbook-v2/Object Types.md:624:80    - Unknown word (Giraffe)      -- string`s, `number`s, `Giraffe`s, whatever.
packages/documentation/copy/en/handbook-v2/Object Types.md:634:129   - Unknown word (precautionary) -- contents`, we'd need to do precautionary checks, or use error
packages/documentation/copy/en/handbook-v2/Object Types.md:654:44    - Unknown word (scaffold)      -- would be to instead scaffold out different `Box`
packages/documentation/copy/en/handbook-v2/Object Types.md:718:64    - Unknown word (identically)   -- earlier `StringBox` work identically.
packages/documentation/copy/en/handbook-v2/Object Types.md:737:41    - Unknown word (substituted)   -- in that `Type` can be substituted with anything. That
packages/documentation/copy/en/handbook-v2/Object Types.md:781:135   - Unknown word (helper)        -- other kinds of generic helper types.
packages/documentation/copy/en/handbook-v2/Object Types.md:800:70    - Unknown word (independently) -- container type that work independently of the type of elements
packages/documentation/copy/en/handbook-v2/Object Types.md:801:68    - Unknown word (usable)        -- way so that they're re-usable across different data
packages/documentation/copy/en/handbook-v2/Object Types.md:804:1     - Unknown word (Whenever)      -- Whenever we write out types like
packages/documentation/copy/en/handbook-v2/Object Types.md:829:6     - Unknown word (Gets)          -- * Gets or sets the length of
packages/documentation/copy/en/handbook-v2/Object Types.md:834:6     - Unknown word (Removes)       -- * Removes the last element from
packages/documentation/copy/en/handbook-v2/Object Types.md:839:6     - Unknown word (Appends)       -- * Appends new elements to an array
packages/documentation/copy/en/handbook-v2/Object Types.md:847:1     - Unknown word (Modern)        -- Modern JavaScript also provides
packages/documentation/copy/en/handbook-v2/Object Types.md:861:22    - Unknown word (mutate)        -- // ...but we can't mutate 'values'.
packages/documentation/copy/en/handbook-v2/Object Types.md:867:146   - Unknown word (consumes)      -- see a function that consumes `ReadonlyArray`s, it
packages/documentation/copy/en/handbook-v2/Object Types.md:897:93    - Unknown word (bidirectional) -- assignability isn't bidirectional between regular `Array
packages/documentation/copy/en/handbook-v2/Object Types.md:89:5      - Unknown word (optionality) -- All optionality really says is that
packages/documentation/copy/en/handbook-v2/Object Types.md:918:67    - Unknown word (significant)   -- esentation at runtime, but is significant to TypeScript.
packages/documentation/copy/en/handbook-v2/Object Types.md:933:20    - Unknown word (past)          -- If we try to index past the number of elements
packages/documentation/copy/en/handbook-v2/Object Types.md:958:29    - Unknown word (heavily)       -- types are useful in heavily convention-based APIs
packages/documentation/copy/en/handbook-v2/Object Types.md:958:37    - Unknown word (convention)    -- are useful in heavily convention-based APIs, where each
packages/documentation/copy/en/handbook-v2/Object Types.md:962:129   - Unknown word (descriptive)   -- whether using objects with descriptive property names may be
packages/documentation/copy/en/handbook-v2/Object Types.md:962:33    - Unknown word (holds)         -- since not every user holds the same view of what
packages/documentation/copy/en/handbook-v2/Object Types.md:962:88    - Unknown word (reconsidering) -- obvious, it may be worth reconsidering whether using objects
packages/documentation/copy/en/handbook-v2/Object Types.md:964:155   - Unknown word (indexes)       -- properties for specific indexes, and that declare `length
packages/documentation/copy/en/handbook-v2/Object Types.md:982:6     - Unknown word (Either)        -- type Either2dOr3d = [number, number
packages/documentation/copy/en/handbook-v2/Object Types.md:984:13    - Unknown word (Coordinate)    -- function setCoordinate(coord: Either2dOr3d
packages/documentation/copy/en/handbook-v2/Object Types.md:988:16    - Unknown word (Provided)      -- console.log(`Provided coordinates had ${coord
packages/documentation/copy/en/handbook-v2/Object Types.md:988:25    - Unknown word (coordinates)   -- console.log(`Provided coordinates had ${coord.length}
packages/documentation/copy/en/handbook-v2/Object Types.md:988:57    - Unknown word (dimensions)    -- had ${coord.length} dimensions`);
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:102    - Unknown word (widespread) -- now one of the most widespread cross-platform languages
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:202    - Unknown word (trivial)    -- language for adding trivial interactivity to webpages
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:210    - Unknown word (interactivity) -- language for adding trivial interactivity to webpages, JavaScript
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:252    - Unknown word (grown)         -- webpages, JavaScript has grown to be a language of
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:425    - Unknown word (exponentially) -- JavaScript has grown exponentially, the ability of the
packages/documentation/copy/en/handbook-v2/The Handbook.md:11:616    - Unknown word (mismatch)      -- runtime semantics, this mismatch between language and
packages/documentation/copy/en/handbook-v2/The Handbook.md:15:75     - Unknown word (intention)     -- background, with the intention of TypeScript being
packages/documentation/copy/en/handbook-v2/The Handbook.md:18:25     - Unknown word (Structured)    -- How is this Handbook Structured
packages/documentation/copy/en/handbook-v2/The Handbook.md:24:47     - Unknown word (comprehensive) -- is intended to be a comprehensive document that explains
packages/documentation/copy/en/handbook-v2/The Handbook.md:31:5      - Unknown word (Explain)       -- - Explain the effects of important
packages/documentation/copy/en/handbook-v2/The Handbook.md:32:5      - Unknown word (Correctly)     -- - Correctly predict type system
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:10     - Unknown word (interests)     -- In the interests of clarity and brevity
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:100    - Unknown word (edge)          -- will not explore every edge case or minutiae of
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:113    - Unknown word (minutiae)      -- explore every edge case or minutiae of the features being
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:219    - Unknown word (articles)      -- concepts in the reference articles.
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:23     - Unknown word (clarity)       -- In the interests of clarity and brevity, the main
packages/documentation/copy/en/handbook-v2/The Handbook.md:34:35     - Unknown word (brevity)       -- interests of clarity and brevity, the main content of
packages/documentation/copy/en/handbook-v2/The Handbook.md:38:224    - Unknown word (explanation)   -- to provide a deeper explanation of a single concept
packages/documentation/copy/en/handbook-v2/The Handbook.md:38:286    - Unknown word (continuity)    -- there is no aim for continuity.
packages/documentation/copy/en/handbook-v2/The Handbook.md:40:9      - Unknown word (Goals)         -- ### Non-Goals
packages/documentation/copy/en/handbook-v2/The Handbook.md:42:101    - Unknown word (Certain)       -- read in a few hours. Certain topics won't be covered
packages/documentation/copy/en/handbook-v2/The Handbook.md:42:68     - Unknown word (comfortably)   -- document that can be comfortably read in a few hours
packages/documentation/copy/en/handbook-v2/The Handbook.md:42:94     - Unknown word (hours)         -- comfortably read in a few hours. Certain topics won
packages/documentation/copy/en/handbook-v2/The Handbook.md:46:113    - Unknown word (formal)        -- cases, edge cases or formal descriptions of behavior
packages/documentation/copy/en/handbook-v2/The Handbook.md:46:153    - Unknown word (skipped)       -- of behavior will be skipped in favor of high-level
packages/documentation/copy/en/handbook-v2/The Handbook.md:46:288    - Unknown word (formally)      -- that more precisely and formally describe many aspects
packages/documentation/copy/en/handbook-v2/The Handbook.md:46:42     - Unknown word (replacement)   -- isn't intended to be a replacement for a language specification
packages/documentation/copy/en/handbook-v2/The Handbook.md:48:186    - Unknown word (closure)       -- parcel, react, babel, closure, lerna, rush, bazel
packages/documentation/copy/en/handbook-v2/The Handbook.md:48:202    - Unknown word (rush)          -- babel, closure, lerna, rush, bazel, preact, vue
packages/documentation/copy/en/handbook-v2/The Handbook.md:48:208    - Unknown word (bazel)         -- closure, lerna, rush, bazel, preact, vue, angular
packages/documentation/copy/en/handbook-v2/The Handbook.md:48:50     - Unknown word (interacts)     -- cover how TypeScript interacts with other tools, except
packages/documentation/copy/en/handbook-v2/The Handbook.md:52:146    - Unknown word (introductions) -- introductory pages. These introductions are intended to highlight
packages/documentation/copy/en/handbook-v2/The Handbook.md:52:190    - Unknown word (similarities)  -- intended to highlight key similarities and differences between
packages/documentation/copy/en/handbook-v2/The Handbook.md:52:247    - Unknown word (favored)       -- TypeScript and your favored programming language
packages/documentation/copy/en/handbook-v2/Type Declarations.md:10:77     - Unknown word (greatly)       -- aren't_ your code will greatly improve your TypeScript
packages/documentation/copy/en/handbook-v2/Type Declarations.md:31:63     - Unknown word (executable)    -- that contain types and executable code.
packages/documentation/copy/en/handbook-v2/Type Declarations.md:40:54     - Unknown word (standardized)  -- files for all of the standardized built-in APIs available
packages/documentation/copy/en/handbook-v2/Type Declarations.md:42:141    - Unknown word (collectively)  -- document`; these are collectively referred to as the DOM
packages/documentation/copy/en/handbook-v2/Type Declarations.md:45:8      - Unknown word (navigate)      -- If you navigate into a file with that
packages/documentation/copy/en/handbook-v2/Type Declarations.md:55:39     - Unknown word (varying)       -- with this problem by varying which `lib` files are
packages/documentation/copy/en/handbook-v2/Type Declarations.md:68:5      - Unknown word (Bundled)       -- ### Bundled Types
packages/documentation/copy/en/handbook-v2/Type Declarations.md:73:28     - Unknown word (considering)   -- re a package author considering bundling type definitions
packages/documentation/copy/en/handbook-v2/Type Declarations.md:77:109    - Unknown word (storing)       -- is a centralized repo storing declaration files for
packages/documentation/copy/en/handbook-v2/Type Declarations.md:77:92     - Unknown word (centralized)   -- DefinitelyTyped/) is a centralized repo storing declaration
packages/documentation/copy/en/handbook-v2/Type Declarations.md:78:5      - Unknown word (vast)          -- The vast majority of commonly
packages/documentation/copy/en/handbook-v2/Type Declarations.md:8:56      - Unknown word (demonstrating) -- read so far, we've been demonstrating basic TypeScript concepts
packages/documentation/copy/en/handbook-v2/Type Declarations.md:93:9      - Unknown word (appendix)      -- See the appendix [Writing Declaration
packages/documentation/copy/en/handbook-v2/Type Declarations.md:95:16     - Unknown word (silence)       -- If you want to silence warnings about a particular
packages/documentation/copy/en/handbook-v2/Type Declarations.md:95:24     - Unknown word (warnings)      -- you want to silence warnings about a particular module
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:10:39     - Unknown word (relation)     -- types_ help describe the relation between the types of
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:122:56    - Unknown word (complain)      -- TypeScript would no longer complain:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:158:119   - Unknown word (leaves)        -- their element types, but leaves them alone otherwise
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:158:131   - Unknown word (alone)         -- types, but leaves them alone otherwise:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:158:70    - Unknown word (flattens)      -- called `Flatten` that flattens array types to their
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:163:4     - Unknown word (Extracts)      -- // Extracts out the element type
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:167:4     - Unknown word (Leaves)        -- // Leaves the type alone.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:177:79    - Unknown word (extract)       -- constraints and then extract out types.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:178:6     - Unknown word (ends)          -- This ends up being such a common
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:181:78    - Unknown word (fetching)      -- Flatten` instead of fetching it out "manually" with
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:187:38    - Unknown word (declaratively) -- the `infer` keyword to declaratively introduce a new generic
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:188:6     - Unknown word (frees)         -- This frees us from having to think
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:188:65    - Unknown word (probing)       -- how to dig through and probing apart the structure
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:208:158   - Unknown word (presumably)    -- last_ signature (which, presumably, is the most permissive
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:208:182   - Unknown word (permissive)    -- presumably, is the most permissive catch-all case). It
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:219:4     - Unknown word (Distributive)  -- ## Distributive Conditional Types
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:228:7     - Unknown word (plug)          -- If we plug a union type into `ToArray
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:237:37    - Unknown word (distributes)   -- here is that `ToArray` distributes on:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:245:5     - Unknown word (maps)          -- and maps over each member type
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:262:1     - Unknown word (Typically)     -- Typically, distributivity is the
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:262:12    - Unknown word (distributivity) -- Typically, distributivity is the desired behavior
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:33:6      - Unknown word (False)        -- type FalseType = any;
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:58:10     - Unknown word (unimplemented) -- throw "unimplemented";
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:64:100    - Unknown word (cumbersome)    -- its API, this becomes cumbersome.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:65:261    - Unknown word (grows)         -- number of overloads grows exponentially.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:8:8       - Unknown word (heart)      -- At the heart of most useful programs
packages/documentation/copy/en/handbook-v2/Type Manipulation/Conditional Types.md:9:84      - Unknown word (introspected) -- values can be easily introspected, those decisions are
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:353:22    - Unknown word (Mikle)      -- nametag: string = "Mikle";
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:381:217   - Unknown word (generates)  -- function with no arguments generates a `HTMLDivElement`;
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:381:334   - Unknown word (argument's) -- generates an element of the argument's type. You can optionally
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:381:403   - Unknown word (Previously) -- of children as well. Previously you would have to define
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:416:26    - Unknown word (Paragraph)  -- const p = create(new HTMLParagraphElement());
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:422:23    - Unknown word (deemed)     -- A type parameter is deemed optional if it has a
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:425:117   - Unknown word (Unspecified) -- required type parameters. Unspecified type parameters will
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:426:64    - Unknown word (candidate)   -- inference cannot choose a candidate, the default type is
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:430:4     - Unknown word (Variance)    -- ## Variance Annotations
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:432:119   - Unknown word (identified)  -- situations where you've identified a reason to use it
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:432:35    - Unknown word (solving)     -- advanced feature for solving a very specific problem
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:435:16    - Unknown word (primer)      -- Here's a brief primer on the concept.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:439:11    - Unknown word (Producer)    -- interface Producer<T> {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:454:10    - Unknown word (reversal)    -- Note the reversal of direction as compared
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:454:87    - Unknown word (cancels)     -- why contravariance "cancels itself out" but covariance
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:456:82    - Unknown word (naturally)   -- and contravariance are naturally emergent behaviors that
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:456:92    - Unknown word (emergent)    -- contravariance are naturally emergent behaviors that follow
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:457:47    - Unknown word (covariant)   -- generics, we would see covariant (and contravariant)
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:457:62    - Unknown word (contravariant) -- would see covariant (and contravariant) relationships:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:464:11    - Unknown word (producer)      -- // Animal producer is expected
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:471:10    - Unknown word (variance)      -- However, variance allows for an extremely
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:471:166   - Unknown word (they'll)       -- instead, as we know they'll have the same relationship
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:471:50    - Unknown word (optimization)  -- an extremely useful optimization: if `Producer<T>` is
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:477:29    - Unknown word (involving)     -- extremely rare cases** involving certain kinds of circular
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:477:56    - Unknown word (circular)      -- involving certain kinds of circular types, this measurement
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:477:96    - Unknown word (inaccurate)    -- this measurement can be inaccurate.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:480:4     - Unknown word (Contravariant) -- // Contravariant annotation
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:485:4     - Unknown word (Covariant)     -- // Covariant annotation
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:522:70    - Unknown word (consulted)     -- behavior and are only consulted in specific situations
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:524:111   - Unknown word (limitations)   -- doing it, what their limitations are, and when they aren
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:524:63    - Unknown word (absolutely)    -- variance annotations if you absolutely know why you're doing
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:525:1     - Unknown word (Whether)       -- Whether TypeScript uses an instantiat
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:525:155   - Unknown word (correctness)   -- version to version for correctness or performance reasons
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:526:89    - Unknown word (unpredictable) -- variance; this will cause unpredictable behavior in your code
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:539:61    - Unknown word (identifiably)  -- annotated variance is identifiably wrong:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:546:49    - Unknown word (stricter)      -- annotations are allowed to be stricter (e.g. `in out` is valid
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:546:89    - Unknown word (actual)        -- out` is valid if the actual variance is covariant
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:1     - Unknown word (Lastly)        -- Lastly, if you're trying to
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:141   - Unknown word (slow)          -- specific type that's slow, *and* have identified
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:221   - Unknown word (carefully)     -- is slow, *and* have carefully validated the variance
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:231   - Unknown word (validated)     -- and* have carefully validated the variance annotation
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:29    - Unknown word (maximize)      -- if you're trying to maximize your typechecking performance
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:329   - Unknown word (extraordinarily) -- performance benefit in extraordinarily complex types by adding
packages/documentation/copy/en/handbook-v2/Type Manipulation/Generics.md:549:86    - Unknown word (profiler)      -- performance, *and* have run a profiler, *and* have identified
packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md:11:44     - Unknown word (alive)      -- number; name: string; alive: boolean };
packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md:27:6      - Unknown word (Alive)      -- type AliveOrName = "alive" | "name
packages/documentation/copy/en/handbook-v2/Type Manipulation/Indexed Access Types.md:38:19     - Unknown word (alve)       -- type I1 = Person["alve"];
packages/documentation/copy/en/handbook-v2/Type Manipulation/Keyof Type Operator.md:26:6      - Unknown word (Mapish)     -- type Mapish = { [k: string]: boolean
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:100:38    - Unknown word (Capitalize) -- keyof Type as `get${Capitalize<string & Property>}
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:113:28    - Unknown word (producing)  -- can filter out keys by producing `never` via a conditional
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:117:12    - Unknown word (Kind)       -- type RemoveKindField<Type> = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:126:6     - Unknown word (Kindless)   -- type KindlessCircle = RemoveKindField
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:144:13    - Unknown word (Exploration) -- ### Further Exploration
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:144:5     - Unknown word (Further)    -- ### Further Exploration
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:146:57    - Unknown word (manipulation) -- features in this type manipulation section, for example
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:149:6     - Unknown word (Extract)      -- type ExtractPII<Type> = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:154:18    - Unknown word (incrementing) -- id: { format: "incrementing" };
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:158:13    - Unknown word (Needing)      -- type ObjectsNeedingGDPRDeletion = ExtractPII
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:15:18     - Unknown word (Horses)     -- type OnlyBoolsAndHorses = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:21:3      - Unknown word (rodney)     -- rodney: false,
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:28:13     - Unknown word (Flags)      -- type OptionsFlags<Type> = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:41:7      - Unknown word (Mode)       -- darkMode: () => void;
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:57:12     - Unknown word (Mutable)    -- type CreateMutable<Type> = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:66:6      - Unknown word (Unlocked)   -- type UnlockedAccount = CreateMutable
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:72:6      - Unknown word (Concrete)   -- type Concrete<Type> = {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md:86:8      - Unknown word (Remapping)  -- ## Key Remapping via `as`
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:11:97     - Unknown word (concatenating) -- string literal type by concatenating the contents.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:120:4     - Unknown word (Prevent)       -- // Prevent easy human error (using
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:123:14    - Unknown word (resistant)     -- // It's typo-resistant
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:124:12    - Unknown word (frst)          -- person.on("frstNameChanged", () =>
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:127:29    - Unknown word (Literals)      -- Inference with Template Literals
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:129:508   - Unknown word (callback's)    -- as that attribute's callback's first argument.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:162:32    - Unknown word (negative)      -- console.warn("warning! negative age");
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:174:55    - Unknown word (deconstruct)   -- different ways, often to deconstruct strings, and reconstruct
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:174:80    - Unknown word (reconstruct)   -- deconstruct strings, and reconstruct them in different ways
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:176:21    - Unknown word (Manipulation)  -- ## Intrinsic String Manipulation Types
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:176:4     - Unknown word (Intrinsic)     -- ## Intrinsic String Manipulation
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:188:6     - Unknown word (Shouty)        -- type ShoutyGreeting = Uppercase
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:191:6     - Unknown word (ASCII)         -- type ASCIICacheKey<Str extends
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:204:6     - Unknown word (Quiet)         -- type QuietGreeting = Lowercase
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:20:29     - Unknown word (interpolated)  -- union is used in the interpolated position, the type is
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:224:6     - Unknown word (Uncapitalize)  -- ### `Uncapitalize<StringType>`
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:232:6     - Unknown word (Uncomfortable) -- type UncomfortableGreeting = Uncapitalize
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:237:39    - Unknown word (intrinsic)     -- Technical details on the intrinsic string manipulation
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:241:43    - Unknown word (escaped)       -- intrinsicTypeKinds.get(symbol.escapedName as string)) {
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:244:55    - Unknown word (char)          -- Capitalize: return str.charAt(0).toUpperCase()
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:24:49     - Unknown word (sendoff)       -- footer_title" | "footer_sendoff";
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:30:78     - Unknown word (multiplied)    -- the unions are cross multiplied:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:49:42     - Unknown word (Watched)       -- where a function (`makeWatchedObject`) adds a new function
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:57:15     - Unknown word (Saoirse)       -- firstName: "Saoirse",
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:58:14     - Unknown word (Ronan)         -- lastName: "Ronan",
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:65:54     - Unknown word (Passed)        -- form `attributeInThePassedObject + "Changed"`;
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:69:41     - Unknown word (simplicity)    -- void` return type (for simplicity of demonstration)
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:69:55     - Unknown word (demonstration) -- type (for simplicity of demonstration)
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:71:5      - Unknown word (naive)         -- The naive function signature of
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:90:138    - Unknown word (robust)        -- could be made more robust if we were to ensure
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:90:18     - Unknown word (listens)       -- Notice that `on` listens on the event `"firstNameChang
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:90:182    - Unknown word (eligible)      -- ensure that the set of eligible event names was constrained
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:90:258    - Unknown word (watched)       -- attribute names in the watched object with "Changed
packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md:90:349    - Unknown word (calculation)   -- comfortable with doing such a calculation in JavaScript i.e.
packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md:35:61     - Unknown word (instructive) -- function name, we see an instructive error:
packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md:56:5      - Unknown word (Limitations) -- ### Limitations
packages/documentation/copy/en/handbook-v2/Type Manipulation/Typeof Type Operator.md:61:32     - Unknown word (trap)        -- avoid the confusing trap of writing code you
packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md:13:88     - Unknown word (succinct)   -- operations and values in a succinct, maintainable way.
packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md:13:98     - Unknown word (maintainable) -- values in a succinct, maintainable way.
packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md:19:4      - Unknown word (Indexed)      -- - [Indexed Access Types](/docs
packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md:21:4      - Unknown word (Mapped)       -- - [Mapped Types](/docs/handbook
packages/documentation/copy/en/handbook-v2/Type Manipulation/_Creating Types from Types.md:8:61      - Unknown word (expressing) -- powerful because it allows expressing types _in terms of other
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:11:76     - Unknown word (lengthy)    -- means providing somewhat lengthy descriptions of where
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:22:61     - Unknown word (validity)   -- is used to check the validity of an assignment `t
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:26:1      - Unknown word (Informally) -- Informally, if you see `T is not
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:27:31     - Unknown word (directional) -- note that this is a _directional_ relationship: `S` being
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:33:11     - Unknown word (Elaborations) -- ### Error Elaborations
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:35:12     - Unknown word (starts)       -- Each error starts with a leading message
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:36:38     - Unknown word (answering)    -- each sub-message as answering a "why?" question about
packages/documentation/copy/en/handbook-v2/Understanding Errors.md:49:15     - Unknown word (issuing)      -- Its logic for issuing an error follows from
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:12:140    - Unknown word (maintain)     -- TypeScript, or having to maintain .d.ts files in your
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:12:91     - Unknown word (porting)      -- powered editors without porting your project to TypeScript
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:22:14     - Unknown word (Edit)         -- - (optional) Edit your package.json to
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:26:38     - Unknown word (installation) -- how to do this in our [installation page](/download).
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:30:36     - Unknown word (configures)   -- is a jsonc file which configures both your compiler flags
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:39:8      - Unknown word (Tells)        -- // Tells TypeScript to read JS
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:48:8      - Unknown word (Removing)     -- // Removing this would place the
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:6:1       - Unknown word (translatable) -- translatable: true
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:70:4      - Unknown word (Editing)      -- ## Editing the package.json
packages/documentation/copy/en/javascript/Creating DTS files From JS.md:89:4      - Unknown word (Tips)         -- ## Tips
packages/documentation/copy/en/javascript/Intro to JS with TS.md:12:3      - Unknown word (Incremental) -- - Incremental typing in JavaScript
packages/documentation/copy/en/javascript/Intro to JS with TS.md:24:19     - Unknown word (Hints)       -- ## Providing Type Hints in JS via JSDoc
packages/documentation/copy/en/javascript/Intro to JS with TS.md:2:20      - Unknown word (Utilizing)  -- title: JS Projects Utilizing TypeScript
packages/documentation/copy/en/javascript/JSDoc Reference.md:131:66    - Unknown word (Closure)     -- TypeScript or Google Closure syntax:
packages/documentation/copy/en/javascript/JSDoc Reference.md:162:6     - Unknown word (Casts)       -- #### Casts
packages/documentation/copy/en/javascript/JSDoc Reference.md:164:12    - Unknown word (borrows)     -- TypeScript borrows cast syntax from Google
packages/documentation/copy/en/javascript/JSDoc Reference.md:165:76    - Unknown word (parenthesized) -- type` tag before any parenthesized expression.
packages/documentation/copy/en/javascript/JSDoc Reference.md:172:9     - Unknown word (Asserted)      -- var typeAssertedNumber = /** @type {number
packages/documentation/copy/en/javascript/JSDoc Reference.md:197:16    - Unknown word (Walking)       -- console.log(`Walking ${p.name}...`);
packages/documentation/copy/en/javascript/JSDoc Reference.md:232:3     - Unknown word (galaxy)        -- galaxy: "",
packages/documentation/copy/en/javascript/JSDoc Reference.md:233:3     - Unknown word (universe)      -- universe: "",
packages/documentation/copy/en/javascript/JSDoc Reference.md:246:48    - Unknown word (surrounding)   -- declared optional by surrounding the name with square
packages/documentation/copy/en/javascript/JSDoc Reference.md:249:47    - Unknown word (syntactic)     -- declared in a variety of syntactic forms
packages/documentation/copy/en/javascript/JSDoc Reference.md:31:33     - Unknown word (augments)   -- extends`](#extends) (or [`@augments`](#extends))
packages/documentation/copy/en/javascript/JSDoc Reference.md:383:38    - Unknown word (Seriousalizable) -- serious(): string }} Seriousalizable - must have a serious
packages/documentation/copy/en/javascript/JSDoc Reference.md:387:10    - Unknown word (seriousalize)    -- function seriousalize(key, object) {
packages/documentation/copy/en/javascript/JSDoc Reference.md:406:133   - Unknown word (Satisfies)       -- html) in TypeScript. Satisfies is used to declare that
packages/documentation/copy/en/javascript/JSDoc Reference.md:420:7     - Unknown word (failing)         -- const failingMessage = "Hello world
packages/documentation/copy/en/javascript/JSDoc Reference.md:494:85    - Unknown word (reached)         -- that a property can be reached from anywhere.
packages/documentation/copy/en/javascript/JSDoc Reference.md:496:123   - Unknown word (dissimilar)      -- subclasses, but not on dissimilar instances of the containing
packages/documentation/copy/en/javascript/JSDoc Reference.md:49:4      - Unknown word (Unsupported) -- - [Unsupported patterns](#unsupported
packages/documentation/copy/en/javascript/JSDoc Reference.md:548:7     - Unknown word (Sortable)        -- class SortableSet extends Set {
packages/documentation/copy/en/javascript/JSDoc Reference.md:553:47    - Unknown word (Currently)       -- works with classes. Currently, there is no way for
packages/documentation/copy/en/javascript/JSDoc Reference.md:560:18    - Unknown word (Print)           -- /** @implements {Print} */
packages/documentation/copy/en/javascript/JSDoc Reference.md:631:152   - Unknown word (surfaced)        -- That information is surfaced in completion lists
packages/documentation/copy/en/javascript/JSDoc Reference.md:631:306   - Unknown word (displayed)       -- values are typically displayed in a strike-through
packages/documentation/copy/en/javascript/JSDoc Reference.md:64:4      - Unknown word (Declared)    -- 2. Declared in a TypeScript declaration
packages/documentation/copy/en/javascript/JSDoc Reference.md:706:51    - Unknown word (Closure's)       -- compatibility with Google Closure's `@enum` tag.
packages/documentation/copy/en/javascript/JSDoc Reference.md:711:3     - Unknown word (Beginning)       -- BeginningOfLine: 0,
packages/documentation/copy/en/javascript/JSDoc Reference.md:712:6     - Unknown word (Asterisk)        -- SawAsterisk: 1,
packages/documentation/copy/en/javascript/JSDoc Reference.md:713:3     - Unknown word (Saving)          -- SavingComments: 2,
packages/documentation/copy/en/javascript/JSDoc Reference.md:739:16    - Unknown word (Awesome)         -- * @author Ian Awesome <i.am.awesome@example
packages/documentation/copy/en/javascript/JSDoc Reference.md:759:10    - Unknown word (jsdocs)          -- * As do jsdocs on variable assignments
packages/documentation/copy/en/javascript/JSDoc Reference.md:772:26    - Unknown word (multiplier)      -- param {number} x - A multiplier
packages/documentation/copy/en/javascript/JSDoc Reference.md:79:5      - Unknown word (promised)    -- var promisedString;
packages/documentation/copy/en/javascript/JSDoc Reference.md:856:24    - Unknown word (unsupported)     -- TypeScript ignores any unsupported JSDoc tags.
packages/documentation/copy/en/javascript/JSDoc Reference.md:861:5     - Unknown word (yields)          -- - `@yields` ([issue #23857](https
packages/documentation/copy/en/javascript/JSDoc Reference.md:864:17    - Unknown word (synonyms)        -- ### Legacy type synonyms
packages/documentation/copy/en/javascript/JSDoc Reference.md:864:5     - Unknown word (Legacy)          -- ### Legacy type synonyms
packages/documentation/copy/en/javascript/JSDoc Reference.md:870:1     - Unknown word (Besides)         -- Besides, in TypeScript, the
packages/documentation/copy/en/javascript/JSDoc Reference.md:870:29    - Unknown word (capitalized)     -- in TypeScript, the capitalized versions of primitive
packages/documentation/copy/en/javascript/JSDoc Reference.md:9:16      - Unknown word (outlines)   -- The list below outlines which constructs are
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:10:54     - Unknown word (bodies)     -- assignments in class bodies
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:110:10    - Unknown word (Outer)        -- function Outer() {
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:114:7     - Unknown word (Inner)        -- Outer.Inner = function () {
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:140:4     - Unknown word (defaulting)   -- // defaulting to global
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:153:14    - Unknown word (relaxed)      -- This rule is relaxed in a `.js` file; object
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:153:167   - Unknown word (originally)   -- that were not defined originally.
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:214:31    - Unknown word (excluded)     -- annotated functions are excluded from this rule.
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:219:21    - Unknown word (somebody)     -- * @param {string} [somebody] - Somebody's name.
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:219:33    - Unknown word (Somebody's)   -- string} [somebody] - Somebody's name.
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:81:51     - Unknown word (recognized) -- module.exports` are recognized as export declarations
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:8:15      - Unknown word (notable)    -- Here are some notable differences on how checking
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:94:61     - Unknown word (forgiving)  -- much more syntactically forgiving than TypeScript's module
packages/documentation/copy/en/javascript/Type Checking JavaScript Files.md:95:6      - Unknown word (combinations) -- Most combinations of assignments and declaratio
packages/documentation/copy/en/modules-reference/Introduction.md:10:18     - Unknown word (divided)    -- This document is divided into four sections:
packages/documentation/copy/en/modules-reference/Introduction.md:12:22     - Unknown word (develops)   -- . The first section develops the [**theory**](/docs
packages/documentation/copy/en/modules-reference/Introduction.md:12:241    - Unknown word (integrate)  -- reason about how to integrate TypeScript with other
packages/documentation/copy/en/modules-reference/Introduction.md:12:528    - Unknown word (mental)     -- easier, and give you a mental framework for dealing
packages/documentation/copy/en/modules-reference/Introduction.md:13:147    - Unknown word (picking)    -- tasks, starting with picking the right compilation
packages/documentation/copy/en/modules-reference/Introduction.md:13:251    - Unknown word (beginners)  -- place to start both for beginners who want to get up and
packages/documentation/copy/en/modules-reference/Introduction.md:13:323    - Unknown word (experts)    -- as possible and for experts who already have a good
packages/documentation/copy/en/modules-reference/Introduction.md:13:355    - Unknown word (grasp)      -- already have a good grasp of the theory but want
packages/documentation/copy/en/modules-reference/Introduction.md:13:407    - Unknown word (complicated) -- concrete guidance on a complicated task.
packages/documentation/copy/en/modules-reference/Introduction.md:14:136    - Unknown word (presented)   -- syntaxes and configurations presented in previous sections
packages/documentation/copy/en/modules-reference/Introduction.md:15:111    - Unknown word (deserve)     -- complicated topics that deserve additional explanation
packages/documentation/copy/en/modules-reference/Reference.md:1004:694  - Unknown word (replacing)       -- in the same package, replacing a relative import path
packages/documentation/copy/en/modules-reference/Reference.md:1006:316  - Unknown word (forks)           -- resolution algorithm forks based on whether the
packages/documentation/copy/en/modules-reference/Reference.md:1009:165  - Unknown word (eventually)     -- implementation file that will eventually produce the output JavaScript
packages/documentation/copy/en/modules-reference/Reference.md:1009:67   - Unknown word (remapping)       -- project, an additional remapping step is performed in
packages/documentation/copy/en/modules-reference/Reference.md:1011:6    - Unknown word (variation)      -- This variation allows package authors
packages/documentation/copy/en/modules-reference/Reference.md:1114:54   - Unknown word (paired)         -- and `nodenext` must be paired with their [corresponding
packages/documentation/copy/en/modules-reference/Reference.md:1129:4    - Unknown word (Full)           -- | [Full relative paths](#relative
packages/documentation/copy/en/modules-reference/Reference.md:1135:136  - Unknown word (supporting)     -- In short, this means supporting all the behaviors traditional
packages/documentation/copy/en/modules-reference/Reference.md:1135:165  - Unknown word (traditionally)  -- supporting all the behaviors traditionally associated with Node
packages/documentation/copy/en/modules-reference/Reference.md:1144:388  - Unknown word (accordingly)    -- package.json `"exports"` accordingly. Let’s assume that there
packages/documentation/copy/en/modules-reference/Reference.md:1146:212  - Unknown word (necessitates)   -- moduleResolution bundler` necessitates using [`--module esnext
packages/documentation/copy/en/modules-reference/Reference.md:1146:77   - Unknown word (deciding)       -- , but the rules for deciding whether to emit an
packages/documentation/copy/en/modules-reference/Reference.md:1148:296  - Unknown word (hypothetical)   -- TypeScript still uses the hypothetical emit decided by `module
packages/documentation/copy/en/modules-reference/Reference.md:1148:34   - Unknown word (unintuitive)    -- explanation may be somewhat unintuitive, since `--moduleResolution
packages/documentation/copy/en/modules-reference/Reference.md:1148:474  - Unknown word (operating)      -- runtime or bundler is operating on raw `.ts` files,
packages/documentation/copy/en/modules-reference/Reference.md:1152:34   - Unknown word (Resolved)       -- from "pkg";       // Resolved with "import" condition
packages/documentation/copy/en/modules-reference/Reference.md:1175:15   - Unknown word (formerly)       -- ### `node10` (formerly known as `node`)
packages/documentation/copy/en/modules-reference/Reference.md:1177:52   - Unknown word (keeping)        -- renamed to `node10` (keeping `node` as an alias for
packages/documentation/copy/en/modules-reference/Reference.md:129:42    - Unknown word (counterparts) -- over its JavaScript counterparts since variable declarations
packages/documentation/copy/en/modules-reference/Reference.md:12:25     - Unknown word (recognizes) -- TypeScript compiler recognizes standard [ECMAScript
packages/documentation/copy/en/modules-reference/Reference.md:146:5     - Unknown word (Ambient)      -- ### Ambient modules
packages/documentation/copy/en/modules-reference/Reference.md:148:147   - Unknown word (ambient)      -- corresponding file. These _ambient modules_ usually represent
packages/documentation/copy/en/modules-reference/Reference.md:163:36    - Unknown word (somehow)      -- project tsconfig.json somehow.
packages/documentation/copy/en/modules-reference/Reference.md:169:249   - Unknown word (augmentation)  -- syntax becomes a module augmentation when the file is a module
packages/documentation/copy/en/modules-reference/Reference.md:169:41    - Unknown word (confuse)      -- declarations are easy to confuse with [module augmentations
packages/documentation/copy/en/modules-reference/Reference.md:169:62    - Unknown word (augmentations) -- confuse with [module augmentations](https://www.typescriptlang
packages/documentation/copy/en/modules-reference/Reference.md:191:50    - Unknown word (wildcard)      -- contains a single `*` wildcard character in its name
packages/documentation/copy/en/modules-reference/Reference.md:202:14    - Unknown word (discusses)     -- This section discusses the details of each
packages/documentation/copy/en/modules-reference/Reference.md:202:238   - Unknown word (fits)          -- option is and how it fits into the overall compilation
packages/documentation/copy/en/modules-reference/Reference.md:202:252   - Unknown word (overall)       -- how it fits into the overall compilation process
packages/documentation/copy/en/modules-reference/Reference.md:202:324   - Unknown word (historically)  -- compiler option was historically only used to control
packages/documentation/copy/en/modules-reference/Reference.md:202:494   - Unknown word (characteristics) -- describe a wide range of characteristics of Node.js’s module
packages/documentation/copy/en/modules-reference/Reference.md:208:12    - Unknown word (misconception)   -- > A common misconception is that `node16` and
packages/documentation/copy/en/modules-reference/Reference.md:208:269   - Unknown word (detected)        -- supported, based on the [detected module format](#module
packages/documentation/copy/en/modules-reference/Reference.md:208:412   - Unknown word (complexities)    -- options that reflect the complexities of Node.js’s dual module
packages/documentation/copy/en/modules-reference/Reference.md:208:83    - Unknown word (reality)         -- emit ES modules. In reality, `node16` and `nodenext
packages/documentation/copy/en/modules-reference/Reference.md:210:242   - Unknown word (frozen)          -- future, `node16` will be frozen while `nodenext` will
packages/documentation/copy/en/modules-reference/Reference.md:216:65    - Unknown word (nearest)         -- are ES modules if the nearest ancestor package.json
packages/documentation/copy/en/modules-reference/Reference.md:216:73    - Unknown word (ancestor)        -- modules if the nearest ancestor package.json file contains
packages/documentation/copy/en/modules-reference/Reference.md:224:345   - Unknown word (optimistically)  -- analysis will succeed, and optimistically assumes it will. This
packages/documentation/copy/en/modules-reference/Reference.md:226:215   - Unknown word (transformed)     -- statements will be transformed to `require` calls in
packages/documentation/copy/en/modules-reference/Reference.md:240:16    - Unknown word (Require)         -- import { createRequire as _createRequire }
packages/documentation/copy/en/modules-reference/Reference.md:277:49    - Unknown word (untransformed)   -- dynamic `import()` calls untransformed, so CommonJS modules
packages/documentation/copy/en/modules-reference/Reference.md:285:400   - Unknown word (accurately)      -- see on imported values accurately reflect what will happen
packages/documentation/copy/en/modules-reference/Reference.md:285:520   - Unknown word (discussion)      -- (#bundler) for more discussion.
packages/documentation/copy/en/modules-reference/Reference.md:324:3     - Unknown word (Emitted)         -- - Emitted files are ES modules
packages/documentation/copy/en/modules-reference/Reference.md:34:1      - Unknown word (Exported)   -- Exported types (and other TypeScript
packages/documentation/copy/en/modules-reference/Reference.md:354:16    - Unknown word (shouldn’t)       -- - You probably shouldn’t use this. Use `node
packages/documentation/copy/en/modules-reference/Reference.md:415:3     - Unknown word (Designed)        -- - Designed for use with the [SystemJS
packages/documentation/copy/en/modules-reference/Reference.md:460:3     - Unknown word (Supports)        -- - Supports `outFile`.
packages/documentation/copy/en/modules-reference/Reference.md:494:57    - Unknown word (wrappers)        -- like most other UMD wrappers.
packages/documentation/copy/en/modules-reference/Reference.md:51:271    - Unknown word (elision)    -- behavior and make the elision explicit. Import declarations
packages/documentation/copy/en/modules-reference/Reference.md:51:483    - Unknown word (elided)     -- all guaranteed to be elided from the output JavaScript
packages/documentation/copy/en/modules-reference/Reference.md:51:87     - Unknown word (elides)     -- TypeScript automatically elides (does not emit) imports
packages/documentation/copy/en/modules-reference/Reference.md:538:103   - Unknown word (modes)           -- multiple `moduleResolution` modes, then specifies the
packages/documentation/copy/en/modules-reference/Reference.md:542:21    - Unknown word (substitution)    -- #### File extension substitution
packages/documentation/copy/en/modules-reference/Reference.md:544:19    - Unknown word (wants)           -- TypeScript always wants to resolve internally
packages/documentation/copy/en/modules-reference/Reference.md:544:36    - Unknown word (internally)      -- always wants to resolve internally to a file that can provide
packages/documentation/copy/en/modules-reference/Reference.md:544:495   - Unknown word (analagous)       -- with the same name and analagous file extension.
packages/documentation/copy/en/modules-reference/Reference.md:562:18    - Unknown word (imitates)        -- See [_TypeScript imitates the host’s module resolution
packages/documentation/copy/en/modules-reference/Reference.md:564:6     - Unknown word (Relative)        -- #### Relative file path resolution
packages/documentation/copy/en/modules-reference/Reference.md:576:6     - Unknown word (Extensionless)   -- #### Extensionless relative paths
packages/documentation/copy/en/modules-reference/Reference.md:594:123   - Unknown word (involves)        -- most common case, this involves the runtime or bundler
packages/documentation/copy/en/modules-reference/Reference.md:606:166   - Unknown word (precedence)      -- supported, and take precedence over `index.js` lookups
packages/documentation/copy/en/modules-reference/Reference.md:608:245   - Unknown word (legacy)          -- js considers them a [legacy feature](https://nodejs
packages/documentation/copy/en/modules-reference/Reference.md:612:7     - Unknown word (Overview)        -- ##### Overview
packages/documentation/copy/en/modules-reference/Reference.md:614:258   - Unknown word (existed)         -- the browser before ESM existed or bundlers were widely
packages/documentation/copy/en/modules-reference/Reference.md:614:283   - Unknown word (widely)          -- existed or bundlers were widely used), it still has
packages/documentation/copy/en/modules-reference/Reference.md:648:89    - Unknown word (Consequently)    -- emitted by TypeScript. Consequently, it’s very easy to create
packages/documentation/copy/en/modules-reference/Reference.md:671:119   - Unknown word (proceeds)        -- resolved, module resolution proceeds on the resolved path
packages/documentation/copy/en/modules-reference/Reference.md:671:91    - Unknown word (resolved)        -- specifiers, once the alias is resolved, module resolution proceeds
packages/documentation/copy/en/modules-reference/Reference.md:686:10    - Unknown word (caveat)          -- The same caveat applies to packages
packages/documentation/copy/en/modules-reference/Reference.md:686:119   - Unknown word (artificially)    -- to make TypeScript artificially resolve `"@my-scope
packages/documentation/copy/en/modules-reference/Reference.md:688:7     - Unknown word (Relationship)    -- ##### Relationship to `baseUrl`
packages/documentation/copy/en/modules-reference/Reference.md:692:16    - Unknown word (substitutions)   -- ##### Wildcard substitutions
packages/documentation/copy/en/modules-reference/Reference.md:692:7     - Unknown word (Wildcard)        -- ##### Wildcard substitutions
packages/documentation/copy/en/modules-reference/Reference.md:706:233   - Unknown word (remainder)       -- tsconfig.json` path. The remainder of this lookup will
packages/documentation/copy/en/modules-reference/Reference.md:724:7     - Unknown word (Fallbacks)       -- ##### Fallbacks
packages/documentation/copy/en/modules-reference/Reference.md:726:125   - Unknown word (attempted)       -- in the array will be attempted until resolution succeeds
packages/documentation/copy/en/modules-reference/Reference.md:732:16    - Unknown word (vendor)          -- "*": ["./vendor/*", "./types/*"]
packages/documentation/copy/en/modules-reference/Reference.md:740:66    - Unknown word (aren’t)          -- module loaders. If you aren’t using an AMD module
packages/documentation/copy/en/modules-reference/Reference.md:744:100   - Unknown word (resolutions)     -- other relative path resolutions. For example, in a
packages/documentation/copy/en/modules-reference/Reference.md:744:6     - Unknown word (performing)      -- When performing a `baseUrl` lookup,
packages/documentation/copy/en/modules-reference/Reference.md:750:794   - Unknown word (exhausted)       -- ` lookups have been exhausted):
packages/documentation/copy/en/modules-reference/Reference.md:754:10    - Unknown word (Attempt)         -- 1. Attempt to resolve types from
packages/documentation/copy/en/modules-reference/Reference.md:761:139   - Unknown word (located)         -- package directory, once located, differ, and are explained
packages/documentation/copy/en/modules-reference/Reference.md:761:164   - Unknown word (explained)       -- located, differ, and are explained in the following sections
packages/documentation/copy/en/modules-reference/Reference.md:767:256   - Unknown word (prioritize)      -- substitution) in order to prioritize finding types.
packages/documentation/copy/en/modules-reference/Reference.md:769:226   - Unknown word (versioned)       -- TypeScript will match a versioned types condition in the
packages/documentation/copy/en/modules-reference/Reference.md:769:476   - Unknown word (configurable)    -- typesversions). Other non-configurable conditions are dependent
packages/documentation/copy/en/modules-reference/Reference.md:771:15    - Unknown word (presence)        -- Note that the presence of `"exports"` prevents
packages/documentation/copy/en/modules-reference/Reference.md:771:52    - Unknown word (subpaths)        -- exports"` prevents any subpaths not explicitly listed
packages/documentation/copy/en/modules-reference/Reference.md:775:1     - Unknown word (Scenario)        -- Scenario: `"pkg/subpath"` is
packages/documentation/copy/en/modules-reference/Reference.md:806:101   - Unknown word (searches)        -- Otherwise, resolution searches `node_modules/@types
packages/documentation/copy/en/modules-reference/Reference.md:84:107    - Unknown word (ambiguous)  -- bindings, since it appears ambiguous whether `type` applies
packages/documentation/copy/en/modules-reference/Reference.md:84:275    - Unknown word (binding)    -- default` as a named binding:
packages/documentation/copy/en/modules-reference/Reference.md:852:19    - Unknown word (tsold)           -- "types": "./tsold/subpath/index.d.ts"
packages/documentation/copy/en/modules-reference/Reference.md:916:45    - Unknown word (succeeded)       -- the request could have succeeded, but the presence of
packages/documentation/copy/en/modules-reference/Reference.md:920:469   - Unknown word (backward)        -- providing another set for backward compatibility with older
packages/documentation/copy/en/modules-reference/Reference.md:987:246   - Unknown word (icon)            -- because npm shows a TS icon on the package registry
packages/documentation/copy/en/modules-reference/Reference.md:987:266   - Unknown word (registry)        -- icon on the package registry listing only if the
packages/documentation/copy/en/modules-reference/Reference.md:991:226   - Unknown word (applicable)      -- directory, according to applicable [relative path](#relative
packages/documentation/copy/en/modules-reference/Reference.md:991:515   - Unknown word (demonstrated)    -- through `"exports"`, as demonstrated in [an example above
packages/documentation/copy/en/modules-reference/Theory.md:108:74    - Unknown word (Reflects)     -- html#node16-nodenext): Reflects the module system of
packages/documentation/copy/en/modules-reference/Theory.md:109:137   - Unknown word (reflecting)   -- will be a moving target reflecting the latest Node.js versions
packages/documentation/copy/en/modules-reference/Theory.md:109:203   - Unknown word (evolves)      -- Node.js’s module system evolves.
packages/documentation/copy/en/modules-reference/Theory.md:111:86    - Unknown word (Adds)         -- 020-es2022-esnext): Adds support for `import
packages/documentation/copy/en/modules-reference/Theory.md:116:427   - Unknown word (compilations) -- look identical between compilations using `esnext` and
packages/documentation/copy/en/modules-reference/Theory.md:125:77    - Unknown word (inject)       -- rules, Node.js will not inject the CommonJS `module
packages/documentation/copy/en/modules-reference/Theory.md:141:255   - Unknown word (parsing)      -- js would crash when parsing the file. If TypeScript
packages/documentation/copy/en/modules-reference/Theory.md:143:113   - Unknown word (motivated)    -- nodenext` is entirely motivated by Node.js’s behavior
packages/documentation/copy/en/modules-reference/Theory.md:147:94    - Unknown word (decoupled)    -- source files is somewhat decoupled from the output module
packages/documentation/copy/en/modules-reference/Theory.md:164:138   - Unknown word (largely)      -- output format. This is largely a legacy of the long
packages/documentation/copy/en/modules-reference/Theory.md:164:180   - Unknown word (taken)        -- the long road ESM has taken to widespread support
packages/documentation/copy/en/modules-reference/Theory.md:164:331   - Unknown word (During)       -- Node.js v12 in 2019. During much of this window
packages/documentation/copy/en/modules-reference/Theory.md:164:680   - Unknown word (softly)       -- ES module syntax and softly discouraging the use
packages/documentation/copy/en/modules-reference/Theory.md:164:687   - Unknown word (discouraging) -- module syntax and softly discouraging the use of the original
packages/documentation/copy/en/modules-reference/Theory.md:164:733   - Unknown word (inspired)     -- the original CommonJS-inspired `import fs = require
packages/documentation/copy/en/modules-reference/Theory.md:166:130   - Unknown word (authoring)    -- JavaScript syntax, making the authoring experience familiar
packages/documentation/copy/en/modules-reference/Theory.md:166:163   - Unknown word (newcomers)    -- experience familiar to newcomers, and (theoretically
packages/documentation/copy/en/modules-reference/Theory.md:166:179   - Unknown word (theoretically) -- familiar to newcomers, and (theoretically) making it easy for
packages/documentation/copy/en/modules-reference/Theory.md:166:326   - Unknown word (apparent)      -- which became fully apparent only after ESM and CJS
packages/documentation/copy/en/modules-reference/Theory.md:166:382   - Unknown word (coexist)       -- modules were allowed to coexist and interoperate in
packages/documentation/copy/en/modules-reference/Theory.md:166:7     - Unknown word (upside)       -- > The upside of this “author ESM
packages/documentation/copy/en/modules-reference/Theory.md:168:6     - Unknown word (Early)         -- > 1. Early assumptions about how
packages/documentation/copy/en/modules-reference/Theory.md:169:89    - Unknown word (reviewer)      -- for an author or code reviewer to lose track of what
packages/documentation/copy/en/modules-reference/Theory.md:176:447   - Unknown word (broadly)       -- runtimes and bundlers broadly fall into one of three
packages/documentation/copy/en/modules-reference/Theory.md:178:68    - Unknown word (what’s)        -- engines, only support what’s actually a part of the
packages/documentation/copy/en/modules-reference/Theory.md:179:193   - Unknown word (interacted)    -- transpiled-to-CJS files interacted with hand-written-CJS
packages/documentation/copy/en/modules-reference/Theory.md:179:307   - Unknown word (facto)         -- that have become the de facto standard for bundlers
packages/documentation/copy/en/modules-reference/Theory.md:180:227   - Unknown word (binds)         -- modules, which always binds to `exports`. (This
packages/documentation/copy/en/modules-reference/Theory.md:207:141   - Unknown word (transforming)  -- option that enables transforming, substituting, or rewriting
packages/documentation/copy/en/modules-reference/Theory.md:207:155   - Unknown word (substituting)  -- enables transforming, substituting, or rewriting module
packages/documentation/copy/en/modules-reference/Theory.md:207:172   - Unknown word (rewriting)     -- ransforming, substituting, or rewriting module specifiers. Consequent
packages/documentation/copy/en/modules-reference/Theory.md:218:470   - Unknown word (haven’t)       -- target file. But we haven’t yet discussed how to
packages/documentation/copy/en/modules-reference/Theory.md:225:42    - Unknown word (eats)          -- �"; // Looks for './eats/bananas.js'
packages/documentation/copy/en/modules-reference/Theory.md:225:47    - Unknown word (bananas)       -- / Looks for './eats/bananas.js'
packages/documentation/copy/en/modules-reference/Theory.md:225:8     - Unknown word (monkey)        -- import monkey from "🐒"; // Looks
packages/documentation/copy/en/modules-reference/Theory.md:226:47    - Unknown word (grass)         -- / Looks for './eats/grass.js'
packages/documentation/copy/en/modules-reference/Theory.md:227:8     - Unknown word (lion)          -- import lion from "🦁";   // Looks
packages/documentation/copy/en/modules-reference/Theory.md:230:454   - Unknown word (clarifies)     -- to files. This also clarifies why TypeScript doesn
packages/documentation/copy/en/modules-reference/Theory.md:230:57    - Unknown word (Needless)      -- standards-compliant ESM.” Needless to say, TypeScript would
packages/documentation/copy/en/modules-reference/Theory.md:235:264   - Unknown word (passable)      -- and sometimes it’s a passable approximation of how
packages/documentation/copy/en/modules-reference/Theory.md:235:273   - Unknown word (approximation) -- sometimes it’s a passable approximation of how most bundlers
packages/documentation/copy/en/modules-reference/Theory.md:235:88    - Unknown word (Formerly)      -- formerly-known-as-node): Formerly known as `node`, this
packages/documentation/copy/en/modules-reference/Theory.md:236:410   - Unknown word (suffixes)      -- extensions or `/index.js` suffixes, while module specifiers
packages/documentation/copy/en/modules-reference/Theory.md:236:634   - Unknown word (instated)      -- module-format-detection) instated by `--module node16
packages/documentation/copy/en/modules-reference/Theory.md:236:88    - Unknown word (counterpart)   -- nodenext-1): This is the counterpart of `--module node16
packages/documentation/copy/en/modules-reference/Theory.md:248:192   - Unknown word (validating)    -- module resolution is validating that the imports or
packages/documentation/copy/en/modules-reference/Theory.md:248:65    - Unknown word (spend)         -- last two. But when we spend most of our time working
packages/documentation/copy/en/modules-reference/Theory.md:24:24     - Unknown word (downsides)  -- This approach had some downsides, especially as web pages
packages/documentation/copy/en/modules-reference/Theory.md:24:64     - Unknown word (larger)     -- especially as web pages grew larger and more complex. In
packages/documentation/copy/en/modules-reference/Theory.md:263:13    - Unknown word (diagrams)      -- <img src="./diagrams/theory.md-1.svg" width
packages/documentation/copy/en/modules-reference/Theory.md:263:75    - Unknown word (diagram)       -- "A simple flowchart diagram. A file (rectangle node
packages/documentation/copy/en/modules-reference/Theory.md:263:92    - Unknown word (rectangle)     -- flowchart diagram. A file (rectangle node) main.ts resolves
packages/documentation/copy/en/modules-reference/Theory.md:265:89    - Unknown word (subsequently)  -- resolution of `"./math"` (and subsequently, the type of `add`)
packages/documentation/copy/en/modules-reference/Theory.md:269:301   - Unknown word (lens)          -- unintuitive through the lens of the simple model
packages/documentation/copy/en/modules-reference/Theory.md:269:337   - Unknown word (perfect)       -- simple model, but makes perfect sense with the robust
packages/documentation/copy/en/modules-reference/Theory.md:26:105    - Unknown word (bits)       -- providing a way to make bits of code available to
packages/documentation/copy/en/modules-reference/Theory.md:26:17     - Unknown word (solves)     -- Any system that solves this problem by giving
packages/documentation/copy/en/modules-reference/Theory.md:26:184    - Unknown word (sound)      -- module system.” (It may sound obvious to say that
packages/documentation/copy/en/modules-reference/Theory.md:286:185   - Unknown word (strange)       -- files, it’s a little strange that `"./math.mjs"`
packages/documentation/copy/en/modules-reference/Theory.md:290:67    - Unknown word (strangeness)   -- immediately eliminate the strangeness of seeing output file
packages/documentation/copy/en/modules-reference/Theory.md:290:683   - Unknown word (accomplishes)  -- the only process that accomplishes our two goals of validating
packages/documentation/copy/en/modules-reference/Theory.md:294:283   - Unknown word (library’s)     -- rely on mapping the library’s JavaScript files back
packages/documentation/copy/en/modules-reference/Theory.md:298:232   - Unknown word (flowing)       -- labeled 'generates' flowing to a .js file (bottom
packages/documentation/copy/en/modules-reference/Theory.md:312:14    - Unknown word (expresses)     -- The last row expresses that non-JS files can
packages/documentation/copy/en/modules-reference/Theory.md:314:14    - Unknown word (Plenty)        -- > “But wait! Plenty of declaration files
packages/documentation/copy/en/modules-reference/Theory.md:314:208   - Unknown word (renaming)      -- even moving/copying/renaming them to represent outputs
packages/documentation/copy/en/modules-reference/Theory.md:314:298   - Unknown word (venture)       -- dangerous, error-prone venture. DefinitelyTyped contributors
packages/documentation/copy/en/modules-reference/Theory.md:314:323   - Unknown word (contributors)  -- venture. DefinitelyTyped contributors and authors of typed
packages/documentation/copy/en/modules-reference/Theory.md:314:548   - Unknown word (Breaking)      -- matching extension. Breaking from this structure
packages/documentation/copy/en/modules-reference/Theory.md:318:22    - Unknown word (emphasized)    -- So far, we’ve really emphasized the distinction between
packages/documentation/copy/en/modules-reference/Theory.md:334:132   - Unknown word (erase)         -- eventually consume and erase all the imports you
packages/documentation/copy/en/modules-reference/Theory.md:338:177   - Unknown word (extensioned)   -- silence the error on `.ts`-extensioned imports.
packages/documentation/copy/en/modules-reference/Theory.md:344:465   - Unknown word (maximizing)    -- is the best bet for maximizing the compatibility of
packages/documentation/copy/en/modules-reference/Theory.md:344:567   - Unknown word (comply)        -- it will force you to comply with Node.js’s stricter
packages/documentation/copy/en/modules-reference/Theory.md:344:738   - Unknown word (worse)         -- leResolution": "bundler"` (or worse, `"node10"`):
packages/documentation/copy/en/modules-reference/Theory.md:367:305   - Unknown word (bears)         -- build of the library bears the responsibility of
packages/documentation/copy/en/modules-reference/Theory.md:367:315   - Unknown word (responsibility) -- the library bears the responsibility of ensuring the safety
packages/documentation/copy/en/modules-reference/Theory.md:56:1      - Unknown word (Accordingly) -- Accordingly, when TypeScript detects
packages/documentation/copy/en/modules-reference/Theory.md:58:21     - Unknown word (concerning)  -- ## TypeScript’s job concerning modules
packages/documentation/copy/en/modules-reference/Theory.md:60:142    - Unknown word (involved)    -- With or without modules involved, the compiler needs
packages/documentation/copy/en/modules-reference/Theory.md:60:27     - Unknown word (chief)       -- TypeScript compiler’s chief goal is to prevent certain
packages/documentation/copy/en/modules-reference/Theory.md:79:347    - Unknown word (freedom)     -- and CJS, have a lot of freedom to design their own
packages/documentation/copy/en/modules-reference/Theory.md:79:458    - Unknown word (dramatically) -- questions above can vary dramatically depending on where the
packages/documentation/copy/en/modules-reference/Theory.md:81:509    - Unknown word (Examining)    -- runtime module system. Examining these cases is essential
packages/documentation/copy/en/modules-reference/Theory.md:81:534    - Unknown word (essential)    -- Examining these cases is essential for building an understanding
packages/documentation/copy/en/modules-reference/Theory.md:95:353    - Unknown word (comprise)     -- bundle itself might comprise modules, and the runtime
packages/documentation/copy/en/modules-reference/Theory.md:96:26     - Unknown word (optimizer)    -- another transpiler, optimizer, or formatter runs on
packages/documentation/copy/en/modules-reference/Theory.md:96:40     - Unknown word (formatter)    -- transpiler, optimizer, or formatter runs on TypeScript’s
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:100:90    - Unknown word (addressed)       -- modules, the compiler addressed this problem by issuing
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:115:18    - Unknown word (revert)          -- Forcing users to revert to non-ESM syntax was
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:115:318   - Unknown word (doesn’t)         -- scheme we’re using.” It doesn’t meet the goal of allowing
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:115:326   - Unknown word (meet)            -- re using.” It doesn’t meet the goal of allowing
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:115:47    - Unknown word (essentially)     -- to non-ESM syntax was essentially an admission that “we
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:115:62    - Unknown word (admission)       -- syntax was essentially an admission that “we don’t know
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:117:28    - Unknown word (slight)          -- Unfortunately, this is a slight oversimplification—TypeScript
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:117:35    - Unknown word (oversimplification) -- fortunately, this is a slight oversimplification—TypeScript didn’t fully
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:117:350   - Unknown word (bare)               -- a module exporting a bare function was recognized
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:120:18    - Unknown word (Cannot)             -- > export = $; // Cannot `import *` this 👍
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:122:15    - Unknown word (meaningless)        -- > A should-be-meaningless change allowed the invalid
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:129:1     - Unknown word (Meanwhile)          -- Meanwhile, other transpilers were
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:129:59    - Unknown word (solve)              -- coming up with a way to solve the same problem. The
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:129:87    - Unknown word (thought)            -- the same problem. The thought process went something
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:131:70    - Unknown word (clearly)            -- function or a primitive, we clearly need to use a default
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:133:110   - Unknown word (disambiguate)       -- we’ll need a way to disambiguate true CJS modules from
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:133:325   - Unknown word (Basically)          -- to `exports.default`. Basically, a default import of
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:149:298   - Unknown word (lacked)             -- any module types that lacked an `export default`
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:149:41    - Unknown word (Traceur)            -- flag first appeared in Traceur, then in Babel, SystemJS
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:149:480   - Unknown word (Namely)             -- transpilers would treat them. Namely, it allowed a default
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:149:87    - Unknown word (shortly)            -- SystemJS, and Webpack shortly after. TypeScript added
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:162:123   - Unknown word (complaining)        -- systems without TypeScript complaining, but it was only a partial
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:162:154   - Unknown word (partial)            -- omplaining, but it was only a partial solution, leaving a
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:162:193   - Unknown word (unsolved)           -- leaving a few issues unsolved:
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:164:177   - Unknown word (fallback)           -- faultImports` only enabled a _fallback_ behavior when no default
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:164:243   - Unknown word (module’s)           -- found in the target module’s types. This created
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:164:275   - Unknown word (inconsistency)      -- types. This created an inconsistency if the target module
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:164:500   - Unknown word (ideally)            -- undefined`, and would ideally be an error in TypeScript
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:179:263   - Unknown word (emitting)           -- danger for users who were emitting `--module commonjs`
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:179:335   - Unknown word (encountered)        -- in Node.js. If they encountered an error with `import
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:179:400   - Unknown word (enabling)           -- have appeared as if enabling `allowSyntheticDefaultImports
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:179:474   - Unknown word (silenced)           -- but in fact it only silenced the build-time error
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:179:9     - Unknown word (importantly)        -- 3. Most importantly, `allowSyntheticDefaultImport
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:17:49     - Unknown word (Recalling)  -- into a CommonJS module? Recalling that default exports
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:116   - Unknown word (remaining)          -- imports to address the remaining inconsistencies between
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:126   - Unknown word (inconsistencies)    -- address the remaining inconsistencies between TypeScript’s
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:244   - Unknown word (critically)         -- transpilers and bundlers, and critically, adopted the same `
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:256   - Unknown word (adopted)            -- bundlers, and critically, adopted the same `__esModule
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:395   - Unknown word (ensured)            -- helper for `import *` ensured the result was always
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:457   - Unknown word (stripped)           -- with call signatures stripped, fully resolving the
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:527   - Unknown word (aforementioned)     -- compliance issue that the aforementioned “resolves to a non-module
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:595   - Unknown word (sidestep)           -- error didn’t quite sidestep.) Finally, with the
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:64    - Unknown word (refined)            -- flag in 2.7, which refined the type checking of
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:824   - Unknown word (plausibly)          -- legal and, perhaps, plausibly adoptable by Node.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:181:834   - Unknown word (adoptable)          -- perhaps, plausibly adoptable by Node.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:185:151   - Unknown word (synthetic)          -- CommonJS modules a “synthetic default export” of their
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:185:9     - Unknown word (shipped)            -- Node.js shipped support for ES modules
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:196:1     - Unknown word (That’s)             -- That’s one win for seamless
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:211:24    - Unknown word (trasnpilation)      -- Doesn't exist after trasnpilation, but works in Node.js
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:211:4     - Unknown word (Doesn't)            -- // Doesn't exist after trasnpilation
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:215:143   - Unknown word (synthesizes)        -- flag, Node.js _always_ synthesizes a default export, creating
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:215:98    - Unknown word (lacks)              -- if the target module lacks an `__esModule` flag
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:217:5     - Unknown word (Unreliable)         -- ### Unreliable named exports
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:219:369   - Unknown word (executes)           -- exports before any code executes, whereas transpiled
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:224:10    - Unknown word (worl)               -- exports["worl" + "d"] = "hello";
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:237:214   - Unknown word (migrate)            -- published libraries cannot migrate from transpiled modules
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:237:76    - Unknown word (they’re)            -- to-CJS module, since they’re both CommonJS at runtime
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:253:122   - Unknown word (standing)           -- significantly from the long-standing algorithm for resolving
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:253:85    - Unknown word (differed)           -- resolving ESM imports that differed significantly from the
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:253:94    - Unknown word (significantly)      -- imports that differed significantly from the long-standing
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:269:4     - Unknown word (Conclusions)        -- ## Conclusions
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:271:1     - Unknown word (Clearly)            -- Clearly, a seamless migration
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:275:332   - Unknown word (subject)            -- to run in Node.js is subject to stricter rules than
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:275:507   - Unknown word (nodenext)           -- set to `node16` or `nodenext`.)
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:279:183   - Unknown word (consequences)       -- enabled doesn’t have major consequences. The way you write imports
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:279:509   - Unknown word (violate)            -- semantics that clearly violate the ECMAScript specification
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:279:557   - Unknown word (intuitions)        -- specification, confusing intuitions about namespace imports
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:283:257   - Unknown word (introduces)        -- checking changes it introduces are an incomplete version
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:189   - Unknown word (marginally)        -- enabled, either because it marginally increases the output
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:200   - Unknown word (increases)         -- because it marginally increases the output size on disk
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:267   - Unknown word (employed)          -- the interop algorithm employed by the helpers seems
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:27    - Unknown word (inclusion)         -- people object to the inclusion of the `__importDefault
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:283   - Unknown word (helpers)           -- algorithm employed by the helpers seems to misrepresent
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:300   - Unknown word (misrepresent)      -- the helpers seems to misrepresent Node.js’s interop behavior
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:385   - Unknown word (hazards)           -- esModule`, leading to the hazards discussed earlier. Both
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:426   - Unknown word (objections)        -- earlier. Both of these objections can be addressed, at
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:464   - Unknown word (partially)         -- addressed, at least partially, without accepting the
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:497   - Unknown word (flawed)            -- without accepting the flawed checking behavior exhibited
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:522   - Unknown word (exhibited)         -- flawed checking behavior exhibited with `esModuleInterop
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:285:744   - Unknown word (objection)         -- To discuss the second objection, let’s look at a final
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:306:423   - Unknown word (shown)             -- for the module (not shown) are written, you may
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:306:686   - Unknown word (caught)            -- namespace import would be caught.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:308:224   - Unknown word (exhibits)          -- longer be callable—it exhibits the “double default
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:308:25    - Unknown word (decided)           -- What would change if we decided to migrate `src` to
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:308:426   - Unknown word (notably)           -- and `nodenext`.) But notably, the _second_ import
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:310:542   - Unknown word (unaffected)        -- import was completely unaffected by it. Unfortunately
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:310:626   - Unknown word (semantic)          -- without breaking the semantic contract between `main
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:312:177   - Unknown word (minimize)          -- who still prefer to minimize module syntax transformations
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:312:276   - Unknown word (verbatim)          -- functions, enabling `verbatimModuleSyntax` is a better
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:312:483   - Unknown word (avoiding)          -- CommonJS-emitting files, avoiding all the kinds of import
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:312:516   - Unknown word (ambiguity)         -- the kinds of import ambiguity we’ve discussed, at
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:314:32    - Unknown word (considerations)    -- Library code needs special considerations
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:316:124   - Unknown word (varies)            -- exports can be accessed varies between different tools
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:316:16    - Unknown word (ship)              -- Libraries that ship as CommonJS should avoid
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:337:211   - Unknown word (stuck)             -- bundler, they might be stuck. Some third-party TypeScript
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:337:42    - Unknown word (smell)             -- misconfigured module smell if they have to access
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:344:262   - Unknown word (successfully)      -- that it only compiles successfully when `strictNullChecks
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:344:492   - Unknown word (infectious)        -- to contain similarly “infectious” default imports:
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:353:1     - Unknown word (Suppose)           -- Suppose this default import
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:353:78    - Unknown word (causes)            -- esModuleInterop` enabled, and causes an error when a user
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:360:116   - Unknown word (advice)            -- esModuleInterop`. This advice is a reasonable start
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:360:32    - Unknown word (conventional)      -- like this have led to conventional wisdom that says libraries
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:360:45    - Unknown word (wisdom)            -- led to conventional wisdom that says libraries
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:362:213   - Unknown word (sidesteps)         -- batimModuleSyntax` completely sidesteps the issue with `esModuleInter
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:362:259   - Unknown word (forcing)           -- esModuleInterop` by forcing CommonJS-emitting files
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:362:382   - Unknown word (affects)           -- esModuleInterop` only affects CommonJS, as more libraries
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:362:461   - Unknown word (relevance)         -- publishing over time, the relevance of this issue will decline
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:37:99     - Unknown word (equivalence) -- world. Extending the equivalence above one step further
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:49:39     - Unknown word (there’s)     -- that in this scheme, there’s no way to write an ESM
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:58:142    - Unknown word (established) -- this module? We just established that a namespace import
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:5:35      - Unknown word (appendices) -- docs/handbook/modules/appendices/esm-cjs-interop.html
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:138    - Unknown word (emerged)     -- specification, transpilers emerged with support for downleveling
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:206    - Unknown word (adopt)       -- CJS, allowing users to adopt the new syntax long
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:347    - Unknown word (proof)       -- good way to “future-proof” new projects. For this
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:40     - Unknown word (clarifying)  -- a step back here and clarifying what the _goal_ is.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:410    - Unknown word (seamless)    -- there needed to be a seamless migration path from
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:504    - Unknown word (natively)    -- executing the ESM input natively once runtimes developed
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:74     - Unknown word (soon)        -- what the _goal_ is. As soon as modules landed in
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:72:90     - Unknown word (landed)      -- As soon as modules landed in the ES2015 specification
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:74:213    - Unknown word (arrows)          -- of their ESM inputs (arrows represent imports):
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:74:85     - Unknown word (transformations) -- transpilers to find a set of transformations that made the semantics
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:76:111    - Unknown word (Importing)       -- CJS. In the ESM flow: "Importing module" flows to "Imported
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:76:5      - Unknown word (flowchart)       -- ![A flowchart with two similar flows
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:78:150    - Unknown word (inevitable)      -- ecosystem, so it was inevitable that modules written
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:78:345    - Unknown word (didn’t)          -- specified by ES2015, and didn’t yet exist in any real
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:80:26     - Unknown word (areas)           -- flowchart with three areas side-by-side. Left:
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:80:57     - Unknown word (Middle)          -- by-side. Left: ESM. Middle: True CJS. Right: ESM
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:82:237    - Unknown word (seamlessly)      -- users to transition seamlessly from transpiled ESM
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:82:367    - Unknown word (chose)           -- the one the runtime chose to implement.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:82:58     - Unknown word (emerge)          -- nothing, a behavior would emerge from the existing semantics
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:84:1      - Unknown word (Guessing)        -- Guessing what interop behavior
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:84:376    - Unknown word (unknowable)      -- `require` calls was unknowable. All these variables
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:84:425    - Unknown word (predicted)       -- variables would have to be predicted correctly in order to
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:84:505    - Unknown word (toward)          -- seamless migration path toward native ESM.
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:84:55     - Unknown word (wasn’t)          -- runtimes would support wasn’t limited to ESM importing
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:9:156     - Unknown word (supposed)   -- of how ES modules are supposed to interact with each
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:9:260     - Unknown word (knack)      -- with each other, and a knack for figuring things
packages/documentation/copy/en/modules-reference/appendices/ESM-CJS-Interop.md:9:57      - Unknown word (There’s)    -- ESM-to-CJS transpiler. There’s no specification for
packages/documentation/copy/en/modules-reference/diagrams/esm-cjs-interop.md:1:4       - Unknown word (mermaid)    -- ```mermaid
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:112:153   - Unknown word (relying)       -- in the browser, while relying on `nodenext`’s default
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:112:198   - Unknown word (lookups)       -- default node_modules lookups, or on `paths`, to direct
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:115:15    - Unknown word (importmap)     -- <script type="importmap">
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:134:397   - Unknown word (impractical)   -- settings. Since this is impractical, you can instead use
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:134:434   - Unknown word (strictest)     -- can instead use the strictest possible settings, since
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:134:469   - Unknown word (satisfying)    -- possible settings, since satisfying those tends to satisfy
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:134:56    - Unknown word (fundamentally) -- library author is a fundamentally different process from
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:150:7     - Unknown word (examine)       -- Let’s examine why we picked each of
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:152:161   - Unknown word (emitter)       -- using a third-party emitter to emit ESM outputs
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:158:150   - Unknown word (Compiled)      -- ` doesn’t complain. Compiled with `"module": "esnext
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:158:3     - Unknown word (Assuming)      -- Assuming `./utils.ts` (or `.
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:16:16     - Unknown word (adopting)   -- In addition to adopting the following settings
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:16:316    - Unknown word (circumstances) -- behavior under these circumstances, which TypeScript cannot
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:173:108   - Unknown word (produced)      -- works in bundlers to be produced. Likewise, `"moduleResolution
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:184:153   - Unknown word (highly)        -- _disabled_, so it’s highly recommended for libraries
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:185:219   - Unknown word (ambiguously)   -- could be interpreted ambiguously based on the user’s
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:185:338   - Unknown word (suggested)     -- Previously, it was often suggested that libraries compile
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:185:50    - Unknown word (protects)      -- true`**. This setting protects against a few module
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:185:593   - Unknown word (portability)   -- the setting guarantees portability for libraries. `verbatimModul
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:186:56    - Unknown word (alongside)     -- type declaration files alongside the output JavaScript
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:189:5     - Unknown word (Considerations) -- ### Considerations for bundling libraries
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:191:290   - Unknown word (caveats)        -- , but only with two caveats:
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:191:68    - Unknown word (externalized)   -- then all your (non-externalized) imports will be processed
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:193:1006  - Unknown word (impose)         -- eResolution": "nodenext"` may impose overly strict requirements
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:193:790   - Unknown word (consequence)    -- same compilation. As a consequence, using `"moduleResolution
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:200:309   - Unknown word (infect)         -- declaration file and infect types referencing `Component
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:200:322   - Unknown word (referencing)    -- file and infect types referencing `Component` with `any
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:202:139   - Unknown word (preserved)      -- ensure that the imports preserved in your declaration
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:204:14    - Unknown word (dual)           -- ### Notes on dual-emit solutions
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:206:1126  - Unknown word (reduces)        -- publishing significantly reduces the chance of a serious
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:206:1172  - Unknown word (unnoticed)      -- serious problem going unnoticed.
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:206:383   - Unknown word (emitters)       -- json. While third-party emitters are generally safe to
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:206:944   - Unknown word (practices)      -- dependencies follow best practices and dual-emit outputs
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:208:584   - Unknown word (defeated)       -- atimModuleSyntax` can also be defeated by configuring a third
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:208:596   - Unknown word (configuring)    -- also be defeated by configuring a third-party emitter
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:2:18      - Unknown word (Choosing)   -- title: Modules - Choosing Compiler Options
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:31:8      - Unknown word (Consult)       -- // Consult your bundler’s documentation
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:34:8      - Unknown word (Recommended)   -- // Recommended
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:38:42     - Unknown word (isolated)      -- imModuleSyntax": true, // or `isolatedModules`
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:58:8      - Unknown word (Implied)       -- // Implied by `"module": "nodenext
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:75:1      - Unknown word (Whereas)       -- Whereas ts-node makes minimal
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:75:164    - Unknown word (extensionless) -- a bundler, allowing extensionless/index module specifiers
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:75:191    - Unknown word (specifiers)    -- extensionless/index module specifiers and arbitrary mixing
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:75:216    - Unknown word (mixing)        -- specifiers and arbitrary mixing of ESM and CJS. Use
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:75:23     - Unknown word (minimal)       -- Whereas ts-node makes minimal modifications to Node
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:79:62     - Unknown word (scenario)      -- options dedicated to this scenario, but you can approximate
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:79:84     - Unknown word (approximate)   -- scenario, but you can approximate them by using a combination
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:96:31     - Unknown word (specifier)     -- Optional: point bare specifier imports to an empty
packages/documentation/copy/en/modules-reference/guides/Choosing Compiler Options.md:97:13     - Unknown word (prohibit)      -- // to prohibit importing from node
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:10:46     - Unknown word (utilizes)   -- based project which utilizes TypeScript such as an
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:119:4     - Unknown word (Disallow)       -- <p>Disallow <code>import</code>s
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:119:96    - Unknown word (expanding)      -- reference></code>s from expanding the number of files
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:135:30    - Unknown word (debuggers)      -- Specify the root path for debuggers to find the reference
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:167:12    - Unknown word (erasing)        -- <p>Disable erasing <code>const enum</code
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:170:23    - Unknown word (suppress)       -- tr class='odd' name='suppressImplicitAnyIndexErrors
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:171:27    - Unknown word (Suppress)       -- code>&#x3C;TypeScriptSuppressImplicitAnyIndexErrors
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:178:30    - Unknown word (Helpers)        -- class='even' name='noEmitHelpers'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:20:127    - Unknown word (csproj)     -- editing the XML in your `.csproj` to define `PropertyGroups
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:211:27    - Unknown word (Isolated)       -- code>&#x3C;TypeScriptIsolatedModules&#x3E;</code>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:218:27    - Unknown word (Decorator)      -- class='odd' name='emitDecoratorMetadata'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:223:34    - Unknown word (decorated)      -- design-type metadata for decorated declarations in source
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:234:35    - Unknown word (Decorators)     -- odd' name='experimentalDecorators'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:239:49    - Unknown word (draft)          -- support for TC39 stage 2 draft decorators.</p>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:239:55    - Unknown word (decorators)     -- for TC39 stage 2 draft decorators.</p>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:25:24     - Unknown word (Returns)    -- TypeScriptNoImplicitReturns>true</TypeScriptNoImplicitRet
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:267:27    - Unknown word (Skip)           -- code>&#x3C;TypeScriptSkipDefaultLibCheck&#x3E
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:290:37    - Unknown word (Cases)          -- name='noFallthroughCasesInSwitch'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:298:28    - Unknown word (Unreachable)    -- class='odd' name='allowUnreachableCode'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:29:205    - Unknown word (understandable) -- help you write a more understandable project file. You can
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:306:29    - Unknown word (Consistent)     -- class='even' name='forceConsistentCasingInFileNames'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:306:39    - Unknown word (Casing)         -- name='forceConsistentCasingInFileNames'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:311:16    - Unknown word (casing)         -- <p>Ensure that casing is correct in imports
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:322:37    - Unknown word (Strict)         -- name='noImplicitUseStrict'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:37:13     - Unknown word (Flag)           -- <th>TSC Flag</th>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:391:4     - Unknown word (Raise)          -- <p>Raise an error when a function
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:410:26    - Unknown word (Factory)        -- class='odd' name='jsxFactory'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:503:65    - Unknown word (symbols)        -- of string, numbers or symbols. Legacy option.</p>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:530:30    - Unknown word (Bind)           -- class='even' name='strictBindCallApply'>
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:561:112   - Unknown word (stripping)      -- example, a common task is stripping comments and sourcemaps
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:596:74    - Unknown word (incremental)    -- when TypeScript's [`incremental`](/tsconfig#incremental
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:63:17     - Unknown word (reporting)      -- <p>Enable error reporting for expressions and
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:67:27     - Unknown word (Generates)      -- code>&#x3C;TypeScriptGeneratesDeclarations&#x3E;</code
packages/documentation/copy/en/project-config/Compiler Options in MSBuild.md:79:4      - Unknown word (Specify)        -- <p>Specify what module code is
packages/documentation/copy/en/project-config/Compiler Options.md:1018:4    - Unknown word (Enforces)                     -- <p>Enforces using indexed accessors
packages/documentation/copy/en/project-config/Compiler Options.md:1095:4    - Unknown word (Deprecated)                   -- <p>Deprecated setting. Use <a href
packages/documentation/copy/en/project-config/Compiler Options.md:1117:139  - Unknown word (designates)                   -- code></a> is true, also designates a file that bundles
packages/documentation/copy/en/project-config/Compiler Options.md:1183:12   - Unknown word (wiping)                       -- <p>Disable wiping the console in watch
packages/documentation/copy/en/project-config/Compiler Options.md:1194:21   - Unknown word (formatting)                   -- <p>Enable color and formatting in TypeScript's output
packages/documentation/copy/en/project-config/Compiler Options.md:1267:10   - Unknown word (Computed)                     -- <td><p>Computed from the list of input
packages/documentation/copy/en/project-config/Compiler Options.md:1505:36   - Unknown word (Catch)                        -- even' name='useUnknownInCatchVariables'>
packages/documentation/copy/en/project-config/Compiler Options.md:1524:24   - Unknown word (elide)                        -- Do not transform or elide any imports or exports
packages/documentation/copy/en/project-config/Compiler Options.md:155:33    - Unknown word (deleted)     -- what would be built (or deleted, if specified with
packages/documentation/copy/en/project-config/Compiler Options.md:202:42    - Unknown word (mode's)      -- files from the watch mode's processing.</p>
packages/documentation/copy/en/project-config/Compiler Options.md:205:31    - Unknown word (Polling)     -- 'odd' name='fallbackPolling'>
packages/documentation/copy/en/project-config/Compiler Options.md:207:108   - Unknown word (fixedchunksize)   -- amicpriority</code>, or <code>fixedchunksize</code></p>
packages/documentation/copy/en/project-config/Compiler Options.md:207:16    - Unknown word (fixedinterval) -- <td><p><code>fixedinterval</code>, <code>priorityinterva
packages/documentation/copy/en/project-config/Compiler Options.md:207:44    - Unknown word (priorityinterval) -- fixedinterval</code>, <code>priorityinterval</code>, <code>dynamicpriority
packages/documentation/copy/en/project-config/Compiler Options.md:207:75    - Unknown word (dynamicpriority)  -- riorityinterval</code>, <code>dynamicpriority</code>, or <code>fixedchunksi
packages/documentation/copy/en/project-config/Compiler Options.md:211:30    - Unknown word (watcher)          -- Specify what approach the watcher should use if the system
packages/documentation/copy/en/project-config/Compiler Options.md:211:87    - Unknown word (watchers)         -- runs out of native file watchers.</p>
packages/documentation/copy/en/project-config/Compiler Options.md:220:118   - Unknown word (watching)         -- t support recursive watching natively.</p>
packages/documentation/copy/en/project-config/Compiler Options.md:234:117   - Unknown word (fixedchunksizepolling)  -- oritypolling</code>, or <code>fixedchunksizepolling</code></p>
packages/documentation/copy/en/project-config/Compiler Options.md:234:16    - Unknown word (usefsevents)      -- <td><p><code>usefsevents</code>, <code>fixedpollingint
packages/documentation/copy/en/project-config/Compiler Options.md:234:42    - Unknown word (fixedpollinginterval) -- usefsevents</code>, <code>fixedpollinginterval</code>, <code>dynamicpriority
packages/documentation/copy/en/project-config/Compiler Options.md:234:77    - Unknown word (dynamicprioritypolling) -- pollinginterval</code>, <code>dynamicprioritypolling</code>, or <code>fixedchunksi
packages/documentation/copy/en/project-config/Compiler Options.md:243:191   - Unknown word (usefseventsonparentdirectory) -- usefsevents</code>, or <code>usefseventsonparentdirectory</code></p>
packages/documentation/copy/en/project-config/Compiler Options.md:243:51    - Unknown word (prioritypollinginterval) -- pollinginterval</code>, <code>prioritypollinginterval</code>, <code>dynamicpriority
packages/documentation/copy/en/project-config/Compiler Options.md:350:40    - Unknown word (Affect)                       -- name='assumeChangesOnlyAffectDirectDependencies'>
packages/documentation/copy/en/project-config/Compiler Options.md:358:4     - Unknown word (Have)                         -- <p>Have recompiles in projects
packages/documentation/copy/en/project-config/Compiler Options.md:460:30    - Unknown word (Referenced)                   -- class='odd' name='disableReferencedProjectLoad'>
packages/documentation/copy/en/project-config/Compiler Options.md:490:25    - Unknown word (multi)                        -- Opt a project out of multi-project reference checking
packages/documentation/copy/en/project-config/Compiler Options.md:501:12    - Unknown word (preferring)                   -- <p>Disable preferring source files instead
packages/documentation/copy/en/project-config/Compiler Options.md:699:12    - Unknown word (sufficient)                   -- <p>Require sufficient annotation on exports
packages/documentation/copy/en/project-config/Compiler Options.md:699:64    - Unknown word (trivially)                    -- exports so other tools can trivially generate declaration
packages/documentation/copy/en/project-config/Compiler Options.md:715:119   - Unknown word (jsxdev)                       -- code>, or <code>react-jsxdev</code></p>
packages/documentation/copy/en/project-config/Compiler Options.md:72:4      - Unknown word (Initializes) -- <p>Initializes a TypeScript project
packages/documentation/copy/en/project-config/Compiler Options.md:812:38    - Unknown word (Depth)                        -- name='maxNodeModuleJsDepth'>
packages/documentation/copy/en/project-config/Compiler Options.md:838:18    - Unknown word (Treat)                        -- <td><p>"auto": Treat files with imports,
packages/documentation/copy/en/project-config/Compiler Options.md:856:29    - Unknown word (Suffixes)                     -- class='odd' name='moduleSuffixes'>
packages/documentation/copy/en/project-config/Compiler Options.md:922:30    - Unknown word (Truncation)                   -- class='odd' name='noErrorTruncation'>
packages/documentation/copy/en/project-config/Compiler Options.md:930:12    - Unknown word (truncating)                   -- <p>Disable truncating types in error messages
packages/documentation/copy/en/project-config/Configuring Watch.md:13:120    - Unknown word (pros)        -- of these methods has pros and cons.
packages/documentation/copy/en/project-config/Configuring Watch.md:13:129    - Unknown word (cons)        -- methods has pros and cons.
packages/documentation/copy/en/project-config/Configuring Watch.md:15:155    - Unknown word (unreliable)  -- is OS dependent and unreliable - on many operating
packages/documentation/copy/en/project-config/Configuring Watch.md:15:44     - Unknown word (broadcast)   -- file system events to broadcast changes in the watched
packages/documentation/copy/en/project-config/Configuring Watch.md:15:471    - Unknown word (exceed)      -- has the potential to exceed these limits and result
packages/documentation/copy/en/project-config/Configuring Watch.md:15:505    - Unknown word (undesirable) -- limits and result in undesirable behavior. However, because
packages/documentation/copy/en/project-config/Configuring Watch.md:15:608    - Unknown word (comparatively) -- based model, CPU use is comparatively light. The compiler
packages/documentation/copy/en/project-config/Configuring Watch.md:15:864    - Unknown word (failures)      -- to augment potential failures in individual file watchers
packages/documentation/copy/en/project-config/Configuring Watch.md:17:185    - Unknown word (interest)      -- files and directories of interest. Under this strategy
packages/documentation/copy/en/project-config/Configuring Watch.md:17:21     - Unknown word (polling)       -- `fs.watchFile` uses polling and thus costs CPU cycles
packages/documentation/copy/en/project-config/Configuring Watch.md:17:38     - Unknown word (costs)         -- uses polling and thus costs CPU cycles. However
packages/documentation/copy/en/project-config/Configuring Watch.md:17:389    - Unknown word (degree)        -- This means that the degree to which CPU usage will
packages/documentation/copy/en/project-config/Configuring Watch.md:17:99     - Unknown word (reliable)      -- is by far the most reliable mechanism available
packages/documentation/copy/en/project-config/Configuring Watch.md:2:8       - Unknown word (Configuring) -- title: Configuring Watch
packages/documentation/copy/en/project-config/Configuring Watch.md:42:14     - Unknown word (coalesce)      -- // Don't coalesce watch notification
packages/documentation/copy/en/project-config/Configuring Watch.md:45:45     - Unknown word (reducing)      -- additional settings for reducing the amount of possible
packages/documentation/copy/en/project-config/Configuring Watch.md:60:96     - Unknown word (intervals)     -- use different polling intervals for source files, config
packages/documentation/copy/en/project-config/Configuring Watch.md:61:106    - Unknown word (polled)        -- frequently modified files are polled at shorter intervals
packages/documentation/copy/en/project-config/Configuring Watch.md:61:139    - Unknown word (unchanged)     -- shorter intervals, and unchanged files are polled less
packages/documentation/copy/en/project-config/Configuring Watch.md:63:17     - Unknown word (Fallback)      -- `UseFsEventsWithFallbackDynamicPolling`
packages/documentation/copy/en/project-config/Configuring Watch.md:64:112    - Unknown word (yielding)      -- irectories of included files (yielding a compromise that results
packages/documentation/copy/en/project-config/Configuring Watch.md:64:123    - Unknown word (compromise)    -- included files (yielding a compromise that results in lower
packages/documentation/copy/en/project-config/Configuring Watch.md:64:213    - Unknown word (accuracy)      -- but potentially lower accuracy).
packages/documentation/copy/en/project-config/Configuring Watch.md:65:90     - Unknown word (WATCHER)       -- variable `TSC_NONPOLLING_WATCHER` is set to true, use
packages/documentation/copy/en/project-config/Configuring Watch.md:76:2      - Unknown word (Recursive)     -- `RecursiveDirectoryUsingFsWatchFile
packages/documentation/copy/en/project-config/Configuring Watch.md:9:102     - Unknown word (watches)     -- which controls how it watches files and directories
packages/documentation/copy/en/project-config/Configuring Watch.md:9:26      - Unknown word (onward)      -- of TypeScript 3.8 and onward, the Typescript compiler
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:131:16    - Unknown word (jmreidy)     -- More details: [jmreidy/grunt-browserify](https
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:210:47    - Unknown word (Dialog)      -- at [Package Manager Dialog](http://docs.nuget.org
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:220:104   - Unknown word (separately)  -- need to be installed separately.
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:2:8       - Unknown word (Integrating) -- title: Integrating with Build Tools
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:4:27      - Unknown word (integrating) -- permalink: /docs/handbook/integrating-with-build-tools.html
packages/documentation/copy/en/project-config/Integrating with Build Tools.md:70:4      - Unknown word (pipe)        -- .pipe(process.stdout);
packages/documentation/copy/en/project-config/Project References.md:101:159   - Unknown word (implications)  -- but it has some perf implications. For very large composite
packages/documentation/copy/en/project-config/Project References.md:101:56    - Unknown word (scenes)        -- we have a behind-the-scenes in-memory `.d.ts` generation
packages/documentation/copy/en/project-config/Project References.md:108:8     - Unknown word (awaited)       -- A long-awaited feature is smart incremental
packages/documentation/copy/en/project-config/Project References.md:11:61     - Unknown word (logical)    -- build times, enforce logical separation between components
packages/documentation/copy/en/project-config/Project References.md:11:69     - Unknown word (separation) -- times, enforce logical separation between components,
packages/documentation/copy/en/project-config/Project References.md:131:19    - Unknown word (ordering)      -- Don't worry about ordering the files you pass on
packages/documentation/copy/en/project-config/Project References.md:136:12    - Unknown word (Shows)         -- - `--dry`: Shows what would be done but
packages/documentation/copy/en/project-config/Project References.md:137:14    - Unknown word (Deletes)       -- - `--clean`: Deletes the outputs of the specified
packages/documentation/copy/en/project-config/Project References.md:144:155   - Unknown word (subsequent)    -- it _once_ because a subsequent build would skip building
packages/documentation/copy/en/project-config/Project References.md:147:225   - Unknown word (timestamps)    -- control tool preserves timestamps between the local copy
packages/documentation/copy/en/project-config/Project References.md:157:9     - Unknown word (proj)          -- to your proj file. This will enable
packages/documentation/copy/en/project-config/Project References.md:159:94    - Unknown word (respected)     -- properties will not be respected - all settings should
packages/documentation/copy/en/project-config/Project References.md:161:48    - Unknown word (wherein)       -- msbuild-based workflows wherein tsconfig files have
packages/documentation/copy/en/project-config/Project References.md:164:4     - Unknown word (Guidance)      -- ## Guidance
packages/documentation/copy/en/project-config/Project References.md:166:5     - Unknown word (Overall)       -- ### Overall Structure
packages/documentation/copy/en/project-config/Project References.md:168:132   - Unknown word (centralize)    -- tsconfig-json.html) to centralize your common compiler
packages/documentation/copy/en/project-config/Project References.md:171:136   - Unknown word (leaf)          -- references) to all of your leaf-node projects and sets
packages/documentation/copy/en/project-config/Project References.md:180:1     - Unknown word (Simply)        -- Simply place a `tsconfig.json
packages/documentation/copy/en/project-config/Project References.md:180:149   - Unknown word (layering)      -- to match the intended layering of the program.
packages/documentation/copy/en/project-config/Project References.md:185:1     - Unknown word (Layout)        -- Layout for compilations using
packages/documentation/copy/en/project-config/Project References.md:186:141   - Unknown word (kept)          -- endpoint" projects are kept as small as possible
packages/documentation/copy/en/project-config/Project References.md:18:47     - Unknown word (converter)  -- project with two modules, `converter` and `units`, and a
packages/documentation/copy/en/project-config/Project References.md:191:44    - Unknown word (Rush)          -- and figure this out. Rush and Lerna seem to have
packages/documentation/copy/en/project-config/Project References.md:191:7     - Unknown word (Experiment)    -- TODO: Experiment more and figure this
packages/documentation/copy/en/project-config/Project References.md:37:27     - Unknown word (celsius)    -- assert.areEqual(converter.celsiusToFahrenheit(0), 32)
packages/documentation/copy/en/project-config/Project References.md:37:36     - Unknown word (Fahrenheit) -- areEqual(converter.celsiusToFahrenheit(0), 32);
packages/documentation/copy/en/project-config/Project References.md:44:3      - Unknown word (Changing)   -- - Changing just the _internals
packages/documentation/copy/en/project-config/Project References.md:50:24     - Unknown word (incurs)     -- Invoking `tsc` twice incurs more startup time overhead
packages/documentation/copy/en/project-config/Project References.md:50:3      - Unknown word (Invoking)   -- - Invoking `tsc` twice incurs more
packages/documentation/copy/en/project-config/Project References.md:50:36     - Unknown word (startup)    -- tsc` twice incurs more startup time overhead
packages/documentation/copy/en/project-config/Project References.md:50:49     - Unknown word (overhead)   -- incurs more startup time overhead
packages/documentation/copy/en/project-config/Project References.md:78:185    - Unknown word (groupings)  -- enforcement of the logical groupings of your program.
packages/documentation/copy/en/project-config/Project References.md:78:4      - Unknown word (separating) -- By separating into multiple projects
packages/documentation/copy/en/project-config/Project References.md:78:67     - Unknown word (speed)      -- greatly improve the speed of typechecking and
packages/documentation/copy/en/project-config/Project References.md:84:1      - Unknown word (Enabling)   -- Enabling the [`composite`](/tsconfig
packages/documentation/copy/en/project-config/Project References.md:87:162    - Unknown word (violated)   -- If this constraint is violated, `tsc` will inform you
packages/documentation/copy/en/project-config/Project References.md:93:137    - Unknown word (transparently) -- Definition" and Rename to transparently navigate and edit code
packages/documentation/copy/en/project-config/Project References.md:99:174    - Unknown word (cloning)       -- build a project after cloning it before you can navigate
packages/documentation/copy/en/project-config/Project References.md:99:249    - Unknown word (spurious)      -- editor without seeing spurious errors.
packages/documentation/copy/en/project-config/tsconfig.json.md:20:143    - Unknown word (continuing) -- current directory and continuing up the parent directory
packages/documentation/copy/en/project-config/tsconfig.json.md:44:8      - Unknown word (scanner)    -- "scanner.ts",
packages/documentation/copy/en/project-config/tsconfig.json.md:47:8      - Unknown word (binder)     -- "binder.ts",
packages/documentation/copy/en/project-config/tsconfig.json.md:75:13     - Unknown word (Bases)      -- ## TSConfig Bases
packages/documentation/copy/en/project-config/tsconfig.json.md:77:163    - Unknown word (bases)      -- github.com/tsconfig/bases](https://github.com
packages/documentation/copy/en/project-config/tsconfig.json.md:78:71     - Unknown word (simplifies) -- project extends from which simplifies your `tsconfig.json
packages/documentation/copy/en/project-config/tsconfig.json.md:95:166    - Unknown word (hoping)     -- bases already, and we're hoping the community can add
packages/documentation/copy/en/project-config/tsconfig.json.md:95:52     - Unknown word (choices)    -- focus on the unique choices for your project, and
packages/documentation/copy/en/reference/Advanced Types.md:1013:1    - Unknown word (Furthermore)     -- Furthermore, references to `T` within
packages/documentation/copy/en/reference/Advanced Types.md:1087:3    - Unknown word (subparts)        -- subparts: Part[];
packages/documentation/copy/en/reference/Advanced Types.md:1101:33   - Unknown word (permitted)       -- conditional types are not permitted to reference themselves
packages/documentation/copy/en/reference/Advanced Types.md:1113:1    - Unknown word (Such)            -- Such inferred type variables
packages/documentation/copy/en/reference/Advanced Types.md:1126:6    - Unknown word (Unpacked)        -- type Unpacked<T> = T extends (infer
packages/documentation/copy/en/reference/Advanced Types.md:1148:23   - Unknown word (demonstrates)    -- The following example demonstrates how multiple candidates
packages/documentation/copy/en/reference/Advanced Types.md:1148:49   - Unknown word (candidates)      -- demonstrates how multiple candidates for the same type variable
packages/documentation/copy/en/reference/Advanced Types.md:1159:61   - Unknown word (contra)          -- same type variable in contra-variant positions causes
packages/documentation/copy/en/reference/Advanced Types.md:1188:6    - Unknown word (Returned)        -- type ReturnedType<T extends (...args
packages/documentation/copy/en/reference/Advanced Types.md:1191:38   - Unknown word (obtained)        -- the same effect can be obtained by erasing the type
packages/documentation/copy/en/reference/Advanced Types.md:1201:4    - Unknown word (Predefined)      -- ## Predefined conditional types
packages/documentation/copy/en/reference/Advanced Types.md:187:90    - Unknown word (pain)         -- primitive is kind of a pain.
packages/documentation/copy/en/reference/Advanced Types.md:188:1     - Unknown word (Luckily)      -- Luckily, you don't need to abstract
packages/documentation/copy/en/reference/Advanced Types.md:203:169   - Unknown word (operator's)   -- be one of [`typeof` operator's return values](https
packages/documentation/copy/en/reference/Advanced Types.md:211:21    - Unknown word (borrow)       -- For instance, let's borrow our industrial strength
packages/documentation/copy/en/reference/Advanced Types.md:211:43    - Unknown word (strength)     -- borrow our industrial strength string-padder example
packages/documentation/copy/en/reference/Advanced Types.md:215:6     - Unknown word (Padding)      -- getPaddingString(): string;
packages/documentation/copy/en/reference/Advanced Types.md:218:12    - Unknown word (Repeating)    -- class SpaceRepeatingPadder implements Padder
packages/documentation/copy/en/reference/Advanced Types.md:219:26    - Unknown word (Spaces)       -- constructor(private numSpaces: number) {}
packages/documentation/copy/en/reference/Advanced Types.md:266:25    - Unknown word (Tony)         -- inventor of `null`, Tony Hoare, calls this his
packages/documentation/copy/en/reference/Advanced Types.md:266:5     - Unknown word (inventor)     -- The inventor of `null`, Tony Hoare
packages/documentation/copy/en/reference/Advanced Types.md:285:56    - Unknown word (chaining)     -- you can use [optional chaining](/docs/handbook/release
packages/documentation/copy/en/reference/Advanced Types.md:338:12    - Unknown word (elimination)  -- The `null` elimination is pretty obvious here
packages/documentation/copy/en/reference/Advanced Types.md:384:1     - Unknown word (Aliasing)     -- Aliasing doesn't actually create
packages/documentation/copy/en/reference/Advanced Types.md:385:29    - Unknown word (terribly)     -- Aliasing a primitive is not terribly useful, though it can
packages/documentation/copy/en/reference/Advanced Types.md:38:10     - Unknown word (idiom)      -- A common idiom in JavaScript to differentiat
packages/documentation/copy/en/reference/Advanced Types.md:39:83     - Unknown word (constituents) -- guaranteed to be in all the constituents of a union type.
packages/documentation/copy/en/reference/Advanced Types.md:406:21    - Unknown word (Drivers)      -- declare function getDriversLicenseQueue(): LinkedList
packages/documentation/copy/en/reference/Advanced Types.md:504:204   - Unknown word (interchangeably) -- and "literal types" interchangeably.
packages/documentation/copy/en/reference/Advanced Types.md:504:38    - Unknown word (singleton)    -- when we talk about "singleton types", we're referring
packages/documentation/copy/en/reference/Advanced Types.md:506:4     - Unknown word (Polymorphic)     -- ## Polymorphic `this` types
packages/documentation/copy/en/reference/Advanced Types.md:509:20    - Unknown word (bounded)         -- This is called _F_-bounded polymorphism, a lot
packages/documentation/copy/en/reference/Advanced Types.md:509:28    - Unknown word (polymorphism)    -- is called _F_-bounded polymorphism, a lot of people know
packages/documentation/copy/en/reference/Advanced Types.md:509:74    - Unknown word (fluent)          -- people know it as the [fluent API](https://en.wikipedia
packages/documentation/copy/en/reference/Advanced Types.md:510:12    - Unknown word (hierarchical)    -- This makes hierarchical fluent interfaces much
packages/documentation/copy/en/reference/Advanced Types.md:511:1     - Unknown word (Take)            -- Take a simple calculator
packages/documentation/copy/en/reference/Advanced Types.md:511:15    - Unknown word (calculator)      -- Take a simple calculator that returns `this`
packages/documentation/copy/en/reference/Advanced Types.md:514:12    - Unknown word (Calculator)      -- class BasicCalculator {
packages/documentation/copy/en/reference/Advanced Types.md:519:14    - Unknown word (operand)         -- public add(operand: number): this {
packages/documentation/copy/en/reference/Advanced Types.md:576:10    - Unknown word (pluck)           -- function pluck(o, propertyNames) {
packages/documentation/copy/en/reference/Advanced Types.md:589:3     - Unknown word (manufacturer)    -- manufacturer: string;
packages/documentation/copy/en/reference/Advanced Types.md:594:5     - Unknown word (taxi)            -- let taxi: Car = {
packages/documentation/copy/en/reference/Advanced Types.md:596:11    - Unknown word (Camry)           -- model: "Camry",
packages/documentation/copy/en/reference/Advanced Types.md:600:4     - Unknown word (Manufacturer)    -- // Manufacturer and model are both of
packages/documentation/copy/en/reference/Advanced Types.md:606:10    - Unknown word (Year)            -- let modelYear = pluck(taxi, ["model
packages/documentation/copy/en/reference/Advanced Types.md:626:27    - Unknown word (interchangeable) -- keyof Car` is completely interchangeable with `"manufacturer
packages/documentation/copy/en/reference/Advanced Types.md:627:67    - Unknown word (owners)          -- property to `Car`, say `ownersAddress: string`, then
packages/documentation/copy/en/reference/Advanced Types.md:67:5      - Unknown word (fish)         -- let fishPet = pet as Fish;
packages/documentation/copy/en/reference/Advanced Types.md:68:5      - Unknown word (bird)         -- let birdPet = pet as Bird;
packages/documentation/copy/en/reference/Advanced Types.md:733:6     - Unknown word (Partial)         -- type Partial<T> = {
packages/documentation/copy/en/reference/Advanced Types.md:768:6     - Unknown word (Wrong)           -- type WrongPartialWithNewMember
packages/documentation/copy/en/reference/Advanced Types.md:781:12    - Unknown word (resembles)       -- The syntax resembles the syntax for index
packages/documentation/copy/en/reference/Advanced Types.md:788:42    - Unknown word (coded)           -- example, `Keys` is a hard-coded list of property names
packages/documentation/copy/en/reference/Advanced Types.md:840:15    - Unknown word (proxies)         -- // ... wrap proxies ...
packages/documentation/copy/en/reference/Advanced Types.md:861:5     - Unknown word (clue)            -- One clue that `Record` is not
packages/documentation/copy/en/reference/Advanced Types.md:869:102   - Unknown word (otherwords)      -- index to an object. In otherwords, `keyof any` is currently
packages/documentation/copy/en/reference/Advanced Types.md:873:93    - Unknown word (unwrap)          -- you'll want to do is unwrap them.
packages/documentation/copy/en/reference/Advanced Types.md:905:16    - Unknown word (unwrapping)      -- Note that this unwrapping inference only works
packages/documentation/copy/en/reference/Advanced Types.md:910:20    - Unknown word (selects)         -- A conditional type selects one of two possible
packages/documentation/copy/en/reference/Advanced Types.md:910:75    - Unknown word (expressed)       -- based on a condition expressed as a type relationship
packages/documentation/copy/en/reference/Advanced Types.md:918:82    - Unknown word (deferred)        -- to `X` or `Y`, or _deferred_ because the condition
packages/documentation/copy/en/reference/Advanced Types.md:919:163   - Unknown word (conclude)        -- enough information to conclude that `T` is always assignable
packages/documentation/copy/en/reference/Advanced Types.md:919:82    - Unknown word (defer)           -- to `X` or `Y`, or to defer, is determined by whether
packages/documentation/copy/en/reference/Advanced Types.md:958:80    - Unknown word (stick)           -- deferred - where they stick around instead of picking
packages/documentation/copy/en/reference/Advanced Types.md:980:8     - Unknown word (meantime)        -- In the meantime, we can assign a conditional
packages/documentation/copy/en/reference/Advanced Types.md:981:140   - Unknown word (evaluates)       -- what the conditional evaluates to, it's known to be
packages/documentation/copy/en/reference/Advanced Types.md:985:50    - Unknown word (naked)           -- the checked type is a naked type parameter are called
packages/documentation/copy/en/reference/Advanced Types.md:986:50    - Unknown word (distributed)     -- types are automatically distributed over union types during
packages/documentation/copy/en/reference/Declaration Merging.md:130:118   - Unknown word (forming)      -- are themselves merged, forming a single namespace with
packages/documentation/copy/en/reference/Declaration Merging.md:142:20    - Unknown word (Legged)       -- export interface Legged {
packages/documentation/copy/en/reference/Declaration Merging.md:14:19     - Unknown word (door)       -- It also opens the door to more advanced abstraction
packages/documentation/copy/en/reference/Declaration Merging.md:169:11    - Unknown word (Muscles)      -- let haveMuscles = true;
packages/documentation/copy/en/reference/Declaration Merging.md:171:19    - Unknown word (animals)      -- export function animalsHaveMuscles() {
packages/documentation/copy/en/reference/Declaration Merging.md:190:22    - Unknown word (capability)   -- TypeScript uses this capability to model some of the
packages/documentation/copy/en/reference/Declaration Merging.md:197:7     - Unknown word (Album)        -- class Album {
packages/documentation/copy/en/reference/Declaration Merging.md:249:15    - Unknown word (Merges)       -- ## Disallowed Merges
packages/documentation/copy/en/reference/Declaration Merging.md:249:4     - Unknown word (Disallowed)   -- ## Disallowed Merges
packages/documentation/copy/en/reference/Declaration Merging.md:255:11    - Unknown word (Augmentation) -- ## Module Augmentation
packages/documentation/copy/en/reference/Declaration Merging.md:257:106   - Unknown word (updating)     -- by importing and then updating them.
packages/documentation/copy/en/reference/Declaration Merging.md:263:36    - Unknown word (exercise)     -- implementation left as an exercise for the reader ...
packages/documentation/copy/en/reference/Declaration Merging.md:2:20      - Unknown word (Merging)    -- title: Declaration Merging
packages/documentation/copy/en/reference/Declaration Merging.md:307:35    - Unknown word (augmented)    -- exports also cannot be augmented, only named exports
packages/documentation/copy/en/reference/Declaration Merging.md:42:36     - Unknown word (mechanically) -- basic level, the merge mechanically joins the members of
packages/documentation/copy/en/reference/Declaration Merging.md:42:49     - Unknown word (joins)        -- the merge mechanically joins the members of both
packages/documentation/copy/en/reference/Declaration Merging.md:72:17     - Unknown word (Sheep)        -- clone(animal: Sheep): Sheep;
packages/documentation/copy/en/reference/Declaration Merging.md:92:40     - Unknown word (maintains)    -- elements of each group maintains the same order, but
packages/documentation/copy/en/reference/Declaration Merging.md:95:132    - Unknown word (bubbled)      -- literals), then it will be bubbled toward the top of its
packages/documentation/copy/en/reference/Decorators.md:165:10    - Unknown word (seal)        -- Object.seal(constructor);
packages/documentation/copy/en/reference/Decorators.md:189:332   - Unknown word (sugar)       -- really just syntactic sugar to prototype-based constructo
packages/documentation/copy/en/reference/Decorators.md:189:434   - Unknown word (classing)    -- prevent classes from sub-classing `BugReport`.
packages/documentation/copy/en/reference/Decorators.md:197:10    - Unknown word (reportable)  -- function reportableClassDecorator<T extends
packages/documentation/copy/en/reference/Decorators.md:213:28    - Unknown word (Needs)       -- bug = new BugReport("Needs dark mode");
packages/documentation/copy/en/reference/Decorators.md:241:54    - Unknown word (enumerable)  -- method decorator (`@enumerable`) applied to a method
packages/documentation/copy/en/reference/Decorators.md:285:25    - Unknown word (disallows)   -- NOTE&emsp; TypeScript disallows decorating both the
packages/documentation/copy/en/reference/Decorators.md:285:35    - Unknown word (decorating)  -- TypeScript disallows decorating both the `get` and
packages/documentation/copy/en/reference/Decorators.md:386:10    - Unknown word (Reflect)     -- return Reflect.metadata(formatMetadataKey
packages/documentation/copy/en/reference/Decorators.md:411:8     - Unknown word (ordinal)     -- 3. The ordinal index of the parameter
packages/documentation/copy/en/reference/Decorators.md:476:54    - Unknown word (marks)       -- metadata entry that marks the parameter as required
packages/documentation/copy/en/reference/Decorators.md:486:109   - Unknown word (proposed)    -- these extensions will be proposed for adoption.
packages/documentation/copy/en/reference/Decorators.md:486:122   - Unknown word (adoption)    -- will be proposed for adoption.
packages/documentation/copy/en/reference/Decorators.md:486:30    - Unknown word (officially)  -- once decorators are officially adopted as part of the
packages/documentation/copy/en/reference/Decorators.md:52:14     - Unknown word (Factories)  -- ## Decorator Factories
packages/documentation/copy/en/reference/Decorators.md:54:15     - Unknown word (customize)  -- If we want to customize how a decorator is applied
packages/documentation/copy/en/reference/Decorators.md:573:4     - Unknown word (Fails)       -- // Fails at runtime with:
packages/documentation/copy/en/reference/Decorators.md:57:51     - Unknown word (fashion)    -- factory in the following fashion:
packages/documentation/copy/en/reference/Decorators.md:70:14     - Unknown word (Composition) -- ## Decorator Composition
packages/documentation/copy/en/reference/Decorators.md:96:113    - Unknown word (mathematics) -- function composition in mathematics](https://wikipedia.org
packages/documentation/copy/en/reference/Decorators.md:96:196    - Unknown word (composing)   -- In this model, when composing functions _f_ and _g
packages/documentation/copy/en/reference/Decorators.md:98:49     - Unknown word (evaluating)  -- steps are performed when evaluating multiple decorators
packages/documentation/copy/en/reference/Decorators.md:9:97      - Unknown word (decorator)  -- implementation. Stage 3 decorator support is available
packages/documentation/copy/en/reference/Enums.md:104:102   - Unknown word (advised)       -- in a clever way, it's advised that you don't do this
packages/documentation/copy/en/reference/Enums.md:104:85    - Unknown word (clever)        -- runtime behavior in a clever way, it's advised that
packages/documentation/copy/en/reference/Enums.md:144:72    - Unknown word (originate)     -- enum member (which can originate from a different enum
packages/documentation/copy/en/reference/Enums.md:146:31    - Unknown word (unary)         -- of the `+`, `-`, `~` unary operators applied to
packages/documentation/copy/en/reference/Enums.md:167:64    - Unknown word (calculated)    -- members that aren't calculated: literal enum members
packages/documentation/copy/en/reference/Enums.md:262:3     - Unknown word (WARN)          -- WARN,
packages/documentation/copy/en/reference/Enums.md:273:15    - Unknown word (Important)     -- function printImportant(key: LogLevelStrings
packages/documentation/copy/en/reference/Enums.md:284:5     - Unknown word (Reverse)       -- ### Reverse mappings
packages/documentation/copy/en/reference/Enums.md:30:39     - Unknown word (incremented) -- following members are auto-incremented from that point on.
packages/documentation/copy/en/reference/Enums.md:318:36    - Unknown word (tighter)       -- sometimes requirements are tighter.
packages/documentation/copy/en/reference/Enums.md:319:10    - Unknown word (paying)        -- To avoid paying the cost of extra generated
packages/documentation/copy/en/reference/Enums.md:319:65    - Unknown word (indirection)   -- code and additional indirection when accessing enum
packages/documentation/copy/en/reference/Enums.md:330:39    - Unknown word (sites)         -- members are inlined at use sites.
packages/documentation/copy/en/reference/Enums.md:371:16    - Unknown word (pertain)       -- These pitfalls pertain to _ambient_ const enums
packages/documentation/copy/en/reference/Enums.md:373:20    - Unknown word (laid)          -- 1. For the reasons laid out in the [`isolatedModules
packages/documentation/copy/en/reference/Enums.md:377:174   - Unknown word (misses)        -- dependency versions, which misses these bugs completely
packages/documentation/copy/en/reference/Enums.md:377:30    - Unknown word (pernicious)    -- bugs are especially pernicious because it is common
packages/documentation/copy/en/reference/Enums.md:380:21    - Unknown word (unambiguously) -- The usual way to unambiguously elide imports, [type
packages/documentation/copy/en/reference/Enums.md:386:19    - Unknown word (avoids)        -- Obviously this avoids any issues with const
packages/documentation/copy/en/reference/Enums.md:386:4     - Unknown word (Obviously)     -- Obviously this avoids any issues
packages/documentation/copy/en/reference/Enums.md:387:85    - Unknown word (problematic)   -- project's own enums is not problematic and has performance
packages/documentation/copy/en/reference/Enums.md:388:43    - Unknown word (deconstifying) -- ambient const enums, by deconstifying them with the help of
packages/documentation/copy/en/reference/Enums.md:393:157   - Unknown word (banning)       -- its own enums, unlike banning const enums entirely
packages/documentation/copy/en/reference/Enums.md:412:85    - Unknown word (suffice)       -- with `as const` could suffice:
packages/documentation/copy/en/reference/Enums.md:446:103   - Unknown word (aligned)       -- keeps your codebase aligned with the state of JavaScript
packages/documentation/copy/en/reference/Enums.md:446:25    - Unknown word (favour)        -- biggest argument in favour of this format over
packages/documentation/copy/en/reference/Enums.md:446:83    - Unknown word (keeps)         -- s `enum` is that it keeps your codebase aligned
packages/documentation/copy/en/reference/Enums.md:55:18     - Unknown word (recipient)   -- function respond(recipient: string, message: UserRespons
packages/documentation/copy/en/reference/Enums.md:59:10     - Unknown word (Princess)    -- respond("Princess Caroline", UserResponse
packages/documentation/copy/en/reference/Enums.md:59:19     - Unknown word (Caroline)    -- respond("Princess Caroline", UserResponse.Yes)
packages/documentation/copy/en/reference/Enums.md:91:111    - Unknown word (opaque)      -- the value is often opaque - it doesn't convey
packages/documentation/copy/en/reference/Enums.md:91:131    - Unknown word (convey)      -- opaque - it doesn't convey any useful meaning on
packages/documentation/copy/en/reference/Enums.md:93:4      - Unknown word (Heterogeneous) -- ## Heterogeneous enums
packages/documentation/copy/en/reference/Enums.md:95:1      - Unknown word (Technically)   -- Technically enums can be mixed with
packages/documentation/copy/en/reference/Iterators and Generators.md:28:28     - Unknown word (loop)       -- is a simple `for..of` loop on an array:
packages/documentation/copy/en/reference/Iterators and Generators.md:2:22      - Unknown word (Generators) -- title: Iterators and Generators
packages/documentation/copy/en/reference/Iterators and Generators.md:4:41      - Unknown word (generators) -- handbook/iterators-and-generators.html
packages/documentation/copy/en/reference/Iterators and Generators.md:56:85     - Unknown word (inspect)    -- it serves as a way to inspect properties on this object
packages/documentation/copy/en/reference/Iterators and Generators.md:57:176    - Unknown word (stored)     -- property allowing access to stored values.
packages/documentation/copy/en/reference/Iterators and Generators.md:60:36     - Unknown word (Hamster)    -- Set(["Cat", "Dog", "Hamster"]);
packages/documentation/copy/en/reference/Iterators and Generators.md:60:5      - Unknown word (pets)       -- let pets = new Set(["Cat", "Dog
packages/documentation/copy/en/reference/Iterators and Generators.md:61:20     - Unknown word (mammals)    -- pets["species"] = "mammals";
packages/documentation/copy/en/reference/Iterators and Generators.md:61:7      - Unknown word (species)    -- pets["species"] = "mammals";
packages/documentation/copy/en/reference/Iterators and Generators.md:74:6      - Unknown word (Targeting)  -- #### Targeting ES5
packages/documentation/copy/en/reference/JSX.md:11:13     - Unknown word (popularity) -- JSX rose to popularity with the [React](https
packages/documentation/copy/en/reference/JSX.md:127:121   - Unknown word (jsxs)           -- runtime needs the `jsx`, `jsxs`, and `Fragment` exports
packages/documentation/copy/en/reference/JSX.md:12:21     - Unknown word (embedding)  -- TypeScript supports embedding, type checking, and
packages/documentation/copy/en/reference/JSX.md:177:233   - Unknown word (finishes)          -- process succeeds, then TS finishes resolving the expression
packages/documentation/copy/en/reference/JSX.md:177:53    - Unknown word (indistinguishable) -- value-based elements are indistinguishable from each other in a
packages/documentation/copy/en/reference/JSX.md:181:13    - Unknown word (suggests)          -- As the name suggests, the component is defined
packages/documentation/copy/en/reference/JSX.md:212:11    - Unknown word (Clickable)         -- interface ClickableProps {
packages/documentation/copy/en/reference/JSX.md:231:140   - Unknown word (stateless)         -- longer be considered stateless in recent versions of
packages/documentation/copy/en/reference/JSX.md:231:52    - Unknown word (Stateless)         -- were formerly known as Stateless Function Components
packages/documentation/copy/en/reference/JSX.md:239:113   - Unknown word (statics)           -- class's constructor and statics.
packages/documentation/copy/en/reference/JSX.md:361:219   - Unknown word (Specializing)      -- instance `key` in React. Specializing further, the generic
packages/documentation/copy/en/reference/JSX.md:361:447   - Unknown word (corresponds)       -- the generic parameter corresponds to the class instance
packages/documentation/copy/en/reference/JSX.md:375:173   - Unknown word (inserted)          -- XExpression*s are taken to be inserted into the attributes
packages/documentation/copy/en/reference/JSX.md:449:114   - Unknown word (behaviour)         -- always represent runtime behaviour. As of TypeScript 5
packages/documentation/copy/en/reference/JSX.md:466:4     - Unknown word (Embedding)         -- ## Embedding Expressions
packages/documentation/copy/en/reference/JSX.md:468:86    - Unknown word (curly)             -- the expressions with curly braces (`{ }`).
packages/documentation/copy/en/reference/JSX.md:47:6      - Unknown word (asserts)    -- This asserts the variable `bar` to
packages/documentation/copy/en/reference/JSX.md:48:127    - Unknown word (difficulties) -- introduce certain parsing difficulties. As a result, TypeScript
packages/documentation/copy/en/reference/JSX.md:50:59     - Unknown word (alternate)    -- in `.tsx` files, an alternate type assertion operator
packages/documentation/copy/en/reference/JSX.md:67:50     - Unknown word (intrinsically) -- attributes should be known _intrinsically_ whereas components
packages/documentation/copy/en/reference/JSX.md:69:146    - Unknown word (distinguishing) -- react-components) for distinguishing between these.
packages/documentation/copy/en/reference/JSX.md:70:29     - Unknown word (begins)         -- intrinsic element always begins with a lowercase letter
packages/documentation/copy/en/reference/JSX.md:76:148    - Unknown word (that’s)         -- needs to be in scope that’s determined by the `jsxFactory
packages/documentation/copy/en/reference/Mixins.md:10:48     - Unknown word (traits)      -- the idea of mixins or traits for languages like Scala
packages/documentation/copy/en/reference/Mixins.md:127:6     - Unknown word (Positionable) -- type Positionable = GConstructor<{ setPos
packages/documentation/copy/en/reference/Mixins.md:150:10    - Unknown word (Jumpable)     -- function Jumpable<TBase extends Positionable
packages/documentation/copy/en/reference/Mixins.md:162:4     - Unknown word (Alternative)  -- ## Alternative Pattern
packages/documentation/copy/en/reference/Mixins.md:164:1     - Unknown word (Previous)     -- Previous versions of this document
packages/documentation/copy/en/reference/Mixins.md:214:45    - Unknown word (edges)        -- where you can hit the edges of the native support
packages/documentation/copy/en/reference/Mixins.md:21:7      - Unknown word (Sprite)      -- class Sprite {
packages/documentation/copy/en/reference/Mixins.md:226:11    - Unknown word (Freeze)       -- shouldFreeze = false;
packages/documentation/copy/en/reference/Mixins.md:236:39    - Unknown word (decorator's)  -- class does not have the decorator's type merged:
packages/documentation/copy/en/reference/Mixins.md:240:41    - Unknown word (replicated)   -- aspect could be manually replicated via
packages/documentation/copy/en/reference/Mixins.md:242:6     - Unknown word (Freezable)    -- type FreezablePlayer = Player & { shouldFree
packages/documentation/copy/en/reference/Mixins.md:250:11    - Unknown word (gotcha)       -- More of a gotcha than a constraint.
packages/documentation/copy/en/reference/Mixins.md:42:28     - Unknown word (encapsulated) -- changing it with an encapsulated private property:
packages/documentation/copy/en/reference/Mixins.md:91:25     - Unknown word (applier)      -- with the Mixin Scale applier:
packages/documentation/copy/en/reference/Mixins.md:92:7      - Unknown word (Eight)        -- const EightBitSprite = Scale(Sprite
packages/documentation/copy/en/reference/Mixins.md:94:7      - Unknown word (flappy)       -- const flappySprite = new EightBitSprite
packages/documentation/copy/en/reference/Mixins.md:9:1       - Unknown word (Along)      -- Along with traditional OO
packages/documentation/copy/en/reference/Mixins.md:9:27      - Unknown word (hierarchies) -- with traditional OO hierarchies, another popular way
packages/documentation/copy/en/reference/Namespaces and Modules.md:101:125   - Unknown word (grouping)     -- is to provide logical grouping of constructs and to
packages/documentation/copy/en/reference/Namespaces and Modules.md:101:168   - Unknown word (collisions)   -- and to prevent name collisions.
packages/documentation/copy/en/reference/Namespaces and Modules.md:104:10    - Unknown word (revised)      -- Here's a revised example:
packages/documentation/copy/en/reference/Namespaces and Modules.md:127:49    - Unknown word (concatenate)  -- it's not possible to concatenate multiple module source
packages/documentation/copy/en/reference/Namespaces and Modules.md:15:68     - Unknown word (Internal)   -- namespaces were called 'Internal Modules', these pre
packages/documentation/copy/en/reference/Namespaces and Modules.md:22:40     - Unknown word (stronger)   -- for better code reuse, stronger isolation and better
packages/documentation/copy/en/reference/Namespaces and Modules.md:34:58     - Unknown word (concatenated) -- multiple files, and can be concatenated using [`outFile`](/tsconfig
packages/documentation/copy/en/reference/Namespaces and Modules.md:37:32     - Unknown word (pollution)    -- all global namespace pollution, it can be hard to identify
packages/documentation/copy/en/reference/Namespaces and Modules.md:39:4      - Unknown word (Pitfalls)     -- ## Pitfalls of Namespaces and Modules
packages/documentation/copy/en/reference/Namespaces and Modules.md:78:20     - Unknown word (Shapes)       -- export namespace Shapes {
packages/documentation/copy/en/reference/Namespaces and Modules.md:99:85     - Unknown word (proactively)  -- there's no need to proactively wrap up the exported
packages/documentation/copy/en/reference/Namespaces.md:10:54     - Unknown word (nomenclature) -- TypeScript 1.5, the nomenclature has changed.
packages/documentation/copy/en/reference/Namespaces.md:117:14    - Unknown word (Across)       -- ## Splitting Across Files
packages/documentation/copy/en/reference/Namespaces.md:117:4     - Unknown word (Splitting)    -- ## Splitting Across Files
packages/documentation/copy/en/reference/Namespaces.md:121:4     - Unknown word (Multi)        -- ## Multi-file namespaces
packages/documentation/copy/en/reference/Namespaces.md:12:149    - Unknown word (namely)       -- 0/)'s terminology, (namely that `module X {` is
packages/documentation/copy/en/reference/Namespaces.md:15:7      - Unknown word (alluded)      -- As we alluded in our note about terminology
packages/documentation/copy/en/reference/Namespaces.md:17:36     - Unknown word (overloading)  -- confusing new users by overloading them with similarly
packages/documentation/copy/en/reference/Namespaces.md:211:24    - Unknown word (excerpt)      -- ## MyTestPage.html (excerpt)
packages/documentation/copy/en/reference/Namespaces.md:223:11    - Unknown word (confused)     -- Not to be confused with the `import x
packages/documentation/copy/en/reference/Namespaces.md:228:20    - Unknown word (Polygons)     -- export namespace Polygons {
packages/documentation/copy/en/reference/Namespaces.md:22:118    - Unknown word (webpage)      -- input on a form in a webpage or check the format
packages/documentation/copy/en/reference/Namespaces.md:22:152    - Unknown word (externally)   -- check the format of an externally-provided data file.
packages/documentation/copy/en/reference/Namespaces.md:22:30     - Unknown word (simplistic)   -- written a small set of simplistic string validators, as
packages/documentation/copy/en/reference/Namespaces.md:234:8     - Unknown word (polygons)     -- import polygons = Shapes.Polygons;
packages/documentation/copy/en/reference/Namespaces.md:238:85    - Unknown word (qualified)    -- assign directly from the qualified name of the symbol we
packages/documentation/copy/en/reference/Namespaces.md:240:1     - Unknown word (Importantly)  -- Importantly, for values, `import
packages/documentation/copy/en/reference/Namespaces.md:259:16    - Unknown word (simplified)   -- ##### D3.d.ts (simplified excerpt)
packages/documentation/copy/en/reference/Namespaces.md:28:5      - Unknown word (Acceptable)   -- isAcceptable(s: string): boolean
packages/documentation/copy/en/reference/Namespaces.md:34:7      - Unknown word (Letters)      -- class LettersOnlyValidator implements
packages/documentation/copy/en/reference/Namespaces.md:69:89     - Unknown word (preface)      -- outside the namespace, we preface them with `export`.
packages/documentation/copy/en/reference/Namespaces.md:71:60     - Unknown word (qualify)      -- file, we now need to qualify the names of the types
packages/documentation/copy/en/reference/Symbols.md:100:110   - Unknown word (Called)        -- constructor’s instances. Called by the semantics of
packages/documentation/copy/en/reference/Symbols.md:100:85    - Unknown word (constructor’s) -- object as one of the constructor’s instances. Called by
packages/documentation/copy/en/reference/Symbols.md:102:21    - Unknown word (Spreadable)    -- ### `Symbol.isConcatSpreadable`
packages/documentation/copy/en/reference/Symbols.md:104:53    - Unknown word (flattened)     -- an object should be flattened to its array elements
packages/documentation/copy/en/reference/Symbols.md:116:34    - Unknown word (replaces)      -- expression method that replaces matched substrings of
packages/documentation/copy/en/reference/Symbols.md:124:12    - Unknown word (valued)        -- A function valued property that is the
packages/documentation/copy/en/reference/Symbols.md:128:34    - Unknown word (splits)        -- expression method that splits a string at the indices
packages/documentation/copy/en/reference/Symbols.md:57:11     - Unknown word (treating)   -- To enable treating symbols as unique literals
packages/documentation/copy/en/reference/Symbols.md:57:490    - Unknown word (tied)       -- unique identity that’s tied to a given declaration
packages/documentation/copy/en/reference/Symbols.md:75:113    - Unknown word (comparable) -- types are assignable or comparable to each other.
packages/documentation/copy/en/reference/Triple-Slash Directives.md:121:106   - Unknown word (injected)    -- dependency that needs to be injected in the resulting module
packages/documentation/copy/en/reference/Triple-Slash Directives.md:131:1     - Unknown word (Generated)   -- Generated JS code:
packages/documentation/copy/en/reference/Triple-Slash Directives.md:13:38     - Unknown word (preceded)   -- directive can only be preceded by single or multi-line
packages/documentation/copy/en/reference/Triple-Slash Directives.md:16:96     - Unknown word (handwritten) -- and does _not_ emit handwritten triple-slash directives
packages/documentation/copy/en/reference/Triple-Slash Directives.md:23:25     - Unknown word (instruct)    -- Triple-slash references instruct the compiler to include
packages/documentation/copy/en/reference/Triple-Slash Directives.md:2:8       - Unknown word (Triple)     -- title: Triple-Slash Directives
packages/documentation/copy/en/reference/Triple-Slash Directives.md:37:55     - Unknown word (manner)      -- resolved in a depth-first manner, in the order they have
packages/documentation/copy/en/reference/Triple-Slash Directives.md:4:27      - Unknown word (triple)     -- permalink: /docs/handbook/triple-slash-directives.html
packages/documentation/copy/en/reference/Triple-Slash Directives.md:69:241    - Unknown word (duplicate)   -- files had to add forward/duplicate declarations of such
packages/documentation/copy/en/reference/Triple-Slash Directives.md:84:16     - Unknown word (instructs)   -- This directive instructs the compiler to _not
packages/documentation/copy/en/reference/Type Compatibility.md:101:125   - Unknown word (disallowed)  -- so the assignment is disallowed.
packages/documentation/copy/en/reference/Type Compatibility.md:103:12    - Unknown word (wondering)   -- You may be wondering why we allow 'discarding
packages/documentation/copy/en/reference/Type Compatibility.md:103:36    - Unknown word (discarding)  -- wondering why we allow 'discarding' parameters like in
packages/documentation/copy/en/reference/Type Compatibility.md:106:1     - Unknown word (Nevertheless) -- Nevertheless, it's very useful to
packages/documentation/copy/en/reference/Type Compatibility.md:10:52     - Unknown word (solely)     -- relating types based solely on their members.
packages/documentation/copy/en/reference/Type Compatibility.md:132:143   - Unknown word (vice)         -- target parameter, or vice versa.
packages/documentation/copy/en/reference/Type Compatibility.md:132:148   - Unknown word (versa)        -- target parameter, or vice versa.
packages/documentation/copy/en/reference/Type Compatibility.md:133:110   - Unknown word (invokes)      -- specialized type, but invokes the function with a
packages/documentation/copy/en/reference/Type Compatibility.md:139:3     - Unknown word (Keyboard)     -- Keyboard,
packages/documentation/copy/en/reference/Type Compatibility.md:153:44    - Unknown word (handler)      -- eventType: EventType, handler: (n: Event) => void
packages/documentation/copy/en/reference/Type Compatibility.md:157:4     - Unknown word (Unsound)      -- // Unsound, but useful and common
packages/documentation/copy/en/reference/Type Compatibility.md:160:16    - Unknown word (alternatives) -- // Undesirable alternatives in presence of soundness
packages/documentation/copy/en/reference/Type Compatibility.md:160:4     - Unknown word (Undesirable)  -- // Undesirable alternatives in presence
packages/documentation/copy/en/reference/Type Compatibility.md:160:44    - Unknown word (soundness)    -- alternatives in presence of soundness
packages/documentation/copy/en/reference/Type Compatibility.md:167:4     - Unknown word (Still)        -- // Still disallowed (clear error
packages/documentation/copy/en/reference/Type Compatibility.md:167:61    - Unknown word (wholly)       -- safety enforced for wholly incompatible types
packages/documentation/copy/en/reference/Type Compatibility.md:180:36    - Unknown word (perspective)  -- unsound from a type system perspective, but from a runtime
packages/documentation/copy/en/reference/Type Compatibility.md:182:107   - Unknown word (predictable)  -- invokes it with some predictable (to the programmer)
packages/documentation/copy/en/reference/Type Compatibility.md:192:4     - Unknown word (Confusing)    -- // Confusing (x and y are actually
packages/documentation/copy/en/reference/Type Compatibility.md:192:50    - Unknown word (undiscoverable) -- actually required) and undiscoverable
packages/documentation/copy/en/reference/Type Compatibility.md:207:3     - Unknown word (Ready)          -- Ready,
packages/documentation/copy/en/reference/Type Compatibility.md:208:3     - Unknown word (Waiting)        -- Waiting,
packages/documentation/copy/en/reference/Type Compatibility.md:228:3     - Unknown word (feet)           -- feet: number;
packages/documentation/copy/en/reference/Type Compatibility.md:229:32    - Unknown word (Feet)           -- constructor(name: string, numFeet: number) {}
packages/documentation/copy/en/reference/Type Compatibility.md:28:157    - Unknown word (implementer) -- describe itself as being an implementer of the `Pet` interface
packages/documentation/copy/en/reference/Type Compatibility.md:28:4      - Unknown word (nominally)  -- In nominally-typed languages like
packages/documentation/copy/en/reference/Type Compatibility.md:304:47    - Unknown word (dictated)       -- type compatibility is dictated by assignment compatibility
packages/documentation/copy/en/reference/Type Compatibility.md:308:21    - Unknown word (summarizes)     -- The following table summarizes assignability between
packages/documentation/copy/en/reference/Type Compatibility.md:309:1     - Unknown word (Rows)           -- Rows indicate what each is
packages/documentation/copy/en/reference/Type Compatibility.md:309:43    - Unknown word (columns)        -- each is assignable to, columns indicate what is assignable
packages/documentation/copy/en/reference/Type Compatibility.md:312:18    - Unknown word (rendered)       -- <!-- This is the rendered form of https://github
packages/documentation/copy/en/reference/Type Compatibility.md:33:14     - Unknown word (Soundness)   -- ## A Note on Soundness
packages/documentation/copy/en/reference/Type Compatibility.md:35:203    - Unknown word (unsound)     -- where TypeScript allows unsound behavior were carefully
packages/documentation/copy/en/reference/Type Compatibility.md:35:317    - Unknown word (motivating)  -- these happen and the motivating scenarios behind them
packages/documentation/copy/en/reference/Type Compatibility.md:402:1     - Unknown word (Reiterating)    -- Reiterating [The Basics](/docs/handbook
packages/documentation/copy/en/reference/Type Compatibility.md:404:3     - Unknown word (Everything)     -- - Everything is assignable to itself
packages/documentation/copy/en/reference/Type Compatibility.md:406:34    - Unknown word (inverses)       -- and `never` are like inverses of each other.
packages/documentation/copy/en/reference/Type Compatibility.md:408:3     - Unknown word (Nothing)        -- Nothing is assignable to `never
packages/documentation/copy/en/reference/Type Compatibility.md:409:68    - Unknown word (exceptions)     -- with the following exceptions: `any`, `unknown`,
packages/documentation/copy/en/reference/Type Compatibility.md:48:20     - Unknown word (Lassie)      -- let dog = { name: "Lassie", owner: "Rudd Weatherwax
packages/documentation/copy/en/reference/Type Compatibility.md:48:37     - Unknown word (Rudd)        -- name: "Lassie", owner: "Rudd Weatherwax" };
packages/documentation/copy/en/reference/Type Compatibility.md:48:42     - Unknown word (Weatherwax)  -- Lassie", owner: "Rudd Weatherwax" };
packages/documentation/copy/en/reference/Type Compatibility.md:73:1      - Unknown word (exploring)   -- exploring the type of each member
packages/documentation/copy/en/reference/Type Compatibility.md:85:53     - Unknown word (relatively)  -- and object types is relatively straightforward, the
packages/documentation/copy/en/reference/Type Inference.md:17:41     - Unknown word (initializing) -- inference takes place when initializing variables and members
packages/documentation/copy/en/reference/Type Inference.md:20:54     - Unknown word (nuances)      -- explore some of the nuances in how types are inferred
packages/documentation/copy/en/reference/Type Inference.md:41:6      - Unknown word (Horn)         -- hasHorn: true;
packages/documentation/copy/en/reference/Type Inference.md:43:7      - Unknown word (Elephant)     -- class Elephant extends Animal {
packages/documentation/copy/en/reference/Type Inference.md:44:6      - Unknown word (Trunk)        -- hasTrunk: true;
packages/documentation/copy/en/reference/Type Inference.md:85:26     - Unknown word (kangaroo)     -- console.log(mouseEvent.kangaroo);
packages/documentation/copy/en/reference/Type Inference.md:95:4      - Unknown word (Declares)     -- // Declares there is a global variable
packages/documentation/copy/en/reference/Type Inference.md:99:37     - Unknown word (Handlers)     -- Window extends GlobalEventHandlers {
packages/documentation/copy/en/reference/Utility Types.md:104:125   - Unknown word (reassigned) -- constructed type cannot be reassigned.
packages/documentation/copy/en/reference/Utility Types.md:115:18    - Unknown word (inactive)   -- title: "Delete inactive users",
packages/documentation/copy/en/reference/Utility Types.md:11:5      - Unknown word (Awaited)    -- ## `Awaited<Type>`
packages/documentation/copy/en/reference/Utility Types.md:121:101   - Unknown word (attempting) -- at runtime (i.e. when attempting to reassign properties
packages/documentation/copy/en/reference/Utility Types.md:121:115   - Unknown word (reassign)   -- when attempting to reassign properties of a [frozen
packages/documentation/copy/en/reference/Utility Types.md:123:15    - Unknown word (freeze)     -- ##### `Object.freeze`
packages/documentation/copy/en/reference/Utility Types.md:143:17    - Unknown word (miffy)      -- type CatName = "miffy" | "boris" | "mordred
packages/documentation/copy/en/reference/Utility Types.md:143:27    - Unknown word (boris)      -- CatName = "miffy" | "boris" | "mordred";
packages/documentation/copy/en/reference/Utility Types.md:143:37    - Unknown word (mordred)    -- miffy" | "boris" | "mordred";
packages/documentation/copy/en/reference/Utility Types.md:151:29    - Unknown word (Persian)    -- { age: 10, breed: "Persian" },
packages/documentation/copy/en/reference/Utility Types.md:152:28    - Unknown word (Maine)      -- boris: { age: 5, breed: "Maine Coon" },
packages/documentation/copy/en/reference/Utility Types.md:152:34    - Unknown word (Coon)       -- age: 5, breed: "Maine Coon" },
packages/documentation/copy/en/reference/Utility Types.md:153:39    - Unknown word (Shorthair)  -- 16, breed: "British Shorthair" },
packages/documentation/copy/en/reference/Utility Types.md:15:1      - Unknown word (Released)   -- Released:
packages/documentation/copy/en/reference/Utility Types.md:183:11    - Unknown word (Clean)      -- title: "Clean room",
packages/documentation/copy/en/reference/Utility Types.md:226:19    - Unknown word (kids)       -- title: "Pick up kids",
packages/documentation/copy/en/reference/Utility Types.md:227:17    - Unknown word (Kindergarten) -- description: "Kindergarten closes at 5pm",
packages/documentation/copy/en/reference/Utility Types.md:227:30    - Unknown word (closes)       -- description: "Kindergarten closes at 5pm",
packages/documentation/copy/en/reference/Utility Types.md:234:24    - Unknown word (Excluded)     -- `Exclude<UnionType, ExcludedMembers>`
packages/documentation/copy/en/reference/Utility Types.md:243:22    - Unknown word (excluding)    -- Constructs a type by excluding from `UnionType` all
packages/documentation/copy/en/reference/Utility Types.md:273:22    - Unknown word (extracting)   -- Constructs a type by extracting from `Type` all union
packages/documentation/copy/en/reference/Utility Types.md:464:53    - Unknown word (blocking)     -- contained type. Other than blocking inferences, `NoInfer
packages/documentation/copy/en/reference/Utility Types.md:46:1      - Unknown word (Constructs) -- Constructs a type with all properties
packages/documentation/copy/en/reference/Utility Types.md:46:118    - Unknown word (subsets)    -- that represents all subsets of a given type.
packages/documentation/copy/en/reference/Utility Types.md:513:316   - Unknown word (propagated)   -- overload signature is propagated into the new function
packages/documentation/copy/en/reference/Utility Types.md:522:7     - Unknown word (five)         -- const fiveToHex: OmitThisParameter
packages/documentation/copy/en/reference/Utility Types.md:557:24    - Unknown word (Strongly)     -- this.x += dx; // Strongly typed this
packages/documentation/copy/en/reference/Utility Types.md:61:20     - Unknown word (desk)       -- title: "organize desk",
packages/documentation/copy/en/reference/Utility Types.md:62:23     - Unknown word (clutter)    -- description: "clear clutter",
packages/documentation/copy/en/reference/Utility Types.md:9:46      - Unknown word (facilitate) -- several utility types to facilitate common type transformations
packages/documentation/copy/en/reference/Variable Declarations.md:102:18    - Unknown word (exacerbate)  -- One problem they exacerbate is the fact that it
packages/documentation/copy/en/reference/Variable Declarations.md:10:112    - Unknown word (respects)   -- similar to `var` in some respects, but allows users to
packages/documentation/copy/en/reference/Variable Declarations.md:10:168    - Unknown word (gotchas)    -- some of the common "gotchas" that users run into
packages/documentation/copy/en/reference/Variable Declarations.md:119:102   - Unknown word (endless)     -- reviews and can be an endless source of frustration
packages/documentation/copy/en/reference/Variable Declarations.md:119:120   - Unknown word (frustration) -- an endless source of frustration.
packages/documentation/copy/en/reference/Variable Declarations.md:119:62    - Unknown word (slip)        -- similar sorts of bugs slip through code reviews
packages/documentation/copy/en/reference/Variable Declarations.md:119:80    - Unknown word (reviews)     -- bugs slip through code reviews and can be an endless
packages/documentation/copy/en/reference/Variable Declarations.md:127:6     - Unknown word (Timeout)     -- setTimeout(function () {
packages/documentation/copy/en/reference/Variable Declarations.md:15:12     - Unknown word (elaborate)  -- Here we'll elaborate more on these new declaration
packages/documentation/copy/en/reference/Variable Declarations.md:15:69     - Unknown word (preferable) -- declarations and why they're preferable to `var`.
packages/documentation/copy/en/reference/Variable Declarations.md:170:105   - Unknown word (stopped)     -- after the `for` loop has stopped executing;
packages/documentation/copy/en/reference/Variable Declarations.md:174:45    - Unknown word (Immediately) -- to use an IIFE - an Immediately Invoked Function Expression
packages/documentation/copy/en/reference/Variable Declarations.md:174:57    - Unknown word (Invoked)     -- IIFE - an Immediately Invoked Function Expression
packages/documentation/copy/en/reference/Variable Declarations.md:17:27     - Unknown word (offhandedly) -- you've used JavaScript offhandedly, the next section might
packages/documentation/copy/en/reference/Variable Declarations.md:189:40    - Unknown word (shadows)     -- parameter list actually shadows the `i` declared in
packages/documentation/copy/en/reference/Variable Declarations.md:18:11     - Unknown word (intimately)  -- If you're intimately familiar with all the
packages/documentation/copy/en/reference/Variable Declarations.md:204:66    - Unknown word (lexical)     -- uses what some call _lexical-scoping_ or _block-scoping
packages/documentation/copy/en/reference/Variable Declarations.md:205:44    - Unknown word (scopes)      -- declared with `var` whose scopes leak out to their containing
packages/documentation/copy/en/reference/Variable Declarations.md:205:51    - Unknown word (leak)        -- with `var` whose scopes leak out to their containing
packages/documentation/copy/en/reference/Variable Declarations.md:239:118   - Unknown word (temporal)    -- eclaration are part of their _temporal dead zone_.
packages/documentation/copy/en/reference/Variable Declarations.md:240:16    - Unknown word (sophisticated) -- This is just a sophisticated way of saying you can
packages/documentation/copy/en/reference/Variable Declarations.md:266:25    - Unknown word (Shadowing)     -- Re-declarations and Shadowing
packages/documentation/copy/en/reference/Variable Declarations.md:283:1     - Unknown word (Thankfully)    -- Thankfully, `let` declarations
packages/documentation/copy/en/reference/Variable Declarations.md:28:8      - Unknown word (might've)    -- As you might've figured out, we just
packages/documentation/copy/en/reference/Variable Declarations.md:294:26    - Unknown word (interferes)    -- let x = 100; // error: interferes with parameter declaration
packages/documentation/copy/en/reference/Variable Declarations.md:304:62    - Unknown word (distinctly)    -- be declared within a distinctly different block.
packages/documentation/copy/en/reference/Variable Declarations.md:320:69    - Unknown word (shadowing)     -- nested scope is called _shadowing_.
packages/documentation/copy/en/reference/Variable Declarations.md:321:25    - Unknown word (edged)         -- is a bit of a double-edged sword in that it can
packages/documentation/copy/en/reference/Variable Declarations.md:321:31    - Unknown word (sword)         -- bit of a double-edged sword in that it can introduce
packages/documentation/copy/en/reference/Variable Declarations.md:338:52    - Unknown word (summation)     -- actually perform the summation correctly because the
packages/documentation/copy/en/reference/Variable Declarations.md:338:90    - Unknown word (loop's)        -- correctly because the inner loop's `i` shadows `i` from
packages/documentation/copy/en/reference/Variable Declarations.md:341:106   - Unknown word (judgement)     -- should use your best judgement.
packages/documentation/copy/en/reference/Variable Declarations.md:341:48    - Unknown word (fitting)       -- scenarios where it may be fitting to take advantage of
packages/documentation/copy/en/reference/Variable Declarations.md:345:15    - Unknown word (touched)       -- When we first touched on the idea of variable
packages/documentation/copy/en/reference/Variable Declarations.md:350:27    - Unknown word (Sleeps)        -- function theCityThatAlwaysSleeps() {
packages/documentation/copy/en/reference/Variable Declarations.md:370:25    - Unknown word (drastically)   -- let` declarations have drastically different behavior when
packages/documentation/copy/en/reference/Variable Declarations.md:371:1     - Unknown word (Rather)        -- Rather than just introducing
packages/documentation/copy/en/reference/Variable Declarations.md:402:10    - Unknown word (Lives)         -- const numLivesForCat = 9;
packages/documentation/copy/en/reference/Variable Declarations.md:412:7     - Unknown word (kitty)         -- const kitty = {
packages/documentation/copy/en/reference/Variable Declarations.md:413:10    - Unknown word (Aurora)        -- name: "Aurora",
packages/documentation/copy/en/reference/Variable Declarations.md:419:10    - Unknown word (Danielle)      -- name: "Danielle",
packages/documentation/copy/en/reference/Variable Declarations.md:424:15    - Unknown word (Rory)          -- kitty.name = "Rory";
packages/documentation/copy/en/reference/Variable Declarations.md:430:26    - Unknown word (measures)      -- Unless you take specific measures to avoid it, the internal
packages/documentation/copy/en/reference/Variable Declarations.md:436:109   - Unknown word (asking)        -- natural to find ourselves asking which one to use.
packages/documentation/copy/en/reference/Variable Declarations.md:439:1     - Unknown word (Applying)      -- Applying the [principle of least
packages/documentation/copy/en/reference/Variable Declarations.md:439:34    - Unknown word (privilege)     -- [principle of least privilege](https://wikipedia.org
packages/documentation/copy/en/reference/Variable Declarations.md:440:5     - Unknown word (rationale)     -- The rationale is that if a variable
packages/documentation/copy/en/reference/Variable Declarations.md:507:18    - Unknown word (fourth)        -- let [, second, , fourth] = [1, 2, 3, 4];
packages/documentation/copy/en/reference/Variable Declarations.md:565:21    - Unknown word (parses)        -- JavaScript normally parses a `{` as the start of
packages/documentation/copy/en/reference/Variable Declarations.md:570:13    - Unknown word (passthrough)   -- let { a, ...passthrough } = o;
packages/documentation/copy/en/reference/Variable Declarations.md:591:1     - Unknown word (Confusingly)   -- Confusingly, the colon here does
packages/documentation/copy/en/reference/Variable Declarations.md:649:111   - Unknown word (piling)        -- understand even without piling on renaming, default
packages/documentation/copy/en/reference/Variable Declarations.md:649:30    - Unknown word (deeply)        -- especially true with deeply nested destructuring
packages/documentation/copy/en/reference/Variable Declarations.md:666:1     - Unknown word (Spreading)     -- Spreading creates a shallow copy
packages/documentation/copy/en/reference/Variable Declarations.md:672:18    - Unknown word (food)          -- let defaults = { food: "spicy", price: "$
packages/documentation/copy/en/reference/Variable Declarations.md:672:25    - Unknown word (spicy)         -- defaults = { food: "spicy", price: "$$", ambiance
packages/documentation/copy/en/reference/Variable Declarations.md:672:46    - Unknown word (ambiance)      -- spicy", price: "$$", ambiance: "noisy" };
packages/documentation/copy/en/reference/Variable Declarations.md:672:57    - Unknown word (noisy)         -- price: "$$", ambiance: "noisy" };
packages/documentation/copy/en/reference/Variable Declarations.md:677:8     - Unknown word (spreading)     -- Object spreading is more complex than
packages/documentation/copy/en/reference/Variable Declarations.md:687:40    - Unknown word (overwrites)    -- property in `defaults` overwrites `food: "rich"`, which
packages/documentation/copy/en/reference/Variable Declarations.md:705:47    - Unknown word (spreads)       -- compiler doesn't allow spreads of type parameters from
packages/documentation/copy/en/reference/Variable Declarations.md:712:72    - Unknown word (couples)       -- declaration, except that it couples the _lifetime_ of the
packages/documentation/copy/en/reference/Variable Declarations.md:712:85    - Unknown word (lifetime)      -- that it couples the _lifetime_ of the value bound
packages/documentation/copy/en/reference/Variable Declarations.md:715:14    - Unknown word (exits)         -- When control exits the block containing
packages/documentation/copy/en/reference/Variable Declarations.md:716:64    - Unknown word (cleanup)       -- that value to perform cleanup:
packages/documentation/copy/en/reference/Variable Declarations.md:739:63    - Unknown word (leaks)         -- for avoiding memory leaks when working with JavaScript
packages/documentation/copy/en/reference/Variable Declarations.md:746:21    - Unknown word (Throw)         -- doSomethingThatMayThrow();
packages/documentation/copy/en/reference/Variable Declarations.md:747:16    - Unknown word (disposed)      -- } // `file` is disposed, even if an error is
packages/documentation/copy/en/reference/Variable Declarations.md:750:27    - Unknown word (tracing)       -- scoped operations like tracing
packages/documentation/copy/en/reference/Variable Declarations.md:77:5      - Unknown word (Scoping)     -- ### Scoping rules
packages/documentation/copy/en/reference/Variable Declarations.md:788:20    - Unknown word (conditionally) -- This allows you to conditionally acquire resources when
packages/documentation/copy/en/reference/Variable Declarations.md:789:1     - Unknown word (branching)     -- branching or repetition.
packages/documentation/copy/en/reference/Variable Declarations.md:789:14    - Unknown word (repetition)    -- branching or repetition.
packages/documentation/copy/en/reference/Variable Declarations.md:791:16    - Unknown word (disposable)    -- ### Defining a disposable resource
packages/documentation/copy/en/reference/Variable Declarations.md:793:89    - Unknown word (Disposable)    -- by implementing the `Disposable` interface:
packages/documentation/copy/en/reference/Variable Declarations.md:79:34     - Unknown word (scoping)     -- declarations have some odd scoping rules for those used
packages/documentation/copy/en/reference/Variable Declarations.md:806:18    - Unknown word (Entering)      -- console.log(`Entering: ${name}`);
packages/documentation/copy/en/reference/Variable Declarations.md:810:18    - Unknown word (Exiting)       -- console.log(`Exiting: ${name}`);
packages/documentation/copy/en/reference/Variable Declarations.md:828:93    - Unknown word (accommodate)   -- performed asynchronously. To accommodate this, the
packages/documentation/copy/en/reference/Variable Declarations.md:838:44    - Unknown word (awaits)        -- declaration invokes, and _awaits_, its value's `[Symbol
packages/documentation/copy/en/reference/Variable Declarations.md:840:18    - Unknown word (flushing)      -- or a file stream flushing any pending writes to
packages/documentation/copy/en/reference/Variable Declarations.md:840:39    - Unknown word (writes)        -- flushing any pending writes to storage before it
packages/documentation/copy/en/reference/Variable Declarations.md:864:14    - Unknown word (exec)          -- await db.execAsync("BEGIN TRANSACTION
packages/documentation/copy/en/reference/Variable Declarations.md:884:13    - Unknown word (debit)         -- if (await debitAccount(db, account1
packages/documentation/copy/en/reference/Variable Declarations.md:895:92    - Unknown word (disposal)      -- indicates that the _disposal_ of the resource is
packages/documentation/copy/en/reference/Variable Declarations.md:925:1     - Unknown word (rejection)     -- rejection since execution pauses
packages/documentation/copy/en/reference/Variable Declarations.md:925:27    - Unknown word (pauses)        -- rejection since execution pauses while `await`-ing the
packages/documentation/copy/en/reference/Variable Declarations.md:966:3     - Unknown word (yield)         -- yield createResource1();
packages/documentation/copy/en/reference/Variable Declarations.md:980:84    - Unknown word (editions)      -- targeting older ECMAScript editions as long as you are using
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:10:104    - Unknown word (impressive)   -- this blog post for some impressive charts.](https://web
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:10:115    - Unknown word (charts)       -- for some impressive charts.](https://web.archive
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:12:4      - Unknown word (Better)       -- ## Better Module Visibility Rules
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:21:19     - Unknown word (Controller)   -- export class ZooController {
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:8:16      - Unknown word (Improvements) -- ## Performance Improvements
packages/documentation/copy/en/release-notes/TypeScript 1.1.md:8:4       - Unknown word (Performance) -- ## Performance Improvements
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:136:50    - Unknown word (decomposed)  -- targets, the string is decomposed:
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:206:3     - Unknown word (Diamonds)    -- Diamonds,
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:213:1     - Unknown word (Compiles)    -- Compiles to exactly:
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:21:38     - Unknown word (intuitively) -- union types works very intuitively -- anything you could
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:224:3     - Unknown word (Neat)        -- Neat = 1,
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:51:5      - Unknown word (Stricter)    -- ### Stricter Generics
packages/documentation/copy/en/release-notes/TypeScript 1.4.md:95:40     - Unknown word (hoisted)     -- var` declarations are "hoisted" to the top of their
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:111:59    - Unknown word (bold)       -- location: [x, y] = [0, 0], bold = false }) {
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:112:6     - Unknown word (Draw)       -- // Draw text
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:116:61    - Unknown word (italics)    -- [1, 2, 3], style: "italics" };
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:123:15    - Unknown word (swapping)   -- For instance, swapping two variables can be
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:14:27     - Unknown word (coexists)   -- new ES6 module syntax coexists with TypeScript's original
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:164:49    - Unknown word (decrement)  -- operand of an increment or decrement
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:188:58    - Unknown word (idiomatic)  -- transpile for..of arrays to idiomatic ES3/ES5 JavaScript when
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:241:1     - Unknown word (Initializing) -- Initializing an object with dynamic
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:241:66    - Unknown word (burden)       -- properties can be a bit of a burden. Take the following
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:244:6     - Unknown word (Neighbor)     -- type NeighborMap = { [name: string
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:254:53    - Unknown word (neighbor)     -- variable to hold on to the neighbor-map so that we can initialize
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:255:59    - Unknown word (lifting)      -- compiler do the heavy lifting:
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:280:22    - Unknown word (escapes)      -- # Unicode codepoint escapes in strings
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:280:4     - Unknown word (Unicode)      -- ## Unicode codepoint escapes in
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:285:42    - Unknown word (surrogate)    -- is represented as a surrogate pair, meaning that it
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:285:76    - Unknown word (encoded)      -- pair, meaning that it's encoded using a pair of 16-bit
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:287:52    - Unknown word (discern)      -- that it’s difficult to discern two independent characters
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:289:39    - Unknown word (cleanly)      -- codepoint escapes, you can cleanly represent that exact
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:292:4     - Unknown word (Tagged)       -- ## Tagged template strings in
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:295:16    - Unknown word (considerable) -- Thanks to some considerable work done by [@ivogabe
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:295:85    - Unknown word (bridged)      -- github.com/ivogabe), we bridged the gap for tagged templates
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:370:37    - Unknown word (duplicates)   -- ](/tsconfig#outDir) duplicates the input hierarchy
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:371:14    - Unknown word (computes)     -- The compiler computes the root of the input
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:372:41    - Unknown word (substructure) -- to replicate all its substructure in the output.
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:374:137   - Unknown word (mirroring)    -- in output structure mirroring `FolderA\FolderB\`.
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:377:68    - Unknown word (mirrored)     -- input directory to be mirrored in output instead of
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:377:98    - Unknown word (computing)    -- in output instead of computing it.
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:78:6      - Unknown word (Bare)       -- #### Bare Import
packages/documentation/copy/en/release-notes/TypeScript 1.5.md:94:101    - Unknown word (extracted)  -- initializes them with values extracted from properties of an
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:288:6     - Unknown word (eager)      -- s = "eager";
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:301:105   - Unknown word (misspelled) -- of catching excess or misspelled properties. Specifically
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:351:6     - Unknown word (accomplished) -- This accomplished through the use of an
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:351:86    - Unknown word (transposition) -- implementation, and transposition of the function body
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:361:54    - Unknown word (settled)       -- execution until 'p' is settled. 'i' has type "number
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:365:54    - Unknown word (suspends)      -- => 1 + await p; // suspends execution.
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:393:4     - Unknown word (Adjustments)   -- ## Adjustments in module resolution
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:396:101   - Unknown word (procedure)     -- model module lookup procedure used by Node.
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:398:153   - Unknown word (Possible)      -- command line option. Possible values are:
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:457:58    - Unknown word (wildcards)     -- list does not support wildcards. It must simply be a
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:462:1     - Unknown word (Optionally)    -- Optionally pass command line arguments
packages/documentation/copy/en/release-notes/TypeScript 1.6.md:48:22     - Unknown word (frameworks) -- ### Using other JSX frameworks
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:102:26    - Unknown word (elegant)    -- often opens up very elegant ways of writing code
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:12:81     - Unknown word (fulfilled)  -- function return promise is fulfilled and unwraps the value
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:12:95     - Unknown word (unwraps)    -- promise is fulfilled and unwraps the value from the
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:142:86    - Unknown word (Ember)      -- describing libraries (e.g. Ember.js) that use mixin-style
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:150:8     - Unknown word (exponentiation) -- ## ES7 exponentiation operator
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:16:54     - Unknown word (printed)    -- input element will be printed out one at a time with
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:173:4     - Unknown word (Improved)       -- ## Improved checking for destructuring
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:175:115   - Unknown word (rigid)          -- literal initializers less rigid and more intuitive.
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:213:74    - Unknown word (decorate)       -- reduceRight` from the `__decorate` helper.
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:214:204   - Unknown word (repetitive)     -- by removing various repetitive calls to the aforementioned
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:21:9      - Unknown word (Delayed)    -- // printDelayed is a 'Promise<void>
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:37:16     - Unknown word (Printed)    -- console.log("Printed every element!");
packages/documentation/copy/en/release-notes/TypeScript 1.7.md:77:10     - Unknown word (subtract)   -- public subtract(operand: number) {
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:12:46     - Unknown word (Bounded)    -- usually referred to as [F-Bounded Polymorphism](https
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:12:54     - Unknown word (Polymorphism) -- referred to as [F-Bounded Polymorphism](https://wikipedia.org
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:143:11    - Unknown word (lightweight)   -- These are lightweight components that easily
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:155:4     - Unknown word (Simplified)    -- ## Simplified `props` type management
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:165:4     - Unknown word (Augmenting)    -- ## Augmenting global/module scope
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:176:1     - Unknown word (Neither)       -- Neither module augmentations
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:196:8     - Unknown word (Augment)       -- // Augment the 'Observable' class
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:237:71    - Unknown word (screen)        -- elements across the screen while controlling the
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:237:84    - Unknown word (controlling)   -- across the screen while controlling the ["easing" of the
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:251:49    - Unknown word (stopping)      -- prone - there is nothing stopping a user from accidentally
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:277:16    - Unknown word (improves)      -- TypeScript 1.8 improves type inference involving
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:310:4     - Unknown word (Concatenate)   -- ## Concatenate `AMD` and `System` modules
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:312:46    - Unknown word (conjunction)   -- tsconfig#outFile) in conjunction with `--module amd`
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:356:204   - Unknown word (indicated)     -- member creation not indicated in the imported .ts
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:363:116   - Unknown word (freshness)     -- match `let`/`const` freshness semantics.
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:38:1      - Unknown word (Statements)   -- Statements guaranteed to not be
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:39:36     - Unknown word (unconditional) -- statements following unconditional `return`, `throw`,
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:422:51    - Unknown word (prologue)      -- with a `"use strict";` prologue
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:424:438   - Unknown word (loudly)        -- assigning to `NaN`, will now loudly fail. You can reference
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:429:36    - Unknown word (middle)        -- you might be in the middle of converting a JS code
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:509:4     - Unknown word (Official)      -- ## Official TypeScript NuGet package
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:511:31    - Unknown word (official)      -- with TypeScript 1.8, official NuGet packages are available
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:513:1     - Unknown word (Stable)        -- Stable packages are available
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:524:29    - Unknown word (monochrome)    -- understand that a ton of monochrome output can be a little
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:524:80    - Unknown word (eyes)          -- little difficult on the eyes.
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:525:118   - Unknown word (overwhelming)  -- when error output gets overwhelming.
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:525:68    - Unknown word (visual)        -- and ends, and these visual clues are important
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:525:75    - Unknown word (clues)         -- ends, and these visual clues are important when error
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:527:95    - Unknown word (colorful)      -- TypeScript gives a more colorful output with context
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:529:3     - Unknown word (Showing)       -- ![Showing off pretty error messages
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:531:4     - Unknown word (Colorization)  -- ## Colorization of JSX code in VS 2
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:533:39    - Unknown word (classified)    -- 8, JSX tags are now classified and colorized in Visual
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:537:171   - Unknown word (Fonts)         -- Options`->`Environment`->`Fonts and Colors` page.
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:544:139   - Unknown word (placing)       -- hacky workarounds like placing `tsconfig.json` files
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:546:24    - Unknown word (remains)       -- The old behavior still remains the same if given a
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:566:26    - Unknown word (driven)        -- Support output to IPC-driven files
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:568:125   - Unknown word (pipes)         -- entities like named pipes, devices, etc.
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:578:65    - Unknown word (printer)       -- JavaScript into a pretty printer like [pretty-js](https
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:62:24     - Unknown word (Semicolon)     -- return; // Automatic Semicolon Insertion triggered
packages/documentation/copy/en/release-notes/TypeScript 1.8.md:62:34     - Unknown word (Insertion)     -- Automatic Semicolon Insertion triggered at newline
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:103:4     - Unknown word (Dotted)     -- ## Dotted names in type guards
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:132:22    - Unknown word (permit)     -- Expression operators permit operand types to include
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:137:20    - Unknown word (Produces)   -- return a + b; // Produces value of type number
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:14:161    - Unknown word (erroneous)  -- not possible to detect erroneous use of them).
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:153:9     - Unknown word (widening)   -- ## Type widening
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:155:44    - Unknown word (widened)    -- undefined` types are _not_ widened to `any` in strict null
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:165:147   - Unknown word (unable)     -- the type checker is unable to conclude that fact
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:18:50     - Unknown word (switches)   -- tsconfig#strictNullChecks) switches to a new strict null
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:192:39    - Unknown word (analyses)   -- 0, the type checker analyses all possible flows of
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:21:231    - Unknown word (permits)    -- only `T | undefined` permits `undefined` values.
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:228:10    - Unknown word (mumble)     -- function mumble(check: boolean) {
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:244:125   - Unknown word (furthermore) -- discriminant property and furthermore extend that capability
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:254:11    - Unknown word (Rectangle)   -- interface Rectangle {
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:298:71    - Unknown word (constituent) -- type of `x` to those constituent types of `x` that have
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:426:49    - Unknown word (mutates)     -- push method (because it mutates array)
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:47:4      - Unknown word (Assigned)   -- ## Assigned-before-use checking
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:502:60    - Unknown word (separators)  -- excluding directory separators)
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:517:22    - Unknown word (enhancements) -- # Module resolution enhancements: BaseUrl, Path mapping
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:519:63    - Unknown word (knops)        -- additional module resolution knops to _inform_ the compiler
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:547:1     - Unknown word (Loaders)      -- Loaders use a mapping configuration
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:553:116   - Unknown word (slim)         -- modules/jquery/dist/jquery.slim.min.js"`.
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:553:57    - Unknown word (translated)   -- `"jquery"` would be translated at runtime to `"node
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:603:4     - Unknown word (Tracing)      -- ## Tracing module resolution
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:611:4     - Unknown word (Shorthand)    -- ## Shorthand ambient module declarations
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:668:7     - Unknown word (shutting)     -- thus, shutting down any checking on
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:750:7     - Unknown word (Singleton)    -- class Singleton {
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:809:100   - Unknown word (evergreen)    -- Promise` (e.g. most evergreen browsers today), just
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:815:3     - Unknown word (webworker)    -- - webworker
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:836:4     - Unknown word (bash)         -- ```bash
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:866:57    - Unknown word (exempt)       -- starting with `_` are exempt from the unused parameter
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:887:48    - Unknown word (shakers)      -- using ES2015-based tree shakers like [rollup](https
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:889:13    - Unknown word (commas)       -- ## Trailing commas in function parameter
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:889:4     - Unknown word (Trailing)     -- ## Trailing commas in function parameter
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:913:209   - Unknown word (skipping)     -- significantly shortened by skipping declaration file type
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:913:63    - Unknown word (spends)       -- files, the compiler spends a lot of time type checking
packages/documentation/copy/en/release-notes/TypeScript 2.0.md:924:16    - Unknown word (relaxes)      -- TypeScript 2.0 relaxes this constraint and
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:109:6     - Unknown word (Deferred)       -- type Deferred<T> = {
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:113:4     - Unknown word (Wrap)           -- // Wrap proxies around properties
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:122:45    - Unknown word (routines)       -- describe some common JS routines like:
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:153:16    - Unknown word (brings)         -- TypeScript 2.1 brings support for [ESnext
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:178:8     - Unknown word (rests)          -- Object rests are the dual of object
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:192:14    - Unknown word (involve)        -- > That might involve grabbing [a polyfill
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:207:7     - Unknown word (dramatic)       -- ##### dramaticWelcome.ts
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:230:1     - Unknown word (Compiling)      -- Compiling and running the output
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:234:12    - Unknown word (injects)        -- TypeScript injects a handful of helper
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:234:162   - Unknown word (awaiter)        -- JSX elements, and `__awaiter` for async functions
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:234:22    - Unknown word (handful)        -- TypeScript injects a handful of helper functions
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:242:57    - Unknown word (customers)      -- was a pain point for customers trying to keep their
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:31:1      - Unknown word (Syntactically) -- Syntactically, they look exactly like
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:345:128   - Unknown word (accordance)     -- type of the variable in accordance with what elements are
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:410:30    - Unknown word (controlled)     -- type widening can be controlled through explicit type
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:417:24    - Unknown word (Widening)       -- const c1 = "hello"; // Widening type "hello"
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:465:15    - Unknown word (entails)        -- > This change entails a break in the behavior
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:470:124   - Unknown word (hassle)         -- json` files can be a hassle.
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:470:72    - Unknown word (maintaining)    -- these two targets, and maintaining multiple `tsconfig.json
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:476:62    - Unknown word (overridden)     -- is loaded first, then overridden by those in the inheriting
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:477:3     - Unknown word (Circularity)    -- - Circularity between configuration
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:499:25    - Unknown word (supplemental)   -- files": ["main.ts", "supplemental.ts"]
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:518:4     - Unknown word (Parses)         -- 1. Parses all the code in strict
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:519:37    - Unknown word (atop)           -- strict";` directive atop every generated file
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:519:4     - Unknown word (Writes)         -- 2. Writes `"use strict";` directive
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:87:56     - Unknown word (generalized)   -- can be written as a generalized transformation on the
packages/documentation/copy/en/release-notes/TypeScript 2.1.md:98:20     - Unknown word (comprehensions) -- They're like [list comprehensions in Python](https://docs
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:102:136   - Unknown word (initially)  -- constructor function initially used to allocate the
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:143:7     - Unknown word (translates) -- Which translates to:
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:165:131   - Unknown word (disappear)  -- null` and `undefined` disappear from unions in classic
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:21:33     - Unknown word (parametric) -- expression `Base` of a parametric type `T` with a constraint
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:24:139    - Unknown word (discarded)  -- construct signatures are discarded and their instance types
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:24:6      - Unknown word (obtaining)  -- When obtaining the construct signatures
packages/documentation/copy/en/release-notes/TypeScript 2.2.md:27:7      - Unknown word (Putting)    -- ##### Putting all of the above rules
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:155:121   - Unknown word (highest)      -- complex to choose the highest level of type safety
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:155:16    - Unknown word (breakage)    -- While avoiding breakage is a good thing, this
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:155:86    - Unknown word (increasingly) -- drawback of making it increasingly complex to choose the
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:156:197   - Unknown word (improved)     -- versions of the compiler as improved type checking features
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:181:236   - Unknown word (commented)    -- with their descriptions commented out.
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:182:193   - Unknown word (grow)         -- readable as projects grow.
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:189:78    - Unknown word (conversely)   -- nocheck` comment to them; conversely you can choose to check
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:27:14     - Unknown word (protocol)   -- The Iterator protocol also defines the target
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:31:173    - Unknown word (computation) -- used to yield partial computation results via the `Iterator
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:50:82     - Unknown word (shim)        -- or `Symbol.iterator` shim at runtime for any non
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:61:16     - Unknown word (lies)        -- The difference lies in the fact that the
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:62:27     - Unknown word (enlist)      -- allows the caller to enlist in an asynchronous notificati
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:83:9      - Unknown word (sleep)       -- await sleep(100);
packages/documentation/copy/en/release-notes/TypeScript 2.3.md:8:19      - Unknown word (Iteration)  -- ## Generators and Iteration for ES5/ES3
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:107:128   - Unknown word (adverse)     -- until we saw some of the adverse effects it had with
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:107:78    - Unknown word (huge)        -- this was not been a huge issue for our users
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:109:27    - Unknown word (tightens)    -- TypeScript 2.4 introduces tightens this up when relating
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:112:11    - Unknown word (Mappable)    -- interface Mappable<T> {
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:124:52    - Unknown word (bidirectionally) -- map`, TypeScript would bidirectionally relate their parameters
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:12:43     - Unknown word (lazily)     -- can conditionally and lazily import other modules
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:133:43    - Unknown word (weak)            -- introduces the concept of "weak types".
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:141:6     - Unknown word (Retries)         -- maxRetries?: number;
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:154:3     - Unknown word (payload)         -- payload: "hello world!",
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:164:121   - Unknown word (silent)          -- what would otherwise be silent bugs.
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:164:38    - Unknown word (toughening)      -- this as TypeScript "toughening up" the weak guarantees
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:23:46     - Unknown word (splitting)  -- support for automatically splitting output bundles based
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:42:33     - Unknown word (wonderful)  -- .4 introduces a few wonderful changes around the way
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:76:56     - Unknown word (technically) -- check, but you could technically do anything with `y
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:84:63     - Unknown word (gains)       -- right side implicitly _gains_ type parameters, and
packages/documentation/copy/en/release-notes/TypeScript 2.4.md:91:25     - Unknown word (unify)       -- TypeScript now tries to unify type parameters when
packages/documentation/copy/en/release-notes/TypeScript 2.5.md:30:36     - Unknown word (Parenthesized) -- type {SomeType} */ AnyParenthesizedExpression;
packages/documentation/copy/en/release-notes/TypeScript 2.5.md:39:62     - Unknown word (footprint)     -- the memory and runtime footprint of the compiler and
packages/documentation/copy/en/release-notes/TypeScript 2.5.md:43:88     - Unknown word (parallels)     -- preserveSymlinks) flag, which parallels the behavior of [the
packages/documentation/copy/en/release-notes/TypeScript 2.5.md:46:162    - Unknown word (symbolic)      -- the location of the symbolic link file, rather than
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:117:12    - Unknown word (cooked)      -- function(cooked, raw) {
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:143:4     - Unknown word (Localized)   -- ## Localized diagnostics on the command
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:145:39    - Unknown word (localized)   -- npm package ships with localized versions of diagnostic
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:150:19    - Unknown word (Russian)     -- Error messages in Russian:
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:158:52    - Unknown word (может)       -- : Тип ""string"" не может быть назначен для т
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:158:58    - Unknown word (быть)        -- ""string"" не может быть назначен для типа "number
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:158:63    - Unknown word (назначен)    -- string"" не может быть назначен для типа "number".
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:158:76    - Unknown word (типа)        -- т быть назначен для типа "number".
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:164:13    - Unknown word (Japanese)    -- And help in Japanese:
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:17:69     - Unknown word (originating) -- types, _except_ those originating in method or constructor
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:217:105   - Unknown word (offending)   -- comments placed above the offending lines.
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:217:25    - Unknown word (suppressing) -- TypeScript 2.6 supports suppressing errors in .ts files
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:217:88    - Unknown word (placed)      -- ts-ignore` comments placed above the offending
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:228:27    - Unknown word (suppresses)  -- @ts-ignore` comment suppresses all errors that originate
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:229:117   - Unknown word (suppressed)  -- which error is being suppressed.
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:231:113   - Unknown word (sparingly)   -- this comments _very sparingly_.
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:233:4     - Unknown word (Faster)      -- ## Faster `tsc --watch`
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:236:17    - Unknown word (optimizes)   -- The new version optimizes code generation and
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:237:57    - Unknown word (regenerating) -- will result in _only_ regenerating the changed module,
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:238:46    - Unknown word (reap)         -- number of files should reap the most benefit from
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:250:1     - Unknown word (Below)        -- Below both `n` and `m` will
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:32:1      - Unknown word (Intuitively) -- Intuitively, the default mode permits
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:32:157    - Unknown word (provably)    -- error because it isn't _provably_ sound.
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:40:11     - Unknown word (Comparer)    -- interface Comparer<T> {
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:53:129    - Unknown word (emerges)     -- or `+`/`-`), variance emerges naturally from the actual
packages/documentation/copy/en/release-notes/TypeScript 2.6.md:88:6      - Unknown word (contrasts)   -- This contrasts with inferences from
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:114:65    - Unknown word (indirectly) -- properties can be initialized indirectly (perhaps by a helper
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:136:4     - Unknown word (Definite)   -- ## Definite Assignment Assertions
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:138:132   - Unknown word (relay)      -- variable declarations to relay to TypeScript that a
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:154:83    - Unknown word (appending)  -- is really assigned by appending an `!` to its declaration
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:192:32    - Unknown word (Kiara)      -- a pull request from [Kiara Grouwstra](https://github
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:193:25    - Unknown word (leveraging) -- This is accomplished by leveraging numeric literal types
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:195:1     - Unknown word (Conceptually) -- Conceptually, you might consider
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:206:16    - Unknown word (resort)       -- If you need to resort to the original behavior
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:209:11    - Unknown word (Minimum)      -- interface MinimumNumStrTuple extends Array
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:219:69    - Unknown word (occurring)    -- multiple object literals occurring in the same context
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:229:78    - Unknown word (caused)       -- second line subsequently caused an error because `obj
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:230:6     - Unknown word (obviously)    -- That obviously wasn't ideal.
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:243:107   - Unknown word (normalized)   -- collapsed into a single normalized union type:
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:243:83    - Unknown word (collapsed)    -- parameter are similarly collapsed into a single normalized
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:259:3     - Unknown word (Structurally) -- - Structurally identical, but distinct
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:259:98    - Unknown word (eliminating)  -- union types (instead of eliminating all but one).
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:260:22    - Unknown word (reduction)    -- Union type subtype reduction only removes a class
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:320:126   - Unknown word (indicator)    -- presence of an `__esModule` indicator under [`esModuleInterop
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:325:294   - Unknown word (stipulates)   -- function. ECMAScript spec stipulates that a namespace record
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:326:253   - Unknown word (practically)  -- this import pattern practically unusable to import non
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:333:122   - Unknown word (applying)     -- We highly recommend applying it both to new and existing
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:333:57    - Unknown word (unwarranted)  -- under a flag to avoid unwarranted breaks to existing code
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:373:47    - Unknown word (Separators)   -- support for [ES Numeric Separators](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:379:7     - Unknown word (million)      -- const million = 1_000_000;
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:385:4     - Unknown word (Cleaner)      -- ## Cleaner output in `--watch`
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:387:33    - Unknown word (clears)       -- s `--watch` mode now clears the screen after a re
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:392:73    - Unknown word (codes)        -- file names, diagnostic codes, and line numbers.
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:393:39    - Unknown word (formatted)    -- positions are now also formatted to allow navigation
packages/documentation/copy/en/release-notes/TypeScript 2.7.md:393:79    - Unknown word (terminals)    -- navigation in common terminals (e.g. Visual Studio
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:10:84     - Unknown word (uniform)    -- ability to express non-uniform type mappings.
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:225:22    - Unknown word (Obtain)      -- `ReturnType<T>` -- Obtain the return type of a
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:22:85     - Unknown word (occurrences) -- T` and `U` where all occurrences of type parameters are
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:23:93     - Unknown word (collect)     -- declaration within `U` collect a set of candidate types
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:266:284   - Unknown word (conveys)     -- feel that name better conveys the semantics of the
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:361:4     - Unknown word (Defaulted)   -- ## Defaulted declarations
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:372:70    - Unknown word (Individual)  -- prototype property. Individual prototype assignments
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:388:4     - Unknown word (Nested)      -- ## Nested and merged declarations
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:390:1     - Unknown word (Nesting)     -- Nesting works to any level now
packages/documentation/copy/en/release-notes/TypeScript 2.8.md:406:24    - Unknown word (renderer)    -- import { dom } from "./renderer";
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:171:120   - Unknown word (utilized)   -- infer the type arguments utilized.
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:203:55    - Unknown word (reaching)   -- annotation allows for reaching in a module and accessing
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:223:16    - Unknown word (Adopting)   -- console.log(`Adopting ${p.name}...`);
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:240:4     - Unknown word (Relaxing)   -- ## Relaxing declaration emit visibility
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:270:103   - Unknown word (reopening)  -- would be done through reopening `ImportMeta` interface
packages/documentation/copy/en/release-notes/TypeScript 2.9.md:336:17    - Unknown word (hitting)    -- In other words, hitting go-to-definition on
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:129:1     - Unknown word (Anything)   -- Anything is assignable to `unknown
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:130:69    - Unknown word (asserting)  -- unknown` without first asserting or narrowing to a more
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:135:34    - Unknown word (absorbs)    -- intersection everything absorbs unknown
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:21:4      - Unknown word (Expansion)  -- - [Expansion of rest parameters with
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:21:55     - Unknown word (discrete)   -- with tuple types into discrete parameters.](#rest-parameters
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:295:106   - Unknown word (they'd)     -- inside of `render`, or they'd use type-assertions
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:298:311   - Unknown word (differing)  -- how inferences from differing places should be combined
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:300:118   - Unknown word (extent)     -- defaultProps` and, to some extent, `propTypes`.
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:337:1     - Unknown word (Corresponding) -- Corresponding changes to add `LibraryManage
packages/documentation/copy/en/release-notes/TypeScript 3.0.md:81:182    - Unknown word (expansion)  -- names are used in the expansion (however, the names
packages/documentation/copy/en/release-notes/TypeScript 3.1.md:22:38     - Unknown word (numerically) -- number]`, there are two numerically named properties: `
packages/documentation/copy/en/release-notes/TypeScript 3.1.md:29:59     - Unknown word (resorting)   -- JavaScript code without resorting to `namespace` hacks
packages/documentation/copy/en/release-notes/TypeScript 3.1.md:29:84     - Unknown word (hacks)       -- resorting to `namespace` hacks.
packages/documentation/copy/en/release-notes/TypeScript 3.1.md:73:132    - Unknown word (accommodating) -- features while also accommodating users on the older versions
packages/documentation/copy/en/release-notes/TypeScript 3.1.md:73:94     - Unknown word (newest)      -- that leveraging the newest TypeScript features
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:109:31    - Unknown word (interaction) -- might imagine close interaction between `number` and
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:119:63    - Unknown word (arithmetic)  -- number`s and `bigint`s in arithmetic operations is an error
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:141:28    - Unknown word (thanks)      -- like to extend a huge thanks to [Caleb Sander](https
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:141:39    - Unknown word (Caleb)       -- extend a huge thanks to [Caleb Sander](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:141:45    - Unknown word (Sander)      -- huge thanks to [Caleb Sander](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:142:7     - Unknown word (grateful)    -- We're grateful for the contribution
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:148:112   - Unknown word (concatenation) -- every addition, string concatenation, multiplication, etc
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:148:127   - Unknown word (multiplication) -- string concatenation, multiplication, etc. would involve
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:148:26    - Unknown word (dispatch)    -- TypeScript would need to dispatch to the correct behavior
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:150:29    - Unknown word (immediate)      -- that reason, we have no immediate plans to provide downleveling
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:151:8     - Unknown word (bright)         -- On the bright side, Node 11 and newer
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:156:28    - Unknown word (discriminants)  -- unit types as union discriminants
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:158:42    - Unknown word (relaxing)       -- narrowing easier by relaxing rules for what it considers
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:193:23    - Unknown word (climb)          -- Here, TypeScript will climb up `node_modules` folders
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:195:42    - Unknown word (bigger)         -- extremely useful for bigger organizations, or projects
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:200:97    - Unknown word (calculating)    -- tsconfig.json` (after calculating options inherited from
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:201:24    - Unknown word (diagnosing)     -- This can be useful for diagnosing configuration issues
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:23:49     - Unknown word (Callable)   -- introducing two new types, `CallableFunction` and `NewableFunction
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:23:9      - Unknown word (achieved)   -- This is achieved by introducing two new
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:27:31     - Unknown word (uncover)    -- stricter checks may uncover previously unreported
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:27:50     - Unknown word (unreported) -- may uncover previously unreported errors, this is a breaking
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:30:200    - Unknown word (modeled)    -- overload will ever be modeled.
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:44:75     - Unknown word (greatest)   -- expressions are merged to the greatest extent possible on either
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:52:209    - Unknown word (rightmost)  -- name, the type of the rightmost property is used. This
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:52:354    - Unknown word (intersect)  -- all properties, and intersect the types of properties
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:94:11     - Unknown word (roof)       -- // *Slaps roof of fibonacci function
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:94:19     - Unknown word (fibonacci)  -- // *Slaps roof of fibonacci function*
packages/documentation/copy/en/release-notes/TypeScript 3.2.md:94:5      - Unknown word (Slaps)      -- // *Slaps roof of fibonacci function
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:104:151   - Unknown word (compromising) -- project structure, without compromising the existing TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:105:68    - Unknown word (recompile)    -- use `--build` mode to recompile only the set of projects
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:109:14    - Unknown word (vein)         -- In a similar vein, the entire idea is
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:110:38    - Unknown word (intra)        -- this as optimizing _intra_-project builds.
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:112:118   - Unknown word (infrastructure) -- incremental file watching infrastructure.
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:117:40    - Unknown word (resulted)       -- this functionality has resulted in **a reduction of
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:118:149   - Unknown word (believe)        -- specific numbers, but we believe most composite project
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:118:207   - Unknown word (wins)           -- will see significant wins here.
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:13:6      - Unknown word (Fruit)      -- type Fruit = "apple" | "orange
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:16:11     - Unknown word (Eater)      -- type FruitEater = (fruit: Fruit) =>
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:16:20     - Unknown word (fruit)      -- type FruitEater = (fruit: Fruit) => number;
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:16:57     - Unknown word (ranks)      -- number; // eats and ranks the fruit
packages/documentation/copy/en/release-notes/TypeScript 3.3.md:54:24     - Unknown word (kicks)      -- This new behavior only kicks in when at most one
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:11:131    - Unknown word (costly)     -- to detect the least costly way to type-check and
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:179:140   - Unknown word (nicer)      -- given that arrays have a nicer syntax.
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:179:70    - Unknown word (mutation)   -- over `Array` when no mutation is intended, it's often
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:195:29    - Unknown word (ordinary)   -- might expect, unlike ordinary tuples whose slots could
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:195:51    - Unknown word (slots)      -- ordinary tuples whose slots could be written to
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:238:13    - Unknown word (acted)      -- // How code acted *before* TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:265:49    - Unknown word (Writable)   -- a utility type like `Writable` mapped type that strips
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:265:99    - Unknown word (ness)       -- strips away `readonly`-ness, and that would convert
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:287:1     - Unknown word (Despite)    -- Despite its appearance, the
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:287:13    - Unknown word (appearance) -- Despite its appearance, the `readonly` type
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:320:1     - Unknown word (Outside)    -- Outside of `.tsx` files, the
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:333:68    - Unknown word (hint)       -- otherwise be used just to hint immutability to the
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:333:73    - Unknown word (immutability) -- be used just to hint immutability to the compiler can
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:348:6     - Unknown word (Narrows)      -- // Narrows perfectly!
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:421:4     - Unknown word (Refers)       -- // Refers to 'abc' from above
packages/documentation/copy/en/release-notes/TypeScript 3.4.md:72:41     - Unknown word (feeds)      -- returns a function which feeds its argument through
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:101:4     - Unknown word (Smarter)       -- ## Smarter union type checking
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:10:35     - Unknown word (optimizations) -- introduces several optimizations around type-checking
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:148:130   - Unknown word (decompose)     -- will_ go further and decompose types like `S` into
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:148:186   - Unknown word (inhabitant)    -- union of every possible inhabitant type.
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:149:77    - Unknown word (viewed)        -- false`, `S` will be viewed as a union of `{ done
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:14:90     - Unknown word (efficiently)   -- for type-checking more efficiently.
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:15:43     - Unknown word (pronounced)    -- are significantly more pronounced in editor scenarios
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:15:94     - Unknown word (drives)        -- where type-checking drives operations like code
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:163:1     - Unknown word (took)          -- took other generic functions
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:178:25    - Unknown word (useless)       -- Instead of a relatively useless type like `(x: {})
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:181:16    - Unknown word (generalizes)   -- TypeScript 3.5 generalizes this behavior to work
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:19:88     - Unknown word (saving)        -- incremental) build mode, by saving information about how
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:20:139    - Unknown word (rebuilding)    -- that the amount of time rebuilding can be reduced by as
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:20:157    - Unknown word (reduced)       -- time rebuilding can be reduced by as much as 68% compared
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:211:16    - Unknown word (compositional) -- In addition to compositional patterns like the above
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:38:6      - Unknown word (Quantum)       -- type QuantumPerson = Omit<Person
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:73:160    - Unknown word (slipped)       -- typed `name` property slipped by.
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:75:46     - Unknown word (verifies)      -- type-checker at least verifies that all the provided
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:8:10      - Unknown word (improvements) -- ## Speed improvements
packages/documentation/copy/en/release-notes/TypeScript 3.5.md:8:4       - Unknown word (Speed)      -- ## Speed improvements
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:11:90     - Unknown word (yielded)    -- whether a value was yielded or returned from a generator
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:135:4     - Unknown word (DONE)            -- // DONE!
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:140:9     - Unknown word (Accurate)        -- ## More Accurate Array Spread
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:142:33    - Unknown word (faithful)        -- 5 targets, the most faithful emit for constructs
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:16:11     - Unknown word (Finished)   -- return "Finished!";
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:171:16    - Unknown word (Around)          -- ## Improved UX Around Promises
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:201:19    - Unknown word (Cute)            -- async function getCuteAnimals() {
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:217:7     - Unknown word (𝓱𝓮𝓵𝓵𝓸)      -- const 𝓱𝓮𝓵𝓵𝓸 = "world"; // previously
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:241:53    - Unknown word (Contexts)        -- Are Allowed in Ambient Contexts
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:245:185   - Unknown word (realized)        -- fields/issues/248), we realized we needed a way to communicat
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:297:18    - Unknown word (incredibly)      -- These flags were incredibly useful for structuring
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:297:66    - Unknown word (flexibly)        -- structuring projects more flexibly and speeding builds
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:297:79    - Unknown word (speeding)        -- projects more flexibly and speeding builds up.
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:301:102   - Unknown word (Program)         -- the `createIncrementalProgram` and `createIncrementalCompil
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:302:107   - Unknown word (newly)           -- by this API using the newly exposed `readBuilderProgram
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:302:19    - Unknown word (hydrate)         -- Users can also re-hydrate old program instances
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:308:14    - Unknown word (Aware)           -- ## Semicolon-Aware Code Edits
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:308:25    - Unknown word (Edits)           -- Semicolon-Aware Code Edits
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:311:105   - Unknown word (semicolons)      -- unconditionally added semicolons to the end of every
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:311:167   - Unknown word (disagreed)       -- unfortunately, this disagreed with many users' style
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:311:232   - Unknown word (displeased)      -- and many users were displeased with the editor inserting
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:311:259   - Unknown word (inserting)       -- displeased with the editor inserting semicolons.
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:311:83    - Unknown word (unconditionally) -- versions of TypeScript unconditionally added semicolons to
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:313:105   - Unknown word (edits)           -- applying these sorts of edits.
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:320:54    - Unknown word (conventions)     -- different module syntaxes or conventions: the one in the ECMAScript
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:323:29    - Unknown word (smarter)         -- TypeScript 3.6 is now a bit smarter about looking at your
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:329:42    - Unknown word (Artem)           -- is largely a fork of [Artem Tyurin](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:329:48    - Unknown word (Tyurin)          -- largely a fork of [Artem Tyurin](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:340:123   - Unknown word (acquisition)     -- polishing automatic type acquisition, meaning that you'll
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:340:39    - Unknown word (refreshing)      -- future, we're going to be refreshing the playground samples
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:340:98    - Unknown word (polishing)       -- adding JSX support, and polishing automatic type acquisition
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:67:10     - Unknown word (differentiation) -- To allow differentiation between returned values
packages/documentation/copy/en/release-notes/TypeScript 3.6.md:71:13     - Unknown word (Yield)           -- | IteratorYieldResult<T>
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:105:13    - Unknown word (Percentage)  -- function barPercentage(foo?: { bar: number
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:114:12    - Unknown word (Coalescing)  -- ## Nullish Coalescing
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:118:14    - Unknown word (coalescing)  -- The _nullish coalescing operator_ is another
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:118:163   - Unknown word (championing) -- has been involved with championing in TC39.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:148:90    - Unknown word (unintended)  -- volume to `0.5` which is unintended.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:151:51    - Unknown word (Wang)        -- community members [Wenlu Wang](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:151:89    - Unknown word (Titian)      -- github.com/Kingwl) and [Titian Cernicova Dragomir]
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:151:96    - Unknown word (Cernicova)   -- Kingwl) and [Titian Cernicova Dragomir](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:168:58    - Unknown word (improper)    -- used to guard against improper types being passed in
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:184:10    - Unknown word (yell)        -- function yell(str) {
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:205:90    - Unknown word (disruptive)  -- constructs in the least disruptive way.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:24:6      - Unknown word (plainly)    -- More plainly, that code snippet is
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:280:84    - Unknown word (expressive)  -- signatures are incredibly expressive.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:295:31    - Unknown word (Returning)   -- Support for `never`-Returning Functions
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:301:100   - Unknown word (exited)      -- or that the program exited.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:301:46    - Unknown word (halting)     -- exception was thrown, a halting error condition occurred
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:339:53    - Unknown word (rejects)     -- possible, so the compiler rejects certain recursive aliases
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:345:197   - Unknown word (hopefully)   -- Foo` which... well, hopefully you get the idea!
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:348:185   - Unknown word (rise)        -- synonyms), but it does give rise to some slightly surprising
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:354:37    - Unknown word (circularly)  -- alias 'ValueOrArray' circularly references itself.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:365:122   - Unknown word (eagerly)     -- structure doesn't need to be eagerly built out, TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:369:35    - Unknown word (lazier)      -- compiler was a little bit "lazier" and only calculated
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:398:10    - Unknown word (relaxation)  -- This new relaxation also lets us recursively
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:421:34    - Unknown word (underappreciated) -- benefit that is often underappreciated: both TypeScript _and
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:427:10    - Unknown word (impactful)        -- The most impactful outcome of this feature
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:427:20    - Unknown word (outcome)          -- The most impactful outcome of this feature might
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:440:15    - Unknown word (blurred)          -- * Produces a blurred image from an input
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:447:12    - Unknown word (Pixels)           -- const numPixels = width * height *
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:502:6     - Unknown word (Starts)           -- * Starts the queue if it has
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:508:38    - Unknown word (shift)            -- Job} */ (this.queue.shift())();
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:550:66    - Unknown word (Modifier)         -- The `declare` Property Modifier
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:552:1     - Unknown word (Back)             -- Back when TypeScript implemented
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:552:85    - Unknown word (abilities)        -- assumed to the best of our abilities that the following code
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:571:27    - Unknown word (seemed)           -- Unfortunately, while this seemed to be the direction
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:593:78    - Unknown word (rolling)          -- default, we've been rolling out changes incrementally
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:601:171   - Unknown word (overwritten)      -- they'll be completely overwritten.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:601:31    - Unknown word (fallout)          -- cause quite a bit of fallout for existing code that
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:617:1     - Unknown word (Secondly)         -- Secondly, using class fields
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:617:33    - Unknown word (specialize)       -- using class fields to specialize properties from base
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:646:16    - Unknown word (boil)             -- What these two boil down to is that mixing
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:650:13    - Unknown word (impacted)         -- Code that's impacted by the class fields
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:695:115   - Unknown word (upwards)          -- when targeting ES5 and upwards, since `Object.defineProperty
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:696:4     - Unknown word (achieve)          -- To achieve similar checking for
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:701:27    - Unknown word (difficulty)       -- includes feedback on difficulty of adopting the flag
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:708:25    - Unknown word (opening)          -- TypeScript 3.7, when opening a project with dependencies
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:714:4     - Unknown word (Uncalled)         -- ## Uncalled Function Checks
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:720:5     - Unknown word (Administrator)    -- isAdministrator(): boolean;
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:722:8     - Unknown word (Disturb)          -- doNotDisturb?(): boolean;
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:727:4     - Unknown word (Broken)           -- // Broken code, do not use!
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:734:21    - Unknown word (Denied)           -- throw new AccessDeniedError("User is not an
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:739:80    - Unknown word (administrator)    -- incorrectly allows non-administrator users to edit the configurati
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:772:213   - Unknown word (coercion)         -- to indicate that the coercion is intentional.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:774:84    - Unknown word (initiative)       -- jwbay) who took the initiative to create a [proof-of
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:779:1     - Unknown word (Historically)     -- Historically this comment was only
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:779:179   - Unknown word (migrations)       -- TypeScript files to make migrations easier for all users
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:781:14    - Unknown word (Formatter)        -- ## Semicolon Formatter Option
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:783:245   - Unknown word (Insiders)         -- [Visual Studio Code Insiders](https://code.visualstudio
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:783:46    - Unknown word (semicolon)        -- formatter now supports semicolon insertion and removal
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:783:56    - Unknown word (insertion)        -- now supports semicolon insertion and removal at locations
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:783:70    - Unknown word (removal)          -- semicolon insertion and removal at locations where a
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:787:158   - Unknown word (Leaving)          -- TypeScript services. Leaving the setting on its default
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:799:74    - Unknown word (proofed)          -- that version was future-proofed for this feature.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:801:30    - Unknown word (opting)           -- not a breakage per se, opting in to the [`useDefineForClass
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:817:46    - Unknown word (Conflict)         -- Type Declarations Now Conflict
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:839:60    - Unknown word (exclusively)      -- module, `SomeType` refers exclusively to the `import`ed definition
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:840:103   - Unknown word (showed)           -- like this in the wild showed that developers usually
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:840:166   - Unknown word (happening)        -- something different was happening.
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:840:98    - Unknown word (wild)             -- code like this in the wild showed that developers
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:844:33    - Unknown word (unintentional)    -- the naming conflict is unintentional and the best fix is
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:86:12     - Unknown word (circuiting) -- The "short-circuiting" behavior that optional
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:86:47     - Unknown word (chains)     -- behavior that optional chains have is limited property
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:8:13      - Unknown word (Chaining)   -- ## Optional Chaining
packages/documentation/copy/en/release-notes/TypeScript 3.7.md:90:29     - Unknown word (Computation) -- result = foo?.bar / someComputation();
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:185:47    - Unknown word (undeclared)   -- allowed users to access undeclared properties, whereas
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:204:56    - Unknown word (privates)     -- questions on which type of privates you should use as a
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:21:46     - Unknown word (remnant)    -- erased, so there's no remnant of it at runtime.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:226:72    - Unknown word (temporarily)  -- help your consumers temporarily work around not having
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:228:61    - Unknown word (inaccessible) -- privates are completely inaccessible outside of the class
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:246:63    - Unknown word (nobody)       -- strictly ensuring that nobody can take use of any
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:24:111    - Unknown word (sensitive)  -- and the use is context-sensitive.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:251:102   - Unknown word (trample)      -- to be careful not to trample over properties declared
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:258:9     - Unknown word (consideration) -- A final consideration might be speed: `private
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:259:87    - Unknown word (slower)        -- WeakMap`s, they may be slower to use.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:260:102   - Unknown word (speedy)        -- fields, and even have speedy `WeakMap` implementations
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:260:27    - Unknown word (optimize)      -- some runtimes might optimize their actual implementations
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:271:40    - Unknown word (recently)      -- that ECMAScript 2020 recently added a new syntax to
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:277:32    - Unknown word (improvement)   -- nice quality-of-life improvement to JavaScript, and TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:308:16    - Unknown word (subtlety)      -- Note there's a subtlety: top-level `await` only
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:321:44    - Unknown word (stable)        -- literals now have a stable [`target`](/tsconfig
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:327:84    - Unknown word (leverages)     -- checking, TypeScript leverages JSDoc.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:379:21    - Unknown word (Watching)      -- ## Better Directory Watching on Linux and `watchOptions
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:384:64    - Unknown word (eclipsed)      -- file watchers is often eclipsed by the number of files
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:386:1     - Unknown word (Older)         -- Older versions of TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:386:225   - Unknown word (overwhelm)     -- modules` and that can overwhelm TypeScript, often slowing
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:386:253   - Unknown word (slowing)       -- overwhelm TypeScript, often slowing editor sessions to a
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:386:282   - Unknown word (crawl)         -- editor sessions to a crawl.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:387:106   - Unknown word (volatile)      -- to give these highly volatile directories some time
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:387:140   - Unknown word (stabilize)     -- directories some time to stabilize.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:387:33    - Unknown word (waits)         -- this, TypeScript 3.8 waits slightly before installing
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:418:93    - Unknown word (heuristics)    -- times a second, but use heuristics to check certain types
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:42:42     - Unknown word (restrictions) -- that we've added a few restrictions to avoid code that might
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:437:14    - Unknown word (Loose)         -- ## "Fast and Loose" Incremental Checking
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:440:118   - Unknown word (recheck)       -- affected files, and only recheck/rebuild files that have
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:440:52    - Unknown word (rechecking)    -- TypeScript will avoid rechecking/rebuilding all truly
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:451:110   - Unknown word (seconds)       -- files from about 14 seconds to about 1 second.
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:452:141   - Unknown word (willing)       -- large codebase and are willing to defer full project
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:56:21     - Unknown word (today's)      -- - `remove`: this is today's behavior of dropping
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:56:41     - Unknown word (dropping)     -- today's behavior of dropping these imports. It's
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:60:219    - Unknown word (broadening)   -- pull/36092/) around broadening where imports from an
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:79:26     - Unknown word (Jeremy)       -- jeremy = new Person("Jeremy Bearimy");
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:79:33     - Unknown word (Bearimy)      -- new Person("Jeremy Bearimy");
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:79:5      - Unknown word (jeremy)       -- let jeremy = new Person("Jeremy
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:91:31     - Unknown word (uniquely)     -- private field name is uniquely scoped to its containing
packages/documentation/copy/en/release-notes/TypeScript 3.8.md:95:70     - Unknown word (uniqueness)   -- private fields is that uniqueness we just mentioned.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:10:1      - Unknown word (Recent)     -- Recent versions of TypeScript
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:110:19    - Unknown word (octopus)       -- console.log(47 * "octopus");
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:11:38     - Unknown word (regressions) -- that introduced a few regressions, especially when mixing
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:126:38    - Unknown word (Josh)          -- extend a big thanks to [Josh Goldberg](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:126:43    - Unknown word (Goldberg)      -- big thanks to [Josh Goldberg](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:126:94    - Unknown word (contributor)   -- JoshuaKGoldberg), the contributor who implemented this
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:131:49    - Unknown word (suppression)   -- error` can act as a suppression comment, similar to
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:141:15    - Unknown word (reasonably)    -- - you're in a reasonably-sized project with a
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:141:26    - Unknown word (sized)         -- you're in a reasonably-sized project with a proactive
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:141:47    - Unknown word (proactive)     -- sized project with a proactive team that wants to remove
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:147:7     - Unknown word (honestly)      -- - you honestly don't have the time
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:151:91    - Unknown word (forgotten)     -- an error when you've forgotten to call a function.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:15:3      - Unknown word (roar)        -- roar(): void;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:168:176   - Unknown word (ternary)       -- also now supported in ternary conditionals (i.e. the
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:168:86    - Unknown word (Alexander)     -- TypeScript/pull/36402) from [Alexander Tarasyuk](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:18:11     - Unknown word (Seal)        -- interface Seal {
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:195:34    - Unknown word (powers)        -- TypeScript compiler not only powers the TypeScript editing
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:198:358   - Unknown word (bleeding)      -- next) to stay on the bleeding edge (which is typically
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:199:41    - Unknown word (installers)    -- /2019 have [the SDK installers above] and [MSBuild
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:19:3      - Unknown word (sing)        -- singKissFromARose(): void
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:19:7      - Unknown word (Kiss)        -- singKissFromARose(): void;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:225:27    - Unknown word (Newlines)      -- Code Actions Preserve Newlines
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:227:74    - Unknown word (preserving)    -- t do a great job of preserving newlines.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:227:85    - Unknown word (newlines)      -- great job of preserving newlines.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:235:20    - Unknown word (squared)       -- // First get the squared value.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:23:7      - Unknown word (Exhibit)     -- lionExhibit: Promise<Lion>,
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:244:7     - Unknown word (highlighted)   -- If we highlighted the range from `/*start
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:249:6     - Unknown word (Squares)       -- printSquares();
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:261:3     - Unknown word (Extracting)    -- ![Extracting the for loop to a function
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:286:11    - Unknown word (Fixes)         -- ### Quick Fixes for Missing Return Expression
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:288:11    - Unknown word (occasions)     -- There are occasions where we might forget
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:300:289   - Unknown word (suspiciously)  -- function bodies that look suspiciously like object literals
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:302:14    - Unknown word (fixing)        -- ![TypeScript fixing an error where no expression
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:309:30    - Unknown word (fell)          -- where this slightly fell over is when a `tsconfig
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:331:5     - Unknown word (Parsing)       -- ### Parsing Differences in Optional
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:349:20    - Unknown word (pointed)       -- The Babel team who pointed this behavior out, and
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:34:62     - Unknown word (poisoned)    -- `undefined` somehow poisoned type of `lion` to include
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:353:29    - Unknown word (felt)          -- other words, most people felt that the original snippet
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:361:78    - Unknown word (interpretation) -- written with the new interpretation in mind.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:368:42    - Unknown word (Characters)     -- Now Invalid JSX Text Characters
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:36:91     - Unknown word (Bates)       -- pull/34501) from [Jack Bates](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:370:23    - Unknown word (forbids)        -- The JSX Specification forbids the use of the `}` and
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:371:72    - Unknown word (conformant)     -- this rule to be more conformant.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:374:112   - Unknown word (Brad)           -- enforcing this from [Brad Zacher](https://github
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:374:117   - Unknown word (Zacher)         -- enforcing this from [Brad Zacher](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:384:24    - Unknown word (Navigate)       -- let directions = <span>Navigate to: Menu Bar > Tools
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:38:118    - Unknown word (shot)        -- encourage you to give 3.9 a shot!
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:429:19    - Unknown word (Reduced)        -- ### Intersections Reduced By Discriminant Properties
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:429:30    - Unknown word (Discriminant)   -- Intersections Reduced By Discriminant Properties
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:457:44    - Unknown word (aggressive)     -- type system is more aggressive here - it notices that
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:457:65    - Unknown word (notices)        -- aggressive here - it notices that it's impossible
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:458:62    - Unknown word (collapses)      -- kind` to `never`, it collapses the type of `z` itself
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:45:14     - Unknown word (anticipated) -- We initially anticipated shipping `awaited` in
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:45:223    - Unknown word (smoothly)    -- roll it out to everyone smoothly.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:468:28    - Unknown word (Longer)         -- Getters/Setters are No Longer Enumerable
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:468:35    - Unknown word (Enumerable)     -- Setters are No Longer Enumerable
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:46:90     - Unknown word (confident)   -- branch until we feel more confident.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:471:35    - Unknown word (targeted)       -- TypeScript code that targeted ES5 and ES2015 could
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:473:201   - Unknown word (regard)         -- with ECMAScript in this regard.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:473:98    - Unknown word (pathurs)        -- ) from GitHub user [pathurs](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:47:10     - Unknown word (experimenting) -- We'll be experimenting more with the feature
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:485:106   - Unknown word (questionable)   -- issues an error on these questionable operations.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:485:13    - Unknown word (oversight)      -- This was an oversight, so TypeScript 3.9 takes
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:495:26    - Unknown word (Retained)       -- export *` is Always Retained
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:498:52    - Unknown word (directed)       -- problematic because it's type-directed and can't be emulated
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:498:74    - Unknown word (emulated)       -- directed and can't be emulated by Babel.
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:502:22    - Unknown word (refinements)    -- ## More libdom.d.ts refinements
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:526:15    - Unknown word (Mirror)         -- msHorizontalMirror: boolean;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:527:22    - Unknown word (Optimal)        -- readonly msIsLayoutOptimalForPlayback: boolean
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:528:16    - Unknown word (Stereo)         -- readonly msIsStereo3D: boolean;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:529:13    - Unknown word (Packing)        -- msStereo3DPackingMode: string;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:52:49     - Unknown word (observing)     -- on performance after observing extremely poor editing
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:52:69     - Unknown word (poor)          -- observing extremely poor editing/compilation
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:535:9     - Unknown word (Displaying)     -- webkitDisplayingFullscreen: boolean;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:53:7      - Unknown word (dived)         -- We've dived deep here, with a series
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:53:87     - Unknown word (pathological)  -- that optimize certain pathological cases involving large
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:541:25    - Unknown word (ENCRYPTED)      -- readonly MS_MEDIA_ERR_ENCRYPTED: number;
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:67:105    - Unknown word (caches)        -- and language service caches file lookups](https
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:69:77     - Unknown word (snappier)      -- work translates to a snappier experience for everyone
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:85:44     - Unknown word (squiggle)      -- will get a helpful red squiggle and an error message
packages/documentation/copy/en/release-notes/TypeScript 3.9.md:85:84     - Unknown word (misuse)        -- error message when they misuse this function, and JavaScript
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:10:91     - Unknown word (concatenates) -- array or tuple types and concatenates them together to make
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:115:6     - Unknown word (Unbounded)    -- type Unbounded = [...Strings, ...Numbers
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:128:98    - Unknown word (repeated)     -- that doesn't have to be repeated, and it gives predictable
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:130:48    - Unknown word (shines)       -- own is great, but it shines in more sophisticated
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:133:107   - Unknown word (receives)     -- and calls `f` when it receives them.
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:187:42    - Unknown word (exciting)     -- enable a lot of new exciting patterns, especially
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:193:1     - Unknown word (Improving)    -- Improving the experience around
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:193:157   - Unknown word (idioms)       -- around common JavaScript idioms - really just slicing
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:193:178   - Unknown word (slicing)      -- idioms - really just slicing and dicing argument
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:193:190   - Unknown word (dicing)       -- really just slicing and dicing argument lists and passing
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:236:4     - Unknown word (deepen)       -- To deepen the connection between
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:339:10    - Unknown word (Circuiting)   -- ## Short-Circuiting Assignment Operators
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:339:32    - Unknown word (Operators)    -- Circuiting Assignment Operators
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:346:4     - Unknown word (Addition)     -- // Addition
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:350:4     - Unknown word (Subtraction)  -- // Subtraction
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:354:4     - Unknown word (Multiplication) -- // Multiplication
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:358:4     - Unknown word (Division)       -- // Division
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:362:4     - Unknown word (Exponentiation) -- // Exponentiation
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:366:13    - Unknown word (Shift)          -- // Left Bit Shift
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:403:18    - Unknown word (proud)          -- (look, we're not proud of _all_ the code we
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:406:66    - Unknown word (circuited)      -- the operator "short-circuited" - the assignment itself
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:452:25    - Unknown word (Clause)         -- unknown` on `catch` Clause Bindings
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:474:42    - Unknown word (reminds)        -- than `any` because it reminds us that we need to perform
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:482:29    - Unknown word (unknowns)       -- Can't access values on unknowns
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:495:27    - Unknown word (peek)           -- more details you can [peek at the changes for this
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:500:112   - Unknown word (utilize)        -- other libraries would utilize them.
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:501:1     - Unknown word (Nowadays)       -- Nowadays most other libraries
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:519:142   - Unknown word (blazing)        -- and Inferno to give a blazing fast experience) --
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:519:215   - Unknown word (Frag)           -- of the new `/** @jsxFrag */` pragma comment.
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:559:125   - Unknown word (patiently)      -- this pull request and patiently working with our team
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:55:41     - Unknown word (unreasonable) -- that this is getting unreasonable.
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:566:76    - Unknown word (cached)         -- compilation would be cached in a `.tsbuildinfo`
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:568:55    - Unknown word (boost)          -- gives a great speed boost in these scenarios,
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:582:46    - Unknown word (improving)      -- our work focuses on improving editor scenarios - the
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:58:47     - Unknown word (death)        -- what we like to call "death by a thousand overloads
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:58:58     - Unknown word (thousand)     -- to call "death by a thousand overloads", and it doesn
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:592:5     - Unknown word (Convert)        -- ### Convert to Optional Chaining
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:599:95    - Unknown word (subtleties)     -- same behavior due to subtleties with truthiness/falsiness
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:614:13    - Unknown word (Semantic)       -- ### Partial Semantic Mode at Startup
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:614:30    - Unknown word (Startup)        -- Partial Semantic Mode at Startup
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:616:30    - Unknown word (suffering)      -- heard a lot from users suffering from long startup times
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:617:5     - Unknown word (culprit)        -- The culprit is usually a process
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:624:179   - Unknown word (responsive)     -- TypeScript would become fully responsive on the Visual Studio
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:624:71    - Unknown word (anecdotally)    -- improvements you'll see, but anecdotally, it used to take anywhere
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:628:22    - Unknown word (muted)          -- video loop autoplay muted style="width:100%;height
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:631:6     - Unknown word (restarting)     -- When restarting both editors on a particularl
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:635:59    - Unknown word (polish)         -- still have room for polish in UX and functionality
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:642:18    - Unknown word (fantastic)      -- Auto-import is a fantastic feature that makes coding
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:647:29    - Unknown word (quirky)         -- TypeScript has some quirky defaults that automatically
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:648:123   - Unknown word (expensive)      -- packages can be _really_ expensive.
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:650:31    - Unknown word (lousy)          -- this leads to a pretty lousy getting started experience
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:654:94    - Unknown word (incurring)      -- have types, without incurring the cost of a complete
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:665:110   - Unknown word (rolled)         -- from the ground up and rolled out!
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:677:177   - Unknown word (Safari)         -- old versions of IE and Safari
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:678:5     - Unknown word (recommends)     -- MDN recommends moving to [`self.origin
packages/documentation/copy/en/release-notes/TypeScript 4.0.md:715:5     - Unknown word (Operands)       -- ### Operands for `delete` must be
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:104:7     - Unknown word (twslash)      -- ```ts twslash
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:177:6     - Unknown word (Enthusiastic) -- type EnthusiasticGreeting<T extends string
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:18:23     - Unknown word (middel)     -- setVerticalAlignment("middel");
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:190:11    - Unknown word (refresher)    -- Just as a refresher, a mapped type can create
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:213:1     - Unknown word (Until)        -- Until now, mapped types could
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:269:1     - Unknown word (Expressing)   -- Expressing this in TypeScript's
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:272:27    - Unknown word (eases)        -- s why TypeScript 4.1 eases some restrictions on
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:302:81    - Unknown word (responsibly)  -- they should be used responsibly and sparingly.
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:305:32    - Unknown word (Collatz)      -- model numbers in the Collatz conjecture or Fibonacci
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:305:40    - Unknown word (conjecture)   -- numbers in the Collatz conjecture or Fibonacci sequence
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:305:54    - Unknown word (Fibonacci)    -- Collatz conjecture or Fibonacci sequence might be fun
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:307:106   - Unknown word (sufficiently)    -- recursion depth limit on sufficiently-complex inputs.
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:307:22    - Unknown word (computationally) -- But apart from being computationally intensive, these types
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:307:38    - Unknown word (intensive)       -- being computationally intensive, these types can hit
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:307:81    - Unknown word (recursion)       -- can hit an internal recursion depth limit on sufficiently
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:313:20    - Unknown word (Accesses)        -- ## Checked Indexed Accesses (`--noUncheckedIndexedAccess
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:340:30    - Unknown word (optimistic)      -- often convenient for optimistic code that assumes you
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:380:163   - Unknown word (bounds)          -- strictly checked, even in a bounds-checked loop.
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:385:10    - Unknown word (scream)          -- function screamLines(strs: string[]
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:495:38    - Unknown word (enumerate)       -- change is that `Reflect.enumerate` has been removed, as
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:502:25    - Unknown word (Propagated)      -- `any`/`unknown` Are Propagated in Falsy Positions
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:502:45    - Unknown word (Positions)       -- Propagated in Falsy Positions
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:516:102   - Unknown word (outward)         -- `any` and `unknown` outward instead of the type
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:518:40    - Unknown word (tended)          -- pattern we saw of this tended to be when checking
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:56:6      - Unknown word (Quantity)   -- type Quantity = "one" | "two";
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:581:17    - Unknown word (Spreads)         -- ### Conditional Spreads Create Optional Properties
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:58:6      - Unknown word (Seuss)      -- type SeussFish = `${Quantity |
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:628:47    - Unknown word (extreme)         -- pattern taken to the extreme, with hundreds of spreads
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:62:25     - Unknown word (cute)       -- This can be used beyond cute examples in release
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:647:5     - Unknown word (Unmatched)       -- ### Unmatched parameters are no longer
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:64:186    - Unknown word (former)       -- strings where each of the former strings is connected
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:64:20     - Unknown word (aligning)   -- Between vertically aligning with `"top"`, `"middle
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:64:75     - Unknown word (horizontally) -- and `"bottom"`, and horizontally aligning with `"left
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:64:9      - Unknown word (vertically) -- Between vertically aligning with `"top
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:650:104   - Unknown word (skips)           -- ), the language now skips this process entirely
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:654:60    - Unknown word (squelch)         -- a type assertion to squelch errors.
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:80:48     - Unknown word (doughnuts)    -- // error! but good doughnuts if you're ever in Seattle
packages/documentation/copy/en/release-notes/TypeScript 4.1.md:93:14     - Unknown word (Springfield)  -- location: "Springfield",
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:120:11    - Unknown word (Clown)        -- interface Clown {
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:123:11    - Unknown word (Joker)        -- interface Joker {
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:127:13    - Unknown word (Wheel)        -- let StealersWheel: [...Clown[], "me",
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:127:5     - Unknown word (Stealers)     -- let StealersWheel: [...Clown[],
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:158:43    - Unknown word (Jonas)        -- external contributor [Jonas Hübotter](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:158:49    - Unknown word (Hübotter)     -- external contributor [Jonas Hübotter](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:162:110   - Unknown word (bracketed)    -- declared by them with "bracketed" element access syntax
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:176:50    - Unknown word (misspell)     -- where it's common to misspell a property name by adding
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:17:47     - Unknown word (guesses)      -- used a set of rules and guesses for when to reuse type
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:17:91     - Unknown word (printing)     -- reuse type aliases when printing out types.
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:190:46    - Unknown word (excludes)     -- intentionally* accessing `excludes`, not `exclude`
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:202:10    - Unknown word (loosening)    -- However, loosening the restriction also
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:219:12    - Unknown word (Totally)      -- // Oops! Totally valid.
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:280:90    - Unknown word (restrictive)  -- Ctor`, but it's overly-restrictive in case we want to write
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:292:14    - Unknown word (Subclass)     -- function makeSubclassWithArea(Ctor: new (
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:329:57    - Unknown word (signals)      -- construct signature signals that you can pass in
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:338:5     - Unknown word (badda)        -- badda() {}
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:382:3     - Unknown word (Pipe)         -- # Pipe output to a utility
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:411:3     - Unknown word (Matched)      -- Matched by include pattern
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:419:41    - Unknown word (Logical)      -- Uncalled Function Checks in Logical Expressions
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:431:13    - Unknown word (Visible)      -- function getVisibleItems(elements: Element
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:441:34    - Unknown word (Explicitly)   -- Destructured Variables Can Be Explicitly Marked as Unused
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:454:4     - Unknown word (Relaxed)      -- ## Relaxed Rules Between Optional
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:470:9     - Unknown word (Anderson)     -- type WesAndersonWatchCount = {
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:471:4     - Unknown word (Fantastic)    -- "Fantastic Mr. Fox"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:472:14    - Unknown word (Tenenbaums)   -- "The Royal Tenenbaums"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:473:13    - Unknown word (Kingdom)      -- "Moonrise Kingdom"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:473:4     - Unknown word (Moonrise)     -- "Moonrise Kingdom"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:474:14    - Unknown word (Budapest)     -- "The Grand Budapest Hotel"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:474:23    - Unknown word (Hotel)        -- "The Grand Budapest Hotel"?: number;
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:474:8     - Unknown word (Grand)        -- "The Grand Budapest Hotel"?: number
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:47:116    - Unknown word (displays)     -- undefined`, it instead displays `string | number | boolean
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:490:6     - Unknown word (Batman)       -- type BatmanWatchCount = {
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:491:11    - Unknown word (Begins)       -- "Batman Begins": number | undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:492:13    - Unknown word (Knight)       -- "The Dark Knight": number | undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:492:8     - Unknown word (Dark)         -- "The Dark Knight": number | undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:493:20    - Unknown word (Rises)        -- "The Dark Knight Rises": number | undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:496:15    - Unknown word (batman)       -- declare const batmanWatchCount: BatmanWatchCount
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:503:27    - Unknown word (Great)        -- movieWatchCount["It's the Great Pumpkin, Charlie Brown
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:503:33    - Unknown word (Pumpkin)      -- vieWatchCount["It's the Great Pumpkin, Charlie Brown"] = undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:503:42    - Unknown word (Charlie)      -- s the Great Pumpkin, Charlie Brown"] = undefined
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:506:106   - Unknown word (dense)        -- to be array-like and dense:
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:522:64    - Unknown word (scaffolding)  -- called, with a quick fix scaffolding out the new contents
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:526:11    - Unknown word (strive)       -- We always strive to minimize breaking
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:532:53    - Unknown word (Observer)     -- though `Intl` and `ResizeObserver`'s may end up being
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:569:57    - Unknown word (indication)   -- but is typically an indication of a logic error in
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:571:42    - Unknown word (Parsed)       -- in JavaScript Are Not Parsed as Type Arguments
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:58:142    - Unknown word (humongous)    -- avoid some unfortunately humongous types getting displayed
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:59:49     - Unknown word (approachable) -- feel a little bit more approachable for newcomers.
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:605:46    - Unknown word (hang)         -- type-checking process hang (which is especially
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:61:225    - Unknown word (indirect)     -- request that preserves indirect aliases](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:629:5     - Unknown word (Reverting)    -- ### Reverting Template Literal Inference
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:632:20    - Unknown word (upgraded)     -- If you haven't yet upgraded past our last stable
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:636:25    - Unknown word (widen)        -- These types would then _widen_ to `string` when assigning
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:63:4      - Unknown word (Leading)      -- ## Leading/Middle Rest Elements
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:660:21    - Unknown word (believed)     -- For that reason, we believed that making template
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:663:20    - Unknown word (reverted)     -- In response, we've reverted this feature (and potential
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:677:49    - Unknown word (Uses)         -- Callback in `visitNode` Uses a Different Type
packages/documentation/copy/en/release-notes/TypeScript 4.2.md:8:23      - Unknown word (Preservation) -- Smarter Type Alias Preservation
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:103:4     - Unknown word (Assigning)  -- // Assigning other types to `thing
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:160:24    - Unknown word (renames)    -- One big one is missing renames.
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:173:7     - Unknown word (Specialized) -- class SpecializedComponent extends SomeComponen
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:264:82    - Unknown word (superclass)  -- override any method from a superclass unless you explicitly
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:268:234   - Unknown word (Paul)        -- override` keyword by [Paul Cody Johnston](https
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:268:239   - Unknown word (Cody)        -- override` keyword by [Paul Cody Johnston](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:268:244   - Unknown word (Johnston)    -- keyword by [Paul Cody Johnston](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:268:278   - Unknown word (served)      -- https://github.com/pcj) served as a basis for direction
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:269:15    - Unknown word (gratitude)   -- We extend our gratitude for putting in the time
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:374:16    - Unknown word (expands)     -- TypeScript 4.3 expands which elements in a
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:108   - Unknown word (friends)     -- pull/42458) from our friends at Bloomberg - written
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:209   - Unknown word (Kubilay)     -- dragomirtitian)and [Kubilay Kahveci](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:217   - Unknown word (Kahveci)     -- dragomirtitian)and [Kubilay Kahveci](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:274   - Unknown word (expertise)   -- mkubilayk), with support and expertise from [Joey Watts](https
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:290   - Unknown word (Joey)        -- and expertise from [Joey Watts](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:295   - Unknown word (Watts)       -- expertise from [Joey Watts](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:338   - Unknown word (Palmer)      -- com/joeywatts), [Rob Palmer](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:424:387   - Unknown word (Clure)       -- robpalme), and [Tim McClure](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:468:3     - Unknown word (comparer)    -- comparer: (x: T, y: T) => number
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:470:12    - Unknown word (bail)        -- // Early bail-out if we have a Set
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:476:34    - Unknown word (consecutive) -- the array, then remove consecutive duplicates.
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:486:16    - Unknown word (splice)      -- collection.splice(i + 1, j - i);
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:492:81    - Unknown word (arose)       -- aside, and assume it arose from the requirements
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:501:52    - Unknown word (bunch)       -- you'd end up with a bunch of errors as soon as
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:50:32     - Unknown word (forces)     -- no good - `unknown` forces people reading `size
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:550:4     - Unknown word (hypothetically) -- If hypothetically TypeScript tried that
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:612:71    - Unknown word (contributed)    -- TypeScript/pull/39175) was contributed by [Jack Works](https
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:15    - Unknown word (spear)          -- This work was spear-headed by [Tobias Koppers
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:151   - Unknown word (serving)        -- TypeScript/pull/43079), serving as inspiration for
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:162   - Unknown word (inspiration)    -- pull/43079), serving as inspiration for [the ensuing pull
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:183   - Unknown word (ensuing)        -- inspiration for [the ensuing pull request](https
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:21    - Unknown word (headed)         -- This work was spear-headed by [Tobias Koppers]
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:32    - Unknown word (Tobias)         -- was spear-headed by [Tobias Koppers](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:672:39    - Unknown word (Koppers)        -- spear-headed by [Tobias Koppers](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:674:26    - Unknown word (reductions)     -- have seen significant reductions of `.tsbuildinfo` file
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:674:60    - Unknown word (sizes)          -- `.tsbuildinfo` file sizes including
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:680:33    - Unknown word (savings)        -- say, these sorts of savings in size translate to
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:682:11    - Unknown word (Calculations)   -- ## Lazier Calculations in `--incremental` and
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:682:4     - Unknown word (Lazier)         -- ## Lazier Calculations in `--incrementa
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:682:57    - Unknown word (Compilations)   -- incremental` and `--watch` Compilations
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:688:48    - Unknown word (ordinarily)     -- information that would ordinarily be computed up-front
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:689:239   - Unknown word (afterwards)     -- information will be saved afterwards.
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:690:79    - Unknown word (warm)           -- watch` builds will "warm up" and get faster at
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:694:135   - Unknown word (ensued)         -- com/sokra), whose work ensued in [the resulting final
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:695:72    - Unknown word (opportunities)  -- helping us find these opportunities for improvements!
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:697:21    - Unknown word (Completions)    -- ## Import Statement Completions
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:714:4     - Unknown word (alleviate)      -- To alleviate this, we've leveraged
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:715:22    - Unknown word (deal)           -- Auto-imports already deal with the issue of not
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:732:53    - Unknown word (plant)          -- go-to-definition on `plantCarrot` in `@link plantCarrot
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:732:58    - Unknown word (Carrot)         -- definition on `plantCarrot` in `@link plantCarrot
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:738:10    - Unknown word (harvest)        -- function harvestCarrot(carrot: Carrot
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:738:24    - Unknown word (carrot)         -- function harvestCarrot(carrot: Carrot) {}
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:741:18    - Unknown word (spring)         -- * Call early in spring for best results. Added
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:741:43    - Unknown word (Added)          -- spring for best results. Added in v2.1.0.
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:745:17    - Unknown word (gardening)      -- // TODO: some gardening
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:749:29    - Unknown word (requesting)     -- Jumping to definition and requesting quick info on a `@link
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:749:3     - Unknown word (Jumping)        -- ![Jumping to definition and requesting
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:756:1     - Unknown word (They'll)        -- They'll typically be written
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:772:113   - Unknown word (Gesture)        -- RTCStatsEventInit`, `MSGestureEvent`, `DeviceLightEvent
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:772:203   - Unknown word (Authentication) -- eWorkerMessageEvent`, and `WebAuthentication` have all been removed
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:772:93    - Unknown word (Stats)          -- AssertionOptions`, `RTCStatsEventInit`, `MSGestureEvent
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:779:150   - Unknown word (preparation)    -- had implemented it. In preparation for this, in TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:77:50     - Unknown word (broader)    -- set` accessor takes a broader set of types (`string
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:805:29    - Unknown word (recall)         -- those cases, an enum can recall each value that it potentiall
packages/documentation/copy/en/release-notes/TypeScript 4.3.md:8:4       - Unknown word (Separate)   -- ## Separate Write Types on Properties
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:105:11    - Unknown word (upper)         -- const upperA = inputA.toUpperCase
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:10:33     - Unknown word (probe)         -- JavaScript, we often have to probe a value in different
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:115:5     - Unknown word (neat)          -- One neat feature here is that
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:115:51    - Unknown word (transitively)  -- this analysis works transitively.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:134:21    - Unknown word (cutoff)        -- Note that there's a cutoff - TypeScript doesn't
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:186:122   - Unknown word (quirk)         -- have an intentional quirk where they can accept
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:192:69    - Unknown word (keyed)         -- declare a type that can be keyed on arbitrary `symbol
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:262:4     - Unknown word (Equivalent)    -- // Equivalent to
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:272:4     - Unknown word (Defaulting)    -- ## Defaulting to the `unknown` Type
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:284:15    - Unknown word (Probably)      -- err.thisWillProbablyFail(); // Allowed, because
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:290:82    - Unknown word (chore)         -- catch` clause was a chore.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:339:4     - Unknown word (Exact)         -- ## Exact Optional Property Types
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:44:146    - Unknown word (lost)          -- guard, TypeScript simply lost that information.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:46:90     - Unknown word (casts)         -- type assertions (a.k.a. casts).
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:470:205   - Unknown word (restyle)       -- TypeScript/pull/44409) and [restyle the `--help` menu](https
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:470:28    - Unknown word (Song)          -- to work in part by [Song Gao](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:470:76    - Unknown word (brought)       -- com/ShuiRuTian), we've brought in changes to [update
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:472:56    - Unknown word (bucketed)      -- where the output is bucketed into several different
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:485:17    - Unknown word (Normalization) -- ### Faster Path Normalization
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:487:46    - Unknown word (normalization) -- do several types of "normalization" on file paths to get
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:488:37    - Unknown word (backslashes)   -- things like replacing backslashes with slashes, or removing
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:488:54    - Unknown word (slashes)       -- replacing backslashes with slashes, or removing intermediate
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:491:109   - Unknown word (massive)       -- significantly more in massive projects that we've
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:498:27    - Unknown word (hundred)       -- projects with several hundred mappings, the reduction
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:503:56    - Unknown word (redoing)       -- TypeScript would end up redoing type-checking work under
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:505:65    - Unknown word (ported)        -- change has also been back-ported to TypeScript 4.3.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:509:23    - Unknown word (Generation)    -- # Faster Source Map Generation for Big Outputs
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:514:36    - Unknown word (David)         -- extend our thanks to [David Michon](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:514:42    - Unknown word (Michon)        -- our thanks to [David Michon](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:518:130   - Unknown word (rebuilt)       -- which files need to be rebuilt.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:519:84    - Unknown word (irrelevant)    -- that information is irrelevant since every project
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:527:135   - Unknown word (invasive)      -- suggestions that aren't _too_ invasive.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:527:95    - Unknown word (surfacing)     -- suggestions, and ways of surfacing suggestions that aren
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:529:34    - Unknown word (spelling)      -- TypeScript now issues spelling suggestions in plain
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:537:4     - Unknown word (Inlay)         -- ## Inlay Hints
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:539:38    - Unknown word (inlay)         -- provides support for _inlay hints_ which can help
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:540:44    - Unknown word (ghost)         -- a sort of friendly "ghost text".
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:546:163   - Unknown word (July)          -- shipped as [part of the July 2021 (1.59) release
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:547:129   - Unknown word (insiders)      -- com/updates/v1_59) or [insiders](https://code.visualstudio
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:54:57     - Unknown word (charm)         -- criminated unions work like a charm.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:550:36    - Unknown word (Completion)    -- Imports Show True Paths in Completion Lists
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:556:102   - Unknown word (calendar)      -- example, the label for 'calendarFormat' is 'node_modules
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:556:32    - Unknown word (unwieldy)      -- completion list containing unwieldy paths containing 'node
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:558:45    - Unknown word (misleading)    -- being unwieldy and often misleading, especially given that
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:564:131   - Unknown word (batches)       -- module specifiers in batches as you type more characters
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:564:291   - Unknown word (warms)         -- editing experience "warms up", they should get
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:564:362   - Unknown word (keystroke)     -- actual path after another keystroke or two.
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:573:10    - Unknown word (Compliant)     -- ### More-Compliant Indirect Calls for Imported
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:573:20    - Unknown word (Indirect)      -- ### More-Compliant Indirect Calls for Imported Functions
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:590:41    - Unknown word (discards)      -- TypeScript 4.4 intentionally discards the `this` value when
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:620:5     - Unknown word (Broader)       -- ### Broader Always-Truthy Promise
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:8:29      - Unknown word (Aliased)    -- Control Flow Analysis of Aliased Conditions and Discriminants
packages/documentation/copy/en/release-notes/TypeScript 4.4.md:8:52      - Unknown word (Discriminants) -- Aliased Conditions and Discriminants
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:112:12    - Unknown word (Kagami)     -- Thanks to [Kagami S. Rosylight](https
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:112:22    - Unknown word (Rosylight)  -- Thanks to [Kagami S. Rosylight](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:118:19    - Unknown word (Elimination) -- ## Tail-Recursion Elimination on Conditional Types
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:118:4     - Unknown word (Tail)       -- ## Tail-Recursion Elimination
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:118:9     - Unknown word (Recursion)  -- ## Tail-Recursion Elimination on Conditional
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:120:100   - Unknown word (expansions)  -- recursion, or any type expansions that can take a long
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:120:27    - Unknown word (gracefully)  -- TypeScript often needs to gracefully fail when it detects
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:121:110   - Unknown word (infinitely)  -- trying to pick apart an infinitely-deep type, or working
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:124:6     - Unknown word (Infinite)    -- type InfiniteBox<T> = { item: InfiniteBox
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:126:6     - Unknown word (Unpack)      -- type Unpack<T> = T extends { item
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:132:70    - Unknown word (plenty)      -- useless, but there are plenty of types that are actually
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:133:31    - Unknown word (Trim)        -- example, the following `TrimLeft` type removes spaces
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:14:15     - Unknown word (occasional) -- There are two occasional downsides to including
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:154:127   - Unknown word (parsers)     -- strings - for example, parsers for URL routers.
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:157:22    - Unknown word (grace)       -- But there's a saving grace: `TrimLeft` is written
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:159:130   - Unknown word (triggering)  -- in a way that avoids triggering many of type recursion
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:163:102   - Unknown word (generous)    -- but they are much more generous.
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:165:45    - Unknown word (optimized)   -- following type _won't_ be optimized, since it uses the result
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:168:9     - Unknown word (Chars)       -- type GetChars<S> =
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:169:24    - Unknown word (Char)        -- S extends `${infer Char}${infer Rest}` ? Char
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:172:88    - Unknown word (accumulator) -- helper that takes an "accumulator" type parameter, just
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:182:21    - Unknown word (Elision)     -- ## Disabling Import Elision
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:182:4     - Unknown word (Disabling)   -- ## Disabling Import Elision
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:190:34    - Unknown word (Dangerous)   -- console.log(new Animal().isDangerous())");
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:217:46    - Unknown word (markup)      -- generate some code based on markup outside of their `<script
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:24:31     - Unknown word (publishes)  -- example, today TypeScript publishes versions of the DOM
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:250:80    - Unknown word (legitimately) -- when an import can be legitimately dropped.
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:289:18    - Unknown word (Presence)     -- ## Private Field Presence Checks
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:311:105   - Unknown word (brand)        -- is named "ergonomic brand checks" - because private
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:311:95    - Unknown word (ergonomic)    -- the proposal is named "ergonomic brand checks" - because
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:314:152   - Unknown word (Ashley)       -- TypeScript/pull/44648): [Ashley Claymore](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:314:159   - Unknown word (Claymore)     -- pull/44648): [Ashley Claymore](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:331:19    - Unknown word (bunny)        -- type: "fluffy bunny"
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:345:14    - Unknown word (thank)        -- We'd like to thank [Wenlu Wang](https:
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:349:34    - Unknown word (expressivity) -- 5 brings some extra expressivity to our JSDoc support
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:371:6     - Unknown word (reminder)     -- As a reminder, JSDoc type assertions
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:371:79    - Unknown word (Want)         -- /** @type {TheTypeWeWant} */` and are followed
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:38:111    - Unknown word (patient)    -- extremely helpful and patient as we've been building
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:38:35     - Unknown word (saschanaz)  -- give a shout-out to [saschanaz](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:406:137   - Unknown word (insensitive)  -- that are typically case-insensitive, like Windows and MacOS
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:407:35    - Unknown word (sped)         -- codebases, this change sped up project loading by
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:411:4     - Unknown word (Snippet)      -- ## Snippet Completions for JSX
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:426:30    - Unknown word (Unresolved)   -- Better Editor Support for Unresolved Types
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:432:3     - Unknown word (Hovering)     -- ![Hovering over a signature where
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:437:60    - Unknown word (continues)    -- Buffer` isn't found, it continues to use the name `Buffer
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:441:41    - Unknown word (unresolved)   -- displays `type Buffer = /* unresolved */ any;`](https://devblogs
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:443:29    - Unknown word (smoother)     -- Altogether, this provides a smoother experience when TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:457:131   - Unknown word (incompatibilities) -- change that might cause incompatibilities;
packages/documentation/copy/en/release-notes/TypeScript 4.5.md:8:4       - Unknown word (Supporting) -- ## Supporting `lib` from `node_modules
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:140:93    - Unknown word (encountering) -- infinitely expanding after encountering a certain depth check
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:141:29    - Unknown word (embarrassingly) -- usually enough, but embarrassingly there were some false
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:141:66    - Unknown word (negatives)      -- there were some false-negatives that this wouldn't catch
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:159:70    - Unknown word (positives)      -- concerned with false-positives from explicitly-written
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:160:74    - Unknown word (lazylog)        -- redux-immutable`, `react-lazylog`, and `yup` saw a 5
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:162:49    - Unknown word (cherry)         -- change because it was cherry-picked into TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:206:30    - Unknown word (Dependent)      -- Control Flow Analysis for Dependent Parameters
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:246:101   - Unknown word (Sascha)         -- pull/46291) by [Kagami Sascha Rosylight (saschanaz
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:248:4     - Unknown word (Removed)        -- ## Removed Unnecessary Arguments
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:270:157   - Unknown word (drops)          -- TypeScript 4.6 now drops the `void 0` argument
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:306:80    - Unknown word (courtesy)       -- 47257) was provided courtesy of [Alexander Tarasyuk
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:308:20    - Unknown word (Binding)        -- ## More Syntax and Binding Errors in JavaScript
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:31:101    - Unknown word (rejecting)  -- referenced, but it ended up rejecting a lot of valid code
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:31:14     - Unknown word (cheap)      -- This made it cheap to check that `super
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:338:108   - Unknown word (hearing)        -- we're interested in hearing some early feedback
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:341:21    - Unknown word (Analyzer)       -- ## TypeScript Trace Analyzer
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:344:187   - Unknown word (diagnose)       -- types, or sometimes help diagnose issues in the TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:345:175   - Unknown word (visualizers)    -- read in existing trace visualizers.
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:347:136   - Unknown word (digestible)     -- trace) to get a more digestible view of this information
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:34:36     - Unknown word (Joshua)     -- extend our thanks to [Joshua Goldberg](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:354:12    - Unknown word (Rests)          -- ### Object Rests Drop Unspreadable Members
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:354:23    - Unknown word (Unspreadable)   -- # Object Rests Drop Unspreadable Members from Generic
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:356:60    - Unknown word (unspreadable)   -- members that appear to be unspreadable on generic objects.
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:404:37    - Unknown word (Grammar)        -- Files Always Receive Grammar and Binding Errors
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:406:42    - Unknown word (grammar)        -- TypeScript would ignore most grammar errors in JavaScript
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:8:4       - Unknown word (Allowing)   -- ## Allowing Code in Constructors
packages/documentation/copy/en/release-notes/TypeScript 4.6.md:93:33     - Unknown word (challenges) -- has some interesting challenges due to the fact that
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:12:1      - Unknown word (Interoperating) -- Interoperating between the two brings
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:145:85    - Unknown word (synthesized)    -- named imports will be synthesized, but TypeScript will
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:153:33    - Unknown word (boils)          -- CommonJS module, this just boils down to a `require(
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:154:26    - Unknown word (portable)       -- will make code less portable on runtimes like the
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:174:42    - Unknown word (Self)           -- Exports, Imports, and Self-Referencing
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:174:47    - Unknown word (Referencing)    -- Exports, Imports, and Self-Referencing
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:204:119   - Unknown word (corresponded)   -- declaration files that corresponded to that entry.
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:239:8     - Unknown word (Fall)           -- // Fall-back for older versions
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:251:1     - Unknown word (Attempting)     -- Attempting to use a single `.d
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:256:19    - Unknown word (Wanted)         -- ### Your Feedback Wanted!
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:259:43    - Unknown word (ambitious)      -- features has been an ambitious under-taking, and that
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:268:88    - Unknown word (nearby)         -- a `.mjs`, or have a nearby `package.json` with
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:269:168   - Unknown word (acting)         -- file is a script file acting on the global scope
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:285:79    - Unknown word (seeking)        -- old behavior of only seeking out `import` and `export
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:289:30    - Unknown word (Bracketed)      -- Control-Flow Analysis for Bracketed Element Access
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:334:39    - Unknown word (Oleksandr)      -- extend our gratitude to [Oleksandr Tarasiuk](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:334:49    - Unknown word (Tarasiuk)       -- gratitude to [Oleksandr Tarasiuk](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:338:37    - Unknown word (granular)       -- can now perform more granular inferences from functions
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:379:16    - Unknown word (gathers)        -- TypeScript now gathers functions that could
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:398:99    - Unknown word (Hammer)         -- es of `Wrench`es and `Hammer`s.
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:402:24    - Unknown word (hammer)         -- function makeHammerBox(hammer: Hammer) {
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:411:17    - Unknown word (wrapping)       -- These work, but wrapping a call to `makeBox`
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:411:55    - Unknown word (wasteful)       -- to `makeBox` is a bit wasteful, and writing the full
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:471:73    - Unknown word (grabs)          -- least one element and grabs the type of the first
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:485:37    - Unknown word (manual)         -- it's slightly more "manual" and less declarative
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:487:78    - Unknown word (trickier)       -- this could get a lot trickier, so `infer` can simplify
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:490:31    - Unknown word (nesting)        -- that second level of nesting, TypeScript 4.7 now
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:525:1     - Unknown word (Figuring)       -- Figuring out whether any two
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:525:54    - Unknown word (substitutable)  -- different `Getter`s are substitutable for one another depends
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:559:36    - Unknown word (interchanged)   -- State<T>`s can't be interchanged unless their `T`s are
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:56:4      - Unknown word (overlay)        -- To overlay the way TypeScript works
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:588:1     - Unknown word (Calculating)    -- Calculating variance ahead of time
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:588:75    - Unknown word (comparisons)    -- checker to skip deeper comparisons and just compare type
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:589:106   - Unknown word (circularities)  -- calculation may find circularities that can't be accurately
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:623:46    - Unknown word (markers)        -- add explicit variance markers, we would encourage
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:623:74    - Unknown word (thoughtful)     -- we would encourage thoughtful and precise use of them
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:627:44    - Unknown word (bottleneck)     -- variance calculation is a bottleneck on type-checking time
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:627:89    - Unknown word (experimentally) -- checking time can be done experimentally, and determined using
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:659:38    - Unknown word (Native)         -- be useful for React Native projects where each
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:661:110   - Unknown word (Adam)           -- contributed thanks to [Adam Foxman](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:661:115   - Unknown word (Foxman)         -- contributed thanks to [Adam Foxman](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:691:18    - Unknown word (Merged)         -- export interface MergedType extends TypeFromRequire
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:710:32    - Unknown word (unstable)       -- mode assertions are unstable. Use nightly TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:721:161   - Unknown word (shadowed)       -- those files are normally shadowed by `.d.ts` files.
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:725:71    - Unknown word (jumps)          -- of the yargs package jumps the editor to an index
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:730:101   - Unknown word (collaborating)  -- it's something we're collaborating on.
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:734:16    - Unknown word (Organize)       -- ## Group-Aware Organize Imports
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:737:39    - Unknown word (blunt)          -- could be a bit of a blunt instrument, and would
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:737:45    - Unknown word (instrument)     -- be a bit of a blunt instrument, and would often naively
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:773:42    - Unknown word (grouped)        -- we have our imports grouped in a specific way, then
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:792:36    - Unknown word (Minh)           -- extend our thanks to [Minh Quy](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:797:6     - Unknown word (completing)     -- When completing members in an object
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:807:18    - Unknown word (strives)        -- While TypeScript strives to avoid major breaks
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:860:18    - Unknown word (Grabbing)       -- console.log(`Grabbing property '${key}'.`
packages/documentation/copy/en/release-notes/TypeScript 4.7.md:904:23    - Unknown word (witnessable)    -- This was almost never witnessable for fixed-length tuples
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:112:81    - Unknown word (greedily)   -- literal types out it will greedily try to parse out as
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:115:49    - Unknown word (tripped)    -- string can be "round-tripped", then it will fall
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:127:132   - Unknown word (rebuilds)   -- watch` mode, which makes rebuilds faster and avoids messing
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:127:159   - Unknown word (messing)    -- rebuilds faster and avoids messing with other build tools
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:127:46    - Unknown word (spending)   -- is now able to avoid spending time updating timestamps
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:13:36     - Unknown word (spirit)     -- unknown` is close in spirit to the union type `
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:168:24    - Unknown word (Randomly)   -- declare function chooseRandomly<T>(x: T, y: T): T;
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:194:33    - Unknown word (hinted)     -- pattern `[x, y, z]` hinted that `f` should produce
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:196:10    - Unknown word (suddenly)   -- It can't suddenly conjure up a new array
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:196:19    - Unknown word (conjure)    -- It can't suddenly conjure up a new array-like
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:203:102   - Unknown word (curious)    -- pull/49086) if you're curious to learn more.
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:205:25    - Unknown word (Especially) -- File-Watching Fixes (Especially Across `git checkout
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:205:48    - Unknown word (checkout)   -- Especially Across `git checkout`s)
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:208:15    - Unknown word (symptoms)   -- Sometimes the symptoms are stale or inaccurate
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:209:1     - Unknown word (Frequently) -- Frequently these occur on Unix
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:212:47    - Unknown word (inodes)     -- Linux and macOS utilize [inodes](https://en.wikipedia
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:215:18    - Unknown word (efficient)  -- To be a bit more efficient, TypeScript tries to
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:217:28    - Unknown word (reusing)    -- TypeScript would end up reusing the watcher object instead
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:112   - Unknown word (invested)   -- team at Airtable who invested lots of time in investigating
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:137   - Unknown word (investigating) -- invested lots of time in investigating the issues they were
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:172   - Unknown word (experiencing)  -- the issues they were experiencing and pointing out the
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:36    - Unknown word (Marc)       -- extend our thanks to [Marc Celani](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:41    - Unknown word (Celani)     -- our thanks to [Marc Celani](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:220:99    - Unknown word (Airtable)   -- at) and his team at Airtable who invested lots of
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:233:38    - Unknown word (globs)         -- Code, file names or globs can be added under
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:245:51    - Unknown word (pollute)       -- of exports that can pollute the auto-imports list
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:249:4     - Unknown word (Correctness)   -- ## Correctness Fixes and Breaking Changes
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:24:144    - Unknown word (tossed)     -- undefined` just get tossed away.
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:252:66    - Unknown word (adapting)      -- more likely to require adapting existing code.
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:259:38    - Unknown word (Assignable)    -- onstrained Generics No Longer Assignable to `{}`
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:259:5     - Unknown word (Unconstrained) -- ### Unconstrained Generics No Longer Assignable
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:261:119   - Unknown word (unconstrained) -- issue an error when an unconstrained type parameter is used
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:293:81    - Unknown word (propagating)   -- undefined` can be fixed by propagating the appropriate constraints
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:337:36    - Unknown word (precede)       -- export` keyword must precede the decorator.
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:345:82    - Unknown word (architecture)  -- *abstract*, and our architecture expects syntax tree
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:346:109   - Unknown word (intersperse)   -- gracefully parse, and intersperse, modifiers and decorators
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:403:8     - Unknown word (deprecations)  -- * [the deprecations](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:404:4     - Unknown word (exposing)      -- * [exposing the predicate functions
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:41:43     - Unknown word (sensible)   -- allowed us to bring in sensible improvements in control
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:45:16     - Unknown word (Unknownish) -- function narrowUnknownishUnion(x: {} | null |
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:460:29    - Unknown word (Directly)      -- Binding Patterns Do Not Directly Contribute to Inference
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:460:38    - Unknown word (Contribute)    -- Patterns Do Not Directly Contribute to Inference Candidates
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:460:62    - Unknown word (Candidates)    -- Contribute to Inference Candidates
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:465:12    - Unknown word (Renames)       -- ### Unused Renames in Binding Patterns
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:492:48    - Unknown word (uhyo)          -- thanks to [GitHub user uhyo](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:65:77     - Unknown word (intersects) -- TypeScript now just intersects it with `{}` - which
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:82:93     - Unknown word (cuts)       -- for many many paper cuts that have been reported
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:84:10     - Unknown word (specifics)  -- For more specifics on these improvements
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:8:26      - Unknown word (Reduction)  -- Improved Intersection Reduction, Union Compatibility
packages/documentation/copy/en/release-notes/TypeScript 4.8.md:91:4      - Unknown word (Grabs)      -- // Grabs the first element of
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:103:43    - Unknown word (proposing)  -- you can see the [issue proposing this](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:106:4     - Unknown word (Unlisted)   -- ## Unlisted Property Narrowing with
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:10:46     - Unknown word (dilemma)    -- are often faced with a dilemma: we want to ensure that
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:124:5     - Unknown word (saturation) -- saturation: number;
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:157:1     - Unknown word (Rewriting)  -- Rewriting this to canonical TypeScript
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:16:7      - Unknown word (palette)    -- const palette = {
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:184:40    - Unknown word (remained)   -- type of `packageJSON` remained `object`.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:19:5      - Unknown word (bleu)       -- bleu: [0, 0, 255]
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:20:10     - Unknown word (sacrebleu)  -- // ^^^^ sacrebleu - we've made a typo
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:24:12     - Unknown word (Normalized) -- const greenNormalized = palette.green.toUpperCase
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:268:14    - Unknown word (symmetrically) -- But at least symmetrically *everything* is always
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:293:56    - Unknown word (beginner)      -- strictly help catch beginner errors, similar to how
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:299:33    - Unknown word (leaned)        -- versions, TypeScript leaned heavily on *polling
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:300:61    - Unknown word (periodically)  -- the state of a file periodically for updates.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:302:126   - Unknown word (interrupted)   -- to periodically get interrupted and check for updates
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:302:183   - Unknown word (nothing's)     -- the file, even when nothing's changed.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:303:42    - Unknown word (noticeable)    -- files, this might not be noticeable;
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:307:28    - Unknown word (announce)      -- Instead of polling, we can announce that we're interested
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:308:100   - Unknown word (epoll)         -- IoCompletionPort`, `kqueue`, `epoll`, and `inotify`.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:308:113   - Unknown word (inotify)       -- kqueue`, `epoll`, and `inotify`.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:308:38    - Unknown word (facilities)    -- platforms in use provide facilities and APIs like `CreateIoComple
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:308:90    - Unknown word (kqueue)        -- CreateIoCompletionPort`, `kqueue`, `epoll`, and `inotify
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:309:16    - Unknown word (abstracts)     -- Node.js mostly abstracts these away by providing
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:311:119   - Unknown word (unavailability) -- api/fs.html#inodes), [unavailability on certain file systems
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:311:362   - Unknown word (exhaustion)     -- and even file watcher exhaustion!
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:312:39    - Unknown word (lunch)          -- it's not quite a free lunch, especially if you're
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:314:56    - Unknown word (denominator)    -- pick the lowest common denominator: polling.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:318:37    - Unknown word (harden)         -- to get feedback and harden our file-watching implementat
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:319:152   - Unknown word (worthwhile)     -- the default would be a worthwhile investment.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:325:1     - Unknown word (Developers)     -- Developers using more exotic set
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:325:23    - Unknown word (exotic)         -- Developers using more exotic set-ups where source
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:325:266   - Unknown word (remotely)       -- SSH and run TypeScript remotely so that it has direct
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:325:56    - Unknown word (resides)        -- ups where source code resides on a networked file
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:336:17    - Unknown word (Moose)          -- import { Zebra, Moose, HoneyBadger } from
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:336:24    - Unknown word (Honey)          -- import { Zebra, Moose, HoneyBadger } from "./zoo
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:361:138   - Unknown word (triggerable)    -- - not as a manually triggerable command.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:373:47    - Unknown word (wish)           -- to all editors that wish to use either command
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:374:127   - Unknown word (Palette)        -- commands via its Command Palette.
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:393:21    - Unknown word (workhorse)      -- `forEachChild` is a workhorse for traversing syntax
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:393:35    - Unknown word (traversing)     -- is a workhorse for traversing syntax nodes in the
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:394:73    - Unknown word (spent)          -- % reduction of time spent in our binding phase
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:394:94    - Unknown word (phase)          -- spent in our binding phase and across language
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:399:13    - Unknown word (exploration)    -- The initial exploration in `forEachChild` was
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:399:146   - Unknown word (Artemis)        -- fast-in-js.html) by [Artemis Everfree](https://artemis
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:399:154   - Unknown word (Everfree)       -- js.html) by [Artemis Everfree](https://artemis.sh
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:416:19    - Unknown word (faulty)         -- Furthermore, some faulty code in our type-checker
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:416:51    - Unknown word (prevented)      -- in our type-checker prevented these special types
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:417:16    - Unknown word (defers)         -- TypeScript now defers intersecting these types
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:417:23    - Unknown word (intersecting)   -- TypeScript now defers intersecting these types until it
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:418:161   - Unknown word (modest)         -- suite, we saw a more modest 3% reduction in type
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:424:13    - Unknown word (substitition)   -- * [Optimize substitition types](https://github
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:424:4     - Unknown word (Optimize)       -- * [Optimize substitition types]
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:439:31    - Unknown word (Elides)         -- JavaScript Emit No Longer Elides Imports
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:469:18    - Unknown word (Prioritized)    -- ### `exports` is Prioritized Over `typesVersions
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:471:36    - Unknown word (prioritized)    -- TypeScript incorrectly prioritized the `typesVersions`
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:472:16    - Unknown word (impacts)        -- If this change impacts your library, you may
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:494:17    - Unknown word (Replaced)       -- ## `substitute` Replaced With `constraint` on
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:494:48    - Unknown word (Substitution)   -- With `constraint` on `SubstitutionType`s
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:76:14     - Unknown word (kinda)      -- "blue": "kinda",
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:77:6      - Unknown word (platypus)   -- "platypus": false
packages/documentation/copy/en/release-notes/TypeScript 4.9.md:81:76     - Unknown word (retained)   -- blue' properties are retained.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1037:10   - Unknown word (restrict)      -- They can restrict how callers can actually
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1037:67   - Unknown word (refine)        -- use our functions, and refine what results they'll
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1042:37   - Unknown word (Fraction)      -- printValue(num: number, maxFractionDigits?: number): void
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1042:45   - Unknown word (Digits)        -- number, maxFractionDigits?: number): void;
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1058:77   - Unknown word (fractional)    -- to determine how many fractional digits we can print
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1058:88   - Unknown word (digits)        -- how many fractional digits we can print.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1106:102  - Unknown word (Lenarcik)      -- ) thanks to [Tomasz Lenarcik](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1106:95   - Unknown word (Tomasz)        -- pull/51234) thanks to [Tomasz Lenarcik](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1135:28   - Unknown word (Sorting)       -- Case-Insensitive Import Sorting in Editors
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1135:9    - Unknown word (Insensitive)   -- ## Case-Insensitive Import Sorting in Editors
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1137:81   - Unknown word (organizing)    -- powers the experience for organizing and sorting imports
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1137:96   - Unknown word (sorting)       -- experience for organizing and sorting imports and exports
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1144:5    - Unknown word (Toggle)        -- Toggle,
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1151:31   - Unknown word (sensitivity)   -- don't* care about case-sensitivity, then this list is clearly
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1162:67   - Unknown word (fight)         -- ESLint typically won't "fight" each other over how
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1180:15   - Unknown word (unicode)       -- // - "unicode"
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1181:25   - Unknown word (Collation)     -- "organizeImportsCollation": "ordinal",
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1203:41   - Unknown word (diacritics)    -- letters with accent marks/diacritics get sorted distinctly
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1215:58   - Unknown word (detecting)     -- original work for auto-detecting and specifying case
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1215:88   - Unknown word (insensitivity) -- and specifying case-insensitivity](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1217:4    - Unknown word (Exhaustive)    -- ## Exhaustive `switch`/`case` Completions
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1220:40   - Unknown word (scaffolds)     -- offer a completion that scaffolds out each uncovered
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1220:59   - Unknown word (uncovered)     -- that scaffolds out each uncovered `case`.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1226:11   - Unknown word (Memory)        -- ## Speed, Memory, and Package Size Optimizatio
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1226:36   - Unknown word (Optimizations) -- Memory, and Package Size Optimizations
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1228:102  - Unknown word (algorithmic)   -- data structures, and algorithmic implementations.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1239:1    - Unknown word (Outlook)       -- Outlook Web build time | 82
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1249:159  - Unknown word (hoisting)      -- optimizations like scope hoisting.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1250:21   - Unknown word (revisiting)    -- Using this tooling, revisiting our packaging strategy
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1250:94   - Unknown word (shaved)        -- deprecated code has shaved off about 26.4 MB from
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1253:28   - Unknown word (uniformity)    -- TypeScript also added more uniformity to internal object types
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1253:94   - Unknown word (slimmed)       -- the compiler, and also slimmed the data stored on some
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1254:30   - Unknown word (megamorphic)   -- reduced polymorphic and megamorphic use sites, while offsetting
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1254:59   - Unknown word (offsetting)    -- megamorphic use sites, while offsetting most of the necessary
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1256:27   - Unknown word (caching)       -- also performed some caching when serializing information
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1258:42   - Unknown word (machinery)     -- caches some commonly used machinery to reuse across these
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1263:121  - Unknown word (reproduce)     -- consistently been able to reproduce wins between 10% to
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1268:4    - Unknown word (Migrate)       -- * [Migrate to Modules](https:/
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1269:11   - Unknown word (Monomorphization) -- * [`Node` Monomorphization](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1272:14   - Unknown word (Caching)          -- * [`Printer` Caching](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1272:5    - Unknown word (Printer)          -- * [`Printer` Caching](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1275:25   - Unknown word (Deprecations)     -- Breaking Changes and Deprecations
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1277:13   - Unknown word (Requirements)     -- ### Runtime Requirements
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1285:1    - Unknown word (Notably)          -- Notably, certain properties
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1292:24   - Unknown word (Coercions)        -- Forbidden Implicit Coercions in Relational Operators
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1292:5    - Unknown word (Forbidden)        -- ### Forbidden Implicit Coercions in
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1318:113  - Unknown word (Mateusz)          -- contributed courtesy of [Mateusz Burzyński](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1318:121  - Unknown word (Burzyński)        -- courtesy of [Mateusz Burzyński](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1320:10   - Unknown word (Overhaul)         -- ### Enum Overhaul
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1329:14   - Unknown word (Digit)            -- enum SomeEvenDigit {
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1339:51   - Unknown word (indirected)       -- of certain kinds of indirected mixed string/number
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1398:108  - Unknown word (upgrades)         -- to allow for smoother upgrades.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1398:23   - Unknown word (releasing)        -- We'll also shortly be releasing a 4.9 patch to allow
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1401:38   - Unknown word (endings)          -- which controls the line endings emitted in JavaScript
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1402:30   - Unknown word (deterministic)    -- builds should be as deterministic as possible, and Windows
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1402:69   - Unknown word (Notepad)          -- possible, and Windows Notepad supports line-feed line
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:1405:108  - Unknown word (agreed)           -- file name in a project agreed in casing, now defaults
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:190:47    - Unknown word (decorates)  -- anything - so when it decorates a method, it leaves
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:214:16    - Unknown word (stacked)    -- Notice that we stacked two decorators - `@bound
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:215:7     - Unknown word (decorations) -- These decorations run in "reverse order
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:219:37    - Unknown word (stylistically) -- noting - if you'd prefer stylistically, you can put these decorators
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:278:62    - Unknown word (Axel)          -- you can read up on [Axel Rauschmayer's extensive
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:278:67    - Unknown word (Rauschmayer's) -- can read up on [Axel Rauschmayer's extensive summary](https
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:278:81    - Unknown word (extensive)     -- [Axel Rauschmayer's extensive summary](https://2ality
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:288:59    - Unknown word (foreseeable)   -- continue to exist for the foreseeable future;
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:31:1      - Unknown word (Regardless) -- Regardless of what kind of ball
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:31:47     - Unknown word (imagining)  -- of ball-of-mud you're imagining, let's say you throw
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:392:10    - Unknown word (Didn't)        -- // Note: Didn't need to write 'as const
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:433:6     - Unknown word (managing)      -- When managing multiple projects, it
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:54:33     - Unknown word (logged)     -- write a function called `loggedMethod` that looks like
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:582:53    - Unknown word (quietly)       -- these issues, it would quietly back out and use the
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:583:30    - Unknown word (advantages)    -- meant giving up all the advantages of unions and literal
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:585:16    - Unknown word (manages)       -- TypeScript 5.0 manages to make all enums into
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:607:57    - Unknown word (anyone)        -- mode was better for anyone using a bundler.
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:610:28    - Unknown word (fusion)        -- modern bundlers use a fusion of the ECMAScript module
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:624:105   - Unknown word (hybrid)        -- others that implement a hybrid lookup strategy, the
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:640:120   - Unknown word (resolvable)    -- import paths would not be resolvable at runtime in JavaScript
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:685:57    - Unknown word (achievable)    -- effect has often been achievable by adding a declaration
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:686:1     - Unknown word (Strictly)      -- Strictly speaking, the former
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:758:163   - Unknown word (consults)      -- import is used - it often consults how a value is declared
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:795:4     - Unknown word (Rewritten)     -- // Rewritten to 'import { b } from
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:807:119   - Unknown word (predates)      -- s module syntax that predates ES2015:
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:881:11    - Unknown word (vehicles)      -- // models/vehicles.ts
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:882:14    - Unknown word (Spaceship)     -- export class Spaceship {
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:939:155   - Unknown word (bluntly)       -- our object, it didn't bluntly change it to `CompilerOptions
packages/documentation/copy/en/release-notes/TypeScript 5.0.md:951:36    - Unknown word (mismatches)    -- satisfies */` can catch type mismatches:
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:117:4     - Unknown word (Unrelated)   -- ## Unrelated Types for Getters and
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:129:4     - Unknown word (Comes)       -- // Comes out as a 'string'
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:133:1     - Unknown word (Initially)   -- Initially we required that the
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:142:78    - Unknown word (unrelated)   -- that have completely unrelated types between their
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:161:38    - Unknown word (requiring)   -- other patterns like requiring `set` accessors to accept
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:169:8     - Unknown word (Must)        -- // Must check for 'undefined
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:180:4     - Unknown word (Decoupled)   -- ## Decoupled Type-Checking Between
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:187:11    - Unknown word (closing)     -- // A self-closing JSX tag
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:193:104   - Unknown word (fetches)     -- namespace called `JSX` and fetches a type out of it called
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:232:36    - Unknown word (Sebastian)   -- extend our thanks to [Sebastian Silbermann](https:/
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:232:46    - Unknown word (Silbermann)  -- thanks to [Sebastian Silbermann](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:266:20    - Unknown word (Consulted)   -- ## `typeRoots` Are Consulted In Module Resolution
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:283:11    - Unknown word (Cursors)     -- ## Linked Cursors for JSX Tags
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:286:47    - Unknown word (cursors)     -- occasionally called "mirrored cursors") allows an editor to
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:319:5     - Unknown word (Avoiding)    -- ### Avoiding Unnecessary Type Instantiatio
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:322:56    - Unknown word (computations) -- on many unnecessary computations, and reduced the type
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:326:5     - Unknown word (Negative)     -- ### Negative Case Checks for Union
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:332:51    - Unknown word (interns)      -- because TypeScript always interns/caches literal types
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:336:24    - Unknown word (Scanner)      -- Reduced Calls into Scanner for JSDoc Parsing
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:339:27    - Unknown word (normalizing)  -- could be helpful for normalizing comment text, so that
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:340:23    - Unknown word (chatty)       -- but it was extremely "chatty" and meant the parser
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:343:32    - Unknown word (chunks)       -- scanner now returns larger chunks of content directly
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:345:125   - Unknown word (prose)        -- several 10Mb mostly-prose-comment JavaScript files
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:376:10    - Unknown word (EBADENGINE)   -- npm WARN EBADENGINE Unsupported engine
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:387:7     - Unknown word (Found)        -- error Found incompatible module
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:394:26    - Unknown word (Disables)     -- Explicit `typeRoots` Disables Upward Walks for `node
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:394:35    - Unknown word (Upward)       -- typeRoots` Disables Upward Walks for `node_modules
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:394:42    - Unknown word (Walks)        -- typeRoots` Disables Upward Walks for `node_modules/@types
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:398:28    - Unknown word (excessive)    -- behavior could prompt excessive look-ups and has been
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:73:160    - Unknown word (distraction) -- statement, etc. seems like a distraction.
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:73:19     - Unknown word (interplay)  -- Understanding the interplay between inferring `void
packages/documentation/copy/en/release-notes/TypeScript 5.1.md:8:4       - Unknown word (Easier)     -- ## Easier Implicit Returns for
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:149:1     - Unknown word (Functionally) -- Functionally, that's exactly what
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:152:109   - Unknown word (tear)         -- explicit way to perform a "tear-down" of an object at
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:158:10    - Unknown word (loggy)        -- function loggy(id: string): Disposable
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:163:26    - Unknown word (Disposing)    -- console.log(`Disposing ${id}`);
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:16:124    - Unknown word (deletes)    -- and then closes and deletes it.
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:196:41    - Unknown word (resilient)    -- clarations are supposed to be resilient to exceptions;
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:202:19    - Unknown word (Suppressed)   -- For those cases, `SuppressedError` has been introduced
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:213:10    - Unknown word (throwy)       -- function throwy(id: string) {
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:256:18    - Unknown word (Constructing) -- console.log(`Constructing ${id}`);
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:337:29    - Unknown word (stars)        -- brings us to the final stars of the feature: `DisposableSt
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:338:80    - Unknown word (amounts)      -- along with arbitrary amounts of cleanup.
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:341:18    - Unknown word (could've)     -- So here's how we could've written the original
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:368:41    - Unknown word (disposes)     -- suggests, `DisposableStack` disposes of everything it keeps
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:371:286   - Unknown word (Odin)         -- ocumentation/master/#defer), [Odin](https://odin-lang.org
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:382:109   - Unknown word (polyfilling)  -- to get away with only polyfilling the built-in `symbol
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:444:136   - Unknown word (tack)         -- Map` or `WeakMap`, or tack properties on as necessary
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:444:79    - Unknown word (privately)    -- frameworks can either privately use them as keys into
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:449:21    - Unknown word (jsonify)      -- import { serialize, jsonify } from "./serializer
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:479:7     - Unknown word (serializables) -- const serializables = Symbol();
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:519:53    - Unknown word (fetched)       -- list of properties is fetched off of the metadata
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:56:28     - Unknown word (duplication) -- starting to see some duplication of clean-up which can
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:587:76    - Unknown word (contributing)  -- com/a-tarasyuk) for contributing [the implementation
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:601:99    - Unknown word (unlabeled)     -- between labeled and unlabeled elements.
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:642:76    - Unknown word (lifted)        -- tuple labels has been lifted.
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:645:145   - Unknown word (collaborated)  -- github.com/Andarist) who [collaborated to lift this restriction
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:663:11    - Unknown word (coherent)      -- Without a coherent strategy, TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:663:41    - Unknown word (threw)         -- strategy, TypeScript threw its hands in the air
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:663:51    - Unknown word (hands)         -- TypeScript threw its hands in the air and said
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:668:1     - Unknown word (Taking)        -- Taking the above example,
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:670:11    - Unknown word (freshly)       -- but for a freshly produced value there
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:672:95    - Unknown word (invokable)     -- reduce` should all be invokable on unions of arrays
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:706:83    - Unknown word (confusingly)   -- completion, TypeScript would confusingly give poor unrelated
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:719:72    - Unknown word (usages)        -- having both of its usages replaced](https://devblogs
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:728:25    - Unknown word (Ongoing)       -- Optimized Checks for Ongoing Type Compatibility
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:728:4     - Unknown word (Optimized)     -- ## Optimized Checks for Ongoing Type
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:730:100   - Unknown word (wise)          -- compared in a member-wise fashion;
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:747:71    - Unknown word (proceed)       -- checking any further and proceed to check other members
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:754:68    - Unknown word (drizzle)       -- case that used the [drizzle](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:774:27    - Unknown word (unnecessarily) -- TypeScript strives not to unnecessarily introduce breaks;
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:775:36    - Unknown word (corrections)   -- occasionally we must make corrections and improvements so
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:784:24    - Unknown word (mixture)       -- order [to support a mixture of labeled and unlabeled
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:798:55    - Unknown word (agree)         -- these two options don't agree on whether they are
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:801:29    - Unknown word (diverge)       -- cases where the settings diverge, you'll likely get an
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:81:55     - Unknown word (noise)       -- added quite a bit of "noise" to our code.
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:820:26    - Unknown word (missed)        -- to a bug, TypeScript missed specific cases in ambient
packages/documentation/copy/en/release-notes/TypeScript 5.2.md:82:27     - Unknown word (guns)        -- are also other foot-guns we can run into if we
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:127:72    - Unknown word (spearheaded) -- TypeScript/pull/55991) was spearheaded [initial work](https
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:130:17    - Unknown word (Comparisons) -- ## Narrowing On Comparisons to Booleans
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:164:12    - Unknown word (esoteric)    -- A slightly esoteric feature of JavaScript
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:168:7     - Unknown word (Weirdo)      -- class Weirdo {
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:302:33    - Unknown word (inspects)    -- .3 now more-closely inspects `super` property accesses
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:310:25    - Unknown word (casually)    -- This makes it easier to casually navigate your code.
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:312:8     - Unknown word (clicking)    -- ![Ctrl-clicking an inlay hint to jump
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:316:16    - Unknown word (Prefer)      -- ## Settings to Prefer `type` Auto-Imports
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:347:4     - Unknown word (Triggerable) -- ## Triggerable Refactor to Convert
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:353:21    - Unknown word (Skipping)    -- ## Optimizations by Skipping JSDoc Parsing
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:356:110   - Unknown word (garbage)     -- along with time spent in garbage collection.
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:357:57    - Unknown word (quicker)     -- faster compiles and quicker feedback in `--watch
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:362:32    - Unknown word (gain)        -- enable these tools to gain the same memory and
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:374:76    - Unknown word (NINE)        -- Type2 | ... | Type99999NINE)` and we want to see
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:378:83    - Unknown word (tuck)        -- that we were able to tuck away.
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:383:27    - Unknown word (tsserverlibrary) -- Consolidation Between `tsserverlibrary.js` and `typescript
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:383:4     - Unknown word (Consolidation) -- ## Consolidation Between `tsserverlibrary
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:386:124   - Unknown word (importers)       -- may be useful to some importers.
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:387:60    - Unknown word (duplicating)     -- with a lot of overlap, duplicating code in the package
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:388:24    - Unknown word (challenging)     -- What's more, it can be challenging to consistently use
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:388:98    - Unknown word (muscle)          -- due to auto-imports or muscle memory.
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:389:1     - Unknown word (Accidentally)    -- Accidentally loading both modules
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:38:36     - Unknown word (evolution)  -- import attributes are an evolution of an earlier proposal
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:394:36    - Unknown word (consolidation)   -- before/after of this consolidation, we saw the following
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:396:36    - Unknown word (percent)         -- After | Diff | Diff (percent) |
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:398:3     - Unknown word (Packed)          -- | Packed | 6.90 MiB | 5.48 MiB
packages/documentation/copy/en/release-notes/TypeScript 5.3.md:96:46     - Unknown word (Modes)      -- Supported in All Module Modes
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:133:1     - Unknown word (Surrounding) -- Surrounding a type in `NoInfer<
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:148:1     - Unknown word (Excluding)   -- Excluding the type of `defaultColor
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:148:49    - Unknown word (explored)    -- defaultColor` from being explored for inference means
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:199:15    - Unknown word (Odds)        -- interface EvenOdds {
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:213:94    - Unknown word (adjusting)   -- target` to `esnext` or adjusting your `lib` settings
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:216:34    - Unknown word (Kevin)       -- extend a thanks to [Kevin Gibbons](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:216:40    - Unknown word (Gibbons)     -- extend a thanks to [Kevin Gibbons](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:265:52    - Unknown word (directs)     -- the syntax you choose directs how [conditional exports
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:316:21    - Unknown word (offered)     -- ![A quick fix being offered when someFunction calls
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:320:25    - Unknown word (threading)   -- This can be useful when threading a new argument through
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:322:83    - Unknown word (courtsey)    -- 56411) was provided courtsey of [Oleksandr Tarasiuk
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:324:4     - Unknown word (Upcoming)    -- ## Upcoming Changes from TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:344:28    - Unknown word (June)        -- TypeScript 5.5 (likely June 2024), these will become
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:346:162   - Unknown word (adapt)       -- suggestions in how to best adapt your codebase.
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:348:12    - Unknown word (Behavioral)  -- ## Notable Behavioral Changes
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:348:4     - Unknown word (Notable)     -- ## Notable Behavioral Changes
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:350:14    - Unknown word (highlights)  -- This section highlights a set of noteworthy
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:350:34    - Unknown word (noteworthy)  -- highlights a set of noteworthy changes that should
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:350:68    - Unknown word (acknowledged) -- changes that should be acknowledged and understood as part
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:350:85    - Unknown word (understood)   -- be acknowledged and understood as part of any upgrade
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:351:43    - Unknown word (removals)     -- highlight deprecations, removals, and new restrictions
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:352:40    - Unknown word (functionally) -- contain bug fixes that are functionally improvements, but which
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:378:131   - Unknown word (proven)       -- cases where it can't be proven that `T` *never* or
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:380:16    - Unknown word (adopts)       -- TypeScript 5.4 adopts this more accurate behavior
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:385:10    - Unknown word (Aggressive)   -- ### More Aggressive Reduction of Intersections
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:387:140   - Unknown word (overlaps)     -- variable's constraint overlaps with those primitives
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:387:78    - Unknown word (aggressively) -- and primitives more aggressively, depending on how the
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:409:23    - Unknown word (Against)      -- # Improved Checking Against Template Strings with
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:409:53    - Unknown word (Interpolations) -- Template Strings with Interpolations
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:455:28    - Unknown word (Restrictions)   -- New Enum Assignability Restrictions
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:489:1     - Unknown word (Practically)    -- Practically speaking, what this
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:49:38     - Unknown word (kick)       -- narrowing analysis doesn't kick in if the variable is
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:548:133   - Unknown word (behavioral)     -- on discussion around behavioral changes](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:548:220   - Unknown word (tweaks)         -- 57389) and [further tweaks](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:558:53    - Unknown word (phases)         -- through the same emit phases when in an ImportTypeNode
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:8:27      - Unknown word (Closures)   -- Preserved Narrowing in Closures Following Last Assignments
packages/documentation/copy/en/release-notes/TypeScript 5.4.md:8:4       - Unknown word (Preserved)  -- ## Preserved Narrowing in Closures
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1021:85   - Unknown word (untenable)        -- that this logic was untenable for anyone attempting
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1022:141  - Unknown word (inconsistent)     -- the emitted file seems inconsistent and difficult to predict
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1025:10   - Unknown word (experimentation)  -- Through [experimentation](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1026:161  - Unknown word (synthesizing)     -- imports, so no longer synthesizing these reference directives
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1026:210  - Unknown word (unlikely)         -- directives would be unlikely to break anyone.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1032:44   - Unknown word (simplfy)          -- we decided to greatly simplfy reference directives
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:1037:1    - Unknown word (Concretely)       -- Concretely, an input file like
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:10:35     - Unknown word (Vanderkam)  -- was written by [Dan Vanderkam](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:113:91    - Unknown word (afoul)      -- then you may be running afoul of the second rule.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:116:13    - Unknown word (Classroom)  -- function getClassroomAverage(students: string
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:116:22    - Unknown word (Average)    -- function getClassroomAverage(students: string[],
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:116:30    - Unknown word (students)   -- getClassroomAverage(students: string[], allScores
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:116:53    - Unknown word (Scores)     -- students: string[], allScores: Map<string, number
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:117:9     - Unknown word (student)    -- const studentScores = students
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:127:71    - Unknown word (rightly)    -- score => !!score`, and rightly so: if this returns
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:129:105   - Unknown word (average)    -- score will skew the average upwards.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:129:65    - Unknown word (filtering)  -- zero on the test, then filtering out their score will
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:129:96    - Unknown word (skew)       -- out their score will skew the average upwards
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:12:106    - Unknown word (moves)      -- variable changes as it moves through your code:
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:22:12     - Unknown word (nations)    -- // Not all nations have official birds
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:22:34     - Unknown word (birds)      -- nations have official birds (looking at you, Canada
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:23:23     - Unknown word (Birds)      -- declare const nationalBirds: Map<string, Bird>;
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:283:4     - Unknown word (Regular)    -- ## Regular Expression Syntax Checking
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:286:57    - Unknown word (extensible) -- technically have an extensible grammar and TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:287:57    - Unknown word (undiscovered) -- common problems would go undiscovered in regular expressions
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:334:37    - Unknown word (graphemecluster) -- to thank [GitHub user graphemecluster](https://github.com
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:340:73    - Unknown word (symmetric)       -- `difference`, and `symmetricDifference`, take another
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:341:57    - Unknown word (Disjoint)        -- isSupersetOf`, and `isDisjointFrom`, take another
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:347:24    - Unknown word (apples)          -- let fruits = new Set(["apples", "bananas", "pears
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:347:45    - Unknown word (pears)           -- apples", "bananas", "pears", "oranges"]);
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:347:5     - Unknown word (fruits)          -- let fruits = new Set(["apples"
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:347:54    - Unknown word (oranges)         -- bananas", "pears", "oranges"]);
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:348:14    - Unknown word (Bananas)         -- let applesAndBananas = new Set(["apples"
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:349:14    - Unknown word (Oranges)         -- let applesAndOranges = new Set(["apples"
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:35:55     - Unknown word (pushes)     -- undefined` case, TypeScript pushes you to write more robust
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:37:32     - Unknown word (refinement) -- past, this sort of type refinement was more difficult to
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:40:24     - Unknown word (countries)  -- function makeBirdCalls(countries: string[]) {
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:451:79    - Unknown word (championed)      -- bakkot) who not only co-championed the feature in ECMAScript
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:459:104   - Unknown word (analyse)         -- library without needing to analyse the library itself.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:460:1     - Unknown word (Whilst)          -- Whilst it is possible to handwrite
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:460:26    - Unknown word (handwrite)       -- Whilst it is possible to handwrite declaration files, if
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:468:19    - Unknown word (thriving)        -- Whilst there is a thriving ecosystem of blazing
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:494:87    - Unknown word (wished)          -- multi-core CPU that just wished it could help you check
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:495:1     - Unknown word (Wouldn't)        -- Wouldn't it be great if we could
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:500:94    - Unknown word (topological)     -- set of projects in "topological" dependency order.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:537:5     - Unknown word (controversially) -- If, controversially, developers are willing
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:558:4     - Unknown word (Tell)            -- 1. Tell us up-front whether
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:559:4     - Unknown word (Provide)         -- 2. Provide a quick fix to help
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:562:5     - Unknown word (locals)          -- For locals, these can be ignored
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:601:49    - Unknown word (developments)    -- look forward to future developments in this space.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:603:24    - Unknown word (actively)        -- That's something we're actively working on improving
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:610:26    - Unknown word (ergonomics)      -- There are some developer ergonomics that are lost when using
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:618:53    - Unknown word (collaborative)   -- has been a long-time collaborative effort between the TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:1     - Unknown word (Individuals)     -- Individuals like Hana Joo from Google
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:18    - Unknown word (Hana)            -- Individuals like Hana Joo from Google who
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:208   - Unknown word (Kühle)           -- Ashley Claymore, Jan Kühle, Lisa Velden, Rob Palmer
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:215   - Unknown word (Lisa)            -- Claymore, Jan Kühle, Lisa Velden, Rob Palmer,
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:220   - Unknown word (Velden)          -- Claymore, Jan Kühle, Lisa Velden, Rob Palmer, and Thomas
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:244   - Unknown word (Thomas)          -- Velden, Rob Palmer, and Thomas Chetwin have been involved
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:251   - Unknown word (Chetwin)         -- Rob Palmer, and Thomas Chetwin have been involved in
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:619:336   - Unknown word (months)          -- implementation for many months.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:620:54    - Unknown word (tremendous)      -- worth calling out the tremendous amount of work provided
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:621:17    - Unknown word (instrumental)    -- Titian has been instrumental in driving the implementation
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:621:33    - Unknown word (driving)         -- been instrumental in driving the implementation of
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:688:4     - Unknown word (Consulting)      -- ## Consulting `package.json` Dependencies
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:697:46    - Unknown word (risky)           -- such a file could be risky if the path ended up
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:703:26    - Unknown word (Reliability)     -- Editor and Watch-Mode Reliability Improvements
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:706:58    - Unknown word (restarts)        -- fewer TSServer/editor restarts.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:717:33    - Unknown word (Followed)        -- Handling for Deletes Followed by Immediate Writes
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:717:45    - Unknown word (Immediate)       -- Deletes Followed by Immediate Writes
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:722:162   - Unknown word (transitive)      -- of it and all of its transitive dependencies.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:723:1     - Unknown word (Deleting)        -- Deleting and creating a file
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:723:39    - Unknown word (succession)      -- creating a file in quick succession could lead to TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:723:75    - Unknown word (tearing)         -- could lead to TypeScript tearing down an entire project
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:725:31    - Unknown word (nuanced)         -- TypeScript 5.5 now has a more nuanced approach by keeping
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:729:18    - Unknown word (Tracked)         -- ### Symlinks are Tracked in Failed Resolutions
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:729:36    - Unknown word (Resolutions)     -- are Tracked in Failed Resolutions
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:732:170   - Unknown word (witnessed)       -- project but was not witnessed in the other.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:732:75    - Unknown word (reliability)     -- irectories, which could cause reliability issues in monorepo-like
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:73:45     - Unknown word (pulling)    -- going on more clearly by pulling it out into a standalone
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:746:5     - Unknown word (Monomorphized)   -- ### Monomorphized Objects in Language
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:752:59    - Unknown word (allocators)      -- performed on internal allocators for our data structures
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:754:50    - Unknown word (leaner)          -- compiler to be a bit leaner, as data used only for
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:756:29    - Unknown word (monomorphization) -- TypeScript 5.5, the same monomorphization work has been done for
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:758:17    - Unknown word (benchmarks)       -- In fact, in our benchmarks, we've seen a **5-8
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:758:49    - Unknown word (speedup)          -- we've seen a **5-8% speedup in build times** when
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:766:62    - Unknown word (monomorphized)    -- flow graph have been monomorphized so that they always
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:774:76    - Unknown word (antecedents)      -- termination or effects in the antecedents (or "dominators") of
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:774:93    - Unknown word (dominators)       -- the antecedents (or "dominators") of certain nodes meant
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:775:53    - Unknown word (graphs)           -- constructs its control flow graphs to take advantage of
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:776:15    - Unknown word (flatter)          -- This yields a flatter control flow graph,
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:781:5     - Unknown word (Skipped)          -- ### Skipped Checking in `transpileModule
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:788:84    - Unknown word (collecting)       -- full check, only lazily collecting this information as
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:794:232   - Unknown word (Installer)        -- tsserver.js` and `typingsInstaller.js` import from a common
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:796:81    - Unknown word (packed)           -- MB, and reduces its packed size from 5.5 MB to
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:798:10    - Unknown word (Reuse)            -- ### Node Reuse in Declaration Emit
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:800:61    - Unknown word (substantially)    -- isolatedDeclarations`, we've substantially improved how often TypeScript
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:828:19    - Unknown word (representations)  -- * Many equivalent representations still encode some level
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:829:3     - Unknown word (Producing)        -- * Producing a fresh representation
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:833:25    - Unknown word (invisible)        -- Many of these cases are invisible performance improvements
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:834:92    - Unknown word (cheaper)          -- directly, which is much cheaper and faster.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:838:17    - Unknown word (asks)             -- When TypeScript asks for the contextual type
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:841:95    - Unknown word (recompute)        -- TypeScript doesn't need to recompute it for every property
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:842:1     - Unknown word (Performing)       -- Performing this optimization shaved
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:873:123   - Unknown word (violates)         -- right output if the code violates any errors under the
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:879:42    - Unknown word (parallelize)      -- function can be used to parallelize declaration emit across
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:909:16    - Unknown word (smooth)           -- To help with a smooth upgrade path, you may
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:910:20    - Unknown word (Deprecation)      -- See also the [Flag Deprecation Plan](https://github
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:921:112   - Unknown word (tightened)        -- the proposal has been tightened up.
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:945:32    - Unknown word (Definable)        -- undefined` is No Longer a Definable Type Name
packages/documentation/copy/en/release-notes/TypeScript 5.5.md:983:47    - Unknown word (ambiently)        -- modules are declared ambiently, so cannot be loaded
packages/documentation/copy/en/tutorials/ASP.NET Core.md:122:37    - Unknown word (dialog)     -- VS showing new file dialog with 'npm configuration
packages/documentation/copy/en/tutorials/ASP.NET Core.md:135:55    - Unknown word (explorer)   -- folder in your solution explorer
packages/documentation/copy/en/tutorials/ASP.NET Core.md:16:4      - Unknown word (Choose)     -- 1. Choose **File**
packages/documentation/copy/en/tutorials/ASP.NET Core.md:19:48     - Unknown word (press)      -- Web Application** and press the _Next_ button
packages/documentation/copy/en/tutorials/ASP.NET Core.md:202:23    - Unknown word (boxes)      -- As you type on the boxes you should see the message
packages/documentation/copy/en/tutorials/ASP.NET Core.md:210:10    - Unknown word (breakpoint) -- 3. Put a breakpoint on the line with return
packages/documentation/copy/en/tutorials/ASP.NET Core.md:211:54    - Unknown word (hits)       -- that the breakpoint hits in TypeScript code and
packages/documentation/copy/en/tutorials/ASP.NET Core.md:215:1     - Unknown word (Congrats)   -- Congrats you've built your own
packages/documentation/copy/en/tutorials/ASP.NET Core.md:37:47     - Unknown word (Browse)     -- Manage NuGet Packages > Browse.** Search and install
packages/documentation/copy/en/tutorials/ASP.NET Core.md:48:25     - Unknown word (Exception)  -- app.UseDeveloperExceptionPage();
packages/documentation/copy/en/tutorials/ASP.NET Core.md:56:40     - Unknown word (squiggly)   -- restart VS for the red squiggly lines below `UseDefaultFiles
packages/documentation/copy/en/tutorials/ASP.NET Core.md:92:37     - Unknown word (dialogue)   -- showing the new file dialogue with TypeScript JSON
packages/documentation/copy/en/tutorials/Angular.md:11:73     - Unknown word (citizen)    -- TypeScript as a first-class citizen, but uses it as its
packages/documentation/copy/en/tutorials/Babel with TypeScript.md:30:143    - Unknown word (miss)       -- type errors which you miss in your editor could
packages/documentation/copy/en/tutorials/DOM Manipulation.md:103:22    - Unknown word (exhibit)          -- Some elements do not exhibit unique properties and
packages/documentation/copy/en/tutorials/DOM Manipulation.md:105:220   - Unknown word (interpreter)      -- `K`. The TypeScript interpreter is smart enough to
packages/documentation/copy/en/tutorials/DOM Manipulation.md:109:163   - Unknown word (prototypal)       -- Node` interface. This prototypal extension allows for
packages/documentation/copy/en/tutorials/DOM Manipulation.md:13:28     - Unknown word (standardization) -- 20+ years since its standardization, JavaScript has come
packages/documentation/copy/en/tutorials/DOM Manipulation.md:15:1      - Unknown word (Websites)        -- Websites are made up of HTML
packages/documentation/copy/en/tutorials/DOM Manipulation.md:15:458    - Unknown word (develop)         -- websites even easier to develop.
packages/documentation/copy/en/tutorials/DOM Manipulation.md:167:40    - Unknown word (descendant)       -- first element that is a descendant of node that matches
packages/documentation/copy/en/tutorials/DOM Manipulation.md:17:116    - Unknown word (readily)         -- These definitions are readily available in any default
packages/documentation/copy/en/tutorials/DOM Manipulation.md:181:214   - Unknown word (Arguably)         -- JavaScript list element. Arguably, replacing `NodeListOf
packages/documentation/copy/en/tutorials/DOM Manipulation.md:181:630   - Unknown word (discrepancy)      -- this may appear as a discrepancy, take note that interface
packages/documentation/copy/en/tutorials/DOM Manipulation.md:196:4     - Unknown word (Interested)       -- ## Interested in learning more?
packages/documentation/copy/en/tutorials/DOM Manipulation.md:198:74    - Unknown word (reflective)       -- definitions is that they are reflective of the types annotated
packages/documentation/copy/en/tutorials/DOM Manipulation.md:43:36     - Unknown word (programmatically) -- new <p></p> element programmatically
packages/documentation/copy/en/tutorials/DOM Manipulation.md:63:74     - Unknown word (Inspecting)       -- variable `document`. Inspecting the variable shows it
packages/documentation/copy/en/tutorials/Gulp.md:14:4      - Unknown word (Minimal)    -- ## Minimal project
packages/documentation/copy/en/tutorials/Gulp.md:207:52    - Unknown word (paragraph's) -- sayHello` to change the paragraph's text.
packages/documentation/copy/en/tutorials/Gulp.md:244:1     - Unknown word (Conveniently) -- Conveniently, they both allow us
packages/documentation/copy/en/tutorials/Gulp.md:255:49    - Unknown word (pause)        -- the breakpoint should pause the page and let you
packages/documentation/copy/en/tutorials/Gulp.md:264:14    - Unknown word (hugely)       -- - Babel is a hugely flexible compiler that
packages/documentation/copy/en/tutorials/Gulp.md:267:10    - Unknown word (compacts)     -- - Terser compacts your code so that it
packages/documentation/copy/en/tutorials/Gulp.md:346:33    - Unknown word (mangle)       -- point of Terser is to mangle your code, we also need
packages/documentation/copy/en/tutorials/Gulp.md:394:58    - Unknown word (minified)     -- bundle.js` does get minified into an unreadable mess
packages/documentation/copy/en/tutorials/Gulp.md:394:75    - Unknown word (unreadable)   -- get minified into an unreadable mess:
packages/documentation/copy/en/tutorials/Gulp.md:394:86    - Unknown word (mess)         -- minified into an unreadable mess:
packages/documentation/copy/en/tutorials/Gulp.md:404:23    - Unknown word (mangles)      -- Like Terser, Babelify mangles code, so we'll need
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:10:72     - Unknown word (tedious)    -- TypeScript is, while somewhat tedious, usually not challenging
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:131:85    - Unknown word (deals)      -- any other loader that deals with `.js` files.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:146:110   - Unknown word (squiggles)  -- , you might see red squiggles on certain lines.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:150:41    - Unknown word (tighten)    -- lax for you, you can tighten that behavior up.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:152:79    - Unknown word (knob)       -- and you can turn that knob up as high as you want
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:158:5     - Unknown word (Weeding)    -- ### Weeding out Errors
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:216:15    - Unknown word (complains)  -- If TypeScript complains about a package like
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:233:20    - Unknown word (Pets)       -- module.exports.feedPets = function (pets) {
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:2:8       - Unknown word (Migrating)  -- title: Migrating from JavaScript
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:323:6     - Unknown word (Sequentially) -- #### Sequentially Added Properties
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:325:26    - Unknown word (aesthetically) -- people find it more aesthetically pleasing to create an
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:325:40    - Unknown word (pleasing)      -- it more aesthetically pleasing to create an object
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:387:173   - Unknown word (spare)         -- strictNullChecks) option to spare you the stress of worrying
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:387:187   - Unknown word (stress)        -- option to spare you the stress of worrying about these
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:421:4     - Unknown word (Reopen)        -- // Reopen the interface.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:44:21     - Unknown word (bones)      -- Let's create a bare-bones one for our project
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:68:10     - Unknown word (Benefits)   -- ## Early Benefits
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:83:66     - Unknown word (gist)       -- our best to cover the gist of things.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:87:188    - Unknown word (Uglify)     -- Browserify, Babelify, and Uglify.
packages/documentation/copy/en/tutorials/Migrating from JavaScript.md:8:31      - Unknown word (vacuum)     -- TypeScript doesn't exist in a vacuum.
packages/documentation/copy/en/tutorials/React.md:18:4      - Unknown word (Gatsby)     -- - [Gatsby](https://www.gatsbyjs
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:11:4      - Unknown word (Installing) -- ## Installing TypeScript
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:125:31    - Unknown word (Student)    -- re going to create a `Student` class with a constructor
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:135:18    - Unknown word (Initial)    -- public middleInitial: string,
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:187:17    - Unknown word (picture)    -- ![Visual Studio picture](/images/docs/greet
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:37:13     - Unknown word (Jane)       -- let user = "Jane User";
packages/documentation/copy/en/tutorials/TypeScript Tooling in 5 minutes.md:45:21     - Unknown word (pasted)     -- You could have copy/pasted this straight out of
packages/documentation/scripts/generateAttribution.js:120:5     - Unknown word (Recursively)   -- /** Recursively retrieve file paths
packages/documentation/scripts/generateAttribution.js:13:49     - Unknown word (Attribution) -- __dirname, "handbookAttribution.json"), "utf8")
packages/documentation/scripts/generateAttribution.js:16:13     - Unknown word (Dupe)        -- const handleDupeNames = (name) => {
packages/documentation/scripts/generateAttribution.js:23:9      - Unknown word (creator)     -- const creator = execSync(
packages/documentation/scripts/generateAttribution.js:2:28      - Unknown word (attribution) -- Updates the JSON file `attribution.json` with contributors
packages/documentation/scripts/generateAttribution.js:51:12     - Unknown word (Contributions) -- const allContributions = contributors.split
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:103:17    - Unknown word (Guides)        -- title: "Guides",
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:110:17    - Unknown word (Appendices)    -- title: "Appendices",
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:139:108   - Unknown word (contributions) -- for DefinitelyTyped contributions.",
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:167:27    - Unknown word (Intro)         -- { file: "javascript/Intro to JS with TS.md",
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:182:29    - Unknown word (covering)      -- oneliner: "The page covering every TSConfig option
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:199:66    - Unknown word (Matter)        -- import("gray-matter").GrayMatterFile<string>>> }>} *
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:239:9     - Unknown word (navigations)   -- const navigations: Record<string, SidebarNavIte
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:30:15     - Unknown word (Pages)      -- const handbookPages = [
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:39:16     - Unknown word (tutorials)  -- { file: "tutorials/TypeScript Tooling in
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:45:5      - Unknown word (chronological) -- chronological: true,
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:78:17     - Unknown word (Cheat)         -- title: "Cheat Sheets",
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:79:27     - Unknown word (overviews)     -- oneliner: "Syntax overviews for common code"
packages/documentation/scripts/generateDocsNavigationPerLanguage.js:9:21      - Unknown word (definitive) -- // This file is the definitive sidebar navigation source
packages/documentation/scripts/generateTypesForFilesInDocs.js:24:20     - Unknown word (ortatherox) -- // From:   '/Users/ortatherox/dev/typescript/new-website
packages/documentation/scripts/generateTypesForFilesInDocs.js:4:30      - Unknown word (prepared)   -- filepaths, but want to be prepared in case they change
packages/documentation/scripts/lintTwoslashErrors.js:21:14     - Unknown word (Linting)    -- console.log("Linting the docs pages");
packages/documentation/scripts/lintTwoslashErrors.js:2:4       - Unknown word (Loops)      -- // Loops through all the sample
packages/documentation/scripts/lintTwoslashErrors.js:52:13     - Unknown word (sigil)      -- const sigil = hasError ? cross
packages/documentation/scripts/lintTwoslashErrors.js:54:13     - Unknown word (mini)       -- const miniPath = name.replace(join
packages/glossary/README.md:13:32     - Unknown word (fallbacks)  -- happens per-language with fallbacks to English for any missing
packages/glossary/README.md:33:21     - Unknown word (dump)       -- - Creating the JSON dump of all the useful info
packages/glossary/README.md:3:28      - Unknown word (lingual)    -- package" hosts multi-lingual docs for the TSConfig
packages/glossary/copy/en/index-signatures.md:18:3      - Unknown word (taniguchi)  -- taniguchi: 0.6782344919;
packages/glossary/copy/en/index-signatures.md:19:3      - Unknown word (raabe)      -- raabe: 0.9189385332;
packages/glossary/copy/en/index-signatures.md:44:17     - Unknown word (lebesgue)   -- modernConstants.lebesgue;
packages/glossary/copy/en/interface.md:12:3      - Unknown word (markings)   -- markings: string[];
packages/glossary/copy/en/shape.md:10:10     - Unknown word (Shibden)    -- name: "Shibden hall",
packages/glossary/copy/en/shape.md:10:18     - Unknown word (hall)       -- name: "Shibden hall",
packages/glossary/copy/en/shape.md:11:10     - Unknown word (Lister's)   -- road: "Lister's Road",
packages/glossary/copy/en/shape.md:12:10     - Unknown word (Halifax)    -- town: "Halifax",
packages/glossary/copy/en/shape.md:13:17     - Unknown word (Yorkshire)  -- county: "West Yorkshire",
packages/glossary/copy/en/shape.md:13:3      - Unknown word (county)     -- county: "West Yorkshire",
packages/glossary/copy/en/type-system.md:15:7      - Unknown word (shop)       -- const shop = {
packages/glossary/copy/en/type-system.md:17:13     - Unknown word (Maplewood)  -- address: "Maplewood",
packages/glossary/copy/en/type-system.md:34:9      - Unknown word (Chair)      -- nme: "Chair Store",
packages/glossary/scripts/generateMarkdown.ts:2:17      - Unknown word (glossary)   -- // Converts the glossary markdowns into per-language
packages/glossary/scripts/generateMarkdown.ts:2:26      - Unknown word (markdowns)  -- Converts the glossary markdowns into per-language files
packages/glossary/scripts/generateMarkdown.ts:63:40     - Unknown word (raised)     -- div class='whitespace raised content main-content
packages/glossary/scripts/lint.js:40:70     - Unknown word (exist)      -- "options")} doesn't exist`,
packages/playground-examples/copy/en/3-7/Fixits/Big number literals.ts:10:41     - Unknown word (territory)  -- to get into dangerous territory.
packages/playground-examples/copy/en/3-7/Fixits/Const to let.ts:10:22     - Unknown word (Andrew)       -- const displayName = "Andrew";
packages/playground-examples/copy/en/3-7/Fixits/Const to let.ts:12:16     - Unknown word (Andrea)       -- displayName = "Andrea";
packages/playground-examples/copy/en/3-7/Fixits/Const to let.ts:7:24      - Unknown word (highlighting) -- You can try this by highlighting the below error
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Flattened Error Reporting.ts:5:4       - Unknown word (egregious)  -- // egregious.
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:10:29     - Unknown word (album)      -- s imagine we have an album where the artist, and
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:10:45     - Unknown word (artist)     -- have an album where the artist, and the
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:19:13     - Unknown word (Albums)     -- previousAlbums?: string[];
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:32:12     - Unknown word (Artist)     -- const maybeArtistBio = album.artist &
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:3:43      - Unknown word (consensus)  -- reached TC39 Stage 3 consensus during
packages/playground-examples/copy/en/3-7/Syntax and Messaging/Optional Chaining.ts:60:77     - Unknown word (Fake)       -- resolve(metadata); // Fake API call
packages/playground-examples/copy/en/3-7/Types and Code Flow/Assertion Functions.ts:50:25     - Unknown word (Five)       -- declare const oneOfFirstFiveNumbers: 1 | 2 | 3 |
packages/playground-examples/copy/en/3-7/Types and Code Flow/Recursive Type References.ts:14:29     - Unknown word (feasible)   -- example, this is not feasible in 3.6:
packages/playground-examples/copy/en/3-7/Types and Code Flow/Recursive Type References.ts:29:14     - Unknown word (Jean)       -- username: "Jean-loup",
packages/playground-examples/copy/en/3-7/Types and Code Flow/Recursive Type References.ts:29:19     - Unknown word (loup)       -- username: "Jean-loup",
packages/playground-examples/copy/en/3-7/Types and Code Flow/Recursive Type References.ts:5:8       - Unknown word (constrains) -- // the constrains on type but not in interface
packages/playground-examples/copy/en/3-7/Types and Code Flow/Uncalled Function Checks.ts:20:4      - Unknown word (Because)    -- // Because pluginShouldLoad could
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:15:21     - Unknown word (Subclasses) -- // protected field. Subclasses can access "this.isFast
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:27:29     - Unknown word (cheetah)    -- this.isFast = type === "cheetah";
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:31:8      - Unknown word (Supposedly) -- // Supposedly these are pretty much
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:32:24     - Unknown word (bengal)     -- if (this.type === "bengal") {
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:49:6      - Unknown word (Away)       -- runAway() {
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:58:7      - Unknown word (Cheetah)    -- class Cheetah extends Cat {
packages/playground-examples/copy/en/3-8/JSDoc Improvements/Accessibility Modifiers.js:64:7      - Unknown word (Bengal)     -- class Bengal extends Cat {
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Export Modules From.ts:15:13     - Unknown word (reporters)  -- import * as reporters from "@jest/reporters
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Export Modules From.ts:20:38     - Unknown word (specs)      -- forms in the JavaScript specs, letting
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Export Modules From.ts:24:17     - Unknown word (Reporters)  -- export * as jestReporters from "@jest/reporters
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Export Modules From.ts:5:43      - Unknown word (elegantly)  -- have the ability to elegantly
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Private Class Fields.ts:20:11     - Unknown word (iceland)    -- // In iceland it is preferable to
packages/playground-examples/copy/en/3-8/Syntax and Messaging/Private Class Fields.ts:55:17     - Unknown word (Cherny)     -- oby["_name"] = "Cherny";
packages/playground-examples/copy/en/4-0/New JS Features/JSDoc Deprecated.ts:10:18     - Unknown word (female)     -- sex: "male" | "female";
packages/playground-examples/copy/en/4-0/New JS Features/JSDoc Deprecated.ts:10:9      - Unknown word (male)       -- sex: "male" | "female";
packages/playground-examples/copy/en/4-0/New JS Features/JSDoc Deprecated.ts:7:3       - Unknown word (gender)     -- gender: string;
packages/playground-examples/copy/en/4-0/New JS Features/Logical Operators and Assignment.ts:5:43      - Unknown word (mathematical) -- re-use the concept of mathematical
packages/playground-examples/copy/en/4-0/New TS Features/Named Tuples.ts:17:4      - Unknown word (Knowing)    -- // Knowing which is Latitude and
packages/playground-examples/copy/en/4-0/New TS Features/Named Tuples.ts:34:32     - Unknown word (underwhelming) -- that might seem a tad underwhelming, the main goal
packages/playground-examples/copy/en/4-0/New TS Features/Named Tuples.ts:48:4      - Unknown word (Making)        -- // Making some of the more complex
packages/playground-examples/copy/en/4-0/New TS Features/Named Tuples.ts:48:54     - Unknown word (lossy)         -- complex type manipulation lossy
packages/playground-examples/copy/en/4-0/New TS Features/Named Tuples.ts:5:45      - Unknown word (gained)     -- the type of a Tuple's gained the ability to give
packages/playground-examples/copy/en/4-0/New TS Features/Unknown in Catch.ts:12:53     - Unknown word (loosened)   -- property. With 4.0, we've loosened
packages/playground-examples/copy/en/4-0/New TS Features/Unknown in Catch.ts:29:13     - Unknown word (learns)     -- // system learns what it is, for more
packages/playground-examples/copy/en/4-0/New TS Features/Variadic Tuples.ts:17:12     - Unknown word (Diameter)   -- type MaxMinDiameter = AddMax<[min: number
packages/playground-examples/copy/en/4-0/New TS Features/Variadic Tuples.ts:17:44     - Unknown word (diameter)   -- AddMax<[min: number, diameter: number]>
packages/playground-examples/copy/en/4-0/New TS Features/Variadic Tuples.ts:26:22     - Unknown word (Terminators) -- function joinWithNullTerminators<T extends unknown[]
packages/playground-examples/copy/en/4-0/New TS Features/Variadic Tuples.ts:31:65     - Unknown word (terminators) -- variadic', 'types'], ["terminators", 3]);
packages/playground-examples/copy/en/4-0/New TS Features/Variadic Tuples.ts:33:67     - Unknown word (curry)       -- type a function like curry which
packages/playground-examples/copy/en/4-1/Template Literals/Intro to Template Literals.ts:16:18     - Unknown word (Redesign)   -- type Features = "Redesign" | "newArtistPage";
packages/playground-examples/copy/en/4-1/Template Literals/Intro to Template Literals.ts:23:45     - Unknown word (manipulate) -- template literal to manipulate strings.
packages/playground-examples/copy/en/4-1/Template Literals/Intro to Template Literals.ts:37:13     - Unknown word (accounted)  -- // union is accounted for.
packages/playground-examples/copy/en/4-1/Template Literals/Intro to Template Literals.ts:7:42      - Unknown word (redesign)   -- enableFeature(command: "redesign" | "newArtistPage")
packages/playground-examples/copy/en/4-1/Template Literals/Mapped Types with Template Literals.ts:36:3      - Unknown word (artwork)    -- artwork: { id: string, title
packages/playground-examples/copy/en/4-1/Template Literals/String Manipulation with Template Literals.ts:54:51     - Unknown word (deliminator) -- split, and D is the deliminator. This
packages/playground-examples/copy/en/4-1/Template Literals/String Manipulation with Template Literals.ts:68:19     - Unknown word (Deliminator) -- // `[Prefix as T][Deliminator][Suffix as U]` then
packages/playground-examples/copy/en/4-1/Template Literals/String Manipulation with Template Literals.ts:84:23     - Unknown word (extractor)   -- - An express route extractor by Dan Vanderkam
packages/playground-examples/copy/en/4-1/Template Literals/String Manipulation with Template Literals.ts:87:49     - Unknown word (Mike)        -- document.querySelector by Mike Ryan
packages/playground-examples/copy/en/4-1/Template Literals/String Manipulation with Template Literals.ts:90:21     - Unknown word (experimented) -- // People have also experimented with quite complicated
packages/playground-examples/copy/en/4-2/Fixits/Create Function from Call.ts:22:76     - Unknown word (stubbed)    -- the codefix can create stubbed
packages/playground-examples/copy/en/4-2/New TS Features/Abstract Class Constructors.ts:24:3      - Unknown word (breath)     -- breath() { }
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:15:58     - Unknown word (shore)      -- number] = ["Weeks from shore", 2];
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:32:12     - Unknown word (Chorus)     -- const firstChorus: StringsThenConfig
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:32:42     - Unknown word (Blow)       -- StringsThenConfig = ["Blow", "Me Bully boys",
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:32:53     - Unknown word (Bully)      -- ingsThenConfig = ["Blow", "Me Bully boys", "blow", { huh
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:32:59     - Unknown word (boys)       -- ["Blow", "Me Bully boys", "blow", { huh: true
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:32:67     - Unknown word (blow)       -- , "Me Bully boys", "blow", { huh: true }];
packages/playground-examples/copy/en/4-2/New TS Features/Rest Elements in Tuple Types.ts:5:40      - Unknown word (According)  -- element is a string. According to the type system,
packages/playground-examples/copy/en/4-2/New TS Features/Smarter Type Alias Preservation.ts:4:9       - Unknown word (trade)      -- // is a trade-off on what gives them
packages/playground-examples/copy/en/4-2/New TS Features/Smarter Type Alias Preservation.ts:8:20      - Unknown word (Reducing)   -- // in more places. Reducing the size of error messages
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:20:36     - Unknown word (ratings)    -- we can have a game ratings object, where games
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:20:58     - Unknown word (games)      -- ratings object, where games are
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:21:12     - Unknown word (rank)       -- // given a rank from 1 to 5. There are
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:24:6      - Unknown word (Rating)     -- type Rating = 1 | 2 | 3 | 4 | 5
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:27:3      - Unknown word (hades)      -- hades: Rating;
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:28:10     - Unknown word (Adventures) -- ringFitAdventures: Rating;
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:28:3      - Unknown word (ring)       -- ringFitAdventures: Rating
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:29:3      - Unknown word (disco)      -- discoElysium: Rating;
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:29:8      - Unknown word (Elysium)    -- discoElysium: Rating;
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:35:22     - Unknown word (Ratings)    -- declare const getYearRatings: (year: string) => GameRating
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:45:51     - Unknown word (Blind)      -- via ratings["oriAndTheBlindForest"]
packages/playground-examples/copy/en/4-2/New TS Features/Use Index Accessors for Index Signatures.ts:45:56     - Unknown word (Forest)     -- ratings["oriAndTheBlindForest"]
packages/playground-examples/copy/en/4-3/New TS Features/No Implicit Class Overrides.ts:12:28     - Unknown word (sandwich)   -- console.log("Make me a sandwich");
packages/playground-examples/copy/en/4-3/New TS Features/No Implicit Class Overrides.ts:23:33     - Unknown word (vague)      -- doSomething' is a bit vague. If you change the name
packages/playground-examples/copy/en/4-3/New TS Features/No Implicit Class Overrides.ts:25:31     - Unknown word (expectedly) -- decoupled the functions un-expectedly.
packages/playground-examples/copy/en/4-4/New JS Features/Errors for High Confidence Errors.ts:15:10     - Unknown word (Afraid)     -- name: "Afraid of Heights",
packages/playground-examples/copy/en/4-4/New JS Features/Errors for High Confidence Errors.ts:15:20     - Unknown word (Heights)    -- name: "Afraid of Heights",
packages/playground-examples/copy/en/4-4/New JS Features/Errors for High Confidence Errors.ts:17:12     - Unknown word (Billy)      -- name: "Billy Talent",
packages/playground-examples/copy/en/4-4/New JS Features/Errors for High Confidence Errors.ts:17:18     - Unknown word (Talent)     -- name: "Billy Talent",
packages/playground-examples/copy/en/4-4/New TS Features/Exact Optional Properties.ts:12:8      - Unknown word (Theme)      -- colorThemeOverride?: "dark" |
packages/playground-examples/copy/en/4-4/New TS Features/Exact Optional Properties.ts:20:23     - Unknown word (fuzziness)  -- However, there's a fuzziness to this behavior. The
packages/playground-examples/copy/en/4-4/New TS Features/Use unknown for Catch Variables.ts:10:8      - Unknown word (Crash)      -- iWillCrash();
packages/playground-examples/copy/en/4-4/New TS Features/Use unknown for Catch Variables.ts:29:10     - Unknown word (confirmed)  -- // to be confirmed by the type system before
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:10:3      - Unknown word (poppy)      -- poppy: "Pat",
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:12:3      - Unknown word (otto)       -- otto: 1,
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:6:14      - Unknown word (stringer)   -- const dog = "stringer";
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:8:13      - Unknown word (Owners)     -- const dogsToOwnersOrID = {
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:8:7       - Unknown word (dogs)       -- const dogsToOwnersOrID = {
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:9:17      - Unknown word (Shanes)     -- hayes: "The McShanes",
packages/playground-examples/copy/en/4-7/New JS Features/Control Flow Improvements.ts:9:3       - Unknown word (hayes)      -- hayes: "The McShanes",
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Deno.ts:20:14     - Unknown word (Loud)       -- function makeLoud(x: string) {
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Deno.ts:24:12     - Unknown word (Loudly)     -- const greetLoudly = compose(makeLoud,
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Deno.ts:26:4      - Unknown word (Echos)      -- // Echos "HELLO, WORLD!."
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Node.js:3:49      - Unknown word (built)      -- popular JavaScript runtime built on v8,
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with React.tsx:18:32     - Unknown word (faux)       -- components. This is a faux-React functional component
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with React.tsx:40:29     - Unknown word (renders)    -- DateProps interface, and renders the date.
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with React.tsx:98:17     - Unknown word (Cersei)     -- let username = "Cersei";
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with React.tsx:99:11     - Unknown word (Stored)     -- const ShowStoredUser: React.FC<Props
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with React.tsx:9:18      - Unknown word (richly)     -- // type tools to richly model how components
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Web.js:19:13     - Unknown word (Popover)    -- const removePopover = () => {
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Web.js:35:29     - Unknown word (solid)      -- style.border = "1px solid black";
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Web.js:43:19     - Unknown word (obscure)    -- // Including more obscure, or deprecated CSS attributes
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with Web.js:7:19      - Unknown word (popover)    -- // Let's create a popover to show when you press
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:123:37    - Unknown word (scene)      -- the lighting in the scene, as well as the border
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:169:49    - Unknown word (pointers)   -- attributes and create pointers in memory for the JS
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:196:11    - Unknown word (PARTICLES)  -- const NUM_PARTICLES = 200;
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:201:43    - Unknown word (sends)      -- having an odd number sends
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:202:18    - Unknown word (whack)      -- // it way out of whack.
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:274:28    - Unknown word (Fiddle)     -- Credit: based on this JSFiddle by Subzey
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:34:44     - Unknown word (raster)     -- and not the default raster engine):
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:4:11      - Unknown word (spinning)   -- // render spinning confetti using JavaScript
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:4:20      - Unknown word (confetti)   -- // render spinning confetti using JavaScript. We
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:52:11     - Unknown word (lowp)       -- precision lowp float;
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:58:19     - Unknown word (particle)   -- attribute float a_particleDistance;
packages/playground-examples/copy/en/JavaScript/External APIs/TypeScript with WebGL.js:69:9      - Unknown word (vert)       -- float vertPosition = 1.1 - mod
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Function Chaining.ts:5:14      - Unknown word (intermediary) -- // with less intermediary values and easier to
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Function Chaining.ts:6:29      - Unknown word (qualities)    -- because of their nesting qualities.
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Generic Functions.ts:18:4      - Unknown word (culturally) -- // culturally similar to how people
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Generic Functions.ts:39:44     - Unknown word (subset)     -- need to only allow a subset of types.
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Generic Functions.ts:43:11     - Unknown word (Drawable)   -- interface Drawable {
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Generic Functions.ts:90:9      - Unknown word (escalated)  -- // That escalated pretty quickly in terms
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:115:39    - Unknown word (Useful)     -- runtime in this file. Useful for mapping
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:116:52    - Unknown word (demos)      -- extremely useful for demos
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:41:7      - Unknown word (hovering)   -- // By hovering on index above, you
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:54:7      - Unknown word (stringed)   -- // on stringedNumbers below you can
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:72:12     - Unknown word (Formatted)  -- const printFormattedName = (input: AnyObjectButMus
packages/playground-examples/copy/en/JavaScript/Functions with JavaScript/Typing Functions.ts:74:29     - Unknown word (joey)       -- printFormattedName({ name: "joey" });
packages/playground-examples/copy/en/JavaScript/Helping with JavaScript/Errors.ts:30:34     - Unknown word (unimportant) -- declare the failure unimportant, by telling
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Code Flow.ts:6:25      - Unknown word (Ahmed)      -- const users = [{ name: "Ahmed" }, { name: "Gemma"
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Code Flow.ts:6:44      - Unknown word (Gemma)      -- "Ahmed" }, { name: "Gemma" }, { name: "Jon" }
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Functions.ts:40:37     - Unknown word (optimal)    -- for example) but isn't optimal for our function
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Functions.ts:87:24     - Unknown word (tour)       -- And to continue our tour of JavaScript essentials
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Functions.ts:87:43     - Unknown word (essentials) -- our tour of JavaScript essentials,
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Hello World.ts:19:29     - Unknown word (tiny)       -- can see how it makes tiny changes to the code
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Hello World.ts:6:51      - Unknown word (experiment) -- easy for you to safely experiment
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Objects and Arrays.ts:25:4      - Unknown word (interpreting) -- // interpreting your JavaScript into
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Objects and Arrays.ts:63:7      - Unknown word (popped)       -- const poppedFirstOrder = allOrders
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Objects and Arrays.ts:65:28     - Unknown word (Mutating)     -- allOrders is empty. Mutating data can be useful for
packages/playground-examples/copy/en/JavaScript/JavaScript Essentials/Objects and Arrays.ts:7:10      - Unknown word (Kieron)     -- name: "Kieron",
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:109:30    - Unknown word (rhythm)       -- read with a consistent rhythm.
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:29:9      - Unknown word (Wrapper)    -- const myWrapperFunction = async ()
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:42:9      - Unknown word (Throwing)   -- const myThrowingFunction = async ()
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:47:41     - Unknown word (unexpectedly) -- where the function acts unexpectedly.
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:49:20     - Unknown word (Catching)     -- const asyncFunctionCatching = async () => {
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Async Await.ts:62:40     - Unknown word (exceptional)  -- when something truly exceptional has
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Immutability.ts:2:48      - Unknown word (prominent)  -- don't change. The most prominent is
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Immutability.ts:31:40     - Unknown word (stays)      -- value at that point stays the same, but
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Immutability.ts:50:4      - Unknown word (staying)    -- // staying the same under the hood
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Import Export.ts:11:33     - Unknown word (Danger)     -- danger, message, warn, DangerDSLType } from "danger
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Import Export.ts:25:20     - Unknown word (engineers)  -- // TypeScript lets engineers document their code
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Import Export.ts:66:17     - Unknown word (stickers)   -- /** The current stickers left on the roll */
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Import Export.ts:67:22     - Unknown word (Stickers)   -- export const numberOfStickers = 11;
packages/playground-examples/copy/en/JavaScript/Modern JavaScript/Import Export.ts:76:17     - Unknown word (sticker)    -- /** Generates a sticker for you */
packages/playground-examples/copy/en/JavaScript/README.md:4:29      - Unknown word (lightly)    -- TypeScript features lightly, but the focus should
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:26:34     - Unknown word (Shop)       -- new Vendor("Ye Olde Shop");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:29:46     - Unknown word (cart)       -- object. Here's a food cart which
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:32:11     - Unknown word (Truck)      -- class FoodTruck extends Vendor {
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:32:7      - Unknown word (Food)       -- class FoodTruck extends Vendor
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:33:3      - Unknown word (cuisine)    -- cuisine: string;
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:41:33     - Unknown word (truck)      -- Hi, welcome to food truck " + this.name + ". We
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:49:38     - Unknown word (Salome's)   -- ameOnlyTruck = new FoodTruck("Salome's Adobo");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:49:47     - Unknown word (Adobo)      -- FoodTruck("Salome's Adobo");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:54:30     - Unknown word (Dave's)     -- truck = new FoodTruck("Dave's Doritos", "junk");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:54:37     - Unknown word (Doritos)    -- new FoodTruck("Dave's Doritos", "junk");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Classes 101.ts:54:48     - Unknown word (junk)       -- FoodTruck("Dave's Doritos", "junk");
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:11:14     - Unknown word (Clothing)   -- class Drawer<ClothingType> {
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:11:7      - Unknown word (Drawer)     -- class Drawer<ClothingType> {
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:34:36     - Unknown word (socks)      -- create a Drawer just for socks by passing in the
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:42:38     - Unknown word (Shirts)     -- creating a drawer for TShirts:
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:46:20     - Unknown word (eccentric)  -- // If you're a bit eccentric, you could even create
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:47:16     - Unknown word (Socks)      -- // which mixes Socks and TShirts by using
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:63:7      - Unknown word (Dresser)    -- class Dresser {
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:83:22     - Unknown word (Coat)       -- * @typedef {Object} Coat An item of clothing
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:83:38     - Unknown word (clothing)   -- Object} Coat An item of clothing
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:84:44     - Unknown word (coat)       -- color The colour for coat
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:89:18     - Unknown word (Coats)      -- // which handles Coats.
packages/playground-examples/copy/en/JavaScript/Working With Classes/Generic Classes.ts:8:52      - Unknown word (drawer)     -- For example, here is a drawer
packages/playground-examples/copy/en/JavaScript/Working With Classes/Mixins.ts:102:6     - Unknown word (Moveable)   -- type Moveable = GConstructor<{ setXYAcceler
packages/playground-examples/copy/en/JavaScript/Working With Classes/Mixins.ts:38:27     - Unknown word (computers)  -- something which modern computers use to create depth
packages/playground-examples/copy/en/JavaScript/Working With Classes/Mixins.ts:58:13     - Unknown word (sprite)     -- // A simple sprite base class which will
packages/playground-examples/copy/en/JavaScript/Working With Classes/Mixins.ts:70:42     - Unknown word (sprites)    -- two different types of sprites
packages/playground-examples/copy/en/JavaScript/Working With Classes/Mixins.ts:91:27     - Unknown word (alphas)     -- the mixin for changing alphas:
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:18:30     - Unknown word (Jewels)     -- safe = new Safe("Crown Jewels");
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:21:24     - Unknown word (objected)   -- If you come from an objected oriented language where
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:33:30     - Unknown word (hosting)    -- moved to refer to the hosting object:
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:60:7      - Unknown word (Safely)     -- class SafelyBoundSafe {
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:75:40     - Unknown word (Golden)     -- new SafelyBoundSafe("Golden Skull");
packages/playground-examples/copy/en/JavaScript/Working With Classes/This.ts:75:47     - Unknown word (Skull)      -- SafelyBoundSafe("Golden Skull");
packages/playground-examples/copy/en/Playground/Config/JavaScript Playgrounds.js:36:18     - Unknown word (instantly)  -- // where you can instantly see what's going on
packages/playground-examples/copy/en/Playground/Config/JavaScript Playgrounds.js:5:29      - Unknown word (wonder)     -- quite reasonable to wonder why we would add support
packages/playground-examples/copy/en/Playground/Config/New Compiler Defaults.ts:10:47     - Unknown word (playground's) -- have changed from the playground's
packages/playground-examples/copy/en/Playground/Config/New Compiler Defaults.ts:11:27     - Unknown word (sharable)     -- defaults and make them sharable in the URL.
packages/playground-examples/copy/en/Playground/Config/New Compiler Defaults.ts:16:4      - Unknown word (Wonder)       -- // Wonder what the new defaults
packages/playground-examples/copy/en/Playground/Config/New Compiler Defaults.ts:8:39      - Unknown word (happily)    -- playground however, we can happily set the defaults
packages/playground-examples/copy/en/Playground/Language/Automatic Type Acquisition.ts:23:19     - Unknown word (pulls)      -- danger.github.api.pulls.createComment();
packages/playground-examples/copy/en/Playground/Language/Fixits.ts:6:4       - Unknown word (pops)       -- // pops up, you'll get offered
packages/playground-examples/copy/en/Playground/Tooling/Mobile Support.ts:13:26     - Unknown word (pane)       -- Switch to a single pane editor. This means you
packages/playground-examples/copy/en/Playground/Tooling/Mobile Support.ts:16:41     - Unknown word (painful)    -- the experience less painful.
packages/playground-examples/copy/en/Playground/Tooling/Mobile Support.ts:3:4       - Unknown word (Tiny)       -- // Tiny devices may not be very
packages/playground-examples/copy/en/Playground/Tooling/Mobile Support.ts:5:4       - Unknown word (someone's)  -- // someone's link a quick review
packages/playground-examples/copy/en/Playground/Tooling/Sharable URLs.ts:23:50     - Unknown word (reloads)       -- the browser correctly reloads when
packages/playground-examples/copy/en/Playground/Tooling/Sharable URLs.ts:24:36     - Unknown word (harmless)      -- between examples. It's harmless.
packages/playground-examples/copy/en/Playground/Tooling/Sharable URLs.ts:27:51     - Unknown word (Pressing)      -- selecting some text. Pressing
packages/playground-examples/copy/en/Playground/Tooling/Sharable URLs.ts:4:48      - Unknown word (reproductions) -- settings. This makes reproductions
packages/playground-examples/copy/en/Playground/Tooling/TypeScript Versions.ts:3:19      - Unknown word (coupled)    -- // is now loosely coupled to both monaco-editor
packages/playground-examples/copy/en/Playground/Tooling/TypeScript Versions.ts:9:12      - Unknown word (coupling)   -- // Loosely coupling means the playground
packages/playground-examples/copy/en/Playground/Tooling/TypeScript Versions.ts:9:4       - Unknown word (Loosely)    -- // Loosely coupling means the playground
packages/playground-examples/copy/en/TypeScript/Language Extensions/Enums.ts:16:4      - Unknown word (increments) -- // increments continue from that value
packages/playground-examples/copy/en/TypeScript/Language Extensions/Enums.ts:21:3      - Unknown word (Unauthorized) -- Unauthorized,
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:10:18     - Unknown word (drawbacks)  -- // This can have drawbacks, for example there are
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:12:39     - Unknown word (transferrable) -- ever make the values transferrable. For
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:17:12     - Unknown word (Identification) -- // -  User Identification Numbers
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:23:26     - Unknown word (intersectional) -- We're going to use an intersectional type, with a unique
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:26:23     - Unknown word (Validated)      -- normal string to a ValidatedInputString.
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:49:23     - Unknown word (bobby)          -- const input = "alert('bobby tables')";
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:6:19      - Unknown word (shaped)     -- // if the type is shaped like a duck, it's a
packages/playground-examples/copy/en/TypeScript/Language Extensions/Nominal Typing.ts:7:4       - Unknown word (goose)      -- // goose has all the same attributes
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:19:21     - Unknown word (intermix)   -- // it's possible to intermix their use too.
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:27:14     - Unknown word (nocturnal)  -- type Owl = { nocturnal: true } & BirdType;
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:28:6      - Unknown word (Robin)      -- type Robin = { nocturnal: false
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:30:11     - Unknown word (Peacock)    -- interface Peacock extends BirdType {
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:31:3      - Unknown word (colourful)  -- colourful: true;
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:32:3      - Unknown word (flies)      -- flies: false;
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:34:11     - Unknown word (Chicken)    -- interface Chicken extends BirdInterface
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:40:5      - Unknown word (chicken)    -- let chicken: Chicken = { wings:
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:56:11     - Unknown word (Kitten)     -- interface Kitten {
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:57:3      - Unknown word (purrs)      -- purrs: boolean;
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:67:6      - Unknown word (Puppy)      -- type Puppy = {
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:76:40     - Unknown word (publicly)   -- negative. However for publicly exposed
packages/playground-examples/copy/en/TypeScript/Language Extensions/Types vs Interfaces.ts:8:3       - Unknown word (wings)      -- wings: 2;
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:112:19    - Unknown word (compromised) -- // type system is compromised, see:
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:12:22     - Unknown word (decades)    -- / existed for a few decades however becomes about
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:13:50     - Unknown word (Simplicity) -- on three qualities: Simplicity,
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:14:4      - Unknown word (Usability)  -- // Usability and Soundness.
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:17:52     - Unknown word (usability)  -- towards simplicity and usability
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:40:34     - Unknown word (redefining) -- for a function support redefining the parameter
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:64:40     - Unknown word (smallest)   -- the way back to the smallest common type:
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:73:26     - Unknown word (expense)    -- in JavaScript, at the expense of having being sound
packages/playground-examples/copy/en/TypeScript/Language/Soundness.ts:82:14     - Unknown word (Discarding) -- // Parameter Discarding
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:15:11     - Unknown word (Sphere)     -- interface Sphere {
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:20:5      - Unknown word (sphere)     -- let sphere: Sphere = { diameter
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:29:11     - Unknown word (Tube)       -- interface Tube {
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:34:5      - Unknown word (tube)       -- let tube: Tube = { diameter:
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:47:48     - Unknown word (trick)      -- With one useful extra trick around
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:51:42     - Unknown word (Inches)     -- diameter: number, useInches: boolean) => {
packages/playground-examples/copy/en/TypeScript/Language/Structural Typing.ts:70:56     - Unknown word (balls)      -- forEach((ball, _index, _balls) => {
packages/playground-examples/copy/en/TypeScript/Language/Type Guards.ts:1:9       - Unknown word (Guarding)   -- // Type Guarding is the term where you
packages/playground-examples/copy/en/TypeScript/Language/Type Guards.ts:51:24     - Unknown word (Oder)       -- const definitelyNotAnOder = possibleOrder;
packages/playground-examples/copy/en/TypeScript/Language/Type Widening and Narrowing.ts:22:42     - Unknown word (wider)      -- let needs to have a wider type, you
packages/playground-examples/copy/en/TypeScript/Language/Type Widening and Narrowing.ts:44:15     - Unknown word (quantum)    -- declare const quantumString: string | undefined
packages/playground-examples/copy/en/TypeScript/Language/Type Widening and Narrowing.ts:48:23     - Unknown word (onus)       -- In strict mode the onus is on the code author
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:18:14     - Unknown word (meows)      -- type Cat = { meows: true };
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:19:14     - Unknown word (barks)      -- type Dog = { barks: true };
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:21:28     - Unknown word (howls)      -- Wolf = { barks: true; howls: true };
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:21:6      - Unknown word (Wolf)       -- type Wolf = { barks: true; howls
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:32:6      - Unknown word (wolf)       -- // A wolf will bark, so it returns
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:33:6      - Unknown word (Wolfish)    -- type Wolfish = ExtractDogish<Wolf
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:80:20     - Unknown word (Catish)     -- declare function isCatish<T>(x: T): T extends
packages/playground-examples/copy/en/TypeScript/Meta-Types/Conditional Types.ts:84:24     - Unknown word (deferring)  -- infer the type when deferring. That is the 'infer
packages/playground-examples/copy/en/TypeScript/Meta-Types/Discriminate Types.ts:25:13     - Unknown word (initiated)  -- const initiatedByUser = event.userStarted
packages/playground-examples/copy/en/TypeScript/Meta-Types/Discriminate Types.ts:35:11     - Unknown word (discriminator) -- // as the discriminator.
packages/playground-examples/copy/en/TypeScript/Meta-Types/Discriminate Types.ts:40:9      - Unknown word (Responses)     -- type APIResponses = { version: 0; msg
packages/playground-examples/copy/en/TypeScript/Meta-Types/Indexed Types.ts:16:32     - Unknown word (crafted)    -- interface were hand-crafted, it's pretty easy to
packages/playground-examples/copy/en/TypeScript/Meta-Types/Indexed Types.ts:5:11      - Unknown word (Artwork)    -- interface ArtworkSearchResponse {
packages/playground-examples/copy/en/TypeScript/Meta-Types/Mapped Types.ts:2:35      - Unknown word (transformational) -- type. Effectively a transformational type.
packages/playground-examples/copy/en/TypeScript/Meta-Types/Mapped Types.ts:51:6      - Unknown word (Correct)          -- type CorrectMappedArtistForEdit
packages/playground-examples/copy/en/TypeScript/Primitives/Literals.ts:38:10     - Unknown word (Sabrina)    -- name: "Sabrina",
packages/playground-examples/copy/en/TypeScript/Primitives/Literals.ts:45:16     - Unknown word (Cynthia)    -- myUser.name = "Cynthia";
packages/playground-examples/copy/en/TypeScript/Primitives/Literals.ts:51:9      - Unknown word (Unchanging) -- const myUnchangingUser = {
packages/playground-examples/copy/en/TypeScript/Primitives/Literals.ts:59:26     - Unknown word (Raîssa)     -- myUnchangingUser.name = "Raîssa";
packages/playground-examples/copy/en/TypeScript/Primitives/Literals.ts:65:32     - Unknown word (Brian)      -- exampleUsers = [{ name: "Brian" }, { name: "Fahrooq
packages/playground-examples/copy/en/TypeScript/Primitives/Union and Intersection Types.ts:18:28     - Unknown word (undermined) -- Unions can sometimes be undermined by type widening,
packages/playground-examples/copy/en/TypeScript/Primitives/Union and Intersection Types.ts:77:37     - Unknown word (England)    -- Banksy is an anonymous England-based graffiti artist
packages/playground-examples/copy/en/TypeScript/Primitives/Union and Intersection Types.ts:77:51     - Unknown word (graffiti)   -- anonymous England-based graffiti artist...",
packages/playground-examples/copy/en/TypeScript/Primitives/Union and Intersection Types.ts:7:7       - Unknown word (Messy)      -- type AMessyUnion = "hello" | 15
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:100:15    - Unknown word (Rosa)             -- return "Rosa rubiginosa";
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:100:20    - Unknown word (rubiginosa)       -- return "Rosa rubiginosa";
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:104:15    - Unknown word (Viola)            -- return "Viola reichenbachiana";
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:106:15    - Unknown word (Bellis)           -- return "Bellis perennis";
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:15:42     - Unknown word (Dorothea)   -- jsonParser(`{ "name": "Dorothea" }`);
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:46:44     - Unknown word (logically)  -- represent when code logically cannot
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:61:13     - Unknown word (unpredictability) -- // with the unpredictability of the JavaScript runtime
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:76:32     - Unknown word (valves)           -- there are enough escape valves in JavaScript whereby
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:76:53     - Unknown word (whereby)          -- valves in JavaScript whereby
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:88:36     - Unknown word (Tulip)            -- option to the enum (maybe Tulip?)
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:90:6      - Unknown word (Flower)           -- enum Flower {
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:92:3      - Unknown word (Rhododendron)     -- Rhododendron,
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:93:3      - Unknown word (Violet)           -- Violet,
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:94:3      - Unknown word (Daisy)            -- Daisy,
packages/playground-examples/copy/en/TypeScript/Primitives/Unknown and Never.ts:97:7      - Unknown word (flower)           -- const flowerLatinName = (flower:
packages/playground-examples/copy/en/TypeScript/README.md:6:19      - Unknown word (angles)     -- and provide a few angles in which you can look
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:112:6     - Unknown word (Accessible)  -- type AccessiblePageInfo = Required<PageInfo
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:117:21    - Unknown word (manipulates) -- // type but instead manipulates the definition of this
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:13:11     - Unknown word (Sticker)    -- interface Sticker {
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:18:3      - Unknown word (submitter)  -- submitter: undefined | string
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:3:27      - Unknown word (feels)      -- When a particular type feels like it's useful in
packages/playground-examples/copy/en/TypeScript/Type Primitives/Built-in Utility Types.ts:54:15     - Unknown word (Essentially) -- // from Type. Essentially an allow-list for extracting
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:15:45     - Unknown word (conscious)  -- used when there is a conscious lack
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:21:30     - Unknown word (Soundtrack) -- { name: "LEGO Movie Soundtrack" },
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:24:27     - Unknown word (Mainly)     -- Why not use undefined? Mainly, because now you can
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:29:26     - Unknown word (superficial) -- This might feel a bit superficial, but when converted
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:45:38     - Unknown word (Potential)   -- TypeScript, hover over "Potential String" below:
packages/playground-examples/copy/en/TypeScript/Type Primitives/Nullable Types.ts:57:19     - Unknown word (Logged)      -- console.log("User Logged in: ", userID.toUpperCase
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:37:26     - Unknown word (fixtures)   -- connected data or for fixtures.
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:41:7      - Unknown word (staff)      -- const staff: StaffAccount[] = [
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:42:19     - Unknown word (adankwo)    -- [0, "Adankwo", "adankwo.e@"],
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:42:8      - Unknown word (Adankwo)    -- [0, "Adankwo", "adankwo.e@"],
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:44:19     - Unknown word (aneurin)    -- [2, "Aneurin", "aneurin.s@", "Supervisor"],
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:44:8      - Unknown word (Aneurin)    -- [2, "Aneurin", "aneurin.s@", "Supervisor
packages/playground-examples/copy/en/TypeScript/Type Primitives/Tuples.ts:52:9      - Unknown word (Stubs)      -- type PayStubs = [StaffAccount, ..
packages/playground-examples/scripts/generateTOC.js:112:9     - Unknown word (prod)       -- const prodTableOfContentsFile
packages/playground-handbook/copy/en/Compiler Settings.md:11:177    - Unknown word (versus)       -- current compiler options versus the default settings
packages/playground-handbook/copy/en/Compiler Settings.md:21:90     - Unknown word (needlessly)   -- t add to their size needlessly. You might notice that
packages/playground-handbook/copy/en/Compiler Settings.md:26:5      - Unknown word (rough)        -- _In rough_, the Playground has
packages/playground-handbook/copy/en/Compiler Settings.md:26:54     - Unknown word (summed)       -- settings which can be summed up as this:
packages/playground-handbook/copy/en/Compiler Settings.md:3:335     - Unknown word (suck)       -- that to match would suck.
packages/playground-handbook/copy/en/Compiler Settings.md:5:104     - Unknown word (Playground's) -- - under that is the Playground's toolbar. This toolbar
packages/playground-handbook/copy/en/Compiler Settings.md:5:32      - Unknown word (toolbars)   -- prose there are two toolbars, one is the site navigation
packages/playground-handbook/copy/en/Compiler Settings.md:9:281     - Unknown word (organically)  -- This list has grown organically over time and generally
packages/playground-handbook/copy/en/Examples.md:3:113     - Unknown word (tight)      -- TypeScript with a very tight focus. They are not
packages/playground-handbook/copy/en/Examples.md:3:269     - Unknown word (metaphors)  -- explanation (with different metaphors and ideas) inside comments
packages/playground-handbook/copy/en/Examples.md:3:328     - Unknown word (invites)    -- of a Playground which invites the writer to fidget
packages/playground-handbook/copy/en/Examples.md:3:340     - Unknown word (writer)     -- Playground which invites the writer to fidget with the code
packages/playground-handbook/copy/en/Examples.md:3:350     - Unknown word (fidget)     -- invites the writer to fidget with the code and see
packages/playground-handbook/copy/en/Examples.md:5:19      - Unknown word (Speaking)   -- <details><summary>Speaking as the author, ...<
packages/playground-handbook/copy/en/Examples.md:9:16      - Unknown word (studying)   -- I believe that studying something complex revolves
packages/playground-handbook/copy/en/Examples.md:9:221     - Unknown word (study)      -- TypeScript, and you can study it, but with the Playground
packages/playground-handbook/copy/en/Examples.md:9:43      - Unknown word (revolves)   -- studying something complex revolves around creating a mesh
packages/playground-handbook/copy/en/Exporting Your Code.md:11:109    - Unknown word (Viewer)     -- the [TypeScript AST Viewer](https://ts-ast-viewer
packages/playground-handbook/copy/en/Exporting Your Code.md:15:51     - Unknown word (presenting) -- strong focus on only presenting a single text file,
packages/playground-handbook/copy/en/Exporting Your Code.md:17:354    - Unknown word (recreate)   -- jsx, .d.ts}` files and recreate that node project in
packages/playground-handbook/copy/en/Exporting Your Code.md:17:479    - Unknown word (wall)       -- working when you hit a wall with the available features
packages/playground-handbook/copy/en/Exporting Your Code.md:19:17     - Unknown word (Tweet)      -- There's also a "Tweet this Playground" because
packages/playground-handbook/copy/en/Exporting Your Code.md:7:148     - Unknown word (chat)       -- a summary link in a chat.
packages/playground-handbook/copy/en/JS + DTS sidebars.md:1:16      - Unknown word (Sidebars)   -- ## .JS + .D.TS Sidebars
packages/playground-handbook/copy/en/JS + DTS sidebars.md:21:19     - Unknown word (asked)      -- No-one has really asked for `.map` support,
packages/playground-handbook/copy/en/Localization.md:14:20     - Unknown word (folks)        -- Ideally this helps folks for whom English is
packages/playground-handbook/copy/en/Localization.md:14:30     - Unknown word (whom)         -- this helps folks for whom English is a second
packages/playground-handbook/copy/en/Localization.md:1:4       - Unknown word (Localization) -- ## Localization
packages/playground-handbook/copy/en/Overview.md:3:418     - Unknown word (teaching)   -- line. In summary, a teaching tool where you can safely
packages/playground-handbook/copy/en/Overview.md:5:138     - Unknown word (featured)   -- TypeScript website has featured a playground as a way
packages/playground-handbook/copy/en/Overview.md:7:285     - Unknown word (rabbit)     -- t dive into too many rabbit holes. That said, the
packages/playground-handbook/copy/en/Overview.md:7:292     - Unknown word (holes)      -- into too many rabbit holes. That said, the rabbit
packages/playground-handbook/copy/en/Overview.md:7:384     - Unknown word (illusion)   -- lives and time is an illusion anyway. So, we'll get
packages/playground-handbook/copy/en/Running Code.md:12:3      - Unknown word (Capture)    -- - Capture any `console.log`,
packages/playground-handbook/copy/en/Running Code.md:16:389    - Unknown word (showcases)  -- webgl) which are good showcases of how that can work
packages/playground-handbook/copy/en/Running Code.md:3:126     - Unknown word (ephemeral)  -- types in TypeScript are ephemeral (they don't affect the
packages/playground-handbook/copy/en/Running Code.md:7:110     - Unknown word (Hitting)    -- is a "Run" button. Hitting this run button will
packages/playground-handbook/copy/en/Settings Panel.md:15:13     - Unknown word (Tabs)       -- ### Sidebar Tabs
packages/playground-handbook/copy/en/Settings Panel.md:15:5      - Unknown word (Sidebar)    -- ### Sidebar Tabs
packages/playground-handbook/copy/en/Settings Panel.md:17:22     - Unknown word (tabs)       -- You can choose which tabs are available in the
packages/playground-handbook/copy/en/Settings Panel.md:17:75     - Unknown word (toggle)     -- Playground sidebar via the toggle boxes under above Playground
packages/playground-handbook/copy/en/Settings Panel.md:3:25      - Unknown word (corner)     -- Hidden in the top right corner, under "Search Docs
packages/playground-handbook/copy/en/Settings Panel.md:9:1       - Unknown word (Turns)      -- Turns off [Type Acquisition
packages/playground-handbook/copy/en/Twoslash Annotations.md:18:8      - Unknown word (arcane)     -- A more arcane, but very ergonomic
packages/playground-handbook/copy/en/Twoslash Annotations.md:50:188    - Unknown word (cool)       -- compiler runs. It's quite a cool system, you can learn
packages/playground-handbook/copy/en/Type Acquisition.md:3:21      - Unknown word (island)     -- No Playground is an island. Well, not strictly
packages/playground-handbook/copy/en/Type Acquisition.md:5:160     - Unknown word (utilizing)  -- JavaScript projects utilizing TypeScript: Automatic
packages/playground-handbook/copy/en/URL Structure.md:11:122    - Unknown word (compress)      -- You can use [`LZString.compressToEncodedURIComponent
packages/playground-handbook/copy/en/URL Structure.md:11:132    - Unknown word (Encoded)       -- `LZString.compressToEncodedURIComponent`](https
packages/playground-handbook/copy/en/URL Structure.md:11:39     - Unknown word (zipped)        -- ...` - A base64 and zipped version of the code
packages/playground-handbook/copy/en/URL Structure.md:3:81      - Unknown word (environmental) -- represent all possible environmental setting inside the URL
packages/playground-handbook/copy/en/Writing DTS Files.md:3:71      - Unknown word (feeling)    -- while will know that feeling when you first realise
packages/playground-handbook/copy/en/Writing DTS Files.md:3:94      - Unknown word (realise)    -- feeling when you first realise that you may have wrote
packages/playground-handbook/copy/en/Writing JavaScript.md:3:51      - Unknown word (madness)    -- TypeScript_ Playground, madness!" - maybe, but there
packages/playground-handbook/copy/en/Writing JavaScript.md:5:120     - Unknown word (weirder)    -- tooling overhead and with weirder syntax. JSDoc-flavoured
packages/playground-handbook/copy/en/Writing JavaScript.md:5:42      - Unknown word (flavoured)  -- JavaScript** - JSDoc-flavoured JavaScript is TypeScript
packages/playground-handbook/copy/en/Writing JavaScript.md:5:77      - Unknown word (lite)       -- JavaScript is TypeScript-lite without the tooling
packages/playground-handbook/copy/en/Writing JavaScript.md:9:196     - Unknown word (emulate)    -- Playground can be used to emulate that environment.
packages/playground-handbook/scripts/generateJSON.mjs:17:13     - Unknown word (sidebars)   -- "JS + DTS sidebars.md", // 3
packages/playground-worker/index.ts:112:39    - Unknown word (whats)      -- is TypeScript asking 'whats the content of this
packages/playground-worker/index.ts:116:19    - Unknown word (twoslashed) -- const twoslashed = this.twoslashFiles
packages/playground-worker/index.ts:135:76    - Unknown word (rebound)    -- tooling experience, rebound to
packages/playground-worker/index.ts:138:20    - Unknown word (theres)     -- // Perhaps theres a way to make all these
packages/playground-worker/index.ts:140:12    - Unknown word (Bunch)      -- // Bunch of promise -> diag[
packages/playground-worker/index.ts:157:94    - Unknown word (gaps)       -- interacting inside the gaps
packages/playground-worker/index.ts:19:9      - Unknown word (twolash)    -- twolashFilesModelString: string
packages/playground-worker/index.ts:232:44    - Unknown word (rebindings) -- functions which make the rebindings easier to manage
packages/playground-worker/index.ts:243:16    - Unknown word (Gaps)       -- // Gaps between files skip the
packages/playground-worker/index.ts:27:12     - Unknown word (grabbable)  -- // grabbable via these mirrored models
packages/playground-worker/index.ts:76:30     - Unknown word (Switched)   -- console.log("Switched playground to use multiple
packages/playground-worker/index.ts:89:46     - Unknown word (shifts)     -- fileName and position and shifts it to the new file/pos
packages/playground-worker/types.d.ts:110:62    - Unknown word (libs)       -- ScriptWorker, tsc: typeof ts, libs: Record<string, string
packages/playground-worker/types.d.ts:6:12      - Unknown word (Libs)       -- type IExtraLibs = Record<string, string
packages/playground/README.md:13:18     - Unknown word (bars)         -- - The navigation bars, and compiler flags
packages/playground/README.md:5:90      - Unknown word (Originally) -- dependencies as possible. Originally based on the
packages/playground/README.md:6:85      - Unknown word (diverged)   -- typescript-play) but now it's diverged far from that fork.
packages/playground/README.md:8:4       - Unknown word (Architecture) -- ## Architecture
packages/playground/scripts/getListOfPluginsFromNPM.js:45:7      - Unknown word (capitalize) -- const capitalize = str => str.charAt
packages/playground/src/createConfigDropdown.ts:130:23    - Unknown word (checkbox)   -- input.type = "checkbox"
packages/playground/src/createConfigDropdown.ts:15:17     - Unknown word (Stub)       -- type CompilerOptStub = {
packages/playground/src/createConfigDropdown.ts:212:50    - Unknown word (blurb)      -- string, id: string, blurb: string, sandbox: Sandbox
packages/playground/src/createConfigDropdown.ts:24:10     - Unknown word (Relevant)   -- const notRelevantToPlayground = [
packages/playground/src/createElements.ts:103:18    - Unknown word (dragger)    -- // Set the dragger to the previous x pos
packages/playground/src/createElements.ts:230:43    - Unknown word (boot)       -- plugin it's getting the boot
packages/playground/src/createElements.ts:244:12    - Unknown word (booting)    -- // Start booting up the new plugin
packages/playground/src/createElements.ts:27:18     - Unknown word (widths)     -- // Set the widths
packages/playground/src/createElements.ts:67:15     - Unknown word (dragging)   -- // Handle dragging all over the screen
packages/playground/src/createElements.ts:92:45     - Unknown word (screens)    -- sidebar hidden on small screens
packages/playground/src/createUI.ts:10:15     - Unknown word (flash)      -- /** A quick flash of some text */
packages/playground/src/createUI.ts:172:36    - Unknown word (tapped)       -- closure when escape is tapped
packages/playground/src/createUI.ts:5:9       - Unknown word (Focal)      -- postFocalElement: HTMLElement
packages/playground/src/createUI.ts:6:5       - Unknown word (subtitle)   -- subtitle?: string,
packages/playground/src/createUI.ts:87:25     - Unknown word (screenreader) -- // works with every screenreader and browser combination
packages/playground/src/ds/createDesignSystem.ts:101:13    - Unknown word (inverted)    -- const invertedLogic = setting.emptyImpliesEn
packages/playground/src/ds/createDesignSystem.ts:101:21    - Unknown word (Logic)       -- const invertedLogic = setting.emptyImpliesEnabled
packages/playground/src/ds/createDesignSystem.ts:272:28    - Unknown word (reveal)      -- sandbox.editor.revealLine(start.lineNumber
packages/playground/src/ds/createDesignSystem.ts:418:22    - Unknown word (Reloads)     -- keepValueAcrossReloads?: true
packages/playground/src/ds/createDesignSystem.ts:43:23     - Unknown word (clearing)   -- // console.log(`clearing, ${decorations.length
packages/playground/src/ds/createDesignSystem.ts:44:55     - Unknown word (Decorations) -- editor.getModel()?.getAllDecorations())
packages/playground/src/ds/createDesignSystem.ts:498:41    - Unknown word (selectable)  -- list of hoverable, and selectable items (errors, highlights
packages/playground/src/ds/createDesignSystem.ts:499:76    - Unknown word (massage)     -- feasible for you to massage other data to fit into
packages/playground/src/ds/createDesignSystem.ts:502:31    - Unknown word (hovers)      -- Lets you remove the hovers from listDiags etc
packages/playground/src/ds/createDesignSystem.ts:510:11    - Unknown word (Renders)     -- /** Renders an AST tree */
packages/playground/src/ds/createDesignSystem.ts:55:9      - Unknown word (Lets)        -- /** Lets a HTML Element hover
packages/playground/src/ds/createDesignSystem.ts:83:13     - Unknown word (localize)    -- const localize = i || (window as any
packages/playground/src/exporter.ts:150:21    - Unknown word (Workbench)  -- function openInBugWorkbench() {
packages/playground/src/exporter.ts:215:12    - Unknown word (codify)     -- function codify(code: string, ext: string
packages/playground/src/exporter.ts:261:19    - Unknown word (Chat)       -- function copyForChat(e: React.MouseEvent
packages/playground/src/exporter.ts:6:20      - Unknown word (Exporter)   -- export const createExporter = (sandbox: Sandbox
packages/playground/src/getExample.ts:23:46     - Unknown word (stuff)      -- the compiler settings stuff
packages/playground/src/index.ts:134:14    - Unknown word (Clicked)     -- const tabClicked: HTMLElement["onclick
packages/playground/src/index.ts:17:35     - Unknown word (exporter)   -- createExporter } from "./exporter"
packages/playground/src/index.ts:187:32    - Unknown word (playgrounds) -- there are multi-file playgrounds, we should show the
packages/playground/src/index.ts:188:40    - Unknown word (abuse)       -- more inline, but we can abuse the code lenses for
packages/playground/src/index.ts:188:55    - Unknown word (lenses)      -- we can abuse the code lenses for now because they
packages/playground/src/index.ts:190:16    - Unknown word (Lenses)      -- provideCodeLenses: function (model, token
packages/playground/src/index.ts:20:17     - Unknown word (Highlighter) -- import { ExampleHighlighter } from "./monaco/ExampleHighl
packages/playground/src/index.ts:238:6     - Unknown word (Keeps)       -- // Keeps track of whether the
packages/playground/src/index.ts:261:15    - Unknown word (Mvia)        -- const isESMviaModule = moduleNumber
packages/playground/src/index.ts:27:56     - Unknown word (Inlays)      -- layProvider } from "./twoslashInlays"
packages/playground/src/index.ts:340:30    - Unknown word (expanded)    -- a.setAttribute("aria-expanded", "true")
packages/playground/src/index.ts:348:48    - Unknown word (popovers)    -- height and widths for the popovers for the main playground
packages/playground/src/index.ts:357:44    - Unknown word (tabbing)     -- is to make sure that tabbing stays inside the dropdown
packages/playground/src/index.ts:361:24    - Unknown word (Press)       -- redirectTabPressTo(lastButton, exampleContaine
packages/playground/src/index.ts:378:7     - Unknown word (Handles)     -- /** Handles removing the dropdowns
packages/playground/src/index.ts:43:116    - Unknown word (navigates)   -- playground when someone navigates off the tab */
packages/playground/src/index.ts:473:69    - Unknown word (Gist)        -- Playground handbook when in a Gist")
packages/playground/src/index.ts:583:98    - Unknown word (severity)    -- uri }).filter(m => m.severity !== 1)
packages/playground/src/index.ts:605:59    - Unknown word (resizes)     -- width when the screen resizes
packages/playground/src/index.ts:615:19    - Unknown word (remeasure)   -- monaco.editor.remeasureFonts()
packages/playground/src/index.ts:666:17    - Unknown word (Wants)       -- const pluginWantsFront = readyPlugin.shouldBeSe
packages/playground/src/localizeWithFallback.ts:4:8       - Unknown word (Localize)   -- '__tsLocalize' in window ? window
packages/playground/src/navigation.ts:1:6       - Unknown word (Story)      -- type StoryContent =
packages/playground/src/navigation.ts:201:17    - Unknown word (hijack)     -- // We need to hijack internal links
packages/playground/src/navigation.ts:211:21    - Unknown word (incase)     -- // Fallback incase there is an extra level
packages/playground/src/navigation.ts:29:4      - Unknown word (Hides)      -- * Hides the nav and the close
packages/playground/src/navigation.ts:50:4      - Unknown word (Assumes)    -- * Assumes a nav has been set up
packages/playground/src/navigation.ts:50:52     - Unknown word (fills)      -- up already, and then fills out the content of the
packages/playground/src/navigation.ts:51:9      - Unknown word (clickable)  -- * with clickable links for each potential
packages/playground/src/navigation.ts:61:9      - Unknown word (titleh)     -- const titleh4 = document.createElement
packages/playground/src/navigation.ts:76:13     - Unknown word (logo)       -- let logo: string
packages/playground/src/pluginUtils.ts:61:9      - Unknown word (Flashes)    -- /** Flashes a HTML Element */
packages/playground/src/sidebar/ast.ts:22:13     - Unknown word (deepest)    -- let deepestElement: HTMLDivElement
packages/playground/src/sidebar/ast.ts:45:63     - Unknown word (ancestors)  -- then go through its ancestors till they are all opened
packages/playground/src/sidebar/ast.ts:45:73     - Unknown word (till)       -- through its ancestors till they are all opened
packages/playground/src/sidebar/fixtures/npmPlugins.ts:100:17    - Unknown word (Shortener)   -- name: "Link Shortener",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:101:37    - Unknown word (shortener)   -- typescript-playground-link-shortener",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:126:14    - Unknown word (sanders)     -- author: "sanders_n",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:138:12    - Unknown word (Planning)    -- name: "Planning Day",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:13:14     - Unknown word (anuraghazra) -- author: "anuraghazra",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:141:147   - Unknown word (Gantt)       -- configuration with a React Gantt chart visualization
packages/playground/src/sidebar/fixtures/npmPlugins.ts:141:159   - Unknown word (visualization) -- a React Gantt chart visualization.",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:141:53    - Unknown word (agile)       -- plugin for planning an agile sprint or iteration
packages/playground/src/sidebar/fixtures/npmPlugins.ts:142:14    - Unknown word (jsuder)        -- author: "jsuder",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:146:18    - Unknown word (Challenges)    -- name: "@Type Challenges/plugin",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:153:12    - Unknown word (Presentation)  -- name: "Presentation Mode",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:163:19    - Unknown word (Provides)      -- description: "Provides Vim keybindings for
packages/playground/src/sidebar/fixtures/npmPlugins.ts:27:19     - Unknown word (Makes)       -- description: "Makes reviewing DefinitelyTyped
packages/playground/src/sidebar/fixtures/npmPlugins.ts:32:30     - Unknown word (instant)     -- "@Structured Types/instant Documentation Plugin
packages/playground/src/sidebar/fixtures/npmPlugins.ts:36:14     - Unknown word (atanasster)  -- author: "atanasster",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:42:19     - Unknown word (Visualize)   -- description: "Visualize TypeScript's code inference
packages/playground/src/sidebar/fixtures/npmPlugins.ts:66:14     - Unknown word (kevram)      -- author: "kevram",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:6:14      - Unknown word (xavdid)     -- author: "xavdid",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:70:12     - Unknown word (Collaborate) -- name: "Collaborate",
packages/playground/src/sidebar/fixtures/npmPlugins.ts:71:21     - Unknown word (collaborate) -- id: "playground-collaborate",
packages/playground/src/sidebar/plugins.ts:130:29    - Unknown word (injecting)  -- Avoid XSS by someone injecting JS via the description
packages/playground/src/sidebar/plugins.ts:130:8     - Unknown word (Avoid)      -- // Avoid XSS by someone injecting
packages/playground/src/sidebar/plugins.ts:72:13     - Unknown word (subheading) -- const subheading = ds.subtitle(i("play
packages/playground/src/sidebar/runtime.ts:135:6     - Unknown word (Locator)    -- eleLocator: () => Element,
packages/playground/src/sidebar/runtime.ts:182:33    - Unknown word (switched)   -- constants which are switched out at the end of processing
packages/playground/src/sidebar/runtime.ts:183:9     - Unknown word (replacers)  -- const replacers = {
packages/playground/src/sidebar/runtime.ts:227:31    - Unknown word (omits)      -- // JSON.stringify omits any keys with a value
packages/playground/src/sidebar/runtime.ts:264:97    - Unknown word (quot)       -- gt;").replace(/"/g, "&quot;")
packages/playground/src/sidebar/settings.ts:21:48     - Unknown word (laziness)   -- zero, this is mostly laziness on my part but every
packages/playground/src/sidebar/settings.ts:43:26     - Unknown word (superfluous) -- / blurb: 'Turn on superfluous logging',
packages/playground/src/sidebar/showDTS.ts:15:68     - Unknown word (colored)    -- typescript", {}).then(coloredDTS => {
packages/playground/src/sidebar/showErrors.ts:17:8      - Unknown word (Bail)       -- // Bail early if there's nothing
packages/playground/src/sidebar/showErrors.ts:73:31     - Unknown word (Severity)   -- category: markerToDiagSeverity(m.severity),
packages/playground/src/theme.ts:16:59     - Unknown word (themes)     -- CSS can change between themes
packages/playground/src/theme.ts:1:32      - Unknown word (theme)      -- const setEditorTheme = (theme: 'light' | 'dark' |
packages/playground/src/twoslashInlays.ts:11:19     - Unknown word (Disposed)   -- if (model.isDisposed()) {
packages/playground/src/twoslashInlays.ts:34:23     - Unknown word (liner)      -- // Make a one-liner
packages/sandbox/README.md:14:3      - Unknown word (Easy)        -- - Easy to use when trying to
packages/sandbox/README.md:16:69     - Unknown word (additions)   -- Type Acquisition or DTS additions
packages/sandbox/README.md:23:4      - Unknown word (Installation) -- ## Installation
packages/sandbox/README.md:35:14     - Unknown word (Loader)       -- const getLoaderScript = document.createElemen
packages/sandbox/README.md:3:93      - Unknown word (opinionated) -- It's effectively an opinionated fork of
packages/sandbox/README.md:42:73     - Unknown word (infra)        -- or the TypeScript web infra CDN
packages/sandbox/README.md:79:26     - Unknown word (Could)        -- console.error("Could not get all the dependencies
packages/sandbox/script/downloadReleases.js:46:62     - Unknown word (Releases)   -- generated by scripts/downloadReleases.js
packages/sandbox/src/compilerOptions.ts:88:91     - Unknown word (jakebailey) -- == false) { // TODO(jakebailey): remove as any, check
packages/sandbox/src/index.ts:341:34    - Unknown word (Additions)     -- setupTSVFS = async (fsMapAdditions?: Map<string, string
packages/sandbox/src/index.ts:39:11     - Unknown word (Automatically) -- suppressAutomaticallyGettingDefaultText?:
packages/sandbox/src/index.ts:414:9     - Unknown word (Shortcut)      -- /** Shortcut for setting the model
packages/sandbox/src/index.ts:442:9     - Unknown word (Overwrite)     -- /** Overwrite the Sandbox's compiler
packages/sandbox/src/index.ts:457:16    - Unknown word (Complier)      -- getTwoSlashComplierOptions: getTwoSlashCompilerOp
packages/sandbox/src/theme.ts:12:18     - Unknown word (foreground) -- { token: "", foreground: "000000", background
packages/sandbox/src/theme.ts:12:53     - Unknown word (fffffe)     -- 0000", background: "fffffe" },
packages/sandbox/src/theme.ts:14:38     - Unknown word (italic)     -- emphasis", fontStyle: "italic" },
packages/sandbox/src/theme.ts:2:7       - Unknown word (darker)     -- const darkerBlue = "1142AF"
packages/sandbox/src/theme.ts:44:11     - Unknown word (Foreground) -- editorForeground: "#000000",
packages/sandbox/src/theme.ts:8:60      - Unknown word (Standalone) -- monaco-editor").editor.IStandaloneThemeData = {
packages/sandbox/src/twoslashSupport.ts:154:9     - Unknown word (knowns)     -- const knowns = [
packages/sandbox/src/vendor/lzstring.min.js:13:32     - Unknown word (COPYING)    -- TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATIO
packages/sandbox/src/vendor/lzstring.min.js:1:21      - Unknown word (reproduced) -- // Original license reproduced below:
packages/sandbox/src/vendor/lzstring.min.js:3:16      - Unknown word (FUCK)       -- // DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
packages/sandbox/src/vendor/lzstring.min.js:3:25      - Unknown word (WANT)       -- DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
packages/sandbox/src/vendor/lzstring.min.js:4:35      - Unknown word (December)   -- Version 2, December 2004
packages/sandbox/src/vendor/lzstring.min.js:6:28      - Unknown word (Hocevar)    -- Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
packages/sandbox/src/vendor/lzstring.min.js:8:39      - Unknown word (distribute) -- permitted to copy and distribute verbatim or modified
packages/sandbox/test/defaultCompilerOptions.test.ts:31:42     - Unknown word (asdasdasdasd) -- new URLSearchParams("?asdasdasdasd=false")
packages/sandbox/test/twoslashSupport.test.ts:4:14      - Unknown word (Mock)       -- const sandboxMock: any = (code: string
packages/ts-twoslasher/CONTRIBUTING.md:7:126     - Unknown word (regressed)  -- your change doesn't get regressed.
packages/ts-twoslasher/README.md:112:114   - Unknown word (makers)        -- only useful for tool-makers, defaults to false
packages/ts-twoslasher/README.md:292:27    - Unknown word (Collapsed)     -- "name": "groupCollapsed",
packages/ts-twoslasher/README.md:362:10    - Unknown word (offset)        -- > "offset": 9,
packages/ts-twoslasher/README.md:3:142     - Unknown word (Inspired)   -- the extra leg-work. Inspired
packages/ts-twoslasher/README.md:67:1      - Unknown word (Switching)  -- Switching this code sample to
packages/ts-twoslasher/README.md:67:54     - Unknown word (upsides)    -- use twoslash has a few upsides:
packages/ts-twoslasher/README.md:691:9     - Unknown word (woops)         -- sum(4, "woops")
packages/ts-twoslasher/README.md:79:3      - Unknown word (Enforcing)  -- - Enforcing accurate errors from
packages/ts-twoslasher/README.md:80:35     - Unknown word (distracting) -- code sample to hide distracting code
packages/ts-twoslasher/README.md:817:25    - Unknown word (pack)          -- function (to, from, pack) {
packages/ts-twoslasher/README.md:81:3      - Unknown word (Declaratively) -- - Declaratively highlighting symbols
packages/ts-twoslasher/README.md:82:3      - Unknown word (Replacing)     -- - Replacing code with the results
packages/ts-twoslasher/README.md:82:75     - Unknown word (ancillary)     -- different files, or ancillary files like .d.ts or
packages/ts-twoslasher/README.md:871:30    - Unknown word (transformers)  -- Allows applying custom transformers to the emit result,
packages/ts-twoslasher/README.md:872:9     - Unknown word (Transformers)  -- customTransformers?: CustomTransformers
packages/ts-twoslasher/README.md:875:7     - Unknown word (Absolute)      -- /** Absolute path to the directory
packages/ts-twoslasher/README.md:884:61    - Unknown word (overlaid)      -- virtual fs should be overlaid on top of when using
packages/ts-twoslasher/README.md:92:11     - Unknown word (GENERATED)     -- <!-- AUTO-GENERATED-CONTENT:START (FIXTURES
packages/ts-twoslasher/README.md:92:36     - Unknown word (FIXTURES)      -- GENERATED-CONTENT:START (FIXTURES) -->
packages/ts-twoslasher/README.md:977:15    - Unknown word (Dependency)    -- ## Using this Dependency
packages/ts-twoslasher/README.md:979:167   - Unknown word (released)      -- embedded inside the released packages.
packages/ts-twoslasher/scripts/inline-results.js:64:51     - Unknown word (fixture)    -- xturesFolder).sort().forEach((fixtureName) => {
packages/ts-twoslasher/scripts/inline-results.js:84:15     - Unknown word (codeless)   -- const codeless = {
packages/ts-twoslasher/scripts/makeGlobals.js:3:29      - Unknown word (tstwoslash) -- Creates a web version of tstwoslash which sets a global
packages/ts-twoslasher/src/index.ts:16:68     - Unknown word (Backed)     -- ypeScriptEnvironment, createFSBackedSystem } from "@typescript
packages/ts-twoslasher/src/index.ts:20:4      - Unknown word (Hacking)    -- // Hacking in some internal stuff
packages/ts-twoslasher/src/index.ts:525:11    - Unknown word (lsped)      -- const lspedQueries = updates.queries
packages/ts-twoslasher/src/index.ts:587:14    - Unknown word (Edited)     -- const newEditedFileCode = codeLines
packages/ts-twoslasher/src/index.ts:610:7     - Unknown word (errs)       -- let errs: import("typescript
packages/ts-twoslasher/src/index.ts:658:17    - Unknown word (burner)     -- const burnerSourceFile = ts.createSourceFi
packages/ts-twoslasher/src/index.ts:703:9     - Unknown word (relevant)   -- const relevantErrors = errs.filter
packages/ts-twoslasher/src/index.ts:755:10    - Unknown word (Looked)     -- `Looked for: ${emitSourceFilename
packages/ts-twoslasher/src/index.ts:791:6     - Unknown word (Cutting)    -- // Cutting happens last, and it
packages/ts-twoslasher/src/index.ts:800:8     - Unknown word (Kills)      -- // Kills the code shown
packages/ts-twoslasher/src/index.ts:803:61    - Unknown word (shifted)    -- it will need to be shifted to
packages/ts-twoslasher/src/utils.ts:101:5     - Unknown word (Came)       -- /** Came from https://ourcodeworld
packages/ts-twoslasher/src/validation.ts:11:11     - Unknown word (Errs)       -- const inErrsButNotFoundInTheHeader
packages/ts-twoslasher/src/validation.ts:69:20     - Unknown word (myself)     -- /** Mainly to warn myself, I've lost a good few
packages/ts-twoslasher/test/README.md:8:84      - Unknown word (showcase)   -- README, so they should showcase features - not bugs
packages/ts-twoslasher/test/cutting.test.ts:11:7      - Unknown word (hides)      -- it("hides the right code", ()
packages/ts-twoslasher/test/fixtures.test.ts:29:16     - Unknown word (Fixtures)   -- it("Hidden Fixtures: " + fixtureName, (
packages/ts-twoslasher/test/fixtures.test.ts:36:53     - Unknown word (Fixture)    -- JSON.stringify(cleanFixture(fourslashed)), { parser
packages/ts-twoslasher/test/fixtures/tests/hidden_emit.ts:3:43      - Unknown word (Portuguese) -- of 'Hello world' into Portuguese */
packages/ts-twoslasher/test/fixtures/tests/multiLookups.ts:4:10      - Unknown word (Feel)       -- // TODO: Feel up for a challenge,
packages/ts-twoslasher/test/fixtures/throws/unknown_extension.herjk:1:4       - Unknown word (Should)     -- // Should throw
packages/ts-twoslasher/test/queries.test.ts:15:14     - Unknown word (carets)     -- it("supports carets in the middle of an
packages/ts-twoslasher/test/utils.test.ts:30:12     - Unknown word (Identifiers) -- const allIdentifiers = getIdentifierTextSpans
packages/tsconfig-reference/copy/en/categories/Backwards_Compatibility_6253.md:2:11      - Unknown word (Backwards)  -- display: "Backwards Compatibility"
packages/tsconfig-reference/copy/en/categories/Completeness_6257.md:2:11      - Unknown word (Completeness) -- display: "Completeness"
packages/tsconfig-reference/copy/en/categories/Experimental_Options_6177.md:7:42      - Unknown word (compelling) -- cases where a feature is compelling enough to be an exception
packages/tsconfig-reference/copy/en/categories/Output_Formatting_6256.md:2:18      - Unknown word (Formatting) -- display: "Output Formatting"
packages/tsconfig-reference/copy/en/categories/Project_Files_0.md:2:16      - Unknown word (Inclusion)  -- display: "File Inclusion"
packages/tsconfig-reference/copy/en/categories/Strict_Type_Checking_Options_6173.md:10:49     - Unknown word (upgrading)  -- supported JavaScript, upgrading to a new version of
packages/tsconfig-reference/copy/en/categories/Strict_Type_Checking_Options_6173.md:13:31     - Unknown word (tackle)     -- suite of errors which tackle a new problem domain
packages/tsconfig-reference/copy/en/categories/Strict_Type_Checking_Options_6173.md:8:68      - Unknown word (odds)       -- a codebase can be at odds with some of these techniques
packages/tsconfig-reference/copy/en/cli/help.md:2:11      - Unknown word (Help)       -- display: "Help"
packages/tsconfig-reference/copy/en/intro.md:11:5      - Unknown word (categorized) -- - A categorized overview of all compiler
packages/tsconfig-reference/copy/en/intro.md:14:51     - Unknown word (tweaking)    -- watchOptions) fields, for tweaking the watch mode
packages/tsconfig-reference/copy/en/options/allowJs.md:10:33     - Unknown word (Heart)      -- const defaultCardDeck = "Heart";
packages/tsconfig-reference/copy/en/options/allowSyntheticDefaultImports.md:41:11     - Unknown word (raises)     -- This code raises an error because there
packages/tsconfig-reference/copy/en/options/alwaysStrict.md:6:1       - Unknown word (Ensures)    -- Ensures that your files are
packages/tsconfig-reference/copy/en/options/declarationDir.md:6:1       - Unknown word (Offers)     -- Offers a way to configure the
packages/tsconfig-reference/copy/en/options/diagnostics.md:6:148     - Unknown word (facing)     -- which are more user-facing results, and easier
packages/tsconfig-reference/copy/en/options/diagnostics.md:8:129     - Unknown word (harm)       -- in which there is no harm in using [`extendedDiagnostic
packages/tsconfig-reference/copy/en/options/diagnostics.md:8:49      - Unknown word (engineer)   -- TypeScript compiler engineer to give the results
packages/tsconfig-reference/copy/en/options/disableSizeLimit.md:6:28      - Unknown word (bloat)      -- avoid a possible memory bloat issues when working
packages/tsconfig-reference/copy/en/options/disableSolutionSearching.md:8:48      - Unknown word (responsiveness) -- can use to increase responsiveness in large composite projects
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:12:15     - Unknown word (Effects)    -- #### Example: Effects on `for / of`
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:35:26     - Unknown word (emoji)      -- Certain strings, such as emoji (😜), have a `.length
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:36:24     - Unknown word (Jonathan)   -- See [this blog post by Jonathan New](https://blog.jonnew
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:82:18     - Unknown word (observably) -- However, this is observably different in certain
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:84:73     - Unknown word (hole)       -- more items (contains a hole), the spread syntax
packages/tsconfig-reference/copy/en/options/downlevelIteration.md:88:14     - Unknown word (Hole)       -- let arrayWithHole = ['a', , 'c'];
packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md:18:7      - Unknown word (Demo)       -- class Demo {
packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md:25:7      - Unknown word (demo)       -- const demo = new Demo();
packages/tsconfig-reference/copy/en/options/emitDecoratorMetadata.md:6:1       - Unknown word (Enables)    -- Enables experimental support
packages/tsconfig-reference/copy/en/options/esModuleInterop.md:26:3      - Unknown word (chunk)      -- _.chunk(["a", "b", "c", "d"
packages/tsconfig-reference/copy/en/options/esModuleInterop.md:57:97     - Unknown word (owned)      -- properties which [are owned](https://developer.mozilla
packages/tsconfig-reference/copy/en/options/exclude.md:6:1       - Unknown word (Specifies)  -- Specifies an array of filenames
packages/tsconfig-reference/copy/en/options/extendedDiagnostics.md:9:33      - Unknown word (measure)    -- learn more about how to measure and understand the output
packages/tsconfig-reference/copy/en/options/extends.md:12:28     - Unknown word (circularity) -- config file, and that circularity between configuration
packages/tsconfig-reference/copy/en/options/extends.md:2:11      - Unknown word (Extends)    -- display: "Extends"
packages/tsconfig-reference/copy/en/options/generateCpuProfile.md:14:30     - Unknown word (chromium)   -- file can be opened in a chromium based browser like Chrome
packages/tsconfig-reference/copy/en/options/importsNotUsedAsValues.md:12:15     - Unknown word (Preserves)  -- - `preserve`: Preserves all `import` statements
packages/tsconfig-reference/copy/en/options/inlineSourceMap.md:10:1      - Unknown word (Mutually)   -- Mutually exclusive with [`sourceMap
packages/tsconfig-reference/copy/en/options/inlineSourceMap.md:10:10     - Unknown word (exclusive)  -- Mutually exclusive with [`sourceMap`](
packages/tsconfig-reference/copy/en/options/inlineSources.md:9:1       - Unknown word (Requires)   -- Requires either [`sourceMap`
packages/tsconfig-reference/copy/en/options/isolatedModules.md:45:11     - Unknown word (Instantiated) -- namespace Instantiated {
packages/tsconfig-reference/copy/en/options/lib.md:26:92     - Unknown word (Atomics)    -- , `Object.values`, `Atomics`, `SharedArrayBuffer
packages/tsconfig-reference/copy/en/options/lib.md:27:100    - Unknown word (Plural)     -- promise.finally`, `Intl.PluralRules`, `regexp.groups
packages/tsconfig-reference/copy/en/options/lib.md:32:138    - Unknown word (Reversed)   -- toSorted`, `array.toReversed`, etc.           |
packages/tsconfig-reference/copy/en/options/lib.md:36:47     - Unknown word (Hosting)    -- the [Windows Script Hosting System](https://wikipedia
packages/tsconfig-reference/copy/en/options/locale.md:16:3      - Unknown word (Czech)      -- | Czech | `cs
packages/tsconfig-reference/copy/en/options/locale.md:18:3      - Unknown word (French)     -- | French | `fr
packages/tsconfig-reference/copy/en/options/locale.md:19:3      - Unknown word (German)     -- | German | `de
packages/tsconfig-reference/copy/en/options/locale.md:20:3      - Unknown word (Italian)    -- | Italian | `it
packages/tsconfig-reference/copy/en/options/locale.md:22:3      - Unknown word (Korean)     -- | Korean | `ko
packages/tsconfig-reference/copy/en/options/locale.md:23:3      - Unknown word (Polish)     -- | Polish | `pl
packages/tsconfig-reference/copy/en/options/locale.md:26:3      - Unknown word (Turkish)    -- | Turkish | `tr
packages/tsconfig-reference/copy/en/options/locale.md:9:5       - Unknown word (Locales)    -- ### Locales supported as of TypeScript
packages/tsconfig-reference/copy/en/options/module.md:105:16    - Unknown word (Squared)    -- export const piSquared = valueOfPi * constants
packages/tsconfig-reference/copy/en/options/noErrorTruncation.md:13:17     - Unknown word (Exceedingly) -- propertyWithAnExceedinglyLongName1: string;
packages/tsconfig-reference/copy/en/options/noErrorTruncation.md:23:51     - Unknown word (truncated)   -- type of 'x' should be truncated in error message
packages/tsconfig-reference/copy/en/options/noErrorTruncation.md:6:8       - Unknown word (truncate)   -- Do not truncate error messages.
packages/tsconfig-reference/copy/en/options/noImplicitOverride.md:24:58     - Unknown word (playlists)  -- machine-learning generated playlists, you refactor the `Album
packages/tsconfig-reference/copy/en/options/noImplicitOverride.md:8:53      - Unknown word (syncing)    -- modeling a music album syncing system:
packages/tsconfig-reference/copy/en/options/noImplicitReturns.md:10:16     - Unknown word (Headphones) -- function lookupHeadphonesManufacturer(color:
packages/tsconfig-reference/copy/en/options/noImplicitReturns.md:12:13     - Unknown word (beats)      -- return "beats";
packages/tsconfig-reference/copy/en/options/noImplicitReturns.md:14:6      - Unknown word (bose)       -- "bose";
packages/tsconfig-reference/copy/en/options/noPropertyAccessFromIndexSignature.md:16:20     - Unknown word (medium)     -- speed: "fast" | "medium" | "slow";
packages/tsconfig-reference/copy/en/options/noResolve.md:9:126     - Unknown word (satisfied)  -- to make sure this is satisfied by some other means
packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md:12:143    - Unknown word (registering) -- some side effect (like registering a global variable, or
packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md:17:47     - Unknown word (stems)       -- behavior, but it partially stems from modeling patterns
packages/tsconfig-reference/copy/en/options/noUncheckedSideEffectImports.md:29:13     - Unknown word (masks)       -- Still, this masks potential typos on side
packages/tsconfig-reference/copy/en/options/noUnusedLocals.md:13:19     - Unknown word (keyboard)   -- return { type: "keyboard", modelID };
packages/tsconfig-reference/copy/en/options/paths.md:36:87     - Unknown word (prefixes)   -- support a number of custom prefixes to find code.
packages/tsconfig-reference/copy/en/options/plugins.md:12:86     - Unknown word (linting)    -- readme) &mdash; Adds SQL linting with a template strings
packages/tsconfig-reference/copy/en/options/plugins.md:8:125     - Unknown word (enhance)    -- TypeScript files. They can enhance existing messages between
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:13:16     - Unknown word (Futures)    -- JimmyEatWorldFutures = 1,
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:13:3      - Unknown word (Jimmy)      -- JimmyEatWorldFutures = 1,
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:14:13     - Unknown word (Hypothesis) -- TubRingZooHypothesis = 2,
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:15:13     - Unknown word (Disco)      -- DogFashionDiscoAdultery = 3,
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:15:18     - Unknown word (Adultery)   -- DogFashionDiscoAdultery = 3,
packages/tsconfig-reference/copy/en/options/preserveConstEnums.md:15:6      - Unknown word (Fashion)    -- DogFashionDiscoAdultery = 3,
packages/tsconfig-reference/copy/en/options/preserveWatchOutput.md:6:17      - Unknown word (outdated)   -- Whether to keep outdated console output in watch
packages/tsconfig-reference/copy/en/options/pretty.md:2:11      - Unknown word (Pretty)     -- display: "Pretty"
packages/tsconfig-reference/copy/en/options/pretty.md:6:1       - Unknown word (Stylize)    -- Stylize errors and messages
packages/tsconfig-reference/copy/en/options/pretty.md:6:117     - Unknown word (terse)      -- chance to have less terse,
packages/tsconfig-reference/copy/en/options/removeComments.md:6:1       - Unknown word (Strips)     -- Strips all comments from TypeScript
packages/tsconfig-reference/copy/en/options/rewriteRelativeImportExtensions.md:5:1       - Unknown word (Rewrite)    -- Rewrite .ts, .tsx, .mts, and
packages/tsconfig-reference/copy/en/options/rootDir.md:13:3      - Unknown word (Proj)       -- MyProj
packages/tsconfig-reference/copy/en/options/rootDir.md:53:86     - Unknown word (underneath) -- need to be emitted are underneath the `rootDir` path.
packages/tsconfig-reference/copy/en/options/rootDirs.md:31:63     - Unknown word (emulates)   -- JavaScript, it only emulates the assumption that
packages/tsconfig-reference/copy/en/options/skipLibCheck.md:14:69     - Unknown word (investigate) -- dependency in your tree or investigate how to ensure there
packages/tsconfig-reference/copy/en/options/skipLibCheck.md:17:97     - Unknown word (breakages)   -- and the changes cause breakages in node_modules and
packages/tsconfig-reference/copy/en/options/sourceMap.md:37:28     - Unknown word (UAAU)       -- mappings": ";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA"
packages/tsconfig-reference/copy/en/options/sourceMap.md:37:43     - Unknown word (CAAA)       -- QAAA,UAAU,GAAG,IAAI,CAAA"
packages/tsconfig-reference/copy/en/options/strict.md:7:94      - Unknown word (outlined)   -- options, which are outlined below.
packages/tsconfig-reference/copy/en/options/strictFunctionTypes.md:18:4      - Unknown word (Unsafe)     -- // Unsafe assignment
packages/tsconfig-reference/copy/en/options/strictNullChecks.md:45:85     - Unknown word (simplification) -- looks a bit like this simplification:
packages/tsconfig-reference/copy/en/options/stripInternal.md:12:4      - Unknown word (Days)       -- * Days available in a week
packages/tsconfig-reference/copy/en/options/stripInternal.md:17:32     - Unknown word (earns)      -- Calculate how much someone earns in a week */
packages/tsconfig-reference/copy/en/options/stripInternal.md:17:5      - Unknown word (Calculate)  -- /** Calculate how much someone earns
packages/tsconfig-reference/copy/en/options/stripInternal.md:18:17     - Unknown word (weekly)     -- export function weeklySalary(dayRate: number
packages/tsconfig-reference/copy/en/options/stripInternal.md:18:23     - Unknown word (Salary)     -- export function weeklySalary(dayRate: number) {
packages/tsconfig-reference/copy/en/options/stripInternal.md:2:11      - Unknown word (Strip)      -- display: "Strip Internal"
packages/tsconfig-reference/copy/en/options/stripInternal.md:41:63     - Unknown word (redacted)   -- ts` emitted will be redacted.
packages/tsconfig-reference/copy/en/options/target.md:15:156    - Unknown word (organized)  -- find a set of community organized TSConfigs at [tsconfig
packages/tsconfig-reference/copy/en/options/target.md:18:34     - Unknown word (caution)    -- should be used with caution, since it doesn't mean
packages/tsconfig-reference/copy/en/options/typeAcquisition.md:29:41     - Unknown word (acquired)   -- not be automatically acquired, for example if the
packages/tsconfig-reference/copy/en/options/verbatimModuleSyntax.md:2:11      - Unknown word (Verbatim)   -- display: "Verbatim Module Syntax"
packages/tsconfig-reference/copy/en/options/verbose.md:2:11      - Unknown word (Verbose)    -- display: "Verbose"
packages/tsconfig-reference/scripts/cli/generateJSON.ts:73:35     - Unknown word (Nable)      -- JS Map types to a JSONable obj
packages/tsconfig-reference/scripts/cli/generateMarkdown.ts:95:57     - Unknown word (disjunction) -- ListFormat(lang, { type: "disjunction" });
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:100:41    - Unknown word (preserve)      -- indicate if we need to preserve Jsx constructs, this
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:101:9     - Unknown word (Preserve)      -- <JsxPreserve>false</JsxPreserve>
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:10:1      - Unknown word (This)          -- This file defines the steps
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:125:107   - Unknown word (none)          -- TypeScriptJSXEmit)' != 'none'">$(TypeScriptBuildConfigurat
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:12:1      - Unknown word (Copyright)     -- Copyright (C) Microsoft Corporation
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:12:42     - Unknown word (rights)        -- Microsoft Corporation. All rights reserved.
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:146:131   - Unknown word (experimental)  -- eScriptBuildConfigurations) --experimentalDecorators</TypeScriptBuildCon
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:146:60    - Unknown word (Experimental)  -- Condition="'$(TypeScriptExperimentalDecorators)' == 'true
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:150:119   - Unknown word (react)         -- eScriptBuildConfigurations) --reactNamespace $(TypeScriptReactNam
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:152:126   - Unknown word (allow)         -- eScriptBuildConfigurations) --allowUnusedLabels</TypeScriptBuildC
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:152:60    - Unknown word (Allow)         -- Condition="'$(TypeScriptAllowUnusedLabels)' == 'true
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:174:68    - Unknown word (Generic)       -- $(TypeScriptNoStrictGenericChecks)' == 'true'">
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:17:94     - Unknown word (Intermediate)  -- utLogDirectory)' == '' And '$(IntermediateOutputPath)' != ''">
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:195:66    - Unknown word (Exists)        -- TSJavaScriptFile)' == '' AND Exists('$(TscFolderPath)\tsc
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:198:10    - Unknown word (Workaround)    -- <!-- Workaround for Cordova projects
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:198:25    - Unknown word (Cordova)       -- <!-- Workaround for Cordova projects which still
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:198:42    - Unknown word (which)         -- for Cordova projects which still use TscToolPath
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:210:13    - Unknown word (Capability)    -- <ProjectCapability Include="TypeScript
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:237:5     - Unknown word (Finds)         -- Finds set of tsconfig.json
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:239:40    - Unknown word (rooted)        -- searches subdirectories rooted at directory of project
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:245:72    - Unknown word (should)        -- tsconfig files that should be included in compilation
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:262:48    - Unknown word (Duplicates)    -- "@(foundFiles)" KeepDuplicates="false" />
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:270:35    - Unknown word (each)          -- this target associates each tsconfig file with its
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:27:60     - Unknown word (Sensitive)     -- Tasks.CheckFileSystemCaseSensitive" AssemblyFile="$(TypeScriptTa
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:286:91    - Unknown word (other)         -- may be used to build other projects
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:28:56     - Unknown word (String)        -- Tasks.FormatLocalizedString" AssemblyFile="$(TypeScriptTa
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:291:101   - Unknown word (gulp)          -- compiling using the grunt/gulp task,
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:291:95    - Unknown word (grunt)         -- compiling using the grunt/gulp task,
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:303:37    - Unknown word (duplicated)    -- GeneratedJavascript) - De-duplicated copy of @(emittedFiles
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:303:76    - Unknown word (empty)         -- @(emittedFiles). If empty, should_not_exist.file
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:32:23     - Unknown word (Depends)       -- <CompileTypeScriptDependsOn>
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:40:23     - Unknown word (After)         -- <CompileTypeScriptAfterTargets>
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:46:33     - Unknown word (Other)         -- TypeScriptDeleteOutputFromOtherConfigs;
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:472:46    - Unknown word (ensure)        -- CompileRan property to ensure the ItemGroup operations
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:52:21     - Unknown word (Collect)       -- <PublishPipelineCollectFilesCore>
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:621:5     - Unknown word (Gathers)       -- Gathers source files that should
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:630:45    - Unknown word (Contains)      -- temsFullPathWithTargetPath) - Contains all items involved in
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:639:105   - Unknown word (populated)     -- collections that will be populated (with items of other
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:641:262   - Unknown word (Newest)        -- ToOutputDirectory)'=='PreserveNewest'"/>
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:662:45    - Unknown word (enumerated)    -- mpilerOutput) - List of files enumerated in output log files
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:662:99    - Unknown word (after)         -- These will be deleted after the task runs.
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:66:6      - Unknown word (Built)         -- <BuiltProjectOutputGroupDependsOn
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:694:133   - Unknown word (exists)        -- TSOutputLogsFromOtherBuilds) exists.
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:6:25      - Unknown word (this)       -- WARNING: DO NOT MODIFY this file unless you are
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:6:50      - Unknown word (knowledgeable) -- file unless you are knowledgeable about MSBuild and have
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:7:35      - Unknown word (Incorrect)     -- created a backup copy.  Incorrect changes to this file
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:84:22     - Unknown word (Guids)         -- <CfgPropertyPagesGuidsAddCSharp>{d4683cae-
packages/tsconfig-reference/scripts/msbuild/Microsoft.TypeScript.targets:90:10     - Unknown word (Indicates)     -- <!-- Indicates to the language service
packages/tsconfig-reference/scripts/msbuild/types.d.ts:115:16    - Unknown word (Fluffy)     -- _attributes: FluffyAttributes;
packages/tsconfig-reference/scripts/msbuild/types.d.ts:79:36     - Unknown word (Purple)     -- ItemGroupElement[] | PurpleItemGroup;
packages/tsconfig-reference/scripts/schema/generateJSON.ts:162:6     - Unknown word (subschema)  -- (subschema): subschema is Extract
packages/tsconfig-reference/scripts/schema/generateJSON.ts:189:45    - Unknown word (anchored)   -- xpressions are not implicitly anchored.
packages/tsconfig-reference/scripts/schema/generateJSON.ts:80:11     - Unknown word (headline)   -- const headline = `Could not find '
packages/tsconfig-reference/scripts/tsconfig/generateMarkdown.ts:100:75    - Unknown word (failable)   -- ionalExampleContent?: string, failable = false) => {
packages/tsconfig-reference/scripts/tsconfig/generateMarkdown.ts:262:44    - Unknown word (Jump)       -- '#${r}' aria-label="Jump to compiler option info
packages/tsconfig-reference/scripts/tsconfig/generateMarkdown.ts:299:33    - Unknown word (Closes)     -- mdChunks.push("</div>"); // Closes div class='indent'
packages/tsconfig-reference/scripts/tsconfig/generateMarkdown.ts:324:35    - Unknown word (popups)     -- used by the tsconfig popups
packages/tsconfig-reference/scripts/tsconfig/generateMarkdown.ts:344:14    - Unknown word (Wrote)      -- console.log(`Wrote TSConfig files for:
packages/tsconfig-reference/scripts/types.ts:30:11     - Unknown word (Compatability) -- elidedInCompatabilityPyramid?: boolean;
packages/tsconfig-reference/scripts/types.ts:30:24     - Unknown word (Pyramid)       -- elidedInCompatabilityPyramid?: boolean;
packages/tsconfig-reference/scripts/types.ts:38:34     - Unknown word (mnemonic)      -- string; // A short mnemonic for convenience - for
packages/typescript-vfs/README.md:142:93    - Unknown word (synced)          -- over time. It was last synced with TypeScript 3.8
packages/typescript-vfs/README.md:164:39    - Unknown word (site's)          -- the lib files in the site's localStorage
packages/typescript-vfs/README.md:179:17    - Unknown word (purges)          -- - Automatically purges items which use a different
packages/typescript-vfs/README.md:180:46    - Unknown word (compressing)     -- lz-string module for compressing/decompressing the lib
packages/typescript-vfs/README.md:32:15     - Unknown word (Opts)       -- const compilerOpts = {}
packages/typescript-vfs/README.md:35:54     - Unknown word (introspect) -- the languageService to introspect the code
packages/typescript-vfs/README.md:36:32     - Unknown word (Highlights) -- languageService.getDocumentHighlights("index.ts", 0, ["index
packages/typescript-vfs/README.md:50:8      - Unknown word (Syntactic)  -- getSyntacticDiagnostics(fileName
packages/typescript-vfs/README.md:54:24     - Unknown word (Classifications) -- getEncodedSyntacticClassifications(fileName: string, span
packages/typescript-vfs/README.md:61:8      - Unknown word (Breakpoint)      -- getBreakpointStatementAtPosition(fileName
packages/typescript-vfs/README.md:64:126    - Unknown word (Suffix)          -- boolean, providePrefixAndSuffixTextForRename?: boolean
packages/typescript-vfs/README.md:67:21     - Unknown word (Bound)           -- getDefinitionAndBoundSpan(fileName: string
packages/typescript-vfs/README.md:76:17     - Unknown word (Spans)           -- getOutliningSpans(fileName: string): OutliningS
packages/typescript-vfs/README.md:76:8      - Unknown word (Outlining)       -- getOutliningSpans(fileName: string
packages/typescript-vfs/README.md:78:8      - Unknown word (Brace)           -- getBraceMatchingAtPosition(fileName
packages/typescript-vfs/README.md:79:8      - Unknown word (Indentation)     -- getIndentationAtPosition(fileName:
packages/typescript-vfs/README.md:82:28     - Unknown word (Keystroke)       -- getFormattingEditsAfterKeystroke(fileName: string, position
packages/typescript-vfs/README.md:85:11     - Unknown word (Closing)         -- getJsxClosingTagAtPosition(fileName
packages/typescript-vfs/README.md:86:14     - Unknown word (Enclosing)       -- getSpanOfEnclosingComment(fileName: string
packages/typescript-vfs/README.md:87:11     - Unknown word (Column)          -- toLineColumnOffset(fileName: string
packages/typescript-vfs/README.md:93:18     - Unknown word (Refactors)       -- getApplicableRefactors(fileName: string, positionOrR
packages/typescript-vfs/README.md:93:8      - Unknown word (Applicable)      -- getApplicableRefactors(fileName: string
packages/typescript-vfs/src/index.ts:192:17    - Unknown word (weakref)    -- "lib.es2021.weakref.d.ts",
packages/typescript-vfs/src/index.ts:247:17    - Unknown word (bump)       -- * semver major bump for no gain to module
packages/typescript-vfs/src/index.ts:324:46    - Unknown word (dictates)   -- compiler target, which dictates the libs to set up
packages/typescript-vfs/src/index.ts:384:51    - Unknown word (concent)    -- call and store the text concent in the cache
packages/typescript-vfs/src/index.ts:515:43    - Unknown word (touching)   -- other tsconfigs end up touching the vfs
packages/typescript-vfs/src/index.ts:640:41    - Unknown word (nightlies)  -- weeks of 4.8 TypeScript nightlies had a bug where the
packages/typescript-vfs/src/index.ts:642:47    - Unknown word (ought)      -- mutations by the host that ought to result in a new Program
packages/typescript-vfs/src/index.ts:646:19    - Unknown word (bisecting)  -- // is used in bisecting for changes, it needs
packages/typescript-vfs/src/index.ts:646:74    - Unknown word (busted)     -- guard against being busted in that
packages/typescript-vfs/src/index.ts:647:34    - Unknown word (defensively) -- couple-week period, so we defensively make a slice here.
packages/typescript-vfs/src/index.ts:90:56     - Unknown word (fencepost)  -- default text span has a fencepost error?
packages/typescript-vfs/test/fsbacked.test.ts:26:53     - Unknown word (Compone)    -- from "react"\nReact.Compone`
packages/typescript-vfs/test/index.test.ts:105:11    - Unknown word (mock)       -- fetcher.mockResolvedValue({ text
packages/typescript-vfs/test/index.test.ts:42:10     - Unknown word (unverified) -- "unverified": false,
packages/typescriptlang-org/gatsby-browser.js:13:56     - Unknown word (kyel)       -- clarity", "script", "3w5kyel345");
packages/typescriptlang-org/gatsby-browser.js:18:7      - Unknown word (instrumentation) -- instrumentationKey: "78a8fb52-a225-
packages/typescriptlang-org/gatsby-browser.js:30:1285   - Unknown word (Instrumented)    -- c }, e.autoExceptionInstrumented = !0 } return t }(config
packages/typescriptlang-org/gatsby-browser.js:30:41     - Unknown word (aisdk)           -- window[sdkInstance], aisdk = window[aiName] ||
packages/typescriptlang-org/gatsby-browser.js:53:11     - Unknown word (visited)         -- visitedPlayground:
packages/typescriptlang-org/gatsby-config.js:11:3      - Unknown word (Bootstrapped)  -- Bootstrapped. You can now run the
packages/typescriptlang-org/gatsby-config.js:164:26    - Unknown word (smartypants)   -- "gatsby-remark-smartypants",
packages/typescriptlang-org/gatsby-config.js:1:17      - Unknown word (BOOTSTRAPPING) -- if (process.env.BOOTSTRAPPING) {
packages/typescriptlang-org/gatsby-ssr.js:13:47     - Unknown word (fonts)      -- modes and custom code fonts
packages/typescriptlang-org/gatsby-ssr.js:14:18     - Unknown word (Switcher)   -- const CustomColorSwitcherCode = () => {
packages/typescriptlang-org/gatsby-ssr.js:33:88     - Unknown word (cascadia)   -- getItem("force-font") || "cascadia"
packages/typescriptlang-org/gatsby-ssr.js:37:18     - Unknown word (dangerously) -- return <script dangerouslySetInnerHTML={{ __html
packages/typescriptlang-org/lib/bootup/createPages.ts:2:45      - Unknown word (ingestion)  -- eDocumentationPages } from "./ingestion/createPagesForDocumentation
packages/typescriptlang-org/lib/bootup/createPages.ts:6:16      - Unknown word (Playgrounds) -- import { createPlaygrounds } from "./ingestion
packages/typescriptlang-org/lib/bootup/createPages.ts:9:16      - Unknown word (Glossary)    -- import { createGlossaryPages } from "./ingestion
packages/typescriptlang-org/lib/bootup/ingestion/createGlossaryPages.ts:7:17      - Unknown word (Lingual)    -- import { isMultiLingual } from "./languageFilter
packages/typescriptlang-org/lib/bootup/ingestion/createPagesForDocumentation.ts:82:15     - Unknown word (misc)       -- title: "misc",
packages/typescriptlang-org/lib/bootup/ingestion/createPlaygroundExamplePages.ts:41:50     - Unknown word (Essentials) -- JavaScript/JavaScript Essentials/Code Flow.ts"
packages/typescriptlang-org/lib/bootup/ingestion/createPlaygroundExamplePages.ts:72:8      - Unknown word (Intentionally) -- // Intentionally not adding addPathToSite
packages/typescriptlang-org/lib/bootup/ingestion/createPlaygrounds.ts:17:27     - Unknown word (Localizations) -- query GetAllPlaygroundLocalizations {
packages/typescriptlang-org/lib/bootup/ingestion/createRootPagesLocalized.ts:20:45     - Unknown word (Internationalized) -- success")} Creating Internationalized Pages`)
packages/typescriptlang-org/lib/bootup/ingestion/languageFilter.ts:1:47      - Unknown word (TRANSLATIONS) -- ultiLingual = !process.env.NO_TRANSLATIONS
packages/typescriptlang-org/lib/bootup/pathsOnSiteTracker.ts:17:21     - Unknown word (bootstapping) -- // Generated during bootstapping via pathsOnSiteTracker
packages/typescriptlang-org/lib/themes/themeGen.js:16:7      - Unknown word (Bright)     -- veryBrightBlue: "#0000FF",
packages/typescriptlang-org/lib/themes/themeGen.js:22:8      - Unknown word (Burgendy)   -- lightBurgendyAAA: "#A31515",
packages/typescriptlang-org/lib/themes/themeGen.js:23:3      - Unknown word (burgendy)   -- burgendyAAA: "#811f3f",
packages/typescriptlang-org/lib/themes/themeGen.js:384:14    - Unknown word (coloring)   -- name: "coloring of the Java import and
packages/typescriptlang-org/scripts/backstop/makeDarkMode.js:2:16      - Unknown word (SWITCHING)  -- console.log("SWITCHING TO DARK for " + scenario
packages/typescriptlang-org/scripts/backstop/makeDarkMode.js:2:29      - Unknown word (DARK)       -- console.log("SWITCHING TO DARK for " + scenario.label
packages/typescriptlang-org/scripts/cacheBustPlayground.mjs:15:69     - Unknown word (busting)    -- Could not run cache busting")
packages/typescriptlang-org/scripts/cacheBustPlayground.mjs:2:64      - Unknown word (bust)       -- setup-playground-cache-bust
packages/typescriptlang-org/scripts/createLighthouseJSON.js:19:11     - Unknown word (grabbed)    -- const grabbedURLs = sitemapJSON.urlset
packages/typescriptlang-org/scripts/createLighthouseJSON.js:39:20     - Unknown word (handbooks)  -- // Shuffle the handbooks to cycle through
packages/typescriptlang-org/scripts/createLighthouseJSON.js:40:17     - Unknown word (Handbooks)  -- const randomHandbooks = urls => {
packages/typescriptlang-org/scripts/downloadSearchAssets.js:20:22     - Unknown word (Dropping)   -- const fixAriaByDroppingCustomText = js.replace
packages/typescriptlang-org/scripts/downloadSearchAssets.js:25:16     - Unknown word (Tabbing)    -- const fixTabbing = fixAriaByDroppingCustomText
packages/typescriptlang-org/scripts/downloadSearchAssets.js:30:32     - Unknown word (Readers)    -- const echoResultsToScreenReaders = fixTabbing.replace
packages/typescriptlang-org/scripts/downloadSearchAssets.js:31:30     - Unknown word (Moved)      -- this.trigger("cursorMoved",updateInput)',
packages/typescriptlang-org/scripts/getTypeScriptNPMVersions.js:121:6     - Unknown word (Incase)     -- // Incase the MD hasn't been ported
packages/typescriptlang-org/scripts/getTypeScriptNPMVersions.js:30:90     - Unknown word (Gecko)      -- 5.1.15 (KHTML, like Gecko) Version/12.1.1 Safari
packages/typescriptlang-org/scripts/getTypeScriptNPMVersions.js:38:108    - Unknown word (Branding)   -- VisualStudio.Services.Icons.Branding","Microsoft.VisualStudio
packages/typescriptlang-org/scripts/getTypeScriptNPMVersions.js:38:383    - Unknown word (paging)     -- sortBy":0,"sortOrder":0,"pagingToken":null}],"flags
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:114:29    - Unknown word (Helpful)    -- mds.push(`###### Most Helpful`)
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:118:24    - Unknown word (Least)      -- mds.push(`###### Least Helpful`)
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:57:25     - Unknown word (Weekly)     -- const makeMarkdownOfWeeklyAppInsightsInfo = async
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:64:13     - Unknown word (liked)      -- const likedPages = await makeQuery
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:65:106    - Unknown word (Liked)      -- where iif('*' in ("Liked Page"), 1==1, name in
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:65:379    - Unknown word (Cohort)     -- dimension)}; let byCohortTable = queryTable
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:68:13     - Unknown word (disliked)   -- const dislikedPagesTable = await makeQuery
packages/typescriptlang-org/scripts/makeMarkdownForAppInsights.js:69:106    - Unknown word (Disliked)   -- where iif('*' in ("Disliked Page"), 1==1, name in
packages/typescriptlang-org/scripts/updateAppInsightsGitHubIssue.js:21:40     - Unknown word (Updater)    -- TS AppInsights Issue Updater",
packages/typescriptlang-org/scripts/updateIndexTwoslashExamples.js:9:26      - Unknown word (sames)      -- Loop through all code sames in src/components/index
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:1042:12   - Unknown word (paragraphs) -- readonly paragraphs: Maybe<Scalars['Int
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:1043:12   - Unknown word (sentences)  -- readonly sentences: Maybe<Scalars['Int
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:11:29     - Unknown word (scalars)    -- built-in and custom scalars, mapped to their actual
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:12:6      - Unknown word (Scalars)    -- type Scalars = {
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:1345:9    - Unknown word (Creator)    -- pluginCreator: InputMaybe<SitePluginFilterI
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:15:88     - Unknown word (sequences)  -- epresented as UTF-8 character sequences. The String type is
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:23:127    - Unknown word (Gregorian)  -- and times using the Gregorian calendar. */
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:744:14    - Unknown word (Excerpt)    -- type MarkdownExcerptFormats =
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:747:6     - Unknown word (PLAIN)      -- | 'PLAIN';
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:791:12    - Unknown word (headings)   -- readonly headings: Maybe<ReadonlyArray
packages/typescriptlang-org/src/__generated__/gatsby-types.ts:806:3     - Unknown word (prune)      -- pruneLength?: InputMaybe<Scalars
packages/typescriptlang-org/src/components/QuickJump.tsx:27:12     - Unknown word (Internationalize) -- // TODO: Internationalize these strings
packages/typescriptlang-org/src/components/ShowExamples.scss:33:23     - Unknown word (selected)   -- button.section-name.selected {
packages/typescriptlang-org/src/components/ShowExamples.tsx:50:19     - Unknown word (Titles)     -- const allSectionTitles = examplesParent.querySelecto
packages/typescriptlang-org/src/components/SuppressWhenTouch.tsx:14:13     - Unknown word (suppressible) -- const suppressible = document.getElementById
packages/typescriptlang-org/src/components/display/GreyButton.tsx:20:21     - Unknown word (clicky)     -- const classes = ["clicky-grey-button"]
packages/typescriptlang-org/src/components/handbook/Contributors.tsx:4:11      - Unknown word (Contributors) -- interface ContributorsProps {
packages/typescriptlang-org/src/components/handbook/Contributors.tsx:75:12     - Unknown word (Avatars)      -- <Avatars data={page} />
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:19:7      - Unknown word (Fluid)      -- const FluidButton = (props: { href
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:20:18     - Unknown word (fluid)      -- <a className={"fluid-button " + props.className
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:31:22     - Unknown word (Fold)       -- export const AboveTheFold = () => {
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:35:9      - Unknown word (Headline)   -- const Headline = () => {
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:69:12     - Unknown word (Headlines)  -- const CTAHeadlines = () => (
packages/typescriptlang-org/src/components/index/AboveTheFold.tsx:79:49     - Unknown word (Exited)     -- event("Home Page CTA Exited", { link: "playground
packages/typescriptlang-org/src/components/index/AdoptSteps.tsx:11:7      - Unknown word (Stepper)    -- const Stepper = (props: { index: number
packages/typescriptlang-org/src/components/index/AdoptSteps.tsx:12:39     - Unknown word (stepper)    -- className="adopt-step-stepper">
packages/typescriptlang-org/src/components/index/EditorExamples.tsx:18:62     - Unknown word (fold)       -- getElementById("above-the-fold-headline-code")!
packages/typescriptlang-org/src/components/index/EditorExamples.tsx:41:23     - Unknown word (slides)     -- <div className="slides">
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:110:53    - Unknown word (pleasant)       -- is <strong>simple and pleasant</strong> for all Google
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:111:21    - Unknown word (eight)          -- <p>Around eight or nine languages are
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:12:23     - Unknown word (illustration) -- <div className='illustration'>
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:136:12    - Unknown word (Rodoslav)       -- <p>Rodoslav Kirov and Bowen Ni covered
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:136:21    - Unknown word (Kirov)          -- <p>Rodoslav Kirov and Bowen Ni covered
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:136:31    - Unknown word (Bowen)          -- p>Rodoslav Kirov and Bowen Ni covered how TypeScript
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:15:42     - Unknown word (underestimated) -- Second</strong>, we underestimated how powerful the editor
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:16:36     - Unknown word (boon)           -- TypeScript was such a boon to our stability and
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:16:48     - Unknown word (stability)      -- was such a boon to our stability and sanity that we started
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:19:34     - Unknown word (testimonial)    -- svg aria-label="slack testimonial" name="slack testimonial
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:286:23    - Unknown word (Stories)        -- export const MigrationStories = () => {
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:346:16    - Unknown word (stories)        -- <div id="m-stories">
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:49:12     - Unknown word (Felix)          -- <p>Felix Rieseberg at Slack covered
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:62:37     - Unknown word (preventable)    -- strong>38% [...] bugs preventable with TypeScript</strong
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:62:87     - Unknown word (postmortem)     -- strong> according to postmortem analysis</p>
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:95:12     - Unknown word (Brie)           -- <p>Brie Bunge at Airbnb gave
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:95:50     - Unknown word (Conf)           -- Airbnb gave a talk at JSConf Hawaiʻi on how Airbnb
packages/typescriptlang-org/src/components/index/MigrationStories.tsx:95:55     - Unknown word (Hawaiʻi)        -- gave a talk at JSConf Hawaiʻi on how Airbnb adopted
packages/typescriptlang-org/src/components/index/twoslash/IndexGetStarted1.js:1:57      - Unknown word (Degree)     -- deg 5px -2px", "textDegree": "3deg", "top": "0
packages/typescriptlang-org/src/components/index/twoslash/generated/react.tsx:5:796     - Unknown word (Thumbnail)  -- lsp lsp='interface UserThumbnailProps' >UserThumbnailProps
packages/typescriptlang-org/src/components/index/twoslash/generated/showErrors.tsx:5:1315    - Unknown word (Professor)  -- style="color: #FFAB70">"Professor"</span><span style=
packages/typescriptlang-org/src/components/index/twoslash/generated/showErrors.tsx:5:762     - Unknown word (Angela)     -- style="color: #FFAB70">"Angela"</span><span style=
packages/typescriptlang-org/src/components/layout.tsx:24:40     - Unknown word (Csvg)       -- data:image/svg+xml,%3Csvg%20xmlns%3D'http%3A%
packages/typescriptlang-org/src/components/layout.tsx:29:26     - Unknown word (Fabric)     -- <div className="ms-Fabric">
packages/typescriptlang-org/src/components/layout/CookieBanner.tsx:51:42     - Unknown word (openx)      -- cookie-banner" className="openx"></div>
packages/typescriptlang-org/src/components/layout/CookieBanner.tsx:8:18      - Unknown word (Consent)    -- declare const WcpConsent: any
packages/typescriptlang-org/src/components/layout/LanguageRecommendation.tsx:47:65     - Unknown word (dont)       -- localStorage.getItem("dont-recommend-translate
packages/typescriptlang-org/src/components/layout/Sidebar-keyboard.tsx:51:41     - Unknown word (belows)     -- into section header belows
packages/typescriptlang-org/src/components/layout/Sidebar.scss:12:30     - Unknown word (documentation) -- Basically a section of documentation */
packages/typescriptlang-org/src/components/layout/Sidebar.scss:155:79    - Unknown word (scrolling)     -- children to prevent scrolling in subnav uls
packages/typescriptlang-org/src/components/layout/Sidebar.scss:200:6     - Unknown word (Pulls)         -- // Pulls it out of the layout
packages/typescriptlang-org/src/components/layout/Sidebar.scss:20:10     - Unknown word (Mostly)        -- // Mostly stuff for all of the
packages/typescriptlang-org/src/components/layout/Sidebar.scss:29:24     - Unknown word (navigation)    -- // The top level navigation items
packages/typescriptlang-org/src/components/layout/Sidebar.scss:81:10     - Unknown word (Hide)          -- // Hide the sideways SVG
packages/typescriptlang-org/src/components/layout/Sidebar.tsx:11:18     - Unknown word (Except)     -- openAllSectionsExceptWhatsNew?: true
packages/typescriptlang-org/src/components/layout/SiteFooter-Customize.tsx:73:30     - Unknown word (colours)    -- <p>{i("footer_site_colours")}:</p>
packages/typescriptlang-org/src/components/layout/SiteFooter.scss:112:41    - Unknown word (darkest)    -- color: $ts-main-blue-darkest-color;
packages/typescriptlang-org/src/components/layout/SiteFooter.scss:126:15    - Unknown word (logos)      -- article#logos {
packages/typescriptlang-org/src/components/layout/SiteFooter.scss:165:26    - Unknown word (positioning) -- // Fine tuning the positioning of the long-form TS
packages/typescriptlang-org/src/components/layout/SiteFooter.scss:190:15    - Unknown word (sneakily)    -- // This was sneakily making site wider than
packages/typescriptlang-org/src/components/layout/SiteFooter.scss:206:4     - Unknown word (examples)    -- .examples {
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:120:13    - Unknown word (Mastodon)   -- title: "Mastodon",
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:235:15    - Unknown word (Popular)    -- <h3>Popular Documentation Pages
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:278:14    - Unknown word (Made)       -- <p>Made with &#9829; in Redmond
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:278:35    - Unknown word (Redmond)    -- Made with &#9829; in Redmond, Boston, SF &amp; Dublin
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:286:30    - Unknown word (Logo)       -- alt="Microsoft Logo"
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:306:17    - Unknown word (Accessibilité) -- Accessibilité
packages/typescriptlang-org/src/components/layout/SiteFooter.tsx:94:12     - Unknown word (branding)   -- url: "/branding",
packages/typescriptlang-org/src/components/layout/TopNav.scss:107:9     - Unknown word (juts)       -- /* This juts out of the left a bit
packages/typescriptlang-org/src/components/layout/TopNav.scss:165:7     - Unknown word (dislike)    -- #like-dislike-subnav,
packages/typescriptlang-org/src/components/layout/TopNav.scss:214:66    - Unknown word (german)     -- calization for something like german in the future though
packages/typescriptlang-org/src/components/layout/TopNav.scss:278:21    - Unknown word (elements)   -- /* Support hiding elements from small */
packages/typescriptlang-org/src/components/layout/TopNav.scss:326:8     - Unknown word (Simplify)   -- /* Simplify the nav to a few buttons
packages/typescriptlang-org/src/components/layout/TopNav.scss:407:15    - Unknown word (dashed)     -- border: 1px dashed black;
packages/typescriptlang-org/src/components/layout/TopNav.scss:94:2      - Unknown word (beta)       -- #beta-notification-menu,
packages/typescriptlang-org/src/components/layout/TopNav.tsx:119:90    - Unknown word (assertive)  -- "search" aria-live="assertive">
packages/typescriptlang-org/src/components/layout/TopNav.tsx:32:15     - Unknown word (BGCDYOIYZ)  -- appId: "BGCDYOIYZ5",
packages/typescriptlang-org/src/components/layout/fonts.scss:183:31    - Unknown word (Cyrillic)   -- family: "Segoe UI Web (Cyrillic)";
packages/typescriptlang-org/src/components/layout/fonts.scss:238:36    - Unknown word (European)   -- "Segoe UI Web (East European)";
packages/typescriptlang-org/src/components/layout/fonts.scss:39:17     - Unknown word (Dank)       -- font-family: "Dank Mono Regular";
packages/typescriptlang-org/src/components/layout/fonts.scss:403:31    - Unknown word (Vietnamese) -- family: "Segoe UI Web (Vietnamese)";
packages/typescriptlang-org/src/components/layout/fonts.scss:513:17    - Unknown word (smoothing)  -- -moz-osx-font-smoothing: grayscale;
packages/typescriptlang-org/src/components/layout/fonts.scss:516:6     - Unknown word (Blink)      -- // BlinkMacSystemFont, Roboto
packages/typescriptlang-org/src/components/layout/fonts.scss:662:38    - Unknown word (Kmer)       -- Leelawadee UI Web", "Kmer UI", "Segoe UI", -apple
packages/typescriptlang-org/src/components/layout/fonts.scss:687:17    - Unknown word (hans)       -- body [lang^="zh-hans"],
packages/typescriptlang-org/src/components/layout/fonts.scss:697:41    - Unknown word (Pmingliu)   -- Microsoft Jhenghei UI", Pmingliu, "Segoe UI", -apple
packages/typescriptlang-org/src/components/layout/main.scss:106:11    - Unknown word (dank)       -- html.font-dank-mono {
packages/typescriptlang-org/src/components/layout/main.scss:10:33     - Unknown word (lightest)   -- color: #{$ts-main-blue-lightest-color};
packages/typescriptlang-org/src/components/layout/main.scss:16:45     - Unknown word (secondary)  -- color: #{$ts-dark-bg-secondary};
packages/typescriptlang-org/src/components/layout/main.scss:17:54     - Unknown word (barely)     -- background-color: #{$ts-dark-barely-blue-highlight};
packages/typescriptlang-org/src/components/layout/main.scss:22:16     - Unknown word (divider)    -- --playground-divider: #{$ts-light-bg-grey
packages/typescriptlang-org/src/components/layout/main.scss:32:10     - Unknown word (tinged)     -- --blue-tinged-bg: #2c3841;
packages/typescriptlang-org/src/components/layout/main.scss:35:10     - Unknown word (gradient)   -- --fade-gradient: linear-gradient(
packages/typescriptlang-org/src/components/layout/main.scss:35:20     - Unknown word (linear)     -- --fade-gradient: linear-gradient(
packages/typescriptlang-org/src/components/layout/main.scss:45:38     - Unknown word (sandy)      -- color: #{$ts-light-bg-sandy-color};
packages/typescriptlang-org/src/components/layout/main.scss:8:22      - Unknown word (highlight)  -- --background-minor-highlight-color: #343434;
packages/typescriptlang-org/src/components/layout/main.scss:96:54     - Unknown word (Customize)  -- select in SiteFooter-Customize.tsx
packages/typescriptlang-org/src/components/layout/stickyNavigation.ts:9:12      - Unknown word (scrolls)    -- // iOS scrolls to make sure the viewport
packages/typescriptlang-org/src/components/svgs/documentation.tsx:12:18     - Unknown word (Unfilled)   -- export const LikeUnfilledSVG = () => <svg width
packages/typescriptlang-org/src/components/svgs/documentation.tsx:16:14     - Unknown word (Dislike)    -- export const DislikeFilledSVG = () => <svg
packages/typescriptlang-org/src/components/workbench/plugins/about.ts:16:3      - Unknown word (repro)      -- A repro can highlight an issue
packages/typescriptlang-org/src/components/workbench/plugins/assertions.ts:18:27     - Unknown word (Raised)     -- ds.title("Exception Raised")
packages/typescriptlang-org/src/components/workbench/plugins/assertions.ts:63:20     - Unknown word (Filtered)   -- ? `Filtered Completions: ${prefixed
packages/typescriptlang-org/src/components/workbench/plugins/debug.ts:28:166    - Unknown word (struggling) -- That said, if you're struggling with a repro - ask in
packages/typescriptlang-org/src/components/workbench/plugins/docs.ts:110:18    - Unknown word (disply)     -- { id: "lunch", disply: "Lunch" },
packages/typescriptlang-org/src/components/workbench/plugins/docs.ts:110:27    - Unknown word (Lunch)      -- id: "lunch", disply: "Lunch" },
packages/typescriptlang-org/src/components/workbench/plugins/docs.ts:224:26    - Unknown word (undo)       -- "You may need to undo <code>strict</code>
packages/typescriptlang-org/src/components/workbench/plugins/docs.ts:232:123   - Unknown word (theses)     -- were created. Consider theses as ideas in how to make
packages/typescriptlang-org/src/components/workbench/plugins/docs.ts:78:96     - Unknown word (chopping)   -- scenes. This is done by chopping the code sample whenever
packages/typescriptlang-org/src/components/workbench/plugins/markdown.ts:25:12     - Unknown word (Repro)      -- [Workbench Repro](${url})
packages/typescriptlang-org/src/components/workbench/plugins/markdown.ts:30:193    - Unknown word (hooked)     -- repo to have it get hooked up."
packages/typescriptlang-org/src/copy/en/community.ts:10:23     - Unknown word (peers)      -- "Engage with your peers and ask questions about
packages/typescriptlang-org/src/copy/en/community.ts:10:6      - Unknown word (Engage)     -- "Engage with your peers and
packages/typescriptlang-org/src/copy/en/community.ts:16:38     - Unknown word (constructive) -- or want to give us constructive feedback?",
packages/typescriptlang-org/src/copy/en/community.ts:18:29     - Unknown word (Stay)         -- online_twitter_desc: "Stay up to date. Follow us
packages/typescriptlang-org/src/copy/en/community.ts:26:21     - Unknown word (Conferences)  -- com_conferences: "Conferences",
packages/typescriptlang-org/src/copy/en/community.ts:26:7      - Unknown word (conferences)  -- com_conferences: "Conferences",
packages/typescriptlang-org/src/copy/en/documentation.ts:18:33     - Unknown word (Comprehensive) -- headline_examples_blurb: "Comprehensive hands-on playground
packages/typescriptlang-org/src/copy/en/documentation.ts:25:8      - Unknown word (delightful)    -- "A delightful toolkit for building
packages/typescriptlang-org/src/copy/en/documentation.ts:30:18     - Unknown word (ember)         -- doc_frameworks_ember_blurb: "A framework
packages/typescriptlang-org/src/copy/en/documentation.ts:34:30     - Unknown word (Convention)    -- frameworks_ror_blurb: "Convention over configuration web
packages/typescriptlang-org/src/copy/en/documentation.ts:38:12     - Unknown word (azure)         -- doc_apis_azure_blurb: "Build and deploy
packages/typescriptlang-org/src/copy/en/documentation.ts:39:12     - Unknown word (feather)       -- doc_apis_feather_blurb:
packages/typescriptlang-org/src/copy/en/documentation.ts:49:12     - Unknown word (foal)          -- doc_apis_foal_blurb:
packages/typescriptlang-org/src/copy/en/documentation.ts:4:22      - Unknown word (starter)    -- "Find TypeScript starter projects: from Angular
packages/typescriptlang-org/src/copy/en/documentation.ts:50:6      - Unknown word (Elegant)       -- "Elegant and complete Node.js
packages/typescriptlang-org/src/copy/en/documentation.ts:54:6      - Unknown word (Helps)         -- "Helps developers build blazing
packages/typescriptlang-org/src/copy/en/documentation.ts:55:50     - Unknown word (Production)    -- React Framework for Production",
packages/typescriptlang-org/src/copy/en/documentation.ts:56:13     - Unknown word (redwood)       -- doc_react_redwood_blurb: "The JS App Framework
packages/typescriptlang-org/src/copy/en/documentation.ts:56:54     - Unknown word (Startups)      -- JS App Framework for Startups",
packages/typescriptlang-org/src/copy/en/documentation.ts:5:25      - Unknown word (Bootstrapping) -- doc_bootstrap_title: "Bootstrapping tools for TypeScript
packages/typescriptlang-org/src/copy/en/documentation.ts:64:12     - Unknown word (expo)          -- doc_apps_expo_blurb: "The fastest
packages/typescriptlang-org/src/copy/en/documentation.ts:69:6      - Unknown word (Brings)        -- "Brings computer science to
packages/typescriptlang-org/src/copy/en/documentation.ts:73:6      - Unknown word (Blazing)       -- "Blazing fast, zero configuration
packages/typescriptlang-org/src/copy/en/documentation.ts:76:15     - Unknown word (Familiar)      -- doc_learn: "Familiar With TypeScript already
packages/typescriptlang-org/src/copy/en/dt.ts:5:31      - Unknown word (registries) -- npm and Yarn package registries now include type information
packages/typescriptlang-org/src/copy/en/footer.ts:3:30      - Unknown word (Colours)    -- site_colours: "Site Colours",
packages/typescriptlang-org/src/copy/en/index.ts:3:20      - Unknown word (Quarterly)  -- index_releases: "Quarterly Releases",
packages/typescriptlang-org/src/copy/en/index.ts:5:35      - Unknown word (planned)    -- releases_pt2: ", which is planned for ",
packages/typescriptlang-org/src/copy/en/index2.ts:32:19     - Unknown word (Safety)     -- index_2_scale: "Safety at Scale",
packages/typescriptlang-org/src/copy/en/index2.ts:48:40     - Unknown word (Testimonials) -- migration_title: "TypeScript Testimonials",
packages/typescriptlang-org/src/copy/en/index2.ts:4:11      - Unknown word (byline)     -- index_2_byline: "TypeScript extends
packages/typescriptlang-org/src/copy/en/index2.ts:52:11     - Unknown word (loved)        -- index_2_loved_by: "Loved by Developers
packages/typescriptlang-org/src/copy/en/index2.ts:52:22     - Unknown word (Loved)        -- index_2_loved_by: "Loved by Developers",
packages/typescriptlang-org/src/copy/en/index2.ts:53:25     - Unknown word (Voted)        -- index_2_loved_stack: `Voted <strong>2nd most loved
packages/typescriptlang-org/src/copy/en/index2.ts:54:105    - Unknown word (respondents)  -- 20 State of JS</js> respondents, with <strong>93% saying
packages/typescriptlang-org/src/copy/en/index2.ts:55:54     - Unknown word (award)        -- TypeScript was given the award for <strong>“Most Adopted
packages/typescriptlang-org/src/copy/en/index2.ts:55:78     - Unknown word (Adopted)      -- award for <strong>“Most Adopted Technology”</strong
packages/typescriptlang-org/src/copy/en/index2.ts:71:36     - Unknown word (Gradually)    -- adopt: "Adopt TypeScript Gradually",
packages/typescriptlang-org/src/copy/en/playground.ts:30:35     - Unknown word (Featured)   -- sidebar_featured_plugins: "Featured Plugins",
packages/typescriptlang-org/src/copy/en/playground.ts:34:50     - Unknown word (parties)    -- plugins comes from third-parties.",
packages/typescriptlang-org/src/copy/en/playground.ts:43:15     - Unknown word (tweet)      -- play_export_tweet_md: "Tweet link to Playground
packages/typescriptlang-org/src/copy/en/playground.ts:48:15     - Unknown word (bugworkbench) -- play_export_bugworkbench: "Open in Bug Workbench
packages/typescriptlang-org/src/copy/en/playground.ts:54:26     - Unknown word (cleared)      -- play_clear_logs: "Logs cleared",
packages/typescriptlang-org/src/copy/en/playground.ts:55:17     - Unknown word (Executed)     -- play_run_js: "Executed JavaScript",
packages/typescriptlang-org/src/dom.d.ts:10000:18  - Unknown word (Messaging)               -- /** This Channel Messaging API interface allows
packages/typescriptlang-org/src/dom.d.ts:10053:165  - Unknown word (arriving)                -- listening out for them arriving at the other. */
packages/typescriptlang-org/src/dom.d.ts:10058:8   - Unknown word (Disconnects)             -- * Disconnects the port, so that it
packages/typescriptlang-org/src/dom.d.ts:10062:76  - Unknown word (transferred)             -- listed in transfer are transferred, not just cloned, meaning
packages/typescriptlang-org/src/dom.d.ts:10062:8   - Unknown word (Posts)                   -- * Posts a message through the
packages/typescriptlang-org/src/dom.d.ts:10062:98  - Unknown word (cloned)                  -- transferred, not just cloned, meaning that they are
packages/typescriptlang-org/src/dom.d.ts:10069:15  - Unknown word (dispatching)             -- * Begins dispatching messages received on
packages/typescriptlang-org/src/dom.d.ts:10164:247  - Unknown word (completeness)            -- events for reference and completeness of legacy behavior,
packages/typescriptlang-org/src/dom.d.ts:10164:284  - Unknown word (deprecates)              -- legacy behavior, but deprecates the use of the MutationEvent
packages/typescriptlang-org/src/dom.d.ts:10192:8   - Unknown word (Instructs)               -- * Instructs the user agent to observe
packages/typescriptlang-org/src/dom.d.ts:10198:8   - Unknown word (Empties)                 -- * Empties the record queue and
packages/typescriptlang-org/src/dom.d.ts:10450:82  - Unknown word (contiguous)              -- the data of remaining contiguous exclusive Text nodes
packages/typescriptlang-org/src/dom.d.ts:10605:8   - Unknown word (Performs)                -- * Performs the specified action
packages/typescriptlang-org/src/dom.d.ts:1066:5    - Unknown word (coalesced)  -- coalescedEvents?: PointerEvent
packages/typescriptlang-org/src/dom.d.ts:10688:82  - Unknown word (GLSL)                    -- WebGL API and adds the GLSL derivative functions
packages/typescriptlang-org/src/dom.d.ts:10693:105  - Unknown word (textures)                -- point pixel types for textures. */
packages/typescriptlang-org/src/dom.d.ts:10718:15  - Unknown word (multiview)               -- interface OVR_multiview2 {
packages/typescriptlang-org/src/dom.d.ts:10719:23  - Unknown word (Multiview)               -- framebufferTextureMultiviewOVR(target: GLenum, attachment
packages/typescriptlang-org/src/dom.d.ts:10726:139  - Unknown word (terminated)              -- OfflineAudioContext is terminated. The complete event
packages/typescriptlang-org/src/dom.d.ts:10759:56  - Unknown word (waveform)                -- represents a periodic waveform, such as a sine wave
packages/typescriptlang-org/src/dom.d.ts:10790:141  - Unknown word (conspires)               -- meaning that (if nothing conspires to make the page unsalvageabl
packages/typescriptlang-org/src/dom.d.ts:10790:168  - Unknown word (unsalvageable)           -- conspires to make the page unsalvageable) the page might be reused
packages/typescriptlang-org/src/dom.d.ts:10795:36  - Unknown word (salvageable)             -- iframes that are not salvageable
packages/typescriptlang-org/src/dom.d.ts:10797:8   - Unknown word (Aborting)               -- * Aborting a Document
packages/typescriptlang-org/src/dom.d.ts:10880:275  - Unknown word (replay)                 -- being able to retain and replay your path whenever desired
packages/typescriptlang-org/src/dom.d.ts:10937:6   - Unknown word (paymentmethodchange)    -- "paymentmethodchange": Event;
packages/typescriptlang-org/src/dom.d.ts:10943:5   - Unknown word (onpaymentmethodchange)  -- onpaymentmethodchange: ((this: PaymentRequest
packages/typescriptlang-org/src/dom.d.ts:10968:94  - Unknown word (approves)               -- a payment method and approves a payment request.
packages/typescriptlang-org/src/dom.d.ts:11017:5   - Unknown word (Encapsulates)           -- /** Encapsulates a single performance
packages/typescriptlang-org/src/dom.d.ts:11234:72  - Unknown word (oscillators)            -- used to define custom oscillators when calling OscillatorNode
packages/typescriptlang-org/src/dom.d.ts:11360:8   - Unknown word (Coalesced)              -- getCoalescedEvents(): PointerEvent
packages/typescriptlang-org/src/dom.d.ts:11392:12  - Unknown word (measuring)              -- /** Events measuring progress of an underlying
packages/typescriptlang-org/src/dom.d.ts:11440:40  - Unknown word (subcription's)          -- interface provides a subcription's URL endpoint and allows
packages/typescriptlang-org/src/dom.d.ts:11440:78  - Unknown word (unsubscription)         -- endpoint and allows unsubscription from a push service
packages/typescriptlang-org/src/dom.d.ts:11571:103  - Unknown word (Establishment)          -- Internet Connectivity Establishment (ICE) configuration
packages/typescriptlang-org/src/dom.d.ts:11571:158  - Unknown word (establish)              -- which may be used to establish an RTCPeerConnection
packages/typescriptlang-org/src/dom.d.ts:11698:43  - Unknown word (reception)              -- interface manages the reception and decoding of data
packages/typescriptlang-org/src/dom.d.ts:11746:178  - Unknown word (negotiation)            -- of the offer/answer negotiation process it describes
packages/typescriptlang-org/src/dom.d.ts:11791:26  - Unknown word (furthest)               -- * Returns the node, furthest away from the document
packages/typescriptlang-org/src/dom.d.ts:11891:5   - Unknown word (onconnecting)           -- onconnecting: ((this: RemotePlayback
packages/typescriptlang-org/src/dom.d.ts:11892:5   - Unknown word (ondisconnect)           -- ondisconnect: ((this: RemotePlayback
packages/typescriptlang-org/src/dom.d.ts:11927:26  - Unknown word (subresource)            -- * Returns request's subresource integrity metadata,
packages/typescriptlang-org/src/dom.d.ts:12333:5   - Unknown word (Corresponds)            -- /** Corresponds to the <defs> element
packages/typescriptlang-org/src/dom.d.ts:1299:12   - Unknown word (Discarded)  -- packetsDiscarded?: number;
packages/typescriptlang-org/src/dom.d.ts:13033:5   - Unknown word (Correspond)             -- /** Correspond to the <length> basic
packages/typescriptlang-org/src/dom.d.ts:13123:11  - Unknown word (SVGM)                   -- interface SVGMPathElement extends SVGElement
packages/typescriptlang-org/src/dom.d.ts:13386:134  - Unknown word (miscellaneous)          -- contains also various miscellaneous commonly-used utility
packages/typescriptlang-org/src/dom.d.ts:13624:83  - Unknown word (glyphs)                 -- position individual text glyphs. It is inherited by
packages/typescriptlang-org/src/dom.d.ts:13798:43  - Unknown word (analyzing)              -- generation, processing, or analyzing of audio using JavaScript
packages/typescriptlang-org/src/dom.d.ts:13838:145  - Unknown word (examination)            -- Selection object for examination or modification, call
packages/typescriptlang-org/src/dom.d.ts:14189:30  - Unknown word (unitless)               -- pan property takes a unitless value between -1 (full
packages/typescriptlang-org/src/dom.d.ts:14312:83  - Unknown word (submission)             -- that triggered the form submission, or null if the submission
packages/typescriptlang-org/src/dom.d.ts:14355:8   - Unknown word (Splits)                 -- * Splits data at the given offset
packages/typescriptlang-org/src/dom.d.ts:14368:209  - Unknown word (fragmented)             -- false), to process a fragmented input. If the invocation
packages/typescriptlang-org/src/dom.d.ts:14368:307  - Unknown word (clearest)               -- has no input, it's clearest to omit both arguments
packages/typescriptlang-org/src/dom.d.ts:1437:204  - Unknown word (supplied)   -- writable side of the supplied pair, and returns the
packages/typescriptlang-org/src/dom.d.ts:1437:48   - Unknown word (piping)     -- convenient, chainable way of piping this readable stream
packages/typescriptlang-org/src/dom.d.ts:1439:102  - Unknown word (acquiring)  -- other consumer from acquiring a reader.
packages/typescriptlang-org/src/dom.d.ts:1439:8    - Unknown word (Piping)     -- * Piping a stream will lock it
packages/typescriptlang-org/src/dom.d.ts:14664:130  - Unknown word (touchscreen)            -- the device may be a touchscreen or trackpad. */
packages/typescriptlang-org/src/dom.d.ts:14664:145  - Unknown word (trackpad)               -- be a touchscreen or trackpad. */
packages/typescriptlang-org/src/dom.d.ts:14664:89  - Unknown word (finger)                 -- point is commonly a finger or stylus and the device
packages/typescriptlang-org/src/dom.d.ts:1468:10   - Unknown word (cryptographic) -- * A cryptographic hash of the resource
packages/typescriptlang-org/src/dom.d.ts:14701:85  - Unknown word (fingers)                -- if the user has three fingers on the touch surface
packages/typescriptlang-org/src/dom.d.ts:14748:45  - Unknown word (transitions)            -- information related to transitions. */
packages/typescriptlang-org/src/dom.d.ts:147:5     - Unknown word (timecode)   -- timecode?: DOMHighResTimeStamp
packages/typescriptlang-org/src/dom.d.ts:14850:51  - Unknown word (suitable)               -- containing a query string suitable for use in a URL. Does
packages/typescriptlang-org/src/dom.d.ts:15003:30  - Unknown word (PUNCHTHROUGH)           -- readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum
packages/typescriptlang-org/src/dom.d.ts:15016:36  - Unknown word (pvrtc)                  -- WEBGL_compressed_texture_pvrtc {
packages/typescriptlang-org/src/dom.d.ts:15017:30  - Unknown word (PVRTC)                  -- readonly COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GLenum;
packages/typescriptlang-org/src/dom.d.ts:15017:37  - Unknown word (BPPV)                   -- COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GLenum;
packages/typescriptlang-org/src/dom.d.ts:15038:132  - Unknown word (driver)                 -- nformation about the graphics driver for debugging purposes
packages/typescriptlang-org/src/dom.d.ts:15438:14  - Unknown word (DONT)                   -- readonly DONT_CARE: GLenum;
packages/typescriptlang-org/src/dom.d.ts:1577:46   - Unknown word (Disposition)   -- SecurityPolicyViolationEventDisposition;
packages/typescriptlang-org/src/dom.d.ts:1577:5    - Unknown word (disposition)   -- disposition: SecurityPolicyViolationEvent
packages/typescriptlang-org/src/dom.d.ts:1648:227  - Unknown word (fulfills)      -- returns a promise that fulfills when the piping process
packages/typescriptlang-org/src/dom.d.ts:1648:8    - Unknown word (Pipes)         -- * Pipes this readable stream
packages/typescriptlang-org/src/dom.d.ts:1654:203  - Unknown word (aborting)      -- error that occurs during aborting the destination.
packages/typescriptlang-org/src/dom.d.ts:1656:210  - Unknown word (canceling)     -- error that occurs during canceling the source.
packages/typescriptlang-org/src/dom.d.ts:1662:76   - Unknown word (ongoing)       -- to allow aborting an ongoing pipe operation via the
packages/typescriptlang-org/src/dom.d.ts:16952:99  - Unknown word (texturing)              -- storage and state for texturing operations. */
packages/typescriptlang-org/src/dom.d.ts:17005:137  - Unknown word (transmitted)            -- send() but not yet been transmitted to the network.
packages/typescriptlang-org/src/dom.d.ts:17035:8   - Unknown word (Transmits)              -- * Transmits data using the WebSocket
packages/typescriptlang-org/src/dom.d.ts:17186:133  - Unknown word (restricts)             -- to "/". This default restricts the message to same
packages/typescriptlang-org/src/dom.d.ts:17208:8   - Unknown word (Cancels)               -- * Cancels the document load.
packages/typescriptlang-org/src/dom.d.ts:17248:5   - Unknown word (ongamepadconnected)    -- ongamepadconnected: ((this: WindowEventHandlers
packages/typescriptlang-org/src/dom.d.ts:17249:5   - Unknown word (ongamepaddisconnected) -- ongamepaddisconnected: ((this: WindowEventHandlers
packages/typescriptlang-org/src/dom.d.ts:17307:27  - Unknown word (transmits)             -- Clones message and transmits it to worker's global
packages/typescriptlang-org/src/dom.d.ts:17307:8   - Unknown word (Clones)                -- * Clones message and transmits
packages/typescriptlang-org/src/dom.d.ts:17328:227  - Unknown word (fulfill)               -- returned promise will fulfill once the script has
packages/typescriptlang-org/src/dom.d.ts:17365:102  - Unknown word (locks)                 -- getWriter() and once created locks the < writer to the
packages/typescriptlang-org/src/dom.d.ts:17381:119  - Unknown word (nevertheless)          -- or properties to it: nevertheless, several algorithms
packages/typescriptlang-org/src/dom.d.ts:17398:201  - Unknown word (disrupting)            -- part of a page without disrupting what the user is doing
packages/typescriptlang-org/src/dom.d.ts:17443:85  - Unknown word (transmission)          -- can be used to gather transmission information when data
packages/typescriptlang-org/src/dom.d.ts:17470:8   - Unknown word (Acts)                  -- * Acts as if the `Content-Type
packages/typescriptlang-org/src/dom.d.ts:17476:8   - Unknown word (Initiates)             -- * Initiates the request. The body
packages/typescriptlang-org/src/dom.d.ts:17482:8   - Unknown word (Combines)              -- * Combines a header in author request
packages/typescriptlang-org/src/dom.d.ts:1757:10   - Unknown word (Gamut)         -- colorGamut?: ColorGamut;
packages/typescriptlang-org/src/dom.d.ts:17666:137  - Unknown word (utilitarian)           -- methods and therefore is a utilitarian interface. */
packages/typescriptlang-org/src/dom.d.ts:17666:5   - Unknown word (Holds)                 -- /** Holds useful CSS-related methods
packages/typescriptlang-org/src/dom.d.ts:17784:35  - Unknown word (externref)             -- TableKind = "anyfunc" | "externref";
packages/typescriptlang-org/src/dom.d.ts:17840:6   - Unknown word (deadline)              -- (deadline: IdleDeadline): void
packages/typescriptlang-org/src/dom.d.ts:18111:6   - Unknown word (mpath)                 -- "mpath": SVGMPathElement;
packages/typescriptlang-org/src/dom.d.ts:1843:9    - Unknown word (Atomic)        -- ariaAtomic: string;
packages/typescriptlang-org/src/dom.d.ts:1852:9    - Unknown word (Expanded)      -- ariaExpanded: string;
packages/typescriptlang-org/src/dom.d.ts:1855:12   - Unknown word (Shortcuts)     -- ariaKeyShortcuts: string;
packages/typescriptlang-org/src/dom.d.ts:18664:104  - Unknown word (semi)                  -- expanded" | "normal" | "semi-condensed" | "semi-expanded
packages/typescriptlang-org/src/dom.d.ts:18664:141  - Unknown word (ultra)                 -- "semi-expanded" | "ultra-condensed" | "ultra
packages/typescriptlang-org/src/dom.d.ts:18664:27  - Unknown word (condensed)             -- CanvasFontStretch = "condensed" | "expanded" | "extra
packages/typescriptlang-org/src/dom.d.ts:18665:112  - Unknown word (titling)               -- caps" | "small-caps" | "titling-caps" | "unicase";
packages/typescriptlang-org/src/dom.d.ts:18665:129  - Unknown word (unicase)               -- | "titling-caps" | "unicase";
packages/typescriptlang-org/src/dom.d.ts:18665:35  - Unknown word (petite)                -- CanvasFontVariantCaps = "all-petite-caps" | "all-small-caps
packages/typescriptlang-org/src/dom.d.ts:18670:38  - Unknown word (geometric)             -- nvasTextRendering = "auto" | "geometricPrecision" | "optimizeLegibili
packages/typescriptlang-org/src/dom.d.ts:18678:105  - Unknown word (wifi)                  -- other" | "unknown" | "wifi";
packages/typescriptlang-org/src/dom.d.ts:18678:38  - Unknown word (cellular)              -- nnectionType = "bluetooth" | "cellular" | "ethernet" | "mixed
packages/typescriptlang-org/src/dom.d.ts:18678:51  - Unknown word (ethernet)              -- bluetooth" | "cellular" | "ethernet" | "mixed" | "none"
packages/typescriptlang-org/src/dom.d.ts:18693:25  - Unknown word (smpte)                 -- type HdrMetadataType = "smpteSt2086" | "smpteSt20
packages/typescriptlang-org/src/dom.d.ts:18704:53  - Unknown word (webrtc)                -- | "media-source" | "webrtc";
packages/typescriptlang-org/src/dom.d.ts:18711:107  - Unknown word (seekforward)           -- | "seekbackward" | "seekforward" | "seekto" | "skipad
packages/typescriptlang-org/src/dom.d.ts:18711:123  - Unknown word (seekto)                -- | "seekforward" | "seekto" | "skipad" | "stop
packages/typescriptlang-org/src/dom.d.ts:18711:134  - Unknown word (skipad)                -- seekforward" | "seekto" | "skipad" | "stop" | "togglecamera
packages/typescriptlang-org/src/dom.d.ts:18711:154  - Unknown word (togglecamera)          -- skipad" | "stop" | "togglecamera" | "togglemicrophone
packages/typescriptlang-org/src/dom.d.ts:18711:171  - Unknown word (togglemicrophone)      -- | "togglecamera" | "togglemicrophone";
packages/typescriptlang-org/src/dom.d.ts:18711:28  - Unknown word (hangup)                -- MediaSessionAction = "hangup" | "nexttrack" | "pause
packages/typescriptlang-org/src/dom.d.ts:18711:39  - Unknown word (nexttrack)             -- iaSessionAction = "hangup" | "nexttrack" | "pause" | "play"
packages/typescriptlang-org/src/dom.d.ts:18711:72  - Unknown word (previoustrack)         -- "pause" | "play" | "previoustrack" | "seekbackward" |
packages/typescriptlang-org/src/dom.d.ts:18711:90  - Unknown word (seekbackward)          -- "previoustrack" | "seekbackward" | "seekforward" |
packages/typescriptlang-org/src/dom.d.ts:18756:48  - Unknown word (recording)             -- inactive" | "paused" | "recording";
packages/typescriptlang-org/src/dom.d.ts:1888:97   - Unknown word (observers)     -- flag and signal to any observers that the associated
packages/typescriptlang-org/src/dom.d.ts:1960:246  - Unknown word (visualizations) -- it, and create audio visualizations. */
packages/typescriptlang-org/src/dom.d.ts:1996:5    - Unknown word (onremove)       -- onremove: ((this: Animation,
packages/typescriptlang-org/src/dom.d.ts:2087:25   - Unknown word (residing)       -- A short audio asset residing in memory, created from
packages/typescriptlang-org/src/dom.d.ts:2103:197  - Unknown word (stringent)      -- which has particularly stringent timing accuracy requirements
packages/typescriptlang-org/src/dom.d.ts:2154:106  - Unknown word (spatialization) -- and is used in audio spatialization. All PannerNodes spatialize
packages/typescriptlang-org/src/dom.d.ts:2154:138  - Unknown word (spatialize)     -- atialization. All PannerNodes spatialize in relation to the AudioListe
packages/typescriptlang-org/src/dom.d.ts:2231:26   - Unknown word (August)         -- deprecated As of the August 29 2014 Web Audio API
packages/typescriptlang-org/src/dom.d.ts:2231:60   - Unknown word (publication)    -- Web Audio API spec publication, this feature has been
packages/typescriptlang-org/src/dom.d.ts:2374:101  - Unknown word (unloaded)       -- resources are about to be unloaded. */
packages/typescriptlang-org/src/dom.d.ts:2374:31   - Unknown word (fired)          -- beforeunload event is fired when the window, the
packages/typescriptlang-org/src/dom.d.ts:2384:191  - Unknown word (graphic)        -- control devices, and graphic equalizers. */
packages/typescriptlang-org/src/dom.d.ts:2384:199  - Unknown word (equalizers)     -- devices, and graphic equalizers. */
packages/typescriptlang-org/src/dom.d.ts:2399:48   - Unknown word (Blobs)          -- immutable, raw data. Blobs represent data that
packages/typescriptlang-org/src/dom.d.ts:2451:8    - Unknown word (Sends)          -- * Sends the given message to
packages/typescriptlang-org/src/dom.d.ts:2476:69   - Unknown word (portions)       -- to include extended portions of unescaped text. The
packages/typescriptlang-org/src/dom.d.ts:2498:43   - Unknown word (consists)       -- condition CSS at-rule, which consists of a condition and a
packages/typescriptlang-org/src/dom.d.ts:2584:81   - Unknown word (therefore)      -- SConditionRule interface, and therefore the CSSGroupingRule
packages/typescriptlang-org/src/dom.d.ts:2812:9    - Unknown word (Optical)        -- fontOpticalSizing: string;
packages/typescriptlang-org/src/dom.d.ts:2819:16   - Unknown word (Alternates)     -- fontVariantAlternates: string;
packages/typescriptlang-org/src/dom.d.ts:2852:5    - Unknown word (inset)          -- inset: string;
packages/typescriptlang-org/src/dom.d.ts:3004:19   - Unknown word (Thickness)      -- textDecorationThickness: string;
packages/typescriptlang-org/src/dom.d.ts:3247:184  - Unknown word (windowed)       -- interface is exposed to windowed scopes as well as workers
packages/typescriptlang-org/src/dom.d.ts:3343:85   - Unknown word (counterclockwise) -- number, endAngle: number, counterclockwise?: boolean): void;
packages/typescriptlang-org/src/dom.d.ts:3367:108  - Unknown word (painting)         -- during a fill or stroke painting operation.
packages/typescriptlang-org/src/dom.d.ts:3434:104  - Unknown word (reunites)         -- ChannelSplitterNode, reunites different mono inputs
packages/typescriptlang-org/src/dom.d.ts:3434:123  - Unknown word (mono)             -- reunites different mono inputs into a single
packages/typescriptlang-org/src/dom.d.ts:3443:104  - Unknown word (separates)        -- ChannelMergerNode, separates the different channels
packages/typescriptlang-org/src/dom.d.ts:3471:8    - Unknown word (Inserts)          -- * Inserts nodes just after node
packages/typescriptlang-org/src/dom.d.ts:3547:13   - Unknown word (notations)        -- /** Textual notations within markup; although
packages/typescriptlang-org/src/dom.d.ts:3547:5    - Unknown word (Textual)          -- /** Textual notations within markup
packages/typescriptlang-org/src/dom.d.ts:3556:86   - Unknown word (entering)         -- the user indirectly entering text. */
packages/typescriptlang-org/src/dom.d.ts:3581:101  - Unknown word (reverb)           -- often used to achieve a reverb effect. A ConvolverNode
packages/typescriptlang-org/src/dom.d.ts:3581:41   - Unknown word (Convolution)      -- that performs a Linear Convolution on a given AudioBuffer
packages/typescriptlang-org/src/dom.d.ts:3625:11   - Unknown word (cryptography)     -- /** Basic cryptography features available in
packages/typescriptlang-org/src/dom.d.ts:3625:89   - Unknown word (cryptographically) -- It allows access to a cryptographically strong random number
packages/typescriptlang-org/src/dom.d.ts:3675:8    - Unknown word (abnormal)          -- /** An abnormal event (called an exception
packages/typescriptlang-org/src/dom.d.ts:4042:41   - Unknown word (dragged)           -- the data that is being dragged during a drag and drop
packages/typescriptlang-org/src/dom.d.ts:4110:8    - Unknown word (Invokes)           -- * Invokes the callback with the
packages/typescriptlang-org/src/dom.d.ts:4137:20   - Unknown word (indexth)           -- * Removes the indexth entry in the drag data
packages/typescriptlang-org/src/dom.d.ts:4148:88   - Unknown word (arrival)           -- a delay between the arrival of an input data and
packages/typescriptlang-org/src/dom.d.ts:4183:82   - Unknown word (physical)          -- information from the physical orientation of the device
packages/typescriptlang-org/src/dom.d.ts:4222:8    - Unknown word (Retrieves)         -- * Retrieves a collection of all
packages/typescriptlang-org/src/dom.d.ts:4265:159  - Unknown word (reentrant)         -- script. In the case of reentrant script execution, returns
packages/typescriptlang-org/src/dom.d.ts:4265:240  - Unknown word (amongst)           -- recently started executing amongst those that have not
packages/typescriptlang-org/src/dom.d.ts:4275:72   - Unknown word (edited)            -- the document can be edited.
packages/typescriptlang-org/src/dom.d.ts:4335:67   - Unknown word (supplies)          -- modified, if the page supplies one.
packages/typescriptlang-org/src/dom.d.ts:4393:8    - Unknown word (Moves)             -- * Moves node from another document
packages/typescriptlang-org/src/dom.d.ts:4523:76   - Unknown word (positioned)        -- its boundary points positioned at the beginning of
packages/typescriptlang-org/src/dom.d.ts:4546:8    - Unknown word (Executes)          -- * Executes a command on the current
packages/typescriptlang-org/src/dom.d.ts:4554:8    - Unknown word (Stops)             -- * Stops document's fullscreen
packages/typescriptlang-org/src/dom.d.ts:4608:8    - Unknown word (Opens)             -- * Opens a new window and loads
packages/typescriptlang-org/src/dom.d.ts:4684:145  - Unknown word (comprised)         -- a document structure comprised of nodes just like a
packages/typescriptlang-org/src/dom.d.ts:4684:364  - Unknown word (reflow)            -- the document, cause reflow, or incur any performance
packages/typescriptlang-org/src/dom.d.ts:4684:375  - Unknown word (incur)             -- document, cause reflow, or incur any performance impact
packages/typescriptlang-org/src/dom.d.ts:4695:99   - Unknown word (routed)            -- key events are being routed. This is, roughly speaking
packages/typescriptlang-org/src/dom.d.ts:4697:51   - Unknown word (browsing)          -- this API, when a child browsing context is focused,
packages/typescriptlang-org/src/dom.d.ts:4699:244  - Unknown word (inclusive)         -- is a shadow-including inclusive ancestor of the focused
packages/typescriptlang-org/src/dom.d.ts:4736:71   - Unknown word (initiates)         -- interaction. The user initiates a drag by placing a
packages/typescriptlang-org/src/dom.d.ts:4796:35   - Unknown word (rgtc)              -- texture_compression_rgtc {
packages/typescriptlang-org/src/dom.d.ts:4797:35   - Unknown word (RGTC)              -- COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum;
packages/typescriptlang-org/src/dom.d.ts:482:5     - Unknown word (fontfaces)  -- fontfaces?: FontFace[];
packages/typescriptlang-org/src/dom.d.ts:4863:25   - Unknown word (uppercased)        -- * Returns the HTML-uppercased qualified name.
packages/typescriptlang-org/src/dom.d.ts:5009:190  - Unknown word (dispatched)        -- during which event was dispatched, can be canceled by
packages/typescriptlang-org/src/dom.d.ts:5021:78   - Unknown word (cancelation)       -- successfully to indicate cancelation, and false otherwise
packages/typescriptlang-org/src/dom.d.ts:5041:68   - Unknown word (measured)          -- number of milliseconds measured relative to the time
packages/typescriptlang-org/src/dom.d.ts:5059:62   - Unknown word (registered)        -- event from reaching any registered event listeners after
packages/typescriptlang-org/src/dom.d.ts:5104:8    - Unknown word (Aborts)            -- * Aborts any instances of the
packages/typescriptlang-org/src/dom.d.ts:5133:196  - Unknown word (Observing)         -- imizations described in § 2.8 Observing event listeners.
packages/typescriptlang-org/src/dom.d.ts:5143:8    - Unknown word (Dispatches)        -- * Dispatches a synthetic event event
packages/typescriptlang-org/src/dom.d.ts:5328:6    - Unknown word (loadingdone)       -- "loadingdone": Event;
packages/typescriptlang-org/src/dom.d.ts:5329:6    - Unknown word (loadingerror)      -- "loadingerror": Event;
packages/typescriptlang-org/src/dom.d.ts:5333:5    - Unknown word (onloading)         -- onloading: ((this: FontFaceSet
packages/typescriptlang-org/src/dom.d.ts:5334:5    - Unknown word (onloadingdone)     -- onloadingdone: ((this: FontFaceSet
packages/typescriptlang-org/src/dom.d.ts:5335:5    - Unknown word (onloadingerror)    -- onloadingerror: ((this: FontFaceSet
packages/typescriptlang-org/src/dom.d.ts:5383:169  - Unknown word (submitted)         -- affect form data to be submitted.
packages/typescriptlang-org/src/dom.d.ts:5403:129  - Unknown word (presses)           -- information such as button presses, axis positions, and
packages/typescriptlang-org/src/dom.d.ts:5432:129  - Unknown word (gamepadconnected)  -- gamepad events Window.gamepadconnected and Window.gamepaddisconnecte
packages/typescriptlang-org/src/dom.d.ts:5432:157  - Unknown word (gamepaddisconnected) -- gamepadconnected and Window.gamepaddisconnected are fired in response
packages/typescriptlang-org/src/dom.d.ts:5609:28   - Unknown word (aborts)              -- Fires when the user aborts the download.
packages/typescriptlang-org/src/dom.d.ts:5624:8    - Unknown word (Occurs)              -- * Occurs when playback is possible
packages/typescriptlang-org/src/dom.d.ts:5652:35   - Unknown word (continuously)        -- on the source object continuously during a drag operation
packages/typescriptlang-org/src/dom.d.ts:5662:50   - Unknown word (drags)               -- element when the user drags the object to a valid
packages/typescriptlang-org/src/dom.d.ts:5717:39   - Unknown word (alphanumeric)        -- the user presses an alphanumeric key.
packages/typescriptlang-org/src/dom.d.ts:5804:54   - Unknown word (decreased)           -- rate is increased or decreased.
packages/typescriptlang-org/src/dom.d.ts:5809:28   - Unknown word (resets)              -- Fires when the user resets a form.
packages/typescriptlang-org/src/dom.d.ts:5843:60   - Unknown word (halted)              -- has been intentionally halted.
packages/typescriptlang-org/src/dom.d.ts:5867:29   - Unknown word (stops)               -- Occurs when playback stops because the next frame
packages/typescriptlang-org/src/dom.d.ts:5907:154  - Unknown word (manipulating)        -- they inherit from) for manipulating the layout and presentation
packages/typescriptlang-org/src/dom.d.ts:6125:70   - Unknown word (submits)             -- displayed if the user submits the form, or an empty
packages/typescriptlang-org/src/dom.d.ts:6173:260  - Unknown word (drawn)               -- parameters that can be drawn on a canvas.
packages/typescriptlang-org/src/dom.d.ts:6445:38   - Unknown word (typeface)            -- retrieves the current typeface family.
packages/typescriptlang-org/src/dom.d.ts:6517:8    - Unknown word (Designates)          -- * Designates a form that is not validated
packages/typescriptlang-org/src/dom.d.ts:6574:52   - Unknown word (heights)             -- top and bottom margin heights before displaying the
packages/typescriptlang-org/src/dom.d.ts:6594:51   - Unknown word (scrolled)            -- whether the frame can be scrolled.
packages/typescriptlang-org/src/dom.d.ts:6706:5    - Unknown word (Serves)              -- /** Serves as the root node for
packages/typescriptlang-org/src/dom.d.ts:6709:47   - Unknown word (governs)             -- the DTD version that governs the current document
packages/typescriptlang-org/src/dom.d.ts:676:10    - Unknown word (Efficient)  -- powerEfficient: boolean;
packages/typescriptlang-org/src/dom.d.ts:7035:8    - Unknown word (Defines)             -- * Defines the maximum acceptable
packages/typescriptlang-org/src/dom.d.ts:7149:8    - Unknown word (Decrements)          -- * Decrements a range input control
packages/typescriptlang-org/src/dom.d.ts:7154:8    - Unknown word (Increments)          -- * Increments a range input control
packages/typescriptlang-org/src/dom.d.ts:7169:5    - Unknown word (Exposes)             -- /** Exposes specific properties
packages/typescriptlang-org/src/dom.d.ts:7455:8    - Unknown word (Resets)              -- * Resets the audio or video object
packages/typescriptlang-org/src/dom.d.ts:7459:8    - Unknown word (Pauses)              -- * Pauses the current playback
packages/typescriptlang-org/src/dom.d.ts:7766:193  - Unknown word (altering)            -- as well as optionally altering its items. This type
packages/typescriptlang-org/src/dom.d.ts:7771:38   - Unknown word (truncates)           -- to a smaller number, truncates the number of option
packages/typescriptlang-org/src/dom.d.ts:7870:59   - Unknown word (designated)          -- type of the resource designated by the value attribute
packages/typescriptlang-org/src/dom.d.ts:7933:20   - Unknown word (quotient)            -- * Returns the quotient of value/max when the
packages/typescriptlang-org/src/dom.d.ts:7933:75   - Unknown word (determinate)         -- value attribute is set (determinate progress bar), or -
packages/typescriptlang-org/src/dom.d.ts:7951:148  - Unknown word (quoting)             -- inheritance) for manipulating quoting elements, like <blockquote
packages/typescriptlang-org/src/dom.d.ts:8218:26   - Unknown word (abbreviated)         -- * Sets or retrieves abbreviated text for the object
packages/typescriptlang-org/src/dom.d.ts:8227:52   - Unknown word (conceptual)          -- comma-delimited list of conceptual categories associated
packages/typescriptlang-org/src/dom.d.ts:8356:54   - Unknown word (borders)             -- dividing lines (inner borders) are displayed.
packages/typescriptlang-org/src/dom.d.ts:83:5      - Unknown word (samplerate) -- samplerate?: number;
packages/typescriptlang-org/src/dom.d.ts:8417:122  - Unknown word (appends)             -- default value is -1, which appends the new row to the end
packages/typescriptlang-org/src/dom.d.ts:8479:198  - Unknown word (footers)             -- sections, that is headers, footers and bodies, in an HTML
packages/typescriptlang-org/src/dom.d.ts:84:5      - Unknown word (spatial)    -- spatialRendering?: boolean;
packages/typescriptlang-org/src/dom.d.ts:8738:6    - Unknown word (enterpictureinpicture) -- "enterpictureinpicture": Event;
packages/typescriptlang-org/src/dom.d.ts:8739:6    - Unknown word (leavepictureinpicture) -- "leavepictureinpicture": Event;
packages/typescriptlang-org/src/dom.d.ts:8749:5    - Unknown word (onenterpictureinpicture) -- onenterpictureinpicture: ((this: HTMLVideoElement
packages/typescriptlang-org/src/dom.d.ts:8750:5    - Unknown word (onleavepictureinpicture) -- onleavepictureinpicture: ((this: HTMLVideoElement
packages/typescriptlang-org/src/dom.d.ts:8752:25   - Unknown word (playsinline)             -- * Gets or sets the playsinline of the video element
packages/typescriptlang-org/src/dom.d.ts:879:114   - Unknown word (recorded)   -- mutation needs to be recorded.
packages/typescriptlang-org/src/dom.d.ts:8801:128  - Unknown word (retrieving)              -- These actions include retrieving, setting, adding to
packages/typescriptlang-org/src/dom.d.ts:8840:98   - Unknown word (advancing)               -- DOMException if the cursor is advancing or is finished.
packages/typescriptlang-org/src/dom.d.ts:8853:8    - Unknown word (Advances)                -- * Advances the cursor through the
packages/typescriptlang-org/src/dom.d.ts:8957:56   - Unknown word (precedes)                -- Returns -1 if key1 precedes key2, 1 if key2 precedes
packages/typescriptlang-org/src/dom.d.ts:8957:8    - Unknown word (Compares)                -- * Compares two values as keys.
packages/typescriptlang-org/src/dom.d.ts:8964:8    - Unknown word (Attempts)                -- * Attempts to delete the named
packages/typescriptlang-org/src/dom.d.ts:9068:34   - Unknown word (spanning)                -- Returns a new IDBKeyRange spanning from lower to upper
packages/typescriptlang-org/src/dom.d.ts:9318:115  - Unknown word (impulse)                 -- implements a general infinite impulse response (IIR)  filter
packages/typescriptlang-org/src/dom.d.ts:9318:323  - Unknown word (tuned)                   -- specified, so that it can be tuned as needed. */
packages/typescriptlang-org/src/dom.d.ts:9328:15   - Unknown word (Deadline)                -- interface IdleDeadline {
packages/typescriptlang-org/src/dom.d.ts:9330:9    - Unknown word (Remaining)               -- timeRemaining(): DOMHighResTimeStamp
packages/typescriptlang-org/src/dom.d.ts:9364:8    - Unknown word (Transfers)               -- * Transfers the underlying bitmap
packages/typescriptlang-org/src/dom.d.ts:9377:24   - Unknown word (dimensional)             -- * Returns the one-dimensional array containing the
packages/typescriptlang-org/src/dom.d.ts:9499:105  - Unknown word (relates)                 -- reflected on the object it relates to. Both the Document
packages/typescriptlang-org/src/dom.d.ts:9559:8    - Unknown word (Navigates)               -- * Navigates to the given URL.
packages/typescriptlang-org/src/dom.d.ts:9620:114  - Unknown word (essence)                 -- as screen sharing. In essence, it lets you obtain
packages/typescriptlang-org/src/dom.d.ts:9620:59   - Unknown word (cameras)                 -- media input devices like cameras and microphones, as
packages/typescriptlang-org/src/dom.d.ts:9620:71   - Unknown word (microphones)             -- devices like cameras and microphones, as well as screen sharing
packages/typescriptlang-org/src/dom.d.ts:9677:104  - Unknown word (decryption)              -- data when the content decryption module generates a message
packages/typescriptlang-org/src/dom.d.ts:9832:21   - Unknown word (Recording)               -- readonly state: RecordingState;
packages/typescriptlang-org/src/dom.d.ts:9838:11   - Unknown word (timeslice)               -- start(timeslice?: number): void;
packages/typescriptlang-org/src/lib/isTouchDevice.ts:13:28     - Unknown word (coarse)     -- matchMedia("(pointer:coarse)")
packages/typescriptlang-org/src/lib/isTouchDevice.ts:19:57     - Unknown word (sniffing)   -- fall back to user agent sniffing
packages/typescriptlang-org/src/lib/isTouchDevice.ts:23:18     - Unknown word (Berry)      -- /\b(BlackBerry|webOS|iPhone|IEMobile
packages/typescriptlang-org/src/lib/playgroundURLs.ts:5:19      - Unknown word (Bust)       -- // scripts/cacheBustPlayground.mjs
packages/typescriptlang-org/src/pages/branding.tsx:16:45     - Unknown word (Logos)      -- Branding" description="Logos and design assets" lang
packages/typescriptlang-org/src/pages/branding.tsx:32:90     - Unknown word (giveaway)   -- posts, news articles, giveaway stickers and general
packages/typescriptlang-org/src/pages/branding.tsx:77:36     - Unknown word (Integrate)  -- style={{ flex: 1 }}>Integrate the TypeScript logo
packages/typescriptlang-org/src/pages/branding.tsx:78:78     - Unknown word (endorsement) -- implies TypeScript's endorsement of the product.</p>
packages/typescriptlang-org/src/pages/dev/bug-workbench.tsx:198:22    - Unknown word (faff)       -- // Dark mode faff
packages/typescriptlang-org/src/pages/dev/dev.scss:26:10     - Unknown word (fifty)      -- .split-fifty {
packages/typescriptlang-org/src/pages/dev/dev.scss:41:10     - Unknown word (fivehundred) -- .split-fivehundred {
packages/typescriptlang-org/src/pages/dev/playground-plugins.tsx:22:70     - Unknown word (expansive)  -- via the DOM API and an expansive Design System, however
packages/typescriptlang-org/src/pages/dev/playground-plugins.tsx:24:108    - Unknown word (hooking)    -- Playground has a dev-mode for hooking directly to your local
packages/typescriptlang-org/src/pages/dev/sandbox.tsx:15:19     - Unknown word (bother)     -- // Don't even bother getting monaco
packages/typescriptlang-org/src/pages/dev/sandbox.tsx:210:54    - Unknown word (studio)     -- the JS for the visual studio require loader"
packages/typescriptlang-org/src/pages/dev/twoslash.tsx:277:48    - Unknown word (Markup)     -- { marginTop: "0" }}>Markup</h3>
packages/typescriptlang-org/src/pages/dev/twoslash.tsx:278:31    - Unknown word (Blurb)      -- <p id="exampleBlurb">{codeSamples[0].blurb
packages/typescriptlang-org/src/pages/dev/twoslash.tsx:398:12    - Unknown word (Trims)      -- name: "Trims code",
packages/typescriptlang-org/src/pages/dev/twoslash.tsx:6:10      - Unknown word (renderers)  -- import { renderers } from "shiki-twoslash
packages/typescriptlang-org/src/redirects/setupRedirects.ts:12:53     - Unknown word (redirection) -- the handbook with some redirection work
packages/typescriptlang-org/src/redirects/setupRedirects.ts:40:11     - Unknown word (Permanent)   -- isPermanent: true,
packages/typescriptlang-org/src/redirects/setupRedirects.ts:41:34     - Unknown word (Azure)       -- TODO: when we move to Azure Static Web Apps, we
packages/typescriptlang-org/src/style/globals.scss:34:19     - Unknown word (tablet)     -- // Small screen / tablet
packages/typescriptlang-org/src/style/theme.jsonc:11:9      - Unknown word (Darker)     -- "themeDarker": "#0e446b",
packages/typescriptlang-org/src/style/theme.jsonc:12:4      - Unknown word (neutral)    -- "neutralLighterAlt": "#f8f8f
packages/typescriptlang-org/src/style/theme.jsonc:15:11     - Unknown word (Quaternary) -- "neutralQuaternaryAlt": "#dadada",
packages/typescriptlang-org/src/style/theme.jsonc:4:9       - Unknown word (Lighter)    -- "themeLighterAlt": "#f4f9fc",
packages/typescriptlang-org/src/style/theme.jsonc:7:9       - Unknown word (Tertiary)   -- "themeTertiary": "#68aad9",
packages/typescriptlang-org/src/style/theme.jsonc:8:9       - Unknown word (Secondary)  -- "themeSecondary": "#2f87c7",
packages/typescriptlang-org/src/templates/documentation.scss:228:4     - Unknown word (docs)       -- .docs-footer {
packages/typescriptlang-org/src/templates/documentation.scss:357:29    - Unknown word (stripes)    -- Override the default stripes
packages/typescriptlang-org/src/templates/documentation.tsx:8:78      - Unknown word (slugs)      -- headers to generate the slugs
packages/typescriptlang-org/src/templates/documentation.tsx:9:8       - Unknown word (slugger)    -- import slugger from "github-slugger
packages/typescriptlang-org/src/templates/glossary.scss:4:17      - Unknown word (quicklinks) -- ul.filterable-quicklinks {
packages/typescriptlang-org/src/templates/glossary.scss:4:6       - Unknown word (filterable) -- ul.filterable-quicklinks {
packages/typescriptlang-org/src/templates/glossary.tsx:29:165    - Unknown word (congrats)   -- a work in progress, congrats on finding it!</div
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:112:15    - Unknown word (animations)     -- /* Respect no animations */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:112:4     - Unknown word (Respect)        -- /* Respect no animations */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:16:79     - Unknown word (defaults)   -- make sure there are defaults regardless */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:20:28     - Unknown word (breathe)    -- Give it some space to breathe */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:263:15    - Unknown word (unobtrusively)  -- /* Fades in unobtrusively */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:263:6     - Unknown word (Fades)          -- /* Fades in unobtrusively */
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:268:21    - Unknown word (wishes)         -- /* Respect people's wishes to not have animations
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:278:13    - Unknown word (annotation)     -- .twoslash-annotation {
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:66:13     - Unknown word (differentiates) -- /* Visually differentiates twoslash code samples
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:66:4      - Unknown word (Visually)   -- /* Visually differentiates twoslash
packages/typescriptlang-org/src/templates/markdown-twoslash.scss:71:43     - Unknown word (underlines)     -- over the pre, show the underlines */
packages/typescriptlang-org/src/templates/pages/community.tsx:106:99    - Unknown word (deftyped)      -- definitelytyped" id="deftyped-header" target="_blank
packages/typescriptlang-org/src/templates/pages/community.tsx:124:19    - Unknown word (Meetups)       -- <button>Meetups</button>
packages/typescriptlang-org/src/templates/pages/community.tsx:17:18     - Unknown word (Linz)       -- location: "Linz",
packages/typescriptlang-org/src/templates/pages/community.tsx:19:14     - Unknown word (March)      -- date: "March 31st, 2020",
packages/typescriptlang-org/src/templates/pages/community.tsx:20:17     - Unknown word (Austria)    -- country: "Austria",
packages/typescriptlang-org/src/templates/pages/community.tsx:23:97     - Unknown word (unforgettable) -- community. Join us for an unforgettable day in the heart of
packages/typescriptlang-org/src/templates/pages/css/cheatsheets.scss:107:14    - Unknown word (poking)     -- // Allow poking out of the edge
packages/typescriptlang-org/src/templates/pages/css/cheatsheets.scss:113:8     - Unknown word (BIIIGG)     -- // BIIIGG
packages/typescriptlang-org/src/templates/pages/css/cheatsheets.scss:14:4      - Unknown word (sheet)      -- .sheet-container {
packages/typescriptlang-org/src/templates/pages/css/cheatsheets.scss:93:11     - Unknown word (peeking)    -- // No peeking out of the sides
packages/typescriptlang-org/src/templates/pages/css/community.scss:105:27    - Unknown word (lighten)    -- background-color: lighten(black, 30%);
packages/typescriptlang-org/src/templates/pages/css/community.scss:73:9      - Unknown word (discord)    -- &.discord {
packages/typescriptlang-org/src/templates/pages/css/documentation.scss:20:14     - Unknown word (badge)      -- // For the badge
packages/typescriptlang-org/src/templates/pages/css/index.scss:1063:17   - Unknown word (slider)     -- #adopt-step-slider {
packages/typescriptlang-org/src/templates/pages/css/index.scss:1212:14   - Unknown word (trans)      -- .dark-blue-trans-bg {
packages/typescriptlang-org/src/templates/pages/css/index.scss:729:6     - Unknown word (needle)     -- .needle,
packages/typescriptlang-org/src/templates/pages/css/index.scss:80:32     - Unknown word (doens't)    -- Doesn't show because it doens't have a way to generate
packages/typescriptlang-org/src/templates/pages/css/index.scss:931:6     - Unknown word (icons)      -- .icons {
packages/typescriptlang-org/src/templates/pages/css/index.scss:990:6     - Unknown word (videos)     -- ul#videos {
packages/typescriptlang-org/src/templates/pages/css/tools.scss:3:2       - Unknown word (cropper)    -- .cropper {
packages/typescriptlang-org/src/templates/pages/download.tsx:105:15    - Unknown word (Sucrase)      -- <h3>Sucrase</h3>
packages/typescriptlang-org/src/templates/pages/download.tsx:40:38     - Unknown word (managers)   -- of these dependency managers support lockfiles, ensuring
packages/typescriptlang-org/src/templates/pages/download.tsx:69:11     - Unknown word (Globally)   -- <h2>Globally Installing TypeScript
packages/typescriptlang-org/src/templates/pages/download.tsx:70:220    - Unknown word (reproducible) -- they can benefit from reproducible builds across different
packages/typescriptlang-org/src/templates/pages/index.tsx:64:23     - Unknown word (ikey)       -- const P = (props: { ikey: keyof typeof indexCopy
packages/typescriptlang-org/src/templates/pages/index.tsx:81:142    - Unknown word (speeds)     -- language. TypeScript speeds up your development
packages/typescriptlang-org/src/templates/pages/tools.tsx:44:14     - Unknown word (Quickly)    -- <p>Quickly look up the syntax for
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:109:109   - Unknown word (interactions) -- which handled simple interactions on websites. Java on
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:110:154   - Unknown word (scales)       -- codebases of different scales, so the language required
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:143:146   - Unknown word (Annotating)   -- will only be a string. Annotating your variables
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:149:88    - Unknown word (Hence)        -- annotations "Types". Hence the name <i>Type</i
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:158:50    - Unknown word (considerably) -- <p>These are all considerably more complicated to
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:160:66    - Unknown word (Solve)        -- Problems Can TypeScript Solve?</h3>
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:165:127   - Unknown word (pebble)       -- files, like throwing a pebble into a pond
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:166:13    - Unknown word (ripples)      -- and causing ripples to spread out to the
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:168:36    - Unknown word (Validating)   -- <p>Validating the connections between
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:31:16     - Unknown word (commerce)   -- is for commerce and information sharing
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:41:137    - Unknown word (multiples)  -- read code many, many multiples of times more than
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:41:72     - Unknown word (humans)     -- languages are a way for humans and computers to communicate
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:53:178    - Unknown word (downwards)  -- through line by line downwards running that code. To
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:68:28     - Unknown word (colons)     -- It also has semi-colons at the end of some lines
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:70:81     - Unknown word (standout)   -- though, there is one standout line I'd like us to
packages/typescriptlang-org/src/templates/pages/why-create-typescript.tsx:89:39     - Unknown word (illustrate) -- <p>To illustrate:</p>
packages/typescriptlang-org/src/templates/play-example.tsx:26:64     - Unknown word (slurp)      -- msn|duckduckbot|teoma|slurp|yandex/i.test(navigator
packages/typescriptlang-org/src/templates/play.scss:1061:10   - Unknown word (modal)      -- #popover-modal {
packages/typescriptlang-org/src/templates/play.scss:131:8     - Unknown word (Examples)   -- // Examples dropdown
packages/typescriptlang-org/src/templates/play.scss:278:29    - Unknown word (centering)  -- Fix their vertical centering
packages/typescriptlang-org/src/templates/play.scss:288:15    - Unknown word (menus)      -- // Ensure menus use this button for
packages/typescriptlang-org/src/templates/play.scss:288:8     - Unknown word (Ensure)     -- // Ensure menus use this button
packages/typescriptlang-org/src/templates/play.scss:726:19    - Unknown word (Tweaks)     -- /** Design System Tweaks **/
packages/typescriptlang-org/src/templates/play.scss:781:6     - Unknown word (comma)      -- .comma {
packages/typescriptlang-org/src/templates/play.tsx:105:10    - Unknown word (bails)      -- // bails then give a useful error
packages/typescriptlang-org/src/templates/play.tsx:138:28    - Unknown word (Caught)     -- console.error("Caught an error which is likely
packages/typescriptlang-org/src/templates/play.tsx:89:10     - Unknown word (Somehow)    -- // Somehow people keep trying
packages/typescriptlang-org/src/templates/play.tsx:98:58     - Unknown word (elbow)      -- editor with a bit of elbow grease.
packages/typescriptlang-org/src/templates/play.tsx:98:64     - Unknown word (grease)     -- with a bit of elbow grease.
packages/typescriptlang-org/src/templates/tsconfig.scss:120:36    - Unknown word (gutter)      -- 8px 8px 0; /* Some gutter */
packages/typescriptlang-org/src/templates/tsconfig.scss:5:41      - Unknown word (margins)     -- reduce the padding and margins to make it fit phones
packages/typescriptlang-org/src/templates/tsconfig.scss:5:6       - Unknown word (Drastically) -- // Drastically reduce the padding and
packages/typescriptlang-org/src/templates/tsconfig.scss:5:64      - Unknown word (phones)      -- margins to make it fit phones
packages/typescriptlang-org/src/templates/tsconfigReference.tsx:138:9     - Unknown word (joiner)     -- const joiner = (options: any[], opt
packages/typescriptlang-org/src/templates/tsconfigReference.tsx:97:11     - Unknown word (subnavs)    -- const subnavs = document.querySelectorAll
packages/typescriptlang-org/static/License.html:1003:19   - Unknown word (Notices)      -- ThirdPartyNotices file accompanying the
packages/typescriptlang-org/static/License.html:1004:58   - Unknown word (disclaimers)  -- other agreements, the disclaimers and the
packages/typescriptlang-org/static/License.html:1005:28   - Unknown word (exclusions)   -- limitations on and exclusions of damages below also
packages/typescriptlang-org/static/License.html:1005:42   - Unknown word (damages)      -- on and exclusions of damages below also apply.&nbsp
packages/typescriptlang-org/static/License.html:1046:51   - Unknown word (consent)      -- software operates as your consent to these
packages/typescriptlang-org/static/License.html:1059:39   - Unknown word (sold)         -- software is licensed, not sold. This agreement only
packages/typescriptlang-org/static/License.html:1060:47   - Unknown word (reserves)     -- software. Microsoft reserves all other rights.
packages/typescriptlang-org/static/License.html:1062:42   - Unknown word (expressly)    -- the software only as expressly permitted in this
packages/typescriptlang-org/static/License.html:1087:41   - Unknown word (disassemble)  -- engineer, decompile or disassemble the software, except
packages/typescriptlang-org/static/License.html:1101:9    - Unknown word (suppliers)    -- suppliers in the software;
packages/typescriptlang-org/static/License.html:1123:28   - Unknown word (lend)         -- >share, publish or lend the software, or provide
packages/typescriptlang-org/static/License.html:1135:46   - Unknown word (RESTRICTIONS) -- size: 10pt;">EXPORT RESTRICTIONS.</span
packages/typescriptlang-org/static/License.html:1140:37   - Unknown word (professional) -- software, online services, professional services and related
packages/typescriptlang-org/static/License.html:1141:47   - Unknown word (jurisdiction) -- subject to U.S. export jurisdiction. You must comply
packages/typescriptlang-org/static/License.html:1142:56   - Unknown word (laws)         -- international and national laws, including the
packages/typescriptlang-org/static/License.html:1143:21   - Unknown word (Administration) -- U.S. Export Administration Regulations, the Internationa
packages/typescriptlang-org/static/License.html:1143:36   - Unknown word (Regulations)    -- Export Administration Regulations, the International Traffic
packages/typescriptlang-org/static/License.html:1144:60   - Unknown word (sanctions)      -- Foreign Assets Control sanctions programs,
packages/typescriptlang-org/static/License.html:1144:9    - Unknown word (Arms)           -- Arms Regulations, Office
packages/typescriptlang-org/static/License.html:1146:15   - Unknown word (governments)    -- other governments related to Microsoft
packages/typescriptlang-org/static/License.html:1174:39   - Unknown word (ENTIRE)         -- style="font-size: 10pt;">ENTIRE AGREEMENT.</span
packages/typescriptlang-org/static/License.html:1176:43   - Unknown word (supplements)    -- agreement, and the terms for supplements, updates, Internet-based
packages/typescriptlang-org/static/License.html:1191:42   - Unknown word (claims)         -- interpretation of and claims for breach of this agreement
packages/typescriptlang-org/static/License.html:1191:53   - Unknown word (breach)         -- erpretation of and claims for breach of this agreement,
packages/typescriptlang-org/static/License.html:1210:36   - Unknown word (foregoing)      -- Without limitation of the foregoing, for Australia, </span
packages/typescriptlang-org/static/License.html:1212:19   - Unknown word (STATUTORY)      -- >YOU HAVE STATUTORY GUARANTEES UNDER THE
packages/typescriptlang-org/static/License.html:1212:29   - Unknown word (GUARANTEES)     -- >YOU HAVE STATUTORY GUARANTEES UNDER THE AUSTRALIAN
packages/typescriptlang-org/static/License.html:1213:35   - Unknown word (INTENDED)       -- NOTHING IN THESE TERMS IS INTENDED TO AFFECT THOSE RIGHTS
packages/typescriptlang-org/static/License.html:1213:54   - Unknown word (THOSE)          -- IS INTENDED TO AFFECT THOSE RIGHTS</span
packages/typescriptlang-org/static/License.html:1222:10   - Unknown word (DISCLAIMER)     -- >DISCLAIMER OF WARRANTY. THE SOFTWARE
packages/typescriptlang-org/static/License.html:1222:24   - Unknown word (WARRANTY)       -- >DISCLAIMER OF WARRANTY. THE SOFTWARE IS LICENSED
packages/typescriptlang-org/static/License.html:1222:50   - Unknown word (LICENSED)       -- WARRANTY. THE SOFTWARE IS LICENSED “AS-IS.” YOU BEAR
packages/typescriptlang-org/static/License.html:1222:72   - Unknown word (BEAR)           -- LICENSED “AS-IS.” YOU BEAR
packages/typescriptlang-org/static/License.html:1223:41   - Unknown word (GIVES)          -- USING IT. MICROSOFT GIVES NO EXPRESS WARRANTIES
packages/typescriptlang-org/static/License.html:1223:58   - Unknown word (WARRANTIES)     -- MICROSOFT GIVES NO EXPRESS WARRANTIES,
packages/typescriptlang-org/static/License.html:1224:49   - Unknown word (PERMITTED)      -- CONDITIONS. TO THE EXTENT PERMITTED UNDER YOUR LOCAL
packages/typescriptlang-org/static/License.html:1225:38   - Unknown word (IMPLIED)        -- MICROSOFT EXCLUDES THE IMPLIED WARRANTIES OF MERCHANTABILITY
packages/typescriptlang-org/static/License.html:1225:9    - Unknown word (LAWS)           -- LAWS, MICROSOFT EXCLUDES
packages/typescriptlang-org/static/License.html:1226:23   - Unknown word (PARTICULAR)     -- FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
packages/typescriptlang-org/static/License.html:1226:34   - Unknown word (PURPOSE)        -- FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
packages/typescriptlang-org/static/License.html:1226:50   - Unknown word (INFRINGEMENT)   -- PARTICULAR PURPOSE AND NON-INFRINGEMENT.</span
packages/typescriptlang-org/static/License.html:1226:9    - Unknown word (FITNESS)        -- FITNESS FOR A PARTICULAR PURPOSE
packages/typescriptlang-org/static/License.html:1235:10   - Unknown word (LIMITATION)     -- >LIMITATION ON AND EXCLUSION OF
packages/typescriptlang-org/static/License.html:1235:41   - Unknown word (DAMAGES)        -- ON AND EXCLUSION OF DAMAGES</span
packages/typescriptlang-org/static/License.html:1237:20   - Unknown word (RECOVER)        -- >. YOU CAN RECOVER FROM MICROSOFT AND ITS
packages/typescriptlang-org/static/License.html:1237:51   - Unknown word (SUPPLIERS)      -- FROM MICROSOFT AND ITS SUPPLIERS ONLY DIRECT
packages/typescriptlang-org/static/License.html:1238:39   - Unknown word (CANNOT)         -- UP TO U.S. $5.00. YOU CANNOT RECOVER ANY OTHER DAMAGES
packages/typescriptlang-org/static/License.html:1239:19   - Unknown word (CONSEQUENTIAL)  -- INCLUDING CONSEQUENTIAL, LOST PROFITS, SPECIAL
packages/typescriptlang-org/static/License.html:1239:39   - Unknown word (PROFITS)        -- CONSEQUENTIAL, LOST PROFITS, SPECIAL, INDIRECT OR
packages/typescriptlang-org/static/License.html:1239:69   - Unknown word (INCIDENTAL)     -- SPECIAL, INDIRECT OR INCIDENTAL
packages/typescriptlang-org/static/License.html:1249:19   - Unknown word (warranty)       -- breach of warranty, guarantee or condition
packages/typescriptlang-org/static/License.html:1249:60   - Unknown word (liability)      -- or condition, strict liability,
packages/typescriptlang-org/static/License.html:1250:30   - Unknown word (tort)           -- negligence, or other tort to the extent permitted
packages/typescriptlang-org/static/License.html:1250:9    - Unknown word (negligence)     -- negligence, or other tort to the
packages/typescriptlang-org/static/License.html:1260:23   - Unknown word (incidental)     -- limitation of incidental, consequential or other
packages/typescriptlang-org/static/License.html:1260:35   - Unknown word (consequential)  -- limitation of incidental, consequential or other damages.</span
packages/typescriptlang-org/static/License.html:133:12    - Unknown word (Footnote)   -- p.MsoFootnoteText, li.MsoFootnoteText
packages/typescriptlang-org/static/License.html:172:15    - Unknown word (Endnote)    -- span.MsoEndnoteReference
packages/typescriptlang-org/static/License.html:209:12    - Unknown word (Plain)      -- p.MsoPlainText, li.MsoPlainText
packages/typescriptlang-org/static/License.html:229:12    - Unknown word (Acetate)    -- p.MsoAcetate, li.MsoAcetate, div
packages/typescriptlang-org/static/License.html:230:25    - Unknown word (Balloon)    -- {mso-style-link:"Balloon Text Char";
packages/typescriptlang-org/static/License.html:237:14    - Unknown word (Pane)       -- p.MsoRMPane, li.MsoRMPane, div.MsoRMPane
packages/typescriptlang-org/static/License.html:464:16    - Unknown word (EULA)       -- p.HeadingEULA, li.HeadingEULA, div
packages/typescriptlang-org/static/License.html:484:9     - Unknown word (Preamble)   -- p.Preamble, li.Preamble, div.Preamble
packages/typescriptlang-org/static/License.html:504:16    - Unknown word (Warranty)   -- p.HeadingWarranty, li.HeadingWarranty
packages/typescriptlang-org/static/License.html:695:16    - Unknown word (Underlined) -- p.Bullet3Underlined, li.Bullet3Underlined
packages/typescriptlang-org/static/License.html:807:16    - Unknown word (WINEXTERNAL) -- p.LIMPAT4WINEXTERNAL, li.LIMPAT4WINEXTERNAL
packages/typescriptlang-org/static/License.html:858:29    - Unknown word (STUDIO)      -- >MICROSOFT VISUAL STUDIO 2015 ADD-ONs, VISUAL
packages/typescriptlang-org/static/License.html:858:64    - Unknown word (SHELLS)      -- ADD-ONs, VISUAL STUDIO SHELLS and C++
packages/typescriptlang-org/static/License.html:867:49    - Unknown word (affiliates)  -- you live, one of its affiliates) and you. They
packages/typescriptlang-org/static/License.html:883:19    - Unknown word (COMPLY)      -- >IF YOU COMPLY WITH THESE LICENSE TERMS
packages/typescriptlang-org/static/License.html:883:31    - Unknown word (THESE)       -- >IF YOU COMPLY WITH THESE LICENSE TERMS, YOU HAVE
packages/typescriptlang-org/static/License.html:883:65    - Unknown word (RIGHTS)      -- TERMS, YOU HAVE THE RIGHTS
packages/typescriptlang-org/static/License.html:895:39    - Unknown word (INSTALLATION) -- style="font-size: 10pt;">INSTALLATION AND USE RIGHTS. </span
packages/typescriptlang-org/static/License.html:923:60    - Unknown word (reinstalling) -- of the software, for reinstalling the
packages/typescriptlang-org/static/License.html:975:64    - Unknown word (governed)     -- These components are governed by
packages/typescriptlang-org/static/License.html:976:18    - Unknown word (agreements)   -- separate agreements and their own product
packages/typescriptlang-org/static/License.html:989:47    - Unknown word (accompanying) -- the “Licenses” folder accompanying the software.</span
packages/typescriptlang-org/static/Web.config:12:15     - Unknown word (Unobtrusive) -- <add key="UnobtrusiveJavaScriptEnabled" value
packages/typescriptlang-org/static/Web.config:18:12     - Unknown word (mime)        -- <mimeMap fileExtension="fx
packages/typescriptlang-org/static/Web.config:18:56     - Unknown word (shader)      -- fx" mimeType="text/x-shader" />
packages/typescriptlang-org/static/Web.config:26:35     - Unknown word (webmanifest) -- mimeMap fileExtension="webmanifest" mimeType="text/json
packages/typescriptlang-org/static/Web.config:27:63     - Unknown word (octet)       -- mimeType="application/octet-stream" />
packages/typescriptlang-org/static/Web.config:30:27     - Unknown word (times)       -- Set the number of times a URL must be requested
packages/typescriptlang-org/static/Web.config:31:14     - Unknown word (saves)       -- This saves the time compressing
packages/typescriptlang-org/static/Web.config:33:33     - Unknown word (Threshold)   -- serverRuntime frequentHitThreshold="1"/>
packages/typescriptlang-org/static/css/docsearch.css:1:5971    - Unknown word (subcategory) -- docsearch-suggestion--subcategory-column{float:left;width
packages/typescriptlang-org/static/js/docsearch.js:2:10029   - Unknown word (draining)    -- }}}var queue=[];var draining=false;var currentQueue
packages/typescriptlang-org/static/js/docsearch.js:2:105670  - Unknown word (secs)          -- |msecs?|ms|seconds?|secs?|s|minutes?|mins?|m
packages/typescriptlang-org/static/js/docsearch.js:2:105687  - Unknown word (mins)          -- seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days
packages/typescriptlang-org/static/js/docsearch.js:2:106164  - Unknown word (millisecond)   -- case"milliseconds":case"millisecond":case"msecs":case"msec
packages/typescriptlang-org/static/js/docsearch.js:2:106194  - Unknown word (msec)          -- millisecond":case"msecs":case"msec":case"ms":return n;default
packages/typescriptlang-org/static/js/docsearch.js:2:111428  - Unknown word (asap)          -- customSchedulerFn=void 0;var asap=function asap(callback
packages/typescriptlang-org/static/js/docsearch.js:2:111663  - Unknown word (Asap)          -- scheduleFn}function setAsap(asapFn){asap=asapFn
packages/typescriptlang-org/static/js/docsearch.js:2:113477  - Unknown word (Fulfillment)   -- eSetTimeout()}function then(onFulfillment,onRejection){var parent
packages/typescriptlang-org/static/js/docsearch.js:2:114526  - Unknown word (fulfillment)   -- tryThen(then$$1,value,fulfillmentHandler,rejectionHandler
packages/typescriptlang-org/static/js/docsearch.js:2:114966  - Unknown word (Settle)        -- reject(promise,reason)},"Settle: "+(promise._label|
packages/typescriptlang-org/static/js/docsearch.js:2:116317  - Unknown word (subscribers)   -- FULFILLED;if(promise._subscribers.length!==0){asap(publish
packages/typescriptlang-org/static/js/docsearch.js:2:124418  - Unknown word (Late)          -- {opts.debug("JSONP: Late answer, ignoring");return
packages/typescriptlang-org/static/js/docsearch.js:2:131229  - Unknown word (redrawn)       -- onEmpty,this).onSync("redrawn",this._onRedrawn,this
packages/typescriptlang-org/static/js/docsearch.js:2:131246  - Unknown word (Redrawn)       -- onSync("redrawn",this._onRedrawn,this).onAsync("datasetRendere
packages/typescriptlang-org/static/js/docsearch.js:2:131438  - Unknown word (Blurred)       -- onSync("blurred",this._onBlurred,this).onSync("enterKeyed
packages/typescriptlang-org/static/js/docsearch.js:2:131465  - Unknown word (Keyed)         -- onBlurred,this).onSync("enterKeyed",this._onEnterKeyed
packages/typescriptlang-org/static/js/docsearch.js:2:132630  - Unknown word (datum)         -- ggestionClicked(type,$el){var datum;var context={selectionMethod
packages/typescriptlang-org/static/js/docsearch.js:2:132700  - Unknown word (Datum)         -- datum=this.dropdown.getDatumForSuggestion($el)){this
packages/typescriptlang-org/static/js/docsearch.js:2:139968  - Unknown word (owns)          -- aria-expanded"),"aria-owns":$input.attr("aria-owns
packages/typescriptlang-org/static/js/docsearch.js:2:16164   - Unknown word (Zepto)       -- function(window){var Zepto=function(){var undefined
packages/typescriptlang-org/static/js/docsearch.js:2:16531   - Unknown word (Expander)    -- /?>(?:<\/\1>|)$/,tagExpanderRE=/<(?!area|br|col|embed
packages/typescriptlang-org/static/js/docsearch.js:2:166744  - Unknown word (departments)   -- options.allTitle||"All departments";suggestions.push(_
packages/typescriptlang-org/static/js/docsearch.js:2:16745   - Unknown word (adjacency)   -- ,"height","offset"],adjacencyOperators=["after","prepend
packages/typescriptlang-org/static/js/docsearch.js:2:17129   - Unknown word (zepto)       -- class2type.toString,zepto={},camelize,uniq,tempParent
packages/typescriptlang-org/static/js/docsearch.js:2:1739    - Unknown word (trident)    -- userAgent}if(/(msie|trident)/i.test(agentString
packages/typescriptlang-org/static/js/docsearch.js:2:23339   - Unknown word (klass)       -- className(node,value){var klass=node.className||"",svg
packages/typescriptlang-org/static/js/docsearch.js:2:3184    - Unknown word (clazz)      -- className:function(prefix,clazz,skipDot){return(skipDot
packages/typescriptlang-org/static/js/docsearch.js:2:3242    - Unknown word (Highlighted) -- prefix+clazz},escapeHighlightedString:function(str,highlightP
packages/typescriptlang-org/static/js/docsearch.js:2:39483   - Unknown word (delegator)   -- events,fn,data,selector,delegator,capture){var id=zid
packages/typescriptlang-org/static/js/docsearch.js:2:41340   - Unknown word (unbind)      -- data,callback)};$.fn.unbind=function(event,callback
packages/typescriptlang-org/static/js/docsearch.js:2:43674   - Unknown word (Fired)       -- currentTarget:match,liveFired:element});return(autoRemove
packages/typescriptlang-org/static/js/docsearch.js:2:47362   - Unknown word (orig)        -- function(methodName){var origFn=$.fn[methodName];
packages/typescriptlang-org/static/js/docsearch.js:2:52585   - Unknown word (Callbac)     -- algoliaOptions,_ref$queryDataCallbac=_ref.queryDataCallback
packages/typescriptlang-org/static/js/docsearch.js:2:53353   - Unknown word (collumns)    -- layout===undefined?"collumns":_ref$layout;_classCallCheck
packages/typescriptlang-org/static/js/docsearch.js:2:55471   - Unknown word (Shown)       -- utocomplete:shown",this.handleShown.bind(null,this.input
packages/typescriptlang-org/static/js/docsearch.js:2:56079   - Unknown word (Hits)        -- callback(DocSearch.formatHits(hits))})}}},{key:"handleSelec
packages/typescriptlang-org/static/js/docsearch.js:2:59818   - Unknown word (Subcategory) -- content");var isTextOrSubcategoryNonEmpty=subcategory
packages/typescriptlang-org/static/js/docsearch.js:2:61570   - Unknown word (Quot)        -- rIsWhitespace=/\S/,rQuot=/\"/g,rNewline=/\n/g
packages/typescriptlang-org/static/js/docsearch.js:2:64391   - Unknown word (Illegal)     -- wedInSuper)){throw new Error("Illegal content in < super tag
packages/typescriptlang-org/static/js/docsearch.js:2:64717   - Unknown word (Closer)      -- token.n!=opener.n&&!isCloser(token.n,opener.n,customTags
packages/typescriptlang-org/static/js/docsearch.js:2:65467   - Unknown word (Partials)    -- "}function stringifyPartials(codeObj){var partials
packages/typescriptlang-org/static/js/docsearch.js:2:65489   - Unknown word (partials)    -- tringifyPartials(codeObj){var partials=[];for(var key in codeObj
packages/typescriptlang-org/static/js/docsearch.js:2:65700   - Unknown word (subs)        -- partials.join(",")+"}, subs: "+stringifySubstitutions
packages/typescriptlang-org/static/js/docsearch.js:2:6895    - Unknown word (goldenrod)   -- lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid
packages/typescriptlang-org/static/js/docsearch.js:2:6920    - Unknown word (darkorchid)  -- goldenrod","dodgerblue","darkorchid","crimson"];function
packages/typescriptlang-org/static/js/docsearch.js:2:6933    - Unknown word (crimson)     -- dodgerblue","darkorchid","crimson"];function useColors
packages/typescriptlang-org/static/js/docsearch.js:2:70718   - Unknown word (Subs)        -- partial.partials,this.stackSubs,this.stackPartials,partials
packages/typescriptlang-org/static/js/docsearch.js:2:7264    - Unknown word (firebug)     -- console&&(window.console.firebug||window.console.exception
packages/typescriptlang-org/static/js/docsearch.js:2:7416    - Unknown word (firefox)     -- toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp
packages/typescriptlang-org/static/js/docsearch.js:2:75041   - Unknown word (Algoliasearch) -- require__(30);var createAlgoliasearch=__webpack_require__
packages/typescriptlang-org/static/js/docsearch.js:2:75638   - Unknown word (algoliasearch) -- webpack_require__(8)("algoliasearch");var clone=__webpack
packages/typescriptlang-org/static/js/docsearch.js:2:7585    - Unknown word (formatters)  -- applewebkit\/(\d+)/)}exports.formatters.j=function(v){try{return
packages/typescriptlang-org/static/js/docsearch.js:2:76173   - Unknown word (timeouts)      -- opts=opts||{};this._timeouts=opts.timeouts||{connect
packages/typescriptlang-org/static/js/docsearch.js:2:76700   - Unknown word (algolianet)    -- pplicationID+"-"+hostNumber+".algolianet.com"});var mainSuffix
packages/typescriptlang-org/static/js/docsearch.js:2:7863    - Unknown word (humanize)    -- c ":" ")+"+"+exports.humanize(this.diff);if(!useColors
packages/typescriptlang-org/static/js/docsearch.js:2:80240   - Unknown word (Timeouts)      -- timeouts=client._getTimeoutsForRequest(initialOpts
packages/typescriptlang-org/static/js/docsearch.js:2:81906   - Unknown word (unrecoverable) -- retryRequest()}requestDebug("unrecoverable error");var unrecoverableErro
packages/typescriptlang-org/static/js/docsearch.js:2:82948   - Unknown word (retrying)      -- retryRequest(){requestDebug("retrying request");client._incrementHo
packages/typescriptlang-org/static/js/docsearch.js:2:83873   - Unknown word (nook)          -- setTimeout)},function nookCb(err){exitPromise(function
packages/typescriptlang-org/static/js/docsearch.js:2:88038   - Unknown word (facets)        -- codeURIComponent(indexName)+"/facets/"+encodeURIComponent
packages/typescriptlang-org/static/js/docsearch.js:2:89710   - Unknown word (Multiplier)    -- write:0};newData.timeoutMultiplier=1;newData.shuffleResult
packages/typescriptlang-org/static/js/docsearch.js:2:97121   - Unknown word (warned)        -- deprecate(fn,message){var warned=false;function deprecated
packages/typescriptlang-org/static/js/docsearch.js:2:98376   - Unknown word (Dont)          -- propertyIsEnumerable;var hasDontEnumBug=!isEnumerable
packages/typescriptlang-org/static/js/docsearch.js:2:99427   - Unknown word (Buggy)         -- qualsConstructorPrototypeIfNotBuggy=function(o){if(typeof
packages/typescriptlang-org/static/js/docsearch.js:2:99614   - Unknown word (Shim)          -- return false}};var keysShim=function keys(object
packages/typescriptlang-org/static/js/vs.loader.js:10:141    - Unknown word (PROBED)     -- this.PERFORMANCE_NOW_PROBED||(this.PERFORMANCE_NOW
packages/typescriptlang-org/static/js/vs.loader.js:11:974    - Unknown word (MUST)       -- configuration, 'path' MUST be set"));n.phase="configurat
packages/typescriptlang-org/static/js/vs.loader.js:14:624    - Unknown word (Necessary)  -- prototype._addUrlArgsIfNecessaryToUrl=function(e){return
packages/typescriptlang-org/static/js/vs.loader.js:25:743    - Unknown word (Annonymous) -- new Map,this._currentAnnonymousDefineCall=null,this
packages/typescriptlang-org/static/js/vs.loader.js:26:608    - Unknown word (correlate)  -- new Error("Could not correlate define call site for
packages/typescriptlang-org/static/js/vs.loader.js:33:205    - Unknown word (cyclic)     -- getStrModuleId(e.id)+"'. The cyclic path follows:");var
packages/typescriptlang-org/static/js/vs.loader.js:35:619    - Unknown word (Unrecognized) -- ]))throw new Error("Unrecognized require call");r.defineModule
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:11:21     - Unknown word (highlighters) -- const {settings, highlighters} = await setupForFile
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:15:10     - Unknown word (visitor)      -- + const visitor = (node) => {
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:17:49     - Unknown word (focusable)    -- twoslash code blocks focusable; not needed in modern
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:17:9      - Unknown word (Hack)         -- + // Hack to make shiki twoslash
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:8:40      - Unknown word (remark)     -- const { setupForFile, remarkVisitor }  = require
patches/gatsby-remark-shiki-twoslash@3.0.38.patch:8:46      - Unknown word (Visitor)    -- setupForFile, remarkVisitor }  = require("remark
patches/react-intl@3.12.1.patch:12:44     - Unknown word (React)      -- IntlProvider extends React.PureComponent<OptionalIntlCon
patches/react-intl@3.12.1.patch:12:50     - Unknown word (Pure)       -- IntlProvider extends React.PureComponent<OptionalIntlConfig
patches/react-intl@3.12.1.patch:15:126    - Unknown word (Formats)    -- defaultLocale" | "defaultFormats" | "onError">;
patches/react-intl@3.12.1.patch:8:50      - Unknown word (Formatters) -- declare interface IntlFormatters {
patches/react-intl@3.12.1.patch:9:100     - Unknown word (string)     -- FormatDisplayNameOptions): string | undefined;
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:10:9      - Unknown word (Decoder)    -- +aa.TextDecoder = aa.TextDecoder ||
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:11:89     - Unknown word (subarray)   -- b.length)0<l&&(p(a,k.subarray(0,l)),k=new Uint8Array
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:12:310    - Unknown word (element)    -- y=Symbol.for("react.element"),ba=Symbol.for("react
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:12:439    - Unknown word (memo)       -- da=Symbol.for("react.memo"),A=Symbol.for("react
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:12:466    - Unknown word (lazy)       -- A=Symbol.for("react.lazy"),B=Symbol.for("react
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:13:201    - Unknown word (Empty)      -- sanitizeURL=g;this.removeEmptyString=h}var D="children
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:13:275    - Unknown word (Checked)    -- defaultValue defaultChecked innerHTML suppressContentEdit
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:13:33     - Unknown word (accepts)    -- a,b,d,c,f,g,h){this.acceptsBooleans=2===b||3===b
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:13:332    - Unknown word (Hydration)  -- ontentEditableWarning suppressHydrationWarning style".split
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:13:349    - Unknown word (style)      -- suppressHydrationWarning style".split(" ");D.push(
patches/react-server-dom-webpack@0.0.0-experimental-c8b778b7f-20220825.patch:9:9       - Unknown word (Encoder)    -- +aa.TextEncoder = aa.TextEncoder ||
watcher.js:116:16    - Unknown word (wanna)      -- // I don't wanna handle multiple processes
watcher.js:154:11    - Unknown word (Talking)    -- // log("Talking to watchman version
watcher.js:176:38    - Unknown word (aiff)       -- playCommand(".vscode/done.aiff", "0.05"))
watcher.js:194:40    - Unknown word (afplay)     -- (path, volume) => `afplay \"${path}\" -v ${volume
watcher.js:63:26     - Unknown word (initiating) -- console.error("Error initiating watch:", error)
