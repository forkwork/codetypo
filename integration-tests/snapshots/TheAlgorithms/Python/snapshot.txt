
Repository: TheAlgorithms/Python
Url: "https://github.com/TheAlgorithms/Python.git"
Args: ["**/*.{md,py}"]
Lines:
 Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
 exit code: 1
-------------------------------------------
-------------------------------------------
CONTRIBUTING.md:102:3     - Unknown word (Original)       -- - Original code submission require
CONTRIBUTING.md:108:69    - Unknown word (improved)       -- may be requested to be improved:
CONTRIBUTING.md:111:15    - Unknown word (increased)      -- x = x + 2	# increased by 2
CONTRIBUTING.md:114:15    - Unknown word (trivial)        -- This is too trivial. Comments are expected
CONTRIBUTING.md:114:152   - Unknown word (consistent)     -- as long as you are consistent within the same piece
CONTRIBUTING.md:114:37    - Unknown word (expected)       -- trivial. Comments are expected to be explanatory. For
CONTRIBUTING.md:114:52    - Unknown word (explanatory)    -- Comments are expected to be explanatory. For comments, you can
CONTRIBUTING.md:116:138   - Unknown word (good)           -- The following is a good example:
CONTRIBUTING.md:116:38    - Unknown word (inside)         -- you to put docstrings inside your functions but please
CONTRIBUTING.md:116:75    - Unknown word (attention)      -- functions but please pay attention to the indentation of
CONTRIBUTING.md:116:92    - Unknown word (indentation)    -- pay attention to the indentation of docstrings. The following
CONTRIBUTING.md:11:118    - Unknown word (referenced)   -- This repository is referenced and used by learners
CONTRIBUTING.md:11:141    - Unknown word (learners)     -- referenced and used by learners from all over the globe
CONTRIBUTING.md:11:195    - Unknown word (contributors) -- By being one of our contributors, you agree and confirm
CONTRIBUTING.md:11:213    - Unknown word (agree)        -- our contributors, you agree and confirm that:
CONTRIBUTING.md:11:76     - Unknown word (structures)   -- algorithms and data structures for others! This repository
CONTRIBUTING.md:11:8      - Unknown word (delighted)    -- We are delighted that you are considering
CONTRIBUTING.md:126:94    - Unknown word (illustrate)     -- library/doctest.html)) to illustrate and verify your work
CONTRIBUTING.md:13:26     - Unknown word (plagiarism)   -- You did your work - no plagiarism allowed.
CONTRIBUTING.md:142:33    - Unknown word (pytest)         -- doctests will be run by pytest as part of our automated
CONTRIBUTING.md:145:14    - Unknown word (doctest)        -- python3 -m doctest -v my_submission.py
CONTRIBUTING.md:148:64    - Unknown word (encouraged)     -- function is __not__ encouraged:
CONTRIBUTING.md:14:38     - Unknown word (merged)       -- plagiarized work will not be merged.
CONTRIBUTING.md:14:9      - Unknown word (plagiarized)  -- - Any plagiarized work will not be merged
CONTRIBUTING.md:152:13    - Unknown word (worse)          -- # Or even worse...
CONTRIBUTING.md:156:144   - Unknown word (strip)          -- user input by adding `.strip()` as in:
CONTRIBUTING.md:156:25    - Unknown word (uses)           -- However, if your code uses `input()` then we encourage
CONTRIBUTING.md:156:65    - Unknown word (gracefully)     -- we encourage you to gracefully deal with leading and
CONTRIBUTING.md:156:76    - Unknown word (deal)           -- encourage you to gracefully deal with leading and trailing
CONTRIBUTING.md:156:98    - Unknown word (trailing)       -- deal with leading and trailing whitespace in user input
CONTRIBUTING.md:162:171   - Unknown word (mypy)           -- automated testing will run [mypy](http://mypy-lang.org
CONTRIBUTING.md:169:3     - Unknown word (Instructions)   -- Instructions on how to install mypy
CONTRIBUTING.md:169:53    - Unknown word (here)           -- install mypy can be found [here](https://github.com
CONTRIBUTING.md:16:23     - Unknown word (fulfills)     -- Your submitted work fulfills or mostly fulfills our
CONTRIBUTING.md:16:35     - Unknown word (mostly)       -- submitted work fulfills or mostly fulfills our styles
CONTRIBUTING.md:16:8      - Unknown word (submitted)    -- - Your submitted work fulfills or mostly
CONTRIBUTING.md:171:11    - Unknown word (comprehensions) -- - [__List comprehensions and generators__](https
CONTRIBUTING.md:171:124   - Unknown word (preferred)      -- comprehensions) are preferred over the use of `lambda
CONTRIBUTING.md:171:194   - Unknown word (important)      -- filter`, `reduce` but the important thing is to demonstrate
CONTRIBUTING.md:171:216   - Unknown word (demonstrate)    -- important thing is to demonstrate the power of Python
CONTRIBUTING.md:171:281   - Unknown word (maintain)       -- is easy to read and maintain.
CONTRIBUTING.md:171:30    - Unknown word (generators)     -- List comprehensions and generators__](https://docs.python
CONTRIBUTING.md:173:28    - Unknown word (libraries)      -- Avoid importing external libraries for basic algorithms
CONTRIBUTING.md:173:3     - Unknown word (Avoid)          -- - Avoid importing external libraries
CONTRIBUTING.md:173:89    - Unknown word (complicated)    -- those libraries for complicated algorithms.
CONTRIBUTING.md:173:9     - Unknown word (importing)      -- - Avoid importing external libraries for
CONTRIBUTING.md:174:29    - Unknown word (module)         -- you need a third-party module that is not in the file
CONTRIBUTING.md:176:29    - Unknown word (Submissions)    -- Other Requirements for Submissions
CONTRIBUTING.md:177:220   - Unknown word (Euler)          -- contributing to our Project Euler library.
CONTRIBUTING.md:177:226   - Unknown word (library)        -- to our Project Euler library.
CONTRIBUTING.md:177:46    - Unknown word (euler)          -- code in the `project_euler/` directory, please
CONTRIBUTING.md:177:97    - Unknown word (Guideline)      -- read [the dedicated Guideline](https://github.com
CONTRIBUTING.md:178:62    - Unknown word (Notebooks)      -- should be `.py`. Jupyter Notebooks should be submitted
CONTRIBUTING.md:179:16    - Unknown word (snake)          -- - Strictly use snake_case (underscore_separated
CONTRIBUTING.md:179:3     - Unknown word (Strictly)       -- - Strictly use snake_case (underscore
CONTRIBUTING.md:179:39    - Unknown word (separated)      -- snake_case (underscore_separated) in your file_name,
CONTRIBUTING.md:182:15    - Unknown word (modified)       -- - If you have modified/added code work, make
CONTRIBUTING.md:182:60    - Unknown word (compiles)       -- make sure the code compiles before submitting.
CONTRIBUTING.md:183:74    - Unknown word (concise)        -- ensure your language is concise and contains no grammar
CONTRIBUTING.md:183:86    - Unknown word (contains)       -- language is concise and contains no grammar errors.
CONTRIBUTING.md:184:66    - Unknown word (periodically)   -- md file which will be periodically autogenerated by our
CONTRIBUTING.md:185:121   - Unknown word (Optional)       -- Algorithms-Explanation) (Optional but recommended).
CONTRIBUTING.md:185:134   - Unknown word (recommended)    -- Explanation) (Optional but recommended).
CONTRIBUTING.md:188:3     - Unknown word (Most)           -- - Most importantly,
CONTRIBUTING.md:18:144    - Unknown word (designs)         -- structure or algorithm designs with different complexity
CONTRIBUTING.md:18:185    - Unknown word (identical)       -- different complexity, but __identical implementation__ of
CONTRIBUTING.md:18:218    - Unknown word (existing)        -- implementation__ of an existing implementation is not
CONTRIBUTING.md:18:27     - Unknown word (welcome)        -- implementation__ is welcome! For example, new solutions
CONTRIBUTING.md:18:295    - Unknown word (already)         -- whether the solution is already implemented or not before
CONTRIBUTING.md:18:322    - Unknown word (before)          -- already implemented or not before submitting your pull
CONTRIBUTING.md:18:40     - Unknown word (example)        -- lementation__ is welcome! For example, new solutions for a
CONTRIBUTING.md:18:7      - Unknown word (implementation) -- __New implementation__ is welcome! For example
CONTRIBUTING.md:18:88     - Unknown word (representations) -- a problem, different representations for a graph data structure
CONTRIBUTING.md:191:5     - Unknown word (Happy)          -- - Happy coding!
CONTRIBUTING.md:193:1     - Unknown word (Writer)         -- Writer [@poyea](https://github
CONTRIBUTING.md:193:10    - Unknown word (poyea)          -- Writer [@poyea](https://github.com
CONTRIBUTING.md:1:16      - Unknown word (guidelines)   -- # Contributing guidelines
CONTRIBUTING.md:1:3       - Unknown word (Contributing) -- # Contributing guidelines
CONTRIBUTING.md:20:3      - Unknown word (Improving)       -- __Improving comments__ and __writing
CONTRIBUTING.md:20:38     - Unknown word (proper)          -- comments__ and __writing proper tests__ are also highly
CONTRIBUTING.md:20:57     - Unknown word (also)            -- writing proper tests__ are also highly welcome.
CONTRIBUTING.md:20:62     - Unknown word (highly)          -- proper tests__ are also highly welcome.
CONTRIBUTING.md:22:5      - Unknown word (Contribution)    -- ### Contribution
CONTRIBUTING.md:24:19     - Unknown word (contribution)    -- We appreciate any contribution, from fixing a grammar
CONTRIBUTING.md:24:38     - Unknown word (fixing)          -- any contribution, from fixing a grammar mistake in
CONTRIBUTING.md:24:4      - Unknown word (appreciate)      -- We appreciate any contribution, from
CONTRIBUTING.md:24:47     - Unknown word (grammar)         -- contribution, from fixing a grammar mistake in a comment
CONTRIBUTING.md:24:55     - Unknown word (mistake)         -- from fixing a grammar mistake in a comment to implementing
CONTRIBUTING.md:26:145    - Unknown word (mental)          -- actions) to save time and mental energy.  After you have
CONTRIBUTING.md:26:280    - Unknown word (submission)      -- at the bottom of your submission page. If those tests
CONTRIBUTING.md:26:535    - Unknown word (help)            -- community member will try to help.
CONTRIBUTING.md:28:6      - Unknown word (Issues)          -- #### Issues
CONTRIBUTING.md:30:12     - Unknown word (interested)      -- If you are interested in resolving an [open
CONTRIBUTING.md:30:171    - Unknown word (issues)          -- __We do not assign issues in this repo__ so please
CONTRIBUTING.md:30:26     - Unknown word (resolving)       -- you are interested in resolving an [open issue](https
CONTRIBUTING.md:32:31     - Unknown word (contribute)      -- create an issue to contribute an algorithm. Please
CONTRIBUTING.md:34:16     - Unknown word (keep)            -- Please help us keep our issue list small
CONTRIBUTING.md:34:53     - Unknown word (Fixes)           -- list small by adding `Fixes #{$ISSUE_NUMBER}` to
CONTRIBUTING.md:35:35     - Unknown word (fixes)           -- if your pull request fixes issue #10, then please
CONTRIBUTING.md:3:11      - Unknown word (contributing) -- ## Before contributing
CONTRIBUTING.md:3:4       - Unknown word (Before)       -- ## Before contributing
CONTRIBUTING.md:43:43     - Unknown word (classes)         -- or more functions (or classes) that:
CONTRIBUTING.md:44:3      - Unknown word (take)            -- * take one or more inputs,
CONTRIBUTING.md:45:16     - Unknown word (internal)        -- * perform some internal calculations or data
CONTRIBUTING.md:45:3      - Unknown word (perform)         -- * perform some internal calculations
CONTRIBUTING.md:45:46     - Unknown word (manipulations)   -- calculations or data manipulations,
CONTRIBUTING.md:47:21     - Unknown word (effects)         -- * have minimal side effects (Ex. `print()`, `plot
CONTRIBUTING.md:47:35     - Unknown word (print)           -- minimal side effects (Ex. `print()`, `plot()`, `read
CONTRIBUTING.md:47:8      - Unknown word (minimal)         -- * have minimal side effects (Ex. `print
CONTRIBUTING.md:49:100    - Unknown word (programs)        -- put them into larger programs.
CONTRIBUTING.md:49:22     - Unknown word (packaged)        -- Algorithms should be packaged in a way that would
CONTRIBUTING.md:49:68     - Unknown word (readers)         -- would make it easy for readers to put them into larger
CONTRIBUTING.md:53:14     - Unknown word (naming)          -- * use Python naming conventions and intuitive
CONTRIBUTING.md:53:21     - Unknown word (conventions)     -- * use Python naming conventions and intuitive variable
CONTRIBUTING.md:53:65     - Unknown word (ease)            -- intuitive variable names to ease comprehension
CONTRIBUTING.md:53:70     - Unknown word (comprehension)   -- variable names to ease comprehension
CONTRIBUTING.md:54:6      - Unknown word (flexible)        -- * be flexible to take different input
CONTRIBUTING.md:55:20     - Unknown word (hints)           -- * have Python type hints for their input parameters
CONTRIBUTING.md:56:16     - Unknown word (exceptions)      -- * raise Python exceptions (`ValueError`, etc.
CONTRIBUTING.md:56:3      - Unknown word (raise)           -- * raise Python exceptions (
CONTRIBUTING.md:56:51     - Unknown word (erroneous)       -- ValueError`, etc.) on erroneous input values
CONTRIBUTING.md:57:30     - Unknown word (explanations)    -- docstrings with clear explanations and/or URLs to source
CONTRIBUTING.md:57:8      - Unknown word (docstrings)      -- * have docstrings with clear explanations
CONTRIBUTING.md:58:11     - Unknown word (doctests)        -- * contain doctests that test both valid
CONTRIBUTING.md:58:30     - Unknown word (both)            -- contain doctests that test both valid and erroneous
CONTRIBUTING.md:59:57     - Unknown word (plotting)        -- instead of printing or plotting them
CONTRIBUTING.md:5:1       - Unknown word (Welcome)      -- Welcome to [TheAlgorithms/Python
CONTRIBUTING.md:5:185     - Unknown word (doubts)       -- guidelines__. If you have any doubts about the contributing
CONTRIBUTING.md:5:215     - Unknown word (guide)        -- about the contributing guide, please feel free to
CONTRIBUTING.md:5:229     - Unknown word (feel)         -- contributing guide, please feel free to [state it clearly
CONTRIBUTING.md:5:252     - Unknown word (clearly)      -- feel free to [state it clearly in an issue](https:
CONTRIBUTING.md:5:350     - Unknown word (Gitter)       -- ask the community on [Gitter](https://gitter.im/TheAlgorit
CONTRIBUTING.md:5:84      - Unknown word (submitting)   -- TheAlgorithms/Python)! Before submitting your pull requests,
CONTRIBUTING.md:61:156    - Unknown word (convert)         -- or manipulations to convert input values into different
CONTRIBUTING.md:61:207    - Unknown word (Those)           -- different output values. Those calculations or manipulations
CONTRIBUTING.md:61:85     - Unknown word (Instead)         -- existing Python packages. Instead, they should perform
CONTRIBUTING.md:66:4      - Unknown word (bash)            -- ```bash
CONTRIBUTING.md:70:176    - Unknown word (manually)        -- even run the plugin manually on all files:
CONTRIBUTING.md:70:91     - Unknown word (found)           -- there are any errors found during the run, fix
CONTRIBUTING.md:70:97     - Unknown word (during)          -- are any errors found during the run, fix them and
CONTRIBUTING.md:78:25     - Unknown word (readable)        -- want your work to be readable by others; therefore
CONTRIBUTING.md:78:59     - Unknown word (encourage)       -- others; therefore, we encourage you to note the following
CONTRIBUTING.md:81:10     - Unknown word (focus)           -- - Please focus hard on the naming of
CONTRIBUTING.md:81:102    - Unknown word (descriptive)     -- your reader by using __descriptive names__ that can help
CONTRIBUTING.md:81:150    - Unknown word (redundant)       -- can help you to remove redundant comments.
CONTRIBUTING.md:81:16     - Unknown word (hard)            -- - Please focus hard on the naming of functions
CONTRIBUTING.md:81:74     - Unknown word (Help)            -- classes, and variables.  Help your reader by using
CONTRIBUTING.md:82:61     - Unknown word (avoid)           -- old school* so please avoid them unless their life
CONTRIBUTING.md:82:72     - Unknown word (unless)          -- so please avoid them unless their life only spans
CONTRIBUTING.md:82:95     - Unknown word (spans)           -- unless their life only spans a few lines.
CONTRIBUTING.md:83:12     - Unknown word (acronyms)       -- - Expand acronyms because `gcd()` is hard
CONTRIBUTING.md:83:5      - Unknown word (Expand)         -- - Expand acronyms because `gcd
CONTRIBUTING.md:83:64     - Unknown word (greatest)       -- hard to understand but `greatest_common_divisor()` is
CONTRIBUTING.md:84:149    - Unknown word (lower)          -- function_names should be lower_case, CONSTANTS in UPPERCASE
CONTRIBUTING.md:84:174    - Unknown word (UPPERCASE)      -- lower_case, CONSTANTS in UPPERCASE, ClassNames should be
CONTRIBUTING.md:84:31     - Unknown word (Naming)         -- Please follow the [Python Naming Conventions](https:
CONTRIBUTING.md:84:38     - Unknown word (Conventions)    -- follow the [Python Naming Conventions](https://pep8.org/#prescripti
CONTRIBUTING.md:86:37     - Unknown word (strings)        -- the use of Python [f-strings](https://realpython
CONTRIBUTING.md:88:155    - Unknown word (requirement)    -- This is not yet a requirement but it does make your
CONTRIBUTING.md:88:226    - Unknown word (aligns)         -- readable and automatically aligns it with much of [PEP
CONTRIBUTING.md:88:322    - Unknown word (formatters)     -- There are other code formatters (autopep8, yapf) but
CONTRIBUTING.md:88:334    - Unknown word (autopep)        -- other code formatters (autopep8, yapf) but the __black
CONTRIBUTING.md:88:344    - Unknown word (yapf)           -- formatters (autopep8, yapf) but the __black__ formatter
CONTRIBUTING.md:88:368    - Unknown word (formatter)      -- yapf) but the __black__ formatter is now hosted by the
CONTRIBUTING.md:95:114    - Unknown word (locally)        -- possible, try this test locally on your Python file
CONTRIBUTING.md:95:47     - Unknown word (ruff)           -- need to pass the test `ruff .` before they will
CONTRIBUTING.md:95:7      - Unknown word (submissions)    -- - All submissions will need to pass the
CONTRIBUTING.md:9:5       - Unknown word (Contributor)  -- ### Contributor
CodeTypo: Files checked: 1369, Issues found: 38255 in 1140 files with 4 errors.
DIRECTORY.md:100:6     - Unknown word (Elgamal)        -- * [Elgamal Key Generator](ciphers
DIRECTORY.md:1051:13   - Unknown word (Poker)               -- * [Test Poker Hand](project_euler
DIRECTORY.md:1051:19   - Unknown word (Hand)                -- * [Test Poker Hand](project_euler/problem
DIRECTORY.md:105:12    - Unknown word (Keyword)        -- * [Mixed Keyword Cypher](ciphers/mixed
DIRECTORY.md:105:6     - Unknown word (Mixed)          -- * [Mixed Keyword Cypher](ciphers
DIRECTORY.md:106:6     - Unknown word (Mono)           -- * [Mono Alphabetic Ciphers]
DIRECTORY.md:108:6     - Unknown word (Onepad)         -- * [Onepad Cipher](ciphers/onepad
DIRECTORY.md:109:6     - Unknown word (Permutation)    -- * [Permutation Cipher](ciphers/permutation
DIRECTORY.md:10:10     - Unknown word (Subsequences) -- * [All Subsequences](backtracking/all_subsequence
DIRECTORY.md:112:6     - Unknown word (Porta)          -- * [Porta Cipher](ciphers/porta
DIRECTORY.md:114:11    - Unknown word (Fence)          -- * [Rail Fence Cipher](ciphers/rail
DIRECTORY.md:114:6     - Unknown word (Rail)           -- * [Rail Fence Cipher](ciphers
DIRECTORY.md:117:10    - Unknown word (Factorization)  -- * [Rsa Factorization](ciphers/rsa_factorization
DIRECTORY.md:1202:4    - Unknown word (Quantum)             -- ## Quantum
DIRECTORY.md:1203:8    - Unknown word (Fourier)             -- * [Q Fourier Transform](quantum/q
DIRECTORY.md:1205:4    - Unknown word (Scheduling)          -- ## Scheduling
DIRECTORY.md:1206:12   - Unknown word (Come)                -- * [First Come First Served](scheduling
DIRECTORY.md:1206:23   - Unknown word (Served)              -- * [First Come First Served](scheduling/first_come
DIRECTORY.md:1208:24   - Unknown word (Deadline)            -- [Job Sequence With Deadline](scheduling/job_sequence
DIRECTORY.md:1209:10   - Unknown word (Sequencing)          -- * [Job Sequencing With Deadline](scheduling
DIRECTORY.md:120:15    - Unknown word (Shift)          -- * [Shuffled Shift Cipher](ciphers/shuffled
DIRECTORY.md:1211:10   - Unknown word (Preemptive)          -- * [Non Preemptive Shortest Job First]
DIRECTORY.md:1212:12   - Unknown word (Robin)               -- * [Round Robin](scheduling/round_robin
DIRECTORY.md:1212:6    - Unknown word (Round)               -- * [Round Robin](scheduling/round
DIRECTORY.md:121:6     - Unknown word (Simple)         -- * [Simple Keyword Cypher](ciphers
DIRECTORY.md:1224:6    - Unknown word (Jump)                -- * [Jump Search](searches/jump
DIRECTORY.md:1226:16   - Unknown word (Medians)             -- * [Median Of Medians](searches/median_of
DIRECTORY.md:1228:6    - Unknown word (Sentinel)            -- * [Sentinel Linear Search](searches
DIRECTORY.md:122:13    - Unknown word (Substitution)   -- * [Simple Substitution Cipher](ciphers/simple
DIRECTORY.md:1230:16   - Unknown word (Annealing)           -- * [Simulated Annealing](searches/simulated
DIRECTORY.md:1230:6    - Unknown word (Simulated)           -- * [Simulated Annealing](searches
DIRECTORY.md:1231:6    - Unknown word (Tabu)               -- * [Tabu Search](searches/tabu
DIRECTORY.md:1232:6    - Unknown word (Ternary)            -- * [Ternary Search](searches/ternary
DIRECTORY.md:1234:4    - Unknown word (Sorts)              -- ## Sorts
DIRECTORY.md:1235:6    - Unknown word (Bead)               -- * [Bead Sort](sorts/bead_sort
DIRECTORY.md:1236:13   - Unknown word (Insertion)          -- * [Binary Insertion Sort](sorts/binary_insertion
DIRECTORY.md:1237:6    - Unknown word (Bitonic)            -- * [Bitonic Sort](sorts/bitonic
DIRECTORY.md:1238:6    - Unknown word (Bogo)               -- * [Bogo Sort](sorts/bogo_sort
DIRECTORY.md:123:6     - Unknown word (Transposition)  -- * [Transposition Cipher](ciphers/transposition
DIRECTORY.md:1241:6    - Unknown word (Circle)             -- * [Circle Sort](sorts/circle_sort
DIRECTORY.md:1242:15   - Unknown word (Shaker)             -- * [Cocktail Shaker Sort](sorts/cocktail
DIRECTORY.md:1242:6    - Unknown word (Cocktail)           -- * [Cocktail Shaker Sort](sorts/cocktail
DIRECTORY.md:1243:6    - Unknown word (Comb)               -- * [Comb Sort](sorts/comb_sort
DIRECTORY.md:1244:6    - Unknown word (Counting)           -- * [Counting Sort](sorts/counting
DIRECTORY.md:1247:21   - Unknown word (Flag)               -- * [Dutch National Flag Sort](sorts/dutch_national
DIRECTORY.md:1250:6    - Unknown word (Gnome)              -- * [Gnome Sort](sorts/gnome_sort
DIRECTORY.md:1253:6    - Unknown word (Intro)              -- * [Intro Sort](sorts/intro_sort
DIRECTORY.md:125:6     - Unknown word (Trifid)         -- * [Trifid Cipher](ciphers/trifid
DIRECTORY.md:1261:36   - Unknown word (Threaded)           -- Transposition Single Threaded](sorts/odd_even_transposition
DIRECTORY.md:1262:6    - Unknown word (Pancake)            -- * [Pancake Sort](sorts/pancake
DIRECTORY.md:1263:6    - Unknown word (Patience)           -- * [Patience Sort](sorts/patience
DIRECTORY.md:1264:6    - Unknown word (Pigeon)             -- * [Pigeon Sort](sorts/pigeon_sort
DIRECTORY.md:1265:6    - Unknown word (Pigeonhole)         -- * [Pigeonhole Sort](sorts/pigeonhole
DIRECTORY.md:126:6     - Unknown word (Vernam)         -- * [Vernam Cipher](ciphers/vernam
DIRECTORY.md:1274:6    - Unknown word (Shrink)             -- * [Shrink Shell Sort](sorts/shrink
DIRECTORY.md:1275:6    - Unknown word (Slowsort)           -- * [Slowsort](sorts/slowsort.py)
DIRECTORY.md:1276:6    - Unknown word (Stooge)             -- * [Stooge Sort](sorts/stooge_sort
DIRECTORY.md:1277:6    - Unknown word (Strand)             -- * [Strand Sort](sorts/strand_sort
DIRECTORY.md:127:6     - Unknown word (Vigenere)       -- * [Vigenere Cipher](ciphers/vigenere
DIRECTORY.md:1281:6    - Unknown word (Unknown)            -- * [Unknown Sort](sorts/unknown
DIRECTORY.md:1282:6    - Unknown word (Wiggle)             -- * [Wiggle Sort](sorts/wiggle_sort
DIRECTORY.md:1284:4    - Unknown word (Strings)            -- ## Strings
DIRECTORY.md:1285:10   - Unknown word (Corasick)           -- * [Aho Corasick](strings/aho_corasick
DIRECTORY.md:1287:6    - Unknown word (Anagrams)           -- * [Anagrams](strings/anagrams.py
DIRECTORY.md:1290:6    - Unknown word (Bitap)              -- * [Bitap String Match](strings
DIRECTORY.md:1291:12   - Unknown word (Moore)              -- * [Boyer Moore Search](strings/boyer
DIRECTORY.md:1291:6    - Unknown word (Boyer)              -- * [Boyer Moore Search](strings
DIRECTORY.md:1292:20   - Unknown word (Snake)              -- * [Camel Case To Snake Case](strings/camel
DIRECTORY.md:1292:6    - Unknown word (Camel)              -- * [Camel Case To Snake Case]
DIRECTORY.md:1293:20   - Unknown word (Rearranged)         -- * [Can String Be Rearranged As Palindrome](strings
DIRECTORY.md:1294:6    - Unknown word (Capitalize)         -- * [Capitalize](strings/capitalize
DIRECTORY.md:1296:12   - Unknown word (Vowels)             -- * [Count Vowels](strings/count_vowels
DIRECTORY.md:1297:13   - Unknown word (Card)               -- * [Credit Card Validator](strings/credit
DIRECTORY.md:1298:6    - Unknown word (Damerau)            -- * [Damerau Levenshtein Distance
DIRECTORY.md:1299:24   - Unknown word (Programmatically)   -- [Detecting English Programmatically](strings/detecting_english
DIRECTORY.md:1299:6    - Unknown word (Detecting)          -- * [Detecting English Programmatically
DIRECTORY.md:1302:16   - Unknown word (Finder)             -- * [Frequency Finder](strings/frequency_finder
DIRECTORY.md:1305:25   - Unknown word (Chars)              -- [Is Contains Unique Chars](strings/is_contains
DIRECTORY.md:1305:9    - Unknown word (Contains)           -- * [Is Contains Unique Chars](strings
DIRECTORY.md:1306:9    - Unknown word (Isogram)            -- * [Is Isogram](strings/is_isogram
DIRECTORY.md:1307:9    - Unknown word (Pangram)            -- * [Is Pangram](strings/is_pangram
DIRECTORY.md:1309:9    - Unknown word (Spain)              -- * [Is Spain National Id](strings
DIRECTORY.md:1310:9    - Unknown word (Srilankan)          -- * [Is Srilankan Phone Number](strings
DIRECTORY.md:1312:11   - Unknown word (Winkler)            -- * [Jaro Winkler](strings/jaro_winkler
DIRECTORY.md:1312:6    - Unknown word (Jaro)               -- * [Jaro Winkler](strings/jaro
DIRECTORY.md:1314:19   - Unknown word (Pratt)              -- * [Knuth Morris Pratt](strings/knuth_morris
DIRECTORY.md:1316:6    - Unknown word (Lower)              -- * [Lower](strings/lower.py)
DIRECTORY.md:1317:6    - Unknown word (Manacher)           -- * [Manacher](strings/manacher.py
DIRECTORY.md:1319:6    - Unknown word (Naive)              -- * [Naive String Search](strings
DIRECTORY.md:1320:6    - Unknown word (Ngram)              -- * [Ngram](strings/ngram.py)
DIRECTORY.md:1322:10   - Unknown word (Latin)              -- * [Pig Latin](strings/pig_latin.py
DIRECTORY.md:1325:13   - Unknown word (Duplicate)          -- * [Remove Duplicate](strings/remove_duplicate
DIRECTORY.md:1326:14   - Unknown word (Letters)           -- * [Reverse Letters](strings/reverse_letters
DIRECTORY.md:1331:6    - Unknown word (Strip)             -- * [Strip](strings/strip.py)
DIRECTORY.md:1332:11   - Unknown word (Justification)     -- * [Text Justification](strings/text_justification
DIRECTORY.md:1335:6    - Unknown word (Upper)             -- * [Upper](strings/upper.py)
DIRECTORY.md:1336:6    - Unknown word (Wave)              -- * [Wave String](strings/wave
DIRECTORY.md:1338:11   - Unknown word (Occurrence)        -- * [Word Occurrence](strings/word_occurrence
DIRECTORY.md:1343:10   - Unknown word (Emission)          -- * [Co2 Emission](web_programming/co
DIRECTORY.md:1344:12   - Unknown word (Stats)             -- * [Covid Stats Via Xpath](web_programming
DIRECTORY.md:1344:6    - Unknown word (Covid)             -- * [Covid Stats Via Xpath](web
DIRECTORY.md:1345:6    - Unknown word (Crawl)             -- * [Crawl Google Results](web
DIRECTORY.md:1346:19   - Unknown word (Scholar)           -- * [Crawl Google Scholar Citation](web_programming
DIRECTORY.md:1346:27   - Unknown word (Citation)          -- Crawl Google Scholar Citation](web_programming/crawl
DIRECTORY.md:1347:15   - Unknown word (Converter)         -- * [Currency Converter](web_programming/currency
DIRECTORY.md:1347:6    - Unknown word (Currency)          -- * [Currency Converter](web_programming
DIRECTORY.md:1349:14   - Unknown word (Weather)           -- * [Current Weather](web_programming/current
DIRECTORY.md:1350:12   - Unknown word (Horoscope)         -- * [Daily Horoscope](web_programming/daily
DIRECTORY.md:1350:6    - Unknown word (Daily)             -- * [Daily Horoscope](web_programming
DIRECTORY.md:1353:12   - Unknown word (Anime)             -- * [Fetch Anime And Play](web_programming
DIRECTORY.md:1353:22   - Unknown word (Play)              -- * [Fetch Anime And Play](web_programming/fetch
DIRECTORY.md:1360:10   - Unknown word (Imdb)              -- * [Get Imdb Top 250 Movies Csv]
DIRECTORY.md:1360:23   - Unknown word (Movies)            -- * [Get Imdb Top 250 Movies Csv](web_programming
DIRECTORY.md:1361:13   - Unknown word (Geolocation)       -- * [Get Ip Geolocation](web_programming/get
DIRECTORY.md:1362:14   - Unknown word (Billionaires)      -- * [Get Top Billionaires](web_programming/get
DIRECTORY.md:1363:17   - Unknown word (Posts)             -- * [Get Top Hn Posts](web_programming/get
DIRECTORY.md:1364:6    - Unknown word (Giphy)             -- * [Giphy](web_programming/giphy
DIRECTORY.md:1368:6    - Unknown word (Nasa)              -- * [Nasa Data](web_programming
DIRECTORY.md:136:21    - Unknown word (Noise)          -- * [Peak Signal To Noise Ratio](compression/peak
DIRECTORY.md:1371:6    - Unknown word (Recaptcha)         -- * [Recaptcha Verification](web_programming
DIRECTORY.md:1373:22   - Unknown word (Isbn)              -- * [Search Books By Isbn](web_programming/search
DIRECTORY.md:137:10    - Unknown word (Length)         -- * [Run Length Encoding](compression
DIRECTORY.md:137:17    - Unknown word (Encoding)       -- * [Run Length Encoding](compression/run_length
DIRECTORY.md:13:16     - Unknown word (Puzzle)       -- * [Crossword Puzzle Solver](backtracking
DIRECTORY.md:13:23     - Unknown word (Solver)       -- * [Crossword Puzzle Solver](backtracking/crossword
DIRECTORY.md:13:6      - Unknown word (Crossword)    -- * [Crossword Puzzle Solver](backtracking
DIRECTORY.md:141:11    - Unknown word (Augmentation)   -- * [Flip Augmentation](computer_vision/flip
DIRECTORY.md:141:6     - Unknown word (Flip)           -- * [Flip Augmentation](computer
DIRECTORY.md:143:13    - Unknown word (Corner)         -- * [Harris Corner](computer_vision/harris
DIRECTORY.md:145:22    - Unknown word (Segmentation)   -- * [Intensity Based Segmentation](computer_vision/intensity
DIRECTORY.md:146:11    - Unknown word (Threshold)      -- * [Mean Threshold](computer_vision/mean
DIRECTORY.md:146:6     - Unknown word (Mean)           -- * [Mean Threshold](computer
DIRECTORY.md:148:6     - Unknown word (Pooling)        -- * [Pooling Functions](computer
DIRECTORY.md:14:15     - Unknown word (Parentheses)  -- * [Generate Parentheses](backtracking/generate
DIRECTORY.md:150:4     - Unknown word (Conversions)    -- ## Conversions
DIRECTORY.md:151:6     - Unknown word (Astronomical)   -- * [Astronomical Length Scale Conversion
DIRECTORY.md:155:6     - Unknown word (Convert)        -- * [Convert Number To Words](conversions
DIRECTORY.md:161:21    - Unknown word (Column)         -- * [Excel Title To Column](conversions/excel_title
DIRECTORY.md:161:6     - Unknown word (Excel)          -- * [Excel Title To Column](conversions
DIRECTORY.md:166:16    - Unknown word (Chemistry)      -- * [Molecular Chemistry](conversions/molecular
DIRECTORY.md:166:6     - Unknown word (Molecular)      -- * [Molecular Chemistry](conversions
DIRECTORY.md:173:21    - Unknown word (Polar)          -- * [Rectangular To Polar](conversions/rectangular
DIRECTORY.md:173:6     - Unknown word (Rectangular)    -- * [Rectangular To Polar](conversions
DIRECTORY.md:174:10    - Unknown word (Cmyk)           -- * [Rgb Cmyk Conversion](conversions
DIRECTORY.md:176:12    - Unknown word (Numerals)       -- * [Roman Numerals](conversions/roman_numerals
DIRECTORY.md:176:6     - Unknown word (Roman)          -- * [Roman Numerals](conversions
DIRECTORY.md:177:6     - Unknown word (Speed)          -- * [Speed Conversions](conversions
DIRECTORY.md:186:13    - Unknown word (Triplets)       -- * [Find Triplets With 0 Sum](data_structures
DIRECTORY.md:189:8     - Unknown word (Median)         -- * [Median Two Array](data_structures
DIRECTORY.md:18:6      - Unknown word (Minimax)      -- * [Minimax](backtracking/minimax
DIRECTORY.md:190:8     - Unknown word (Monotonic)      -- * [Monotonic Array](data_structures
DIRECTORY.md:195:8     - Unknown word (Sparse)         -- * [Sparse Table](data_structures
DIRECTORY.md:19:8      - Unknown word (Queens)       -- * [N Queens](backtracking/n_queens
DIRECTORY.md:202:20    - Unknown word (Mirror)         -- * [Binary Tree Mirror](data_structures/binary
DIRECTORY.md:206:8     - Unknown word (Diameter)       -- * [Diameter Of Binary Tree](data
DIRECTORY.md:208:8     - Unknown word (Distribute)     -- * [Distribute Coins](data_structures
DIRECTORY.md:210:16    - Unknown word (Binarytree)     -- * [Flatten Binarytree To Linkedlist](data
DIRECTORY.md:210:30    - Unknown word (Linkedlist)     -- Flatten Binarytree To Linkedlist](data_structures/binary
DIRECTORY.md:211:18    - Unknown word (Ceiling)        -- * [Floor And Ceiling](data_structures/binary
DIRECTORY.md:211:8     - Unknown word (Floor)          -- * [Floor And Ceiling](data_structures
DIRECTORY.md:216:22    - Unknown word (Ancestor)       -- * [Lowest Common Ancestor](data_structures/binary
DIRECTORY.md:216:8     - Unknown word (Lowest)         -- * [Lowest Common Ancestor](data
DIRECTORY.md:217:8     - Unknown word (Maximum)        -- * [Maximum Fenwick Tree](data_structures
DIRECTORY.md:222:18    - Unknown word (Possible)       -- * [Number Of Possible Binary Trees](data_structures
DIRECTORY.md:227:8     - Unknown word (Symmetric)      -- * [Symmetric Tree](data_structures
DIRECTORY.md:22:13     - Unknown word (Maze)         -- * [Rat In Maze](backtracking/rat_in
DIRECTORY.md:230:5     - Unknown word (Disjoint)       -- * Disjoint Set
DIRECTORY.md:231:8     - Unknown word (Alternate)      -- * [Alternate Disjoint Set](data_structures
DIRECTORY.md:233:5     - Unknown word (Hashing)       -- * Hashing
DIRECTORY.md:244:5     - Unknown word (Heap)          -- * Heap
DIRECTORY.md:24:13     - Unknown word (Subsets)      -- * [Sum Of Subsets](backtracking/sum_of
DIRECTORY.md:251:8     - Unknown word (Skew)          -- * [Skew Heap](data_structures
DIRECTORY.md:253:14    - Unknown word (Kdtree)        -- * [Build Kdtree](data_structures/kd
DIRECTORY.md:254:7     - Unknown word (Example)       -- * Example
DIRECTORY.md:256:10    - Unknown word (Hypercube)     -- * [Hypercube Points](data_structures
DIRECTORY.md:258:8     - Unknown word (Nearest)       -- * [Nearest Neighbour Search](data
DIRECTORY.md:25:11     - Unknown word (Break)        -- * [Word Break](backtracking/word_break
DIRECTORY.md:263:8     - Unknown word (Deque)         -- * [Deque Doubly](data_structures
DIRECTORY.md:266:8     - Unknown word (Floyds)        -- * [Floyds Cycle Detection](data
DIRECTORY.md:268:12    - Unknown word (Loop)          -- * [Has Loop](data_structures/linked
DIRECTORY.md:269:11    - Unknown word (Palindrome)    -- * [Is Palindrome](data_structures/linked
DIRECTORY.md:271:8     - Unknown word (Middle)        -- * [Middle Element Of Linked List
DIRECTORY.md:272:8     - Unknown word (Print)         -- * [Print Reverse](data_structures
DIRECTORY.md:275:8     - Unknown word (Singly)        -- * [Singly Linked List](data_structures
DIRECTORY.md:276:8     - Unknown word (Skip)          -- * [Skip List](data_structures
DIRECTORY.md:281:15    - Unknown word (Ended)         -- * [Double Ended Queue](data_structures
DIRECTORY.md:283:23    - Unknown word (Using)         -- * [Priority Queue Using List](data_structures
DIRECTORY.md:286:17    - Unknown word (Pseudo)        -- * [Queue On Pseudo Stack](data_structures
DIRECTORY.md:289:8     - Unknown word (Dijkstras)     -- * [Dijkstras Two Stack Algorithm
DIRECTORY.md:292:8     - Unknown word (Lexicographical) -- * [Lexicographical Numbers](data_structures
DIRECTORY.md:293:13    - Unknown word (Greater)         -- * [Next Greater Element](data_structures
DIRECTORY.md:29:8      - Unknown word (Manipulation) -- ## Bit Manipulation
DIRECTORY.md:300:8     - Unknown word (Stock)           -- * [Stock Span Problem](data_structures
DIRECTORY.md:301:5     - Unknown word (Suffix)          -- * Suffix Tree
DIRECTORY.md:30:17     - Unknown word (Operator)     -- * [Binary And Operator](bit_manipulation/binary
DIRECTORY.md:313:13    - Unknown word (Brightness)      -- * [Change Brightness](digital_image_processing
DIRECTORY.md:315:17    - Unknown word (Negative)        -- * [Convert To Negative](digital_image_processing
DIRECTORY.md:316:5     - Unknown word (Dithering)       -- * Dithering
DIRECTORY.md:318:5     - Unknown word (Edge)            -- * Edge Detection
DIRECTORY.md:319:8     - Unknown word (Canny)           -- * [Canny](digital_image_processing
DIRECTORY.md:31:13     - Unknown word (Coded)        -- * [Binary Coded Decimal](bit_manipulation
DIRECTORY.md:31:19     - Unknown word (Decimal)      -- * [Binary Coded Decimal](bit_manipulation/binary
DIRECTORY.md:321:8     - Unknown word (Bilateral)       -- * [Bilateral Filter](digital_image
DIRECTORY.md:328:8     - Unknown word (Sobel)           -- * [Sobel Filter](digital_image
DIRECTORY.md:329:15    - Unknown word (Equalization)    -- * Histogram Equalization
DIRECTORY.md:329:5     - Unknown word (Histogram)       -- * Histogram Equalization
DIRECTORY.md:32:19     - Unknown word (Setbits)      -- * [Binary Count Setbits](bit_manipulation/binary
DIRECTORY.md:332:5     - Unknown word (Morphological)   -- * Morphological Operations
DIRECTORY.md:339:6     - Unknown word (Sepia)           -- * [Sepia](digital_image_processing
DIRECTORY.md:33:19     - Unknown word (Trailing)     -- * [Binary Count Trailing Zeros](bit_manipulation
DIRECTORY.md:33:28     - Unknown word (Zeros)        -- Binary Count Trailing Zeros](bit_manipulation/binary
DIRECTORY.md:342:15    - Unknown word (Conquer)         -- ## Divide And Conquer
DIRECTORY.md:343:6     - Unknown word (Closest)         -- * [Closest Pair Of Points](divide
DIRECTORY.md:344:13    - Unknown word (Hull)            -- * [Convex Hull](divide_and_conquer
DIRECTORY.md:344:6     - Unknown word (Convex)          -- * [Convex Hull](divide_and_conquer
DIRECTORY.md:346:22    - Unknown word (Iterative)       -- * [Heaps Algorithm Iterative](divide_and_conquer
DIRECTORY.md:347:6     - Unknown word (Inversions)      -- * [Inversions](divide_and_conquer
DIRECTORY.md:349:10    - Unknown word (Difference)      -- * [Max Difference Pair](divide_and_conquer
DIRECTORY.md:350:10    - Unknown word (Subarray)        -- * [Max Subarray](divide_and_conquer
DIRECTORY.md:351:6     - Unknown word (Mergesort)       -- * [Mergesort](divide_and_conquer
DIRECTORY.md:354:22    - Unknown word (Multiplication)  -- * [Strassen Matrix Multiplication](divide_and_conquer
DIRECTORY.md:354:6     - Unknown word (Strassen)        -- * [Strassen Matrix Multiplication
DIRECTORY.md:357:6     - Unknown word (Conf)            -- * [Conf](docs/conf.py)
DIRECTORY.md:359:12    - Unknown word (Programming)     -- ## Dynamic Programming
DIRECTORY.md:361:10    - Unknown word (Construct)       -- * [All Construct](dynamic_programming
DIRECTORY.md:362:6     - Unknown word (Bitmask)         -- * [Bitmask](dynamic_programming
DIRECTORY.md:364:15    - Unknown word (Stairs)          -- * [Climbing Stairs](dynamic_programming
DIRECTORY.md:364:6     - Unknown word (Climbing)        -- * [Climbing Stairs](dynamic_programming
DIRECTORY.md:366:11    - Unknown word (Distance)        -- * [Edit Distance](dynamic_programming
DIRECTORY.md:366:6     - Unknown word (Edit)            -- * [Edit Distance](dynamic_programming
DIRECTORY.md:367:6     - Unknown word (Factorial)       -- * [Factorial](dynamic_programming
DIRECTORY.md:368:11    - Unknown word (Fibonacci)       -- * [Fast Fibonacci](dynamic_programming
DIRECTORY.md:36:13     - Unknown word (Twos)         -- * [Binary Twos Complement](bit_manipulation
DIRECTORY.md:370:11    - Unknown word (Buzz)            -- * [Fizz Buzz](dynamic_programming
DIRECTORY.md:370:6     - Unknown word (Fizz)            -- * [Fizz Buzz](dynamic_programming
DIRECTORY.md:371:12    - Unknown word (Warshall)        -- * [Floyd Warshall](dynamic_programming
DIRECTORY.md:371:6     - Unknown word (Floyd)           -- * [Floyd Warshall](dynamic_programming
DIRECTORY.md:373:24    - Unknown word (Submasks)        -- [Iterating Through Submasks](dynamic_programming
DIRECTORY.md:374:14    - Unknown word (Clustering)      -- * [K Means Clustering Tensorflow](dynamic
DIRECTORY.md:374:25    - Unknown word (Tensorflow)      -- [K Means Clustering Tensorflow](dynamic_programming
DIRECTORY.md:374:8     - Unknown word (Means)           -- * [K Means Clustering Tensorflow
DIRECTORY.md:375:6     - Unknown word (Knapsack)        -- * [Knapsack](dynamic_programming
DIRECTORY.md:376:14    - Unknown word (Divisible)       -- * [Largest Divisible Subset](dynamic_programming
DIRECTORY.md:377:21    - Unknown word (Subsequence)     -- * [Longest Common Subsequence](dynamic_programming
DIRECTORY.md:377:6     - Unknown word (Longest)         -- * [Longest Common Subsequence]
DIRECTORY.md:378:21    - Unknown word (Substring)       -- * [Longest Common Substring](dynamic_programming
DIRECTORY.md:379:14    - Unknown word (Increasing)      -- * [Longest Increasing Subsequence](dynamic
DIRECTORY.md:381:39    - Unknown word (Nlogn)           -- Increasing Subsequence O Nlogn](dynamic_programming
DIRECTORY.md:382:14    - Unknown word (Palindromic)     -- * [Longest Palindromic Subsequence](dynamic
DIRECTORY.md:383:13    - Unknown word (Chain)           -- * [Matrix Chain Multiplication](dynamic
DIRECTORY.md:385:14    - Unknown word (Adjacent)        -- * [Max Non Adjacent Sum](dynamic_programming
DIRECTORY.md:389:14    - Unknown word (Coin)            -- * [Minimum Coin Change](dynamic_programming
DIRECTORY.md:389:6     - Unknown word (Minimum)         -- * [Minimum Coin Change](dynamic
DIRECTORY.md:38:14     - Unknown word (Addition)     -- * [Bitwise Addition Recursive](bit_manipulation
DIRECTORY.md:38:23     - Unknown word (Recursive)    -- * [Bitwise Addition Recursive](bit_manipulation/bitwise
DIRECTORY.md:393:14    - Unknown word (Squares)         -- * [Minimum Squares To Represent A Number
DIRECTORY.md:395:14    - Unknown word (Tickets)         -- * [Minimum Tickets Cost](dynamic_programming
DIRECTORY.md:397:17    - Unknown word (Partitioning)    -- * [Palindrome Partitioning](dynamic_programming
DIRECTORY.md:399:10    - Unknown word (Cutting)         -- * [Rod Cutting](dynamic_programming
DIRECTORY.md:39:21     - Unknown word (Kernighan)    -- * [Count 1S Brian Kernighan Method](bit_manipulation
DIRECTORY.md:400:12    - Unknown word (Waterman)        -- * [Smith Waterman](dynamic_programming
DIRECTORY.md:401:13    - Unknown word (Generation)      -- * [Subset Generation](dynamic_programming
DIRECTORY.md:403:6     - Unknown word (Trapped)         -- * [Trapped Water](dynamic_programming
DIRECTORY.md:404:6     - Unknown word (Tribonacci)      -- * [Tribonacci](dynamic_programming
DIRECTORY.md:405:6     - Unknown word (Viterbi)         -- * [Viterbi](dynamic_programming
DIRECTORY.md:406:15    - Unknown word (Matching)        -- * [Wildcard Matching](dynamic_programming
DIRECTORY.md:406:6     - Unknown word (Wildcard)        -- * [Wildcard Matching](dynamic_programming
DIRECTORY.md:40:26     - Unknown word (Bits)         -- Count Number Of One Bits](bit_manipulation/count
DIRECTORY.md:410:6     - Unknown word (Apparent)        -- * [Apparent Power](electronics/apparent
DIRECTORY.md:411:14    - Unknown word (Voltage)         -- * [Builtin Voltage](electronics/builtin
DIRECTORY.md:412:16    - Unknown word (Equivalence)    -- * [Capacitor Equivalence](electronics/capacitor
DIRECTORY.md:413:14    - Unknown word (Concentration)  -- * [Carrier Concentration](electronics/carrier
DIRECTORY.md:414:6     - Unknown word (Charging)       -- * [Charging Capacitor](electronics
DIRECTORY.md:415:15    - Unknown word (Inductor)       -- * [Charging Inductor](electronics/charging
DIRECTORY.md:417:6     - Unknown word (Coulombs)       -- * [Coulombs Law](electronics/coulombs
DIRECTORY.md:418:15    - Unknown word (Conductivity)   -- * [Electric Conductivity](electronics/electric
DIRECTORY.md:41:6      - Unknown word (Excess)       -- * [Excess 3 Code](bit_manipulation
DIRECTORY.md:420:17    - Unknown word (Impedance)      -- * [Electrical Impedance](electronics/electrical
DIRECTORY.md:420:6     - Unknown word (Electrical)     -- * [Electrical Impedance](electronics
DIRECTORY.md:422:10    - Unknown word (Reactance)      -- * [Ind Reactance](electronics/ind_reactance
DIRECTORY.md:423:6     - Unknown word (Ohms)           -- * [Ohms Law](electronics/ohms
DIRECTORY.md:425:6     - Unknown word (Resistor)       -- * [Resistor Color Code](electronics
DIRECTORY.md:427:6     - Unknown word (Resonant)       -- * [Resonant Frequency](electronics
DIRECTORY.md:42:11     - Unknown word (Previous)     -- * [Find Previous Power Of Two](bit_manipulatio
DIRECTORY.md:42:6      - Unknown word (Find)         -- * [Find Previous Power Of Two
DIRECTORY.md:437:14    - Unknown word (Monthly)        -- * [Equated Monthly Installments](financial
DIRECTORY.md:437:22    - Unknown word (Installments)   -- * [Equated Monthly Installments](financial/equated_monthly
DIRECTORY.md:437:6     - Unknown word (Equated)        -- * [Equated Monthly Installments
DIRECTORY.md:439:6     - Unknown word (Interest)       -- * [Interest](financial/interest
DIRECTORY.md:43:16     - Unknown word (Sequence)     -- * [Gray Code Sequence](bit_manipulation/gray
DIRECTORY.md:440:6     - Unknown word (Present)        -- * [Present Value](financial/present
DIRECTORY.md:444:4     - Unknown word (Fractals)       -- ## Fractals
DIRECTORY.md:445:6     - Unknown word (Julia)          -- * [Julia Sets](fractals/julia
DIRECTORY.md:446:11    - Unknown word (Snowflake)      -- * [Koch Snowflake](fractals/koch_snowflake
DIRECTORY.md:446:6     - Unknown word (Koch)           -- * [Koch Snowflake](fractals
DIRECTORY.md:447:6     - Unknown word (Mandelbrot)     -- * [Mandelbrot](fractals/mandelbrot
DIRECTORY.md:448:6     - Unknown word (Sierpinski)     -- * [Sierpinski Triangle](fractals/sierpinski
DIRECTORY.md:449:6     - Unknown word (Vicsek)         -- * [Vicsek](fractals/vicsek.py
DIRECTORY.md:44:6      - Unknown word (Highest)      -- * [Highest Set Bit](bit_manipulation
DIRECTORY.md:451:10    - Unknown word (Logic)          -- ## Fuzzy Logic
DIRECTORY.md:454:4     - Unknown word (Genetic)        -- ## Genetic Algorithm
DIRECTORY.md:457:4     - Unknown word (Geodesy)        -- ## Geodesy
DIRECTORY.md:458:6     - Unknown word (Haversine)      -- * [Haversine Distance](geodesy/haversine
DIRECTORY.md:459:15    - Unknown word (Ellipsoidal)    -- * [Lamberts Ellipsoidal Distance](geodesy/lamberts
DIRECTORY.md:459:6     - Unknown word (Lamberts)       -- * [Lamberts Ellipsoidal Distance
DIRECTORY.md:45:15     - Unknown word (Rightmost)    -- * [Index Of Rightmost Set Bit](bit_manipulation
DIRECTORY.md:461:4     - Unknown word (Geometry)       -- ## Geometry
DIRECTORY.md:464:4     - Unknown word (Graphics)       -- ## Graphics
DIRECTORY.md:465:13    - Unknown word (Curve)          -- * [Bezier Curve](graphics/bezier_curve
DIRECTORY.md:465:6     - Unknown word (Bezier)         -- * [Bezier Curve](graphics/bezier
DIRECTORY.md:466:6     - Unknown word (Butterfly)      -- * [Butterfly Pattern](graphics/butterfly
DIRECTORY.md:467:14    - Unknown word (Differential)   -- * [Digital Differential Analyzer Line](graphics
DIRECTORY.md:467:27    - Unknown word (Analyzer)       -- Digital Differential Analyzer Line](graphics/digital
DIRECTORY.md:46:9      - Unknown word (Even)         -- * [Is Even](bit_manipulation/is
DIRECTORY.md:470:4     - Unknown word (Graphs)         -- ## Graphs
DIRECTORY.md:472:10    - Unknown word (Colony)         -- * [Ant Colony Optimization Algorithms
DIRECTORY.md:472:17    - Unknown word (Optimization)   -- * [Ant Colony Optimization Algorithms](graphs/ant
DIRECTORY.md:473:6     - Unknown word (Articulation)   -- * [Articulation Points](graphs/articulation
DIRECTORY.md:475:6     - Unknown word (Bellman)        -- * [Bellman Ford](graphs/bellman
DIRECTORY.md:476:21    - Unknown word (Dijkstra)       -- * [Bi Directional Dijkstra](graphs/bi_directional
DIRECTORY.md:476:9     - Unknown word (Directional)    -- * [Bi Directional Dijkstra](graphs/bi
DIRECTORY.md:477:6     - Unknown word (Bidirectional)  -- * [Bidirectional A Star](graphs/bidirectional
DIRECTORY.md:479:6     - Unknown word (Boruvka)        -- * [Boruvka](graphs/boruvka.py)
DIRECTORY.md:482:27    - Unknown word (Shortest)       -- Breadth First Search Shortest Path](graphs/breadth
DIRECTORY.md:485:12    - Unknown word (Bipatrite)      -- * [Check Bipatrite](graphs/check_bipatrite
DIRECTORY.md:488:6     - Unknown word (Deep)           -- * [Deep Clone Graph](graphs
DIRECTORY.md:496:6     - Unknown word (Dinic)          -- * [Dinic](graphs/dinic.py)
DIRECTORY.md:497:19    - Unknown word (Undirected)     -- * [Directed And Undirected Weighted Graph](graphs
DIRECTORY.md:497:30    - Unknown word (Weighted)       -- Directed And Undirected Weighted Graph](graphs/directed
DIRECTORY.md:497:6     - Unknown word (Directed)       -- * [Directed And Undirected Weighted
DIRECTORY.md:498:14    - Unknown word (Karp)           -- * [Edmonds Karp Multiple Source And
DIRECTORY.md:498:19    - Unknown word (Multiple)       -- * [Edmonds Karp Multiple Source And Sink](graphs
DIRECTORY.md:498:6     - Unknown word (Edmonds)        -- * [Edmonds Karp Multiple Source
DIRECTORY.md:499:6     - Unknown word (Eulerian)       -- * [Eulerian Path And Circuit For
DIRECTORY.md:501:14    - Unknown word (Bridges)        -- * [Finding Bridges](graphs/finding_bridges
DIRECTORY.md:502:29    - Unknown word (Miner)          -- Frequent Pattern Graph Miner](graphs/frequent_pattern
DIRECTORY.md:502:6     - Unknown word (Frequent)       -- * [Frequent Pattern Graph Miner
DIRECTORY.md:503:8     - Unknown word (Topological)    -- * [G Topological Sort](graphs/g_topological
DIRECTORY.md:504:11    - Unknown word (Shapley)        -- * [Gale Shapley Bigraph](graphs/gale
DIRECTORY.md:504:19    - Unknown word (Bigraph)        -- * [Gale Shapley Bigraph](graphs/gale_shapley
DIRECTORY.md:504:6     - Unknown word (Gale)           -- * [Gale Shapley Bigraph](graphs
DIRECTORY.md:505:12    - Unknown word (Adjacency)      -- * [Graph Adjacency List](graphs/graph_adjacency
DIRECTORY.md:509:6     - Unknown word (Greedy)         -- * [Greedy Best First](graphs/greedy
DIRECTORY.md:50:14     - Unknown word (Different)    -- * [Numbers Different Signs](bit_manipulation
DIRECTORY.md:50:24     - Unknown word (Signs)        -- [Numbers Different Signs](bit_manipulation/numbers
DIRECTORY.md:510:24    - Unknown word (Cover)          -- [Greedy Min Vertex Cover](graphs/greedy_min_vertex
DIRECTORY.md:511:6     - Unknown word (Kahns)          -- * [Kahns Algorithm Long](graphs
DIRECTORY.md:512:22    - Unknown word (Topo)           -- * [Kahns Algorithm Topo](graphs/kahns_algorithm
DIRECTORY.md:513:6     - Unknown word (Karger)         -- * [Karger](graphs/karger.py)
DIRECTORY.md:514:14    - Unknown word (Eigenvectors)   -- * [Lanczos Eigenvectors](graphs/lanczos_eigenvectors
DIRECTORY.md:514:6     - Unknown word (Lanczos)        -- * [Lanczos Eigenvectors](graphs
DIRECTORY.md:515:6     - Unknown word (Markov)         -- * [Markov Chain](graphs/markov
DIRECTORY.md:518:14    - Unknown word (Spanning)       -- * [Minimum Spanning Tree Boruvka](graphs
DIRECTORY.md:519:28    - Unknown word (Kruskal)        -- Minimum Spanning Tree Kruskal](graphs/minimum_spanning
DIRECTORY.md:521:28    - Unknown word (Prims)         -- Minimum Spanning Tree Prims](graphs/minimum_spanning
DIRECTORY.md:523:22    - Unknown word (Astar)         -- * [Multi Heuristic Astar](graphs/multi_heuristic
DIRECTORY.md:523:6     - Unknown word (Multi)         -- * [Multi Heuristic Astar](graphs
DIRECTORY.md:524:11    - Unknown word (Rank)          -- * [Page Rank](graphs/page_rank.py
DIRECTORY.md:525:6     - Unknown word (Prim)          -- * [Prim](graphs/prim.py)
DIRECTORY.md:527:10    - Unknown word (Kosaraju)      -- * [Scc Kosaraju](graphs/scc_kosaraju
DIRECTORY.md:528:6     - Unknown word (Strongly)      -- * [Strongly Connected Components
DIRECTORY.md:529:6     - Unknown word (Tarjans)       -- * [Tarjans Scc](graphs/tarjans
DIRECTORY.md:52:6      - Unknown word (Reverse)      -- * [Reverse Bits](bit_manipulation
DIRECTORY.md:535:27    - Unknown word (Sell)          -- Best Time To Buy And Sell Stock](greedy_methods
DIRECTORY.md:536:6     - Unknown word (Fractional)    -- * [Fractional Cover Problem](greedy
DIRECTORY.md:539:10    - Unknown word (Station)       -- * [Gas Station](greedy_methods/gas
DIRECTORY.md:541:14    - Unknown word (Waiting)       -- * [Minimum Waiting Time](greedy_methods
DIRECTORY.md:543:6     - Unknown word (Smallest)      -- * [Smallest Range](greedy_methods
DIRECTORY.md:545:4     - Unknown word (Hashes)        -- ## Hashes
DIRECTORY.md:546:6     - Unknown word (Adler)         -- * [Adler32](hashes/adler32.py
DIRECTORY.md:547:6     - Unknown word (Chaos)         -- * [Chaos Machine](hashes/chaos
DIRECTORY.md:551:6     - Unknown word (Fletcher)      -- * [Fletcher16](hashes/fletcher1
DIRECTORY.md:552:6     - Unknown word (Hamming)       -- * [Hamming Code](hashes/hamming
DIRECTORY.md:553:6     - Unknown word (Luhn)          -- * [Luhn](hashes/luhn.py)
DIRECTORY.md:555:6     - Unknown word (Sdbm)          -- * [Sdbm](hashes/sdbm.py)
DIRECTORY.md:562:16    - Unknown word (Approach)      -- * [Recursive Approach Knapsack](knapsack/recursive
DIRECTORY.md:568:15    - Unknown word (Elimination)   -- * [Gaussian Elimination](linear_algebra/gaussian
DIRECTORY.md:569:13    - Unknown word (Iteration)     -- * [Jacobi Iteration Method](linear_algebra
DIRECTORY.md:569:6     - Unknown word (Jacobi)        -- * [Jacobi Iteration Method](linear
DIRECTORY.md:570:9     - Unknown word (Decomposition) -- * [Lu Decomposition](linear_algebra/lu_decomposit
DIRECTORY.md:572:8     - Unknown word (Conjugate)     -- * [Conjugate Gradient](linear_algebra
DIRECTORY.md:573:29    - Unknown word (Pivoting)      -- Gaussian Elimination Pivoting](linear_algebra/src
DIRECTORY.md:575:8     - Unknown word (Polynom)       -- * [Polynom For Points](linear_algebra
DIRECTORY.md:578:17    - Unknown word (Quotient)      -- * [Rayleigh Quotient](linear_algebra/src
DIRECTORY.md:578:8     - Unknown word (Rayleigh)      -- * [Rayleigh Quotient](linear_algebra
DIRECTORY.md:579:8     - Unknown word (Schur)         -- * [Schur Complement](linear_algebra
DIRECTORY.md:581:8     - Unknown word (Transformations) -- * [Transformations 2D](linear_algebra/src
DIRECTORY.md:584:6     - Unknown word (Simplex)         -- * [Simplex](linear_programming
DIRECTORY.md:586:12    - Unknown word (Learning)        -- ## Machine Learning
DIRECTORY.md:587:6     - Unknown word (Apriori)         -- * [Apriori Algorithm](machine_learning
DIRECTORY.md:589:16    - Unknown word (Differentiation) -- * [Automatic Differentiation](machine_learning/automatic
DIRECTORY.md:592:21    - Unknown word (Reduction)       -- * [Dimensionality Reduction](machine_learning/dimensional
DIRECTORY.md:593:5     - Unknown word (Forecasting)     -- * Forecasting
DIRECTORY.md:595:23    - Unknown word (Growth)          -- * [Frequent Pattern Growth](machine_learning/frequent
DIRECTORY.md:596:15    - Unknown word (Boosting)        -- * [Gradient Boosting Classifier](machine
DIRECTORY.md:598:14    - Unknown word (Clust)           -- * [K Means Clust](machine_learning/k
DIRECTORY.md:599:16    - Unknown word (Neighbours)      -- * [K Nearest Neighbours](machine_learning/k
DIRECTORY.md:600:13    - Unknown word (Discriminant)    -- * [Linear Discriminant Analysis](machine_learning
DIRECTORY.md:601:13    - Unknown word (Regression)      -- * [Linear Regression](machine_learning/linear
DIRECTORY.md:604:6     - Unknown word (Logistic)        -- * [Logistic Regression](machine
DIRECTORY.md:605:6     - Unknown word (Loss)            -- * [Loss Functions](machine_learning
DIRECTORY.md:606:5     - Unknown word (Lstm)            -- * Lstm
DIRECTORY.md:608:6     - Unknown word (Mfcc)            -- * [Mfcc](machine_learning/mfcc
DIRECTORY.md:609:6     - Unknown word (Multilayer)      -- * [Multilayer Perceptron Classifier
DIRECTORY.md:610:6     - Unknown word (Polynomial)      -- * [Polynomial Regression](machine
DIRECTORY.md:611:6     - Unknown word (Scoring)         -- * [Scoring Functions](machine_learning
DIRECTORY.md:612:11    - Unknown word (Organizing)      -- * [Self Organizing Map](machine_learning
DIRECTORY.md:612:6     - Unknown word (Self)            -- * [Self Organizing Map](machine
DIRECTORY.md:613:6     - Unknown word (Sequential)      -- * [Sequential Minimum Optimization
DIRECTORY.md:614:6     - Unknown word (Similarity)      -- * [Similarity Search](machine_learning
DIRECTORY.md:617:6     - Unknown word (Xgboost)         -- * [Xgboost Classifier](machine
DIRECTORY.md:618:14    - Unknown word (Regressor)       -- * [Xgboost Regressor](machine_learning/xgboost
DIRECTORY.md:61:6      - Unknown word (Imply)        -- * [Imply Gate](boolean_algebra
DIRECTORY.md:620:4     - Unknown word (Maths)           -- ## Maths
DIRECTORY.md:622:23    - Unknown word (Arithmetic)      -- * [Addition Without Arithmetic](maths/addition_without
DIRECTORY.md:623:6     - Unknown word (Aliquot)         -- * [Aliquot Sum](maths/aliquot_sum
DIRECTORY.md:624:6     - Unknown word (Allocation)      -- * [Allocation Number](maths/allocation
DIRECTORY.md:628:14    - Unknown word (Absolute)        -- * [Average Absolute Deviation](maths/average
DIRECTORY.md:62:19     - Unknown word (Simplification) -- * [Karnaugh Map Simplification](boolean_algebra/karnaugh
DIRECTORY.md:631:14    - Unknown word (Mode)            -- * [Average Mode](maths/average_mode
DIRECTORY.md:632:13    - Unknown word (Borwein)         -- * [Bailey Borwein Plouffe](maths/bailey
DIRECTORY.md:632:21    - Unknown word (Plouffe)         -- * [Bailey Borwein Plouffe](maths/bailey_borwein
DIRECTORY.md:632:6     - Unknown word (Bailey)          -- * [Bailey Borwein Plouffe](maths
DIRECTORY.md:635:13    - Unknown word (Exponentiation)  -- * [Binary Exponentiation](maths/binary_exponentiation
DIRECTORY.md:639:6     - Unknown word (Ceil)            -- * [Ceil](maths/ceil.py)
DIRECTORY.md:640:6     - Unknown word (Chebyshev)       -- * [Chebyshev Distance](maths/chebyshev
DIRECTORY.md:642:14    - Unknown word (Remainder)       -- * [Chinese Remainder Theorem](maths/chinese
DIRECTORY.md:643:6     - Unknown word (Chudnovsky)      -- * [Chudnovsky Algorithm](maths/chudnovsky
DIRECTORY.md:644:6     - Unknown word (Collatz)         -- * [Collatz Sequence](maths/collatz
DIRECTORY.md:646:16    - Unknown word (Fraction)        -- * [Continued Fraction](maths/continued_fraction
DIRECTORY.md:646:6     - Unknown word (Continued)       -- * [Continued Fraction](maths/continued
DIRECTORY.md:647:14    - Unknown word (Isolate)         -- * [Decimal Isolate](maths/decimal_isolate
DIRECTORY.md:649:6     - Unknown word (Dodecahedron)    -- * [Dodecahedron](maths/dodecahedron
DIRECTORY.md:64:6      - Unknown word (Nand)           -- * [Nand Gate](boolean_algebra
DIRECTORY.md:651:6     - Unknown word (Dual)            -- * [Dual Number Automatic Differentiat
DIRECTORY.md:652:6     - Unknown word (Entropy)         -- * [Entropy](maths/entropy.py)
DIRECTORY.md:655:12    - Unknown word (Modified)        -- * [Euler Modified](maths/euler_modified
DIRECTORY.md:656:13    - Unknown word (Totient)         -- * [Eulers Totient](maths/eulers_totient
DIRECTORY.md:656:6     - Unknown word (Eulers)          -- * [Eulers Totient](maths/eulers
DIRECTORY.md:659:6     - Unknown word (Factors)         -- * [Factors](maths/factors.py)
DIRECTORY.md:65:6      - Unknown word (Nimply)         -- * [Nimply Gate](boolean_algebra
DIRECTORY.md:660:11    - Unknown word (Inverse)         -- * [Fast Inverse Sqrt](maths/fast_inverse
DIRECTORY.md:661:13    - Unknown word (Little)          -- * [Fermat Little Theorem](maths/fermat
DIRECTORY.md:661:6     - Unknown word (Fermat)          -- * [Fermat Little Theorem](maths
DIRECTORY.md:669:6     - Unknown word (Geometric)       -- * [Geometric Mean](maths/geometric
DIRECTORY.md:670:6     - Unknown word (Germain)         -- * [Germain Primes](maths/germain
DIRECTORY.md:671:6     - Unknown word (Greatest)        -- * [Greatest Common Divisor](maths
DIRECTORY.md:672:12    - Unknown word (Ramanujanalgo)   -- * [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo
DIRECTORY.md:672:6     - Unknown word (Hardy)           -- * [Hardy Ramanujanalgo](maths
DIRECTORY.md:674:6     - Unknown word (Interquartile)   -- * [Interquartile Range](maths/interquartile
DIRECTORY.md:678:6     - Unknown word (Jaccard)         -- * [Jaccard Similarity](maths/jaccard
DIRECTORY.md:679:6     - Unknown word (Joint)           -- * [Joint Probability Distribution
DIRECTORY.md:680:6     - Unknown word (Josephus)        -- * [Josephus Problem](maths/josephus
DIRECTORY.md:681:6     - Unknown word (Juggler)         -- * [Juggler Sequence](maths/juggler
DIRECTORY.md:682:6     - Unknown word (Karatsuba)       -- * [Karatsuba](maths/karatsuba.py
DIRECTORY.md:683:10    - Unknown word (Lexicographic)   -- * [Kth Lexicographic Permutation](maths/kth
DIRECTORY.md:684:17    - Unknown word (Very)            -- * [Largest Of Very Large Numbers](maths
DIRECTORY.md:684:22    - Unknown word (Large)           -- * [Largest Of Very Large Numbers](maths/largest
DIRECTORY.md:685:6     - Unknown word (Least)           -- * [Least Common Multiple](maths
DIRECTORY.md:687:6     - Unknown word (Liouville)       -- * [Liouville Lambda](maths/liouville
DIRECTORY.md:688:12    - Unknown word (Lehmer)          -- * [Lucas Lehmer Primality Test](maths
DIRECTORY.md:688:6     - Unknown word (Lucas)           -- * [Lucas Lehmer Primality Test
DIRECTORY.md:690:6     - Unknown word (Maclaurin)       -- * [Maclaurin Series](maths/maclaurin
DIRECTORY.md:691:6     - Unknown word (Manhattan)      -- * [Manhattan Distance](maths/manhattan
DIRECTORY.md:693:14    - Unknown word (Sliding)        -- * [Max Sum Sliding Window](maths/max_sum
DIRECTORY.md:694:6     - Unknown word (Minkowski)      -- * [Minkowski Distance](maths/minkowski
DIRECTORY.md:695:6     - Unknown word (Mobius)         -- * [Mobius Function](maths/mobius
DIRECTORY.md:696:14    - Unknown word (Division)       -- * [Modular Division](maths/modular_division
DIRECTORY.md:698:12    - Unknown word (Carlo)          -- * [Monte Carlo](maths/monte_carlo.py
DIRECTORY.md:698:6     - Unknown word (Monte)          -- * [Monte Carlo](maths/monte_carlo
DIRECTORY.md:699:18    - Unknown word (Dice)           -- * [Monte Carlo Dice](maths/monte_carlo_dice
DIRECTORY.md:69:15     - Unknown word (Cluskey)        -- * [Quine Mc Cluskey](boolean_algebra/quine
DIRECTORY.md:69:6      - Unknown word (Quine)          -- * [Quine Mc Cluskey](boolean
DIRECTORY.md:700:16    - Unknown word (Digits)         -- * [Number Of Digits](maths/number_of_digits
DIRECTORY.md:701:5     - Unknown word (Numerical)      -- * Numerical Analysis
DIRECTORY.md:702:14    - Unknown word (Bashforth)      -- * [Adams Bashforth](maths/numerical_analysis
DIRECTORY.md:702:8     - Unknown word (Adams)          -- * [Adams Bashforth](maths/numerical
DIRECTORY.md:703:8     - Unknown word (Bisection)      -- * [Bisection](maths/numerical_analysis
DIRECTORY.md:705:23    - Unknown word (Simpson)        -- * [Integration By Simpson Approx](maths/numerical
DIRECTORY.md:707:8     - Unknown word (Nevilles)       -- * [Nevilles Method](maths/numerical
DIRECTORY.md:708:8     - Unknown word (Newton)         -- * [Newton Forward Interpolation
DIRECTORY.md:709:15    - Unknown word (Raphson)        -- * [Newton Raphson](maths/numerical_analysis
DIRECTORY.md:70:6      - Unknown word (Xnor)           -- * [Xnor Gate](boolean_algebra
DIRECTORY.md:711:15    - Unknown word (Fractions)      -- * [Proper Fractions](maths/numerical_analysis
DIRECTORY.md:711:8     - Unknown word (Proper)         -- * [Proper Fractions](maths/numerical
DIRECTORY.md:712:14    - Unknown word (Kutta)          -- * [Runge Kutta](maths/numerical_analysis
DIRECTORY.md:712:8     - Unknown word (Runge)          -- * [Runge Kutta](maths/numerical
DIRECTORY.md:713:20    - Unknown word (Fehlberg)       -- * [Runge Kutta Fehlberg 45](maths/numerical
DIRECTORY.md:714:20    - Unknown word (Gills)          -- * [Runge Kutta Gills](maths/numerical_analysis
DIRECTORY.md:715:8     - Unknown word (Secant)         -- * [Secant Method](maths/numerical
DIRECTORY.md:718:10    - Unknown word (Sieve)          -- * [Odd Sieve](maths/odd_sieve.py
DIRECTORY.md:719:6     - Unknown word (Perfect)        -- * [Perfect Cube](maths/perfect
DIRECTORY.md:722:6     - Unknown word (Persistence)    -- * [Persistence](maths/persistence.py
DIRECTORY.md:724:21    - Unknown word (Estimation)     -- * [Pi Monte Carlo Estimation](maths/pi_monte_carlo
DIRECTORY.md:725:17    - Unknown word (Collinear)      -- * [Points Are Collinear 3D](maths/points_are
DIRECTORY.md:726:6     - Unknown word (Pollard)        -- * [Pollard Rho](maths/pollard_rho
DIRECTORY.md:728:5     - Unknown word (Polynomials)    -- * Polynomials
DIRECTORY.md:729:15    - Unknown word (Indeterminate)  -- * [Single Indeterminate Operations](maths/polynomials
DIRECTORY.md:730:18    - Unknown word (Recursion)      -- * [Power Using Recursion](maths/power_using_recursion
DIRECTORY.md:734:18    - Unknown word (Eratosthenes)   -- * [Prime Sieve Eratosthenes](maths/prime_sieve_eratosthen
DIRECTORY.md:735:6     - Unknown word (Primelib)       -- * [Primelib](maths/primelib.py)
DIRECTORY.md:737:6     - Unknown word (Pythagoras)     -- * [Pythagoras](maths/pythagoras.py
DIRECTORY.md:739:26    - Unknown word (Complex)        -- Quadratic Equations Complex Numbers](maths/quadratic
DIRECTORY.md:740:6     - Unknown word (Radians)        -- * [Radians](maths/radians.py)
DIRECTORY.md:742:13    - Unknown word (Digit)          -- * [Remove Digit](maths/remove_digit
DIRECTORY.md:748:8     - Unknown word (Harmonic)       -- * [Harmonic](maths/series/harmonic
DIRECTORY.md:74:6      - Unknown word (Conways)        -- * [Conways Game Of Life](cellular
DIRECTORY.md:750:8     - Unknown word (Hexagonal)      -- * [Hexagonal Numbers](maths/series
DIRECTORY.md:753:6     - Unknown word (Sigmoid)        -- * [Sigmoid](maths/sigmoid.py)
DIRECTORY.md:754:6     - Unknown word (Signum)         -- * [Signum](maths/signum.py)
DIRECTORY.md:755:6     - Unknown word (Simultaneous)   -- * [Simultaneous Linear Equation Solver
DIRECTORY.md:757:11    - Unknown word (Merchant)       -- * [Sock Merchant](maths/sock_merchant
DIRECTORY.md:757:6     - Unknown word (Sock)           -- * [Sock Merchant](maths/sock
DIRECTORY.md:758:6     - Unknown word (Softmax)        -- * [Softmax](maths/softmax.py)
DIRECTORY.md:759:6     - Unknown word (Solovay)        -- * [Solovay Strassen Primality Test
DIRECTORY.md:760:20    - Unknown word (Correlation)    -- * [Spearman Rank Correlation Coefficient](maths/spearman
DIRECTORY.md:760:6     - Unknown word (Spearman)       -- * [Spearman Rank Correlation Coefficient
DIRECTORY.md:761:5     - Unknown word (Special)        -- * Special Numbers
DIRECTORY.md:762:8     - Unknown word (Armstrong)      -- * [Armstrong Numbers](maths/special
DIRECTORY.md:763:8     - Unknown word (Automorphic)    -- * [Automorphic Number](maths/special
DIRECTORY.md:764:8     - Unknown word (Bell)           -- * [Bell Numbers](maths/special
DIRECTORY.md:765:8     - Unknown word (Carmichael)     -- * [Carmichael Number](maths/special
DIRECTORY.md:769:8     - Unknown word (Harshad)        -- * [Harshad Numbers](maths/special
DIRECTORY.md:771:8     - Unknown word (Krishnamurthy)  -- * [Krishnamurthy Number](maths/special
DIRECTORY.md:773:8     - Unknown word (Polygonal)      -- * [Polygonal Numbers](maths/special
DIRECTORY.md:774:8     - Unknown word (Pronic)         -- * [Pronic Number](maths/special
DIRECTORY.md:775:8     - Unknown word (Proth)          -- * [Proth Number](maths/special
DIRECTORY.md:776:8     - Unknown word (Triangular)     -- * [Triangular Numbers](maths/special
DIRECTORY.md:777:8     - Unknown word (Ugly)           -- * [Ugly Numbers](maths/special
DIRECTORY.md:778:8     - Unknown word (Weird)          -- * [Weird Number](maths/special
DIRECTORY.md:77:12     - Unknown word (Schrekenberg)   -- * [Nagel Schrekenberg](cellular_automata/nagel
DIRECTORY.md:77:6      - Unknown word (Nagel)          -- * [Nagel Schrekenberg](cellular
DIRECTORY.md:781:23    - Unknown word (Progression)    -- * [Sum Of Geometric Progression](maths/sum_of_geometric
DIRECTORY.md:783:6     - Unknown word (Sumset)         -- * [Sumset](maths/sumset.py)
DIRECTORY.md:784:6     - Unknown word (Sylvester)      -- * [Sylvester Sequence](maths/sylvester
DIRECTORY.md:785:6     - Unknown word (Tanh)           -- * [Tanh](maths/tanh.py)
DIRECTORY.md:788:6     - Unknown word (Trapezoidal)    -- * [Trapezoidal Rule](maths/trapezoidal
DIRECTORY.md:789:6     - Unknown word (Triplet)        -- * [Triplet Sum](maths/triplet_sum
DIRECTORY.md:78:10     - Unknown word (Dimensional)    -- * [One Dimensional](cellular_automata/one
DIRECTORY.md:790:6     - Unknown word (Twin)           -- * [Twin Prime](maths/twin_prime
DIRECTORY.md:794:14    - Unknown word (Congruence)     -- * [Zellers Congruence](maths/zellers_congruence
DIRECTORY.md:794:6     - Unknown word (Zellers)        -- * [Zellers Congruence](maths/zellers
DIRECTORY.md:798:12    - Unknown word (Islands)        -- * [Count Islands In Matrix](matrix/count
DIRECTORY.md:801:6     - Unknown word (Cramers)        -- * [Cramers Rule 2X2](matrix/cramers
DIRECTORY.md:809:18    - Unknown word (Island)         -- * [Max Area Of Island](matrix/max_area_of
DIRECTORY.md:815:6     - Unknown word (Sherman)       -- * [Sherman Morrison](matrix/sherman
DIRECTORY.md:816:6     - Unknown word (Spiral)        -- * [Spiral Print](matrix/spiral
DIRECTORY.md:819:22    - Unknown word (Board)         -- * [Validate Sudoku Board](matrix/validate_sudoku
DIRECTORY.md:821:4     - Unknown word (Networking)    -- ## Networking Flow
DIRECTORY.md:822:11    - Unknown word (Fulkerson)     -- * [Ford Fulkerson](networking_flow/ford
DIRECTORY.md:830:14    - Unknown word (Rectified)     -- * [Leaky Rectified Linear Unit](neural
DIRECTORY.md:830:8     - Unknown word (Leaky)         -- * [Leaky Rectified Linear Unit
DIRECTORY.md:831:8     - Unknown word (Mish)          -- * [Mish](neural_network/activation
DIRECTORY.md:834:26    - Unknown word (Hyperbolic)    -- [Soboleva Modified Hyperbolic Tangent](neural_network
DIRECTORY.md:834:37    - Unknown word (Tangent)       -- Modified Hyperbolic Tangent](neural_network/activation
DIRECTORY.md:834:8     - Unknown word (Soboleva)      -- * [Soboleva Modified Hyperbolic
DIRECTORY.md:835:8     - Unknown word (Softplus)      -- * [Softplus](neural_network/activation
DIRECTORY.md:836:8     - Unknown word (Squareplus)    -- * [Squareplus](neural_network/activation
DIRECTORY.md:837:8     - Unknown word (Swish)         -- * [Swish](neural_network/activation
DIRECTORY.md:838:6     - Unknown word (Back)          -- * [Back Propagation Neural Network
DIRECTORY.md:83:13     - Unknown word (Cipher)         -- * [Affine Cipher](ciphers/affine_cipher
DIRECTORY.md:83:6      - Unknown word (Affine)         -- * [Affine Cipher](ciphers/affine
DIRECTORY.md:846:6     - Unknown word (Alternative)   -- * [Alternative List Arrange](other
DIRECTORY.md:847:6     - Unknown word (Bankers)       -- * [Bankers Algorithm](other/bankers
DIRECTORY.md:848:12    - Unknown word (Putnam)        -- * [Davis Putnam Logemann Loveland](other
DIRECTORY.md:848:19    - Unknown word (Logemann)      -- * [Davis Putnam Logemann Loveland](other/davis
DIRECTORY.md:848:28    - Unknown word (Loveland)      -- Davis Putnam Logemann Loveland](other/davis_putnam
DIRECTORY.md:849:6     - Unknown word (Doomsday)      -- * [Doomsday](other/doomsday.py)
DIRECTORY.md:84:6      - Unknown word (Atbash)         -- * [Atbash](ciphers/atbash.py)
DIRECTORY.md:850:14    - Unknown word (Yates)         -- * [Fischer Yates Shuffle](other/fischer
DIRECTORY.md:850:20    - Unknown word (Shuffle)       -- * [Fischer Yates Shuffle](other/fischer_yates
DIRECTORY.md:850:6     - Unknown word (Fischer)       -- * [Fischer Yates Shuffle](other
DIRECTORY.md:851:6     - Unknown word (Gauss)         -- * [Gauss Easter](other/gauss
DIRECTORY.md:852:6     - Unknown word (Graham)        -- * [Graham Scan](other/graham_scan
DIRECTORY.md:854:6     - Unknown word (Guess)         -- * [Guess The Number Search](other
DIRECTORY.md:856:12    - Unknown word (Recently)      -- * [Least Recently Used](other/least_recently
DIRECTORY.md:858:13    - Unknown word (Congruential)  -- * [Linear Congruential Generator](other/linear
DIRECTORY.md:85:6      - Unknown word (Autokey)        -- * [Autokey](ciphers/autokey.py
DIRECTORY.md:860:6     - Unknown word (Magicdiamondpattern) -- * [Magicdiamondpattern](other/magicdiamondpattern
DIRECTORY.md:861:6     - Unknown word (Majority)            -- * [Majority Vote Algorithm](other
DIRECTORY.md:863:13    - Unknown word (Brackets)            -- * [Nested Brackets](other/nested_brackets
DIRECTORY.md:863:6     - Unknown word (Nested)              -- * [Nested Brackets](other/nested
DIRECTORY.md:868:6     - Unknown word (Sdes)                -- * [Sdes](other/sdes.py)
DIRECTORY.md:869:15    - Unknown word (Hanoi)               -- * [Tower Of Hanoi](other/tower_of_hanoi
DIRECTORY.md:873:6     - Unknown word (Altitude)            -- * [Altitude Pressure](physics/altitude
DIRECTORY.md:874:17    - Unknown word (Principle)           -- * [Archimedes Principle Of Buoyant Force](physics
DIRECTORY.md:874:30    - Unknown word (Buoyant)             -- Archimedes Principle Of Buoyant Force](physics/archimedes
DIRECTORY.md:874:6     - Unknown word (Archimedes)          -- * [Archimedes Principle Of Buoyant
DIRECTORY.md:875:12    - Unknown word (Orbital)             -- * [Basic Orbital Capture](physics/basic
DIRECTORY.md:875:20    - Unknown word (Capture)             -- * [Basic Orbital Capture](physics/basic_orbital
DIRECTORY.md:876:6     - Unknown word (Casimir)             -- * [Casimir Effect](physics/casimir
DIRECTORY.md:877:16    - Unknown word (Mass)                -- * [Center Of Mass](physics/center_of_mass
DIRECTORY.md:878:6     - Unknown word (Centripetal)         -- * [Centripetal Force](physics/centripetal
DIRECTORY.md:880:6     - Unknown word (Doppler)             -- * [Doppler Frequency](physics/doppler
DIRECTORY.md:881:6     - Unknown word (Grahams)             -- * [Grahams Law](physics/grahams
DIRECTORY.md:882:17    - Unknown word (Projectile)          -- * [Horizontal Projectile Motion](physics/horizontal
DIRECTORY.md:883:6     - Unknown word (Hubble)              -- * [Hubble Parameter](physics/hubble
DIRECTORY.md:886:6     - Unknown word (Kinetic)             -- * [Kinetic Energy](physics/kinetic
DIRECTORY.md:887:11    - Unknown word (Formulae)            -- * [Lens Formulae](physics/lens_formulae
DIRECTORY.md:887:6     - Unknown word (Lens)                -- * [Lens Formulae](physics/lens
DIRECTORY.md:888:29    - Unknown word (Four)                -- Lorentz Transformation Four Vector](physics/lorentz
DIRECTORY.md:888:6     - Unknown word (Lorentz)             -- * [Lorentz Transformation Four
DIRECTORY.md:889:6     - Unknown word (Malus)               -- * [Malus Law](physics/malus_law
DIRECTORY.md:893:21    - Unknown word (Gravitation)         -- * [Newtons Law Of Gravitation](physics/newtons_law
DIRECTORY.md:893:6     - Unknown word (Newtons)             -- * [Newtons Law Of Gravitation]
DIRECTORY.md:894:14    - Unknown word (Second)              -- * [Newtons Second Law Of Motion](physics
DIRECTORY.md:895:16    - Unknown word (Pendulum)            -- * [Period Of Pendulum](physics/period_of_pendulum
DIRECTORY.md:896:6     - Unknown word (Photoelectric)       -- * [Photoelectric Effect](physics/photoelectric
DIRECTORY.md:897:6     - Unknown word (Potential)           -- * [Potential Energy](physics/potential
DIRECTORY.md:898:6     - Unknown word (Rainfall)            -- * [Rainfall Intensity](physics/rainfall
DIRECTORY.md:8:10      - Unknown word (Combinations) -- * [All Combinations](backtracking/all_combination
DIRECTORY.md:900:19    - Unknown word (Molecule)            -- * [Rms Speed Of Molecule](physics/rms_speed_of
DIRECTORY.md:901:12    - Unknown word (Stress)              -- * [Shear Stress](physics/shear_stress
DIRECTORY.md:901:6     - Unknown word (Shear)               -- * [Shear Stress](physics/shear
DIRECTORY.md:902:15    - Unknown word (Sound)               -- * [Speed Of Sound](physics/speed_of_sound
DIRECTORY.md:903:20    - Unknown word (Molecules)           -- * [Speeds Of Gas Molecules](physics/speeds_of_gas
DIRECTORY.md:904:15    - Unknown word (Velocity)            -- * [Terminal Velocity](physics/terminal_velocity
DIRECTORY.md:91:6      - Unknown word (Beaufort)       -- * [Beaufort Cipher](ciphers/beaufort
DIRECTORY.md:95:17     - Unknown word (Module)         -- * [Cryptomath Module](ciphers/cryptomath
DIRECTORY.md:95:6      - Unknown word (Cryptomath)     -- * [Cryptomath Module](ciphers/cryptomath
DIRECTORY.md:9:10      - Unknown word (Permutations) -- * [All Permutations](backtracking/all_permutation
Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Errors:
LICENSE.md:10:1      - Unknown word (furnished)   -- furnished to do so, subject to
LICENSE.md:10:21     - Unknown word (subject)     -- furnished to do so, subject to the following conditions
LICENSE.md:12:11     - Unknown word (copyright)   -- The above copyright notice and this permission
LICENSE.md:12:21     - Unknown word (notice)      -- The above copyright notice and this permission
LICENSE.md:12:55     - Unknown word (shall)       -- this permission notice shall be included in all
LICENSE.md:13:11     - Unknown word (substantial) -- copies or substantial portions of the Software
LICENSE.md:13:23     - Unknown word (portions)    -- copies or substantial portions of the Software.
LICENSE.md:15:17     - Unknown word (PROVIDED)    -- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
LICENSE.md:15:43     - Unknown word (WARRANTY)    -- PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
LICENSE.md:15:59     - Unknown word (KIND)        -- WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
LICENSE.md:16:1      - Unknown word (IMPLIED)     -- IMPLIED, INCLUDING BUT NOT LIMITED
LICENSE.md:16:10     - Unknown word (INCLUDING)   -- IMPLIED, INCLUDING BUT NOT LIMITED TO THE
LICENSE.md:16:43     - Unknown word (WARRANTIES)  -- BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
LICENSE.md:17:1      - Unknown word (FITNESS)     -- FITNESS FOR A PARTICULAR PURPOSE
LICENSE.md:17:15     - Unknown word (PARTICULAR)  -- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
LICENSE.md:17:26     - Unknown word (PURPOSE)     -- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
LICENSE.md:17:38     - Unknown word (NONINFRINGEMENT) -- PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
LICENSE.md:17:67     - Unknown word (SHALL)           -- NONINFRINGEMENT. IN NO EVENT SHALL THE
LICENSE.md:18:1      - Unknown word (AUTHORS)         -- AUTHORS OR COPYRIGHT HOLDERS
LICENSE.md:18:12     - Unknown word (COPYRIGHT)       -- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
LICENSE.md:18:22     - Unknown word (HOLDERS)         -- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM
LICENSE.md:18:33     - Unknown word (LIABLE)          -- COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
LICENSE.md:18:55     - Unknown word (DAMAGES)         -- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LICENSE.md:19:1      - Unknown word (LIABILITY)       -- LIABILITY, WHETHER IN AN ACTION
LICENSE.md:19:12     - Unknown word (WHETHER)         -- LIABILITY, WHETHER IN AN ACTION OF CONTRACT
LICENSE.md:19:36     - Unknown word (CONTRACT)        -- WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
LICENSE.md:19:46     - Unknown word (TORT)            -- ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
LICENSE.md:19:54     - Unknown word (OTHERWISE)       -- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
LICENSE.md:19:65     - Unknown word (ARISING)         -- TORT OR OTHERWISE, ARISING FROM,
LICENSE.md:20:63     - Unknown word (DEALINGS)        -- OR THE USE OR OTHER DEALINGS IN THE
LICENSE.md:3:1       - Unknown word (Copyright)  -- Copyright (c) 2016-2022 TheAlgorithms
LICENSE.md:5:15      - Unknown word (hereby)     -- Permission is hereby granted, free of charge
LICENSE.md:5:22      - Unknown word (granted)    -- Permission is hereby granted, free of charge, to
LICENSE.md:5:61      - Unknown word (obtaining)  -- charge, to any person obtaining a copy
LICENSE.md:7:25      - Unknown word (restriction) -- the Software without restriction, including without limitation
LICENSE.md:7:56      - Unknown word (limitation)  -- estriction, including without limitation the rights
LICENSE.md:7:71      - Unknown word (rights)      -- without limitation the rights
LICENSE.md:8:51      - Unknown word (sublicense)  -- publish, distribute, sublicense, and/or sell
LICENSE.md:9:1       - Unknown word (copies)      -- copies of the Software, and
LICENSE.md:9:32      - Unknown word (permit)      -- the Software, and to permit persons to whom the
LICENSE.md:9:50      - Unknown word (whom)        -- to permit persons to whom the Software is
README.md:10:127    - Unknown word (Ready)      -- height="20" alt="Gitpod Ready-to-Code">
README.md:13:137    - Unknown word (Contributions) -- square" height="20" alt="Contributions Welcome">
README.md:17:140    - Unknown word (chat)          -- height="20" alt="Discord chat">
README.md:34:50     - Unknown word (education)     -- implemented in Python - for education</h3>
README.md:37:1      - Unknown word (Implementations) -- Implementations are for learning purposes
README.md:37:150    - Unknown word (discretion)      -- library. Use them at your discretion.
README.md:37:85     - Unknown word (implementations) -- less efficient than the implementations in the Python standard
audio_filters/README.md:3:100     - Unknown word (wanted)     -- frequency and amplify wanted ones.
audio_filters/README.md:3:107     - Unknown word (ones)       -- frequency and amplify wanted ones.
audio_filters/README.md:3:59      - Unknown word (attenuate)  -- of an audio signal to attenuate unwanted frequency and
audio_filters/README.md:3:69      - Unknown word (unwanted)   -- signal to attenuate unwanted frequency and amplify
audio_filters/README.md:4:1       - Unknown word (They)       -- They are used within anything
audio_filters/README.md:4:15      - Unknown word (within)     -- They are used within anything related to
audio_filters/README.md:4:22      - Unknown word (anything)   -- They are used within anything related to sound, whether
audio_filters/README.md:4:42      - Unknown word (sound)      -- anything related to sound, whether it is radio
audio_filters/README.md:4:49      - Unknown word (whether)    -- anything related to sound, whether it is radio communication
audio_filters/README.md:4:69      - Unknown word (communication) -- whether it is radio communication or a hi-fi system.
audio_filters/butterworth_filter.py:134:5     - Unknown word (gain)          -- gain_db: float,
audio_filters/butterworth_filter.py:14:5      - Unknown word (frequency)     -- frequency: int,
audio_filters/butterworth_filter.py:183:5     - Unknown word (ppmc)          -- ppmc = (big_a + 1) + (big
audio_filters/butterworth_filter.py:185:5     - Unknown word (pmpc)          -- pmpc = (big_a - 1) + (big
audio_filters/butterworth_filter.py:19:5      - Unknown word (Creates)       -- Creates a low-pass filter
audio_filters/butterworth_filter.py:22:18     - Unknown word (coeffs)        -- >>> filter.a_coeffs + filter.b_coeffs
audio_filters/butterworth_filter.py:38:5      - Unknown word (filt)          -- filt = IIRFilter(2)
audio_filters/butterworth_filter.py:39:14     - Unknown word (coefficients)  -- filt.set_coefficients([a0, a1, a2], [b0, b
audio_filters/butterworth_filter.py:6:35      - Unknown word (Butterworth) -- order IIR filters with Butterworth design.
audio_filters/butterworth_filter.py:73:10     - Unknown word (bandpass)      -- def make_bandpass(
audio_filters/butterworth_filter.py:9:1       - Unknown word (Alternatively) -- Alternatively you can use scipy.signal
audio_filters/butterworth_filter.py:9:40      - Unknown word (butter)        -- can use scipy.signal.butter, which should yield
audio_filters/iir_filter.py:16:15     - Unknown word (following)  -- Using the following transfer function
audio_filters/iir_filter.py:42:9      - Unknown word (These)      -- These should both be of size
audio_filters/iir_filter.py:47:39     - Unknown word (butterworth) -- Make a 2nd-order 1000Hz butterworth lowpass filter
audio_filters/iir_filter.py:50:54     - Unknown word (btype)       -- btype='lowpass',
audio_filters/iir_filter.py:77:9      - Unknown word (Calculate)   -- Calculate :math:`y[n]`
audio_filters/iir_filter.py:7:5       - Unknown word (Assumes)    -- Assumes working with float samples
audio_filters/show_response.py:22:9      - Unknown word (bounds)     -- def get_bounds(
audio_filters/show_response.py:23:21     - Unknown word (ndarray)    -- fft_results: np.ndarray, samplerate: int
audio_filters/show_response.py:26:20     - Unknown word (printing)   -- Get bounds for printing fft results
audio_filters/show_response.py:33:5      - Unknown word (lowest)     -- lowest = min([-20, np.min(fft
audio_filters/show_response.py:51:5      - Unknown word (filler)     -- filler = [0] * (samplerate
audio_filters/show_response.py:56:43     - Unknown word (nyquist)     -- log scale from 24 to nyquist frequency
audio_filters/show_response.py:56:7      - Unknown word (Frequencies) -- # Frequencies on log scale from 2
audio_filters/show_response.py:57:9      - Unknown word (xlim)        -- plt.xlim(24, samplerate / 2
audio_filters/show_response.py:58:17     - Unknown word (Frequency)   -- plt.xlabel("Frequency (Hz)")
audio_filters/show_response.py:58:9      - Unknown word (xlabel)      -- plt.xlabel("Frequency (Hz)")
audio_filters/show_response.py:59:9      - Unknown word (xscale)      -- plt.xscale("log")
audio_filters/show_response.py:61:22     - Unknown word (reasonable)  -- # Display within reasonable bounds
audio_filters/show_response.py:63:9      - Unknown word (ylim)        -- plt.ylim(max([-80, bounds[0]
audio_filters/show_response.py:64:17     - Unknown word (Gain)        -- plt.ylabel("Gain (dB)")
audio_filters/show_response.py:64:9      - Unknown word (ylabel)      -- plt.ylabel("Gain (dB)")
audio_filters/show_response.py:85:18     - Unknown word (angle)       -- fft_out = np.angle(np.fft.fft(outputs)
backtracking/README.md:1:3       - Unknown word (Backtracking) -- # Backtracking
backtracking/README.md:3:26      - Unknown word (speed)        -- Backtracking is a way to speed up the search process
backtracking/README.md:3:57      - Unknown word (removing)     -- the search process by removing candidates when they
backtracking/README.md:3:82      - Unknown word (they)         -- removing candidates when they can't be the solution
backtracking/all_combinations.py:112:12    - Unknown word (Benchmark)    -- print("Benchmark:")
backtracking/all_combinations.py:13:5      - Unknown word (combination)  -- def combination_lists(n: int, k: int
backtracking/all_combinations.py:15:5      - Unknown word (Generates)    -- Generates all possible combinations
backtracking/all_combinations.py:2:21      - Unknown word (want)       -- In this problem, we want to determine all possible
backtracking/all_combinations.py:2:43      - Unknown word (possible)   -- want to determine all possible combinations of k
backtracking/all_combinations.py:34:19     - Unknown word (must)         -- ValueError: k must not be negative
backtracking/all_combinations.py:3:32      - Unknown word (backtracking) -- out of 1 ... n. We use backtracking to solve this problem
backtracking/all_combinations.py:3:48      - Unknown word (solve)        -- use backtracking to solve this problem.
backtracking/all_combinations.py:5:41      - Unknown word (choose)       -- C(n,k)) which is O(n choose k) = O((n!/(k! * (n
backtracking/all_combinations.py:5:6       - Unknown word (complexity)   -- Time complexity: O(C(n,k)) which is
backtracking/all_combinations.py:72:24     - Unknown word (recursively)  -- Helper function to recursively build all combinations
backtracking/all_permutations.py:24:13     - Unknown word (that)       -- We know that each state has exactly
backtracking/all_permutations.py:24:33     - Unknown word (exactly)    -- that each state has exactly len(sequence) - index
backtracking/all_permutations.py:24:8      - Unknown word (know)       -- We know that each state has
backtracking/all_permutations.py:25:27     - Unknown word (reaches)    -- It terminates when it reaches the end of the given
backtracking/all_permutations.py:25:8      - Unknown word (terminates) -- It terminates when it reaches the
backtracking/all_permutations.py:27:68     - Unknown word (generated)  -- which permutations are generated.
backtracking/all_permutations.py:28:42     - Unknown word (permutation) -- sequence: The current permutation being built.
backtracking/all_permutations.py:28:54     - Unknown word (being)       -- current permutation being built.
backtracking/all_permutations.py:30:32     - Unknown word (track)       -- index_used: list to track which elements are used
backtracking/all_permutations.py:3:8       - Unknown word (given)      -- of the given sequence. We use backtracking
backtracking/all_permutations.py:6:9       - Unknown word (denotes)    -- where n denotes the length of the given
backtracking/coloring.py:11:28     - Unknown word (colored)    -- neighbours: list[int], colored_vertices: list[int]
backtracking/coloring.py:11:5      - Unknown word (neighbours) -- neighbours: list[int], colored
backtracking/coloring.py:14:14     - Unknown word (neighbour)  -- For each neighbour check if the coloring
backtracking/coloring.py:29:30     - Unknown word (satisfy)    -- Does any neighbour not satisfy the constraints
backtracking/coloring.py:2:31      - Unknown word (coloring)   -- Coloring also called "m coloring problem"
backtracking/coloring.py:2:7       - Unknown word (Coloring)   -- Graph Coloring also called "m coloring
backtracking/coloring.py:3:1       - Unknown word (consists)   -- consists of coloring a given
backtracking/coloring.py:44:38     - Unknown word (meaning)    -- complete return True (meaning that we successfully
backtracking/coloring.py:44:54     - Unknown word (successfully) -- True (meaning that we successfully colored the graph)
backtracking/coloring.py:4:23      - Unknown word (vertices)   -- such that no adjacent vertices are assigned the same
backtracking/coloring.py:50:60     - Unknown word (leads)        -- check if this coloring leads to a solution
backtracking/coloring.py:52:18     - Unknown word (Uncolor)      -- 2.5. Uncolor given vertex
backtracking/coloring.py:90:30     - Unknown word (subroutine)   -- Wrapper function to call subroutine called util_color
backtracking/coloring.py:91:16     - Unknown word (either)       -- which will either return True or False
backtracking/coloring.py:92:50     - Unknown word (filled)       -- colored_vertices list is filled with correct colorings
backtracking/coloring.py:92:62     - Unknown word (correct)      -- list is filled with correct colorings
backtracking/coloring.py:92:70     - Unknown word (colorings)    -- filled with correct colorings
backtracking/combination_sum.py:20:31     - Unknown word (searches)    -- recursive function that searches for possible combinations
backtracking/combination_sum.py:21:10     - Unknown word (bigger)      -- of a bigger current combination
backtracking/combination_sum.py:26:34     - Unknown word (obtain)      -- The value we need to obtain by summing our integers
backtracking/combination_sum.py:26:44     - Unknown word (summing)     -- we need to obtain by summing our integers in the
backtracking/combination_sum.py:2:53      - Unknown word (consisting)  -- we are given a list consisting of distinct integers
backtracking/combination_sum.py:2:8       - Unknown word (Combination) -- In the Combination Sum problem, we are
backtracking/combination_sum.py:3:38      - Unknown word (whose)       -- all the combinations whose sum equals to target
backtracking/combination_sum.py:4:28      - Unknown word (than)        -- use an element more than one.
backtracking/combination_sum.py:50:45     - Unknown word (exceeded)    -- maximum recursion depth exceeded
backtracking/combination_sum.py:6:17      - Unknown word (Average)     -- Time complexity(Average Case): O(n!)
backtracking/combination_sum.py:9:6       - Unknown word (candidates)  -- 1 <= candidates.length <= 30
backtracking/crossword_puzzle_solver.py:102:43    - Unknown word (paragraphs) -- word', 'four', 'more', 'paragraphs']
backtracking/crossword_puzzle_solver.py:123:5     - Unknown word (PUZZLE)     -- PUZZLE = [[""] * 3 for _ in
backtracking/crossword_puzzle_solver.py:5:5       - Unknown word (puzzle)     -- puzzle: list[list[str]], word
backtracking/crossword_puzzle_solver.py:82:11     - Unknown word (crossword)  -- def solve_crossword(puzzle: list[list[str
backtracking/crossword_puzzle_solver.py:84:5      - Unknown word (Solve)      -- Solve the crossword puzzle
backtracking/crossword_puzzle_solver.py:8:28      - Unknown word (placed)     -- Check if a word can be placed at the given position
backtracking/crossword_puzzle_solver.py:93:27     - Unknown word (four)       -- > words = ['word', 'four', 'more', 'last']
backtracking/generate_parentheses.py:15:36     - Unknown word (balanced)    -- valid combinations of balanced parentheses using recursion
backtracking/generate_parentheses.py:17:30     - Unknown word (representing) -- param partial: A string representing the current combination
backtracking/generate_parentheses.py:24:37     - Unknown word (explore)      -- function uses recursion to explore all possible combinations
backtracking/generate_parentheses.py:25:49     - Unknown word (remain)       -- step, the parentheses remain balanced.
backtracking/generate_parentheses.py:25:5      - Unknown word (ensuring)     -- ensuring that at each step, the
backtracking/generate_parentheses.py:2:16      - Unknown word (Soni)       -- author: Aayush Soni
backtracking/generate_parentheses.py:2:9       - Unknown word (Aayush)     -- author: Aayush Soni
backtracking/generate_parentheses.py:39:33     - Unknown word (parenthesis)  -- If we can add an open parenthesis, do so, and recurse
backtracking/generate_parentheses.py:3:1       - Unknown word (Given)      -- Given n pairs of parentheses
backtracking/generate_parentheses.py:3:18      - Unknown word (parentheses) -- Given n pairs of parentheses, write a function to
backtracking/generate_parentheses.py:4:22      - Unknown word (formed)      -- combinations of well-formed parentheses.
backtracking/generate_parentheses.py:55:36     - Unknown word (approach)     -- function uses a recursive approach to generate the combinations
backtracking/generate_parentheses.py:57:10     - Unknown word (Complexity)   -- Time Complexity: O(2^(2n)) - In the
backtracking/generate_parentheses.py:57:41     - Unknown word (worst)        -- O(2^(2n)) - In the worst case, we have 2^(2n
backtracking/generate_parentheses.py:7:1       - Unknown word (Leetcode)    -- Leetcode link: https://leetcode
backtracking/hamiltonian_cycle.py:113:48    - Unknown word (indicating)  -- return array of vertices indicating hamiltonian cycle
backtracking/hamiltonian_cycle.py:113:59    - Unknown word (hamiltonian) -- vertices indicating hamiltonian cycle
backtracking/hamiltonian_cycle.py:116:35    - Unknown word (edges)       -- graph consists of 5 edges.
backtracking/hamiltonian_cycle.py:116:5     - Unknown word (Following)   -- Following graph consists of 5
backtracking/hamiltonian_cycle.py:117:11    - Unknown word (look)        -- If we look closely, we can see
backtracking/hamiltonian_cycle.py:117:16    - Unknown word (closely)     -- If we look closely, we can see that there
backtracking/hamiltonian_cycle.py:117:41    - Unknown word (there)       -- closely, we can see that there are multiple Hamiltonian
backtracking/hamiltonian_cycle.py:15:60     - Unknown word (validating)  -- add next into path by validating 2 statements
backtracking/hamiltonian_cycle.py:15:73     - Unknown word (statements)  -- path by validating 2 statements
backtracking/hamiltonian_cycle.py:16:29     - Unknown word (between)     -- There should be path between current and next vertex
backtracking/hamiltonian_cycle.py:16:8      - Unknown word (There)       -- 1. There should be path between
backtracking/hamiltonian_cycle.py:171:68    - Unknown word (them)        -- we have not visited them yet
backtracking/hamiltonian_cycle.py:18:13     - Unknown word (validations) -- If both validations succeed we return True
backtracking/hamiltonian_cycle.py:18:25     - Unknown word (succeed)     -- If both validations succeed we return True, saying
backtracking/hamiltonian_cycle.py:18:49     - Unknown word (saying)      -- succeed we return True, saying that it is possible
backtracking/hamiltonian_cycle.py:19:20     - Unknown word (otherwise)   -- this vertices, otherwise we return False
backtracking/hamiltonian_cycle.py:2:3       - Unknown word (Hamiltonian) -- A Hamiltonian cycle (Hamiltonian circuit
backtracking/hamiltonian_cycle.py:33:29     - Unknown word (trying)      -- Case 2: Same graph, but trying to connect to node that
backtracking/hamiltonian_cycle.py:3:22      - Unknown word (visits)      -- through a graph that visits each node exactly once
backtracking/hamiltonian_cycle.py:4:1       - Unknown word (Determining) -- Determining whether such paths and
backtracking/hamiltonian_cycle.py:4:52      - Unknown word (graphs)      -- and cycles exist in graphs
backtracking/hamiltonian_cycle.py:53:20     - Unknown word (visited)     -- 1. Check if we visited all of vertices
backtracking/hamiltonian_cycle.py:54:48     - Unknown word (starting)    -- visited vertex has path to starting vertex return True either
backtracking/hamiltonian_cycle.py:58:43     - Unknown word (transiting)  -- vertex is valid for transiting from current vertex
backtracking/hamiltonian_cycle.py:59:17     - Unknown word (Remember)    -- 2.1 Remember next vertex as next
backtracking/hamiltonian_cycle.py:60:48     - Unknown word (going)       -- recursive call and check if going to this vertex solves
backtracking/hamiltonian_cycle.py:60:69     - Unknown word (solves)      -- going to this vertex solves problem
backtracking/hamiltonian_cycle.py:62:40     - Unknown word (remembered)  -- Else backtrack, delete remembered vertex
backtracking/hamiltonian_cycle.py:78:19     - Unknown word (calculation) -- middle of calculation
backtracking/knight_tour.py:1:10      - Unknown word (Tour)       -- # Knight Tour Intro: https://www.youtube
backtracking/knight_tour.py:1:3       - Unknown word (Knight)     -- # Knight Tour Intro: https:/
backtracking/knight_tour.py:25:5      - Unknown word (permissible) -- permissible_positions = []
backtracking/knight_tour.py:27:9      - Unknown word (inner)       -- for inner_position in positions
backtracking/knight_tour.py:35:17     - Unknown word (board)       -- def is_complete(board: list[list[int]]) -
backtracking/knight_tour.py:37:25     - Unknown word (matrix)      -- Check if the board (matrix) has been completely
backtracking/knight_tour.py:37:37     - Unknown word (been)        -- the board (matrix) has been completely filled with
backtracking/knight_tour.py:37:42     - Unknown word (completely)  -- board (matrix) has been completely filled with non-zero
backtracking/knight_tour.py:46:20     - Unknown word (elem)        -- return not any(elem == 0 for row in board
backtracking/knight_tour.py:49:17     - Unknown word (tour)        -- def open_knight_tour_helper(
backtracking/knight_tour.py:74:38     - Unknown word (performed)   -- if the tour cannot be performed for the given size.
backtracking/knight_tour.py:8:36      - Unknown word (knight)     -- the valid positions a knight can move to from the
backtracking/match_word_pattern.py:36:13     - Unknown word (mapped)     -- mapped_str = pattern_map[char
backtracking/match_word_pattern.py:6:39      - Unknown word (against)    -- The string to match against the pattern.
backtracking/minimax.py:20:77     - Unknown word (optimal)    -- which helps achieve the optimal
backtracking/minimax.py:22:55     - Unknown word (maximized)  -- maximizer, then the score is maximized.
backtracking/minimax.py:23:26     - Unknown word (minimizer)  -- If the player is the minimizer, then the score is minimized
backtracking/minimax.py:23:55     - Unknown word (minimized)  -- minimizer, then the score is minimized.
backtracking/minimax.py:2:18      - Unknown word (achieve)    -- Minimax helps to achieve maximum score in a game
backtracking/minimax.py:2:75      - Unknown word (moves)      -- checking all possible moves
backtracking/minimax.py:2:9       - Unknown word (helps)      -- Minimax helps to achieve maximum score
backtracking/minimax.py:30:22     - Unknown word (containing) -- - scores: A list containing the scores of the leaves
backtracking/minimax.py:33:5      - Unknown word (Returns)    -- Returns:
backtracking/minimax.py:48:17     - Unknown word (Scores)     -- ValueError: Scores cannot be empty
backtracking/minimax.py:5:39      - Unknown word (scores)     -- index of current node in scores[].
backtracking/minimax.py:65:19     - Unknown word (maximizer's) -- # If it's the maximizer's turn, choose the maximum
backtracking/minimax.py:65:31     - Unknown word (turn)        -- it's the maximizer's turn, choose the maximum
backtracking/minimax.py:6:15      - Unknown word (maximizer)  -- if move is of maximizer return true else false
backtracking/minimax.py:73:19     - Unknown word (minimizer's) -- # If it's the minimizer's turn, choose the minimum
backtracking/minimax.py:87:12     - Unknown word (Optimal)     -- print("Optimal value : ", end="")
backtracking/n_queens.py:18:19     - Unknown word (returns)    -- This function returns a boolean value True
backtracking/n_queens.py:19:5      - Unknown word (considering) -- considering the current state of
backtracking/n_queens.py:23:18     - Unknown word (Coordinates) -- row, column: Coordinates of the cell on the board
backtracking/n_queens.py:3:5       - Unknown word (nqueens)    -- The nqueens problem is of placing
backtracking/n_queens.py:50:19     - Unknown word (creates)     -- This function creates a state space tree and
backtracking/n_queens.py:51:5      - Unknown word (receives)    -- receives a False Boolean and
backtracking/n_queens.py:56:27     - Unknown word (exceeds)     -- If the row number exceeds N, we have a board with
backtracking/n_queens.py:57:33     - Unknown word (appended)    -- that combination is appended to the solution list
backtracking/n_queens.py:57:80     - Unknown word (printed)     -- list and the board is printed.
backtracking/n_queens.py:60:9      - Unknown word (printboard)  -- printboard(board)
backtracking/n_queens.py:65:74     - Unknown word (feasible)    -- column to check if it is feasible to
backtracking/n_queens.py:67:42     - Unknown word (particular)  -- combinations for that particular branch are successful
backtracking/n_queens.py:79:5      - Unknown word (Prints)      -- Prints the boards that have
backtracking/n_queens_math.py:111:36    - Unknown word (previously)   -- apply that we learned previously. First we check that
backtracking/n_queens_math.py:112:59    - Unknown word (because)      -- not other same value because if there is it means
backtracking/n_queens_math.py:113:28    - Unknown word (collision)    -- # that there are a collision in vertical. Then we
backtracking/n_queens_math.py:119:74    - Unknown word (their)        -- formulas not exist in their variables
backtracking/n_queens_math.py:11:14     - Unknown word (ways)       -- the possible ways, we can simplify it
backtracking/n_queens_math.py:14:8      - Unknown word (visualize)  -- We can visualize it like this:
backtracking/n_queens_math.py:151:35    - Unknown word (were)         -- boards), "solutions were found.")
backtracking/n_queens_math.py:19:26     - Unknown word (movement)   -- chessboard vertical movement could be the rows and
backtracking/n_queens_math.py:19:35     - Unknown word (could)      -- chessboard vertical movement could be the rows and horizontal
backtracking/n_queens_math.py:19:48     - Unknown word (rows)       -- movement could be the rows and horizontal movement
backtracking/n_queens_math.py:19:6      - Unknown word (chessboard) -- On a chessboard vertical movement could
backtracking/n_queens_math.py:20:5      - Unknown word (columns)    -- the columns.
backtracking/n_queens_math.py:27:44     - Unknown word (would)      -- array for this example would look like this: [1,
backtracking/n_queens_math.py:34:26     - Unknown word (halfway)    -- this point we have it halfway completed and we will
backtracking/n_queens_math.py:34:56     - Unknown word (treat)      -- completed and we will treat the chessboard as a
backtracking/n_queens_math.py:35:1      - Unknown word (Cartesian)  -- Cartesian plane.  Hereinafter
backtracking/n_queens_math.py:35:19     - Unknown word (Hereinafter) -- Cartesian plane.  Hereinafter we are going to remember
backtracking/n_queens_math.py:35:47     - Unknown word (remember)    -- Hereinafter we are going to remember basic math, so in the
backtracking/n_queens_math.py:36:1      - Unknown word (learned)     -- learned this formula:
backtracking/n_queens_math.py:36:14     - Unknown word (formula)     -- learned this formula:
backtracking/n_queens_math.py:44:49     - Unknown word (angles)      -- get the slope. For the angles 45º (right diagonal
backtracking/n_queens_math.py:45:30     - Unknown word (gives)       -- diagonal) this formula gives us m = 1, and m = -
backtracking/n_queens_math.py:45:57     - Unknown word (respectively) -- us m = 1, and m = -1 respectively.
backtracking/n_queens_math.py:4:26      - Unknown word (placing)    -- n queens problem is: placing N queens on a N * N
backtracking/n_queens_math.py:4:7       - Unknown word (queens)     -- The n queens problem is: placing
backtracking/n_queens_math.py:56:35     - Unknown word (axis)         -- the line crosses the Y axis (to get more information
backtracking/n_queens_math.py:5:63      - Unknown word (means)      -- that chess board.  This means that one queen
backtracking/n_queens_math.py:62:5      - Unknown word (since)        -- And since we already have the
backtracking/n_queens_math.py:6:61      - Unknown word (diagonal)   -- horizontal, vertical and diagonal lines.
backtracking/n_queens_math.py:74:1      - Unknown word (Applying)     -- Applying these two formulas we
backtracking/n_queens_math.py:74:10     - Unknown word (these)        -- Applying these two formulas we can
backtracking/n_queens_math.py:74:20     - Unknown word (formulas)     -- Applying these two formulas we can check if a queen
backtracking/n_queens_math.py:74:79     - Unknown word (attacked)     -- some position is being attacked
backtracking/n_queens_math.py:75:20     - Unknown word (vice)         -- for another one or vice versa.
backtracking/n_queens_math.py:75:25     - Unknown word (versa)        -- another one or vice versa.
backtracking/n_queens_math.py:75:5      - Unknown word (another)      -- for another one or vice versa.
backtracking/n_queens_math.py:84:20     - Unknown word (collisions)   -- diagonal_right_collisions: list[int],
backtracking/n_queens_math.py:86:5      - Unknown word (boards)       -- boards: list[list[str]],
backtracking/power_sum.py:3:56      - Unknown word (expressed)  -- given integer X, can be expressed as the sum
backtracking/power_sum.py:4:12      - Unknown word (powers)     -- of the Nth powers of unique, natural numbers
backtracking/power_sum.py:5:44      - Unknown word (squares)    -- combinations of unique squares adding up to 13.
backtracking/power_sum.py:5:52      - Unknown word (adding)     -- ombinations of unique squares adding up to 13.
backtracking/rat_in_maze.py:130:5     - Unknown word (solved)      -- solved = run_maze(
backtracking/rat_in_maze.py:148:76    - Unknown word (directions)  -- going in one of four directions:
backtracking/rat_in_maze.py:14:23     - Unknown word (dimensional) -- - maze: A two dimensional matrix of zeros and
backtracking/rat_in_maze.py:156:40    - Unknown word (Otherwise)   -- path is found True, Otherwise False.
backtracking/rat_in_maze.py:23:25     - Unknown word (coordinates) -- destination coordinates are invalid.
backtracking/rat_in_maze.py:25:21     - Unknown word (navigates)   -- This method navigates through a maze represented
backtracking/rat_in_maze.py:25:46     - Unknown word (represented) -- navigates through a maze represented as an n by n matrix
backtracking/rat_in_maze.py:27:9      - Unknown word (aiming)      -- aiming to reach a destination
backtracking/rat_in_maze.py:28:30     - Unknown word (walls)       -- The maze consists of walls (1s) and open paths
backtracking/rat_in_maze.py:29:12     - Unknown word (providing)   -- By providing custom row and column
backtracking/rat_in_maze.py:30:22     - Unknown word (adjusted)    -- cells can be adjusted.
backtracking/rat_in_maze.py:30:9      - Unknown word (cells)       -- cells can be adjusted.
backtracking/rat_in_maze.py:44:44     - Unknown word (represent)   -- maze, the zeros (0s) represent one of the possible
backtracking/rat_in_maze.py:4:11      - Unknown word (maze)       -- def solve_maze(
backtracking/sudoku.py:15:1      - Unknown word (Matrix)     -- Matrix = list[list[int]]
backtracking/sudoku.py:17:3      - Unknown word (assigning)  -- # assigning initial values to the
backtracking/sudoku.py:2:44      - Unknown word (objective)  -- filled 9x9 2D array, the objective is to fill a 9x9
backtracking/sudoku.py:2:9       - Unknown word (partially)  -- Given a partially filled 9x9 2D array
backtracking/sudoku.py:3:25      - Unknown word (numbered)   -- square grid with digits numbered 1 to 9, so that every
backtracking/sudoku.py:47:25     - Unknown word (subgrids)   -- column, and the 3x3 subgrids contain the digit 'n
backtracking/sudoku.py:47:34     - Unknown word (contain)    -- and the 3x3 subgrids contain the digit 'n'.
backtracking/sudoku.py:4:17      - Unknown word (nine)       -- and each of the nine 3x3 sub-grids contains
backtracking/sudoku.py:4:30      - Unknown word (grids)      -- of the nine 3x3 sub-grids contains all of the
backtracking/sudoku.py:65:19     - Unknown word (finds)      -- This function finds an empty location so
backtracking/sudoku.py:75:5      - Unknown word (sudoku)     -- def sudoku(grid: Matrix) -> Matrix
backtracking/sudoku.py:77:42     - Unknown word (attempts)   -- partially filled-in grid and attempts to assign values to
backtracking/sudoku.py:78:47     - Unknown word (meet)       -- locations in such a way to meet the requirements
backtracking/sudoku.py:78:56     - Unknown word (requirements) -- such a way to meet the requirements
backtracking/sudoku.py:78:9      - Unknown word (unassigned) -- all unassigned locations in such a
backtracking/sudoku.py:79:30     - Unknown word (duplication)  -- Sudoku solution (non-duplication across rows, columns
backtracking/sudoku.py:79:42     - Unknown word (across)       -- solution (non-duplication across rows, columns, and boxes
backtracking/sudoku.py:79:68     - Unknown word (boxes)        -- across rows, columns, and boxes)
backtracking/sudoku.py:79:9      - Unknown word (Sudoku)       -- for Sudoku solution (non-duplication
backtracking/sum_of_subsets.py:13:29     - Unknown word (soln)           -- generate_sum_of_subsets_soln(nums: list[int], max
backtracking/sum_of_subsets.py:17:5      - Unknown word (remaining)      -- remaining_nums_sum = sum(nums
backtracking/sum_of_subsets.py:2:12      - Unknown word (subsetsproblem) -- The sum-of-subsetsproblem states that a set of
backtracking/sum_of_subsets.py:32:23     - Unknown word (branching)      -- It terminates the branching of a node when any of
backtracking/sum_of_subsets.py:34:20     - Unknown word (follows)        -- This algorithm follows depth-fist-search and
backtracking/sum_of_subsets.py:34:34     - Unknown word (fist)           -- algorithm follows depth-fist-search and backtracks
backtracking/sum_of_subsets.py:35:5      - Unknown word (branchable)     -- branchable.
backtracking/sum_of_subsets.py:3:33      - Unknown word (subsets)        -- determine all possible subsets of the given set whose
backtracking/sum_of_subsets.py:3:64      - Unknown word (summation)      -- the given set whose summation sum
backtracking/sum_of_subsets.py:6:1       - Unknown word (Summation)      -- Summation of the chosen numbers
backtracking/sum_of_subsets.py:6:18      - Unknown word (chosen)         -- Summation of the chosen numbers must be equal
backtracking/word_break.py:13:10     - Unknown word (segmentation) -- word segmentation is possible starting
backtracking/word_break.py:24:20     - Unknown word (leetcode)     -- >>> backtrack("leetcode", {"leet", "code"},
backtracking/word_break.py:24:33     - Unknown word (leet)         -- backtrack("leetcode", {"leet", "code"}, 0)
backtracking/word_break.py:27:20     - Unknown word (applepenapple) -- >>> backtrack("applepenapple", {"apple", "pen"},
backtracking/word_break.py:30:20     - Unknown word (catsandog)     -- >>> backtrack("catsandog", {"cats", "dog", "sand
backtracking/word_break.py:30:34     - Unknown word (cats)          -- backtrack("catsandog", {"cats", "dog", "sand", "and
backtracking/word_break.py:34:44     - Unknown word (reached)       -- the starting index has reached the end of the string
backtracking/word_break.py:4:19      - Unknown word (segmented)  -- the string can be segmented into a sequence of one
backtracking/word_break.py:50:5      - Unknown word (Determines)    -- Determines if the input string
backtracking/word_ladder.py:24:35     - Unknown word (transformations) -- list[str]): The list of transformations from begin_word to current
backtracking/word_ladder.py:2:6       - Unknown word (Ladder)     -- Word Ladder is a classic problem
backtracking/word_ladder.py:40:55     - Unknown word (goad)            -- , "gold", {"load", "goad", "gold", "lead", "lord
backtracking/word_ladder.py:40:79     - Unknown word (lord)            -- goad", "gold", "lead", "lord"})
backtracking/word_ladder.py:43:47     - Unknown word (came)            -- ["game"], "code", {"came", "cage", "code", "cade
backtracking/word_ladder.py:43:55     - Unknown word (cage)            -- , "code", {"came", "cage", "code", "cade", "gave
backtracking/word_ladder.py:43:71     - Unknown word (cade)            -- came", "cage", "code", "cade", "gave"})
backtracking/word_ladder.py:43:79     - Unknown word (gave)            -- cage", "code", "cade", "gave"})
backtracking/word_ladder.py:4:4       - Unknown word (changing)   -- by changing one letter at a time
backtracking/word_ladder.py:54:13     - Unknown word (transformed)     -- transformed_word = current_word
backtracking/word_ladder.py:57:19     - Unknown word (Recur)           -- # Recur with the new word added
backtracking/word_ladder.py:5:6       - Unknown word (intermediate) -- Each intermediate word must be a valid
backtracking/word_ladder.py:68:10     - Unknown word (ladder)          -- def word_ladder(begin_word: str, end
backtracking/word_ladder.py:6:5       - Unknown word (goal)         -- The goal is to find a transformation
backtracking/word_ladder.py:74:62     - Unknown word (starts)          -- which the transformation starts.
backtracking/word_search.py:10:26     - Unknown word (horizontally) -- where adjacent cells are horizontally or vertically neighboring
backtracking/word_search.py:10:42     - Unknown word (vertically)   -- are horizontally or vertically neighboring.
backtracking/word_search.py:10:53     - Unknown word (neighboring)  -- horizontally or vertically neighboring.
backtracking/word_search.py:23:2      - Unknown word (ABCCED)       -- "ABCCED"
backtracking/word_search.py:28:16     - Unknown word (notes)        -- Implementation notes: Use backtracking approach
backtracking/word_search.py:2:11      - Unknown word (Alexander)  -- Author : Alexander Pantyukhin
backtracking/word_search.py:2:21      - Unknown word (Pantyukhin) -- Author : Alexander Pantyukhin
backtracking/word_search.py:3:11      - Unknown word (November)   -- Date : November 24, 2022
backtracking/word_search.py:47:5      - Unknown word (exits)        -- def exits_word(
backtracking/word_search.py:69:5      - Unknown word (traverts)     -- traverts_directions = [(0, 1
backtracking/word_search.py:72:9      - Unknown word (direction)    -- for direction in traverts_directions
backtracking/word_search.py:97:79     - Unknown word (ABCB)         -- "A","D","E","E"]], "ABCB")
backtracking/word_search.py:9:17      - Unknown word (constructed) -- The word can be constructed from letters of sequentially
backtracking/word_search.py:9:45      - Unknown word (sequentially) -- constructed from letters of sequentially adjacent cells,
bit_manipulation/README.md:3:115     - Unknown word (more)         -- and decrypts messages (more on that in the 'ciphers
bit_manipulation/README.md:3:136     - Unknown word (ciphers)      -- more on that in the 'ciphers' folder) or just do
bit_manipulation/README.md:3:156     - Unknown word (just)         -- ciphers' folder) or just do anything at the lowest
bit_manipulation/README.md:3:196     - Unknown word (your)         -- the lowest level of your computer.
bit_manipulation/README.md:3:32      - Unknown word (manipulating) -- manipulation is the act of manipulating bits to detect errors
bit_manipulation/README.md:3:45      - Unknown word (bits)         -- act of manipulating bits to detect errors (hamming
bit_manipulation/README.md:3:68      - Unknown word (hamming)      -- bits to detect errors (hamming code), encrypts and
bit_manipulation/README.md:3:83      - Unknown word (encrypts)     -- errors (hamming code), encrypts and decrypts messages
bit_manipulation/README.md:3:96      - Unknown word (decrypts)     -- code), encrypts and decrypts messages (more on that
bit_manipulation/binary_and_operator.py:8:54      - Unknown word (provided)   -- operation on the integers provided.
bit_manipulation/binary_count_setbits.py:4:33      - Unknown word (representation) -- number of 1's in binary representation of that number.
bit_manipulation/binary_or_operator.py:28:41     - Unknown word (interpreted) -- float' object cannot be interpreted as an integer
bit_manipulation/binary_or_operator.py:36:46     - Unknown word (leading)     -- )[2:] # remove the leading "0b"
bit_manipulation/binary_shifts.py:1:25      - Unknown word (shifts)     -- Information on binary shifts:
bit_manipulation/binary_shifts.py:6:5       - Unknown word (logical)    -- def logical_left_shift(number: int
bit_manipulation/binary_shifts.py:71:35     - Unknown word (arithmetically) -- is the integer to be arithmetically right shifted 'shift
bit_manipulation/binary_shifts.py:90:30     - Unknown word (complement)     -- # Get binary (2's complement) representation of negative
bit_manipulation/binary_shifts.py:9:35      - Unknown word (logically)  -- is the integer to be logically left shifted 'shift
bit_manipulation/binary_shifts.py:9:50      - Unknown word (shifted)    -- to be logically left shifted 'shift_amount' times
bit_manipulation/binary_shifts.py:9:73      - Unknown word (times)      -- shifted 'shift_amount' times.
bit_manipulation/binary_twos_complement.py:4:5       - Unknown word (twos)       -- def twos_complement(number: int
bit_manipulation/bitwise_addition_recursive.py:18:31     - Unknown word (MUST)        -- TypeError: Both arguments MUST be integers!
bit_manipulation/bitwise_addition_recursive.py:2:1       - Unknown word (Calculates) -- Calculates the sum of two non-negative
bit_manipulation/bitwise_addition_recursive.py:2:63      - Unknown word (operators)  -- integers using bitwise operators
bit_manipulation/bitwise_addition_recursive.py:3:11      - Unknown word (explanation) -- Wikipedia explanation: https://en.wikipedia
bit_manipulation/bitwise_addition_recursive.py:44:5      - Unknown word (carry)       -- carry = number & other_number
bit_manipulation/bitwise_addition_recursive.py:7:13      - Unknown word (addition)    -- def bitwise_addition_recursive(number: int
bit_manipulation/count_1s_brian_kernighan_method.py:35:23     - Unknown word (arrive)      -- # This way we arrive at next set bit (next
bit_manipulation/count_1s_brian_kernighan_method.py:35:55     - Unknown word (instead)     -- next set bit (next 1) instead of looping
bit_manipulation/count_1s_brian_kernighan_method.py:35:66     - Unknown word (looping)     -- (next 1) instead of looping
bit_manipulation/count_1s_brian_kernighan_method.py:36:48     - Unknown word (hence)       -- and checking for 1s hence the
bit_manipulation/count_1s_brian_kernighan_method.py:3:60      - Unknown word (Brian)      -- 2 bit integer using Brian Kernighan's way.
bit_manipulation/count_1s_brian_kernighan_method.py:3:66      - Unknown word (Kernighan's) -- integer using Brian Kernighan's way.
bit_manipulation/count_number_of_one_bits.py:33:30     - Unknown word (modulo)     -- set_bits_count_using_modulo_operator(number: int
bit_manipulation/count_number_of_one_bits.py:4:30      - Unknown word (brian)      -- set_bits_count_using_brian_kernighans_algorithm
bit_manipulation/count_number_of_one_bits.py:4:36      - Unknown word (kernighans) -- bits_count_using_brian_kernighans_algorithm(number: int
bit_manipulation/count_number_of_one_bits.py:63:5      - Unknown word (benchmark)  -- def benchmark() -> None:
bit_manipulation/count_number_of_one_bits.py:65:24     - Unknown word (comparing)  -- Benchmark code for comparing 2 functions, with different
bit_manipulation/count_number_of_one_bits.py:66:36     - Unknown word (consistently) -- Kernighan's algorithm is consistently faster than using modulo
bit_manipulation/count_number_of_one_bits.py:66:49     - Unknown word (faster)       -- algorithm is consistently faster than using modulo_operator
bit_manipulation/count_number_of_one_bits.py:73:9      - Unknown word (timing)       -- timing = timeit(
bit_manipulation/excess_3_code.py:1:5       - Unknown word (excess)     -- def excess_3_code(number: int)
bit_manipulation/find_previous_power_of_two.py:23:24     - Unknown word (Equivalent) -- power <<= 1  # Equivalent to multiplying by 2
bit_manipulation/find_previous_power_of_two.py:23:38     - Unknown word (multiplying) -- 1 # Equivalent to multiplying by 2
bit_manipulation/find_previous_power_of_two.py:3:14      - Unknown word (largest)    -- Find the largest power of two that is
bit_manipulation/gray_code_sequence.py:10:19     - Unknown word (appears)    -- c) An integer appears at most one times in
bit_manipulation/gray_code_sequence.py:1:5       - Unknown word (gray)       -- def gray_code(bit_count: int
bit_manipulation/gray_code_sequence.py:33:28     - Unknown word (operand)    -- TypeError: unsupported operand type(s) for <<: 'int
bit_manipulation/gray_code_sequence.py:36:17     - Unknown word (represents) -- # bit count represents no. of bits in the gray
bit_manipulation/gray_code_sequence.py:63:17     - Unknown word (achieved)   -- # Base case achieved when either n = 0 or
bit_manipulation/gray_code_sequence.py:70:33     - Unknown word (defines)    -- = 1 << bit_count  # defines the length of the sequence
bit_manipulation/gray_code_sequence.py:71:16     - Unknown word (equivalent) -- # 1<< n is equivalent to 2^n
bit_manipulation/gray_code_sequence.py:74:5      - Unknown word (smaller)    -- smaller_sequence = gray_code
bit_manipulation/gray_code_sequence.py:8:44      - Unknown word (inclusive)  -- is between [0,2^n -1] inclusive
bit_manipulation/index_of_rightmost_set_bit.py:45:5      - Unknown word (Finding)    -- Finding the index of rightmost
bit_manipulation/index_of_rightmost_set_bit.py:45:58     - Unknown word (peculiar)   -- set bit has some very peculiar use-cases,
bit_manipulation/index_of_rightmost_set_bit.py:46:19     - Unknown word (finding)    -- especially in finding missing or/and repeating
bit_manipulation/index_of_rightmost_set_bit.py:46:42     - Unknown word (repeating)  -- finding missing or/and repeating numbers in a list of
bit_manipulation/index_of_rightmost_set_bit.py:46:5      - Unknown word (especially) -- especially in finding missing or
bit_manipulation/is_even.py:11:36     - Unknown word (observe)     -- above examples we can observe that
bit_manipulation/is_even.py:1:8       - Unknown word (even)       -- def is_even(number: int) -> bool
bit_manipulation/is_even.py:4:18      - Unknown word (Lets)        -- Explanation: Lets take a look at the following
bit_manipulation/is_even.py:4:5       - Unknown word (Explanation) -- Explanation: Lets take a look at
bit_manipulation/is_power_of_two.py:14:18     - Unknown word (intersections) -- n & (n - 1) - no intersections = 0
bit_manipulation/is_power_of_two.py:9:31      - Unknown word (manipulation) -- Implementation notes: Use bit manipulation.
bit_manipulation/largest_pow_of_two_le_num.py:2:11      - Unknown word (Naman)      -- Author : Naman Sharma
bit_manipulation/largest_pow_of_two_le_num.py:2:17      - Unknown word (Sharma)     -- Author : Naman Sharma
bit_manipulation/largest_pow_of_two_le_num.py:3:11      - Unknown word (October)    -- Date : October 2, 2023
bit_manipulation/missing_number.py:3:43      - Unknown word (consecutive) -- number in a list of consecutive integers.
bit_manipulation/missing_number.py:3:5       - Unknown word (Finds)      -- Finds the missing number in
bit_manipulation/numbers_different_signs.py:6:55      - Unknown word (opposite)   -- True these numbers have opposite signs
bit_manipulation/numbers_different_signs.py:6:64      - Unknown word (signs)      -- numbers have opposite signs
bit_manipulation/reverse_bits.py:14:37     - Unknown word (conducted)  -- operation can not be conducted on a object of type
bit_manipulation/reverse_bits.py:70:44     - Unknown word (dealing)    -- to 32],since we are dealing with 32 bit integer
bit_manipulation/reverse_bits.py:72:34     - Unknown word (unity)      -- left shift the bits by unity
bit_manipulation/single_bit_manipulation_operations.py:11:45     - Unknown word (zeroes)        -- with all the bits - zeroes and bit on given
bit_manipulation/single_bit_manipulation_operations.py:3:16      - Unknown word (functionality) -- """Provide the functionality to manipulate a single
bit_manipulation/single_bit_manipulation_operations.py:3:33      - Unknown word (manipulate)    -- the functionality to manipulate a single bit."""
bit_manipulation/single_bit_manipulation_operations.py:3:4       - Unknown word (Provide)    -- """Provide the functionality to
bit_manipulation/single_bit_manipulation_operations.py:60:57     - Unknown word (smallest)      -- position to be the first (smallest) bit.
bit_manipulation/swap_all_odd_and_even_bits.py:16:32     - Unknown word (swapped)    -- Finally, we combine the swapped even and odd bits using
blockchain/README.md:13:110    - Unknown word (Firstly)      -- centralized database. Firstly, what is a **ledger
blockchain/README.md:13:119    - Unknown word (what)         -- entralized database. Firstly, what is a **ledger**? A ledger
blockchain/README.md:13:65     - Unknown word (simply)       -- ledger technology. It is simply the opposite of centralized
blockchain/README.md:13:88     - Unknown word (centralized)  -- simply the opposite of centralized database. Firstly, what
blockchain/README.md:15:21     - Unknown word (addressed)    -- *Why is Blockchain addressed as digital ledger if
blockchain/README.md:15:98     - Unknown word (What)         -- account transactions? What other transaction details
blockchain/README.md:17:106    - Unknown word (need)         -- This way there exist no need for central authority
blockchain/README.md:17:151    - Unknown word (Okay)         -- authority to hold the info. Okay, how is it differentiated
blockchain/README.md:17:167    - Unknown word (differentiated) -- info. Okay, how is it differentiated from central database
blockchain/README.md:17:223    - Unknown word (benefits)       -- database and what are their benefits?
blockchain/README.md:17:60     - Unknown word (among)        -- ledger which is shared among multiple nodes. This
blockchain/README.md:17:66     - Unknown word (multiple)     -- which is shared among multiple nodes. This way there
blockchain/README.md:19:118    - Unknown word (needs)          -- So even if one branch needs any data from ledger
blockchain/README.md:19:184    - Unknown word (charge)         -- approval from database in charge. And if one hacks the
blockchain/README.md:19:203    - Unknown word (hacks)          -- in charge. And if one hacks the central database
blockchain/README.md:19:233    - Unknown word (gets)           -- central database he gets to tamper and control
blockchain/README.md:19:241    - Unknown word (tamper)         -- database he gets to tamper and control all the
blockchain/README.md:19:62     - Unknown word (stored)         -- branches whose data are stored in a centralized database
blockchain/README.md:21:104    - Unknown word (anyone)         -- added to the ledger by anyone branch it is gonna automatica
blockchain/README.md:21:124    - Unknown word (gonna)          -- anyone branch it is gonna automatically reflect
blockchain/README.md:21:130    - Unknown word (automatically)  -- anyone branch it is gonna automatically reflect in all other
blockchain/README.md:21:144    - Unknown word (reflect)        -- gonna automatically reflect in all other ledgers
blockchain/README.md:21:17     - Unknown word (every)          -- Now lets assume every branch has a copy of
blockchain/README.md:21:208    - Unknown word (done)           -- other branch. This is done using Peer-to-peer network
blockchain/README.md:21:5      - Unknown word (lets)           -- Now lets assume every branch
blockchain/README.md:21:81     - Unknown word (added)          -- then once anything is added to the ledger by anyone
blockchain/README.md:23:112    - Unknown word (alerted)        -- is hacked we can be alerted ,so we can safeguard
blockchain/README.md:23:131    - Unknown word (safeguard)      -- be alerted ,so we can safeguard other branches. Now
blockchain/README.md:23:187    - Unknown word (computers)      -- assume these branches as computers or nodes and the ledger
blockchain/README.md:23:325    - Unknown word (will)           -- can detect since there will be a mismatch in comparison
blockchain/README.md:23:335    - Unknown word (mismatch)       -- since there will be a mismatch in comparison with other
blockchain/README.md:23:347    - Unknown word (comparison)     -- will be a mismatch in comparison with other node information
blockchain/README.md:23:38     - Unknown word (tampered)       -- even if information is tampered in one branch we can
blockchain/README.md:23:402    - Unknown word (concept)        -- information. So this is the concept of Digital Ledger Technology
blockchain/README.md:23:95     - Unknown word (hacked)         -- out. If one branch is hacked we can be alerted ,so
blockchain/README.md:25:103    - Unknown word (enormous)       -- Wouldn't this require enormous storage space in each
blockchain/README.md:25:34     - Unknown word (have)           -- required for all nodes to have access to all information
blockchain/README.md:25:81     - Unknown word (Wouldn't)       -- information in other nodes? Wouldn't this require enormous
blockchain/README.md:25:95     - Unknown word (require)        -- nodes? Wouldn't this require enormous storage space
blockchain/README.md:29:100    - Unknown word (cryptographically) -- These are connected cryptographically. Once a new block is
blockchain/README.md:29:150    - Unknown word (chain)             -- block is added to a chain, the previous block
blockchain/README.md:29:161    - Unknown word (previous)          -- added to a chain, the previous block is connected,
blockchain/README.md:29:195    - Unknown word (precisely)         -- block is connected, more precisely said as locked and hence
blockchain/README.md:29:205    - Unknown word (said)              -- connected, more precisely said as locked and hence
blockchain/README.md:29:21     - Unknown word (nothing)        -- In short a block is nothing but collections of records
blockchain/README.md:29:243    - Unknown word (unaltered)         -- and hence, will remain unaltered. We can understand this
blockchain/README.md:29:261    - Unknown word (understand)        -- remain unaltered. We can understand this concept once we
blockchain/README.md:29:305    - Unknown word (understanding)     -- once we get a clear understanding of working mechanism
blockchain/README.md:29:330    - Unknown word (mechanism)         -- understanding of working mechanism of blockchain.
blockchain/README.md:29:63     - Unknown word (labelled)       -- collections of records with a labelled header. These are connected
blockchain/README.md:33:103    - Unknown word (More)              -- adversarial behavior. More broadly, cryptography
blockchain/README.md:33:108    - Unknown word (broadly)           -- adversarial behavior. More broadly, cryptography is the
blockchain/README.md:33:11     - Unknown word (practice)          -- It is the practice and study of secure
blockchain/README.md:33:162    - Unknown word (protocols)         -- creation and analysis of protocols that prevent third parties
blockchain/README.md:33:177    - Unknown word (prevent)           -- analysis of protocols that prevent third parties or the
blockchain/README.md:33:191    - Unknown word (parties)           -- protocols that prevent third parties or the general public
blockchain/README.md:33:226    - Unknown word (accessing)         -- general public from accessing private messages.
blockchain/README.md:33:24     - Unknown word (study)             -- is the practice and study of secure communication
blockchain/README.md:33:54     - Unknown word (techniques)        -- secure communication techniques in the midst of adversarial
blockchain/README.md:33:72     - Unknown word (midst)             -- mmunication techniques in the midst of adversarial behavior
blockchain/README.md:33:81     - Unknown word (adversarial)       -- techniques in the midst of adversarial behavior. More broadly
blockchain/README.md:33:93     - Unknown word (behavior)          -- midst of adversarial behavior. More broadly, cryptography
blockchain/README.md:35:35     - Unknown word (most)              -- cryptography technology is most widely used in blockchain
blockchain/README.md:35:40     - Unknown word (widely)            -- yptography technology is most widely used in blockchain and
blockchain/README.md:37:100    - Unknown word (about)             -- records the information about ownership of an asset
blockchain/README.md:37:106    - Unknown word (ownership)         -- the information about ownership of an asset. To define
blockchain/README.md:37:63     - Unknown word (holder)            -- a distributed record holder which records the information
blockchain/README.md:38:115    - Unknown word (corporate)         -- and track assets in a corporate network.
blockchain/README.md:38:54     - Unknown word (makes)             -- immutable ledger that makes it easier to record
blockchain/README.md:38:63     - Unknown word (easier)            -- ledger that makes it easier to record transactions
blockchain/README.md:39:102    - Unknown word (intellectual)      -- such as a business) (intellectual property, patents, copyrights
blockchain/README.md:39:125    - Unknown word (patents)           -- intellectual property, patents, copyrights, branding
blockchain/README.md:39:134    - Unknown word (copyrights)        -- tellectual property, patents, copyrights, branding). A blockchain
blockchain/README.md:39:146    - Unknown word (branding)          -- patents, copyrights, branding). A blockchain network
blockchain/README.md:39:19     - Unknown word (tangible)          -- An asset could be tangible (such as a house, car
blockchain/README.md:39:192    - Unknown word (sell)              -- network can track and sell almost anything of value
blockchain/README.md:39:197    - Unknown word (almost)            -- network can track and sell almost anything of value, lowering
blockchain/README.md:39:223    - Unknown word (lowering)          -- almost anything of value, lowering risk and costs for everyone
blockchain/README.md:39:241    - Unknown word (costs)             -- value, lowering risk and costs for everyone involved
blockchain/README.md:39:251    - Unknown word (everyone)          -- lowering risk and costs for everyone involved.
blockchain/README.md:39:260    - Unknown word (involved)          -- and costs for everyone involved.
blockchain/README.md:39:29     - Unknown word (such)              -- asset could be tangible (such as a house, car, cash
blockchain/README.md:39:51     - Unknown word (cash)              -- such as a house, car, cash, or land) or intangible
blockchain/README.md:39:69     - Unknown word (intangible)        -- car, cash, or land) or intangible (such as a business
blockchain/README.md:3:109     - Unknown word (called)      -- growing list of records, called **blocks**, that are
blockchain/README.md:3:118     - Unknown word (blocks)      -- of records, called **blocks**, that are securely
blockchain/README.md:3:137     - Unknown word (securely)    -- *blocks**, that are securely linked together using
blockchain/README.md:3:153     - Unknown word (together)    -- are securely linked together using **cryptography
blockchain/README.md:3:162     - Unknown word (using)       -- securely linked together using **cryptography**.
blockchain/README.md:3:170     - Unknown word (cryptography) -- linked together using **cryptography**.
blockchain/README.md:3:29      - Unknown word (distributed) -- Blockchain is a type of **distributed ledger** technology
blockchain/README.md:3:84      - Unknown word (growing)     -- DLT) that consists of growing list of records, called
blockchain/README.md:41:22     - Unknown word (introduction)      -- So this is all about introduction to blockchain technology
blockchain/README.md:41:64     - Unknown word (learn)             -- blockchain technology. To learn more about the topic
blockchain/README.md:41:91     - Unknown word (refer)             -- more about the topic refer below links....
blockchain/README.md:5:42      - Unknown word (above)        -- terminologies in the above definition. We find
blockchain/README.md:5:63      - Unknown word (find)         -- above definition. We find below terminologies
blockchain/README.md:5:68      - Unknown word (below)        -- definition. We find below terminologies,
blockchain/README.md:5:7       - Unknown word (breakdown)    -- Let's breakdown the terminologies in
blockchain/README.md:8:3       - Unknown word (Blocks)       -- - Blocks
blockchain/README.md:9:3       - Unknown word (Cryptography) -- - Cryptography
blockchain/diophantine_equation.py:10:38     - Unknown word (divides)     -- common_divisor(a,b) divides c.
blockchain/diophantine_equation.py:12:27     - Unknown word (Divisor)     -- GCD ( Greatest Common Divisor ) or HCF ( Highest Common
blockchain/diophantine_equation.py:21:5      - Unknown word (That's)      -- That's why we need diophantine
blockchain/diophantine_equation.py:37:42     - Unknown word (Equations)   -- solutions of Diophantine Equations:
blockchain/diophantine_equation.py:39:5      - Unknown word (Theorem)     -- Theorem : Let gcd(a,b) = d,
blockchain/diophantine_equation.py:3:28      - Unknown word (divisor)    -- maths.greatest_common_divisor import greatest_common
blockchain/diophantine_equation.py:3:6       - Unknown word (maths)      -- from maths.greatest_common_divisor
blockchain/diophantine_equation.py:6:5       - Unknown word (diophantine) -- def diophantine(a: int, b: int, c: int
blockchain/diophantine_equation.py:76:14     - Unknown word (Euclid's)    -- Extended Euclid's Algorithm : If d divides
blockchain/diophantine_equation.py:8:17      - Unknown word (Equation)    -- Diophantine Equation : Given integers a,b
blockchain/diophantine_equation.py:8:5       - Unknown word (Diophantine) -- Diophantine Equation : Given integers
blockchain/diophantine_equation.py:9:17      - Unknown word (equation)    -- diophantine equation a*x + b*y = c has a
boolean_algebra/README.md:1:11      - Unknown word (Algebra)    -- # Boolean Algebra
boolean_algebra/README.md:3:31      - Unknown word (arithmetic) -- algebra is used to do arithmetic with bits of values
boolean_algebra/README.md:3:62      - Unknown word (True)       -- with bits of values True (1) or False (0).
boolean_algebra/README.md:3:74      - Unknown word (False)      -- of values True (1) or False (0).
boolean_algebra/and_gate.py:15:1      - Unknown word (Refer)      -- Refer - https://www.geeksforgeeks
boolean_algebra/and_gate.py:2:18      - Unknown word (logic)      -- An AND Gate is a logic gate in boolean algebra
boolean_algebra/and_gate.py:2:24      - Unknown word (gate)       -- AND Gate is a logic gate in boolean algebra which
boolean_algebra/and_gate.py:2:40      - Unknown word (algebra)    -- logic gate in boolean algebra which results to 1
boolean_algebra/and_gate.py:2:8       - Unknown word (Gate)       -- An AND Gate is a logic gate in boolean
boolean_algebra/imply_gate.py:4:23      - Unknown word (implies)    -- It is true if input 1 implies input 2.
boolean_algebra/karnaugh_map_simplification.py:23:5      - Unknown word (simplified) -- simplified_f = []
boolean_algebra/karnaugh_map_simplification.py:39:5      - Unknown word (Simplified) -- Simplified Expression:
boolean_algebra/karnaugh_map_simplification.py:44:7      - Unknown word (Manually)   -- # Manually generate the product
boolean_algebra/karnaugh_map_simplification.py:7:14      - Unknown word (kmap)       -- def simplify_kmap(kmap: list[list[int
boolean_algebra/karnaugh_map_simplification.py:9:18      - Unknown word (Karnaugh)   -- Simplify the Karnaugh map.
boolean_algebra/multiplexer.py:3:24      - Unknown word (Multiplexer) -- Implement a 2-to-1 Multiplexer.
boolean_algebra/nand_gate.py:18:5      - Unknown word (nand)       -- def nand_gate(input_1: int, input
boolean_algebra/nand_gate.py:2:3       - Unknown word (NAND)       -- A NAND Gate is a logic gate
boolean_algebra/nand_gate.py:4:12      - Unknown word (along)      -- a NOT gate along with an AND gate.
boolean_algebra/nor_gate.py:12:22     - Unknown word (Akshaj)     -- Code provided by Akshaj Vishwanathan
boolean_algebra/nor_gate.py:12:29     - Unknown word (Vishwanathan) -- Code provided by Akshaj Vishwanathan
boolean_algebra/quine_mc_cluskey.py:122:11    - Unknown word (implicant)  -- def prime_implicant_chart(
boolean_algebra/quine_mc_cluskey.py:144:50    - Unknown word (Minterms)   -- decimal representation of Minterms 'Spaces Separated'\n
boolean_algebra/quine_mc_cluskey.py:150:18    - Unknown word (Implicants) -- print("Prime Implicants are:")
boolean_algebra/quine_mc_cluskey.py:154:5     - Unknown word (essential)  -- essential_prime_implicants = selection
boolean_algebra/quine_mc_cluskey.py:155:12    - Unknown word (Essential)  -- print("Essential Prime Implicants are
boolean_algebra/quine_mc_cluskey.py:52:44     - Unknown word (minterms)   -- no_of_variable: int, minterms: Sequence[float]) -
boolean_algebra/quine_mc_cluskey.py:81:15     - Unknown word (chart)      -- def selection(chart: list[list[int]], prime
boolean_algebra/quine_mc_cluskey.py:81:45     - Unknown word (implicants) -- list[list[int]], prime_implicants: list[str]) -> list
boolean_algebra/xnor_gate.py:19:5      - Unknown word (xnor)       -- def xnor_gate(input_1: int, input
boolean_algebra/xnor_gate.py:2:3       - Unknown word (XNOR)       -- A XNOR Gate is a logic gate
boolean_algebra/xor_gate.py:20:5      - Unknown word (calculate)  -- calculate xor of the input values
cellular_automata/README.md:1:12      - Unknown word (Automata)   -- # Cellular Automata
cellular_automata/README.md:1:3       - Unknown word (Cellular)   -- # Cellular Automata
cellular_automata/README.md:3:68      - Unknown word (matter)     -- behavior of "life", no matter if it is a robot or
cellular_automata/README.md:4:14      - Unknown word (follow)     -- They usually follow simple rules but can
cellular_automata/README.md:4:21      - Unknown word (simple)     -- They usually follow simple rules but can lead to
cellular_automata/README.md:4:42      - Unknown word (lead)       -- simple rules but can lead to the creation of complex
cellular_automata/README.md:4:6       - Unknown word (usually)    -- They usually follow simple rules
cellular_automata/README.md:4:66      - Unknown word (complex)    -- lead to the creation of complex forms.
cellular_automata/README.md:5:10      - Unknown word (popular)    -- The most popular cellular automaton is
cellular_automata/README.md:5:27      - Unknown word (automaton)  -- most popular cellular automaton is Conway's [Game of
cellular_automata/README.md:5:40      - Unknown word (Conway's)   -- cellular automaton is Conway's [Game of Life](https
cellular_automata/conways_game_of_life.py:10:10     - Unknown word (glider)     -- # Define glider example
cellular_automata/conways_game_of_life.py:11:1      - Unknown word (GLIDER)     -- GLIDER = [
cellular_automata/conways_game_of_life.py:26:9      - Unknown word (generation) -- def new_generation(cells: list[list[int
cellular_automata/conways_game_of_life.py:55:42     - Unknown word (excerpt)    -- of the game of life (excerpt from Wikipedia):
cellular_automata/conways_game_of_life.py:56:66     - Unknown word (survives)   -- three live neighbours survives.
cellular_automata/conways_game_of_life.py:57:59     - Unknown word (becomes)    -- three live neighbours becomes a live cell.
cellular_automata/conways_game_of_life.py:59:18     - Unknown word (Similarly)  -- # Similarly, all other dead cells
cellular_automata/conways_game_of_life.py:59:50     - Unknown word (stay)       -- all other dead cells stay dead.
cellular_automata/conways_game_of_life.py:80:9      - Unknown word (pixels)     -- pixels = img.load()
cellular_automata/game_of_life.py:115:20    - Unknown word (structure)    -- # main working structure of this module.
cellular_automata/game_of_life.py:118:19    - Unknown word (subplots)     -- fig, ax = plt.subplots()
cellular_automata/game_of_life.py:120:5     - Unknown word (cmap)         -- cmap = ListedColormap(["w
cellular_automata/game_of_life.py:124:16    - Unknown word (matshow)      -- ax.matshow(c, cmap=cmap)
cellular_automata/game_of_life.py:18:21     - Unknown word (fewer)        -- Any live cell with fewer than two live neighbours
cellular_automata/game_of_life.py:19:14     - Unknown word (caused)       -- dies, as if caused by under-population
cellular_automata/game_of_life.py:19:2      - Unknown word (dies)         -- dies, as if caused by under
cellular_automata/game_of_life.py:19:30     - Unknown word (population)   -- as if caused by under-population.
cellular_automata/game_of_life.py:1:34      - Unknown word (Anurag)     -- Game Of Life, Author Anurag Kumar(mailto:anuragkumarak
cellular_automata/game_of_life.py:1:41      - Unknown word (Kumar)      -- Life, Author Anurag Kumar(mailto:anuragkumarak
cellular_automata/game_of_life.py:21:50     - Unknown word (lives)        -- three live neighbours lives
cellular_automata/game_of_life.py:28:2      - Unknown word (comes)        -- comes a live cell, as if by
cellular_automata/game_of_life.py:28:30     - Unknown word (reproduction) -- live cell, as if by reproduction.
cellular_automata/game_of_life.py:3:1       - Unknown word (Requirements) -- Requirements:
cellular_automata/game_of_life.py:58:12     - Unknown word (accordingly)  -- status accordingly.(in the same canvas
cellular_automata/game_of_life.py:71:39     - Unknown word (judge)        -- gen_canvas[r][c] = __judge_point(
cellular_automata/game_of_life.py:89:7      - Unknown word (handling)     -- # handling duplicate entry for
cellular_automata/langtons_ant.py:11:17     - Unknown word (animation)  -- from matplotlib.animation import FuncAnimation
cellular_automata/langtons_ant.py:11:38     - Unknown word (Animation)  -- animation import FuncAnimation
cellular_automata/langtons_ant.py:17:7      - Unknown word (Langtons)   -- class LangtonsAnt:
cellular_automata/langtons_ant.py:19:25     - Unknown word (Langons)    -- Represents the main LangonsAnt algorithm.
cellular_automata/langtons_ant.py:19:5      - Unknown word (Represents) -- Represents the main LangonsAnt
cellular_automata/langtons_ant.py:2:1       - Unknown word (Langton's)  -- Langton's ant
cellular_automata/langtons_ant.py:33:11     - Unknown word (Initially)  -- # Initially pointing left (similar
cellular_automata/langtons_ant.py:33:21     - Unknown word (pointing)   -- # Initially pointing left (similar to the
cellular_automata/langtons_ant.py:37:24     - Unknown word (axes)       -- def move_ant(self, axes: plt.Axes | None, display
cellular_automata/langtons_ant.py:37:34     - Unknown word (Axes)       -- ant(self, axes: plt.Axes | None, display: bool
cellular_automata/langtons_ant.py:39:9      - Unknown word (Performs)   -- Performs three tasks:
cellular_automata/langtons_ant.py:40:24     - Unknown word (turns)      -- 1. The ant turns either clockwise or
cellular_automata/langtons_ant.py:40:37     - Unknown word (clockwise)  -- The ant turns either clockwise or anti-clockwise according
cellular_automata/langtons_ant.py:40:50     - Unknown word (anti)       -- either clockwise or anti-clockwise according
cellular_automata/langtons_ant.py:40:65     - Unknown word (according)  -- clockwise or anti-clockwise according to the colour
cellular_automata/langtons_ant.py:41:38     - Unknown word (currently)  -- the square that it is currently on. If the square is
cellular_automata/langtons_ant.py:43:79     - Unknown word (facing)     -- that it is currently facing
cellular_automata/langtons_ant.py:44:56     - Unknown word (inverted)   -- was previously on is inverted (White -> Black and
cellular_automata/langtons_ant.py:47:52     - Unknown word (displayed)  -- the board will also be displayed on the axes
cellular_automata/langtons_ant.py:65:11     - Unknown word (Turn)       -- # Turn clockwise or anti-clockwise
cellular_automata/langtons_ant.py:82:22     - Unknown word (xaxis)      -- axes.get_xaxis().set_ticks([])
cellular_automata/langtons_ant.py:83:22     - Unknown word (yaxis)      -- axes.get_yaxis().set_ticks([])
cellular_automata/langtons_ant.py:84:18     - Unknown word (imshow)     -- axes.imshow(self.board, cmap="gray
cellular_automata/langtons_ant.py:88:9      - Unknown word (Displays)   -- Displays the board without delay
cellular_automata/langtons_ant.py:89:12     - Unknown word (visually)   -- to visually understand and track
cellular_automata/langtons_ant.py:94:61     - Unknown word (getting)    -- variable to prevent it from getting garbage collected
cellular_automata/langtons_ant.py:94:69     - Unknown word (garbage)    -- prevent it from getting garbage collected
cellular_automata/langtons_ant.py:94:77     - Unknown word (collected)  -- from getting garbage collected
cellular_automata/langtons_ant.py:96:67     - Unknown word (interval)   -- True), frames=frames, interval=1
cellular_automata/nagel_schrekenberg.py:100:37    - Unknown word (causing)      -- We can't have the car causing an accident
cellular_automata/nagel_schrekenberg.py:103:19    - Unknown word (Randomly)     -- # Randomly, a driver will slow
cellular_automata/nagel_schrekenberg.py:122:14    - Unknown word (speeds)       -- next_speeds_calculated = update
cellular_automata/nagel_schrekenberg.py:122:21    - Unknown word (calculated)   -- next_speeds_calculated = update(highway[i]
cellular_automata/nagel_schrekenberg.py:12:1      - Unknown word (probability) -- probability The probability
cellular_automata/nagel_schrekenberg.py:12:56     - Unknown word (slow)        -- robability that a driver will slow down
cellular_automata/nagel_schrekenberg.py:2:14      - Unknown word (evolution)  -- Simulate the evolution of a highway with only
cellular_automata/nagel_schrekenberg.py:3:16      - Unknown word (divided)    -- The highway is divided in cells, each cell
cellular_automata/nagel_schrekenberg.py:4:63      - Unknown word (come)       -- to one end, it will come out on the other.
cellular_automata/nagel_schrekenberg.py:73:50     - Unknown word (better)      -- cells)): # May need a better name for this
cellular_automata/nagel_schrekenberg.py:91:15     - Unknown word (calculations) -- # Beforce calculations, the highway is empty
cellular_automata/nagel_schrekenberg.py:91:7      - Unknown word (Beforce)     -- # Beforce calculations, the highway
cellular_automata/nagel_schrekenberg.py:9:33      - Unknown word (cars)       -- are the speed of the cars with 0 being the lowest
cellular_automata/one_dimensional.py:13:1      - Unknown word (CELLS)       -- CELLS = [[0, 0, 0, 0, 0,
cellular_automata/one_dimensional.py:2:23      - Unknown word (generations) -- Return an image of 16 generations of one-dimensional cellular
cellular_automata/one_dimensional.py:2:54      - Unknown word (cellular)    -- enerations of one-dimensional cellular automata based on a
cellular_automata/one_dimensional.py:2:63      - Unknown word (automata)    -- dimensional cellular automata based on a given
cellular_automata/one_dimensional.py:36:14     - Unknown word (neighbor)    -- left_neighbor = 0 if i == 0 else cells
cellular_automata/one_dimensional.py:39:9      - Unknown word (situation)   -- situation = 7 - int(f"{left_neighbor
cellular_automata/wa_tor.py:101:52    - Unknown word (progression)  -- to slow the algorithm progression.
cellular_automata/wa_tor.py:11:38     - Unknown word (allows)     -- are a working set that allows the Wa-Tor planet
cellular_automata/wa_tor.py:125:11    - Unknown word (Populate)     -- # Populate planet with predators
cellular_automata/wa_tor.py:125:32    - Unknown word (predators)    -- Populate planet with predators and prey randomly
cellular_automata/wa_tor.py:125:51    - Unknown word (randomly)     -- with predators and prey randomly
cellular_automata/wa_tor.py:134:9     - Unknown word (Ease)         -- Ease of access for testing
cellular_automata/wa_tor.py:155:25    - Unknown word (making)       -- Adds an entity, making sure the entity does
cellular_automata/wa_tor.py:155:32    - Unknown word (sure)         -- Adds an entity, making sure the entity does
cellular_automata/wa_tor.py:155:9     - Unknown word (Adds)         -- Adds an entity, making sure
cellular_automata/wa_tor.py:185:32    - Unknown word (preys)        -- Balances predators and preys so that prey
cellular_automata/wa_tor.py:185:9     - Unknown word (Balances)     -- Balances predators and preys
cellular_automata/wa_tor.py:187:27    - Unknown word (reproduce)    -- space for them to reproduce.
cellular_automata/wa_tor.py:219:9     - Unknown word (Subtly)       -- Subtly different to the `move
cellular_automata/wa_tor.py:23:1      - Unknown word (PREY)       -- PREY_INITIAL_COUNT = 30
cellular_automata/wa_tor.py:23:50     - Unknown word (prey)       -- The initial number of prey entities
cellular_automata/wa_tor.py:24:35     - Unknown word (chronons)     -- REPRODUCTION_TIME = 5  # The chronons before reproducing
cellular_automata/wa_tor.py:24:51     - Unknown word (reproducing)  -- The chronons before reproducing
cellular_automata/wa_tor.py:24:6      - Unknown word (REPRODUCTION) -- PREY_REPRODUCTION_TIME = 5  # The chronons
cellular_automata/wa_tor.py:261:32    - Unknown word (unoccupied)   -- Attempts to move to an unoccupied neighbouring square
cellular_automata/wa_tor.py:261:43    - Unknown word (neighbouring) -- move to an unoccupied neighbouring square
cellular_automata/wa_tor.py:261:9     - Unknown word (Attempts)     -- Attempts to move to an unoccupied
cellular_automata/wa_tor.py:267:69    - Unknown word (depicting)    -- like priority queue) depicting
cellular_automata/wa_tor.py:268:38    - Unknown word (attempt)      -- order to attempt to move. Removes any
cellular_automata/wa_tor.py:268:55    - Unknown word (Removes)      -- to attempt to move. Removes any systematic
cellular_automata/wa_tor.py:26:1      - Unknown word (PREDATOR)     -- PREDATOR_INITIAL_COUNT = 50
cellular_automata/wa_tor.py:26:54     - Unknown word (predator)     -- The initial number of predator entities
cellular_automata/wa_tor.py:301:13    - Unknown word (reproducable) -- >>> reproducable_entity = Entity(False
cellular_automata/wa_tor.py:30:10     - Unknown word (FOOD)         -- PREDATOR_FOOD_VALUE = 5
cellular_automata/wa_tor.py:320:11    - Unknown word (Weight)       -- # Weight adjacent locations
cellular_automata/wa_tor.py:33:41     - Unknown word (organisms)    -- # The max number of organisms on the board
cellular_automata/wa_tor.py:341:19    - Unknown word (Reproduce)    -- # Reproduce in previous square
cellular_automata/wa_tor.py:34:45     - Unknown word (unbalanced)   -- entities to delete from the unbalanced side
cellular_automata/wa_tor.py:356:32    - Unknown word (survived)     -- 2. Once a prey has survived a certain number of
cellular_automata/wa_tor.py:356:43    - Unknown word (certain)      -- prey has survived a certain number of chronons it
cellular_automata/wa_tor.py:358:16    - Unknown word (leaving)      -- leaving behind a new prey in
cellular_automata/wa_tor.py:358:24    - Unknown word (behind)       -- leaving behind a new prey in its old
cellular_automata/wa_tor.py:35:8      - Unknown word (UNBALANCED)   -- DELETE_UNBALANCED_ENTITIES = 50
cellular_automata/wa_tor.py:376:9     - Unknown word (occupied)     -- occupied_by_prey_coords: tuple
cellular_automata/wa_tor.py:388:50    - Unknown word (deprived)     -- chronon, each predator is deprived of a unit of energy
cellular_automata/wa_tor.py:389:16    - Unknown word (Upon)         -- 3. Upon reaching zero energy
cellular_automata/wa_tor.py:389:21    - Unknown word (reaching)     -- 3. Upon reaching zero energy, a predator
cellular_automata/wa_tor.py:391:19    - Unknown word (eats)         -- it eats the prey and earns a
cellular_automata/wa_tor.py:391:37    - Unknown word (earns)        -- it eats the prey and earns a certain amount of
cellular_automata/wa_tor.py:416:20    - Unknown word (onto)         -- # Move onto prey
cellular_automata/wa_tor.py:421:20    - Unknown word (Eats)         -- # (4.) Eats the prey and earns energy
cellular_automata/wa_tor.py:433:22    - Unknown word (passing)      -- Emulate time passing by looping `iteration
cellular_automata/wa_tor.py:433:9     - Unknown word (Emulate)      -- Emulate time passing by looping
cellular_automata/wa_tor.py:443:56    - Unknown word (randomness)   -- time to simulate true randomness
cellular_automata/wa_tor.py:444:20    - Unknown word (removes)      -- # This removes the systematic approach
cellular_automata/wa_tor.py:477:19    - Unknown word (visualisation) -- # visualisation in a terminal or a graph
cellular_automata/wa_tor.py:481:5     - Unknown word (visualise)     -- def visualise(wt: WaTor, iter_number
cellular_automata/wa_tor.py:483:14    - Unknown word (displays)      -- Visually displays the Wa-Tor planet using
cellular_automata/wa_tor.py:483:5     - Unknown word (Visually)      -- Visually displays the Wa-Tor
cellular_automata/wa_tor.py:485:26    - Unknown word (intervals)     -- the Wa-Tor planet at intervals.
cellular_automata/wa_tor.py:487:23    - Unknown word (codes)         -- Uses ascii colour codes to colourfully display
cellular_automata/wa_tor.py:487:32    - Unknown word (colourfully)   -- ascii colour codes to colourfully display the predators
cellular_automata/wa_tor.py:488:22    - Unknown word (Prey)          -- * (0x60f197) Prey = ``#``
cellular_automata/wa_tor.py:489:21    - Unknown word (Predator)      -- * (0xfffff) Predator = ``x``
cellular_automata/wa_tor.py:509:5     - Unknown word (ansi)          -- ansi_colour_end = "\x1b[
cellular_automata/wa_tor.py:537:30    - Unknown word (able)          -- Block the thread to be able to visualise seeing
cellular_automata/wa_tor.py:537:48    - Unknown word (seeing)        -- be able to visualise seeing the algorithm
cellular_automata/wa_tor.py:8:15      - Unknown word (aims)       -- This solution aims to completely remove
cellular_automata/wa_tor.py:8:45      - Unknown word (systematic) -- completely remove any systematic approach
cellular_automata/wa_tor.py:98:16     - Unknown word (passed)       -- :attr time_passed: A function that is
cellular_automata/wa_tor.py:99:24     - Unknown word (chronon)      -- time passes (a chronon) in order to visually
cellular_automata/wa_tor.py:9:27      - Unknown word (utilise)    -- the Wa-Tor planet, and utilise fully random methods
ciphers/README.md:1:3       - Unknown word (Ciphers)    -- # Ciphers
ciphers/README.md:3:21      - Unknown word (protect)    -- Ciphers are used to protect data from people that
ciphers/README.md:3:88      - Unknown word (everywhere) -- to have it. They are everywhere on the internet to protect
ciphers/a1z26.py:3:1       - Unknown word (corresponding) -- corresponding to the character's position
ciphers/affine_cipher.py:19:33     - Unknown word (Choose)     -- "A is set to 1. Choose different key"
ciphers/affine_cipher.py:34:22     - Unknown word (relatively) -- "are not relatively prime. Choose a different
ciphers/affine_cipher.py:40:63     - Unknown word (monoalphabetic) -- cipher is a type of monoalphabetic '
ciphers/affine_cipher.py:41:32     - Unknown word (substitution)   -- 'substitution cipher.')
ciphers/affine_cipher.py:42:35     - Unknown word (Mpyx)           -- I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF
ciphers/affine_cipher.py:4:50      - Unknown word (iterative)  -- divisor import gcd_by_iterative
ciphers/affine_cipher.py:6:15      - Unknown word (cryptomath) -- from . import cryptomath_module as cryptomath
ciphers/atbash.py:45:20     - Unknown word (performance) -- print("Running performance benchmarks...")
ciphers/atbash.py:45:32     - Unknown word (benchmarks)  -- Running performance benchmarks...")
ciphers/atbash.py:6:5       - Unknown word (atbash)     -- def atbash_slow(sequence: str)
ciphers/atbash.py:9:6       - Unknown word (ZYXWVUT)    -- 'ZYXWVUT'
ciphers/autokey.py:14:62     - Unknown word (returning)    -- and `key` (string), returning the
ciphers/autokey.py:17:33     - Unknown word (coffee)       -- encrypt("hello world", "coffee")
ciphers/autokey.py:18:12     - Unknown word (avvwo)        -- 'jsqqs avvwo'
ciphers/autokey.py:18:6      - Unknown word (jsqqs)        -- 'jsqqs avvwo'
ciphers/autokey.py:20:16     - Unknown word (ohvp)         -- 'vvjfpk wj ohvp su ddylsv'
ciphers/autokey.py:20:24     - Unknown word (ddylsv)       -- 'vvjfpk wj ohvp su ddylsv'
ciphers/autokey.py:20:6      - Unknown word (vvjfpk)       -- 'vvjfpk wj ohvp su ddylsv'
ciphers/autokey.py:4:38      - Unknown word (autoclave)  -- cipher (also known as the autoclave cipher) is a cipher
ciphers/autokey.py:5:1       - Unknown word (incorporates) -- incorporates the message (the plaintext
ciphers/autokey.py:6:57      - Unknown word (fashion)      -- message in some automated fashion,
ciphers/autokey.py:79:77     - Unknown word (decrypted)    -- string), returning the decrypted
ciphers/autokey.py:7:1       - Unknown word (sometimes)    -- sometimes by selecting certain
ciphers/autokey.py:7:14      - Unknown word (selecting)    -- sometimes by selecting certain letters from
ciphers/autokey.py:8:19      - Unknown word (primer)       -- by adding a short primer key to the front of
ciphers/baconian_cipher.py:10:11     - Unknown word (AAABB)      -- "d": "AAABB",
ciphers/baconian_cipher.py:11:11     - Unknown word (AABAA)      -- "e": "AABAA",
ciphers/baconian_cipher.py:12:11     - Unknown word (AABAB)      -- "f": "AABAB",
ciphers/baconian_cipher.py:13:11     - Unknown word (AABBA)      -- "g": "AABBA",
ciphers/baconian_cipher.py:14:11     - Unknown word (AABBB)      -- "h": "AABBB",
ciphers/baconian_cipher.py:15:11     - Unknown word (ABAAA)      -- "i": "ABAAA",
ciphers/baconian_cipher.py:16:11     - Unknown word (BBBAA)      -- "j": "BBBAA",
ciphers/baconian_cipher.py:17:11     - Unknown word (ABAAB)      -- "k": "ABAAB",
ciphers/baconian_cipher.py:18:11     - Unknown word (ABABA)      -- "l": "ABABA",
ciphers/baconian_cipher.py:19:11     - Unknown word (ABABB)      -- "m": "ABABB",
ciphers/baconian_cipher.py:20:11     - Unknown word (ABBAA)      -- "n": "ABBAA",
ciphers/baconian_cipher.py:21:11     - Unknown word (ABBAB)      -- "o": "ABBAB",
ciphers/baconian_cipher.py:22:11     - Unknown word (ABBBA)      -- "p": "ABBBA",
ciphers/baconian_cipher.py:23:11     - Unknown word (ABBBB)      -- "q": "ABBBB",
ciphers/baconian_cipher.py:24:11     - Unknown word (BAAAA)      -- "r": "BAAAA",
ciphers/baconian_cipher.py:25:11     - Unknown word (BAAAB)      -- "s": "BAAAB",
ciphers/baconian_cipher.py:26:11     - Unknown word (BAABA)      -- "t": "BAABA",
ciphers/baconian_cipher.py:27:11     - Unknown word (BAABB)      -- "u": "BAABB",
ciphers/baconian_cipher.py:28:11     - Unknown word (BBBAB)      -- "v": "BBBAB",
ciphers/baconian_cipher.py:29:11     - Unknown word (BABAA)      -- "w": "BABAA",
ciphers/baconian_cipher.py:2:30      - Unknown word (Baconian)   -- to encode and decode Baconian or Bacon's Cipher
ciphers/baconian_cipher.py:2:42      - Unknown word (Bacon's)    -- and decode Baconian or Bacon's Cipher
ciphers/baconian_cipher.py:30:11     - Unknown word (BABAB)      -- "x": "BABAB",
ciphers/baconian_cipher.py:31:11     - Unknown word (BABBA)      -- "y": "BABBA",
ciphers/baconian_cipher.py:32:11     - Unknown word (BABBB)      -- "z": "BABBB",
ciphers/baconian_cipher.py:42:5      - Unknown word (Encodes)    -- Encodes to Baconian cipher
ciphers/baconian_cipher.py:45:6      - Unknown word (AABBBAABAAABABAABABAABBAB) -- 'AABBBAABAAABABAABABAABBAB'
ciphers/baconian_cipher.py:47:32     - Unknown word (BABAAABBABBAAAAABABAAAABB) -- AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB'
ciphers/baconian_cipher.py:64:5      - Unknown word (Decodes)                   -- Decodes from Baconian cipher
ciphers/baconian_cipher.py:8:11      - Unknown word (AAAAB)      -- "b": "AAAAB",
ciphers/baconian_cipher.py:9:11      - Unknown word (AAABA)      -- "c": "AAABA",
ciphers/base16.py:13:36     - Unknown word (hexadecimal) -- turn each byte into its hexadecimal representation, make
ciphers/base16.py:14:38     - Unknown word (everything)  -- uppercase, and then join everything together and return
ciphers/base16.py:44:18     - Unknown word (validity)    -- # Check data validity, following RFC3548
ciphers/base32.py:13:13     - Unknown word (DPEBLW)     -- b'JBSWY3DPEBLW64TMMQQQ===='
ciphers/base32.py:13:21     - Unknown word (TMMQQQ)     -- b'JBSWY3DPEBLW64TMMQQQ===='
ciphers/base32.py:13:7      - Unknown word (JBSWY)      -- b'JBSWY3DPEBLW64TMMQQQ===='
ciphers/base32.py:15:7      - Unknown word (GEZDGNBVGY) -- b'GEZDGNBVGY======'
ciphers/base32.py:17:12     - Unknown word (ZJANRXW)    -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW
ciphers/base32.py:17:20     - Unknown word (ZZAMNXW)    -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY=
ciphers/base32.py:17:29     - Unknown word (DMMV)       -- ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='
ciphers/base32.py:17:38     - Unknown word (UOJUW)      -- ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='
ciphers/base32.py:17:7      - Unknown word (ONXW)       -- b'ONXW2ZJANRXW4ZZAMNXW24DMMV
ciphers/base64_cipher.py:12:76     - Unknown word (consider)   -- of 6, for instance, consider the
ciphers/base64_cipher.py:15:15     - Unknown word (seen)       -- As can be seen above, 2 more binary
ciphers/base64_cipher.py:15:68     - Unknown word (there's)    -- should be added, so there's 4
ciphers/base64_cipher.py:16:5      - Unknown word (possibilities) -- possibilities here: 00, 01, 10 or
ciphers/base64_cipher.py:17:5      - Unknown word (That)          -- That being said, Base64 encoding
ciphers/base64_cipher.py:17:53     - Unknown word (Steganography) -- encoding can be used in Steganography to hide data in these
ciphers/base64_cipher.py:35:21     - Unknown word (supplied)      -- # Make sure the supplied data is a bytes-like
ciphers/base64_cipher.py:86:21     - Unknown word (Incorrect)     -- AssertionError: Incorrect padding
ciphers/beaufort_cipher.py:11:17     - Unknown word (generates)  -- # This function generates the key in
ciphers/beaufort_cipher.py:12:12     - Unknown word (manner)     -- # a cyclic manner until it's length isn
ciphers/beaufort_cipher.py:16:27     - Unknown word (GERMAN)     -- > generate_key("THE GERMAN ATTACK","SECRET")
ciphers/beaufort_cipher.py:17:6      - Unknown word (SECRETSECRETSECRE) -- 'SECRETSECRETSECRE'
ciphers/beaufort_cipher.py:2:15      - Unknown word (Radadiya)   -- Author: Mohit Radadiya
ciphers/beaufort_cipher.py:2:9       - Unknown word (Mohit)      -- Author: Mohit Radadiya
ciphers/beaufort_cipher.py:36:10     - Unknown word (PAYUWL)            -- 'BDC PAYUWL JPAIYI'
ciphers/beaufort_cipher.py:36:17     - Unknown word (JPAIYI)            -- 'BDC PAYUWL JPAIYI'
ciphers/bifid.py:28:9      - Unknown word (polybius)   -- polybius square
ciphers/bifid.py:4:25      - Unknown word (Polybius)   -- Bifid Cipher uses a Polybius Square to encipher a
ciphers/bifid.py:4:44      - Unknown word (encipher)   -- a Polybius Square to encipher a message in a way that
ciphers/bifid.py:4:5       - Unknown word (Bifid)      -- The Bifid Cipher uses a Polybius
ciphers/bifid.py:58:53     - Unknown word (qtltbdxrxlk) -- encode('testmessage') == 'qtltbdxrxlk'
ciphers/bifid.py:5:10      - Unknown word (fairly)     -- makes it fairly difficult to decipher
ciphers/bifid.py:5:17      - Unknown word (difficult)  -- makes it fairly difficult to decipher without
ciphers/bifid.py:5:30      - Unknown word (decipher)   -- fairly difficult to decipher without knowing the
ciphers/bifid.py:5:47      - Unknown word (knowing)    -- to decipher without knowing the secret.
ciphers/bifid.py:78:34     - Unknown word (reshape)     -- second_step = first_step.reshape(2 * len(message))
ciphers/brute_force_caesar_cipher.py:10:30     - Unknown word (QJABQRU)    -- Decryption using Key #3: QJABQRU MJASR
ciphers/brute_force_caesar_cipher.py:10:38     - Unknown word (MJASR)      -- using Key #3: QJABQRU MJASR
ciphers/brute_force_caesar_cipher.py:11:30     - Unknown word (PIZAPQT)    -- Decryption using Key #4: PIZAPQT LIZRQ
ciphers/brute_force_caesar_cipher.py:11:38     - Unknown word (LIZRQ)      -- using Key #4: PIZAPQT LIZRQ
ciphers/brute_force_caesar_cipher.py:12:30     - Unknown word (OHYZOPS)    -- Decryption using Key #5: OHYZOPS KHYQP
ciphers/brute_force_caesar_cipher.py:12:38     - Unknown word (KHYQP)      -- using Key #5: OHYZOPS KHYQP
ciphers/brute_force_caesar_cipher.py:13:30     - Unknown word (NGXYNOR)    -- Decryption using Key #6: NGXYNOR JGXPO
ciphers/brute_force_caesar_cipher.py:13:38     - Unknown word (JGXPO)      -- using Key #6: NGXYNOR JGXPO
ciphers/brute_force_caesar_cipher.py:14:30     - Unknown word (MFWXMNQ)    -- Decryption using Key #7: MFWXMNQ IFWON
ciphers/brute_force_caesar_cipher.py:14:38     - Unknown word (IFWON)      -- using Key #7: MFWXMNQ IFWON
ciphers/brute_force_caesar_cipher.py:15:30     - Unknown word (LEVWLMP)    -- Decryption using Key #8: LEVWLMP HEVNM
ciphers/brute_force_caesar_cipher.py:15:38     - Unknown word (HEVNM)      -- using Key #8: LEVWLMP HEVNM
ciphers/brute_force_caesar_cipher.py:16:30     - Unknown word (KDUVKLO)    -- Decryption using Key #9: KDUVKLO GDUML
ciphers/brute_force_caesar_cipher.py:16:38     - Unknown word (GDUML)      -- using Key #9: KDUVKLO GDUML
ciphers/brute_force_caesar_cipher.py:17:31     - Unknown word (JCTUJKN)    -- Decryption using Key #10: JCTUJKN FCTLK
ciphers/brute_force_caesar_cipher.py:17:39     - Unknown word (FCTLK)      -- using Key #10: JCTUJKN FCTLK
ciphers/brute_force_caesar_cipher.py:18:31     - Unknown word (IBSTIJM)    -- Decryption using Key #11: IBSTIJM EBSKJ
ciphers/brute_force_caesar_cipher.py:18:39     - Unknown word (EBSKJ)      -- using Key #11: IBSTIJM EBSKJ
ciphers/brute_force_caesar_cipher.py:19:31     - Unknown word (HARSHIL)    -- Decryption using Key #12: HARSHIL DARJI
ciphers/brute_force_caesar_cipher.py:19:39     - Unknown word (DARJI)      -- using Key #12: HARSHIL DARJI
ciphers/brute_force_caesar_cipher.py:20:31     - Unknown word (GZQRGHK)    -- Decryption using Key #13: GZQRGHK CZQIH
ciphers/brute_force_caesar_cipher.py:20:39     - Unknown word (CZQIH)      -- using Key #13: GZQRGHK CZQIH
ciphers/brute_force_caesar_cipher.py:21:31     - Unknown word (FYPQFGJ)    -- Decryption using Key #14: FYPQFGJ BYPHG
ciphers/brute_force_caesar_cipher.py:21:39     - Unknown word (BYPHG)      -- using Key #14: FYPQFGJ BYPHG
ciphers/brute_force_caesar_cipher.py:22:31     - Unknown word (EXOPEFI)    -- Decryption using Key #15: EXOPEFI AXOGF
ciphers/brute_force_caesar_cipher.py:22:39     - Unknown word (AXOGF)      -- using Key #15: EXOPEFI AXOGF
ciphers/brute_force_caesar_cipher.py:23:31     - Unknown word (DWNODEH)    -- Decryption using Key #16: DWNODEH ZWNFE
ciphers/brute_force_caesar_cipher.py:23:39     - Unknown word (ZWNFE)      -- using Key #16: DWNODEH ZWNFE
ciphers/brute_force_caesar_cipher.py:24:31     - Unknown word (CVMNCDG)    -- Decryption using Key #17: CVMNCDG YVMED
ciphers/brute_force_caesar_cipher.py:24:39     - Unknown word (YVMED)      -- using Key #17: CVMNCDG YVMED
ciphers/brute_force_caesar_cipher.py:25:31     - Unknown word (BULMBCF)    -- Decryption using Key #18: BULMBCF XULDC
ciphers/brute_force_caesar_cipher.py:25:39     - Unknown word (XULDC)      -- using Key #18: BULMBCF XULDC
ciphers/brute_force_caesar_cipher.py:26:31     - Unknown word (ATKLABE)    -- Decryption using Key #19: ATKLABE WTKCB
ciphers/brute_force_caesar_cipher.py:26:39     - Unknown word (WTKCB)      -- using Key #19: ATKLABE WTKCB
ciphers/brute_force_caesar_cipher.py:27:31     - Unknown word (ZSJKZAD)    -- Decryption using Key #20: ZSJKZAD VSJBA
ciphers/brute_force_caesar_cipher.py:27:39     - Unknown word (VSJBA)      -- using Key #20: ZSJKZAD VSJBA
ciphers/brute_force_caesar_cipher.py:28:31     - Unknown word (YRIJYZC)    -- Decryption using Key #21: YRIJYZC URIAZ
ciphers/brute_force_caesar_cipher.py:28:39     - Unknown word (URIAZ)      -- using Key #21: YRIJYZC URIAZ
ciphers/brute_force_caesar_cipher.py:29:31     - Unknown word (XQHIXYB)    -- Decryption using Key #22: XQHIXYB TQHZY
ciphers/brute_force_caesar_cipher.py:29:39     - Unknown word (TQHZY)      -- using Key #22: XQHIXYB TQHZY
ciphers/brute_force_caesar_cipher.py:30:31     - Unknown word (WPGHWXA)    -- Decryption using Key #23: WPGHWXA SPGYX
ciphers/brute_force_caesar_cipher.py:30:39     - Unknown word (SPGYX)      -- using Key #23: WPGHWXA SPGYX
ciphers/brute_force_caesar_cipher.py:31:31     - Unknown word (VOFGVWZ)    -- Decryption using Key #24: VOFGVWZ ROFXW
ciphers/brute_force_caesar_cipher.py:31:39     - Unknown word (ROFXW)      -- using Key #24: VOFGVWZ ROFXW
ciphers/brute_force_caesar_cipher.py:32:31     - Unknown word (UNEFUVY)    -- Decryption using Key #25: UNEFUVY QNEWV
ciphers/brute_force_caesar_cipher.py:32:39     - Unknown word (QNEWV)      -- using Key #25: UNEFUVY QNEWV
ciphers/brute_force_caesar_cipher.py:6:18      - Unknown word (TMDETUX)    -- >>> decrypt('TMDETUX PMDVU')
ciphers/brute_force_caesar_cipher.py:6:26      - Unknown word (PMDVU)      -- >> decrypt('TMDETUX PMDVU')
ciphers/brute_force_caesar_cipher.py:7:5       - Unknown word (Decryption) -- Decryption using Key #0: TMDETUX
ciphers/brute_force_caesar_cipher.py:8:30      - Unknown word (SLCDSTW)    -- Decryption using Key #1: SLCDSTW OLCUT
ciphers/brute_force_caesar_cipher.py:8:38      - Unknown word (OLCUT)      -- using Key #1: SLCDSTW OLCUT
ciphers/brute_force_caesar_cipher.py:9:30      - Unknown word (RKBCRSV)    -- Decryption using Key #2: RKBCRSV NKBTS
ciphers/brute_force_caesar_cipher.py:9:38      - Unknown word (NKBTS)      -- using Key #2: RKBCRSV NKBTS
ciphers/caesar_cipher.py:11:37     - Unknown word (caesar)     -- given string with the caesar cipher and returns the
ciphers/caesar_cipher.py:120:30    - Unknown word (Please)     -- the "key" or "shift". Please keep in mind, here we
ciphers/caesar_cipher.py:120:45    - Unknown word (mind)       -- shift". Please keep in mind, here we will be focused
ciphers/caesar_cipher.py:120:67    - Unknown word (focused)    -- mind, here we will be focused on
ciphers/caesar_cipher.py:121:5     - Unknown word (decryption) -- decryption.
ciphers/caesar_cipher.py:135:14    - Unknown word (doing)      -- continue doing this. A letter like
ciphers/caesar_cipher.py:163:5     - Unknown word (brute)      -- def brute_force(input_string:
ciphers/caesar_cipher.py:185:34    - Unknown word (intercepts) -- force is when a person intercepts a message or password
ciphers/caesar_cipher.py:185:5     - Unknown word (Brute)      -- Brute force is when a person
ciphers/caesar_cipher.py:186:57    - Unknown word (easy)       -- combination. This is easy with the caesar
ciphers/caesar_cipher.py:188:29    - Unknown word (larger)     -- complex the cipher, the larger amount of time it will
ciphers/caesar_cipher.py:191:58    - Unknown word (simplicity) -- alphabet (``abcde``), for simplicity and we intercepted
ciphers/caesar_cipher.py:191:76    - Unknown word (intercepted) -- for simplicity and we intercepted
ciphers/caesar_cipher.py:194:67    - Unknown word (sense)       -- combination that makes sense:
ciphers/caesar_cipher.py:234:48    - Unknown word (chose)       -- based on what the user chose
ciphers/caesar_cipher.py:236:36    - Unknown word (please)      -- print("Invalid choice, please enter a valid choice
ciphers/caesar_cipher.py:23:33     - Unknown word (english)    -- specified, the standard english alphabet with upper
ciphers/caesar_cipher.py:255:20    - Unknown word (Goodbye)     -- print("Goodbye.")
ciphers/caesar_cipher.py:33:38     - Unknown word (Julius)     -- cipher is named after Julius Caesar who used it when
ciphers/caesar_cipher.py:33:45     - Unknown word (Caesar)     -- is named after Julius Caesar who used it when sending
ciphers/caesar_cipher.py:34:12     - Unknown word (military)   -- secret military messages to his troops
ciphers/caesar_cipher.py:34:37     - Unknown word (troops)     -- military messages to his troops. This is a simple substitutio
ciphers/caesar_cipher.py:40:14     - Unknown word (captain)    -- ``Hello, captain``
ciphers/caesar_cipher.py:47:71     - Unknown word (become)     -- a time. ``H`` would become ``J``,
ciphers/caesar_cipher.py:48:32     - Unknown word (away)       -- `J`` is two letters away, and so on. If the shift
ciphers/caesar_cipher.py:49:68     - Unknown word (beginning)  -- we just start at the beginning
ciphers/caesar_cipher.py:52:34     - Unknown word (Jgnnq)      -- final message would be ``Jgnnq, ecrvckp``
ciphers/caesar_cipher.py:52:41     - Unknown word (ecrvckp)    -- message would be ``Jgnnq, ecrvckp``
ciphers/caesar_cipher.py:54:5      - Unknown word (Further)    -- Further reading
ciphers/caesar_cipher.py:62:38     - Unknown word (jumps)      -- The quick brown fox jumps over the lazy dog',
ciphers/caesar_cipher.py:63:11     - Unknown word (Cqks)       -- 'bpm yCqks jzwEv nwF rCuxA wDmz
ciphers/caesar_cipher.py:69:18     - Unknown word (fqumfgjy)   -- 'f qtbjwhfxj fqumfgjy'
ciphers/caesar_cipher.py:69:8      - Unknown word (qtbjwhfxj)  -- 'f qtbjwhfxj fqumfgjy'
ciphers/decrypt_caesar_with_chi_squared.py:115:24    - Unknown word (jhlzhy)      -- ... 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa
ciphers/decrypt_caesar_with_chi_squared.py:115:31    - Unknown word (jpwoly)      -- 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv
ciphers/decrypt_caesar_with_chi_squared.py:115:41    - Unknown word (wvwbshy)     -- aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr
ciphers/decrypt_caesar_with_chi_squared.py:115:60    - Unknown word (lhzf)        -- zv wvwbshy? pa pz avv lhzf av jyhjr!'
ciphers/decrypt_caesar_with_chi_squared.py:115:68    - Unknown word (jyhjr)       -- wvwbshy? pa pz avv lhzf av jyhjr!'
ciphers/decrypt_caesar_with_chi_squared.py:120:42    - Unknown word (crybd)       -- caesar_with_chi_squared('crybd cdbsxq')
ciphers/decrypt_caesar_with_chi_squared.py:120:48    - Unknown word (cdbsxq)      -- with_chi_squared('crybd cdbsxq')
ciphers/decrypt_caesar_with_chi_squared.py:123:42    - Unknown word (Crybd)       -- caesar_with_chi_squared('Crybd Cdbsxq', case_sensitive
ciphers/decrypt_caesar_with_chi_squared.py:123:48    - Unknown word (Cdbsxq)      -- with_chi_squared('Crybd Cdbsxq', case_sensitive=True
ciphers/decrypt_caesar_with_chi_squared.py:134:63    - Unknown word (much)        -- english language (how much they show up)
ciphers/decrypt_caesar_with_chi_squared.py:200:58    - Unknown word (occurs)      -- of times the letter occurs in the message
ciphers/decrypt_caesar_with_chi_squared.py:201:21    - Unknown word (occurrences) -- occurrences = decrypted_with_shift
ciphers/decrypt_caesar_with_chi_squared.py:203:31    - Unknown word (excepcted)   -- # Get the excepcted amount of times the
ciphers/decrypt_caesar_with_chi_squared.py:20:31     - Unknown word (commas)      -- string separated by commas)
ciphers/decrypt_caesar_with_chi_squared.py:22:38     - Unknown word (percentage)  -- letters and values are a percentage representation of the
ciphers/decrypt_caesar_with_chi_squared.py:24:72     - Unknown word (matters)     -- `True`` if the case matters during
ciphers/decrypt_caesar_with_chi_squared.py:25:37     - Unknown word (doesn't)     -- decryption, ``False`` if it doesn't
ciphers/decrypt_caesar_with_chi_squared.py:29:16     - Unknown word (likely)      -- (`most_likely_cipher`, `most_likely
ciphers/decrypt_caesar_with_chi_squared.py:47:33     - Unknown word (insecure)    -- caesar cipher is a very insecure encryption algorithm
ciphers/decrypt_caesar_with_chi_squared.py:47:64     - Unknown word (however)     -- encryption algorithm, however it has
ciphers/decrypt_caesar_with_chi_squared.py:49:47     - Unknown word (replaced)    -- in the plain text is replaced by a character in the
ciphers/decrypt_caesar_with_chi_squared.py:55:22     - Unknown word (ifmmp)       -- | Cipher text: ``ifmmp``
ciphers/decrypt_caesar_with_chi_squared.py:58:16     - Unknown word (imagine)     -- As you can imagine, this doesn't provide
ciphers/decrypt_caesar_with_chi_squared.py:58:38     - Unknown word (provide)     -- imagine, this doesn't provide lots of security. In
ciphers/decrypt_caesar_with_chi_squared.py:58:67     - Unknown word (fact)        -- lots of security. In fact
ciphers/decrypt_caesar_with_chi_squared.py:59:45     - Unknown word (extremely)   -- ciphertext by brute-force is extremely easy even by hand. However
ciphers/decrypt_caesar_with_chi_squared.py:59:5      - Unknown word (decrypting)  -- decrypting ciphertext by brute
ciphers/decrypt_caesar_with_chi_squared.py:59:74     - Unknown word (However)     -- extremely easy even by hand. However
ciphers/decrypt_caesar_with_chi_squared.py:5:29      - Unknown word (squared)    -- decrypt_caesar_with_chi_squared(
ciphers/decrypt_caesar_with_chi_squared.py:66:8      - Unknown word (shows)       -- it shows up compared to other
ciphers/decrypt_caesar_with_chi_squared.py:67:33     - Unknown word (likelihood)  -- representing the percentage likelihood). The most common letter
ciphers/decrypt_caesar_with_chi_squared.py:73:71     - Unknown word (average)     -- the combination, the average
ciphers/decrypt_caesar_with_chi_squared.py:74:42     - Unknown word (appear)      -- times the letter should appear the message is calculated
ciphers/decrypt_caesar_with_chi_squared.py:81:31     - Unknown word (margin)      -- Then, to calculate the margin of error (the amount
ciphers/decrypt_caesar_with_chi_squared.py:86:48     - Unknown word (actually)    -- of times the letter actually appears
ciphers/decrypt_caesar_with_chi_squared.py:87:21     - Unknown word (predicted)   -- - p be the predicted value of the number
ciphers/decrypt_caesar_with_chi_squared.py:89:50     - Unknown word (referred)    -- squared test result (referred to here as chi-squared
ciphers/decrypt_caesar_with_chi_squared.py:8:5       - Unknown word (frequencies) -- frequencies_dict: dict[str, float
ciphers/deterministic_miller_rabin.py:11:57     - Unknown word (indicates)     -- return value of True indicates that n is
ciphers/deterministic_miller_rabin.py:12:52     - Unknown word (negatives)     -- does not allow False negatives- a return value
ciphers/deterministic_miller_rabin.py:13:24     - Unknown word (composite)     -- of False is ALWAYS composite.
ciphers/deterministic_miller_rabin.py:18:35     - Unknown word (Since)         -- integer to be tested. Since we usually care if a
ciphers/deterministic_miller_rabin.py:18:52     - Unknown word (care)          -- tested. Since we usually care if a number is prime
ciphers/deterministic_miller_rabin.py:19:40     - Unknown word (raising)       -- returns False instead of raising a ValueError.
ciphers/deterministic_miller_rabin.py:1:15      - Unknown word (Nathan)     -- """Created by Nathan Damon, @bizzfitch on
ciphers/deterministic_miller_rabin.py:1:22      - Unknown word (Damon)      -- ""Created by Nathan Damon, @bizzfitch on github
ciphers/deterministic_miller_rabin.py:1:30      - Unknown word (bizzfitch)  -- Created by Nathan Damon, @bizzfitch on github
ciphers/deterministic_miller_rabin.py:21:63     - Unknown word (deterministic) -- the upper bound of the deterministic test.
ciphers/deterministic_miller_rabin.py:21:9      - Unknown word (Whether)       -- Whether or not to test n above
ciphers/deterministic_miller_rabin.py:2:10      - Unknown word (miller)     -- >>> test_miller_rabin()
ciphers/deterministic_miller_rabin.py:2:17      - Unknown word (rabin)      -- >>> test_miller_rabin()
ciphers/deterministic_miller_rabin.py:35:53     - Unknown word (quickly)       -- 1, 3, 7, 9):  # can quickly check last digit
ciphers/deterministic_miller_rabin.py:40:48     - Unknown word (probabilistic) -- probable=True to allow probabilistic test. "
ciphers/deterministic_miller_rabin.py:69:7      - Unknown word (essentially)   -- # essentially, solve for d * 2 **
ciphers/deterministic_miller_rabin.py:6:32      - Unknown word (probable)   -- rabin(n: int, allow_probable: bool = False) -> bool
ciphers/deterministic_miller_rabin.py:7:22      - Unknown word (Miller)        -- """Deterministic Miller-Rabin algorithm for
ciphers/deterministic_miller_rabin.py:7:29      - Unknown word (Rabin)         -- Deterministic Miller-Rabin algorithm for primes
ciphers/deterministic_miller_rabin.py:7:49      - Unknown word (primes)        -- Rabin algorithm for primes ~< 3.32e24.
ciphers/deterministic_miller_rabin.py:7:8       - Unknown word (Deterministic) -- """Deterministic Miller-Rabin algorithm
ciphers/deterministic_miller_rabin.py:80:48     - Unknown word (compositeness) -- loop will not determine compositeness
ciphers/deterministic_miller_rabin.py:84:53     - Unknown word (evaluated)     -- the above loop never evaluated to true,
ciphers/deterministic_miller_rabin.py:91:18     - Unknown word (nontrivial)    -- """Testing a nontrivial (ends in 1, 3, 7, 9
ciphers/deterministic_miller_rabin.py:9:10      - Unknown word (numerical)     -- Uses numerical analysis results to
ciphers/diffie.py:15:30     - Unknown word (Modulo)     -- find_primitive(7) # Modulo 7 has primitive root
ciphers/diffie.py:4:10      - Unknown word (primitive)  -- def find_primitive(modulus: int) -> int
ciphers/diffie.py:4:20      - Unknown word (modulus)    -- def find_primitive(modulus: int) -> int | None
ciphers/diffie_hellman.py:196:11    - Unknown word (generating)  -- >>> # generating shared key using the
ciphers/diffie_hellman.py:1:22      - Unknown word (hexlify)    -- from binascii import hexlify
ciphers/diffie_hellman.py:3:16      - Unknown word (urandom)    -- from os import urandom
ciphers/diffie_hellman.py:5:19      - Unknown word (Modular)    -- # RFC 3526 - More Modular Exponential (MODP) Diffie
ciphers/diffie_hellman.py:5:27      - Unknown word (Exponential) -- 3526 - More Modular Exponential (MODP) Diffie-Hellman
ciphers/diffie_hellman.py:5:40      - Unknown word (MODP)        -- Modular Exponential (MODP) Diffie-Hellman groups
ciphers/diffie_hellman.py:5:46      - Unknown word (Diffie)      -- Modular Exponential (MODP) Diffie-Hellman groups for
ciphers/diffie_hellman.py:5:53      - Unknown word (Hellman)     -- Exponential (MODP) Diffie-Hellman groups for
ciphers/elgamal_key_generator.py:11:10     - Unknown word (written)    -- # I have written my code naively same
ciphers/elgamal_key_generator.py:11:26     - Unknown word (naively)    -- have written my code naively same as definition of
ciphers/elgamal_key_generator.py:14:47     - Unknown word (ISBN)       -- Cryptography(CRC Press, ISBN : 0-8493-8523-7, October
ciphers/elgamal_key_generator.py:15:10     - Unknown word (seems)      -- # and it seems to run nicely!
ciphers/elgamal_key_generator.py:15:23     - Unknown word (nicely)     -- and it seems to run nicely!
ciphers/elgamal_key_generator.py:17:12     - Unknown word (Generating) -- print("Generating primitive root of p
ciphers/elgamal_key_generator.py:41:72     - Unknown word (privkey)    -- path.exists(f"{name}_privkey.txt"):
ciphers/elgamal_key_generator.py:60:12     - Unknown word (Making)     -- print("Making key files...")
ciphers/elgamal_key_generator.py:61:21     - Unknown word (elgamal)    -- make_key_files("elgamal", 2048)
ciphers/enigma_machine2.py:108:7     - Unknown word (Validates)                  -- # Validates string and returns dict
ciphers/enigma_machine2.py:109:15    - Unknown word (plugboard)                  -- pbdict = _plugboard(pb)
ciphers/enigma_machine2.py:109:5     - Unknown word (pbdict)                     -- pbdict = _plugboard(pb)
ciphers/enigma_machine2.py:114:16    - Unknown word (pbstring)                   -- def _plugboard(pbstring: str) -> dict[str, str
ciphers/enigma_machine2.py:118:21    - Unknown word (PICTURES)                   -- >>> _plugboard('PICTURES')
ciphers/enigma_machine2.py:123:25    - Unknown word (stands)                     -- In the code, ``pb`` stands for ``plugboard``
ciphers/enigma_machine2.py:128:36    - Unknown word (converted)                  -- dictionary containing converted pairs
ciphers/enigma_machine2.py:135:17    - Unknown word (Plugboard)                  -- msg = f"Plugboard setting isn't type string
ciphers/enigma_machine2.py:13:28     - Unknown word (rotors)          -- randomly generated rotors
ciphers/enigma_machine2.py:146:5     - Unknown word (tmppbl)                     -- tmppbl = set()
ciphers/enigma_machine2.py:14:25     - Unknown word (rotor)           -- reflector (aka static rotor)
ciphers/enigma_machine2.py:14:3      - Unknown word (reflector)       -- - reflector (aka static rotor)
ciphers/enigma_machine2.py:17:12     - Unknown word (Trapinch)        -- Created by TrapinchO
ciphers/enigma_machine2.py:180:20    - Unknown word (goes)                       -- - Input letter goes into the plugboard.
ciphers/enigma_machine2.py:184:75    - Unknown word (shuffled)                   -- symbol, where one is shuffled.
ciphers/enigma_machine2.py:191:9     - Unknown word (VKLEPDBGRNWTFCJOHQAMUZYIXS) -- | VKLEPDBGRNWTFCJOHQAMUZYIXS |
ciphers/enigma_machine2.py:194:19    - Unknown word (switched)                   -- There it is switched with paired symbol.
ciphers/enigma_machine2.py:194:33    - Unknown word (paired)                     -- it is switched with paired symbol.
ciphers/enigma_machine2.py:195:77    - Unknown word (alphanet)                   -- each with half of the alphanet.
ciphers/enigma_machine2.py:201:9     - Unknown word (ZYXWVUTSRQPON)              -- | ZYXWVUTSRQPON | so when E goes in
ciphers/enigma_machine2.py:209:50    - Unknown word (pictures)                   -- , (1, 2, 1), plugb='pictures')
ciphers/enigma_machine2.py:210:12    - Unknown word (JUHHI)                      -- 'KORYH JUHHI!'
ciphers/enigma_machine2.py:210:6     - Unknown word (KORYH)                      -- 'KORYH JUHHI!'
ciphers/enigma_machine2.py:211:24    - Unknown word (juhhi)                      -- >>> enigma('KORYH, juhhi!', (1, 2, 1), plugb
ciphers/enigma_machine2.py:214:12    - Unknown word (QWOBU)                      -- 'FPNCZ QWOBU!'
ciphers/enigma_machine2.py:214:6     - Unknown word (FPNCZ)                      -- 'FPNCZ QWOBU!'
ciphers/enigma_machine2.py:22:1      - Unknown word (Rotor)           -- RotorPositionT = tuple[int
ciphers/enigma_machine2.py:272:21    - Unknown word (resets)                     -- # moves/resets rotor positions
ciphers/enigma_machine2.py:301:12    - Unknown word (Decrypted)                  -- print("Decrypted message:", enigma(en
ciphers/enigma_machine2.py:32:11     - Unknown word (EGZWVONAHDCLFQMSIPJBYUKXTR) -- rotor1 = "EGZWVONAHDCLFQMSIPJBYUKXTR"
ciphers/enigma_machine2.py:33:11     - Unknown word (FOBHMDKEXQNRAULPGSJVTYICZW) -- rotor2 = "FOBHMDKEXQNRAULPGSJVTYICZW"
ciphers/enigma_machine2.py:34:11     - Unknown word (ZJXESIUQLHAVRMDOYGTNFWPBKC) -- rotor3 = "ZJXESIUQLHAVRMDOYGTNFWPBKC"
ciphers/enigma_machine2.py:3:3       - Unknown word (Video)      -- | Video explanation: https:
ciphers/enigma_machine2.py:4:18      - Unknown word (Numberphile's) -- | Also check out Numberphile's and Computerphile's
ciphers/enigma_machine2.py:4:36      - Unknown word (Computerphile's) -- out Numberphile's and Computerphile's videos on this topic
ciphers/enigma_machine2.py:4:52      - Unknown word (videos)          -- and Computerphile's videos on this topic
ciphers/enigma_machine2.py:66:11     - Unknown word (RMDJXFUWGISLHVTCQNKYPBEZOA) -- rotor4 = "RMDJXFUWGISLHVTCQNKYPBEZOA"
ciphers/enigma_machine2.py:67:11     - Unknown word (SGLCPQWZHKXAREONTFBVIYJUDM) -- rotor5 = "SGLCPQWZHKXAREONTFBVIYJUDM"
ciphers/enigma_machine2.py:68:11     - Unknown word (HVSICLTYKQUBXDWAJZOMFGPREN) -- rotor6 = "HVSICLTYKQUBXDWAJZOMFGPREN"
ciphers/enigma_machine2.py:69:11     - Unknown word (RZWQHFMVDBKICJLNTUXAGYPSOE) -- rotor7 = "RZWQHFMVDBKICJLNTUXAGYPSOE"
ciphers/enigma_machine2.py:6:33      - Unknown word (enigma)          -- contains function ``enigma`` which emulates
ciphers/enigma_machine2.py:6:48      - Unknown word (emulates)        -- function ``enigma`` which emulates
ciphers/enigma_machine2.py:70:11     - Unknown word (LFKIJODBEGAMQPXVUHYSTCZRWN) -- rotor8 = "LFKIJODBEGAMQPXVUHYSTCZRWN"
ciphers/enigma_machine2.py:71:11     - Unknown word (KOAEGVDHXPQZMLFTYWJNBRCIUS) -- rotor9 = "KOAEGVDHXPQZMLFTYWJNBRCIUS"
ciphers/enigma_machine2.py:7:12      - Unknown word (Enigma)          -- the famous Enigma machine from WWII.
ciphers/enigma_machine2.py:7:32      - Unknown word (WWII)            -- Enigma machine from WWII.
ciphers/enigma_machine2.py:7:5       - Unknown word (famous)          -- the famous Enigma machine from
ciphers/enigma_machine2.py:80:56     - Unknown word (POLAND)                     -- , rotor2, rotor3), 'POLAND')
ciphers/enigma_machine2.py:85:26     - Unknown word (positon)                    -- param rotpos: rotor_positon
ciphers/enigma_machine2.py:87:16     - Unknown word (plugb)                      -- :param pb: plugb -> validated and transformed
ciphers/enigma_machine2.py:87:25     - Unknown word (validated)                  -- :param pb: plugb -> validated and transformed
ciphers/enigma_machine2.py:97:5      - Unknown word (rotorpos)                   -- rotorpos1, rotorpos2, rotorpos
ciphers/fractionated_morse_cipher.py:107:10    - Unknown word (ESOAVVLJRSSTRX) -- 'ESOAVVLJRSSTRX'
ciphers/fractionated_morse_cipher.py:14:1      - Unknown word (MORSE)        -- MORSE_CODE_DICT = {
ciphers/fractionated_morse_cipher.py:2:24      - Unknown word (Fractionated) -- Python program for the Fractionated Morse Cipher.
ciphers/fractionated_morse_cipher.py:2:37      - Unknown word (Morse)        -- for the Fractionated Morse Cipher.
ciphers/fractionated_morse_cipher.py:44:19     - Unknown word (trigrams)     -- # Define possible trigrams of Morse code
ciphers/fractionated_morse_cipher.py:4:37      - Unknown word (converts)     -- actionated Morse cipher first converts the plaintext to Morse
ciphers/fractionated_morse_cipher.py:5:6       - Unknown word (enciphers)    -- then enciphers fixed-size blocks of
ciphers/fractionated_morse_cipher.py:6:6       - Unknown word (procedure)    -- This procedure means plaintext letters
ciphers/fractionated_morse_cipher.py:79:15     - Unknown word (morse)        -- def encode_to_morse(plaintext: str) -> str
ciphers/fractionated_morse_cipher.py:95:13     - Unknown word (fractionated) -- def encrypt_fractionated_morse(plaintext: str
ciphers/gronsfeld_cipher.py:11:6      - Unknown word (IGOMQ)      -- 'IGOMQ'
ciphers/gronsfeld_cipher.py:4:5       - Unknown word (gronsfeld)  -- def gronsfeld(text: str, key: str
ciphers/gronsfeld_cipher.py:6:32      - Unknown word (Gronsfeld)  -- Encrypt plaintext with the Gronsfeld cipher
ciphers/gronsfeld_cipher.py:9:6       - Unknown word (LFNPP)      -- 'LFNPP'
ciphers/hill_cipher.py:106:10    - Unknown word (TESTINGHILLCIPHERR) -- 'TESTINGHILLCIPHERR'
ciphers/hill_cipher.py:108:10    - Unknown word (HELLOO)             -- 'HELLOO'
ciphers/hill_cipher.py:10:1      - Unknown word (Your)       -- Your text is divided into
ciphers/hill_cipher.py:10:27     - Unknown word (batches)    -- text is divided into batches of length N and converted
ciphers/hill_cipher.py:10:74     - Unknown word (vectors)    -- converted to numerical vectors
ciphers/hill_cipher.py:122:10    - Unknown word (WHXYJOLM)           -- 'WHXYJOLM9C6XT085LL'
ciphers/hill_cipher.py:13:17     - Unknown word (multiplied) -- The key is then multiplied with the newly created
ciphers/hill_cipher.py:13:37     - Unknown word (newly)      -- multiplied with the newly created batch vector
ciphers/hill_cipher.py:14:28     - Unknown word (multiplication) -- encoded vector. After each multiplication modular 36 calculations
ciphers/hill_cipher.py:14:43     - Unknown word (modular)        -- each multiplication modular 36 calculations are
ciphers/hill_cipher.py:15:25     - Unknown word (bring)          -- the vectors so as to bring the numbers between
ciphers/hill_cipher.py:16:21     - Unknown word (alphanumerics)  -- their corresponding alphanumerics.
ciphers/hill_cipher.py:19:1      - Unknown word (encrypting)     -- encrypting key modular 36. The
ciphers/hill_cipher.py:202:12    - Unknown word (Would)              -- print("Would you like to encrypt
ciphers/hill_cipher.py:23:5      - Unknown word (determinant)    -- The determinant of the encryption key
ciphers/hill_cipher.py:26:26     - Unknown word (considers)      -- implementation only considers alphanumerics in the
ciphers/hill_cipher.py:30:12     - Unknown word (might)          -- decrypting might be a little different
ciphers/hill_cipher.py:30:23     - Unknown word (little)         -- decrypting might be a little different than the original
ciphers/hill_cipher.py:89:24     - Unknown word (linalg)         -- det = round(np.linalg.det(self.encrypt_key
ciphers/mixed_keyword_cypher.py:24:6      - Unknown word (XKJGUFMJST) -- 'XKJGUFMJST'
ciphers/mixed_keyword_cypher.py:34:10     - Unknown word (determines) -- # it determines how we will map plaintext
ciphers/mixed_keyword_cypher.py:39:21     - Unknown word (those)      -- # the number of those unique characters will
ciphers/mixed_keyword_cypher.py:47:37     - Unknown word (splitting)  -- modified alphabet by splitting the shifted alphabet
ciphers/mono_alphabetic_ciphers.py:10:28     - Unknown word (QWERTYUIOPASDFGHJKLZXCVBNM) -- translate_message("QWERTYUIOPASDFGHJKLZXCVBNM","Hello World","encrypt
ciphers/mono_alphabetic_ciphers.py:11:12     - Unknown word (Bidsm)                      -- 'Pcssi Bidsm'
ciphers/mono_alphabetic_ciphers.py:11:6      - Unknown word (Pcssi)                      -- 'Pcssi Bidsm'
ciphers/mono_alphabetic_ciphers.py:42:12     - Unknown word (Vgksr)                      -- 'Itssg Vgksr'
ciphers/mono_alphabetic_ciphers.py:42:6      - Unknown word (Itssg)                      -- 'Itssg Vgksr'
ciphers/morse_code.py:20:6      - Unknown word (Exclamation) -- } # Exclamation mark is not in ITU-R
ciphers/permutation_cipher.py:29:11     - Unknown word (sizes)         -- block_sizes = [
ciphers/permutation_cipher.py:3:1       - Unknown word (technique)  -- technique that rearranges the
ciphers/permutation_cipher.py:3:16      - Unknown word (rearranges) -- technique that rearranges the characters in a
ciphers/permutation_cipher.py:6:34      - Unknown word (rearrangement) -- the order of character rearrangement.
ciphers/permutation_cipher.py:88:9      - Unknown word (rearranged)    -- rearranged_block = [block[digit
ciphers/playfair_cipher.py:10:12     - Unknown word (manual)     -- 2) It is a manual symmetric encryption
ciphers/playfair_cipher.py:125:17    - Unknown word (BMZFAZRZDH)                -- >>> decode("BMZFAZRZDH", "HAZARD")
ciphers/playfair_cipher.py:125:31    - Unknown word (HAZARD)                    -- decode("BMZFAZRZDH", "HAZARD")
ciphers/playfair_cipher.py:126:6     - Unknown word (FIREHAZARD)                -- 'FIREHAZARD'
ciphers/playfair_cipher.py:127:17    - Unknown word (HNBWBPQT)                  -- >>> decode("HNBWBPQT", "AUTOMOBILE")
ciphers/playfair_cipher.py:128:6     - Unknown word (DRIVINGX)                  -- 'DRIVINGX'
ciphers/playfair_cipher.py:129:17    - Unknown word (SLYSSAQS)                  -- >>> decode("SLYSSAQS", "CASTLE")
ciphers/playfair_cipher.py:130:6     - Unknown word (ATXTACKX)                  -- 'ATXTACKX'
ciphers/playfair_cipher.py:13:38     - Unknown word (encodes)    -- lementation in the code below encodes alphabets only.
ciphers/playfair_cipher.py:13:46     - Unknown word (alphabets)  -- the code below encodes alphabets only.
ciphers/playfair_cipher.py:158:39    - Unknown word (THANKS)                    -- Encoded:", encode("BYE AND THANKS", "GREETING"))
ciphers/playfair_cipher.py:158:49    - Unknown word (GREETING)                  -- encode("BYE AND THANKS", "GREETING"))
ciphers/playfair_cipher.py:159:31    - Unknown word (CXRBANRLBALQ)              -- "Decoded:", decode("CXRBANRLBALQ", "GREETING"))
ciphers/playfair_cipher.py:17:16     - Unknown word (longer)     -- Playfair is no longer used by military forces
ciphers/playfair_cipher.py:17:40     - Unknown word (forces)     -- longer used by military forces because of known
ciphers/playfair_cipher.py:18:1      - Unknown word (insecurities) -- insecurities and of the advent of
ciphers/playfair_cipher.py:18:25     - Unknown word (advent)       -- insecurities and of the advent of automated encryption
ciphers/playfair_cipher.py:19:16     - Unknown word (regarded)     -- This cipher is regarded as insecure since before
ciphers/playfair_cipher.py:27:5      - Unknown word (chunker)      -- def chunker(seq: Iterable[str],
ciphers/playfair_cipher.py:36:19     - Unknown word (dirty)        -- def prepare_input(dirty: str) -> str:
ciphers/playfair_cipher.py:38:33     - Unknown word (casing)       -- the plaintext by up-casing it
ciphers/playfair_cipher.py:39:9      - Unknown word (separating)   -- and separating repeated letters with
ciphers/playfair_cipher.py:4:25      - Unknown word (developed)  -- Playfair cipher was developed by Charles Wheatstone
ciphers/playfair_cipher.py:4:46      - Unknown word (Wheatstone) -- developed by Charles Wheatstone in 1854
ciphers/playfair_cipher.py:4:5       - Unknown word (Playfair)   -- The Playfair cipher was developed
ciphers/playfair_cipher.py:5:14      - Unknown word (heavily)    -- It's use was heavily promotedby Lord Playfair
ciphers/playfair_cipher.py:5:22      - Unknown word (promotedby) -- It's use was heavily promotedby Lord Playfair, hence
ciphers/playfair_cipher.py:5:33      - Unknown word (Lord)       -- was heavily promotedby Lord Playfair, hence its
ciphers/playfair_cipher.py:63:24     - Unknown word (interchangeably) -- # I and J are used interchangeably to allow
ciphers/playfair_cipher.py:65:17     - Unknown word (ABCDEFGHIKLMNOPQRSTUVWXYZ) -- alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
ciphers/playfair_cipher.py:67:71     - Unknown word (simpler)                   -- actual encoding/decoding simpler
ciphers/playfair_cipher.py:70:63     - Unknown word (ignoring)                  -- they are in `alphabet` ignoring duplicates
ciphers/playfair_cipher.py:88:26     - Unknown word (MONARCHY)                  -- >> encode("Hello", "MONARCHY")
ciphers/playfair_cipher.py:89:6      - Unknown word (CFSUPM)                    -- 'CFSUPM'
ciphers/playfair_cipher.py:90:36     - Unknown word (flank)                     -- "attack on the left flank", "EMERGENCY")
ciphers/playfair_cipher.py:91:6      - Unknown word (DQZSBYFSDZFMFNLOHFDRSG)    -- 'DQZSBYFSDZFMFNLOHFDRSG'
ciphers/playfair_cipher.py:92:17     - Unknown word (Sorry)                     -- >>> encode("Sorry!", "SPECIAL")
ciphers/playfair_cipher.py:93:6      - Unknown word (AVXETX)                    -- 'AVXETX'
ciphers/playfair_cipher.py:95:6      - Unknown word (UMBENF)                    -- 'UMBENF'
ciphers/playfair_cipher.py:96:17     - Unknown word (Photosynthesis)            -- >>> encode("Photosynthesis!", "THE SUN")
ciphers/playfair_cipher.py:97:6      - Unknown word (OEMHQHVCHESUKE)            -- 'OEMHQHVCHESUKE'
ciphers/playfair_cipher.py:9:29      - Unknown word (diagram)    -- was the first literal diagram substitution cipher
ciphers/porta_cipher.py:10:29     - Unknown word (WXYZNOPQRSTUV) -- ("ABCDEFGHIJKLM", "WXYZNOPQRSTUV"),
ciphers/porta_cipher.py:12:29     - Unknown word (VWXYZNOPQRSTU) -- ("ABCDEFGHIJKLM", "VWXYZNOPQRSTU"),
ciphers/porta_cipher.py:14:29     - Unknown word (UVWXYZNOPQRST) -- ("ABCDEFGHIJKLM", "UVWXYZNOPQRST"),
ciphers/porta_cipher.py:16:29     - Unknown word (TUVWXYZNOPQRS) -- ("ABCDEFGHIJKLM", "TUVWXYZNOPQRS"),
ciphers/porta_cipher.py:18:29     - Unknown word (STUVWXYZNOPQR) -- ("ABCDEFGHIJKLM", "STUVWXYZNOPQR"),
ciphers/porta_cipher.py:20:29     - Unknown word (RSTUVWXYZNOPQ) -- ("ABCDEFGHIJKLM", "RSTUVWXYZNOPQ"),
ciphers/porta_cipher.py:22:29     - Unknown word (QRSTUVWXYZNOP) -- ("ABCDEFGHIJKLM", "QRSTUVWXYZNOP"),
ciphers/porta_cipher.py:24:29     - Unknown word (PQRSTUVWXYZNO) -- ("ABCDEFGHIJKLM", "PQRSTUVWXYZNO"),
ciphers/porta_cipher.py:26:29     - Unknown word (OPQRSTUVWXYZN) -- ("ABCDEFGHIJKLM", "OPQRSTUVWXYZN"),
ciphers/porta_cipher.py:2:29      - Unknown word (NOPQRSTUVWXYZ) -- ("ABCDEFGHIJKLM", "NOPQRSTUVWXYZ"),
ciphers/porta_cipher.py:33:25     - Unknown word (marvin)        -- >>> generate_table('marvin') # doctest: +NORMALIZE
ciphers/porta_cipher.py:43:28     - Unknown word (jessica)       -- encrypt('marvin', 'jessica')
ciphers/porta_cipher.py:44:6      - Unknown word (QRACRWU)       -- 'QRACRWU'
ciphers/porta_cipher.py:4:29      - Unknown word (ZNOPQRSTUVWXY) -- ("ABCDEFGHIJKLM", "ZNOPQRSTUVWXY"),
ciphers/porta_cipher.py:50:23     - Unknown word (opponent)      -- cipher += get_opponent(table[count], char)
ciphers/porta_cipher.py:58:6      - Unknown word (JESSICA)       -- 'JESSICA'
ciphers/porta_cipher.py:6:29      - Unknown word (YZNOPQRSTUVWX) -- ("ABCDEFGHIJKLM", "YZNOPQRSTUVWX"),
ciphers/porta_cipher.py:89:26     - Unknown word (Fist)          -- doctest.testmod() # Fist ensure that all our
ciphers/porta_cipher.py:8:29      - Unknown word (XYZNOPQRSTUVW) -- ("ABCDEFGHIJKLM", "XYZNOPQRSTUVW"),
ciphers/rabin_miller.py:1:3       - Unknown word (Primality)  -- # Primality Testing with the Rabin
ciphers/rail_fence_cipher.py:11:10     - Unknown word (olordll)    -- 'HWe olordll'
ciphers/rail_fence_cipher.py:32:42     - Unknown word (puts)       -- position % (lowest * 2)  # puts it in bounds
ciphers/rail_fence_cipher.py:43:47     - Unknown word (fills)      -- based on the key and fills it in with
ciphers/rail_fence_cipher.py:6:5       - Unknown word (Shuffles)   -- Shuffles the character of a string
ciphers/rail_fence_cipher.py:74:9      - Unknown word (splice)     -- splice = input_string[counter
ciphers/rail_fence_cipher.py:78:27     - Unknown word (reads)      -- output_string = ""  # reads as zigzag
ciphers/rail_fence_cipher.py:7:30      - Unknown word (dependent)  -- grid (the height is dependent on the key) in a zigzag
ciphers/rail_fence_cipher.py:7:57      - Unknown word (zigzag)     -- dependent on the key) in a zigzag
ciphers/rail_fence_cipher.py:87:5      - Unknown word (bruteforce) -- def bruteforce(input_string: str)
ciphers/rail_fence_cipher.py:88:33     - Unknown word (guessing)   -- decrypt function by guessing every key
ciphers/rot13.py:1:5       - Unknown word (dencrypt)   -- def dencrypt(s: str, n: int = 13
ciphers/rot13.py:8:16      - Unknown word (onax)       -- "Zl frperg onax nppbhag ahzore vf 1
ciphers/rot13.py:8:21      - Unknown word (nppbhag)    -- "Zl frperg onax nppbhag ahzore vf 173-52946
ciphers/rot13.py:8:29      - Unknown word (ahzore)     -- frperg onax nppbhag ahzore vf 173-52946 fb qba
ciphers/rot13.py:8:58      - Unknown word (gryy)       -- vf 173-52946 fb qba'g gryy nalbar!!"
ciphers/rot13.py:8:63      - Unknown word (nalbar)     -- 52946 fb qba'g gryy nalbar!!"
ciphers/rot13.py:8:9       - Unknown word (frperg)     -- "Zl frperg onax nppbhag ahzore
ciphers/rsa_cipher.py:105:33    - Unknown word (Were)       -- "than the key size. Were the correct key file
ciphers/rsa_cipher.py:130:17    - Unknown word (Encrypting) -- print(f"Encrypting and writing to {filename
ciphers/rsa_cipher.py:81:33     - Unknown word (Either)     -- "than the key size. Either decrease the block size
ciphers/rsa_factorization.py:10:23     - Unknown word (minutes)     -- large number can take minutes to factor, therefore
ciphers/rsa_factorization.py:10:42     - Unknown word (therefore)   -- take minutes to factor, therefore are not included in
ciphers/rsa_factorization.py:10:60     - Unknown word (included)    -- factor, therefore are not included in doctest.
ciphers/rsa_factorization.py:19:5      - Unknown word (rsafactor)   -- def rsafactor(d: int, e: int, n: int
ciphers/rsa_factorization.py:21:31     - Unknown word (factors)     -- function returns the factors of N, where p*q=N
ciphers/rsa_factorization.py:26:52     - Unknown word (suggests)    -- public key. As its name suggests, it is public and is
ciphers/rsa_factorization.py:28:79     - Unknown word (recipient)   -- is known only to the recipient
ciphers/rsa_factorization.py:4:17      - Unknown word (efficiently) -- The program can efficiently factor RSA prime number
ciphers/rsa_factorization.py:54:35     - Unknown word (divisible)   -- break # t is not divisible by 2, break and choose
ciphers/rsa_key_generator.py:18:30     - Unknown word (repeatability) -- random.seed(0) # for repeatability
ciphers/running_key_cipher.py:10:39     - Unknown word (piece)      -- The running key (long piece of text).
ciphers/running_key_cipher.py:31:5      - Unknown word (Decrypts)   -- Decrypts the ciphertext using
ciphers/running_key_cipher.py:54:29     - Unknown word (duck)       -- key = "How does the duck know that? said Victor
ciphers/running_key_cipher.py:54:50     - Unknown word (Victor)     -- duck know that? said Victor"
ciphers/running_key_cipher.py:8:5       - Unknown word (Encrypts)   -- Encrypts the plaintext using
ciphers/shuffled_shift_cipher.py:102:22    - Unknown word (pivot)                      -- # points and pivot each substring
ciphers/shuffled_shift_cipher.py:129:18    - Unknown word (shifting)                   -- Performs shifting of the encoded_message
ciphers/shuffled_shift_cipher.py:132:44    - Unknown word (Xyqe)                       -- ShuffledShiftCipher('4PYIXyqeQZr44')
ciphers/shuffled_shift_cipher.py:13:33     - Unknown word (English)    -- uppercase letters of the English alphabet
ciphers/shuffled_shift_cipher.py:18:46     - Unknown word (pivoted)    -- in the plaintext, is pivoted and shuffled. Refer
ciphers/shuffled_shift_cipher.py:19:50     - Unknown word (shuffling)  -- learn more about the shuffling.
ciphers/shuffled_shift_cipher.py:25:28     - Unknown word (possess)    -- Each cipher object can possess an optional argument
ciphers/shuffled_shift_cipher.py:33:9      - Unknown word (Initializes) -- Initializes a cipher object with
ciphers/shuffled_shift_cipher.py:35:15     - Unknown word (creating)    -- while creating the object
ciphers/shuffled_shift_cipher.py:49:55     - Unknown word (alternate)   -- changing the sign of each alternate element
ciphers/shuffled_shift_cipher.py:49:9      - Unknown word (Mutates)     -- Mutates the list by changing
ciphers/shuffled_shift_cipher.py:52:22     - Unknown word (mutated)     -- :return: the mutated list
ciphers/shuffled_shift_cipher.py:66:10     - Unknown word (rtype)       -- :rtype: list
ciphers/shuffled_shift_cipher.py:75:51     - Unknown word (pivoting)    -- character choices by pivoting at breakpoints
ciphers/shuffled_shift_cipher.py:7:7       - Unknown word (Shuffled)   -- class ShuffledShiftCipher:
ciphers/shuffled_shift_cipher.py:80:17     - Unknown word (CAMERA)      -- and CAMERA is the passcode
ciphers/shuffled_shift_cipher.py:82:38     - Unknown word (MLKJIHGF)    -- shuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
ciphers/shuffled_shift_cipher.py:82:47     - Unknown word (RQPON)       -- parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
ciphers/shuffled_shift_cipher.py:82:53     - Unknown word (ZYXWVUTS)    -- CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]
ciphers/shuffled_shift_cipher.py:83:35     - Unknown word (ACBEDMLKJIHGFRQPONZYXWVUTS) -- shuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS
ciphers/shuffled_shift_cipher.py:85:9      - Unknown word (Shuffling)                  -- Shuffling only 26 letters of the
ciphers/shuffled_shift_cipher.py:87:24     - Unknown word (including)                  -- 97 characters (including letters, digits, punctuation
ciphers/shuffled_shift_cipher.py:88:28     - Unknown word (possibility)                -- thereby creating a possibility of 97! combinations
ciphers/shuffled_shift_cipher.py:88:9      - Unknown word (thereby)                    -- thereby creating a possibility
ciphers/shuffled_shift_cipher.py:89:12     - Unknown word (itself)                     -- in itself), thus diminishing the
ciphers/shuffled_shift_cipher.py:89:21     - Unknown word (thus)                       -- in itself), thus diminishing the possibility
ciphers/shuffled_shift_cipher.py:89:26     - Unknown word (diminishing)                -- in itself), thus diminishing the possibility of a
ciphers/shuffled_shift_cipher.py:90:35     - Unknown word (introduce)                  -- Moreover, shift keys even introduce a multiple of 26 for
ciphers/shuffled_shift_cipher.py:93:36     - Unknown word (nearly)                     -- list_options contain nearly all printable except
ciphers/simple_keyword_cypher.py:13:12     - Unknown word (dups)       -- key_no_dups = ""
ciphers/simple_keyword_cypher.py:3:23      - Unknown word (alphabetic) -- Removes duplicate alphabetic characters in a keyword
ciphers/simple_keyword_cypher.py:48:5      - Unknown word (Enciphers)  -- Enciphers a message given a cipher
ciphers/simple_keyword_cypher.py:4:11      - Unknown word (appearance) -- first appearance).
ciphers/simple_keyword_cypher.py:52:14     - Unknown word (enciphered) -- :return: enciphered string
ciphers/simple_keyword_cypher.py:55:12     - Unknown word (VMQJB)      -- 'CYJJM VMQJB!!'
ciphers/simple_keyword_cypher.py:55:6      - Unknown word (CYJJM)      -- 'CYJJM VMQJB!!'
ciphers/simple_keyword_cypher.py:62:5      - Unknown word (Deciphers)  -- Deciphers a message given a cipher
ciphers/simple_keyword_cypher.py:66:14     - Unknown word (Deciphered) -- :return: Deciphered string
ciphers/simple_keyword_cypher.py:79:5      - Unknown word (Handles)    -- Handles I/O
ciphers/simple_keyword_cypher.py:85:21     - Unknown word (Encipher)   -- option = input("Encipher or decipher? E/D:")
ciphers/simple_substitution_cipher.py:10:5      - Unknown word (resp)                       -- resp = input("Encrypt/Decrypt
ciphers/simple_substitution_cipher.py:36:56     - Unknown word (Harshil)                    -- LFWOAYUISVKMNXPBDCRJTQEGHZ', 'Harshil Darji')
ciphers/simple_substitution_cipher.py:36:64     - Unknown word (Darji)                      -- SVKMNXPBDCRJTQEGHZ', 'Harshil Darji')
ciphers/simple_substitution_cipher.py:37:14     - Unknown word (Olcvs)                      -- 'Ilcrism Olcvs'
ciphers/simple_substitution_cipher.py:37:6      - Unknown word (Ilcrism)                    -- 'Ilcrism Olcvs'
ciphers/simple_substitution_cipher.py:9:12      - Unknown word (LFWOAYUISVKMNXPBDCRJTQEGHZ) -- key = "LFWOAYUISVKMNXPBDCRJTQEGHZ"
ciphers/transposition_cipher.py:28:12     - Unknown word (Dsahrij)      -- 'Hlia rDsahrij'
ciphers/transposition_cipher.py:28:6      - Unknown word (Hlia)         -- 'Hlia rDsahrij'
ciphers/transposition_cipher.py:46:9      - Unknown word (shaded)       -- num_shaded_boxes = (num_cols *
ciphers/transposition_cipher.py:5:53      - Unknown word (determined) -- shifted a certain number(determined by the key) that
ciphers/transposition_cipher.py:6:46      - Unknown word (permuted)   -- that results in the permuted text, known as the encrypted
ciphers/transposition_cipher.py:7:40      - Unknown word (demonstrated) -- transposition cipher demonstrated under is the ROUTE cipher
ciphers/transposition_cipher_encrypt_decrypt_file.py:9:21      - Unknown word (prehistoric) -- input_file = "./prehistoric_men.txt"
ciphers/trifid_cipher.py:115:16    - Unknown word (dictionares)       -- # Generate dictionares
ciphers/trifid_cipher.py:131:53    - Unknown word (punctuatuions)     -- the trifid_cipher. Any punctuatuions that
ciphers/trifid_cipher.py:139:75    - Unknown word (whilst)            -- you want in a group whilst
ciphers/trifid_cipher.py:143:6     - Unknown word (BCDGBQY)           -- 'BCDGBQY'
ciphers/trifid_cipher.py:148:29    - Unknown word (aide)              -- encrypt_message(' aide toi le c  iel      ta
ciphers/trifid_cipher.py:149:10    - Unknown word (FELIXMARDSTBCGHJKNOPQUVWYZ) -- ... 'FELIXMARDSTBCGHJKNOPQUVWYZ+',5)
ciphers/trifid_cipher.py:150:6     - Unknown word (FMJFVOISSUFTFPUFEQQC)       -- 'FMJFVOISSUFTFPUFEQQC'
ciphers/trifid_cipher.py:189:5     - Unknown word (Decrypting)                 -- Decrypting with your own alphabet
ciphers/trifid_cipher.py:192:6     - Unknown word (AIDETOILECIELTAIDERA)       -- 'AIDETOILECIELTAIDERA'
ciphers/trifid_cipher.py:212:28    - Unknown word (WALL)                       -- msg = "DEFEND THE EAST WALL OF THE CASTLE."
ciphers/trifid_cipher.py:213:39    - Unknown word (EPSDUCVWYM)                 -- encrypt_message(msg, "EPSDUCVWYM.ZLKXNBTFGORIJHAQ")
ciphers/trifid_cipher.py:213:50    - Unknown word (ZLKXNBTFGORIJHAQ)           -- message(msg, "EPSDUCVWYM.ZLKXNBTFGORIJHAQ")
ciphers/trifid_cipher.py:25:17     - Unknown word (triagram)     -- Arrange the triagram value of each letter
ciphers/trifid_cipher.py:25:5      - Unknown word (Arrange)      -- Arrange the triagram value of
ciphers/trifid_cipher.py:2:35      - Unknown word (fractionate) -- cipher uses a table to fractionate each plaintext letter
ciphers/trifid_cipher.py:2:5       - Unknown word (trifid)     -- The trifid cipher uses a table
ciphers/trifid_cipher.py:3:1       - Unknown word (mixes)       -- mixes the constituents of
ciphers/trifid_cipher.py:3:11      - Unknown word (constituents) -- mixes the constituents of the trigrams, and
ciphers/trifid_cipher.py:44:56     - Unknown word (respective)   -- input string into their respective trigram values, join
ciphers/trifid_cipher.py:66:42     - Unknown word (triagrams)    -- function that generates the triagrams and assigns each letter
ciphers/trifid_cipher.py:66:56     - Unknown word (assigns)      -- generates the triagrams and assigns each letter of the
ciphers/trifid_cipher.py:68:61     - Unknown word (confirming)   -- to_character`) after confirming if the
ciphers/trifid_cipher.py:72:22     - Unknown word (IAMABOY)      -- >>> expected = ('IAMABOY','ABCDEFGHIJKLMNOPQRSTUVWXYZ
ciphers/trifid_cipher.py:86:54     - Unknown word (Vwxyzzwwtyyujjgfd) -- abCdeFghijkLmnopqrStuVwxyzzwwtyyujjgfd')
ciphers/trifid_cipher.py:91:18     - Unknown word (punctuations)      -- Testing with punctuations that are not in the
ciphers/vernam_cipher.py:1:5       - Unknown word (vernam)     -- def vernam_encrypt(plaintext: str
ciphers/vernam_cipher.py:4:6       - Unknown word (RIJVS)      -- 'RIJVS'
ciphers/vigenere_cipher.py:22:63     - Unknown word (Dharmaj)    -- is Harshil Darji from Dharmaj.')
ciphers/vigenere_cipher.py:23:14     - Unknown word (Odrjqqs)    -- 'Akij ra Odrjqqs Gaisq muod Mphumrs.
ciphers/vigenere_cipher.py:23:22     - Unknown word (Gaisq)      -- 'Akij ra Odrjqqs Gaisq muod Mphumrs.'
ciphers/vigenere_cipher.py:23:28     - Unknown word (muod)       -- Akij ra Odrjqqs Gaisq muod Mphumrs.'
ciphers/vigenere_cipher.py:23:33     - Unknown word (Mphumrs)    -- ra Odrjqqs Gaisq muod Mphumrs.'
ciphers/vigenere_cipher.py:23:6      - Unknown word (Akij)       -- 'Akij ra Odrjqqs Gaisq muod
ciphers/xor_cipher.py:116:16    - Unknown word (vdmu)        -- 'i`mmn!vdmu'
ciphers/xor_cipher.py:202:66    - Unknown word (fout)        -- encrypt.out", "w+") as fout:
ciphers/xor_cipher.py:263:24    - Unknown word (unsuccessful) -- print("encrypt unsuccessful")
ciphers/xor_cipher.py:2:19      - Unknown word (Bender)     -- author: Christian Bender
ciphers/xor_cipher.py:45:34     - Unknown word (hallo)      -- XORCipher().encrypt("hallo welt", 1)
ciphers/xor_cipher.py:45:40     - Unknown word (welt)       -- XORCipher().encrypt("hallo welt", 1)
ciphers/xor_cipher.py:49:34     - Unknown word (HALLO)      -- XORCipher().encrypt("HALLO WELT", 32)
ciphers/xor_cipher.py:49:40     - Unknown word (WELT)       -- XORCipher().encrypt("HALLO WELT", 32)
ciphers/xor_cipher.py:63:31     - Unknown word (appropriate) -- make sure key is an appropriate size
ciphers/xor_cipher.py:7:6       - Unknown word (useful)     -- some useful methods for encrypting
compression/README.md:3:67      - Unknown word (taking)     -- to store data without taking too much space.
compression/README.md:4:24      - Unknown word (loses)      -- Either the compression loses some data (then we talk
compression/README.md:4:30      - Unknown word (some)       -- the compression loses some data (then we talk about
compression/README.md:4:49      - Unknown word (talk)       -- loses some data (then we talk about lossy compression
compression/README.md:4:60      - Unknown word (lossy)      -- (then we talk about lossy compression, such as
compression/README.md:4:99      - Unknown word (does)       -- such as .jpg) or it does not (and then it is
compression/README.md:6:1       - Unknown word (Lossless)   -- Lossless compression is mainly
compression/README.md:6:125     - Unknown word (archived)   -- information about the file archived. On the other hand,
compression/README.md:6:148     - Unknown word (hand)       -- archived. On the other hand, lossy compression is
compression/README.md:6:201     - Unknown word (where)      -- for transfer of file where quality isn't necessarily
compression/README.md:6:207     - Unknown word (quality)    -- transfer of file where quality isn't necessarily what
compression/README.md:6:221     - Unknown word (necessarily) -- where quality isn't necessarily what is required (i
compression/README.md:6:25      - Unknown word (mainly)     -- Lossless compression is mainly used for archive purpose
compression/README.md:6:49      - Unknown word (purpose)    -- mainly used for archive purpose as it allows storing
compression/README.md:6:70      - Unknown word (storing)    -- purpose as it allows storing data without losing
compression/README.md:6:91      - Unknown word (losing)     -- storing data without losing information about the
compression/burrows_wheeler.py:10:56     - Unknown word (improving)   -- thus a "free" method of improving the efficiency
compression/burrows_wheeler.py:10:70     - Unknown word (efficiency)  -- method of improving the efficiency
compression/burrows_wheeler.py:11:57     - Unknown word (computation) -- costing only some extra computation.
compression/burrows_wheeler.py:123:70    - Unknown word (passive)        -- type must be int or passive
compression/burrows_wheeler.py:175:11    - Unknown word (Reversing)      -- f"Reversing Burrows Wheeler transform
compression/burrows_wheeler.py:24:9      - Unknown word (rotations)   -- def all_rotations(s: str) -> list[str
compression/burrows_wheeler.py:26:39     - Unknown word (rotated)     -- string that will be rotated len(s) times.
compression/burrows_wheeler.py:31:25     - Unknown word (BANANA)      -- >>> all_rotations("^BANANA|") # doctest: +NORMALIZE
compression/burrows_wheeler.py:32:31     - Unknown word (ANANA)       -- BANANA|', 'BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA
compression/burrows_wheeler.py:32:43     - Unknown word (NANA)        -- BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA|^BAN', 'NA
compression/burrows_wheeler.py:32:71     - Unknown word (BANA)        -- BA', 'ANA|^BAN', 'NA|^BANA',
compression/burrows_wheeler.py:33:9      - Unknown word (BANAN)       -- 'A|^BANAN', '|^BANANA']
compression/burrows_wheeler.py:34:33     - Unknown word (casa)        -- rotations("a_asa_da_casa") # doctest: +NORMALIZE
compression/burrows_wheeler.py:35:32     - Unknown word (casaa)       -- asa_da_casa', '_asa_da_casaa', 'asa_da_casaa_',
compression/burrows_wheeler.py:37:40     - Unknown word (asaa)        -- , 'casaa_asa_da_', 'asaa_asa_da_c', 'saa_asa
compression/burrows_wheeler.py:39:24     - Unknown word (panamabanana) -- >>> all_rotations("panamabanana") # doctest: +NORMALIZE
compression/burrows_wheeler.py:40:23     - Unknown word (anamabananap) -- ['panamabanana', 'anamabananap', 'namabananapa', 'amabananap
compression/burrows_wheeler.py:40:39     - Unknown word (namabananapa) -- namabanana', 'anamabananap', 'namabananapa', 'amabananapan',
compression/burrows_wheeler.py:40:55     - Unknown word (amabananapan) -- amabananap', 'namabananapa', 'amabananapan',
compression/burrows_wheeler.py:41:22     - Unknown word (abananapanam) -- 'mabananapana', 'abananapanam', 'bananapanama', 'ananapanam
compression/burrows_wheeler.py:41:38     - Unknown word (bananapanama) -- bananapana', 'abananapanam', 'bananapanama', 'ananapanamab',
compression/burrows_wheeler.py:41:54     - Unknown word (ananapanamab) -- ananapanam', 'bananapanama', 'ananapanamab',
compression/burrows_wheeler.py:41:6      - Unknown word (mabananapana) -- 'mabananapana', 'abananapanam', 'bananapana
compression/burrows_wheeler.py:42:22     - Unknown word (anapanamaban) -- 'nanapanamaba', 'anapanamaban', 'napanamabana', 'apanamaban
compression/burrows_wheeler.py:42:38     - Unknown word (napanamabana) -- napanamaba', 'anapanamaban', 'napanamabana', 'apanamabanan']
compression/burrows_wheeler.py:42:54     - Unknown word (apanamabanan) -- apanamaban', 'napanamabana', 'apanamabanan']
compression/burrows_wheeler.py:42:6      - Unknown word (nanapanamaba) -- 'nanapanamaba', 'anapanamaban', 'napanamaba
compression/burrows_wheeler.py:4:13      - Unknown word (Wheeler)    -- The Burrows-Wheeler transform (BWT, also
compression/burrows_wheeler.py:4:5       - Unknown word (Burrows)    -- The Burrows-Wheeler transform (BWT
compression/burrows_wheeler.py:57:25     - Unknown word (composed)     -- :return: the string composed of the last char of
compression/burrows_wheeler.py:66:21     - Unknown word (aaaadss)      -- {'bwt_string': 'aaaadss_c__aa', 'idx_original
compression/burrows_wheeler.py:68:21     - Unknown word (mnpbnnaaaaaa) -- {'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string
compression/burrows_wheeler.py:6:27      - Unknown word (tends)      -- compression, since it tends to be easy to compress
compression/burrows_wheeler.py:84:55     - Unknown word (alphabetically) -- list of rotations in alphabetically order
compression/burrows_wheeler.py:8:27      - Unknown word (importantly) -- length encoding. More importantly, the transformation
compression/burrows_wheeler.py:98:66     - Unknown word (executed)       -- string when bwt was executed
compression/burrows_wheeler.py:9:30      - Unknown word (additional)  -- needing to store any additional data except the position
compression/burrows_wheeler.py:9:9       - Unknown word (needing)     -- without needing to store any additional
compression/huffman.py:41:13     - Unknown word (Huffman)    -- for the Huffman Tree.
compression/huffman.py:56:5      - Unknown word (Recursively) -- Recursively traverse the Huffman
compression/huffman.py:69:5      - Unknown word (huffman)     -- def huffman(file_path: str) -> None
compression/lempel_ziv.py:115:24    - Unknown word (compresses) -- Reads source file, compresses it and writes the compressed
compression/lempel_ziv.py:46:5      - Unknown word (Compresses) -- Compresses given data_bits using
compression/lempel_ziv.py:76:46     - Unknown word (Elias)      -- length in front (using Elias gamma coding) of the
compression/lempel_ziv_decompress.py:102:24    - Unknown word (decompresses)  -- Reads source file, decompresses it and writes the result
compression/lempel_ziv_decompress.py:102:44    - Unknown word (writes)        -- decompresses it and writes the result in destination
compression/lempel_ziv_decompress.py:12:5      - Unknown word (Reads)         -- Reads given file as bytes
compression/lempel_ziv_decompress.py:23:25     - Unknown word (accessible)    -- print("File not accessible")
compression/lempel_ziv_decompress.py:29:5      - Unknown word (Decompresses)  -- Decompresses given data_bits using
compression/lempel_ziv_decompress.py:2:39      - Unknown word (Lempel)     -- several implementations of Lempel-Ziv-Welch decompression
compression/lempel_ziv_decompress.py:2:50      - Unknown word (Welch)      -- implementations of Lempel-Ziv-Welch decompression algorithm
compression/lempel_ziv_decompress.py:2:56      - Unknown word (decompression) -- of Lempel-Ziv-Welch decompression algorithm
compression/lempel_ziv_decompress.py:59:47     - Unknown word (consist)       -- string (should only consist of 0's and 1's) as bytes
compression/lempel_ziv_decompress.py:59:5      - Unknown word (Writes)        -- Writes given to_write string
compression/lempel_ziv_decompress.py:64:39     - Unknown word (opened)        -- file_path, "wb") as opened_file:
compression/lz77.py:116:37    - Unknown word (triplets)            -- tokens: list containing triplets (offset, length, char
compression/lz77.py:12:37     - Unknown word (triples)    -- dictionary that uses triples composed of:
compression/lz77.py:12:6      - Unknown word (manages)    -- LZ77 manages a dictionary that uses
compression/lz77.py:149:55    - Unknown word (abrarrarrad)         -- find_encoding_token("abrarrarrad", "abracad").offset
compression/lz77.py:149:70    - Unknown word (abracad)             -- token("abrarrarrad", "abracad").offset
compression/lz77.py:151:55    - Unknown word (adabrarrarrad)       -- find_encoding_token("adabrarrarrad", "cabrac").length
compression/lz77.py:151:72    - Unknown word (cabrac)              -- token("adabrarrarrad", "cabrac").length
compression/lz77.py:18:14     - Unknown word (parsed)     -- As a file is parsed, the dictionary is dynamicall
compression/lz77.py:18:40     - Unknown word (dynamically) -- parsed, the dictionary is dynamically updated to reflect the
compression/lz77.py:200:59    - Unknown word (rarrad)              -- match_length_from_index("rarrad", "adabrar", 0, 4)
compression/lz77.py:200:69    - Unknown word (adabrar)             -- from_index("rarrad", "adabrar", 0, 4)
compression/lz77.py:22:2      - Unknown word (cabracadabrarrarrad) -- "cabracadabrarrarrad" <-> [(0, 0, 'c'),
compression/lz77.py:24:2      - Unknown word (ababcbababaa)        -- "ababcbababaa" <-> [(0, 0, 'a'),
compression/lz77.py:25:2      - Unknown word (aacaacabcabaaac)     -- "aacaacabcabaaac" <-> [(0, 0, 'a'),
compression/lz77.py:34:15     - Unknown word (Lucia)               -- __author__ = "Lucia Harcekova"
compression/lz77.py:34:21     - Unknown word (Harcekova)           -- __author__ = "Lucia Harcekova"
compression/lz77.py:3:3       - Unknown word (lossless)   -- - lossless data compression published
compression/lz77.py:3:42      - Unknown word (papers)     -- compression published in papers by Abraham Lempel and
compression/lz77.py:3:52      - Unknown word (Abraham)    -- published in papers by Abraham Lempel and Jacob Ziv
compression/lz77.py:3:71      - Unknown word (Jacob)      -- by Abraham Lempel and Jacob Ziv in 1977
compression/lz77.py:40:28     - Unknown word (triplet)             -- Dataclass representing triplet called token consisting
compression/lz77.py:4:24      - Unknown word (sliding)    -- also known as LZ1 or sliding-window compression
compression/lz77.py:5:12      - Unknown word (basis)      -- - form the basis for many variations
compression/lz77.py:5:27      - Unknown word (variations) -- form the basis for many variations including LZW, LZSS
compression/lz77.py:5:53      - Unknown word (LZSS)       -- variations including LZW, LZSS, LZMA and others
compression/lz77.py:5:68      - Unknown word (others)     -- LZW, LZSS, LZMA and others
compression/lz77.py:97:31     - Unknown word (exceed)              -- # - check if size exceed the max search buffer
compression/lz77.py:97:73     - Unknown word (drop)                -- buffer size, if so, drop the
compression/lz77.py:98:17     - Unknown word (oldest)              -- # oldest elements
compression/lz77.py:9:10      - Unknown word (ahead)      -- - look ahead buffer
compression/peak_signal_to_noise_ratio.py:17:49     - Unknown word (contrast)   -- ratio(original: float, contrast: float) -> float:
compression/peak_signal_to_noise_ratio.py:28:20     - Unknown word (imread)     -- original = cv2.imread(os.path.join(dir_path
compression/peak_signal_to_noise_ratio.py:2:16      - Unknown word (noise)      -- Peak signal-to-noise ratio - PSNR
compression/peak_signal_to_noise_ratio.py:2:30      - Unknown word (PSNR)       -- signal-to-noise ratio - PSNR
compression/run_length_encoding.py:13:28     - Unknown word (AAADDDDDDFFFCCCAAVVVV) -- run_length_encode("AAADDDDDDFFFCCCAAVVVV")
compression/run_length_encoding.py:7:28      - Unknown word (AAAABBBCCDAA) -- run_length_encode("AAAABBBCCDAA")
computer_vision/README.md:1:12      - Unknown word (Vision)     -- # Computer Vision
computer_vision/README.md:3:124     - Unknown word (same)       -- process images in the same way that human does
computer_vision/README.md:3:138     - Unknown word (human)      -- in the same way that human does, and provide appropriate
computer_vision/README.md:3:62      - Unknown word (enabling)   -- science that works on enabling computers to see, identify
computer_vision/README.md:3:89      - Unknown word (identify)   -- enabling computers to see, identify and process images in
computer_vision/README.md:5:12      - Unknown word (imparting)  -- It is like imparting human intelligence and
computer_vision/README.md:5:28      - Unknown word (intelligence) -- like imparting human intelligence and instincts to a computer
computer_vision/README.md:5:45      - Unknown word (instincts)    -- human intelligence and instincts to a computer.
computer_vision/README.md:5:7       - Unknown word (like)       -- It is like imparting human intelligence
computer_vision/README.md:6:130     - Unknown word (transforming) -- some algorithms for transforming image from one form
computer_vision/README.md:6:181     - Unknown word (smoothing)    -- form to the other like smoothing, contrasting, stretching
computer_vision/README.md:6:192     - Unknown word (contrasting)  -- other like smoothing, contrasting, stretching, etc.
computer_vision/README.md:6:205     - Unknown word (stretching)   -- smoothing, contrasting, stretching, etc.
computer_vision/README.md:6:51      - Unknown word (different)    -- vision are a little different from each other. Image
computer_vision/README.md:8:1       - Unknown word (While)        -- While computer vision comes
computer_vision/README.md:8:119     - Unknown word (applies)      -- learning, computer vision applies machine learning to
computer_vision/README.md:8:170     - Unknown word (interpretation) -- recognize patterns for interpretation of images (much like
computer_vision/README.md:8:221     - Unknown word (visual)         -- like the process of visual reasoning of human vision
computer_vision/README.md:8:228     - Unknown word (reasoning)      -- the process of visual reasoning of human vision).
computer_vision/README.md:8:34      - Unknown word (modelling)    -- computer vision comes from modelling image processing using
computer_vision/README.md:8:93      - Unknown word (learning)     -- techniques of machine learning, computer vision applies
computer_vision/cnn_classification.py:100:23    - Unknown word (Abnormality)  -- prediction = "Abnormality detected"
computer_vision/cnn_classification.py:17:37     - Unknown word (extracted)  -- of the images will be extracted from the folder name
computer_vision/cnn_classification.py:26:3      - Unknown word (Importing)  -- # Importing the Keras libraries
computer_vision/cnn_classification.py:2:15      - Unknown word (Neural)     -- Convolutional Neural Network
computer_vision/cnn_classification.py:31:7      - Unknown word (Initialising) -- # Initialising the CNN
computer_vision/cnn_classification.py:35:16     - Unknown word (Convolution)  -- # Step 1 - Convolution
computer_vision/cnn_classification.py:36:34     - Unknown word (breadth)      -- ,64 is the length & breadth of dataset images and
computer_vision/cnn_classification.py:37:20     - Unknown word (kernel)       -- # (3,3) is the kernel size (filter matrix
computer_vision/cnn_classification.py:45:7      - Unknown word (Adding)       -- # Adding a second convolutional
computer_vision/cnn_classification.py:4:1       - Unknown word (Objective)  -- Objective : To train a CNN model
computer_vision/cnn_classification.py:4:16      - Unknown word (train)      -- Objective : To train a CNN model detect if
computer_vision/cnn_classification.py:4:61      - Unknown word (Lung)       -- if TB is present in Lung X-ray or not.
computer_vision/cnn_classification.py:53:27     - Unknown word (Dense)        -- classifier.add(layers.Dense(units=128, activation
computer_vision/cnn_classification.py:56:7      - Unknown word (Compiling)    -- # Compiling the CNN
computer_vision/cnn_classification.py:58:20     - Unknown word (adam)         -- optimizer="adam", loss="binary_crossentropy
computer_vision/cnn_classification.py:58:27     - Unknown word (loss)         -- optimizer="adam", loss="binary_crossentropy
computer_vision/cnn_classification.py:58:40     - Unknown word (crossentropy) -- adam", loss="binary_crossentropy", metrics=["accuracy
computer_vision/cnn_classification.py:58:65     - Unknown word (accuracy)     -- crossentropy", metrics=["accuracy"]
computer_vision/cnn_classification.py:58:9      - Unknown word (optimizer)    -- optimizer="adam", loss="binary
computer_vision/cnn_classification.py:61:16     - Unknown word (Fitting)      -- # Part 2 - Fitting the CNN to the images
computer_vision/cnn_classification.py:63:12     - Unknown word (Trained)      -- # Load Trained model weights
computer_vision/cnn_classification.py:66:7      - Unknown word (regressor)    -- # regressor=load_model('cnn.h5'
computer_vision/cnn_classification.py:69:28     - Unknown word (shear)        -- rescale=1.0 / 255, shear_range=0.2, zoom_range
computer_vision/cnn_classification.py:6:15      - Unknown word (Theory)     -- Resources CNN Theory :
computer_vision/cnn_classification.py:83:42     - Unknown word (epochs)       -- steps_per_epoch=5, epochs=30, validation_data
computer_vision/flip_augmentation.py:26:16     - Unknown word (annos)      -- img_paths, annos = get_dataset(LABEL
computer_vision/flip_augmentation.py:28:53     - Unknown word (anno)       -- paths = update_image_and_anno(img_paths, annos, FLIP
computer_vision/flip_augmentation.py:35:13     - Unknown word (imwrite)    -- cv2.imwrite(f"{file_root}.jpg",
computer_vision/flip_augmentation.py:35:53     - Unknown word (IMWRITE)    -- root}.jpg", image, [cv2.IMWRITE_JPEG_QUALITY, 85])
computer_vision/flip_augmentation.py:35:66     - Unknown word (QUALITY)    -- image, [cv2.IMWRITE_JPEG_QUALITY, 85])
computer_vision/flip_augmentation.py:86:32     - Unknown word (narray)     -- new_imgs_list <type: narray>: image after resize
computer_vision/flip_augmentation.py:9:42      - Unknown word (vision)     -- bounding box for computer vision task
computer_vision/haralick_descriptors.py:109:17    - Unknown word (Dilation)   -- Erosion and Dilation.
computer_vision/haralick_descriptors.py:109:5     - Unknown word (Erosion)    -- Erosion and Dilation.
computer_vision/haralick_descriptors.py:113:30    - Unknown word (erosion)    -- kind: Can be either 'erosion', in which case the
computer_vision/haralick_descriptors.py:114:39    - Unknown word (dilation)   -- function is called, or 'dilation', when :func:np.min
computer_vision/haralick_descriptors.py:116:31    - Unknown word (applying)   -- to be used when applying convolution to original
computer_vision/haralick_descriptors.py:116:40    - Unknown word (convolution) -- be used when applying convolution to original image
computer_vision/haralick_descriptors.py:11:43     - Unknown word (Squared)    -- implementation of Root Mean Squared Error
computer_vision/haralick_descriptors.py:144:11    - Unknown word (padded)      -- # Use padded image when applying
computer_vision/haralick_descriptors.py:154:50    - Unknown word (centered)    -- transformation method to the centered section of the image
computer_vision/haralick_descriptors.py:160:5     - Unknown word (opening)     -- def opening_filter(image: np.ndarray
computer_vision/haralick_descriptors.py:162:5     - Unknown word (Opening)     -- Opening filter, defined as the
computer_vision/haralick_descriptors.py:199:27    - Unknown word (thresholding) -- Apply binary mask, or thresholding based
computer_vision/haralick_descriptors.py:202:48    - Unknown word (complementary) -- true value mask and its complementary false value mask.
computer_vision/haralick_descriptors.py:209:13    - Unknown word (morphological) -- >>> morphological = opening_filter(binary
computer_vision/haralick_descriptors.py:222:43    - Unknown word (coordinate)    -- oncurrency(image: np.ndarray, coordinate: tuple[int, int]) -
computer_vision/haralick_descriptors.py:224:25    - Unknown word (occurrence)    -- Calculate sample co-occurrence matrix based on input
computer_vision/haralick_descriptors.py:256:5     - Unknown word (haralick)      -- def haralick_descriptors(matrix:
computer_vision/haralick_descriptors.py:257:25    - Unknown word (Haralick)      -- """Calculates all 8 Haralick descriptors based on
computer_vision/haralick_descriptors.py:259:46    - Unknown word (Homogeneity)   -- Inverse Difference, Homogeneity, Entropy,
computer_vision/haralick_descriptors.py:260:13    - Unknown word (Dissimilarity) -- Energy, Dissimilarity, Contrast and Correlation
computer_vision/haralick_descriptors.py:260:28    - Unknown word (Contrast)      -- Energy, Dissimilarity, Contrast and Correlation
computer_vision/haralick_descriptors.py:263:57    - Unknown word (calculating)   -- matrix to use as base for calculating descriptors.
computer_vision/haralick_descriptors.py:266:33    - Unknown word (resulting)     -- Reverse ordered list of resulting descriptors
computer_vision/haralick_descriptors.py:280:14    - Unknown word (ogrid)         -- # but np.ogrid works just fine
computer_vision/haralick_descriptors.py:280:31    - Unknown word (fine)          -- np.ogrid works just fine
computer_vision/haralick_descriptors.py:283:21    - Unknown word (frequent)      -- # Pre-calculate frequent multiplication and subtractio
computer_vision/haralick_descriptors.py:283:49    - Unknown word (subtraction)   -- frequent multiplication and subtraction
computer_vision/haralick_descriptors.py:287:44    - Unknown word (Probability)   -- numerical value of Maximum Probability
computer_vision/haralick_descriptors.py:288:13    - Unknown word (prob)          -- maximum_prob = np.max(matrix)
computer_vision/haralick_descriptors.py:289:48    - Unknown word (individually)  -- for each descriptor individually to calculate its matrix
computer_vision/haralick_descriptors.py:294:5     - Unknown word (dissimilarity) -- dissimilarity = matrix * np.abs(sub
computer_vision/haralick_descriptors.py:296:5     - Unknown word (homogeneity)   -- homogeneity = matrix / (1 + np.power
computer_vision/haralick_descriptors.py:299:34    - Unknown word (ranging)       -- values for descriptors ranging from the first one to
computer_vision/haralick_descriptors.py:29:5      - Unknown word (Normalizes) -- Normalizes image in Numpy 2D array
computer_vision/haralick_descriptors.py:314:5     - Unknown word (masks)         -- masks: tuple[np.ndarray, np
computer_vision/haralick_descriptors.py:318:29    - Unknown word (matrices)      -- different co-occurrence matrices, given input masks and
computer_vision/haralick_descriptors.py:333:24    - Unknown word (individual)    -- # Concatenate each individual descriptor into
computer_vision/haralick_descriptors.py:338:5     - Unknown word (euclidean)     -- def euclidean(point_1: np.ndarray
computer_vision/haralick_descriptors.py:352:9     - Unknown word (distances)     -- def get_distances(descriptors: np.ndarray
computer_vision/haralick_descriptors.py:354:19    - Unknown word (Euclidean)     -- Calculate all Euclidean distances between a
computer_vision/haralick_descriptors.py:357:5     - Unknown word (showing)       -- showing which descriptor is
computer_vision/haralick_descriptors.py:411:32    - Unknown word (correspondent) -- respective masks and correspondent Harralick Descriptors
computer_vision/haralick_descriptors.py:411:46    - Unknown word (Harralick)     -- masks and correspondent Harralick Descriptors.
computer_vision/haralick_descriptors.py:430:42    - Unknown word (morphology)    -- other images using the morphology method of choice.
computer_vision/haralick_descriptors.py:76:10     - Unknown word (luminance)  -- Uses luminance weights to transform
computer_vision/haralick_descriptors.py:88:5      - Unknown word (binarize)   -- def binarize(image: np.ndarray, threshold
computer_vision/haralick_descriptors.py:90:5      - Unknown word (Binarizes)  -- Binarizes a grayscale image based
computer_vision/harris_corner.py:13:19     - Unknown word (empirically) -- k : is an empirically determined constant
computer_vision/harris_corner.py:14:23     - Unknown word (neighbourhoods) -- window_size : neighbourhoods considered
computer_vision/harris_corner.py:14:38     - Unknown word (considered)     -- size : neighbourhoods considered
computer_vision/harris_corner.py:28:32     - Unknown word (corners)        -- Returns the image with corners identified
computer_vision/harris_corner.py:37:55     - Unknown word (GRAY)           -- color_img, cv2.COLOR_GRAY2RGB)
computer_vision/harris_corner.py:38:21     - Unknown word (gradient)       -- dy, dx = np.gradient(img)
computer_vision/horn_schunck.py:100:12    - Unknown word (laplacian)      -- kernel_laplacian = np.array(
computer_vision/horn_schunck.py:104:19    - Unknown word (refine)         -- # Iteratively refine the flow
computer_vision/horn_schunck.py:107:9     - Unknown word (derivative)     -- derivative_x = convolve(warped
computer_vision/horn_schunck.py:114:36    - Unknown word (proposed)       -- updates the flow as proposed in the paper (Step
computer_vision/horn_schunck.py:15:12     - Unknown word (ndimage)    -- from scipy.ndimage import convolve
computer_vision/horn_schunck.py:15:27     - Unknown word (convolve)   -- scipy.ndimage import convolve
computer_vision/horn_schunck.py:22:5      - Unknown word (Warps)      -- Warps the pixels of an image
computer_vision/horn_schunck.py:24:21     - Unknown word (warped)     -- Pixels that are warped from an invalid location
computer_vision/horn_schunck.py:24:5      - Unknown word (Pixels)     -- Pixels that are warped from
computer_vision/horn_schunck.py:2:10      - Unknown word (Schunck)    -- The Horn-Schunck method estimates the
computer_vision/horn_schunck.py:2:25      - Unknown word (estimates)  -- Horn-Schunck method estimates the optical flow for
computer_vision/horn_schunck.py:2:39      - Unknown word (optical)    -- method estimates the optical flow for every single
computer_vision/horn_schunck.py:2:5       - Unknown word (Horn)       -- The Horn-Schunck method estimates
computer_vision/horn_schunck.py:31:14     - Unknown word (Warped)     -- Returns: Warped image
computer_vision/horn_schunck.py:45:12     - Unknown word (meshgrid)   -- np.meshgrid(np.arange(0, image.shape
computer_vision/horn_schunck.py:4:13      - Unknown word (assuming)   -- It works by assuming brightness constancy
computer_vision/horn_schunck.py:4:22      - Unknown word (brightness) -- It works by assuming brightness constancy between two
computer_vision/horn_schunck.py:4:33      - Unknown word (constancy)  -- assuming brightness constancy between two consecutive
computer_vision/horn_schunck.py:5:5       - Unknown word (smoothness) -- and smoothness in the optical flow
computer_vision/horn_schunck.py:61:10     - Unknown word (schunck)    -- def horn_schunck(
computer_vision/horn_schunck.py:61:5      - Unknown word (horn)       -- def horn_schunck(
computer_vision/horn_schunck.py:68:19     - Unknown word (performs)   -- This function performs the Horn-Schunck algorithm
computer_vision/horn_schunck.py:68:71     - Unknown word (estimated)  -- algorithm and returns the estimated
computer_vision/horn_schunck.py:69:25     - Unknown word (assumed)    -- optical flow. It is assumed that the input images
computer_vision/horn_schunck.py:75:16     - Unknown word (Regularization) -- alpha: Regularization constant
computer_vision/horn_schunck.py:76:29     - Unknown word (iterations)     -- num_iter: Number of iterations performed
computer_vision/horn_schunck.py:7:1       - Unknown word (Useful)     -- Useful resources:
computer_vision/horn_schunck.py:96:15     - Unknown word (kernels)        -- # Prepare kernels for the calculation
computer_vision/horn_schunck.py:96:50     - Unknown word (derivatives)    -- the calculation of the derivatives and the average velocity
computer_vision/horn_schunck.py:96:78     - Unknown word (velocity)       -- derivatives and the average velocity
computer_vision/intensity_based_segmentation.py:11:42     - Unknown word (intensity)  -- segmentation based on intensity thresholds.
computer_vision/intensity_based_segmentation.py:15:21     - Unknown word (Intensity)  -- thresholds: Intensity thresholds to define
computer_vision/intensity_based_segmentation.py:18:46     - Unknown word (corresponds) -- array where each region corresponds to a threshold range
computer_vision/intensity_based_segmentation.py:3:13      - Unknown word (necessary)  -- # Importing necessary libraries
computer_vision/intensity_based_segmentation.py:50:16     - Unknown word (figsize)     -- plt.figure(figsize=(10, 5))
computer_vision/intensity_based_segmentation.py:50:9      - Unknown word (figure)      -- plt.figure(figsize=(10, 5))
computer_vision/intensity_based_segmentation.py:58:16     - Unknown word (Segmented)   -- plt.title("Segmented Image")
computer_vision/intensity_based_segmentation.py:9:38      - Unknown word (thresholds) -- image(image: np.ndarray, thresholds: list[int]) -> np.ndarray
computer_vision/mosaic_augmentation.py:110:5     - Unknown word (divid)      -- divid_point_x = int(scale
computer_vision/mosaic_augmentation.py:14:8      - Unknown word (TINY)       -- FILTER_TINY_SCALE = 1 / 100
computer_vision/mosaic_augmentation.py:29:9      - Unknown word (idxs)       -- idxs = random.sample(range
computer_vision/mosaic_augmentation.py:44:17     - Unknown word (Succeeded)  -- print(f"Succeeded {index + 1}/{NUMBER
computer_vision/pooling_functions.py:127:59    - Unknown word (displaying)     -- array and maxpooling, displaying the result
computer_vision/pooling_functions.py:132:47    - Unknown word (averagepooling) -- image to numpy array and averagepooling, displaying the result
computer_vision/pooling_functions.py:16:24     - Unknown word (maxpooled)  -- numpy array of maxpooled matrix
computer_vision/pooling_functions.py:63:3      - Unknown word (Averagepooling) -- # Averagepooling Function
computer_vision/pooling_functions.py:64:5      - Unknown word (avgpooling)     -- def avgpooling(arr: np.ndarray, size
computer_vision/pooling_functions.py:72:24     - Unknown word (avgpooled)      -- numpy array of avgpooled matrix
computer_vision/pooling_functions.py:7:3       - Unknown word (Maxpooling) -- # Maxpooling Function
computer_vision/pooling_functions.py:8:44      - Unknown word (stride)     -- ndarray, size: int, stride: int) -> np.ndarray
computer_vision/pooling_functions.py:8:5       - Unknown word (maxpooling) -- def maxpooling(arr: np.ndarray, size
computer_vision/pooling_functions.py:90:5      - Unknown word (avgpool)        -- avgpool_shape = (arr.shape[
conversions/README.md:3:129     - Unknown word (binary)     -- base or unit, e.g. binary to decimal, integer
conversions/README.md:3:139     - Unknown word (decimal)    -- unit, e.g. binary to decimal, integer to string or
conversions/README.md:3:177     - Unknown word (meters)     -- to string or foot to meters.
conversions/astronomical_length_scale_conversion.py:23:6      - Unknown word (kilometer)  -- "kilometer": "km",
conversions/astronomical_length_scale_conversion.py:24:6      - Unknown word (megametre)  -- "megametre": "Mm",
conversions/astronomical_length_scale_conversion.py:25:6      - Unknown word (gigametre)  -- "gigametre": "Gm",
conversions/astronomical_length_scale_conversion.py:26:6      - Unknown word (terametre)  -- "terametre": "Tm",
conversions/astronomical_length_scale_conversion.py:27:6      - Unknown word (petametre)  -- "petametre": "Pm",
conversions/astronomical_length_scale_conversion.py:28:6      - Unknown word (exametre)   -- "exametre": "Em",
conversions/astronomical_length_scale_conversion.py:29:6      - Unknown word (zettametre) -- "zettametre": "Zm",
conversions/astronomical_length_scale_conversion.py:30:6      - Unknown word (yottametre) -- "yottametre": "Ym",
conversions/astronomical_length_scale_conversion.py:48:24     - Unknown word (astronomical) -- Conversion between astronomical length units.
conversions/astronomical_length_scale_conversion.py:4:1       - Unknown word (Metre)      -- Metre, Kilometre, Megametre
conversions/astronomical_length_scale_conversion.py:4:19      - Unknown word (Megametre)  -- Metre, Kilometre, Megametre, Gigametre,
conversions/astronomical_length_scale_conversion.py:4:30      - Unknown word (Gigametre)  -- Kilometre, Megametre, Gigametre,
conversions/astronomical_length_scale_conversion.py:4:8       - Unknown word (Kilometre)  -- Metre, Kilometre, Megametre, Gigametre
conversions/astronomical_length_scale_conversion.py:5:1       - Unknown word (Terametre)  -- Terametre, Petametre, Exametre
conversions/astronomical_length_scale_conversion.py:5:12      - Unknown word (Petametre)  -- Terametre, Petametre, Exametre, Zettametre
conversions/astronomical_length_scale_conversion.py:5:23      - Unknown word (Exametre)   -- Terametre, Petametre, Exametre, Zettametre, Yottametre
conversions/astronomical_length_scale_conversion.py:5:33      - Unknown word (Zettametre) -- Petametre, Exametre, Zettametre, Yottametre
conversions/astronomical_length_scale_conversion.py:5:45      - Unknown word (Yottametre) -- Exametre, Zettametre, Yottametre
conversions/astronomical_length_scale_conversion.py:66:44     - Unknown word (inch)         -- conversion(4, "wrongUnit", "inch")
conversions/astronomical_length_scale_conversion.py:70:16     - Unknown word (abbreviations) -- Conversion abbreviations are: m, km, Mm, Gm,
conversions/astronomical_length_scale_conversion.py:73:10     - Unknown word (sanitized)     -- from_sanitized = from_type.lower()
conversions/binary_to_hexadecimal.py:40:7      - Unknown word (Sanitising) -- # Sanitising parameter
conversions/binary_to_octal.py:2:58      - Unknown word (octal)      -- binary string to the octal equivalent.
conversions/convert_number_to_words.py:10:14     - Unknown word (million)     -- (6, "million"),
conversions/convert_number_to_words.py:125:5     - Unknown word (tens)          -- tens, ones = divmod(num,
conversions/convert_number_to_words.py:12:14     - Unknown word (hundred)     -- (2, "hundred"),
conversions/convert_number_to_words.py:17:14     - Unknown word (milliard)    -- (9, "milliard"),
conversions/convert_number_to_words.py:24:15     - Unknown word (crore)       -- (14, "crore crore"),
conversions/convert_number_to_words.py:25:15     - Unknown word (lakh)        -- (12, "lakh crore"),
conversions/convert_number_to_words.py:35:9      - Unknown word (Gets)        -- Gets the max value supported
conversions/convert_number_to_words.py:52:43     - Unknown word (numbering)   -- ValueError("Invalid numbering system")
conversions/convert_number_to_words.py:57:5      - Unknown word (ONES)        -- ONES = {  # noqa: RUF012
conversions/convert_number_to_words.py:5:7       - Unknown word (Numbering)  -- class NumberingSystem(Enum):
conversions/convert_number_to_words.py:63:13     - Unknown word (five)        -- 5: "five",
conversions/convert_number_to_words.py:66:13     - Unknown word (eight)       -- 8: "eight",
conversions/convert_number_to_words.py:70:5      - Unknown word (TEENS)       -- TEENS = {  # noqa: RUF012
conversions/convert_number_to_words.py:72:13     - Unknown word (eleven)      -- 1: "eleven",
conversions/convert_number_to_words.py:73:13     - Unknown word (twelve)      -- 2: "twelve",
conversions/convert_number_to_words.py:74:13     - Unknown word (thirteen)    -- 3: "thirteen",
conversions/convert_number_to_words.py:75:13     - Unknown word (fourteen)    -- 4: "fourteen",
conversions/convert_number_to_words.py:76:13     - Unknown word (fifteen)     -- 5: "fifteen",
conversions/convert_number_to_words.py:77:13     - Unknown word (sixteen)     -- 6: "sixteen",
conversions/convert_number_to_words.py:78:13     - Unknown word (seventeen)   -- 7: "seventeen",
conversions/convert_number_to_words.py:79:13     - Unknown word (eighteen)    -- 8: "eighteen",
conversions/convert_number_to_words.py:7:15      - Unknown word (quadrillion) -- (15, "quadrillion"),
conversions/convert_number_to_words.py:80:13     - Unknown word (nineteen)    -- 9: "nineteen",
conversions/convert_number_to_words.py:83:5      - Unknown word (TENS)        -- TENS = {  # noqa: RUF012
conversions/convert_number_to_words.py:84:13     - Unknown word (twenty)      -- 2: "twenty",
conversions/convert_number_to_words.py:85:13     - Unknown word (thirty)      -- 3: "thirty",
conversions/convert_number_to_words.py:86:13     - Unknown word (forty)       -- 4: "forty",
conversions/convert_number_to_words.py:87:13     - Unknown word (fifty)       -- 5: "fifty",
conversions/convert_number_to_words.py:88:13     - Unknown word (sixty)       -- 6: "sixty",
conversions/convert_number_to_words.py:89:13     - Unknown word (seventy)     -- 7: "seventy",
conversions/convert_number_to_words.py:8:15      - Unknown word (trillion)    -- (12, "trillion"),
conversions/convert_number_to_words.py:90:13     - Unknown word (eighty)      -- 8: "eighty",
conversions/convert_number_to_words.py:91:13     - Unknown word (ninety)      -- 9: "ninety",
conversions/convert_number_to_words.py:97:48     - Unknown word (irregular)   -- negative integers with irregular constructions in English
conversions/convert_number_to_words.py:97:5      - Unknown word (Converts)    -- Converts small, non-negative
conversions/convert_number_to_words.py:97:58     - Unknown word (constructions) -- integers with irregular constructions in English (i.e.,
conversions/convert_number_to_words.py:9:14      - Unknown word (billion)     -- (9, "billion"),
conversions/decimal_to_any.py:1:51      - Unknown word (Representation) -- Number to Any Other Representation"""
conversions/decimal_to_hexadecimal.py:1:40      - Unknown word (Hexadecimal) -- (Decimal) Values to Hexadecimal Representations"""
conversions/decimal_to_hexadecimal.py:1:52      - Unknown word (Representations) -- Values to Hexadecimal Representations"""
conversions/decimal_to_octal.py:1:35      - Unknown word (Octal)      -- Decimal Number to an Octal Number."""
conversions/decimal_to_octal.py:22:38     - Unknown word (basically)  -- math.floor(num / 8)  # basically /= 8 without remainder
conversions/decimal_to_octal.py:23:16     - Unknown word (formatting) -- # This formatting removes trailing '.
conversions/decimal_to_octal.py:28:20     - Unknown word (equivalents) -- """Print octal equivalents of decimal numbers.
conversions/energy_conversions.py:4:18      - Unknown word (joule)      -- Available units: joule, kilojoule, megajoule
conversions/energy_conversions.py:4:25      - Unknown word (kilojoule)  -- Available units: joule, kilojoule, megajoule, gigajoule
conversions/energy_conversions.py:4:36      - Unknown word (megajoule)  -- units: joule, kilojoule, megajoule, gigajoule,\
conversions/energy_conversions.py:4:47      - Unknown word (gigajoule)  -- kilojoule, megajoule, gigajoule,\
conversions/energy_conversions.py:5:19      - Unknown word (watthour)   -- wattsecond, watthour, kilowatthour, newtonmeter
conversions/energy_conversions.py:5:29      - Unknown word (kilowatthour) -- wattsecond, watthour, kilowatthour, newtonmeter, calorie
conversions/energy_conversions.py:5:43      - Unknown word (newtonmeter)  -- watthour, kilowatthour, newtonmeter, calorie_nutr,\
conversions/energy_conversions.py:5:56      - Unknown word (calorie)      -- kilowatthour, newtonmeter, calorie_nutr,\
conversions/energy_conversions.py:5:64      - Unknown word (nutr)         -- newtonmeter, calorie_nutr,\
conversions/energy_conversions.py:5:7       - Unknown word (wattsecond) -- wattsecond, watthour, kilowatthour
conversions/energy_conversions.py:6:11      - Unknown word (kilocalorie)  -- kilocalorie_nutr, electronvolt,
conversions/energy_conversions.py:6:29      - Unknown word (electronvolt) -- kilocalorie_nutr, electronvolt, britishthermalunit
conversions/energy_conversions.py:6:43      - Unknown word (britishthermalunit) -- nutr, electronvolt, britishthermalunit_it, footpound
conversions/energy_conversions.py:6:66      - Unknown word (footpound)          -- britishthermalunit_it, footpound
conversions/excel_title_to_column.py:4:34      - Unknown word (sheet)      -- column title in an Excel sheet, return
conversions/hex_to_bin.py:6:5       - Unknown word (Shifts)     -- Shifts the bits of the number
conversions/hex_to_bin.py:6:63      - Unknown word (voids)      -- right and fills 0 on voids left as a result.
conversions/hex_to_bin.py:7:26      - Unknown word (dividing)   -- Similar effect as of dividing the number with some
conversions/ipv4_conversion.py:25:30     - Unknown word (octet)      -- ValueError: Invalid IPv4 octet 256
conversions/ipv4_conversion.py:28:5      - Unknown word (octets)     -- octets = [int(octet) for octet
conversions/length_conversion.py:34:6      - Unknown word (millimeter) -- "millimeter": "mm",
conversions/length_conversion.py:35:6      - Unknown word (centimeter) -- "centimeter": "cm",
conversions/length_conversion.py:39:45     - Unknown word (stripped)   -- Trailing 's' has been stripped off
conversions/length_conversion.py:39:6      - Unknown word (inche)      -- "inche": "in",  # Trailing
conversions/length_conversion.py:3:35      - Unknown word (Feet)       -- Units:- Metre,Kilometre,Feet,Inch,Centimeter,Yard
conversions/length_conversion.py:3:40      - Unknown word (Inch)       -- Metre,Kilometre,Feet,Inch,Centimeter,Yard,Foot
conversions/length_conversion.py:3:45      - Unknown word (Centimeter) -- Kilometre,Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter
conversions/length_conversion.py:3:56      - Unknown word (Yard)       -- Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter
conversions/length_conversion.py:3:66      - Unknown word (Mile)       -- Centimeter,Yard,Foot,Mile,Millimeter
conversions/length_conversion.py:3:71      - Unknown word (Millimeter) -- Centimeter,Yard,Foot,Mile,Millimeter
conversions/length_conversion.py:40:6      - Unknown word (feet)       -- "feet": "ft",
conversions/length_conversion.py:42:6      - Unknown word (yard)       -- "yard": "yd",
conversions/length_conversion.py:43:6      - Unknown word (mile)       -- "mile": "mi",
conversions/length_conversion.py:62:40     - Unknown word (FEET)       -- conversion(4, "METER", "FEET")
conversions/length_conversion.py:94:31     - Unknown word (miles)      -- length_conversion(2, "miles", "InChEs")
conversions/molecular_chemistry.py:10:27     - Unknown word (nfactor)     -- molarity_to_normality(nfactor: int, moles: float,
conversions/molecular_chemistry.py:29:17     - Unknown word (laws)        -- Ideal gas laws are used.
conversions/molecular_chemistry.py:29:7      - Unknown word (Ideal)       -- Ideal gas laws are used.
conversions/molecular_chemistry.py:2:28      - Unknown word (molecular)  -- Functions useful for doing molecular chemistry:
conversions/molecular_chemistry.py:2:38      - Unknown word (chemistry)  -- for doing molecular chemistry:
conversions/molecular_chemistry.py:30:31     - Unknown word (kelvin)      -- Temperature is taken in kelvin.
conversions/molecular_chemistry.py:30:7      - Unknown word (Temperature) -- Temperature is taken in kelvin.
conversions/molecular_chemistry.py:32:7      - Unknown word (Pressure)    -- Pressure has atm as SI unit.
conversions/molecular_chemistry.py:3:15      - Unknown word (normality)  -- * molarity_to_normality
conversions/molecular_chemistry.py:3:3       - Unknown word (molarity)   -- * molarity_to_normality
conversions/molecular_chemistry.py:4:12      - Unknown word (pressure)   -- * moles_to_pressure
conversions/molecular_chemistry.py:4:3       - Unknown word (moles)      -- * moles_to_pressure
conversions/molecular_chemistry.py:6:26      - Unknown word (temperature) -- pressure_and_volume_to_temperature
conversions/octal_to_binary.py:2:11      - Unknown word (Bama)       -- * Author: Bama Charan Chhandogi (https
conversions/octal_to_binary.py:2:16      - Unknown word (Charan)     -- * Author: Bama Charan Chhandogi (https://github
conversions/octal_to_binary.py:2:23      - Unknown word (Chhandogi)  -- Author: Bama Charan Chhandogi (https://github.com
conversions/octal_to_hexadecimal.py:40:5      - Unknown word (revhex)     -- revhex = ""
conversions/prefix_conversions_string.py:22:5      - Unknown word (yotta)      -- yotta = 80
conversions/prefix_conversions_string.py:23:5      - Unknown word (zetta)      -- zetta = 70
conversions/prefix_conversions_string.py:25:5      - Unknown word (peta)       -- peta = 50
conversions/prefix_conversions_string.py:27:5      - Unknown word (giga)       -- giga = 30
conversions/prefix_conversions_string.py:28:5      - Unknown word (mega)       -- mega = 20
conversions/prefix_conversions_string.py:29:5      - Unknown word (kilo)       -- kilo = 10
conversions/prefix_conversions_string.py:2:11      - Unknown word (Manuel)     -- * Author: Manuel Di Lullo (https://github
conversions/prefix_conversions_string.py:2:21      - Unknown word (Lullo)      -- * Author: Manuel Di Lullo (https://github.com
conversions/prefix_conversions_string.py:42:5      - Unknown word (hecto)      -- hecto = 2
conversions/prefix_conversions_string.py:43:5      - Unknown word (deca)       -- deca = 1
conversions/prefix_conversions_string.py:44:5      - Unknown word (deci)       -- deci = -1
conversions/prefix_conversions_string.py:45:5      - Unknown word (centi)      -- centi = -2
conversions/prefix_conversions_string.py:46:5      - Unknown word (milli)      -- milli = -3
conversions/prefix_conversions_string.py:49:5      - Unknown word (pico)       -- pico = -12
conversions/prefix_conversions_string.py:50:5      - Unknown word (femto)      -- femto = -15
conversions/prefix_conversions_string.py:51:5      - Unknown word (atto)       -- atto = -18
conversions/prefix_conversions_string.py:52:5      - Unknown word (zepto)      -- zepto = -21
conversions/prefix_conversions_string.py:53:5      - Unknown word (yocto)      -- yocto = -24
conversions/prefix_conversions_string.py:5:1       - Unknown word (Inspired)   -- Inspired by prefix_conversion
conversions/prefix_conversions_string.py:5:61      - Unknown word (lance)      -- in this repository by lance-pyles
conversions/prefix_conversions_string.py:5:67      - Unknown word (pyles)      -- repository by lance-pyles
conversions/pressure_conversions.py:30:1      - Unknown word (PRESSURE)   -- PRESSURE_CONVERSION = {
conversions/pressure_conversions.py:34:6      - Unknown word (kilopascal) -- "kilopascal": FromTo(0.00986923
conversions/pressure_conversions.py:35:6      - Unknown word (megapascal) -- "megapascal": FromTo(9.86923, 0
conversions/pressure_conversions.py:3:30      - Unknown word (Kilopascal) -- Available Units:- Pascal,Bar,Kilopascal,Megapascal,psi(pound
conversions/pressure_conversions.py:3:41      - Unknown word (Megapascal) -- Pascal,Bar,Kilopascal,Megapascal,psi(pound per square
conversions/pressure_conversions.py:3:56      - Unknown word (pound)      -- Kilopascal,Megapascal,psi(pound per square inch),
conversions/pressure_conversions.py:4:25      - Unknown word (torr)       -- inHg(in mercury column),torr,atm
conversions/pressure_conversions.py:4:9       - Unknown word (mercury)    -- inHg(in mercury column),torr,atm
conversions/rectangular_to_polar.py:4:20      - Unknown word (polar)       -- def rectangular_to_polar(real: float, img: float
conversions/rectangular_to_polar.py:4:5       - Unknown word (rectangular) -- def rectangular_to_polar(real: float
conversions/rgb_cmyk_conversion.py:35:37     - Unknown word (blue)        -- cmyk(0, 0, 255)    # blue
conversions/rgb_cmyk_conversion.py:3:44      - Unknown word (percentages) -- conversion. Returns percentages of CMYK paint.
conversions/rgb_cmyk_conversion.py:6:65      - Unknown word (linearly)    -- that converts colors linearly and gives
conversions/rgb_cmyk_conversion.py:7:10      - Unknown word (approximate) -- only approximate results. Actual preparation
conversions/rgb_hsv_conversion.py:10:14     - Unknown word (adapted)    -- (description adapted from https://en.wikipedia
conversions/rgb_hsv_conversion.py:144:5     - Unknown word (Utility)       -- Utility-function to check that
conversions/rgb_hsv_conversion.py:2:27      - Unknown word (additive)   -- RGB color model is an additive color model in which
conversions/rgb_hsv_conversion.py:3:51      - Unknown word (broad)      -- ways to reproduce a broad array of colors. The
conversions/rgb_hsv_conversion.py:4:29      - Unknown word (initials)   -- model comes from the initials of the three additive
conversions/rgb_hsv_conversion.py:51:5      - Unknown word (chroma)     -- chroma = value * saturation
conversions/rgb_hsv_conversion.py:6:67      - Unknown word (saturation) -- three components: hue, saturation and
conversions/rgb_hsv_conversion.py:88:15     - Unknown word (approximately) -- Function "approximately_equal_hsv" is needed
conversions/rgb_hsv_conversion.py:88:67     - Unknown word (deviations)    -- needed because of small deviations due to
conversions/rgb_hsv_conversion.py:89:5      - Unknown word (rounding)      -- rounding for the RGB-values.
conversions/roman_numerals.py:20:5      - Unknown word (Leet)       -- LeetCode No. 13 Roman to
conversions/roman_numerals.py:21:19     - Unknown word (numeral)    -- Given a roman numeral, convert it to an integer
conversions/roman_numerals.py:24:29     - Unknown word (CLIV)       -- tests = {"III": 3, "CLIV": 154, "MIX": 1009,
conversions/roman_numerals.py:24:68     - Unknown word (MMMCMXCIX)  -- 1009, "MMD": 2500, "MMMCMXCIX": 3999}
conversions/roman_numerals.py:50:9      - Unknown word (arabic)     -- for arabic, roman in ROMAN:
conversions/speed_conversions.py:14:6      - Unknown word (knot)       -- "knot": 1.852,
conversions/temperature_conversions.py:306:5     - Unknown word (reaumur)    -- def reaumur_to_kelvin(reaumur: float
conversions/temperature_conversions.py:34:43     - Unknown word (Kelvin)     -- value from Celsius to Kelvin and round it to 2 decimal
conversions/temperature_conversions.py:4:16      - Unknown word (fahrenheit) -- def celsius_to_fahrenheit(celsius: float, ndigits
conversions/temperature_conversions.py:4:43      - Unknown word (ndigits)    -- fahrenheit(celsius: float, ndigits: int = 2) -> float:
conversions/temperature_conversions.py:4:5       - Unknown word (celsius)    -- def celsius_to_fahrenheit(celsius
conversions/temperature_conversions.py:56:16     - Unknown word (rankine)    -- def celsius_to_rankine(celsius: float, ndigits
conversions/temperature_conversions.py:58:43     - Unknown word (Rankine)    -- value from Celsius to Rankine and round it to 2 decimal
conversions/temperature_conversions.py:6:32      - Unknown word (Celsius)    -- Convert a given value from Celsius to Fahrenheit and round
conversions/temperature_conversions.py:6:43      - Unknown word (Fahrenheit) -- value from Celsius to Fahrenheit and round it to 2 decimal
conversions/time_conversions.py:13:6      - Unknown word (hours)        -- "hours": 3600.0,  # 1 hour
conversions/time_conversions.py:15:6      - Unknown word (weeks)        -- "weeks": 604800.0,  # 1 week
conversions/time_conversions.py:16:29     - Unknown word (Approximate)  -- months": 2629800.0,  # Approximate value for a month in
conversions/time_conversions.py:2:75      - Unknown word (measuring)  -- as a standard way of measuring or
conversions/time_conversions.py:31:40     - Unknown word (Hours)        -- time(3500, "Seconds", "Hours")
conversions/time_conversions.py:37:26     - Unknown word (WEEKS)        -- >> convert_time(2, "WEEKS", "days")
conversions/time_conversions.py:39:37     - Unknown word (MINUTES)      -- time(0.5, "hours", "MINUTES")
conversions/time_conversions.py:53:26     - Unknown word (cool)         -- >> convert_time(1, "cool", "century")  # doctest
conversions/time_conversions.py:5:1       - Unknown word (oscillations) -- oscillations of the caesium atom
conversions/time_conversions.py:5:21      - Unknown word (caesium)      -- oscillations of the caesium atom.
conversions/volume_conversions.py:30:6      - Unknown word (cubic)      -- "cubic meter": FromTo(1, 1
conversions/volume_conversions.py:31:6      - Unknown word (litre)      -- "litre": FromTo(0.001, 100
conversions/volume_conversions.py:32:6      - Unknown word (kilolitre)  -- "kilolitre": FromTo(1, 1),
conversions/volume_conversions.py:33:6      - Unknown word (gallon)     -- "gallon": FromTo(0.00454, 2
conversions/volume_conversions.py:3:19      - Unknown word (Cubic)      -- Available Units:- Cubic metre,Litre,KiloLitre
conversions/volume_conversions.py:3:25      - Unknown word (metre)      -- Available Units:- Cubic metre,Litre,KiloLitre,Gallon
conversions/volume_conversions.py:3:31      - Unknown word (Litre)      -- Units:- Cubic metre,Litre,KiloLitre,Gallon,Cubic
conversions/volume_conversions.py:3:37      - Unknown word (Kilo)       -- - Cubic metre,Litre,KiloLitre,Gallon,Cubic yard
conversions/volume_conversions.py:3:47      - Unknown word (Gallon)     -- metre,Litre,KiloLitre,Gallon,Cubic yard,Cubic foot
conversions/weight_conversion.py:2:15      - Unknown word (weight)     -- Conversion of weight units.
conversions/weight_conversion.py:33:1      - Unknown word (KILOGRAM)   -- KILOGRAM_CHART: dict[str, float
conversions/weight_conversion.py:33:10     - Unknown word (CHART)      -- KILOGRAM_CHART: dict[str, float] =
conversions/weight_conversion.py:34:6      - Unknown word (kilogram)   -- "kilogram": 1,
conversions/weight_conversion.py:35:6      - Unknown word (gram)       -- "gram": pow(10, 3),
conversions/weight_conversion.py:36:6      - Unknown word (milligram)  -- "milligram": pow(10, 6),
conversions/weight_conversion.py:42:6      - Unknown word (ounce)      -- "ounce": 35.273990723,
conversions/weight_conversion.py:43:6      - Unknown word (carrat)     -- "carrat": 5000,
conversions/weight_conversion.py:47:1      - Unknown word (WEIGHT)     -- WEIGHT_TYPE_CHART: dict[str
conversions/weight_conversion.py:4:15      - Unknown word (Anubhav)    -- __author__ = "Anubhav Solanki"
conversions/weight_conversion.py:4:23      - Unknown word (Solanki)    -- author__ = "Anubhav Solanki"
data_structures/arrays/equilibrium_index_in_array.py:12:62     - Unknown word (higher)      -- the sum of elements at higher indexes.
data_structures/arrays/equilibrium_index_in_array.py:2:10      - Unknown word (Equilibrium) -- Find the Equilibrium Index of an Array.
data_structures/arrays/equilibrium_index_in_array.py:6:22      - Unknown word (equilibrium) -- python -m doctest -v equilibrium_index_in_array.py
data_structures/arrays/find_triplets_with_0_sum.py:27:30     - Unknown word (hashing)    -- triplets_with_0_sum_hashing(arr: list[int]) -> list
data_structures/arrays/find_triplets_with_0_sum.py:48:5      - Unknown word (Auxiliary)  -- Auxiliary Space: O(N)
data_structures/arrays/index_2d_array_in_1d.py:17:5      - Unknown word (retrieves)  -- and retrieves the integer value at
data_structures/arrays/index_2d_array_in_1d.py:2:1       - Unknown word (Retrieves)  -- Retrieves the value of an 0-indexed
data_structures/arrays/kth_largest_element.py:17:29     - Unknown word (partitioned) -- arr: The list to be partitioned
data_structures/arrays/kth_largest_element.py:22:47     - Unknown word (partitioning) -- pivot element after partitioning
data_structures/arrays/kth_largest_element.py:29:34     - Unknown word (cherry)       -- partition(['apple', 'cherry', 'date', 'banana']
data_structures/arrays/kth_largest_element.py:29:52     - Unknown word (banana)       -- 'cherry', 'date', 'banana'], 0, 3)
data_structures/arrays/permutations.py:1:5       - Unknown word (permute)    -- def permute_recursive(nums: list
data_structures/arrays/prefix_sum.py:65:9      - Unknown word (sums)       -- sums = {0}
data_structures/arrays/product_sum.py:10:12     - Unknown word (depths)     -- respective depths.
data_structures/arrays/product_sum.py:25:17     - Unknown word (calculates) -- Recursively calculates the product sum of an
data_structures/arrays/product_sum.py:9:28      - Unknown word (obtained)   -- The product sum is obtained by adding all elements
data_structures/arrays/sparse_table.py:19:77     - Unknown word (precomputed) -- length and store the precomputed
data_structures/arrays/sparse_table.py:2:46      - Unknown word (answering)  -- structure that allows answering range queries on
data_structures/arrays/sparse_table.py:3:55      - Unknown word (throughout) -- elements do not change throughout all the queries.
data_structures/arrays/sparse_table.py:52:65     - Unknown word (halves)      -- and find minimum of 2 halves
data_structures/arrays/sparse_table.py:8:28      - Unknown word (nlogn)      -- Overall time complexity: O(nlogn)
data_structures/arrays/sudoku_solver.py:131:33    - Unknown word (earlier)       -- return False  ## Failed earlier
data_structures/arrays/sudoku_solver.py:133:27    - Unknown word (Solved)        -- return values  ## Solved!
data_structures/arrays/sudoku_solver.py:134:18    - Unknown word (unfilled)      -- ## Chose the unfilled square s with the fewest
data_structures/arrays/sudoku_solver.py:134:45    - Unknown word (fewest)        -- unfilled square s with the fewest possibilities
data_structures/arrays/sudoku_solver.py:134:8     - Unknown word (Chose)         -- ## Chose the unfilled square
data_structures/arrays/sudoku_solver.py:139:31    - Unknown word (showif)        -- all(grids, name="", showif=0.0):
data_structures/arrays/sudoku_solver.py:140:8     - Unknown word (Attempt)       -- """Attempt to solve a sequence
data_structures/arrays/sudoku_solver.py:141:49    - Unknown word (puzzles)       -- of seconds, display puzzles that take longer.
data_structures/arrays/sudoku_solver.py:148:43    - Unknown word (enough)        -- puzzles that take long enough
data_structures/arrays/sudoku_solver.py:159:51    - Unknown word (secs)          -- s puzzles (avg %.2f secs (%d Hz), max %.2f secs
data_structures/arrays/sudoku_solver.py:167:9     - Unknown word (unitsolved)    -- def unitsolved(unit):
data_structures/arrays/sudoku_solver.py:180:68    - Unknown word (contradictions) -- assignments. Restart on contradictions.
data_structures/arrays/sudoku_solver.py:181:55    - Unknown word (solvable)       -- not guaranteed to be solvable, but empirically
data_structures/arrays/sudoku_solver.py:190:43    - Unknown word (Give)           -- puzzle(assignments) ## Give up and make a new puzzle
data_structures/arrays/sudoku_solver.py:214:28    - Unknown word (hardest)        -- solve_all(from_file("hardest.txt"), "hardest", None
data_structures/arrays/sudoku_solver.py:26:1      - Unknown word (peers)        -- peers = {s: {x for u in units
data_structures/arrays/sudoku_solver.py:3:75      - Unknown word (improvements) -- Python. If you have improvements,
data_structures/arrays/sudoku_solver.py:51:23     - Unknown word (contradiction) -- return False if a contradiction is detected."""
data_structures/arrays/sudoku_solver.py:61:69     - Unknown word (empties)       -- with '0' or '.' for empties."
data_structures/arrays/sudoku_solver.py:68:8      - Unknown word (Eliminate)     -- """Eliminate all the other values
data_structures/arrays/sudoku_solver.py:71:12     - Unknown word (eliminate)     -- if all(eliminate(values, s, d2) for d
data_structures/arrays/sudoku_solver.py:81:35     - Unknown word (eliminated)    -- return values  ## Already eliminated
data_structures/arrays/sudoku_solver.py:83:29     - Unknown word (reduced)       -- 1) If a square s is reduced to one value d2, then
data_structures/arrays/sudoku_solver.py:85:26     - Unknown word (Contradiction) -- return False  ## Contradiction: removed last value
data_structures/arrays/sudoku_solver.py:92:9      - Unknown word (dplaces)       -- dplaces = [s for s in u if d
data_structures/binary_tree/README.md:101:10    - Unknown word (idea)        -- The core idea is as follow.
data_structures/binary_tree/README.md:105:13    - Unknown word (visiting)    -- - If we are visiting a white node, turn it
data_structures/binary_tree/README.md:109:1     - Unknown word (Implementation) -- Implementation of pre-order and post
data_structures/binary_tree/README.md:109:109   - Unknown word (pushing)        -- changing the order of pushing the child nodes into
data_structures/binary_tree/README.md:11:3      - Unknown word (Depth)      -- - Depth First Traversals (DFS
data_structures/binary_tree/README.md:13:28     - Unknown word (Breadth)    -- Level Order Traversal or Breadth First or Traversal
data_structures/binary_tree/README.md:17:112    - Unknown word (recursion)  -- recursive data structure, recursion and stack are two key
data_structures/binary_tree/README.md:17:22     - Unknown word (simplify)   -- Stack can be used to simplify the process of DFS traversal
data_structures/binary_tree/README.md:17:61     - Unknown word (Besides)    -- process of DFS traversal. Besides, since tree is a recursive
data_structures/binary_tree/README.md:17:86     - Unknown word (recursive)  -- Besides, since tree is a recursive data structure, recursion
data_structures/binary_tree/README.md:1:15      - Unknown word (Traversal)  -- # Binary Tree Traversal
data_structures/binary_tree/README.md:1:3       - Unknown word (Binary)     -- # Binary Tree Traversal
data_structures/binary_tree/README.md:23:135    - Unknown word (flag)       -- use a variable as a flag to represent the end
data_structures/binary_tree/README.md:23:32     - Unknown word (determine)  -- point of BFS is how to determine whether the traversal
data_structures/binary_tree/README.md:31:4      - Unknown word (Visit)      -- 1. Visit the root node and push
data_structures/binary_tree/README.md:37:1      - Unknown word (Conclusion) -- Conclusion: This problem involves
data_structures/binary_tree/README.md:37:26     - Unknown word (involves)   -- Conclusion: This problem involves the classic recursive
data_structures/binary_tree/README.md:39:156    - Unknown word (visit)      -- from top to bottom, and visit the right subtrees respective
data_structures/binary_tree/README.md:39:251    - Unknown word (perspective) -- implement it from this perspective, things will be somewhat
data_structures/binary_tree/README.md:39:27     - Unknown word (picture)    -- you look at the bigger picture, you'll find that the
data_structures/binary_tree/README.md:39:279    - Unknown word (somewhat)    -- perspective, things will be somewhat different. For the
data_structures/binary_tree/README.md:39:84     - Unknown word (followed)   -- process of traversal is as followed. `Visit the left subtrees
data_structures/binary_tree/README.md:3:4       - Unknown word (Overview)   -- ## Overview
data_structures/binary_tree/README.md:51:79     - Unknown word (until)       -- Repeat this process until a leaf node reached
data_structures/binary_tree/README.md:51:87     - Unknown word (leaf)        -- this process until a leaf node reached.
data_structures/binary_tree/README.md:55:10     - Unknown word (popping)     -- 3. Start popping nodes from the stack
data_structures/binary_tree/README.md:57:111    - Unknown word (helpful)     -- sorted array, which is helpful for coming up simplified
data_structures/binary_tree/README.md:57:123    - Unknown word (coming)      -- which is helpful for coming up simplified solutions
data_structures/binary_tree/README.md:57:6      - Unknown word (worth)       -- It's worth pointing out that the
data_structures/binary_tree/README.md:5:124     - Unknown word (directly)   -- classic problems, either directly or indirectly.
data_structures/binary_tree/README.md:5:136     - Unknown word (indirectly) -- either directly or indirectly.
data_structures/binary_tree/README.md:5:59      - Unknown word (traversal)  -- data structures and traversal being an algorithm relates
data_structures/binary_tree/README.md:5:88      - Unknown word (relates)    -- traversal being an algorithm relates to classic problems
data_structures/binary_tree/README.md:63:38     - Unknown word (deserves)    -- bit of a challenge. It deserves the `hard` tag of LeetCode
data_structures/binary_tree/README.md:65:77     - Unknown word (cunning)     -- but the last one. A cunning way to do it is to:
data_structures/binary_tree/README.md:67:123    - Unknown word (traversed)   -- right subtrees have been traversed, then it can be popped
data_structures/binary_tree/README.md:67:149    - Unknown word (popped)      -- traversed, then it can be popped from the stack.
data_structures/binary_tree/README.md:69:108    - Unknown word (null)        -- left and right are `null`.
data_structures/binary_tree/README.md:69:39     - Unknown word (easily)      -- leaf node`, you can easily tell whether a node
data_structures/binary_tree/README.md:69:46     - Unknown word (tell)        -- node`, you can easily tell whether a node is a
data_structures/binary_tree/README.md:71:266    - Unknown word (think)       -- But if you come to think about it, as we are
data_structures/binary_tree/README.md:71:448    - Unknown word (reducing)    -- popping from the stack, reducing the space complexity
data_structures/binary_tree/README.md:7:14      - Unknown word (grasp)      -- > If you can grasp the traversal of binary
data_structures/binary_tree/README.md:81:37     - Unknown word (FIFO)        -- root node, put it in a FIFO queue, put in the queue
data_structures/binary_tree/README.md:81:68     - Unknown word (special)     -- put in the queue a special flag (we are using
data_structures/binary_tree/README.md:87:78     - Unknown word (finished)    -- current level has not finished yet, we enqueue its
data_structures/binary_tree/README.md:89:13     - Unknown word (marking)     -- ## Bi-color marking
data_structures/binary_tree/README.md:91:91     - Unknown word (described)   -- algorithm, which works as described below.
data_structures/binary_tree/README.md:99:1      - Unknown word (Enlightened) -- Enlightened by tri-color marking
data_structures/binary_tree/README.md:99:68     - Unknown word (invented)    -- marking method can be invented to solve all three traversal
data_structures/binary_tree/avl_tree.py:112:14    - Unknown word (symmetry)   -- a mirror symmetry rotation of the left
data_structures/binary_tree/avl_tree.py:241:9     - Unknown word (Ltree)      -- class AVLtree:
data_structures/binary_tree/avl_tree.py:294:26    - Unknown word (traversale) -- -> str:  # a level traversale, gives a more intuitive
data_structures/binary_tree/basic_binary_tree.py:57:9      - Unknown word (medium)     -- def medium_tree(cls) -> BinaryTree
data_structures/binary_tree/binary_search_tree.py:146:51    - Unknown word (kids)       -- not None:  # reset its kids
data_structures/binary_tree/binary_search_tree.py:236:15    - Unknown word (deep)       -- We go deep on the right branch
data_structures/binary_tree/binary_search_tree.py:281:11    - Unknown word (Look)       -- # Look for the node with that
data_structures/binary_tree/binary_search_tree.py:294:13    - Unknown word (predecessor) -- predecessor = self.get_max(
data_structures/binary_tree/binary_search_tree.py:300:18    - Unknown word (Assigns)     -- ) # Assigns the value to the node
data_structures/binary_tree/binary_search_tree.py:57:6      - Unknown word (existence)  -- Test existence
data_structures/binary_tree/binary_search_tree_recursive.py:138:19    - Unknown word (reassign)   -- self._reassign_nodes(node, lowest_node
data_structures/binary_tree/binary_search_tree_recursive.py:188:28    - Unknown word (inserted)   -- Gets the max label inserted in the tree
data_structures/binary_tree/binary_search_tree_recursive.py:234:9     - Unknown word (inorder)    -- def inorder_traversal(self) -> Iterator
data_structures/binary_tree/binary_search_tree_recursive.py:33:9      - Unknown word (Empties)    -- Empties the tree
data_structures/binary_tree/binary_search_tree_recursive.py:601:12    - Unknown word (Inorder)    -- print("Inorder traversal:", inorder
data_structures/binary_tree/binary_search_tree_recursive.py:611:14    - Unknown word (Deleting)   -- print("\nDeleting elements 13, 10, 8,
data_structures/binary_tree/binary_search_tree_recursive.py:89:9      - Unknown word (Searches)   -- Searches a node in the tree
data_structures/binary_tree/binary_tree_node_sum.py:18:37     - Unknown word (pointers)   -- a value variable and pointers to Nodes to its left
data_structures/binary_tree/binary_tree_traversals.py:129:9     - Unknown word (populate)   -- def populate_output(root: Node |
data_structures/binary_tree/binary_tree_traversals.py:166:73    - Unknown word (alternatively) -- right and right to left, alternatively.
data_structures/binary_tree/binary_tree_traversals.py:189:11    - Unknown word (Traversals)    -- # All Traversals of the binary are as
data_structures/binary_tree/binary_tree_traversals.py:200:18    - Unknown word (wise)          -- print("Level-wise order Traversal: ")
data_structures/binary_tree/diameter_of_binary_tree.py:2:5       - Unknown word (diameter)   -- The diameter/width of a tree is defined
data_structures/binary_tree/diameter_of_binary_tree.py:64:5      - Unknown word (Constructed) -- Constructed binary tree is
data_structures/binary_tree/distribute_coins.py:106:13    - Unknown word (distrib)    -- def get_distrib(node: TreeNode | None
data_structures/binary_tree/distribute_coins.py:53:12     - Unknown word (Distrib)    -- class CoinsDistribResult(NamedTuple):
data_structures/binary_tree/distribute_coins.py:53:7      - Unknown word (Coins)      -- class CoinsDistribResult(NamedTuple
data_structures/binary_tree/distribute_coins.py:58:5      - Unknown word (distribute) -- def distribute_coins(root: TreeNode
data_structures/binary_tree/distribute_coins.py:7:11      - Unknown word (coins)      -- node.data coins. There are exactly n
data_structures/binary_tree/distribute_coins.py:9:60      - Unknown word (coin)       -- adjacent nodes and move one coin from one node
data_structures/binary_tree/fenwick_tree.py:134:52    - Unknown word (exclusive)  -- bound of the query (exclusive)
data_structures/binary_tree/fenwick_tree.py:230:18    - Unknown word (Largest)    -- j = 1  # Largest power of 2 <= size
data_structures/binary_tree/fenwick_tree.py:4:7       - Unknown word (Fenwick)    -- class FenwickTree:
data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:10:9      - Unknown word (Arunkumar)    -- Author: Arunkumar A
data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:136:12    - Unknown word (Flattened)    -- print("Flattened Linked List:")
data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:6:16      - Unknown word (demonstrates) -- flattening and demonstrates the flattening process
data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:7:27      - Unknown word (flattened)    -- function to visualize the flattened linked list.
data_structures/binary_tree/floor_and_ceiling.py:4:7       - Unknown word (ceiling)    -- * The ceiling of key 'k' is the minimum
data_structures/binary_tree/inorder_tree_traversal_2022.py:19:61     - Unknown word (declare)    -- make a new node and declare it as root.
data_structures/binary_tree/inorder_tree_traversal_2022.py:2:1       - Unknown word (Illustrate) -- Illustrate how to implement inorder
data_structures/binary_tree/inorder_tree_traversal_2022.py:36:35     - Unknown word (proceed)    -- to left subtree and proceed recursively
data_structures/binary_tree/inorder_tree_traversal_2022.py:3:17      - Unknown word (Singh)      -- Author: Gurneet Singh
data_structures/binary_tree/inorder_tree_traversal_2022.py:3:9       - Unknown word (Gurneet)    -- Author: Gurneet Singh
data_structures/binary_tree/inorder_tree_traversal_2022.py:74:12     - Unknown word (Printing)   -- print("Printing values of binary search
data_structures/binary_tree/inorder_tree_traversal_2022.py:9:8       - Unknown word (Defining)   -- """Defining the structure of BinaryTreeNo
data_structures/binary_tree/is_sorted.py:9:68      - Unknown word (ascending)  -- nodes are sorted in ascending order.
data_structures/binary_tree/lazy_segment_tree.py:128:5     - Unknown word (segt)       -- segt = SegmentTree(size)
data_structures/binary_tree/lowest_common_ancestor.py:27:33     - Unknown word (saves)      -- creating sparse table which saves each nodes 2^i-th parent
data_structures/binary_tree/lowest_common_ancestor.py:38:19     - Unknown word (ancestor)   -- def lowest_common_ancestor(
data_structures/binary_tree/lowest_common_ancestor.py:41:17     - Unknown word (deeper)     -- # u must be deeper in the tree than v
data_structures/binary_tree/lowest_common_ancestor.py:51:25     - Unknown word (upwards)    -- # moving both nodes upwards till lca in found
data_structures/binary_tree/lowest_common_ancestor.py:51:33     - Unknown word (till)       -- moving both nodes upwards till lca in found
data_structures/binary_tree/lowest_common_ancestor.py:87:7      - Unknown word (initializing) -- # initializing with 0
data_structures/binary_tree/lowest_common_ancestor.py:89:54     - Unknown word (unvisited)    -- means every node is unvisited
data_structures/binary_tree/maximum_fenwick_tree.py:80:26     - Unknown word (border)     -- current_left_border = self.get_prev(index
data_structures/binary_tree/maximum_fenwick_tree.py:98:23     - Unknown word (Because)    -- right -= 1  # Because of right is exclusive
data_structures/binary_tree/maximum_sum_bst.py:19:18     - Unknown word (traverses)  -- The solution traverses a binary tree to find
data_structures/binary_tree/maximum_sum_bst.py:49:9      - Unknown word (solver)     -- def solver(node: TreeNode | None
data_structures/binary_tree/merge_two_binary_trees.py:4:14      - Unknown word (merging)    -- The rule for merging is that if two nodes
data_structures/binary_tree/mirror_binary_tree.py:134:9     - Unknown word (mirrored)   -- The mirrored tree looks like this
data_structures/binary_tree/mirror_binary_tree.py:35:32     - Unknown word (rooted)     -- Mirror the binary tree rooted at this node by swapping
data_structures/binary_tree/mirror_binary_tree.py:35:55     - Unknown word (swapping)   -- rooted at this node by swapping left and right children
data_structures/binary_tree/non_recursive_segment_tree.py:3:68      - Unknown word (commutative) -- of elements with a "commutative"
data_structures/binary_tree/non_recursive_segment_tree.py:3:7       - Unknown word (virtually)  -- works virtually with any list of the
data_structures/binary_tree/non_recursive_segment_tree.py:4:1       - Unknown word (combiner)    -- combiner.
data_structures/binary_tree/non_recursive_segment_tree.py:95:26     - Unknown word (combined)    -- :return: element combined in the range [left,
data_structures/binary_tree/number_of_possible_binary_trees.py:12:1      - Unknown word (Basically)  -- Basically we Create the 2 function
data_structures/binary_tree/number_of_possible_binary_trees.py:13:8      - Unknown word (catalan)    -- 1. catalan_number(node_count: int
data_structures/binary_tree/number_of_possible_binary_trees.py:20:14     - Unknown word (coefficient) -- def binomial_coefficient(n: int, k: int) -> int
data_structures/binary_tree/number_of_possible_binary_trees.py:20:5      - Unknown word (binomial)   -- def binomial_coefficient(n: int,
data_structures/binary_tree/number_of_possible_binary_trees.py:22:28     - Unknown word (Binomial)    -- Since Here we Find the Binomial Coefficient:
data_structures/binary_tree/number_of_possible_binary_trees.py:22:37     - Unknown word (Coefficient) -- we Find the Binomial Coefficient:
data_structures/binary_tree/number_of_possible_binary_trees.py:2:30      - Unknown word (exciting)   -- are going to find an exciting number called Catalan
data_structures/binary_tree/number_of_possible_binary_trees.py:2:53      - Unknown word (Catalan)    -- exciting number called Catalan number which is use
data_structures/binary_tree/number_of_possible_binary_trees.py:32:22     - Unknown word (kept)        -- result = 1  # To kept the Calculated Value
data_structures/binary_tree/number_of_possible_binary_trees.py:32:31     - Unknown word (Calculated)  -- result = 1  # To kept the Calculated Value
data_structures/binary_tree/number_of_possible_binary_trees.py:5:33      - Unknown word (SUMMATION)  -- the formula: t(n) = SUMMATION(i = 1 to n)t(i-1)t(n
data_structures/binary_tree/red_black_tree.py:104:35    - Unknown word (repair)     -- self.left._insert_repair()
data_structures/binary_tree/red_black_tree.py:113:12    - Unknown word (Repair)     -- """Repair the coloring from inserting
data_structures/binary_tree/red_black_tree.py:113:37    - Unknown word (inserting)  -- Repair the coloring from inserting into a tree."""
data_structures/binary_tree/red_black_tree.py:11:56     - Unknown word (deleting)   -- perform faster for writing/deleting nodes
data_structures/binary_tree/red_black_tree.py:121:13    - Unknown word (uncle)      -- uncle = self.parent.sibling
data_structures/binary_tree/red_black_tree.py:12:49     - Unknown word (though)     -- in the average case, though, because they're
data_structures/binary_tree/red_black_tree.py:12:65     - Unknown word (they're)    -- case, though, because they're
data_structures/binary_tree/red_black_tree.py:12:9      - Unknown word (slower)     -- and slower for reading in the average
data_structures/binary_tree/red_black_tree.py:132:29    - Unknown word (grandparent) -- if self.grandparent:
data_structures/binary_tree/red_black_tree.py:13:63     - Unknown word (asymptotic) -- both will get the same asymptotic
data_structures/binary_tree/red_black_tree.py:167:41    - Unknown word (happens)     -- # The only way this happens to a node with one child
data_structures/binary_tree/red_black_tree.py:206:63    - Unknown word (messed)      -- tree that may have been messed up."""
data_structures/binary_tree/red_black_tree.py:281:10    - Unknown word (wording)     -- (wording stolen from wikipedia
data_structures/binary_tree/red_black_tree.py:281:18    - Unknown word (stolen)      -- (wording stolen from wikipedia article
data_structures/binary_tree/red_black_tree.py:286:52    - Unknown word (descendent)  -- any node to all of its descendent NIL nodes
data_structures/binary_tree/red_black_tree.py:324:23    - Unknown word (incorrectly) -- tree is color incorrectly).
data_structures/binary_tree/red_black_tree.py:335:37    - Unknown word (unequal)     -- The two children have unequal depths
data_structures/binary_tree/red_black_tree.py:46:9      - Unknown word (Performing) -- Performing one rotation can be
data_structures/binary_tree/red_black_tree.py:513:37    - Unknown word (allowing)    -- the color of a node, allowing for None leaves."""
data_structures/binary_tree/red_black_tree.py:561:27    - Unknown word (balances)    -- "Test that the tree balances inserts to O(log(n)
data_structures/binary_tree/red_black_tree.py:561:36    - Unknown word (inserts)     -- that the tree balances inserts to O(log(n)) by doing
data_structures/binary_tree/red_black_tree.py:571:45    - Unknown word (correctly)   -- method of the tree correctly balances, colors,
data_structures/binary_tree/red_black_tree.py:592:14    - Unknown word (searching)   -- """Tests searching through the tree for
data_structures/binary_tree/red_black_tree.py:601:17    - Unknown word (something)   -- # Found something not in there
data_structures/binary_tree/red_black_tree.py:608:59    - Unknown word (verifying)   -- method of the tree, verifying the
data_structures/binary_tree/red_black_tree.py:609:19    - Unknown word (removal)     -- insertion and removal of elements, and the
data_structures/binary_tree/red_black_tree.py:638:5     - Unknown word (tuples)      -- tuples = [(-20, None, -16)
data_structures/binary_tree/red_black_tree.py:673:15    - Unknown word (chaining)    -- def test_tree_chaining() -> bool:
data_structures/binary_tree/red_black_tree.py:688:5     - Unknown word (pytests)     -- def pytests() -> None:
data_structures/binary_tree/red_black_tree.py:703:20    - Unknown word (Inserting)   -- print_results("Inserting", test_insert())
data_structures/binary_tree/red_black_tree.py:704:20    - Unknown word (Searching)   -- print_results("Searching", test_insert_and_search
data_structures/binary_tree/red_black_tree.py:88:12     - Unknown word (Inserts)    -- """Inserts label into the subtree
data_structures/binary_tree/serialize_deserialize_binary_tree.py:12:5      - Unknown word (Props)      -- Props:
data_structures/binary_tree/serialize_deserialize_binary_tree.py:58:9      - Unknown word (Represent)  -- Represent the tree as a string
data_structures/binary_tree/serialize_deserialize_binary_tree.py:97:9      - Unknown word (serialzed)  -- >>> serialzed_data = repr(root)
data_structures/binary_tree/symmetric_tree.py:134:40    - Unknown word (mirrors)    -- the two subtrees are mirrors of each other, False
data_structures/binary_tree/symmetric_tree.py:145:16    - Unknown word (sides)      -- # Both sides are empty, which is
data_structures/binary_tree/symmetric_tree.py:71:10     - Unknown word (asymmetric) -- def make_asymmetric_tree() -> Node:
data_structures/binary_tree/treap.py:121:14    - Unknown word (treap)      -- def interact_treap(root: Node | None, args
data_structures/binary_tree/treap.py:159:36    - Unknown word (prints)     -- each command, program prints treap"""
data_structures/binary_tree/treap.py:42:73     - Unknown word (Nones)      -- tree is split into 2 Nones
data_structures/binary_tree/treap.py:55:9      - Unknown word (Just)       -- Just symmetric to previous
data_structures/binary_tree/treap.py:8:5       - Unknown word (Treap's)    -- Treap's node
data_structures/binary_tree/treap.py:96:5      - Unknown word (erase)      -- def erase(root: Node | None, value
data_structures/binary_tree/treap.py:98:5      - Unknown word (Erase)      -- Erase element
data_structures/binary_tree/treap.py:9:5       - Unknown word (Treap)      -- Treap is a binary tree by
data_structures/binary_tree/wavelet_tree.py:121:5     - Unknown word (quantile)    -- def quantile(node: Node | None, index
data_structures/binary_tree/wavelet_tree.py:18:14     - Unknown word (minn)       -- self.minn: int = -1
data_structures/binary_tree/wavelet_tree.py:19:14     - Unknown word (maxx)       -- self.maxx: int = -1
data_structures/binary_tree/wavelet_tree.py:2:1       - Unknown word (Wavelet)    -- Wavelet tree is a data-structure
data_structures/binary_tree/wavelet_tree.py:2:34      - Unknown word (designed)   -- is a data-structure designed to efficiently answer
data_structures/binary_tree/wavelet_tree.py:3:13      - Unknown word (Wavelets)   -- for arrays. Wavelets trees are different
data_structures/binary_tree/wavelet_tree.py:51:41     - Unknown word (maintaining) -- the rest in right_arr, maintaining the order of the elements
data_structures/binary_tree/wavelet_tree.py:5:35      - Unknown word (fenwick)    -- with segment trees or fenwick trees. You can read
data_structures/disjoint_set/alternate_disjoint_set.py:16:14     - Unknown word (ranks)      -- self.ranks = [1] * num_sets
data_structures/disjoint_set/alternate_disjoint_set.py:21:53     - Unknown word (heuristic)  -- using Union by rank heuristic
data_structures/disjoint_set/alternate_disjoint_set.py:2:54      - Unknown word (heuristics) -- Lists and some added heuristics for efficiency
data_structures/disjoint_set/alternate_disjoint_set.py:3:15      - Unknown word (Heuristic)  -- Union by Rank Heuristic and Path Compression
data_structures/disjoint_set/alternate_disjoint_set.py:54:26     - Unknown word (disj)       -- def get_parent(self, disj_set: int) -> int:
data_structures/hashing/bloom_filter.py:15:6      - Unknown word (Titanic)    -- >>> "Titanic" in bloom
data_structures/hashing/bloom_filter.py:25:16     - Unknown word (Avatar)     -- >>> bloom.add("Avatar")
data_structures/hashing/bloom_filter.py:34:17     - Unknown word (films)      -- >>> not_present_films = ("The Godfather",
data_structures/hashing/bloom_filter.py:34:31     - Unknown word (Godfather)  -- present_films = ("The Godfather", "Interstellar", "Parasite
data_structures/hashing/bloom_filter.py:34:44     - Unknown word (Interstellar) -- ("The Godfather", "Interstellar", "Parasite", "Pulp
data_structures/hashing/bloom_filter.py:34:60     - Unknown word (Parasite)     -- Godfather", "Interstellar", "Parasite", "Pulp Fiction")
data_structures/hashing/bloom_filter.py:34:77     - Unknown word (Fiction)      -- , "Parasite", "Pulp Fiction")
data_structures/hashing/bloom_filter.py:36:7      - Unknown word (film)         -- ... film: bloom.format_hash(film
data_structures/hashing/bloom_filter.py:45:31     - Unknown word (positives)    -- sometimes there are false positives:
data_structures/hashing/bloom_filter.py:46:6      - Unknown word (Ratatouille)  -- >>> "Ratatouille" in bloom
data_structures/hashing/bloom_filter.py:51:17     - Unknown word (increases)    -- The probability increases with the number of elements
data_structures/hashing/bloom_filter.py:52:17     - Unknown word (decreases)    -- The probability decreases with the number of bits
data_structures/hashing/bloom_filter.py:5:54      - Unknown word (efficient)  -- set() it is more space-efficient.
data_structures/hashing/bloom_filter.py:7:13      - Unknown word (Bloom)      -- >>> bloom = Bloom(size=8)
data_structures/hashing/bloom_filter.py:7:5       - Unknown word (bloom)      -- >>> bloom = Bloom(size=8)
data_structures/hashing/double_hash.py:16:14     - Unknown word (theory)     -- from .number_theory.prime_numbers import
data_structures/hashing/double_hash.py:21:34     - Unknown word (addressing) -- Table example with open addressing and Double Hash
data_structures/hashing/double_hash.py:3:59      - Unknown word (Addressed)  -- resolving technique in Open Addressed Hash tables.
data_structures/hashing/double_hash.py:5:13      - Unknown word (advantage)  -- occurs. The advantage of Double hashing is
data_structures/hashing/double_hash.py:5:80      - Unknown word (probing)    -- of the best form of  probing,
data_structures/hashing/double_hash.py:6:1       - Unknown word (producing)  -- producing a uniform distribution
data_structures/hashing/hash_map.py:107:35    - Unknown word (twice)        -- Return true if we need twice fewer buckets when we
data_structures/hashing/hash_map.py:159:9     - Unknown word (Trying)       -- Trying to add an element with
data_structures/hashing/hash_map.py:178:12    - Unknown word (Changing)     -- 1. Changing value of item whose
data_structures/hashing/hash_map.py:6:1       - Unknown word (Another)    -- Another hash map implementation
data_structures/hashing/hash_map.py:7:32      - Unknown word (Hettinger)    -- Dictionaries by Raymond Hettinger
data_structures/hashing/hash_map.py:7:8       - Unknown word (Dictionaries) -- Modern Dictionaries by Raymond Hettinger
data_structures/hashing/hash_table.py:185:27    - Unknown word (searched)   -- The hash table is searched sequentially from the
data_structures/hashing/hash_table.py:226:53    - Unknown word (slices)     -- must be integers or slices, not float
data_structures/hashing/hash_table.py:239:9     - Unknown word (rehashing)  -- def rehashing(self):
data_structures/hashing/hash_table.py:240:9     - Unknown word (survivor)   -- survivor_values = [value for
data_structures/hashing/hash_table.py:243:51    - Unknown word (hell's)     -- self.size_table # hell's pointers D: don't DRY
data_structures/hashing/hash_table.py:62:9      - Unknown word (Creating)   -- Creating HashTable with size
data_structures/hashing/hash_table.py:90:33     - Unknown word (entering)   -- bulk_insert is used for entering more than one element
data_structures/hashing/number_theory/prime_numbers.py:43:11     - Unknown word (Negatives)  -- # Negatives, 0, 1 and all even numbers
data_structures/hashing/quadratic_probing.py:19:63     - Unknown word (successive) -- hash index and adding successive
data_structures/hashing/quadratic_probing.py:20:32     - Unknown word (quadratic)  -- values of an arbitrary quadratic polynomial until open
data_structures/hashing/quadratic_probing.py:20:42     - Unknown word (polynomial) -- arbitrary quadratic polynomial until open slot is found
data_structures/hashing/quadratic_probing.py:6:16      - Unknown word (Probing)    -- class QuadraticProbing(HashTable):
data_structures/hashing/quadratic_probing.py:6:7       - Unknown word (Quadratic)  -- class QuadraticProbing(HashTable):
data_structures/hashing/tests/test_hash_map.py:56:52     - Unknown word (upsize)     -- range(5)], # guaranteed upsize
data_structures/hashing/tests/test_hash_map.py:66:14     - Unknown word (parametrize) -- @pytest.mark.parametrize(
data_structures/heap/binomial_heap.py:112:10    - Unknown word (Heaps)      -- mergeHeaps() test
data_structures/heap/binomial_heap.py:168:11    - Unknown word (Consecutively) -- # Consecutively merge roots with same
data_structures/heap/binomial_heap.py:177:19    - Unknown word (Neighbouring)  -- # Neighbouring Nodes
data_structures/heap/binomial_heap.py:181:19    - Unknown word (Merging)       -- # Merging trees
data_structures/heap/binomial_heap.py:184:19    - Unknown word (Updating)      -- # Updating links
data_structures/heap/binomial_heap.py:28:62     - Unknown word (Unequal)    -- other.left_tree_size, "Unequal Sizes of Blocks"
data_structures/heap/binomial_heap.py:28:70     - Unknown word (Sizes)      -- tree_size, "Unequal Sizes of Blocks"
data_structures/heap/binomial_heap.py:316:11    - Unknown word (Remaining)     -- # Remaining cases
data_structures/heap/binomial_heap.py:325:11    - Unknown word (Neighbour)     -- # Neighbour nodes
data_structures/heap/binomial_heap.py:388:24    - Unknown word (poor)          -- Performance is poor, so use only for small
data_structures/heap/binomial_heap.py:388:9     - Unknown word (Performance)   -- Performance is poor, so use only
data_structures/heap/binomial_heap.py:3:26      - Unknown word (Structures) -- Reference: Advanced Data Structures, Peter Brass
data_structures/heap/binomial_heap.py:3:44      - Unknown word (Brass)      -- Data Structures, Peter Brass
data_structures/heap/binomial_heap.py:50:9      - Unknown word (oriented)   -- Min-oriented priority queue implemented
data_structures/heap/binomial_heap.py:52:64     - Unknown word (logn)       -- elements: Guaranteed logn, amoratized 1
data_structures/heap/binomial_heap.py:52:70     - Unknown word (amoratized) -- elements: Guaranteed logn, amoratized 1
data_structures/heap/binomial_heap.py:53:18     - Unknown word (meld)       -- - Merge (meld) heaps of size m and
data_structures/heap/binomial_heap.py:53:24     - Unknown word (heaps)      -- - Merge (meld) heaps of size m and n: O(logn
data_structures/heap/binomial_heap.py:53:56     - Unknown word (logm)       -- size m and n: O(logn + logm)
data_structures/heap/binomial_heap.py:9:15      - Unknown word (doubly)     -- Node in a doubly-linked binomial tree
data_structures/heap/heap.py:115:36    - Unknown word (responsible) -- the function that is responsible for restoring the property
data_structures/heap/heap.py:115:52    - Unknown word (restoring)   -- that is responsible for restoring the property
data_structures/heap/heap.py:127:28    - Unknown word (indeed)      -- # if violation indeed exists
data_structures/heap/heap_generic.py:13:43     - Unknown word (supporting) -- indexes of each item for supporting updates and deletion
data_structures/heap/heap_generic.py:46:12     - Unknown word (Compares)   -- """Compares the two items using
data_structures/heap/heap_generic.py:66:30     - Unknown word (upward)     -- ""Fixes the heap in upward direction of given index
data_structures/heap/heap_generic.py:73:30     - Unknown word (downward)   -- ""Fixes the heap in downward direction of given index
data_structures/heap/heap_generic.py:86:11     - Unknown word (Ideally)    -- # Ideally only one of them will
data_structures/heap/heap_generic.py:91:12     - Unknown word (Deletes)    -- """Deletes given item from heap
data_structures/heap/min_heap.py:63:18     - Unknown word (sift)       -- self.sift_down(i, array)
data_structures/heap/randomized_heap.py:12:7      - Unknown word (Randomized) -- class RandomizedHeapNode(Generic[T])
data_structures/heap/randomized_heap.py:14:21     - Unknown word (randomized) -- One node of the randomized heap. Contains the value
data_structures/heap/skew_heap.py:153:11    - Unknown word (Pushing)       -- # Pushing items back to the heap
data_structures/heap/skew_heap.py:96:5      - Unknown word (Visualization) -- Visualization: https://www.cs.usfca
data_structures/kd_tree/build_kdtree.py:12:11     - Unknown word (kdtree)      -- def build_kdtree(points: list[list[float
data_structures/kd_tree/build_kdtree.py:1:16      - Unknown word (Ramy)       -- # Created by: Ramy-Badr-Ahmed (https:/
data_structures/kd_tree/build_kdtree.py:1:21      - Unknown word (Badr)       -- # Created by: Ramy-Badr-Ahmed (https://github
data_structures/kd_tree/build_kdtree.py:1:26      - Unknown word (Ahmed)      -- Created by: Ramy-Badr-Ahmed (https://github.com
data_structures/kd_tree/build_kdtree.py:28:27     - Unknown word (Dimensionality) -- = len(points[0])  # Dimensionality of the points
data_structures/kd_tree/build_kdtree.py:5:11      - Unknown word (mention)    -- # Please mention me (@Ramy-Badr-Ahmed
data_structures/kd_tree/build_kdtree.py:6:15      - Unknown word (bugs)       -- # addressing bugs/corrections to this
data_structures/kd_tree/build_kdtree.py:6:20      - Unknown word (corrections) -- # addressing bugs/corrections to this file.
data_structures/kd_tree/build_kdtree.py:7:4       - Unknown word (Thank)       -- # Thank you!
data_structures/kd_tree/example/example_usage.py:12:38     - Unknown word (hypercube)  -- structures.kd_tree.example.hypercube_points import hypercube
data_structures/kd_tree/example/example_usage.py:18:5      - Unknown word (Demonstrates) -- Demonstrates the use of KD-Tree by
data_structures/kd_tree/example/example_usage.py:19:39     - Unknown word (performing)   -- dimensional hypercube and performing a nearest neighbor search
data_structures/kd_tree/example/example_usage.py:23:9      - Unknown word (dimensions)   -- num_dimensions: int = 10
data_structures/kd_tree/example/hypercube_points.py:16:29     - Unknown word (uniformly)  -- Generates random points uniformly distributed within an
data_structures/kd_tree/nearest_neighbour_search.py:65:13     - Unknown word (nearer)     -- nearer_subtree = node.left
data_structures/kd_tree/nearest_neighbour_search.py:66:13     - Unknown word (further)    -- further_subtree = node.right
data_structures/kd_tree/tests/test_kdtree.py:55:59     - Unknown word (simplistic) -- balanced to some extent (simplistic check)
data_structures/linked_list/__init__.py:78:11     - Unknown word (Switched)   -- # Switched 'self.is_empty()' to
data_structures/linked_list/__init__.py:80:46     - Unknown word (giving)     -- below else part and giving error
data_structures/linked_list/circular_linked_list.py:151:10    - Unknown word (circular)   -- def test_circular_linked_list() -> None
data_structures/linked_list/circular_linked_list.py:15:7      - Unknown word (Circular)   -- class CircularLinkedList:
data_structures/linked_list/circular_linked_list.py:163:49    - Unknown word (happen)     -- rtionError # This should not happen
data_structures/linked_list/circular_linked_list.py:21:63     - Unknown word (yielding)   -- Circular Linked List yielding their data.
data_structures/linked_list/circular_linked_list.py:22:9      - Unknown word (Yields)     -- Yields:
data_structures/linked_list/deque_doubly.py:103:8     - Unknown word (Equeu)      -- # DEqueu Remove Operations (At
data_structures/linked_list/deque_doubly.py:12:31     - Unknown word (inherited)  -- Private class (to be inherited)"""
data_structures/linked_list/deque_doubly.py:29:15     - Unknown word (trailer)    -- self._trailer = self._Node(None, None
data_structures/linked_list/deque_doubly.py:2:26      - Unknown word (Doubly)     -- Implementing Deque using DoublyLinkedList ...
data_structures/linked_list/deque_doubly.py:40:39     - Unknown word (successor)  -- self, predecessor, e, successor):
data_structures/linked_list/doubly_linked_list_two.py:2:44      - Unknown word (holds)      -- similar to an array, it holds values. However, links
data_structures/linked_list/doubly_linked_list_two.py:4:34      - Unknown word (ended)      -- example of a double ended, doubly linked list
data_structures/linked_list/doubly_linked_list_two.py:6:57      - Unknown word (typically)  -- contains an extra pointer, typically called previous
data_structures/linked_list/doubly_linked_list_two.py:7:69      - Unknown word (singly)     -- data which are there in singly linked list.
data_structures/linked_list/doubly_linked_list_two.py:8:4       - Unknown word (Advantages) -- - Advantages over SLL - It can be
data_structures/linked_list/floyds_cycle_detection.py:141:45    - Unknown word (potential)  -- not None to avoid any potential type errors.
data_structures/linked_list/floyds_cycle_detection.py:2:1       - Unknown word (Floyd's)    -- Floyd's cycle detection algorithm
data_structures/linked_list/floyds_cycle_detection.py:6:23      - Unknown word (eventually) -- the fast pointer will eventually catch up to the slow
data_structures/linked_list/floyds_cycle_detection.py:91:9      - Unknown word (Detects)    -- Detects if there is a cycle
data_structures/linked_list/from_sequence.py:1:13      - Unknown word (Prorgam)    -- # Recursive Prorgam to create a Linked List
data_structures/linked_list/is_palindrome.py:12:8      - Unknown word (palindrome) -- def is_palindrome(head: ListNode | None
data_structures/linked_list/merge_two_lists.py:2:16      - Unknown word (merges)     -- Algorithm that merges two sorted linked lists
data_structures/linked_list/print_reverse.py:25:42     - Unknown word (Speeds)     -- Node | None = None  # Speeds up the append() operation
data_structures/linked_list/reverse_k_group.py:118:19    - Unknown word (reversing)  -- print(f"After reversing groups of size {k}:
data_structures/linked_list/rotate_to_the_right.py:14:19     - Unknown word (entire)     -- Print the entire linked list iteratively
data_structures/linked_list/singly_linked_list.py:201:40    - Unknown word (fourth)        -- list.insert_nth(1, "fourth")
data_structures/linked_list/singly_linked_list.py:339:14    - Unknown word (reverses)      -- This reverses the linked list order
data_structures/linked_list/singly_linked_list.py:413:35    - Unknown word (varying)       -- section of the test used varying data types for input
data_structures/linked_list/singly_linked_list.py:420:10    - Unknown word (dlrow)         -- "dlrow olleH",
data_structures/linked_list/singly_linked_list.py:420:16    - Unknown word (olle)          -- "dlrow olleH",
data_structures/linked_list/singly_linked_list.py:52:26     - Unknown word (intended)   -- This function is intended for iterators to access
data_structures/linked_list/singly_linked_list.py:92:31     - Unknown word (visualization) -- String representation/visualization of a Linked Lists
data_structures/linked_list/skip_list.py:119:18    - Unknown word (Higher)        -- Higher values are less likely
data_structures/linked_list/skip_list.py:130:21    - Unknown word (Searched)      -- :param key: Searched key,
data_structures/linked_list/skip_list.py:142:51    - Unknown word (lesser)        -- When node level is lesser than `i` decrement
data_structures/linked_list/skip_list.py:143:43    - Unknown word (Jumping)       -- forward[i].key < key - Jumping to node with key value
data_structures/linked_list/skip_list.py:145:46    - Unknown word (skipping)      -- in skipping searched key.
data_structures/linked_list/skip_list.py:148:67    - Unknown word (potentially)   -- searched node) will potentially have to
data_structures/linked_list/skip_list.py:24:18     - Unknown word (Visual)        -- :return: Visual representation of Node
data_structures/linked_list/skip_list.py:2:25      - Unknown word (Probabilistic) -- Based on "Skip Lists: A Probabilistic Alternative to Balanced
data_structures/linked_list/skip_list.py:2:54      - Unknown word (Balanced)      -- Probabilistic Alternative to Balanced Trees" by William Pugh
data_structures/linked_list/skip_list.py:2:73      - Unknown word (William)       -- to Balanced Trees" by William Pugh
data_structures/linked_list/skip_list.py:2:81      - Unknown word (Pugh)          -- Balanced Trees" by William Pugh
data_structures/linked_list/skip_list.py:325:32    - Unknown word (founded)       -- deleted_items_are_not_founded_by_find_method():
data_structures/linked_list/skip_list.py:373:17    - Unknown word (doesnt)        -- def test_delete_doesnt_leave_dead_nodes():
data_structures/linked_list/skip_list.py:391:22    - Unknown word (yields)        -- def test_iter_always_yields_sorted_values():
data_structures/linked_list/skip_list.py:410:58    - Unknown word (nature)        -- to the probabilistic nature of skip list
data_structures/linked_list/skip_list.py:92:9      - Unknown word (forwards)      -- forwards = node.forward.copy
data_structures/queue/circular_queue.py:78:20     - Unknown word (UNDERFLOW)  -- Exception: UNDERFLOW
data_structures/queue/circular_queue_linked_list.py:24:14     - Unknown word (rear)       -- self.rear: Node | None = None
data_structures/queue/circular_queue_linked_list.py:88:9      - Unknown word (Saves)      -- Saves data at the end of the
data_structures/queue/double_ended_queue.py:23:5      - Unknown word (Observers)  -- Observers
data_structures/queue/double_ended_queue.py:245:18    - Unknown word (topop)      -- @returns topop.val: the value of the
data_structures/queue/double_ended_queue.py:406:32    - Unknown word (dequeues)   -- if the length of the dequeues are not the same, they
data_structures/queue/priority_queue_using_list.py:154:23    - Unknown word (enters)     -- This function enters the element into the
data_structures/queue/priority_queue_using_list.py:20:5      - Unknown word (urgent)     -- urgent (high priority) and
data_structures/queue/queue_on_pseudo_stack.py:23:8      - Unknown word (Dequeues)   -- """Dequeues {@code item}
data_structures/queue/queue_on_pseudo_stack.py:36:8      - Unknown word (Rotates)    -- """Rotates the queue {@code rotation
data_structures/stacks/balanced_parentheses.py:35:33     - Unknown word (demonstration) -- Balanced parentheses demonstration:\n")
data_structures/stacks/dijkstras_two_stack_algorithm.py:11:1      - Unknown word (THESE)        -- THESE ARE THE ALGORITHM'S
data_structures/stacks/dijkstras_two_stack_algorithm.py:12:68     - Unknown word (encountered)  -- When an operand is encountered,
data_structures/stacks/dijkstras_two_stack_algorithm.py:21:58     - Unknown word (operands)     -- operator stack.  The two operands it must
data_structures/stacks/dijkstras_two_stack_algorithm.py:22:50     - Unknown word (pushed)       -- the last two operands pushed onto the operand stack
data_structures/stacks/dijkstras_two_stack_algorithm.py:22:9      - Unknown word (operate)      -- operate on must be the last
data_structures/stacks/dijkstras_two_stack_algorithm.py:27:25     - Unknown word (infix)        -- RULE 5: When the entire infix expression has been
data_structures/stacks/dijkstras_two_stack_algorithm.py:27:51     - Unknown word (scanned)      -- expression has been scanned, the value left on
data_structures/stacks/dijkstras_two_stack_algorithm.py:2:19      - Unknown word (Joslin)     -- Author: Alexander Joslin
data_structures/stacks/dijkstras_two_stack_algorithm.py:3:20      - Unknown word (echoaj)     -- GitHub: github.com/echoaj
data_structures/stacks/dijkstras_two_stack_algorithm.py:40:5      - Unknown word (dijkstras)    -- def dijkstras_two_stack_algorithm
data_structures/stacks/dijkstras_two_stack_algorithm.py:6:29      - Unknown word (evaluating) -- algorithm-for-evaluating-mathematical-expressions
data_structures/stacks/dijkstras_two_stack_algorithm.py:6:40      - Unknown word (mathematical) -- algorithm-for-evaluating-mathematical-expressions-fc0837dae
data_structures/stacks/dijkstras_two_stack_algorithm.py:8:12      - Unknown word (Dijkstra's)   -- We can use Dijkstra's two stack algorithm
data_structures/stacks/infix_to_postfix_conversion.py:111:12    - Unknown word (Infix)           -- print("Infix to Postfix Notation
data_structures/stacks/infix_to_postfix_conversion.py:12:1      - Unknown word (PRECEDENCES) -- PRECEDENCES: dict[str, int] = {
data_structures/stacks/infix_to_postfix_conversion.py:19:1      - Unknown word (ASSOCIATIVITIES) -- ASSOCIATIVITIES: dict[str, Literal[
data_structures/stacks/infix_to_postfix_conversion.py:28:5      - Unknown word (precedence)      -- def precedence(char: str) -> int:
data_structures/stacks/infix_to_postfix_conversion.py:37:5      - Unknown word (associativity)   -- def associativity(char: str) -> Literal
data_structures/stacks/infix_to_postfix_conversion.py:50:17     - Unknown word (Mismatched)      -- ValueError: Mismatched parentheses
data_structures/stacks/infix_to_postfix_conversion.py:94:19     - Unknown word (Precedences)     -- # Precedences are equal
data_structures/stacks/next_greater_element.py:43:57     - Unknown word (utilizes)   -- This implementation utilizes
data_structures/stacks/next_greater_element.py:44:40     - Unknown word (slicing)    -- for the outer loop and slicing for the inner loop.
data_structures/stacks/next_greater_element.py:46:16     - Unknown word (improves)   -- While this improves readability over next
data_structures/stacks/next_greater_element.py:46:25     - Unknown word (readability) -- While this improves readability over next_greatest_element
data_structures/stacks/next_greater_element.py:73:5      - Unknown word (Efficient)   -- Efficient solution to find the
data_structures/stacks/next_greater_element.py:74:70     - Unknown word (suitable)    -- reduced to O(n), making it suitable
data_structures/stacks/next_greater_element.py:77:15     - Unknown word (keeps)       -- The stack keeps track of elements for
data_structures/stacks/next_greater_element.py:77:74     - Unknown word (hasn't)      -- next greater element hasn't
data_structures/stacks/postfix_evaluation.py:137:28    - Unknown word (negate)     -- b *= -1  # negate b
data_structures/stacks/postfix_evaluation.py:2:9       - Unknown word (Polish)     -- Reverse Polish Nation is also known
data_structures/stacks/postfix_evaluation.py:31:1      - Unknown word (OPERATORS)  -- OPERATORS = {
data_structures/stacks/postfix_evaluation.py:43:69     - Unknown word (serves)     -- This function also serves as a check
data_structures/stacks/postfix_evaluation.py:60:28     - Unknown word (neither)    -- msg = f"{token} is neither a number nor a valid
data_structures/stacks/stack.py:12:12     - Unknown word (Underflow)  -- class StackUnderflowError(BaseException)
data_structures/stacks/stack.py:18:70     - Unknown word (adds)       -- ) and pop(). push() adds an
data_structures/stacks/stack.py:21:25     - Unknown word (LIFO)       -- Last In, First Out (LIFO).
data_structures/stacks/stack_using_two_queues.py:72:25     - Unknown word (Popped)     -- print(f"Popped element: {popped_element
data_structures/stacks/stack_using_two_queues.py:76:13     - Unknown word (peeked)     -- peeked_element = stack.peek
data_structures/stacks/stock_span_problem.py:17:7      - Unknown word (Span)       -- # Span value of first element
data_structures/stacks/stock_span_problem.py:2:11      - Unknown word (span)       -- The stock span problem is a financial
data_structures/stacks/stock_span_problem.py:2:5       - Unknown word (stock)      -- The stock span problem is a financial
data_structures/stacks/stock_span_problem.py:2:75      - Unknown word (daily)      -- we have a series of n daily
data_structures/stacks/stock_span_problem.py:37:5      - Unknown word (utility)    -- # A utility function to print elements
data_structures/stacks/stock_span_problem.py:3:59      - Unknown word (stock's)    -- to calculate span of stock's price for all n days
data_structures/suffix_tree/example/example_usage.py:14:5      - Unknown word (Demonstrate) -- Demonstrate the usage of the SuffixTree
data_structures/suffix_tree/example/example_usage.py:16:39     - Unknown word (predefined)  -- a SuffixTree with a predefined text.
data_structures/suffix_tree/example/example_usage.py:17:7      - Unknown word (Defines)     -- - Defines a list of patterns to
data_structures/suffix_tree/example/example_usage.py:27:13     - Unknown word (monkey)      -- text = "monkey banana"
data_structures/suffix_tree/suffix_tree_node.py:26:38     - Unknown word (Indicates)  -- end_of_string (bool): Indicates if this node represents
data_structures/trie/radix_tree.py:195:21    - Unknown word (bananas)    -- words = "banana bananas bandana band apple all
data_structures/trie/radix_tree.py:195:29    - Unknown word (bandana)    -- words = "banana bananas bandana band apple all beast
data_structures/trie/radix_tree.py:195:52    - Unknown word (beast)      -- bandana band apple all beast".split()
data_structures/trie/radix_tree.py:200:27    - Unknown word (bandanas)   -- assert not root.find("bandanas")
data_structures/trie/radix_tree.py:27:24     - Unknown word (myprefix)   -- >>> RadixNode("myprefix").match("mystring")
data_structures/trie/radix_tree.py:2:3       - Unknown word (Radix)      -- A Radix Tree is a data structure
data_structures/trie/radix_tree.py:3:23      - Unknown word (whicheach)  -- trie (prefix tree) in whicheach node that is the only
data_structures/trie/trie.py:4:11      - Unknown word (impractical) -- making it impractical in practice. It however
digital_image_processing/change_brightness.py:11:46     - Unknown word (that'll)     -- Transformation/Operation that'll be performed on
digital_image_processing/change_brightness.py:11:9      - Unknown word (Fundamental) -- Fundamental Transformation/Operation
digital_image_processing/change_brightness.py:23:33     - Unknown word (lena)        -- Image.open("image_data/lena.jpg") as img:
digital_image_processing/change_brightness.py:25:9      - Unknown word (brigt)       -- brigt_img = change_brightness
digital_image_processing/convert_to_negative.py:2:32      - Unknown word (opencv)     -- mplemented an algorithm using opencv to convert a colored
digital_image_processing/dithering/burkes.py:2:16      - Unknown word (Burke's)    -- Implementation Burke's algorithm (dithering
digital_image_processing/dithering/burkes.py:2:35      - Unknown word (dithering)  -- ementation Burke's algorithm (dithering)
digital_image_processing/dithering/burkes.py:33:11     - Unknown word (lack)       -- # lack of if statements
digital_image_processing/dithering/burkes.py:50:9      - Unknown word (Formula)    -- Formula from https://en.wikipedia
digital_image_processing/dithering/burkes.py:51:12     - Unknown word (Lightness)  -- cf Lightness section, and Fig 13c
digital_image_processing/dithering/burkes.py:83:5      - Unknown word (burkes)     -- burkes_instances = [
digital_image_processing/dithering/burkes.py:9:7       - Unknown word (Burkes)     -- class Burkes:
digital_image_processing/edge_detection/canny.py:10:33     - Unknown word (sigma)      -- gaussian_kernel(k_size, sigma):
digital_image_processing/edge_detection/canny.py:10:9      - Unknown word (gaussian)   -- def gen_gaussian_kernel(k_size, sigma
digital_image_processing/edge_detection/canny.py:119:5     - Unknown word (canny)        -- def canny(image, threshold_low
digital_image_processing/edge_detection/canny.py:122:28    - Unknown word (degree)       -- get the gradient and degree by sobel_filter
digital_image_processing/edge_detection/canny.py:12:15     - Unknown word (mgrid)      -- x, y = np.mgrid[0 - center : k_size
digital_image_processing/edge_detection/canny.py:21:65     - Unknown word (grad)       -- gradient_direction, sobel_grad):
digital_image_processing/edge_detection/canny.py:23:17     - Unknown word (suppression) -- Non-maximum suppression. If the edge strength
digital_image_processing/edge_detection/canny.py:23:42     - Unknown word (strength)    -- suppression. If the edge strength of the current pixel
digital_image_processing/edge_detection/canny.py:25:45     - Unknown word (suppressed)  -- Otherwise, the value will be suppressed.
digital_image_processing/edge_detection/canny.py:5:39      - Unknown word (sobel)      -- image_processing.filters.sobel_filter import sobel
digital_image_processing/edge_detection/canny.py:78:42     - Unknown word (marked)      -- threshold value, it is marked as a strong edge pixel
digital_image_processing/edge_detection/canny.py:96:20     - Unknown word (Usually)     -- Edge tracking. Usually a weak edge pixel caused
digital_image_processing/edge_detection/canny.py:97:54     - Unknown word (unconnected) -- noise responses are unconnected. As long as there is
digital_image_processing/edge_detection/canny.py:98:63     - Unknown word (neighborhood) -- involved in its 8-connected neighborhood, that weak
digital_image_processing/filters/bilateral_filter.py:23:5      - Unknown word (cons)       -- cons = 1 / (sigma * math
digital_image_processing/filters/bilateral_filter.py:8:20      - Unknown word (Must)       -- N: Kernel size(Must be an odd number)
digital_image_processing/filters/bilateral_filter.py:8:8       - Unknown word (Kernel)     -- N: Kernel size(Must be an odd
digital_image_processing/filters/convolve.py:27:7      - Unknown word (Pads)       -- # Pads image with the edge
digital_image_processing/filters/convolve.py:45:7      - Unknown word (Laplace)    -- # Laplace operator
digital_image_processing/filters/convolve.py:48:13     - Unknown word (Laplacian)  -- imshow("Laplacian", out)
digital_image_processing/filters/convolve.py:5:36      - Unknown word (ravel)      -- import array, dot, pad, ravel, uint8, zeros
digital_image_processing/filters/gabor_filter.py:11:25     - Unknown word (kernelsize)  -- :param ksize:   The kernelsize of the convolutional
digital_image_processing/filters/gabor_filter.py:12:30     - Unknown word (deviation)   -- param sigma:   standard deviation of the gaussian bell
digital_image_processing/filters/gabor_filter.py:12:61     - Unknown word (curve)       -- of the gaussian bell curve
digital_image_processing/filters/gabor_filter.py:13:58     - Unknown word (parallel)    -- of the normal to the parallel stripes
digital_image_processing/filters/gabor_filter.py:13:67     - Unknown word (stripes)     -- normal to the parallel stripes
digital_image_processing/filters/gabor_filter.py:14:24     - Unknown word (Gabor)       -- of Gabor function.
digital_image_processing/filters/gabor_filter.py:15:39     - Unknown word (sinusoidal)  -- Wavelength of the sinusoidal component.
digital_image_processing/filters/gabor_filter.py:16:50     - Unknown word (specifies)   -- spatial aspect ratio and specifies the ellipticity
digital_image_processing/filters/gabor_filter.py:16:64     - Unknown word (ellipticity) -- ratio and specifies the ellipticity
digital_image_processing/filters/gabor_filter.py:1:25      - Unknown word (Gaborfilter) -- Implementation of the Gaborfilter
digital_image_processing/filters/gabor_filter.py:39:25     - Unknown word (radiant)     -- # degree to radiant
digital_image_processing/filters/gabor_filter.py:7:5       - Unknown word (gabor)       -- def gabor_filter_kernel(
digital_image_processing/filters/gabor_filter.py:8:41      - Unknown word (lambd)       -- sigma: int, theta: int, lambd: int, gamma: int, psi
digital_image_processing/filters/gabor_filter.py:8:5       - Unknown word (ksize)       -- ksize: int, sigma: int, theta
digital_image_processing/filters/laplacian_filter.py:1:14      - Unknown word (ojas)       -- # @Author  : ojas-wani
digital_image_processing/filters/laplacian_filter.py:1:19      - Unknown word (wani)       -- # @Author  : ojas-wani
digital_image_processing/filters/laplacian_filter.py:7:5       - Unknown word (BORDER)     -- BORDER_DEFAULT,
digital_image_processing/filters/local_binary_pattern.py:11:28     - Unknown word (boundaries) -- e. values present at boundaries.
digital_image_processing/filters/local_binary_pattern.py:29:39     - Unknown word (patternof)  -- of the local binary patternof the pixel
digital_image_processing/filters/local_binary_pattern.py:45:7      - Unknown word (Starting)   -- # Starting from the top right,
digital_image_processing/filters/local_binary_pattern.py:66:61     - Unknown word (IMREAD)     -- data/lena.jpg", cv2.IMREAD_GRAYSCALE
digital_image_processing/filters/local_binary_pattern.py:9:5       - Unknown word (Comparing)  -- Comparing local neighborhood pixel
digital_image_processing/filters/local_binary_pattern.py:9:70      - Unknown word (centre)     -- with threshold value of centre pixel.
digital_image_processing/filters/median_filter.py:15:17     - Unknown word (borders)    -- # set image borders
digital_image_processing/filters/median_filter.py:6:19      - Unknown word (divide)     -- from numpy import divide, int8, multiply, ravel
digital_image_processing/histogram_equalization/histogram_stretch.py:15:15     - Unknown word (Stretch)    -- class ConstantStretch:
digital_image_processing/histogram_equalization/histogram_stretch.py:27:9      - Unknown word (stretch)    -- def stretch(self, input_image):
digital_image_processing/histogram_equalization/histogram_stretch.py:30:23     - Unknown word (hist)       -- x, _, _ = plt.hist(self.img.ravel(), 2
digital_image_processing/histogram_equalization/histogram_stretch.py:49:14     - Unknown word (histogram)  -- def plot_histogram(self):
digital_image_processing/histogram_equalization/histogram_stretch.py:4:10      - Unknown word (Binish)     -- @author: Binish125
digital_image_processing/histogram_equalization/histogram_stretch.py:61:5      - Unknown word (stretcher)  -- stretcher = ConstantStretch()
digital_image_processing/index_calculation.py:108:18    - Unknown word (matricies)      -- self.set_matricies(red=red, green=green
digital_image_processing/index_calculation.py:10:24     - Unknown word (calculus)   -- Class implemented to calculus the index
digital_image_processing/index_calculation.py:11:12     - Unknown word (Calculation) -- class IndexCalculation:
digital_image_processing/index_calculation.py:127:63    - Unknown word (instantiated)   -- index with the values instantiated in the class
digital_image_processing/index_calculation.py:131:9     - Unknown word (funcs)          -- funcs = {
digital_image_processing/index_calculation.py:133:26    - Unknown word (ccci)           -- "CCCI": self.ccci,
digital_image_processing/index_calculation.py:136:26    - Unknown word (ndvi)           -- "NDVI": self.ndvi,
digital_image_processing/index_calculation.py:137:27    - Unknown word (bndvi)          -- "BNDVI": self.bndvi,
digital_image_processing/index_calculation.py:139:27    - Unknown word (gndvi)          -- "GNDVI": self.gndvi,
digital_image_processing/index_calculation.py:140:28    - Unknown word (gbndvi)         -- "GBNDVI": self.gbndvi,
digital_image_processing/index_calculation.py:141:28    - Unknown word (grndvi)         -- "GRNDVI": self.grndvi,
digital_image_processing/index_calculation.py:142:28    - Unknown word (rbndvi)         -- "RBNDVI": self.rbndvi,
digital_image_processing/index_calculation.py:143:27    - Unknown word (pndvi)          -- "PNDVI": self.pndvi,
digital_image_processing/index_calculation.py:144:28    - Unknown word (atsavi)         -- "ATSAVI": self.atsavi,
digital_image_processing/index_calculation.py:145:28    - Unknown word (bwdrvi)         -- "BWDRVI": self.bwdrvi,
digital_image_processing/index_calculation.py:147:34    - Unknown word (rededge)        -- CIrededge": self.ci_rededge,
digital_image_processing/index_calculation.py:149:26    - Unknown word (ctvi)           -- "CTVI": self.ctvi,
digital_image_processing/index_calculation.py:14:52     - Unknown word (vegetation)  -- consists in calculating vegetation indices, these
digital_image_processing/index_calculation.py:150:26    - Unknown word (gdvi)           -- "GDVI": self.gdvi,
digital_image_processing/index_calculation.py:152:26    - Unknown word (gemi)           -- "GEMI": self.gemi,
digital_image_processing/index_calculation.py:153:28    - Unknown word (gosavi)         -- "GOSAVI": self.gosavi,
digital_image_processing/index_calculation.py:154:27    - Unknown word (gsavi)          -- "GSAVI": self.gsavi,
digital_image_processing/index_calculation.py:157:26    - Unknown word (ipvi)           -- "IPVI": self.ipvi,
digital_image_processing/index_calculation.py:15:43     - Unknown word (agriculture) -- be used for precision agriculture for example (or remote
digital_image_processing/index_calculation.py:160:26    - Unknown word (mrvi)           -- "MRVI": self.mrvi,
digital_image_processing/index_calculation.py:161:29    - Unknown word (savi)           -- "MSAVI": self.m_savi,
digital_image_processing/index_calculation.py:162:27    - Unknown word (norm)           -- "NormG": self.norm_g,
digital_image_processing/index_calculation.py:165:27    - Unknown word (ngrdi)          -- "NGRDI": self.ngrdi,
digital_image_processing/index_calculation.py:16:9      - Unknown word (sensing)     -- sensing). There are functions
digital_image_processing/index_calculation.py:171:26    - Unknown word (ndre)           -- "NDRE": self.ndre,
digital_image_processing/index_calculation.py:182:25    - Unknown word (Resistant)       -- Atmospherically Resistant Vegetation Index 2
digital_image_processing/index_calculation.py:182:9     - Unknown word (Atmospherically) -- Atmospherically Resistant Vegetation
digital_image_processing/index_calculation.py:191:16    - Unknown word (Chlorophyll)     -- Canopy Chlorophyll Content Index
digital_image_processing/index_calculation.py:191:9     - Unknown word (Canopy)          -- Canopy Chlorophyll Content
digital_image_processing/index_calculation.py:19:7      - Unknown word (Vegetation)  -- # Vegetation index
digital_image_processing/index_calculation.py:1:11      - Unknown word (João)       -- # Author: João Gustavo A. Amorim
digital_image_processing/index_calculation.py:1:16      - Unknown word (Gustavo)    -- # Author: João Gustavo A. Amorim
digital_image_processing/index_calculation.py:1:27      - Unknown word (Amorim)     -- Author: João Gustavo A. Amorim
digital_image_processing/index_calculation.py:21:38     - Unknown word (spectral)    -- Vegetation Index (VI) is a spectral transformation of two
digital_image_processing/index_calculation.py:220:16    - Unknown word (Calibrated)      -- Index, Calibrated NDVI - CDVI
digital_image_processing/index_calculation.py:220:34    - Unknown word (CDVI)            -- Index, Calibrated NDVI - CDVI
digital_image_processing/index_calculation.py:22:21     - Unknown word (enhance)     -- designed to enhance the contribution of
digital_image_processing/index_calculation.py:23:30     - Unknown word (temporal)    -- reliable spatial and temporal inter-comparisons of
digital_image_processing/index_calculation.py:23:39     - Unknown word (inter)       -- spatial and temporal inter-comparisons of terrestrial
digital_image_processing/index_calculation.py:23:45     - Unknown word (comparisons) -- spatial and temporal inter-comparisons of terrestrial
digital_image_processing/index_calculation.py:23:60     - Unknown word (terrestrial) -- inter-comparisons of terrestrial
digital_image_processing/index_calculation.py:23:9      - Unknown word (reliable)    -- reliable spatial and temporal
digital_image_processing/index_calculation.py:24:37     - Unknown word (canopy)         -- photosynthetic activity and canopy structural variations
digital_image_processing/index_calculation.py:24:44     - Unknown word (structural)     -- activity and canopy structural variations
digital_image_processing/index_calculation.py:24:9      - Unknown word (photosynthetic) -- photosynthetic activity and canopy
digital_image_processing/index_calculation.py:27:22     - Unknown word (infrared)       -- * nir - near-infrared
digital_image_processing/index_calculation.py:291:30    - Unknown word (soil)            -- Adjusted transformed soil-adjusted VI
digital_image_processing/index_calculation.py:291:9     - Unknown word (Adjusted)        -- Adjusted transformed soil-adjusted
digital_image_processing/index_calculation.py:326:9     - Unknown word (Coloration)      -- Coloration Index
digital_image_processing/index_calculation.py:334:19    - Unknown word (Transformed)     -- Corrected Transformed Vegetation Index
digital_image_processing/index_calculation.py:334:9     - Unknown word (Corrected)       -- Corrected Transformed Vegetation
digital_image_processing/index_calculation.py:372:30    - Unknown word (Soil)            -- self.green Optimized Soil Adjusted Vegetation
digital_image_processing/index_calculation.py:410:9     - Unknown word (Infraself)       -- Infraself.red percentage vegetation
digital_image_processing/index_calculation.py:45:15     - Unknown word (abbreviation)   -- #"abbreviationOfIndexName" -- list
digital_image_processing/index_calculation.py:479:11    - Unknown word (Iself)           -- (VIself.green)
digital_image_processing/index_calculation.py:47:15     - Unknown word (ARVI)           -- #"ARVI2" --  red
digital_image_processing/index_calculation.py:487:56    - Unknown word (redness)         -- red/self.green self.redness Index
digital_image_processing/index_calculation.py:48:15     - Unknown word (CCCI)           -- #"CCCI" --  red
digital_image_processing/index_calculation.py:495:9     - Unknown word (Saturation)      -- Saturation
digital_image_processing/index_calculation.py:51:15     - Unknown word (NDVI)           -- #"NDVI" --  red
digital_image_processing/index_calculation.py:52:15     - Unknown word (BNDVI)          -- #"BNDVI" --  blue
digital_image_processing/index_calculation.py:533:3     - Unknown word (genering)        -- # genering a random matrices to
digital_image_processing/index_calculation.py:548:28    - Unknown word (instantiate)     -- set the values after instantiate the class cl, (for update
digital_image_processing/index_calculation.py:54:15     - Unknown word (GNDVI)          -- #"GNDVI" --  green
digital_image_processing/index_calculation.py:550:7     - Unknown word (Matrices)        -- cl.setMatrices(red=red, green=green
digital_image_processing/index_calculation.py:55:15     - Unknown word (GBNDVI)         -- #"GBNDVI" --  green
digital_image_processing/index_calculation.py:564:18    - Unknown word (maxprec)         -- floatmode='maxprec_equal'))
digital_image_processing/index_calculation.py:56:15     - Unknown word (GRNDVI)         -- #"GRNDVI" --  red,
digital_image_processing/index_calculation.py:57:15     - Unknown word (RBNDVI)         -- #"RBNDVI" --  red,
digital_image_processing/index_calculation.py:58:15     - Unknown word (PNDVI)          -- #"PNDVI" --  red
digital_image_processing/index_calculation.py:59:15     - Unknown word (ATSAVI)         -- #"ATSAVI" --  red,
digital_image_processing/index_calculation.py:60:15     - Unknown word (BWDRVI)         -- #"BWDRVI" --  blue
digital_image_processing/index_calculation.py:61:16     - Unknown word (Igreen)         -- #"CIgreen" --  green
digital_image_processing/index_calculation.py:62:16     - Unknown word (Irededge)       -- #"CIrededge" --  redEdge
digital_image_processing/index_calculation.py:64:15     - Unknown word (CTVI)           -- #"CTVI" --  red
digital_image_processing/index_calculation.py:65:15     - Unknown word (GDVI)           -- #"GDVI" --  green
digital_image_processing/index_calculation.py:67:15     - Unknown word (GEMI)           -- #"GEMI" --  red
digital_image_processing/index_calculation.py:68:15     - Unknown word (GOSAVI)         -- #"GOSAVI" --  green
digital_image_processing/index_calculation.py:69:15     - Unknown word (GSAVI)          -- #"GSAVI" --  green
digital_image_processing/index_calculation.py:72:15     - Unknown word (IPVI)           -- #"IPVI" --  red
digital_image_processing/index_calculation.py:75:15     - Unknown word (MRVI)           -- #"MRVI" --  red
digital_image_processing/index_calculation.py:76:15     - Unknown word (MSAVI)          -- #"MSAVI" --  red
digital_image_processing/index_calculation.py:77:15     - Unknown word (Norm)           -- #"NormG" --  red
digital_image_processing/index_calculation.py:80:15     - Unknown word (NGRDI)          -- #"NGRDI" --  red
digital_image_processing/index_calculation.py:86:15     - Unknown word (NDRE)           -- #"NDRE" --  redEdge
digital_image_processing/index_calculation.py:97:13     - Unknown word (Blue)           -- #notBlueIndex = ["ARVI2", "CCCI
digital_image_processing/morphological_operations/dilation_operation.py:42:12     - Unknown word (dilated)    -- Return dilated image
digital_image_processing/morphological_operations/dilation_operation.py:71:5      - Unknown word (structuring) -- structuring_element = np.array(
digital_image_processing/morphological_operations/erosion_operation.py:44:12     - Unknown word (eroded)     -- Return eroded image
digital_image_processing/resize/resize.py:9:18      - Unknown word (fastest)    -- Simplest and fastest version of image resizing
digital_image_processing/resize/resize.py:9:5       - Unknown word (Simplest)   -- Simplest and fastest version
digital_image_processing/rotation/rotation.py:50:5      - Unknown word (titles)     -- titles = ["Original", "Rotation
digital_image_processing/sepia.py:2:42      - Unknown word (tone)       -- algorithm using opencv to tone an image with sepia
digital_image_processing/sepia.py:2:61      - Unknown word (sepia)      -- to tone an image with sepia technique
digital_image_processing/test_digital_image_processing.py:65:15     - Unknown word (diagonals)  -- # laplace diagonals
digital_image_processing/test_digital_image_processing.py:65:7      - Unknown word (laplace)    -- # laplace diagonals
divide_and_conquer/closest_pair_of_points.py:11:11     - Unknown word (handled)    -- This case handled by forming a strip of
divide_and_conquer/closest_pair_of_points.py:4:18      - Unknown word (Divide)     -- Approach used -> Divide and conquer
divide_and_conquer/closest_pair_of_points.py:4:29      - Unknown word (conquer)    -- Approach used -> Divide and conquer
divide_and_conquer/closest_pair_of_points.py:5:36      - Unknown word (ords)       -- sorted based on Xco-ords and
divide_and_conquer/closest_pair_of_points.py:6:24      - Unknown word (separately) -- then based on Yco-ords separately.
divide_and_conquer/convex_hull.py:110:14    - Unknown word (deformed)    -- Ignoring deformed point 1. All points
divide_and_conquer/convex_hull.py:110:5     - Unknown word (Ignoring)    -- Ignoring deformed point 1. All
divide_and_conquer/convex_hull.py:137:5     - Unknown word (validates)   -- validates an input instance before
divide_and_conquer/convex_hull.py:152:81    - Unknown word (scalar)      -- data structure like a scalar
divide_and_conquer/convex_hull.py:170:17    - Unknown word (Expecting)   -- ValueError: Expecting a list of points but
divide_and_conquer/convex_hull.py:190:23    - Unknown word (perpendicular) -- Computes the sign perpendicular distance of a 2d point
divide_and_conquer/convex_hull.py:190:5     - Unknown word (Computes)    -- Computes the sign perpendicular
divide_and_conquer/convex_hull.py:193:75    - Unknown word (straight)      -- three points are on a straight line.
divide_and_conquer/convex_hull.py:195:51    - Unknown word (triangle)      -- det| is the area of triangle abc
divide_and_conquer/convex_hull.py:206:58    - Unknown word (computed)      -- segment ab c is. det is computed as
divide_and_conquer/convex_hull.py:227:19    - Unknown word (convexity)     -- definition of convexity to determine whether
divide_and_conquer/convex_hull.py:232:23    - Unknown word (definitely)    -- Runtime: O(n^3) - definitely horrible
divide_and_conquer/convex_hull.py:232:34    - Unknown word (horrible)      -- O(n^3) - definitely horrible
divide_and_conquer/convex_hull.py:297:81    - Unknown word (strategy)      -- a divide-and-conquer strategy
divide_and_conquer/convex_hull.py:298:19    - Unknown word (exploits)      -- The algorithm exploits the geometric properties
divide_and_conquer/convex_hull.py:298:71    - Unknown word (repeatedly)    -- properties of the problem by repeatedly
divide_and_conquer/convex_hull.py:299:49    - Unknown word (hulls)         -- points into smaller hulls, and finding the convex
divide_and_conquer/convex_hull.py:334:21    - Unknown word (anchors)       -- # use these two anchors to divide all the points
divide_and_conquer/convex_hull.py:337:47    - Unknown word (joining)       -- left (above) the line joining the extreme points belong
divide_and_conquer/convex_hull.py:337:59    - Unknown word (extreme)       -- the line joining the extreme points belong to the
divide_and_conquer/convex_hull.py:337:74    - Unknown word (belong)        -- joining the extreme points belong to the
divide_and_conquer/convex_hull.py:391:9     - Unknown word (candidate)     -- candidate_points = []
divide_and_conquer/convex_hull.py:409:17    - Unknown word (melkman)       -- def convex_hull_melkman(points: list[Point]
divide_and_conquer/convex_hull.py:412:69    - Unknown word (polygonal)     -- inserting points of a simple polygonal chain
divide_and_conquer/convex_hull.py:466:25    - Unknown word (lies)          -- # The point lies within the convex hull
divide_and_conquer/convex_hull.py:4:62      - Unknown word (geometrical) -- several applications in geometrical problems,
divide_and_conquer/heaps_algorithm_iterative.py:3:4       - Unknown word (minimizes)  -- It minimizes movement by generating
divide_and_conquer/inversions.py:104:51    - Unknown word (emerges)    -- inversions. The claim emerges from the
divide_and_conquer/inversions.py:14:45     - Unknown word (naive)      -- of inversions using a naive brute-force algorithm
divide_and_conquer/inversions.py:4:8       - Unknown word (inversions) -- called inversions. Counting the number
divide_and_conquer/inversions.py:5:26      - Unknown word (Among)      -- object is the important. Among other things, counting
divide_and_conquer/inversions.py:69:8      - Unknown word (inversion)  -- a, inversion_p = count_inversions
divide_and_conquer/kth_order_statistic.py:20:23     - Unknown word (sophisticated) -- We can use a more sophisticated algorithm here, such
divide_and_conquer/kth_order_statistic.py:20:75     - Unknown word (medians)       -- such as the median-of-medians
divide_and_conquer/kth_order_statistic.py:3:23      - Unknown word (trivially)  -- Recall we can do this trivially in O(nlogn) time. Sort
divide_and_conquer/kth_order_statistic.py:48:17     - Unknown word (lucky)         -- # if we get lucky, pivot might be the
divide_and_conquer/max_subarray.py:23:5      - Unknown word (Solves)     -- Solves the maximum subarray
divide_and_conquer/max_subarray.py:4:38      - Unknown word (contiguous) -- , 2, 1, -5, 4], the contiguous subarray with the maximum
divide_and_conquer/max_subarray.py:70:5      - Unknown word (summ)       -- summ: int | float = 0
divide_and_conquer/mergesort.py:97:12     - Unknown word (avoids)     -- # this avoids integer overflow in
divide_and_conquer/peak.py:2:23      - Unknown word (unimodal)   -- Finding the peak of a unimodal list using divide and
divide_and_conquer/peak.py:4:17      - Unknown word (afterwards) -- then decreasing afterwards. (for p >= 1)
divide_and_conquer/peak.py:5:4       - Unknown word (obvious)    -- An obvious solution can be performed
divide_and_conquer/peak.py:7:21      - Unknown word (Tardos)     -- (From Kleinberg and Tardos. Algorithm Design.
divide_and_conquer/peak.py:7:7       - Unknown word (Kleinberg)  -- (From Kleinberg and Tardos. Algorithm
divide_and_conquer/peak.py:8:1       - Unknown word (Addison)    -- Addison Wesley 2006: Chapter
divide_and_conquer/peak.py:8:22      - Unknown word (Chapter)    -- Addison Wesley 2006: Chapter 5 Solved Exercise 1
divide_and_conquer/peak.py:8:39      - Unknown word (Exercise)   -- 6: Chapter 5 Solved Exercise 1)
divide_and_conquer/peak.py:8:9       - Unknown word (Wesley)     -- Addison Wesley 2006: Chapter 5 Solved
divide_and_conquer/strassen_matrix_multiplication.py:116:14    - Unknown word (Unable)     -- "Unable to multiply these matrices
divide_and_conquer/strassen_matrix_multiplication.py:148:7     - Unknown word (Removing)   -- # Removing the additional zeros
divide_and_conquer/strassen_matrix_multiplication.py:36:5      - Unknown word (quadrant)   -- quadrant.
divide_and_conquer/strassen_matrix_multiplication.py:74:12     - Unknown word (strassen)   -- def actual_strassen(matrix_a: list, matrix
divide_and_conquer/strassen_matrix_multiplication.py:98:43     - Unknown word (quadrants)  -- new matrix from our 4 quadrants
docs/conf.py:3:45      - Unknown word (globalns)   -- ../pyproject.toml", globalns=globals()).name
dynamic_programming/all_construct.py:17:24     - Unknown word (purple)     -- >>> all_construct("purple",["purp","p","ur","le
dynamic_programming/all_construct.py:17:34     - Unknown word (purp)       -- construct("purple",["purp","p","ur","le","purpl
dynamic_programming/all_construct.py:17:55     - Unknown word (purpl)      -- purp","p","ur","le","purpl"])
dynamic_programming/all_construct.py:53:26     - Unknown word (jwajalapa)  -- print(all_construct("jwajalapa", ["jwa", "j", "w",
dynamic_programming/all_construct.py:53:68     - Unknown word (lapa)       -- j", "w", "a", "la", "lapa"]))
dynamic_programming/all_construct.py:54:26     - Unknown word (rajamati)   -- print(all_construct("rajamati", ["s", "raj", "amat
dynamic_programming/all_construct.py:54:59     - Unknown word (raja)       -- s", "raj", "amat", "raja", "ma", "i", "t"]))
dynamic_programming/all_construct.py:57:14     - Unknown word (hexagonosaurus) -- "hexagonosaurus",
dynamic_programming/all_construct.py:58:52     - Unknown word (auru)           -- "ag", "ago", "ru", "auru", "rus", "go", "no"
dynamic_programming/bitmask.py:20:11     - Unknown word (initially)  -- # initially all values are set to
dynamic_programming/bitmask.py:25:61     - Unknown word (persons)    -- stores the list of persons for each task
dynamic_programming/bitmask.py:32:27     - Unknown word (finalmask)  -- # if mask == self.finalmask all persons are distributed
dynamic_programming/bitmask.py:3:37      - Unknown word (questions)  -- Python implementation for questions involving task assignments
dynamic_programming/bitmask.py:3:47      - Unknown word (involving)  -- implementation for questions involving task assignments between
dynamic_programming/bitmask.py:44:57     - Unknown word (arrangement) -- don't this task in the arrangement
dynamic_programming/bitmask.py:4:37      - Unknown word (solving)    -- and DP are used for solving this.
dynamic_programming/bitmask.py:4:6       - Unknown word (Bitmasking) -- Here Bitmasking and DP are used for
dynamic_programming/catalan_numbers.py:15:21     - Unknown word (satisfies)  -- * A Catalan number satisfies the following recurrence
dynamic_programming/catalan_numbers.py:15:45     - Unknown word (recurrence) -- satisfies the following recurrence relation
dynamic_programming/catalan_numbers.py:52:7      - Unknown word (Recurrence) -- # Recurrence relation: C(i) = sum
dynamic_programming/catalan_numbers.py:75:43     - Unknown word (goodbye)    -- **** Invalid input, goodbye! ************\n")
dynamic_programming/catalan_numbers.py:7:20      - Unknown word (Dyck)       -- * - The number of Dyck words of length 2n
dynamic_programming/climbing_stairs.py:4:11      - Unknown word (stairs)     -- def climb_stairs(number_of_steps: int
dynamic_programming/climbing_stairs.py:4:5       - Unknown word (climb)      -- def climb_stairs(number_of_steps
dynamic_programming/climbing_stairs.py:6:9       - Unknown word (Cdoe)       -- LeetCdoe No.70: Climbing Stairs
dynamic_programming/climbing_stairs.py:7:46      - Unknown word (staircase)  -- climb a number_of_steps staircase where each time you
dynamic_programming/combination_sum_iv.py:29:32     - Unknown word (exponential) -- possible combination in exponential Time Complexity.
dynamic_programming/edit_distance.py:10:12     - Unknown word (permitted)    -- A = B. The permitted operations are removal
dynamic_programming/edit_distance.py:2:11      - Unknown word (Turfa)      -- Author : Turfa Auliarachman
dynamic_programming/edit_distance.py:2:17      - Unknown word (Auliarachman) -- Author : Turfa Auliarachman
dynamic_programming/edit_distance.py:46:47     - Unknown word (intention)    -- .min_dist_top_down("intention", "execution")
dynamic_programming/fast_fibonacci.py:13:5      - Unknown word (fibonacci)  -- def fibonacci(n: int) -> int:
dynamic_programming/fizz_buzz.py:10:30     - Unknown word (Itself)     -- Else Prints The Number Itself.
dynamic_programming/fizz_buzz.py:17:17     - Unknown word (Iterations) -- ValueError: Iterations must be done more than
dynamic_programming/fizz_buzz.py:4:10      - Unknown word (buzz)       -- def fizz_buzz(number: int, iterations
dynamic_programming/fizz_buzz.py:4:5       - Unknown word (fizz)       -- def fizz_buzz(number: int, iterations
dynamic_programming/fizz_buzz.py:6:7       - Unknown word (Plays)      -- | Plays FizzBuzz.
dynamic_programming/floyd_warshall.py:16:16     - Unknown word (directed)   -- Adds a directed edge from node u
dynamic_programming/floyd_warshall.py:26:15     - Unknown word (warshall)   -- def floyd_warshall(self):
dynamic_programming/floyd_warshall.py:26:9      - Unknown word (floyd)      -- def floyd_warshall(self):
dynamic_programming/floyd_warshall.py:9:14      - Unknown word (adjacency)  -- ] # adjacency matrix for weight
dynamic_programming/integer_partition.py:34:5      - Unknown word (memo)        -- memo: list[list[int]] =
dynamic_programming/integer_partition.py:4:1       - Unknown word (Subtracting) -- Subtracting 1 from each part of
dynamic_programming/integer_partition.py:5:25      - Unknown word (facts)       -- into k parts. These two facts together are used for
dynamic_programming/iterating_through_submasks.py:2:10      - Unknown word (Syed)       -- Author : Syed Faizan (3rd Year Student
dynamic_programming/iterating_through_submasks.py:2:15      - Unknown word (Faizan)     -- Author : Syed Faizan (3rd Year Student IIIT
dynamic_programming/iterating_through_submasks.py:2:32      - Unknown word (Student)    -- Syed Faizan (3rd Year Student IIIT Pune)
dynamic_programming/iterating_through_submasks.py:2:40      - Unknown word (IIIT)       -- Faizan (3rd Year Student IIIT Pune)
dynamic_programming/iterating_through_submasks.py:2:45      - Unknown word (Pune)       -- rd Year Student IIIT Pune)
dynamic_programming/iterating_through_submasks.py:3:10      - Unknown word (faizan)     -- github : faizan2700
dynamic_programming/iterating_through_submasks.py:4:17      - Unknown word (bitmask)    -- You are given a bitmask m and you want to efficiently
dynamic_programming/iterating_through_submasks.py:5:29      - Unknown word (submask)    -- submasks. The mask s is submask of m if only bits that
dynamic_programming/iterating_through_submasks.py:5:5       - Unknown word (submasks)   -- its submasks. The mask s is submask
dynamic_programming/k_means_clustering_tensorflow.py:104:17    - Unknown word (vect)           -- vect = vectors[vector_n]
dynamic_programming/k_means_clustering_tensorflow.py:11:19     - Unknown word (dimensionality) -- of vectors of dimensionality k.
dynamic_programming/k_means_clustering_tensorflow.py:123:15    - Unknown word (MAXIMIZATION)   -- ##MAXIMIZATION STEP
dynamic_programming/k_means_clustering_tensorflow.py:125:63    - Unknown word (maximize)       -- the centroids so as to maximize the
dynamic_programming/k_means_clustering_tensorflow.py:126:36    - Unknown word (minimizing)     -- overall objective of minimizing within-cluster Sum-of
dynamic_programming/k_means_clustering_tensorflow.py:129:26    - Unknown word (vects)          -- assigned_vects = [
dynamic_programming/k_means_clustering_tensorflow.py:21:31     - Unknown word (centroids)      -- Will help select random centroids from among the available
dynamic_programming/k_means_clustering_tensorflow.py:25:16     - Unknown word (COMPUTATION)    -- # GRAPH OF COMPUTATION
dynamic_programming/k_means_clustering_tensorflow.py:27:31     - Unknown word (ensures)        -- this algorithm. This ensures that as this function
dynamic_programming/k_means_clustering_tensorflow.py:28:62     - Unknown word (crowded)        -- doesn't keep getting crowded with
dynamic_programming/k_means_clustering_tensorflow.py:36:9      - Unknown word (sess)           -- sess = tf.Session()
dynamic_programming/k_means_clustering_tensorflow.py:38:11     - Unknown word (CONSTRUCTING)   -- ##CONSTRUCTING THE ELEMENTS OF COMPUTATION
dynamic_programming/k_means_clustering_tensorflow.py:65:43     - Unknown word (computes)       -- takes the input and computes a mean along the 0th
dynamic_programming/k_means_clustering_tensorflow.py:69:20     - Unknown word (computing)      -- ##Node for computing Euclidean distances
dynamic_programming/k_means_clustering_tensorflow.py:70:11     - Unknown word (Placeholders)   -- # Placeholders for input
dynamic_programming/k_means_clustering_tensorflow.py:73:9      - Unknown word (euclid)         -- euclid_dist = tf.sqrt(tf.reduce
dynamic_programming/k_means_clustering_tensorflow.py:7:33      - Unknown word (noofclusters) -- means_cluster(vectors, noofclusters):
dynamic_programming/k_means_clustering_tensorflow.py:81:11     - Unknown word (INITIALIZING)   -- ##INITIALIZING STATE VARIABLES
dynamic_programming/k_means_clustering_tensorflow.py:83:26     - Unknown word (initialization) -- ##This will help initialization of all Variables defined
dynamic_programming/k_means_clustering_tensorflow.py:92:11     - Unknown word (CLUSTERING)     -- ##CLUSTERING ITERATIONS
dynamic_programming/k_means_clustering_tensorflow.py:92:22     - Unknown word (ITERATIONS)     -- ##CLUSTERING ITERATIONS
dynamic_programming/k_means_clustering_tensorflow.py:94:39     - Unknown word (Maximization)   -- perform the Expectation-Maximization steps of K-Means clustering
dynamic_programming/k_means_clustering_tensorflow.py:94:69     - Unknown word (clustering)     -- Maximization steps of K-Means clustering
dynamic_programming/k_means_clustering_tensorflow.py:96:42     - Unknown word (Stopping)       -- instead of using a Stopping Criterion.
dynamic_programming/k_means_clustering_tensorflow.py:96:51     - Unknown word (Criterion)      -- of using a Stopping Criterion.
dynamic_programming/k_means_clustering_tensorflow.py:97:9      - Unknown word (noofiterations) -- noofiterations = 100
dynamic_programming/knapsack.py:105:17    - Unknown word (reconstructs) -- Recursively reconstructs one of the optimal subsets
dynamic_programming/knapsack.py:114:45    - Unknown word (consideration) -- index of the item under consideration
dynamic_programming/knapsack.py:12:75     - Unknown word (subproblems) -- functions. Here we solve the subproblems
dynamic_programming/knapsack.py:13:22     - Unknown word (unlike)      -- which are needed unlike the below example
dynamic_programming/knapsack.py:2:59      - Unknown word (knapsack)   -- put these items in a knapsack of
dynamic_programming/knapsack.py:61:18     - Unknown word (rise)        -- which gave rise to the optimal value
dynamic_programming/largest_divisible_subset.py:55:7      - Unknown word (Reconstruct) -- # Reconstruct the divisible subset
dynamic_programming/largest_divisible_subset.py:6:27      - Unknown word (biggest)    -- Algorithm to find the biggest subset in the given
dynamic_programming/longest_common_subsequence.py:25:52     - Unknown word (gaming)     -- subsequence("programming", "gaming")
dynamic_programming/longest_common_subsequence.py:29:49     - Unknown word (food)       -- subsequence("computer", "food")
dynamic_programming/longest_common_subsequence.py:39:53     - Unknown word (Identical)  -- subsequence("abc", "abc")  # Identical strings
dynamic_programming/longest_common_subsequence.py:45:56     - Unknown word (Interleaved) -- "abcdef", "ace")  # Interleaved subsequence
dynamic_programming/longest_common_subsequence.py:47:45     - Unknown word (ACBD)        -- subsequence("ABCD", "ACBD") # No repeated characters
dynamic_programming/longest_common_subsequence.py:58:7      - Unknown word (declaring)   -- # declaring the array for storing
dynamic_programming/longest_common_subsequence.py:86:10     - Unknown word (AGGTAB)      -- a = "AGGTAB"
dynamic_programming/longest_common_subsequence.py:87:10     - Unknown word (GXTXAYB)     -- b = "GXTXAYB"
dynamic_programming/longest_common_subsequence.py:89:24     - Unknown word (GTAB)        -- expected_subseq = "GTAB"
dynamic_programming/longest_common_substring.py:29:35     - Unknown word (Geeksfor)   -- longest_common_substring("GeeksforGeeks", "GeeksQuiz")
dynamic_programming/longest_common_substring.py:29:43     - Unknown word (Geeks)      -- common_substring("GeeksforGeeks", "GeeksQuiz")
dynamic_programming/longest_common_substring.py:29:57     - Unknown word (Quiz)       -- GeeksforGeeks", "GeeksQuiz")
dynamic_programming/longest_common_substring.py:31:35     - Unknown word (abcdxyz)    -- longest_common_substring("abcdxyz", "xyzabcd")
dynamic_programming/longest_common_substring.py:31:46     - Unknown word (xyzabcd)    -- substring("abcdxyz", "xyzabcd")
dynamic_programming/longest_common_substring.py:33:35     - Unknown word (zxabcdezy)  -- longest_common_substring("zxabcdezy", "yzabcdezx")
dynamic_programming/longest_common_substring.py:33:48     - Unknown word (yzabcdezx)  -- substring("zxabcdezy", "yzabcdezx")
dynamic_programming/longest_common_substring.py:34:6      - Unknown word (abcdez)     -- 'abcdez'
dynamic_programming/longest_common_substring.py:8:22      - Unknown word (xabded)     -- ``abcdef`` and ``xabded`` have two longest common
dynamic_programming/longest_common_substring.py:9:5       - Unknown word (Therefore)  -- Therefore, algorithm should return
dynamic_programming/longest_increasing_subsequence.py:2:11      - Unknown word (Mehdi)      -- Author : Mehdi ALAOUI
dynamic_programming/longest_increasing_subsequence.py:2:17      - Unknown word (ALAOUI)     -- Author : Mehdi ALAOUI
dynamic_programming/longest_increasing_subsequence_iterative.py:2:11      - Unknown word (Sanjay)     -- Author : Sanjay Muthu <https://github
dynamic_programming/longest_increasing_subsequence_iterative.py:2:18      - Unknown word (Muthu)      -- Author : Sanjay Muthu <https://github.com
dynamic_programming/longest_increasing_subsequence_o_nlogn.py:2:11      - Unknown word (Aravind)    -- # Author: Aravind Kashyap
dynamic_programming/longest_increasing_subsequence_o_nlogn.py:2:19      - Unknown word (Kashyap)    -- # Author: Aravind Kashyap
dynamic_programming/longest_increasing_subsequence_o_nlogn.py:4:18      - Unknown word (programme)  -- # comments: This programme outputs the Longest
dynamic_programming/longest_palindromic_subsequence.py:16:42     - Unknown word (bbabcbcab)   -- palindromic_subsequence("bbabcbcab")
dynamic_programming/longest_palindromic_subsequence.py:2:16      - Unknown word (Kittad)     -- author: Sanket Kittad
dynamic_programming/longest_palindromic_subsequence.py:2:9       - Unknown word (Sanket)     -- author: Sanket Kittad
dynamic_programming/longest_palindromic_subsequence.py:3:36      - Unknown word (palindromic) -- s, find the longest palindromic subsequence's length
dynamic_programming/longest_palindromic_subsequence.py:4:13      - Unknown word (bbbab)       -- Input: s = "bbbab"
dynamic_programming/matrix_chain_multiplication.py:11:24     - Unknown word (impact)          -- . Calculate overall impact of macroeconomic decisions
dynamic_programming/matrix_chain_multiplication.py:11:34     - Unknown word (macroeconomic)   -- Calculate overall impact of macroeconomic decisions as economic
dynamic_programming/matrix_chain_multiplication.py:11:48     - Unknown word (decisions)       -- impact of macroeconomic decisions as economic equations
dynamic_programming/matrix_chain_multiplication.py:11:61     - Unknown word (economic)        -- macroeconomic decisions as economic equations involve a
dynamic_programming/matrix_chain_multiplication.py:11:80     - Unknown word (involve)         -- as economic equations involve a
dynamic_programming/matrix_chain_multiplication.py:131:5     - Unknown word (elapsed)         -- def elapsed_time(msg: str) -> Iterator
dynamic_programming/matrix_chain_multiplication.py:13:11     - Unknown word (driving)         -- 4. Self-driving car navigation can be
dynamic_programming/matrix_chain_multiplication.py:13:23     - Unknown word (navigation)      -- 4. Self-driving car navigation can be made more accurate
dynamic_programming/matrix_chain_multiplication.py:13:51     - Unknown word (accurate)        -- navigation can be made more accurate as matrix multiplication
dynamic_programming/matrix_chain_multiplication.py:14:55     - Unknown word (obstacles)       -- position and orientation of obstacles in short time.
dynamic_programming/matrix_chain_multiplication.py:14:6      - Unknown word (accurately)      -- accurately determine position and
dynamic_programming/matrix_chain_multiplication.py:22:4      - Unknown word (suppose)         -- So suppose ``arr = [40, 20, 30
dynamic_programming/matrix_chain_multiplication.py:25:48     - Unknown word (denoting)        -- returns an integer denoting minimum number of
dynamic_programming/matrix_chain_multiplication.py:29:17     - Unknown word (decide)          -- We only need to decide the order in which to
dynamic_programming/matrix_chain_multiplication.py:2:30      - Unknown word (multiplications) -- the minimum number of multiplications needed to multiply chain
dynamic_programming/matrix_chain_multiplication.py:34:43     - Unknown word (associative)     -- multiplication is not associative ie ``(M1*M2)*M3 != M
dynamic_programming/matrix_chain_multiplication.py:56:32     - Unknown word (multiplcations)  -- the minimum number of multiplcations required to multiply
dynamic_programming/matrix_chain_multiplication.py:81:7      - Unknown word (initialising)    -- # initialising 2D dp matrix
dynamic_programming/matrix_chain_multiplication.py:9:31      - Unknown word (equations)       -- Solve complex polynomial equations in the field of algebra
dynamic_programming/matrix_chain_order.py:32:11     - Unknown word (optiomal)   -- def print_optiomal_solution(optimal_solution
dynamic_programming/max_non_adjacent_sum.py:22:9      - Unknown word (excluding)  -- max_excluding = 0
dynamic_programming/max_subarray_sum.py:17:39     - Unknown word (subarrays)  -- float], allow_empty_subarrays: bool = False
dynamic_programming/max_subarray_sum.py:7:1       - Unknown word (Kadane's)   -- Kadane's algorithm is a simple
dynamic_programming/min_distance_up_bottom.py:22:33     - Unknown word (zooicoarchaeologist) -- distance_up_bottom("zooicoarchaeologist", "zoologist")
dynamic_programming/min_distance_up_bottom.py:22:56     - Unknown word (zoologist)           -- zooicoarchaeologist", "zoologist")
dynamic_programming/min_distance_up_bottom.py:30:31     - Unknown word (overflows)           -- if first word index overflows - delete all from the
dynamic_programming/min_distance_up_bottom.py:7:1       - Unknown word (Levinstein) -- Levinstein distance
dynamic_programming/minimum_coin_change.py:2:49      - Unknown word (quantities) -- available in infinite quantities
dynamic_programming/minimum_coin_change.py:35:7      - Unknown word (picked)     -- # picked coin
dynamic_programming/minimum_cost_path.py:26:7      - Unknown word (updating)   -- # updating the path cost for current
dynamic_programming/minimum_cost_path.py:8:27      - Unknown word (traced)     -- Find the minimum cost traced by all possible paths
dynamic_programming/minimum_squares_to_represent_a_number.py:34:5      - Unknown word (answers)    -- answers = [-1] * (number +
dynamic_programming/minimum_steps_to_one.py:32:42     - Unknown word (tabulation) -- 1 implemented using tabulation.
dynamic_programming/minimum_tickets_cost.py:6:39      - Unknown word (travel)     -- days when you need to travel. Each day is integer
dynamic_programming/minimum_tickets_cost.py:7:21      - Unknown word (tickets)    -- You are able to use tickets for 1 day, 7 days and
dynamic_programming/minimum_tickets_cost.py:8:6       - Unknown word (ticket)     -- Each ticket has a cost.
dynamic_programming/optimal_binary_search_tree.py:100:5     - Unknown word (freqs)          -- freqs = [nodes[i].freq for
dynamic_programming/optimal_binary_search_tree.py:108:53    - Unknown word (constructing)   -- will be used later for constructing binary search tree
dynamic_programming/optimal_binary_search_tree.py:118:29    - Unknown word (optimization)   -- # Apply Knuth's optimization
dynamic_programming/optimal_binary_search_tree.py:13:46     - Unknown word (characteristic) -- nodes in the BST. The characteristic of low-cost
dynamic_programming/optimal_binary_search_tree.py:14:11     - Unknown word (having)         -- # BSTs is having a faster overall search
dynamic_programming/optimal_binary_search_tree.py:3:65      - Unknown word (abbreviated) -- binary search tree (abbreviated BST)
dynamic_programming/optimal_binary_search_tree.py:4:47      - Unknown word (delivers)    -- programming algorithm that delivers O(n^2) performance.
dynamic_programming/optimal_binary_search_tree.py:72:22     - Unknown word (CLRS)           -- Implemented from CLRS (Introduction to Algorithms
dynamic_programming/optimal_binary_search_tree.py:72:28     - Unknown word (Introduction)   -- Implemented from CLRS (Introduction to Algorithms) book
dynamic_programming/optimal_binary_search_tree.py:93:55     - Unknown word (sorts)          -- first, the code below sorts the keys in
dynamic_programming/optimal_binary_search_tree.py:94:28     - Unknown word (rearrange)      -- increasing order and rearrange its frequencies accordingly
dynamic_programming/palindrome_partitioning.py:20:34     - Unknown word (ababbbabbababa) -- minimum_partitions("ababbbabbababa")
dynamic_programming/palindrome_partitioning.py:4:18      - Unknown word (cuts)       -- Find the minimum cuts needed for a palindrome
dynamic_programming/regex_match.py:6:42      - Unknown word (preceding)  -- zero or more of the preceding element.
dynamic_programming/rod_cutting.py:16:66     - Unknown word (benefit)    -- naively without using the benefit of dynamic
dynamic_programming/rod_cutting.py:184:5     - Unknown word (Throws)      -- Throws ``ValueError``:
dynamic_programming/rod_cutting.py:2:54      - Unknown word (cutting)    -- implementations for the rod-cutting problem:
dynamic_programming/rod_cutting.py:44:6      - Unknown word (enforce)    -- _enforce_args(n, prices)
dynamic_programming/rod_cutting.py:47:9      - Unknown word (revue)      -- max_revue = float("-inf")
dynamic_programming/rod_cutting.py:6:72      - Unknown word (revenue)    -- the maximum possible revenue
dynamic_programming/rod_cutting.py:72:11     - Unknown word (convenience) -- For convenience and because Python's
dynamic_programming/rod_cutting.py:73:21     - Unknown word (accommodate) -- = n + 1``, to accommodate for the revenue obtainable
dynamic_programming/rod_cutting.py:7:1       - Unknown word (obtainable) -- obtainable from a rod of length
dynamic_programming/rod_cutting.py:7:55      - Unknown word (prices)     -- n`` given a list of prices for each integral piece
dynamic_programming/rod_cutting.py:8:77      - Unknown word (selling)    -- cutting the rod and selling the
dynamic_programming/rod_cutting.py:9:1       - Unknown word (pieces)     -- pieces separately or not cutting
dynamic_programming/smith_waterman.py:132:29    - Unknown word (scoring)      -- Starts from the highest scoring cell in the matrix and
dynamic_programming/smith_waterman.py:132:5     - Unknown word (Starts)       -- Starts from the highest scoring
dynamic_programming/smith_waterman.py:189:14    - Unknown word (HEAGAWGHEE)   -- query = "HEAGAWGHEE"
dynamic_programming/smith_waterman.py:190:16    - Unknown word (PAWHEAE)      -- subject = "PAWHEAE"
dynamic_programming/smith_waterman.py:39:11     - Unknown word (waterman)     -- def smith_waterman(
dynamic_programming/smith_waterman.py:4:1       - Unknown word (alignment)  -- alignment. It is particularly
dynamic_programming/smith_waterman.py:4:18      - Unknown word (particularly) -- alignment. It is particularly useful for finding similariti
dynamic_programming/smith_waterman.py:4:50      - Unknown word (similarities) -- rticularly useful for finding similarities between two sequences
dynamic_programming/smith_waterman.py:50:25     - Unknown word (ACAC)         -- >>> smith_waterman('ACAC', 'CA')
dynamic_programming/smith_waterman.py:52:25     - Unknown word (acac)         -- >>> smith_waterman('acac', 'ca')
dynamic_programming/smith_waterman.py:5:16      - Unknown word (protein)      -- such as DNA or protein sequences. In this implementa
dynamic_programming/smith_waterman.py:5:59      - Unknown word (gaps)         -- this implementation, gaps are penalized
dynamic_programming/smith_waterman.py:5:68      - Unknown word (penalized)    -- implementation, gaps are penalized
dynamic_programming/smith_waterman.py:6:76      - Unknown word (introduced)   -- amount for each gap introduced
dynamic_programming/smith_waterman.py:8:20      - Unknown word (penalty)      -- supports other gap penalty methods as well.
dynamic_programming/smith_waterman.py:95:32     - Unknown word (AGTCT)        -- smith_waterman('AGT', 'AGTCT')
dynamic_programming/sum_of_subset.py:8:22      - Unknown word (says)       -- # a subset value says 1 if that subset sum
dynamic_programming/trapped_water.py:16:23     - Unknown word (heights)    -- def trapped_rainwater(heights: tuple[int, ...]) -
dynamic_programming/trapped_water.py:20:45     - Unknown word (determining) -- programming approach, determining the maximum height of
dynamic_programming/trapped_water.py:2:57      - Unknown word (elevation)  -- integers representing an elevation map where the width
dynamic_programming/trapped_water.py:3:52      - Unknown word (rainwater)  -- calculates how much rainwater can be trapped.
dynamic_programming/trapped_water.py:3:69      - Unknown word (trapped)    -- much rainwater can be trapped.
dynamic_programming/trapped_water.py:9:36      - Unknown word (bars)       -- the maximum height of bars on the left and right
dynamic_programming/tribonacci.py:4:5       - Unknown word (tribonacci) -- def tribonacci(num: int) -> list[int
dynamic_programming/viterbi.py:127:7     - Unknown word (Fills)         -- # Fills the data structure with
dynamic_programming/viterbi.py:128:17    - Unknown word (transitions)   -- # different transitions and pointers to previous
dynamic_programming/viterbi.py:19:36     - Unknown word (cold)          -- observations = ["normal", "cold", "dizzy"]
dynamic_programming/viterbi.py:19:44     - Unknown word (dizzy)         -- ["normal", "cold", "dizzy"]
dynamic_programming/viterbi.py:20:20     - Unknown word (Healthy)       -- >>> states = ["Healthy", "Fever"]
dynamic_programming/viterbi.py:20:31     - Unknown word (Fever)         -- states = ["Healthy", "Fever"]
dynamic_programming/viterbi.py:35:17     - Unknown word (There's)       -- ValueError: There's an empty parameter
dynamic_programming/viterbi.py:4:5       - Unknown word (viterbi)    -- def viterbi(
dynamic_programming/viterbi.py:7:13      - Unknown word (probabilities) -- initial_probabilities: dict,
dynamic_programming/viterbi.py:9:5       - Unknown word (emission)      -- emission_probabilities: dict
dynamic_programming/wildcard_matching.py:10:21     - Unknown word (cover)      -- The matching should cover the entire input string
dynamic_programming/wildcard_matching.py:2:11      - Unknown word (ilyas)      -- Author : ilyas dahhou
dynamic_programming/wildcard_matching.py:2:17      - Unknown word (dahhou)     -- Author : ilyas dahhou
dynamic_programming/wildcard_matching.py:41:19     - Unknown word (baaabab)    -- >>> is_match('baaabab','*****ba*****ba')
dynamic_programming/word_break.py:13:65     - Unknown word (scanning)   -- It will be useful for scanning
dynamic_programming/word_break.py:3:11      - Unknown word (December)   -- Date : December 12, 2022
dynamic_programming/word_break.py:68:10     - Unknown word (keeper)     -- word_keeper_key = "WORD_KEEPER"
dynamic_programming/word_break.py:68:29     - Unknown word (KEEPER)     -- word_keeper_key = "WORD_KEEPER"
dynamic_programming/word_break.py:84:12     - Unknown word (breakable)  -- def is_breakable(index: int) -> bool
electronics/apparent_power.py:5:5       - Unknown word (apparent)   -- def apparent_power(
electronics/apparent_power.py:6:5       - Unknown word (voltage)    -- voltage: float, current: float
electronics/builtin_voltage.py:10:5      - Unknown word (acceptor)      -- acceptor_conc: float,  # acceptor
electronics/builtin_voltage.py:11:5      - Unknown word (intrinsic)     -- intrinsic_conc: float,  # intrinsic
electronics/builtin_voltage.py:14:61     - Unknown word (junction)      -- Builtin Voltage of a pn junction diode.
electronics/builtin_voltage.py:14:70     - Unknown word (diode)         -- Voltage of a pn junction diode.
electronics/builtin_voltage.py:22:17     - Unknown word (Donor)         -- ValueError: Donor concentration should
electronics/builtin_voltage.py:26:17     - Unknown word (Acceptor)      -- ValueError: Acceptor concentration should
electronics/builtin_voltage.py:30:17     - Unknown word (Intrinsic)     -- ValueError: Intrinsic concentration should
electronics/builtin_voltage.py:3:29      - Unknown word (Boltzmann)  -- scipy.constants import Boltzmann, physical_constants
electronics/builtin_voltage.py:3:40      - Unknown word (physical)   -- constants import Boltzmann, physical_constants
electronics/builtin_voltage.py:5:12      - Unknown word (TEMPERATURE) -- T = 300  # TEMPERATURE (unit = K)
electronics/builtin_voltage.py:60:35     - Unknown word (electron)      -- physical_constants["electron volt"][0]
electronics/builtin_voltage.py:60:44     - Unknown word (volt)          -- constants["electron volt"][0]
electronics/builtin_voltage.py:9:11      - Unknown word (conc)        -- donor_conc: float,  # donor concentratio
electronics/builtin_voltage.py:9:33      - Unknown word (concentration) -- conc: float,  # donor concentration
electronics/builtin_voltage.py:9:5       - Unknown word (donor)       -- donor_conc: float,  # donor
electronics/capacitor_equivalence.py:15:17     - Unknown word (Capacitor)  -- ValueError: Capacitor at index 2 has a negative
electronics/capacitor_equivalence.py:6:24      - Unknown word (capacitors) -- def capacitor_parallel(capacitors: list[float]) -> float
electronics/capacitor_equivalence.py:6:5       - Unknown word (capacitor)  -- def capacitor_parallel(capacitors
electronics/capacitor_equivalence.py:9:30      - Unknown word (resistance) -- Calculate the equivalent resistance for any number of capacitors
electronics/carrier_concentration.py:10:5      - Unknown word (hole)       -- hole_conc: float,
electronics/carrier_concentration.py:15:8      - Unknown word (Electron)   -- 1. Electron Concentration
electronics/carrier_concentration.py:16:8      - Unknown word (Hole)       -- 2, Hole Concentration
electronics/carrier_concentration.py:33:64     - Unknown word (semiconductor) -- cannot be negative in a semiconductor
electronics/charging_capacitor.py:10:30     - Unknown word (charged)    -- the capacitor is being charged, the voltage is in exponentia
electronics/charging_capacitor.py:12:13     - Unknown word (ohms)       -- 'resistance(ohms) * capacitance(farads
electronics/charging_capacitor.py:12:21     - Unknown word (capacitance) -- 'resistance(ohms) * capacitance(farads)' is called RC
electronics/charging_capacitor.py:12:33     - Unknown word (farads)      -- ohms) * capacitance(farads)' is called RC-timeconstant
electronics/charging_capacitor.py:14:19     - Unknown word (initiation)  -- time 't' from the initiation of charging a capacitor
electronics/charging_capacitor.py:14:33     - Unknown word (charging)    -- from the initiation of charging a capacitor with the
electronics/charging_capacitor.py:15:47     - Unknown word (discharging) -- Both at charging and discharging of a capacitor.
electronics/charging_capacitor.py:1:16      - Unknown word (ARRL)       -- # source - The ARRL Handbook for Radio Communicat
electronics/charging_capacitor.py:22:42     - Unknown word (volts)       -- float, # voltage in volts.
electronics/charging_capacitor.py:28:52     - Unknown word (initiating)  -- any nth second after initiating its charging.
electronics/charging_capacitor.py:52:17     - Unknown word (Resistance)  -- ValueError: Resistance must be positive.
electronics/charging_capacitor.py:57:17     - Unknown word (Capacitance) -- ValueError: Capacitance must be positive.
electronics/charging_capacitor.py:8:31      - Unknown word (resistor)   -- general speed but when a resistor is connected in the
electronics/charging_capacitor.py:9:32      - Unknown word (charges)    -- capacitor then the capacitor charges slowly means it will
electronics/charging_capacitor.py:9:40      - Unknown word (slowly)     -- the capacitor charges slowly means it will take more
electronics/charging_capacitor.py:9:81      - Unknown word (usual)      -- take more time than usual.
electronics/charging_inductor.py:10:6      - Unknown word (inductor)      -- When inductor is connected to 'DC
electronics/charging_inductor.py:11:1      - Unknown word (wire)          -- wire because it's real effect
electronics/charging_inductor.py:15:16     - Unknown word (finite)        -- from zero to a finite value causes a sudden
electronics/charging_inductor.py:15:29     - Unknown word (causes)        -- zero to a finite value causes a sudden voltage to
electronics/charging_inductor.py:15:38     - Unknown word (sudden)        -- finite value causes a sudden voltage to induced in
electronics/charging_inductor.py:15:56     - Unknown word (induced)       -- a sudden voltage to induced in inductor which
electronics/charging_inductor.py:16:1      - Unknown word (opposes)       -- opposes the current. which results
electronics/charging_inductor.py:17:1      - Unknown word (cease)         -- cease if there is no further
electronics/charging_inductor.py:18:6      - Unknown word (rising)        -- stop rising.
electronics/charging_inductor.py:20:21     - Unknown word (Inductance)    -- 'Resistance(ohms) / Inductance(henrys)' is known as
electronics/charging_inductor.py:20:32     - Unknown word (henrys)        -- Resistance(ohms) / Inductance(henrys)' is known as RL-timeconstant
electronics/charging_inductor.py:35:5      - Unknown word (inductance)    -- inductance: float,  # inductance
electronics/charging_inductor.py:8:23      - Unknown word (magnetic)   -- stores energy in its 'magnetic field' or 'magnetostatic
electronics/charging_inductor.py:8:43      - Unknown word (magnetostatic) -- magnetic field' or 'magnetostatic field'.
electronics/circular_convolution.py:5:22      - Unknown word (periodic)   -- is a special case of periodic convolution, which is
electronics/circular_convolution.py:6:47      - Unknown word (Periodic)   -- have the same period. Periodic convolution arises,
electronics/circular_convolution.py:6:68      - Unknown word (arises)     -- Periodic convolution arises,
electronics/circular_convolution.py:7:36      - Unknown word (discrete)   -- in the context of the discrete-time Fourier transform
electronics/circular_convolution.py:7:69      - Unknown word (DTFT)       -- time Fourier transform (DTFT).
electronics/circular_convolution.py:91:37     - Unknown word (transpose)  -- signal = np.matmul(np.transpose(matrix), np.transpose
electronics/circular_convolution.py:9:20      - Unknown word (DTFTs)      -- convolution of the DTFTs of the individual sequences
electronics/coulombs_law.py:12:11     - Unknown word (Coulomb's)  -- Apply Coulomb's Law on any three given
electronics/coulombs_law.py:16:35     - Unknown word (magnitude)  -- Law states that the magnitude of the electrostatic
electronics/coulombs_law.py:16:52     - Unknown word (electrostatic) -- the magnitude of the electrostatic force of
electronics/coulombs_law.py:17:19     - Unknown word (repulsion)     -- attraction or repulsion between two point charges
electronics/coulombs_law.py:17:67     - Unknown word (proportional)  -- charges is directly proportional
electronics/coulombs_law.py:18:27     - Unknown word (magnitudes)    -- to the product of the magnitudes of charges and inversely
electronics/coulombs_law.py:18:53     - Unknown word (inversely)     -- magnitudes of charges and inversely proportional to
electronics/coulombs_law.py:23:21     - Unknown word (Premier)       -- Coulomb (1785) "Premier mémoire sur l'électricit
electronics/coulombs_law.py:23:29     - Unknown word (mémoire)       -- Coulomb (1785) "Premier mémoire sur l'électricité et
electronics/coulombs_law.py:23:41     - Unknown word (l'électricité) -- Premier mémoire sur l'électricité et le magnétisme,"
electronics/coulombs_law.py:23:5      - Unknown word (Coulomb)       -- Coulomb (1785) "Premier mémoire
electronics/coulombs_law.py:23:61     - Unknown word (magnétisme)    -- l'électricité et le magnétisme,"
electronics/coulombs_law.py:24:17     - Unknown word (l'Académie)    -- Histoire de l'Académie Royale des Sciences
electronics/coulombs_law.py:24:28     - Unknown word (Royale)        -- Histoire de l'Académie Royale des Sciences, pp. 5
electronics/coulombs_law.py:24:5      - Unknown word (Histoire)      -- Histoire de l'Académie Royale
electronics/coulombs_law.py:5:1       - Unknown word (COULOMBS)   -- COULOMBS_CONSTANT = 8.988e9
electronics/coulombs_law.py:79:23     - Unknown word (Exactly)       -- raise ValueError("Exactly one argument must be
electronics/coulombs_law.py:8:5       - Unknown word (couloumbs)  -- def couloumbs_law(
electronics/electric_conductivity.py:15:17     - Unknown word (Mobility)     -- 3. Electron Mobility
electronics/electric_conductivity.py:3:1       - Unknown word (ELECTRON)   -- ELECTRON_CHARGE = 1.6021e-19
electronics/electric_conductivity.py:3:10      - Unknown word (CHARGE)     -- ELECTRON_CHARGE = 1.6021e-19  # units
electronics/electric_conductivity.py:6:14      - Unknown word (conductivity) -- def electric_conductivity(
electronics/electric_conductivity.py:9:5       - Unknown word (mobility)     -- mobility: float,
electronics/electric_power.py:15:26     - Unknown word (electrical)  -- fundamental value of electrical system.
electronics/electric_power.py:15:5      - Unknown word (fundamental) -- fundamental value of electrical
electronics/electrical_impedance.py:13:24     - Unknown word (reactance)   -- resistance: float, reactance: float, impedance: float
electronics/electrical_impedance.py:1:15      - Unknown word (impedance)  -- """Electrical impedance is the measure of the
electronics/electrical_impedance.py:1:47      - Unknown word (opposition) -- is the measure of the opposition that a
electronics/electrical_impedance.py:2:9       - Unknown word (presents)   -- circuit presents to a current when a
electronics/electrical_impedance.py:3:48      - Unknown word (alternating) -- concept of resistance to alternating current (AC) circuits
electronics/electrical_impedance.py:3:73      - Unknown word (circuits)    -- alternating current (AC) circuits.
electronics/ic_555_timer.py:16:36     - Unknown word (Microfarads) -- is the capacitance in Microfarads.
electronics/ic_555_timer.py:19:7      - Unknown word (Duty)        -- | Duty Cycle = (R1 + R2) /
electronics/ic_555_timer.py:4:36      - Unknown word (duty)       -- the frequency and/or duty cycle of an astable
electronics/ic_555_timer.py:4:53      - Unknown word (astable)    -- or duty cycle of an astable 555 timer.
electronics/ic_555_timer.py:7:55      - Unknown word (resistances) -- value of the external resistances (in ohms)
electronics/ic_555_timer.py:8:25      - Unknown word (Microfarad)  -- and capacitance (in Microfarad), and calculates the
electronics/ind_reactance.py:11:15     - Unknown word (inductive)  -- Calculate inductive reactance, frequency
electronics/ind_reactance.py:16:38     - Unknown word (Henries)    -- float with units in Henries
electronics/ind_reactance.py:35:17     - Unknown word (Inductive)  -- ValueError: Inductive reactance cannot be
electronics/resistor_color_code.py:10:15     - Unknown word (tolerance)   -- value and tolerance, as long as you understand
electronics/resistor_color_code.py:11:20     - Unknown word (arranged)    -- the colors are arranged is very important, and
electronics/resistor_color_code.py:14:26     - Unknown word (resistors)   -- The color coding for resistors is an international
electronics/resistor_color_code.py:169:25    - Unknown word (Ivory)       -- >>> get_multiplier('Ivory')
electronics/resistor_color_code.py:17:47     - Unknown word (varies)      -- present in a resistor varies from three to six. These
electronics/resistor_color_code.py:189:24    - Unknown word (Indigo)      -- >>> get_tolerance('Indigo')
electronics/resistor_color_code.py:18:17     - Unknown word (figures)     -- significant figures, multiplier, tolerance
electronics/resistor_color_code.py:18:26     - Unknown word (multiplier)  -- significant figures, multiplier, tolerance, reliability
electronics/resistor_color_code.py:18:49     - Unknown word (reliability) -- multiplier, tolerance, reliability, and temperature coefficient
electronics/resistor_color_code.py:18:5      - Unknown word (significant) -- significant figures, multiplier
electronics/resistor_color_code.py:209:38    - Unknown word (Cyan)        -- temperature_coeffecient('Cyan')
electronics/resistor_color_code.py:225:21    - Unknown word (belonging)   -- number of bands belonging to that type in the
electronics/resistor_color_code.py:25:5      - Unknown word (Significant) -- Significant figures - The number
electronics/resistor_color_code.py:28:37     - Unknown word (Orange)      -- Brown = 1, Red = 2, Orange = 3, Yellow = 4, Green
electronics/resistor_color_code.py:28:49     - Unknown word (Yellow)      -- Red = 2, Orange = 3, Yellow = 4, Green = 5, Blue
electronics/resistor_color_code.py:29:5      - Unknown word (Violet)      -- Violet = 7, Grey = 8, White
electronics/resistor_color_code.py:2:9       - Unknown word (Calculating) -- Title : Calculating the resistance of a
electronics/resistor_color_code.py:31:5      - Unknown word (Multiplier)  -- Multiplier - There will be one
electronics/resistor_color_code.py:328:51    - Unknown word (Lime)        -- , ["Violet","Blue","Lime","Grey"])
electronics/resistor_color_code.py:35:74     - Unknown word (Silver)      -- 10^9, Gold = 10^-1, Silver = 10^-2)
electronics/resistor_color_code.py:361:9     - Unknown word (resisitance) -- resisitance = significant_digits
electronics/resistor_color_code.py:39:5      - Unknown word (Tolerance)   -- Tolerance - The tolerance band
electronics/resistor_color_code.py:44:20     - Unknown word (mentioned)   -- If no color is mentioned then by default tolerance
electronics/resistor_color_code.py:47:17     - Unknown word (Coeffecient) -- Temperature Coeffecient - Indicates the change
electronics/resistor_color_code.py:48:19     - Unknown word (ambient)     -- a function of ambient temperature in terms
electronics/resistor_color_code.py:50:51     - Unknown word (coeffecient) -- associated with Temperature coeffecient -
electronics/resistor_color_code.py:5:15      - Unknown word (resist)      -- Resistors resist the flow of electrical
electronics/resistor_color_code.py:5:5       - Unknown word (Resistors)   -- Resistors resist the flow of electrical
electronics/resistor_color_code.py:5:79      - Unknown word (tells)       -- one has a value that tells how
electronics/resistor_color_code.py:6:17      - Unknown word (resists)     -- strongly it resists current flow.This value
electronics/resistor_color_code.py:6:5       - Unknown word (strongly)    -- strongly it resists current flow
electronics/resistor_color_code.py:6:68      - Unknown word (often)       -- value's unit is the ohm, often noted with the
electronics/resistor_color_code.py:6:74      - Unknown word (noted)       -- unit is the ohm, often noted with the
electronics/resistor_color_code.py:7:18      - Unknown word (omega)       -- Greek letter omega: Ω.
electronics/resistor_color_code.py:7:5       - Unknown word (Greek)       -- Greek letter omega: Ω.
electronics/resonant_frequency.py:19:43     - Unknown word (capacitnace) -- value of inductance and capacitnace.
electronics/resonant_frequency.py:3:33      - Unknown word (resonant)   -- circuit, also called a resonant circuit, tank circuit
electronics/resonant_frequency.py:3:51      - Unknown word (tank)       -- a resonant circuit, tank circuit, or tuned circuit
electronics/resonant_frequency.py:3:68      - Unknown word (tuned)      -- circuit, tank circuit, or tuned circuit,
electronics/resonant_frequency.py:6:38      - Unknown word (resonator)  -- act as an electrical resonator, an electrical analogue
electronics/resonant_frequency.py:6:63      - Unknown word (analogue)   -- resonator, an electrical analogue of a
electronics/resonant_frequency.py:7:29      - Unknown word (oscillating) -- fork, storing energy oscillating at the circuit's resonant
electronics/wheatstone_bridge.py:5:5       - Unknown word (wheatstone) -- def wheatstone_solver(
file_transfer/receive_file.py:14:16     - Unknown word (Receiving)  -- print("Receiving data...")
file_transfer/receive_file.py:21:12     - Unknown word (Successfully) -- print("Successfully received the file")
file_transfer/send_file.py:13:39     - Unknown word (Establish)  -- addr = sock.accept()  # Establish connection with client
file_transfer/tests/test_send_file.py:18:13     - Unknown word (ensurance)  -- # ===== ensurance =====
financial/README.md:3:136     - Unknown word (raised)     -- annual interest rate raised to the number of compound
financial/README.md:3:74      - Unknown word (initial)    -- calculated by multiplying the initial principal amount by
financial/README.md:3:92      - Unknown word (amount)     -- the initial principal amount by one plus the annual
financial/README.md:4:143     - Unknown word (lent)       -- that was borrowed or lent. " [Simple Interest
financial/README.md:4:45      - Unknown word (received)   -- Simple interest paid or received over a certain period
financial/equated_monthly_installments.py:11:13     - Unknown word (monthly)      -- def equated_monthly_installments(
financial/equated_monthly_installments.py:11:21     - Unknown word (installments) -- def equated_monthly_installments(
financial/equated_monthly_installments.py:11:5      - Unknown word (equated)      -- def equated_monthly_installments
financial/equated_monthly_installments.py:2:26      - Unknown word (amortization) -- Program to calculate the amortization amount per month, given
financial/equated_monthly_installments.py:3:13      - Unknown word (borrowed)     -- - Principal borrowed
financial/equated_monthly_installments.py:44:7      - Unknown word (Yearly)       -- # Yearly rate is divided by
financial/equated_monthly_installments.py:4:11      - Unknown word (interest)     -- - Rate of interest per annum
financial/equated_monthly_installments.py:4:24      - Unknown word (annum)        -- Rate of interest per annum
financial/equated_monthly_installments.py:5:12      - Unknown word (repay)        -- - Years to repay the loan
financial/equated_monthly_installments.py:5:22      - Unknown word (loan)         -- Years to repay the loan
financial/exponential_moving_average.py:19:31     - Unknown word (averages)    -- Yields exponential moving averages of the given stock prices
financial/exponential_moving_average.py:38:51     - Unknown word (thumb)       -- average (EMA) is a rule of thumb technique for
financial/exponential_moving_average.py:53:15     - Unknown word (Assigning)   -- # Assigning simple moving average
financial/exponential_moving_average.py:8:16      - Unknown word (conjunction) -- EMA is used in conjunction with Simple moving average
financial/exponential_moving_average.py:8:66      - Unknown word (reacts)      -- moving average (SMA), EMA reacts to the
financial/exponential_moving_average.py:9:22      - Unknown word (quicker)     -- changes in the value quicker than SMA, which is one
financial/exponential_moving_average.py:9:60      - Unknown word (advantages)  -- which is one of the advantages of using EMA.
financial/interest.py:44:13     - Unknown word (annual)     -- nominal_annual_interest_rate_percentage
financial/interest.py:44:5      - Unknown word (nominal)    -- nominal_annual_interest_rate
financial/interest.py:45:15     - Unknown word (compounding) -- number_of_compounding_periods: float,
financial/interest.py:45:27     - Unknown word (periods)     -- number_of_compounding_periods: float,
financial/present_value.py:27:17     - Unknown word (Cash)       -- ValueError: Cash flows list cannot be
financial/present_value.py:4:63      - Unknown word (yearly)     -- value of a stream of yearly cash flows given...
financial/present_value.py:8:22      - Unknown word (assumes)    -- Note: This algorithm assumes that cash flows are
financial/present_value.py:8:50      - Unknown word (paid)       -- that cash flows are paid at the end of the specified
financial/simple_moving_average.py:2:38      - Unknown word (statistical) -- Moving Average (SMA) is a statistical calculation used to
financial/simple_moving_average.py:4:58      - Unknown word (smooth)      -- time series analysis to smooth out price data
financial/simple_moving_average.py:57:7      - Unknown word (Specify)     -- # Specify the window size for
financial/simple_moving_average.py:5:14      - Unknown word (trends)      -- and identify trends.
fractals/julia_sets.py:10:14     - Unknown word (presented)    -- The examples presented here are:
fractals/julia_sets.py:11:7      - Unknown word (Cauliflower)  -- - The Cauliflower Julia set, see e.g.
fractals/julia_sets.py:134:5     - Unknown word (Plots)        -- Plots of whether the absolute
fractals/julia_sets.py:14:33     - Unknown word (ambiantly)    -- exponential map Julia set, ambiantly homeomorphic to the
fractals/julia_sets.py:14:43     - Unknown word (homeomorphic) -- Julia set, ambiantly homeomorphic to the examples in
fractals/julia_sets.py:19:1      - Unknown word (Remark)       -- Remark: Some overflow runtime
fractals/julia_sets.py:1:11      - Unknown word (Alexandre)  -- """Author Alexandre De Zotti
fractals/julia_sets.py:1:24      - Unknown word (Zotti)      -- Author Alexandre De Zotti
fractals/julia_sets.py:20:65     - Unknown word (computations) -- using numpy's efficient computations.
fractals/julia_sets.py:21:16     - Unknown word (infinites)    -- Overflows and infinites are replaced after each
fractals/julia_sets.py:21:2      - Unknown word (Overflows)    -- Overflows and infinites are replaced
fractals/julia_sets.py:31:3      - Unknown word (cauliflower)  -- c_cauliflower = 0.25 + 0.0j
fractals/julia_sets.py:3:1       - Unknown word (Draws)      -- Draws Julia sets of quadratic
fractals/julia_sets.py:3:31      - Unknown word (polynomials) -- Julia sets of quadratic polynomials and exponential maps
fractals/julia_sets.py:4:7       - Unknown word (specifically) -- More specifically, this iterates the function
fractals/julia_sets.py:5:7       - Unknown word (plots)        -- then plots whether the absolute
fractals/julia_sets.py:70:6      - Unknown word (imaginary)    -- imaginary parts ranging from
fractals/julia_sets.py:7:2       - Unknown word (really)       -- really an escape radius but
fractals/julia_sets.py:7:30      - Unknown word (rather)       -- an escape radius but rather a convenient way to
fractals/julia_sets.py:7:39      - Unknown word (convenient)   -- radius but rather a convenient way to approximate the
fractals/julia_sets.py:8:19      - Unknown word (orbits)       -- set with bounded orbits.
fractals/koch_snowflake.py:16:13     - Unknown word (koch)        -- #84-the-koch-curve-and-the-arraylist
fractals/koch_snowflake.py:32:9      - Unknown word (VECTORS)     -- INITIAL_VECTORS = [VECTOR_1, VECTOR
fractals/koch_snowflake.py:3:14      - Unknown word (snowflake)  -- The Koch snowflake is a fractal curve and
fractals/koch_snowflake.py:3:67      - Unknown word (fractals)   -- one of the earliest fractals to
fractals/koch_snowflake.py:41:8      - Unknown word (careful)     -- Be careful with high values (above
fractals/koch_snowflake.py:42:5      - Unknown word (exponentially) -- exponentially.
fractals/koch_snowflake.py:55:5      - Unknown word (Loops)         -- Loops through each pair of
fractals/koch_snowflake.py:58:33     - Unknown word (bent)          -- degree rotation so it is bent outwards.
fractals/koch_snowflake.py:58:38     - Unknown word (outwards)      -- rotation so it is bent outwards.
fractals/koch_snowflake.py:5:17      - Unknown word (stages)     -- sequence of stages. The first stage is
fractals/koch_snowflake.py:5:47      - Unknown word (equilateral) -- The first stage is an equilateral triangle, and each
fractals/koch_snowflake.py:6:42      - Unknown word (outward)     -- is formed by adding outward bends to each side of
fractals/koch_snowflake.py:6:50      - Unknown word (bends)       -- formed by adding outward bends to each side of the
fractals/koch_snowflake.py:7:48      - Unknown word (triangles)   -- smaller equilateral triangles.
fractals/koch_snowflake.py:97:13     - Unknown word (stretched)     -- # avoid stretched display of graph
fractals/mandelbrot.py:100:30    - Unknown word (viewed)         -- the Mandelbrot set is viewed. The main area of the
fractals/mandelbrot.py:101:5     - Unknown word (roughly)        -- roughly between "-1.5 < x <
fractals/mandelbrot.py:103:5     - Unknown word (Commenting)     -- Commenting out tests that slow
fractals/mandelbrot.py:104:32    - Unknown word (mandelbrot)     -- s call     fractals/mandelbrot.py::mandelbrot.get_image
fractals/mandelbrot.py:11:1      - Unknown word (exhibit)        -- exhibit an elaborate and infinitely
fractals/mandelbrot.py:11:12     - Unknown word (elaborate)      -- exhibit an elaborate and infinitely complicated
fractals/mandelbrot.py:11:26     - Unknown word (infinitely)     -- exhibit an elaborate and infinitely complicated boundary
fractals/mandelbrot.py:11:63     - Unknown word (reveals)        -- complicated boundary that reveals
fractals/mandelbrot.py:12:1      - Unknown word (progressively)  -- progressively ever-finer recursive
fractals/mandelbrot.py:12:20     - Unknown word (finer)          -- progressively ever-finer recursive detail at
fractals/mandelbrot.py:12:57     - Unknown word (magnifications) -- detail at increasing magnifications, making
fractals/mandelbrot.py:140:57    - Unknown word (zoomed)         -- different section, zoomed in
fractals/mandelbrot.py:26:34     - Unknown word (diverges)       -- constituted by this x-y-pair diverges. Members of the Mandelbrot
fractals/mandelbrot.py:26:5      - Unknown word (constituted)    -- constituted by this x-y-pair diverges
fractals/mandelbrot.py:3:36      - Unknown word (diverge)    -- * z_n + c" does not diverge, i.e. remains bounded
fractals/mandelbrot.py:3:50      - Unknown word (remains)    -- does not diverge, i.e. remains bounded. Thus, a
fractals/mandelbrot.py:3:67      - Unknown word (Thus)       -- e. remains bounded. Thus, a
fractals/mandelbrot.py:43:11     - Unknown word (divergence)     -- # divergence happens for all complex
fractals/mandelbrot.py:7:47      - Unknown word (drawn)      -- real component, usually drawn on the x-axis, and
fractals/mandelbrot.py:8:63      - Unknown word (visualizations) -- on the y-axis. Most visualizations
fractals/mandelbrot.py:9:45      - Unknown word (indicate)       -- use a color-coding to indicate after how many steps
fractals/sierpinski_triangle.py:10:32     - Unknown word (Originally)    -- equilateral triangles. Originally constructed as a curve
fractals/sierpinski_triangle.py:11:58     - Unknown word (mathematically) -- sets—that is, it is a mathematically
fractals/sierpinski_triangle.py:12:27     - Unknown word (reproducible)   -- generated pattern that is reproducible at any magnification
fractals/sierpinski_triangle.py:12:47     - Unknown word (magnification)  -- reproducible at any magnification or reduction. It is
fractals/sierpinski_triangle.py:13:24     - Unknown word (mathematician)  -- named after the Polish mathematician Wacław Sierpiński, but
fractals/sierpinski_triangle.py:13:38     - Unknown word (Wacław)         -- Polish mathematician Wacław Sierpiński, but appeared
fractals/sierpinski_triangle.py:13:61     - Unknown word (appeared)       -- Wacław Sierpiński, but appeared as a
fractals/sierpinski_triangle.py:14:1      - Unknown word (decorative)     -- decorative pattern many centuries
fractals/sierpinski_triangle.py:14:25     - Unknown word (centuries)      -- decorative pattern many centuries before the work of Sierpi
fractals/sierpinski_triangle.py:17:15     - Unknown word (sierpinski)     -- Usage: python sierpinski_triangle.py <int:depth
fractals/sierpinski_triangle.py:2:55      - Unknown word (anuragkumarak) -- uragkumarak95@gmail.com | git/anuragkumarak95
fractals/sierpinski_triangle.py:6:13      - Unknown word (Sierpiński)    -- What is the Sierpiński Triangle?
fractals/sierpinski_triangle.py:6:24      - Unknown word (Triangle)      -- What is the Sierpiński Triangle?
fractals/sierpinski_triangle.py:76:14     - Unknown word (Correct)        -- "Correct format for using this
fractals/sierpinski_triangle.py:7:40      - Unknown word (spelled)       -- triangle (sometimes spelled Sierpinski), also called
fractals/sierpinski_triangle.py:8:12      - Unknown word (gasket)        -- Sierpiński gasket or Sierpiński sieve
fractals/sierpinski_triangle.py:8:33      - Unknown word (sieve)         -- gasket or Sierpiński sieve, is a fractal attractive
fractals/sierpinski_triangle.py:9:47      - Unknown word (subdivided)    -- equilateral triangle, subdivided recursively into
fractals/vicsek.py:10:8      - Unknown word (shaped)     -- square-shaped outline with smaller
fractals/vicsek.py:1:12      - Unknown word (Bastien)    -- """Authors Bastien Capiaux & Mehdi Oudghiri
fractals/vicsek.py:1:20      - Unknown word (Capiaux)    -- """Authors Bastien Capiaux & Mehdi Oudghiri
fractals/vicsek.py:1:36      - Unknown word (Oudghiri)   -- Bastien Capiaux & Mehdi Oudghiri
fractals/vicsek.py:1:4       - Unknown word (Authors)    -- """Authors Bastien Capiaux & Mehdi
fractals/vicsek.py:57:10     - Unknown word (vicsek)     -- def draw_vicsek_fractal(x: float, y
fractals/vicsek.py:6:20      - Unknown word (resembles)  -- level of recursion resembles the overall pattern
fractals/vicsek.py:9:32      - Unknown word (exhibits)   -- results in a pattern that exhibits self-similarity and
fuzzy_logic/fuzzy_operations.py:16:7      - Unknown word (Fuzzy)      -- class FuzzySet:
fuzzy_logic/fuzzy_operations.py:181:9     - Unknown word (legend)     -- plt.legend()
fuzzy_logic/fuzzy_operations.py:18:58     - Unknown word (fuzzy)      -- manipulating triangular fuzzy sets.
fuzzy_logic/fuzzy_operations.py:28:49     - Unknown word (negation)   -- Calculate the complement (negation) of this fuzzy set.
fuzzy_logic/fuzzy_operations.py:2:5       - Unknown word (Shreya)     -- By @Shreya123714
fuzzy_logic/fuzzy_operations.py:31:27     - Unknown word (Sheru)      -- > sheru = FuzzySet("Sheru", 0.4, 1, 0.6)
fuzzy_logic/fuzzy_operations.py:31:9      - Unknown word (sheru)      -- >>> sheru = FuzzySet("Sheru",
fuzzy_logic/fuzzy_operations.py:37:26     - Unknown word (Siya)       -- >> siya = FuzzySet("Siya", 0.5, 1, 0.7)
fuzzy_logic/fuzzy_operations.py:37:9      - Unknown word (siya)       -- >>> siya = FuzzySet("Siya",
fuzzy_logic/fuzzy_operations.py:41:7      - Unknown word (Complement) -- # Complement Operation
fuzzy_logic/fuzzy_operations.py:98:41     - Unknown word (intersect)  -- Another fuzzy set to intersect with.
genetic_algorithm/basic_string.py:109:62    - Unknown word (converge)       -- list, evolution cannot converge
genetic_algorithm/basic_string.py:12:36     - Unknown word (Bigger)     -- of the population.  Bigger could be faster but
genetic_algorithm/basic_string.py:12:78     - Unknown word (expensive)  -- faster but is more memory expensive.
genetic_algorithm/basic_string.py:13:3      - Unknown word (POPULATION) -- N_POPULATION = 200
genetic_algorithm/basic_string.py:140:41    - Unknown word (perfect)        -- will end when we find a perfect match for our target
genetic_algorithm/basic_string.py:171:27    - Unknown word (Population)     -- f"\nTotal Population:{total_population}"
genetic_algorithm/basic_string.py:176:37    - Unknown word (keeping)        -- the old population, keeping some of the best evolutions
genetic_algorithm/basic_string.py:176:62    - Unknown word (evolutions)     -- keeping some of the best evolutions.
genetic_algorithm/basic_string.py:177:11    - Unknown word (Keeping)        -- # Keeping this avoid regression
genetic_algorithm/basic_string.py:17:51     - Unknown word (mutate)     -- of a generation can mutate, changing one of its
genetic_algorithm/basic_string.py:17:79     - Unknown word (genes)      -- changing one of its genes.
genetic_algorithm/basic_string.py:18:13     - Unknown word (guarantee)  -- # This will guarantee that all genes will
genetic_algorithm/basic_string.py:199:60    - Unknown word (evolve)         -- to evaluate, combine, evolve, and mutate a string
genetic_algorithm/basic_string.py:19:1      - Unknown word (MUTATION)   -- MUTATION_PROBABILITY = 0.4
genetic_algorithm/basic_string.py:19:10     - Unknown word (PROBABILITY) -- MUTATION_PROBABILITY = 0.4
genetic_algorithm/basic_string.py:203:10    - Unknown word (nopqrstuvwxyz)  -- "nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)
genetic_algorithm/basic_string.py:203:35    - Unknown word (èéòà)           -- nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)(&%$£/\\"
genetic_algorithm/basic_string.py:20:18     - Unknown word (improve)     -- # Just a seed to improve randomness required
genetic_algorithm/basic_string.py:28:19     - Unknown word (Helxo)       -- >>> evaluate("Helxo Worlx", "Hello World
genetic_algorithm/basic_string.py:28:25     - Unknown word (Worlx)       -- >>> evaluate("Helxo Worlx", "Hello World")
genetic_algorithm/basic_string.py:2:50      - Unknown word (phases)     -- algorithm to show how the 4 phases of a genetic algorithm
genetic_algorithm/basic_string.py:2:62      - Unknown word (genetic)    -- how the 4 phases of a genetic algorithm works
genetic_algorithm/basic_string.py:35:5      - Unknown word (crossover)   -- def crossover(parent_1: str, parent
genetic_algorithm/basic_string.py:3:25      - Unknown word (Crossover)  -- Evaluation, Selection, Crossover and Mutation)
genetic_algorithm/basic_string.py:3:39      - Unknown word (Mutation)   -- Selection, Crossover and Mutation)
genetic_algorithm/basic_string.py:50:21     - Unknown word (gene)        -- Mutate a random gene of a child with another
genetic_algorithm/basic_string.py:50:5      - Unknown word (Mutate)      -- Mutate a random gene of a child
genetic_algorithm/basic_string.py:5:11      - Unknown word (rkia)       -- Author: D4rkia
genetic_algorithm/basic_string.py:72:48     - Unknown word (ghijkl)      -- [("abcdef", 4.0), ("ghijkl", 5.0), ("mnopqr",
genetic_algorithm/basic_string.py:72:65     - Unknown word (mnopqr)      -- ("ghijkl", 5.0), ("mnopqr", 7.0)]
genetic_algorithm/basic_string.py:84:30     - Unknown word (proportionally) -- Generate more children proportionally to the fitness score
genetic_algorithm/basic_string.py:84:52     - Unknown word (fitness)        -- proportionally to the fitness score.
genetic_algorithm/basic_string.py:99:46     - Unknown word (besides)        -- target contains no genes besides the ones inside genes
geodesy/haversine_distance.py:10:15     - Unknown word (great)      -- Calculate great circle distance between
geodesy/haversine_distance.py:10:61     - Unknown word (sphere)     -- between two points in a sphere,
geodesy/haversine_distance.py:11:11     - Unknown word (longitudes) -- given longitudes and latitudes https
geodesy/haversine_distance.py:11:26     - Unknown word (latitudes)  -- given longitudes and latitudes https://en.wikipedia
geodesy/haversine_distance.py:13:41     - Unknown word (spherical)  -- the globe is "sort of" spherical, so a path between two
geodesy/haversine_distance.py:14:63     - Unknown word (Earth's)    -- need to account for the Earth's curvature
geodesy/haversine_distance.py:14:71     - Unknown word (curvature)  -- account for the Earth's curvature
geodesy/haversine_distance.py:15:65     - Unknown word (negligible) -- to B. This effect is negligible for
geodesy/haversine_distance.py:16:77     - Unknown word (treats)     -- The Haversine method treats
geodesy/haversine_distance.py:17:9      - Unknown word (earth)      -- the earth as a sphere which allows
geodesy/haversine_distance.py:19:21     - Unknown word (Earth)      -- them. Since the Earth is not a perfect sphere
geodesy/haversine_distance.py:20:13     - Unknown word (ellipsoidal) -- Earth's ellipsoidal nature are more accurate
geodesy/haversine_distance.py:21:39     - Unknown word (handy)       -- like Haversine can be handy for shorter range distances
geodesy/haversine_distance.py:21:49     - Unknown word (shorter)     -- Haversine can be handy for shorter range distances.
geodesy/haversine_distance.py:24:27     - Unknown word (latitude)    -- * `lat1`, `lon1`: latitude and longitude of coordinate
geodesy/haversine_distance.py:24:40     - Unknown word (longitude)   -- lon1`: latitude and longitude of coordinate 1
geodesy/haversine_distance.py:27:53     - Unknown word (metres)       -- between two points in metres
geodesy/haversine_distance.py:27:9      - Unknown word (geographical) -- geographical distance between two
geodesy/haversine_distance.py:31:13     - Unknown word (FRANCISCO)    -- >>> SAN_FRANCISCO = point_2d(37.77485
geodesy/haversine_distance.py:32:9      - Unknown word (YOSEMITE)     -- >>> YOSEMITE = point_2d(37.86474
geodesy/haversine_distance.py:3:1       - Unknown word (AXIS)       -- AXIS_A = 6378137.0
geodesy/lamberts_ellipsoidal_distance.py:10:5      - Unknown word (lamberts)   -- def lamberts_ellipsoidal_distance
geodesy/lamberts_ellipsoidal_distance.py:18:31     - Unknown word (geodesy)    -- This algorithm uses geodesy/haversine_distance.py
geodesy/lamberts_ellipsoidal_distance.py:21:5      - Unknown word (Representing) -- Representing the earth as an ellipsoid
geodesy/lamberts_ellipsoidal_distance.py:23:17     - Unknown word (oblate)       -- Earth as an oblate ellipsoid which means
geodesy/lamberts_ellipsoidal_distance.py:23:46     - Unknown word (accounting)   -- ellipsoid which means accounting for the flattening that
geodesy/lamberts_ellipsoidal_distance.py:24:28     - Unknown word (poles)        -- the North and South poles. Lambert's formulae
geodesy/lamberts_ellipsoidal_distance.py:24:35     - Unknown word (Lambert's)    -- North and South poles. Lambert's formulae provide accuracy
geodesy/lamberts_ellipsoidal_distance.py:24:45     - Unknown word (formulae)     -- South poles. Lambert's formulae provide accuracy on
geodesy/lamberts_ellipsoidal_distance.py:25:21     - Unknown word (thousands)    -- 10 meteres over thousands of kilometeres. Other
geodesy/lamberts_ellipsoidal_distance.py:25:34     - Unknown word (kilometeres)  -- meteres over thousands of kilometeres. Other methods can provide
geodesy/lamberts_ellipsoidal_distance.py:25:8      - Unknown word (meteres)      -- 10 meteres over thousands of kilometeres
geodesy/lamberts_ellipsoidal_distance.py:27:34     - Unknown word (computational) -- distances without increasing computational intensity.
geodesy/lamberts_ellipsoidal_distance.py:40:9      - Unknown word (VENICE)        -- >>> VENICE = point_2d(45.44301
geodesy/lamberts_ellipsoidal_distance.py:54:7      - Unknown word (Parametric)    -- # Parametric latitudes
geodesy/lamberts_ellipsoidal_distance.py:60:60     - Unknown word (equatorial)    -- haversine_distance / equatorial radius
geodesy/lamberts_ellipsoidal_distance.py:63:7      - Unknown word (Intermediate)  -- # Intermediate P and Q values
geodesy/lamberts_ellipsoidal_distance.py:68:39     - Unknown word (Pcos)          -- sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2)
geodesy/lamberts_ellipsoidal_distance.py:70:7      - Unknown word (demonimator)   -- x_demonimator = cos(sigma / 2) **
geodesy/lamberts_ellipsoidal_distance.py:74:39     - Unknown word (Psin)          -- sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2)
geodesy/lamberts_ellipsoidal_distance.py:7:1       - Unknown word (EQUATORIAL) -- EQUATORIAL_RADIUS = 6378137
geometry/geometry.py:12:7      - Unknown word (Angle)      -- class Angle:
geometry/geometry.py:79:7      - Unknown word (Ellipse)    -- class Ellipse:
graphics/bezier_curve.py:102:13    - Unknown word (scatter)     -- plt.scatter(x, y, color="red", label
graphics/bezier_curve.py:10:23     - Unknown word (weighted)   -- Bezier curve is a weighted sum of a set of control
graphics/bezier_curve.py:21:11     - Unknown word (Degree)     -- # Degree determines the flexibility
graphics/bezier_curve.py:21:33     - Unknown word (flexibility) -- Degree determines the flexibility of the curve.
graphics/bezier_curve.py:22:27     - Unknown word (produce)     -- # Degree = 1 will produce a straight line.
graphics/bezier_curve.py:49:9      - Unknown word (bezier)      -- def bezier_curve_function(self
graphics/bezier_curve.py:79:60     - Unknown word (produced)    -- the finer the curve produced.
graphics/butterfly_pattern.py:1:5       - Unknown word (butterfly)  -- def butterfly_pattern(n: int) -> str
graphics/butterfly_pattern.py:26:14     - Unknown word (stars)      -- left_stars = "*" * i
graphics/digital_differential_analyzer_line.py:48:51     - Unknown word (Drawing)      -- Differential Analyzer Line Drawing Algorithm")
graphics/digital_differential_analyzer_line.py:4:13      - Unknown word (differential) -- def digital_differential_analyzer_line(
graphics/digital_differential_analyzer_line.py:4:26      - Unknown word (analyzer)     -- digital_differential_analyzer_line(
graphics/vector3_for_2d_rendering.py:10:15     - Unknown word (xcodz)      -- __author__ = "xcodz-dot, cclaus, dhruvmanila
graphics/vector3_for_2d_rendering.py:10:26     - Unknown word (cclaus)     -- author__ = "xcodz-dot, cclaus, dhruvmanila"
graphics/vector3_for_2d_rendering.py:10:34     - Unknown word (dhruvmanila) -- "xcodz-dot, cclaus, dhruvmanila"
graphics/vector3_for_2d_rendering.py:17:31     - Unknown word (drawable)    -- Converts 3d point to a 2d drawable point
graphics/vector3_for_2d_rendering.py:2:25      - Unknown word (surfaces)   -- render 3d points for 2d surfaces.
graphics/vector3_for_2d_rendering.py:69:26     - Unknown word (Axis)        -- raise TypeError("Axis must be a str")
graphs/a_star.py:111:48    - Unknown word (whereas)    -- # 0 are free path whereas 1's are obstacles
graphs/a_star.py:122:26    - Unknown word (pushes)     -- the cost map which pushes the path closer to the
graphs/a_star.py:20:33     - Unknown word (avoiding)   -- for a path on a grid avoiding obstacles.
graphs/a_star.py:3:1       - Unknown word (DIRECTIONS) -- DIRECTIONS = [
graphs/a_star.py:59:5      - Unknown word (resign)     -- resign = False  # flag set
graphs/a_star.py:63:44     - Unknown word (unable)     -- ValueError("Algorithm is unable to find solution")
graphs/a_star.py:64:38     - Unknown word (costliest)  -- to choose the least costliest action so as to move
graphs/ant_colony_optimization_algorithms.py:11:9      - Unknown word (Clark)      -- Author: Clark
graphs/ant_colony_optimization_algorithms.py:125:12    - Unknown word (pheromones)  -- Update pheromones on the route and update
graphs/ant_colony_optimization_algorithms.py:147:48    - Unknown word (volatilization) -- cities)): # Update the volatilization of pheromone on all
graphs/ant_colony_optimization_algorithms.py:2:12      - Unknown word (colony)     -- Use an ant colony optimization algorithm
graphs/ant_colony_optimization_algorithms.py:2:55      - Unknown word (travelling) -- algorithm to solve the travelling salesman problem (TSP
graphs/ant_colony_optimization_algorithms.py:2:66      - Unknown word (salesman)   -- solve the travelling salesman problem (TSP)
graphs/ant_colony_optimization_algorithms.py:31:5      - Unknown word (ants)       -- ants_num: int,
graphs/ant_colony_optimization_algorithms.py:33:15     - Unknown word (evaporation) -- pheromone_evaporation: float,
graphs/ant_colony_optimization_algorithms.py:33:5      - Unknown word (pheromone)  -- pheromone_evaporation: float,
graphs/ant_colony_optimization_algorithms.py:35:5      - Unknown word (beta)        -- beta: float,
graphs/ant_colony_optimization_algorithms.py:36:18     - Unknown word (Pheromone)   -- q: float,  # Pheromone system parameters Q
graphs/ant_colony_optimization_algorithms.py:3:7       - Unknown word (asks)       -- which asks the following question
graphs/ant_colony_optimization_algorithms.py:4:18      - Unknown word (cities)     -- "Given a list of cities and the distances between
graphs/basic_graphs.py:143:32    - Unknown word (knows)      -- known - Set of knows nodes
graphs/basic_graphs.py:144:24    - Unknown word (Preceding)  -- path - Preceding node in path
graphs/basic_graphs.py:149:5     - Unknown word (dijk)       -- def dijk(g, s):
graphs/basic_graphs.py:189:5     - Unknown word (topo)       -- def topo(g, ind=None, q=None
graphs/basic_graphs.py:193:38    - Unknown word (Ince)       -- * (len(g) + 1)  # SInce oth Index is ignored
graphs/basic_graphs.py:219:5     - Unknown word (adjm)       -- def adjm():
graphs/basic_graphs.py:21:27     - Unknown word (undirected) -- initialize_unweighted_undirected_graph(
graphs/basic_graphs.py:248:11    - Unknown word (Warshall's) -- Floyd Warshall's algorithm
graphs/basic_graphs.py:259:5     - Unknown word (floy)       -- def floy(a_and_n):
graphs/basic_graphs.py:274:5     - Unknown word (Prim's)     -- Prim's MST Algorithm
graphs/basic_graphs.py:284:5     - Unknown word (prim)       -- def prim(g, s):
graphs/basic_graphs.py:313:5     - Unknown word (edglist)    -- def edglist():
graphs/basic_graphs.py:342:5     - Unknown word (Kruskal's)  -- Kruskal's MST Algorithm
graphs/basic_graphs.py:350:5     - Unknown word (krusk)      -- def krusk(e_and_n):
graphs/basic_graphs.py:55:17     - Unknown word (Unweighted) -- "1. Unweighted directed \n"
graphs/basic_graphs.py:8:16      - Unknown word (unweighted) -- def initialize_unweighted_directed_graph(
graphs/bellman_ford.py:20:5      - Unknown word (bellman)    -- def bellman_ford(
graphs/bi_directional_dijkstra.py:11:11     - Unknown word (Swayam)      -- # Author: Swayam Singh (https://github
graphs/bi_directional_dijkstra.py:19:14     - Unknown word (relaxation)  -- def pass_and_relaxation(
graphs/bi_directional_dijkstra.py:2:4       - Unknown word (directional) -- Bi-directional Dijkstra's algorithm
graphs/bi_directional_dijkstra.py:47:5      - Unknown word (bidirectional) -- def bidirectional_dij(
graphs/bi_directional_dijkstra.py:57:35     - Unknown word (reachable)     -- the destination is not reachable, function returns -
graphs/bidirectional_a_star.py:10:9      - Unknown word (manhattan)  -- # 1 for manhattan, 0 for euclidean
graphs/bidirectional_a_star.py:11:1      - Unknown word (HEURISTIC)  -- HEURISTIC = 0
graphs/bidirectional_a_star.py:257:5     - Unknown word (bidir)      -- bidir_astar = BidirectionalAStar
graphs/bidirectional_a_star.py:80:9      - Unknown word (astar)      -- >>> astar = AStar((0, 0), (len
graphs/bidirectional_a_star.py:83:35     - Unknown word (successors) -- pos for x in astar.get_successors(astar.start)]
graphs/bidirectional_breadth_first_search.py:181:12    - Unknown word (Unidirectional) -- print("Unidirectional BFS computation time
graphs/boruvka.py:109:21    - Unknown word (observing)  -- observing right now, we will assign
graphs/boruvka.py:11:77     - Unknown word (couple)     -- since we have to keep a couple
graphs/boruvka.py:1:4       - Unknown word (Borůvka's)  -- """Borůvka's algorithm.
graphs/boruvka.py:3:24      - Unknown word (spanning)   -- Determines the minimum spanning tree (MST) of a graph
graphs/boruvka.py:42:20     - Unknown word (belongs)    -- a node belongs to.
graphs/boruvka.py:4:26      - Unknown word (greedy)     -- vka's algorithm is a greedy algorithm for finding
graphs/boruvka.py:55:12     - Unknown word (Propagates) -- """Propagates a new component throughout
graphs/boruvka.py:69:63     - Unknown word (compares)   -- components for two nodes, compares the components
graphs/boruvka.py:70:31     - Unknown word (attaches)   -- in terms of size, and attaches the smaller one to the
graphs/boruvka.py:83:9      - Unknown word (boruvka)    -- def boruvka(self) -> None:
graphs/breadth_first_search.py:16:49     - Unknown word (graaph)     -- list representation of graaph
graphs/breadth_first_search.py:3:12      - Unknown word (OMKAR)      -- """Author: OMKAR PATHAK"""
graphs/breadth_first_search.py:3:18      - Unknown word (PATHAK)     -- """Author: OMKAR PATHAK"""
graphs/breadth_first_search_2.py:5:24      - Unknown word (unexplored) -- all nodes initially unexplored
graphs/breadth_first_search_2.py:6:11      - Unknown word (explored)   -- mark s as explored
graphs/breadth_first_search_shortest_path.py:1:4       - Unknown word (Breath)     -- """Breath First Search (BFS) can
graphs/breadth_first_search_shortest_path.py:22:42     - Unknown word (upon)       -- vertex have to be defined upon initialization.
graphs/breadth_first_search_shortest_path.py:29:9      - Unknown word (breath)     -- def breath_first_search(self)
graphs/breadth_first_search_shortest_path.py:51:55     - Unknown word (describing) -- function returns a string, describing the result:
graphs/breadth_first_search_shortest_path_2.py:4:1       - Unknown word (Manual)     -- Manual test:
graphs/breadth_first_search_zero_one_shortest_path.py:2:73      - Unknown word (dijkstra)   -- which is faster than dijkstra.
graphs/check_bipatrite.py:41:35     - Unknown word (fails)      -- FIXME: This test should fails with KeyError: 4.
graphs/check_bipatrite.py:4:8       - Unknown word (bipartite)  -- def is_bipartite_dfs(graph: defaultdict
graphs/connected_components.py:13:22     - Unknown word (vert)       -- def dfs(graph: dict, vert: int, visited: list
graphs/connected_components.py:24:15     - Unknown word (verts)      -- connected_verts = []
graphs/deep_clone_graph.py:49:18     - Unknown word (clones)     -- originals_to_clones = {}  # map nodes to
graphs/deep_clone_graph.py:49:5      - Unknown word (originals)  -- originals_to_clones = {}  # map
graphs/depth_first_search.py:27:53     - Unknown word (exploring)  -- elements to stack without exploring them
graphs/dijkstra.py:25:67     - Unknown word (guarantees) -- use of a min heap as H guarantees
graphs/dijkstra.py:4:1       - Unknown word (DIJKSTRA)   -- DIJKSTRA(graph G, start vertex
graphs/dijkstra_2.py:11:14     - Unknown word (mdist)      -- def min_dist(mdist, vset, v):
graphs/dijkstra_2.py:11:21     - Unknown word (vset)       -- def min_dist(mdist, vset, v):
graphs/dijkstra_2.py:57:5      - Unknown word (gsrc)       -- gsrc = int(input("\nEnter
graphs/dijkstra_algorithm.py:185:9     - Unknown word (Swaps)      -- Swaps array elements at indices
graphs/dijkstra_algorithm.py:1:76      - Unknown word (scratch)    -- source shortest path from scratch
graphs/dijkstra_algorithm.py:264:11    - Unknown word (Assuming)   -- # Assuming undirected graph
graphs/dijkstra_algorithm.py:2:11      - Unknown word (Shubham)    -- # Author: Shubham Malik
graphs/dijkstra_algorithm.py:2:19      - Unknown word (Malik)      -- # Author: Shubham Malik
graphs/dijkstra_algorithm.py:408:9     - Unknown word (Shows)      -- Shows the shortest path from
graphs/dijkstra_binary_grid.py:30:18     - Unknown word (movements)  -- diagonal movements are allowed.
graphs/dijkstra_binary_grid.py:4:3       - Unknown word (walkable)   -- a walkable node and 0 represents
graphs/dijkstra_binary_grid.py:4:37      - Unknown word (obstacle)   -- and 0 represents an obstacle.
graphs/dijkstra_binary_grid.py:56:5      - Unknown word (predecessors) -- predecessors = np.empty((rows, cols
graphs/dijkstra_binary_grid.py:6:1       - Unknown word (Diagonal)   -- Diagonal movement can be allowed
graphs/dinic.py:17:33     - Unknown word (rcap)       -- edge(self, a, b, c, rcap=0):
graphs/dinic.py:87:20     - Unknown word (verices)    -- Finally we add the verices near the sink to the
graphs/directed_and_undirected_weighted_graph.py:153:9     - Unknown word (indirect)   -- indirect_parents = []
graphs/directed_and_undirected_weighted_graph.py:156:9     - Unknown word (anticipating) -- anticipating_nodes = set()
graphs/directed_and_undirected_weighted_graph.py:15:15     - Unknown word (repetition) -- # handles repetition
graphs/directed_and_undirected_weighted_graph.py:15:7      - Unknown word (handles)    -- # handles repetition
graphs/directed_and_undirected_weighted_graph.py:35:28     - Unknown word (meant)      -- if no destination is meant the default value is
graphs/edmonds_karp_multiple_source_and_sink.py:101:14    - Unknown word (excesses)   -- self.excesses = [0] * self.verticies
graphs/edmonds_karp_multiple_source_and_sink.py:106:21    - Unknown word (substance)  -- # push some substance to graph
graphs/edmonds_karp_multiple_source_and_sink.py:107:13    - Unknown word (nextvertex) -- for nextvertex_index, bandwidth in
graphs/edmonds_karp_multiple_source_and_sink.py:147:18    - Unknown word (relabel)    -- self.relabel(vertex_index)
graphs/edmonds_karp_multiple_source_and_sink.py:174:5     - Unknown word (entrances)  -- entrances = [0]
graphs/edmonds_karp_multiple_source_and_sink.py:2:40      - Unknown word (sinks)      -- self, graph, sources, sinks):
graphs/edmonds_karp_multiple_source_and_sink.py:63:14     - Unknown word (verticies)  -- self.verticies_count = flow_network
graphs/edmonds_karp_multiple_source_and_sink.py:66:41     - Unknown word (shouldn't)  -- a reference, so you shouldn't change
graphs/edmonds_karp_multiple_source_and_sink.py:94:11     - Unknown word (Relabel)    -- class PushRelabelExecutor(MaximumFlowAlgorithmE
graphs/eulerian_path_and_circuit_for_undirected_graph.py:8:25      - Unknown word (eulerian)   -- using dfs for finding eulerian path traversal
graphs/even_tree.py:12:57     - Unknown word (decomposed) -- that it can always be decomposed into
graphs/even_tree.py:22:23     - Unknown word (redefined)  -- # pylint: disable=redefined-outer-name
graphs/finding_bridges.py:3:40      - Unknown word (vulnerabilities) -- one. Bridges represent vulnerabilities in a connected network
graphs/finding_bridges.py:4:59      - Unknown word (wired)           -- networks. For example, in a wired computer network, an
graphs/finding_bridges.py:5:1       - Unknown word (articulation)    -- articulation point indicates the
graphs/finding_bridges.py:60:13     - Unknown word (bridges)         -- def compute_bridges(graph: dict[int, list
graphs/finding_bridges.py:6:1       - Unknown word (wires)           -- wires or connections.
graphs/frequent_pattern_graph_miner.py:4:3       - Unknown word (novel)      -- A novel Frequent Pattern Graph
graphs/frequent_pattern_graph_miner.py:4:70      - Unknown word (compactly)  -- FP-GraphMiner, that compactly
graphs/frequent_pattern_graph_miner.py:66:54     - Unknown word (descending) -- Bitcode), Bitcode] in descending order
graphs/frequent_pattern_graph_miner.py:6:39      - Unknown word (mine)       -- used to efficiently mine frequent subgraphs including
graphs/frequent_pattern_graph_miner.py:6:73      - Unknown word (maximal)    -- subgraphs including maximal
graphs/g_topological_sort.py:10:9      - Unknown word (shirt)      -- 6: "shirt",
graphs/g_topological_sort.py:1:11      - Unknown word (Phyllipe)   -- # Author: Phyllipe Bezerra (https://github
graphs/g_topological_sort.py:1:20      - Unknown word (Bezerra)    -- # Author: Phyllipe Bezerra (https://github.com
graphs/g_topological_sort.py:24:17     - Unknown word (clothing)   -- current_clothing = stack.pop()
graphs/g_topological_sort.py:3:1       - Unknown word (clothes)    -- clothes = {
graphs/g_topological_sort.py:4:9       - Unknown word (underwear)  -- 0: "underwear",
graphs/g_topological_sort.py:5:9       - Unknown word (pants)      -- 1: "pants",
graphs/g_topological_sort.py:6:9       - Unknown word (belt)       -- 2: "belt",
graphs/g_topological_sort.py:7:9       - Unknown word (suit)       -- 3: "suit",
graphs/g_topological_sort.py:8:9       - Unknown word (shoe)       -- 4: "shoe",
graphs/g_topological_sort.py:9:9       - Unknown word (socks)      -- 5: "socks",
graphs/gale_shapley_bigraph.py:10:11     - Unknown word (donors)     -- oegan donors and recipients (where
graphs/gale_shapley_bigraph.py:10:5      - Unknown word (oegan)      -- oegan donors and recipients
graphs/gale_shapley_bigraph.py:12:18     - Unknown word (organ)      -- index is the organ recipient.
graphs/gale_shapley_bigraph.py:16:56     - Unknown word (Numberphile) -- v=Qcv1IqHWAzg&t=13s (Numberphile YouTube).
graphs/gale_shapley_bigraph.py:27:50     - Unknown word (donated)     -- # who the donor has donated to
graphs/gale_shapley_bigraph.py:29:9      - Unknown word (donations)   -- num_donations = [0] * n
graphs/gale_shapley_bigraph.py:4:5       - Unknown word (stable)     -- def stable_matching(
graphs/gale_shapley_bigraph.py:5:11      - Unknown word (pref)       -- donor_pref: list[list[int]], recipient
graphs/gale_shapley_bigraph.py:8:58      - Unknown word (pairing)    -- bipartite graph, i.e a pairing where no 2 objects
graphs/graph_adjacency_list.py:100:53    - Unknown word (deletes)      -- vertex from the graph and deletes all incoming and
graphs/graph_adjacency_list.py:13:18     - Unknown word (Ideas)        -- Potential Future Ideas:
graphs/graph_adjacency_list.py:15:61     - Unknown word (whatever)     -- customizable to store whatever the client wants
graphs/graph_adjacency_list.py:15:81     - Unknown word (wants)        -- whatever the client wants
graphs/graph_adjacency_list.py:16:11     - Unknown word (multigraph)   -- - Support multigraph functionality if the
graphs/graph_adjacency_list.py:176:9     - Unknown word (Clears)       -- Clears all vertices and edges
graphs/graph_adjacency_list.py:3:16      - Unknown word (Nithyanandam) -- Author: Vikram Nithyanandam
graphs/graph_adjacency_list.py:3:9       - Unknown word (Vikram)     -- Author: Vikram Nithyanandam
graphs/graph_adjacency_list.py:47:11     - Unknown word (Falsey)       -- # Falsey checks
graphs/graph_adjacency_list.py:63:30     - Unknown word (thrown)       -- a ValueError will be thrown.
graphs/graph_adjacency_list.py:8:1       - Unknown word (effectively)  -- effectively initialized and modified
graphs/graph_adjacency_matrix.py:145:17    - Unknown word (slide)      -- # first slide up the rows by deleting
graphs/graph_list.py:16:36     - Unknown word (Structure)  -- List type Graph Data Structure that accounts for directed
graphs/graph_list.py:3:25      - Unknown word (Nwachukwu)  -- Author: OMKAR PATHAK, Nwachukwu Chidiebere
graphs/graph_list.py:3:35      - Unknown word (Chidiebere) -- OMKAR PATHAK, Nwachukwu Chidiebere
graphs/graph_list.py:88:9      - Unknown word (Connects)   -- Connects vertices together. Creates
graphs/graph_list.py:90:9      - Unknown word (Vertices)   -- Vertices will be created if not
graphs/graphs_floyd_warshall.py:32:8      - Unknown word (Whenever)   -- 5. Whenever distance[i][j] is given
graphs/graphs_floyd_warshall.py:87:7      - Unknown word (specify)    -- # specify source, destination
graphs/graphs_floyd_warshall.py:99:34     - Unknown word (vertice)    -- Expected Output from the vertice, edge and src, dst,
graphs/greedy_best_first.py:10:6      - Unknown word (GRIDS)      -- TEST_GRIDS = [
graphs/greedy_best_first.py:77:28     - Unknown word (offer)      -- Could elaborate to offer more than one choice
graphs/greedy_best_first.py:77:9      - Unknown word (Could)      -- Could elaborate to offer more
graphs/greedy_min_vertex_cover.py:3:16      - Unknown word (Approximization) -- * Description: Approximization algorithm for minimum
graphs/greedy_min_vertex_cover.py:42:22     - Unknown word (arcs)            -- # Remove all arcs adjacent to argmax
graphs/greedy_min_vertex_cover.py:44:20     - Unknown word (haven't)         -- # if v haven't adjacent node, skip
graphs/greedy_min_vertex_cover.py:48:34     - Unknown word (elem's)          -- remove argmax from elem's adjacent list and update
graphs/kahns_algorithm_long.py:1:40      - Unknown word (Acyclic)    -- distance in Directed Acyclic Graph using KahnsAlgorithm
graphs/kahns_algorithm_long.py:3:5       - Unknown word (indegree)   -- indegree = [0] * len(graph)
graphs/kahns_algorithm_topo.py:14:9      - Unknown word (topologically) -- The topologically sorted order of vertices
graphs/kahns_algorithm_topo.py:4:11      - Unknown word (Kahn's)     -- using Kahn's Algorithm via Breadth
graphs/karger.py:2:22      - Unknown word (Karger's)   -- An implementation of Karger's Algorithm for partitioning
graphs/karger.py:30:64     - Unknown word (give)       -- meaning it will not give
graphs/karger.py:34:40     - Unknown word (adacency)   -- dictionary containing adacency lists for the graph
graphs/karger.py:44:22     - Unknown word (contracted) -- # Dict that maps contracted nodes to a list of all
graphs/karger.py:54:11     - Unknown word (Contract)   -- # Contract edge (u, v) to new node
graphs/lanczos_eigenvectors.py:11:9      - Unknown word (lanczos)      -- - `find_lanczos_eigenvectors`: Computes
graphs/lanczos_eigenvectors.py:12:62     - Unknown word (orthonormal)  -- tridiagonal matrix and orthonormal basis vectors.
graphs/lanczos_eigenvectors.py:13:29     - Unknown word (Multiplies)   -- multiply_matrix_vector`: Multiplies an adjacency list graph
graphs/lanczos_eigenvectors.py:178:62    - Unknown word (eigenvector)  -- where each column is an eigenvector corresponding
graphs/lanczos_eigenvectors.py:179:35    - Unknown word (eigenvalue)   -- to an eigenvalue.
graphs/lanczos_eigenvectors.py:192:43    - Unknown word (eigh)         -- eigenvectors = np.linalg.eigh(tridiagonal_matrix)
graphs/lanczos_eigenvectors.py:21:15     - Unknown word (Centrality)   -- - Eigenvector Centrality: https://en.wikipedia
graphs/lanczos_eigenvectors.py:21:3      - Unknown word (Eigenvector)  -- - Eigenvector Centrality: https:/
graphs/lanczos_eigenvectors.py:26:15     - Unknown word (centrality)   -- analyze graph centrality.
graphs/lanczos_eigenvectors.py:2:28      - Unknown word (Eigenvalues) -- Lanczos Method for Finding Eigenvalues and Eigenvectors of
graphs/lanczos_eigenvectors.py:4:72      - Unknown word (eigenvalues) -- approximate the largest eigenvalues
graphs/lanczos_eigenvectors.py:5:19      - Unknown word (eigenvectors) -- and corresponding eigenvectors of a symmetric matrix
graphs/lanczos_eigenvectors.py:7:16      - Unknown word (tridiagonal)  -- the graph to a tridiagonal matrix, whose eigenvalues
graphs/matching_min_vertex_cover.py:27:40     - Unknown word (extremity)  -- to_node) and add his extremity to chosen_vertices and
graphs/matching_min_vertex_cover.py:41:21     - Unknown word (couples)    -- Return a set of couples that represents all
graphs/minimum_spanning_tree_boruvka.py:103:41    - Unknown word (Boruvka's)  -- set Union and Find for Boruvka's algorithm
graphs/minimum_spanning_tree_boruvka.py:170:13    - Unknown word (cheap)      -- cheap_edge = {}
graphs/minimum_spanning_tree_boruvka.py:37:13     - Unknown word (Boruvks's)  -- For Boruvks's algorithm the weights
graphs/minimum_spanning_tree_boruvka.py:70:9      - Unknown word (Returna)    -- Returna all edges in the graph
graphs/minimum_spanning_tree_kruskal.py:1:5       - Unknown word (kruskal)    -- def kruskal(
graphs/minimum_spanning_tree_prims.py:75:5      - Unknown word (prisms)     -- def prisms_algorithm(adjacency
graphs/minimum_spanning_tree_prims.py:90:44     - Unknown word (Neighboring) -- len(adjacency_list) # Neighboring Tree Vertex of selected
graphs/minimum_spanning_tree_prims2.py:135:77    - Unknown word (internally) -- movement) [to be used internally
graphs/minimum_spanning_tree_prims2.py:220:5     - Unknown word (prims)      -- def prims_algo(
graphs/minimum_spanning_tree_prims2.py:241:7     - Unknown word (prim's)     -- # prim's algorithm for minimum
graphs/minimum_spanning_tree_prims2.py:2:23      - Unknown word (Jarník's)   -- Prim's (also known as Jarník's) algorithm is a greedy
graphs/minimum_spanning_tree_prims2.py:5:47      - Unknown word (operates)   -- minimized. The algorithm operates by building this tree
graphs/minimum_spanning_tree_prims2.py:6:71      - Unknown word (cheapest)   -- each step adding the cheapest possible
graphs/multi_heuristic_astar.py:135:16    - Unknown word (inad)       -- close_list_inad,
graphs/multi_heuristic_astar.py:139:9     - Unknown word (itera)      -- for itera in range(n_heuristic
graphs/multi_heuristic_astar.py:227:49    - Unknown word (inconsistent) -- consistent and two other inconsistent
graphs/multi_heuristic_astar.py:47:17     - Unknown word (prito)      -- for prito, yyy in temp:
graphs/page_rank.py:21:14     - Unknown word (inbound)    -- self.inbound = []
graphs/page_rank.py:39:5      - Unknown word (outbounds)  -- outbounds = {}
graphs/prim.py:22:45     - Unknown word (edges's)    -- a dict to store the edges's weight
graphs/prim.py:39:41     - Unknown word (neighbor's) -- pointer to a vertex at neighbor's list."""
graphs/prim.py:93:9      - Unknown word (Edges)      -- Edges of a Minimum Spanning
graphs/scc_kosaraju.py:24:5      - Unknown word (kosaraju)   -- def kosaraju():
graphs/strongly_connected_components.py:13:5      - Unknown word (topology)   -- def topology_sort(
graphs/tarjans_scc.py:12:23     - Unknown word (saving)     -- for each node and saving the nodes we visit on
graphs/tarjans_scc.py:16:42     - Unknown word (equireachable) -- we save it and it's equireachable vertices as a strongly
graphs/tarjans_scc.py:4:5       - Unknown word (tarjan)     -- def tarjan(g: list[list[int]])
graphs/tarjans_scc.py:6:5       - Unknown word (Tarjan's)   -- Tarjan's algo for finding strongly
greedy_methods/best_time_to_buy_and_sell_stock.py:2:52      - Unknown word (profit)     -- calculate the maximum profit that can be made from
greedy_methods/best_time_to_buy_and_sell_stock.py:9:50      - Unknown word (GREEDY)     -- using the concept of "GREEDY ALGORITHM".
greedy_methods/fractional_cover_problem.py:33:5      - Unknown word (fractional) -- def fractional_cover(items: list[Item
greedy_methods/fractional_cover_problem.py:43:13     - Unknown word (knapsack's) -- the knapsack's capacity.
greedy_methods/gas_station.py:11:5      - Unknown word (station's)  -- gas station's index if you can travel
greedy_methods/gas_station.py:21:1      - Unknown word (Greedily)   -- Greedily calculate the net gain
greedy_methods/gas_station.py:21:38     - Unknown word (quantity)   -- calculate the net gain (gas_quantity - cost) at each station
greedy_methods/gas_station.py:4:12      - Unknown word (station)    -- at the ith station is gas_quantities[i
greedy_methods/gas_station.py:8:15      - Unknown word (journey)    -- You begin the journey with an empty tank at
greedy_methods/minimum_coin_change.py:3:27      - Unknown word (denominations) -- you want to enter your denominations ? (Y/N) :N
greedy_methods/minimum_coin_change.py:85:46     - Unknown word (Denomination)  -- ominations.append(int(input(f"Denomination {i}: ").strip()))
greedy_methods/minimum_coin_change.py:9:17      - Unknown word (denomination)  -- Enter number of denomination:10
greedy_methods/minimum_waiting_time.py:12:27     - Unknown word (produces)   -- ensures that the function produces the correct output.
greedy_methods/minimum_waiting_time.py:22:36     - Unknown word (measured)   -- queries: A list of queries measured in picoseconds
greedy_methods/minimum_waiting_time.py:22:48     - Unknown word (picoseconds) -- queries measured in picoseconds
greedy_methods/optimal_merge_pattern.py:10:48     - Unknown word (resultant)  -- solution, where the resultant file
greedy_methods/optimal_merge_pattern.py:17:55     - Unknown word (possibly)   -- record file requires possibly m+n record moves
greedy_methods/optimal_merge_pattern.py:24:45     - Unknown word (optimum)    -- merge all the files with optimum cost
greedy_methods/optimal_merge_pattern.py:43:11     - Unknown word (Consider)   -- # Consider two files with minimum
hashes/README.md:10:118    - Unknown word (cipher)       -- used in most SSL/TLS cipher suites. A cipher suite
hashes/README.md:10:253    - Unknown word (aspects)      -- handles the hashing aspects. SHA-1, as we mentioned
hashes/README.md:10:301    - Unknown word (deprecated)   -- mentioned earlier, is now deprecated. SHA-2 is now mandatory
hashes/README.md:10:326    - Unknown word (mandatory)    -- deprecated. SHA-2 is now mandatory. SHA-2 is sometimes
hashes/README.md:10:381    - Unknown word (variants)     -- known as SHA-256, though variants with longer bit lengths
hashes/README.md:10:406    - Unknown word (lengths)      -- variants with longer bit lengths are also available.
hashes/README.md:10:52     - Unknown word (probably)     -- Hashing Algorithm and it’s probably best known as the hashing
hashes/README.md:13:111    - Unknown word (collaborative) -- Algorithm. It was a collaborative effort between both
hashes/README.md:13:231    - Unknown word (lose)          -- which was beginning to lose potency against brute
hashes/README.md:13:236    - Unknown word (potency)       -- was beginning to lose potency against brute force
hashes/README.md:14:119    - Unknown word (regardless)    -- will remain 256 bits regardless of the size of the plaintext
hashes/README.md:14:209    - Unknown word (similar)       -- in the SHA family are similar to SHA 256 in some ways
hashes/README.md:14:39     - Unknown word (refers)        -- the 256 in the name refers to the final hash digest
hashes/README.md:14:5      - Unknown word (importance)    -- The importance of the 256 in the name
hashes/README.md:14:53     - Unknown word (final)         -- the name refers to the final hash digest value, i
hashes/README.md:17:131    - Unknown word (wide)            -- formula used to validate a wide range of identification
hashes/README.md:17:145    - Unknown word (identification)  -- validate a wide range of identification numbers, including credit
hashes/README.md:17:186    - Unknown word (card)            -- numbers, including credit card numbers, IMEI numbers
hashes/README.md:17:200    - Unknown word (IMEI)            -- credit card numbers, IMEI numbers, and Canadian
hashes/README.md:17:218    - Unknown word (Canadian)        -- numbers, IMEI numbers, and Canadian Social Insurance Numbers
hashes/README.md:17:227    - Unknown word (Social)          -- numbers, and Canadian Social Insurance Numbers. A
hashes/README.md:17:26     - Unknown word (renowned)      -- Luhn algorithm, also renowned as the modulus 10 or
hashes/README.md:17:268    - Unknown word (mathematicians)  -- Numbers. A community of mathematicians developed the LUHN formula
hashes/README.md:17:297    - Unknown word (LUHN)            -- mathematicians developed the LUHN formula in the late
hashes/README.md:17:355    - Unknown word (cards)           -- Companies offering credit cards quickly followed suit
hashes/README.md:17:497    - Unknown word (many)            -- most credit cards and many government identification
hashes/README.md:17:502    - Unknown word (government)      -- credit cards and many government identification numbers
hashes/README.md:17:558    - Unknown word (differentiating) -- as a simple method of differentiating valid figures from mistyped
hashes/README.md:17:593    - Unknown word (mistyped)        -- rentiating valid figures from mistyped or otherwise incorrect
hashes/README.md:17:615    - Unknown word (incorrect)       -- mistyped or otherwise incorrect numbers. It was created
hashes/README.md:17:652    - Unknown word (guard)           -- numbers. It was created to guard against unintentional
hashes/README.md:17:666    - Unknown word (unintentional)   -- created to guard against unintentional errors, not malicious
hashes/README.md:17:692    - Unknown word (malicious)       -- unintentional errors, not malicious attacks.
hashes/README.md:17:79     - Unknown word (straightforward) -- mod 10 algorithm, is a straightforward checksum formula used
hashes/README.md:2:139     - Unknown word (feeling)    -- value (or, if you're feeling fancy, a hash code,
hashes/README.md:2:147     - Unknown word (fancy)      -- or, if you're feeling fancy, a hash code, hash sums
hashes/README.md:2:287     - Unknown word (functionally) -- function. While it is functionally conceivable to reverse
hashes/README.md:2:300     - Unknown word (conceivable)  -- While it is functionally conceivable to reverse-hash stuff
hashes/README.md:2:315     - Unknown word (reverse)      -- functionally conceivable to reverse-hash stuff, the required
hashes/README.md:2:59      - Unknown word (specified)  -- amount of data to a specified size using an algorithm
hashes/README.md:3:1       - Unknown word (Unlike)       -- Unlike encryption, which is
hashes/README.md:3:144     - Unknown word (altered)      -- of data has not been altered—that it is authentic
hashes/README.md:3:163     - Unknown word (authentic)    -- been altered—that it is authentic. In other words, it
hashes/README.md:3:208     - Unknown word (checksum)     -- words, it functions as a checksum.
hashes/README.md:7:101     - Unknown word (made)         -- is hashing algorithm made by Ray Rivest that is
hashes/README.md:7:113     - Unknown word (Rivest)       -- algorithm made by Ray Rivest that is known to suffer
hashes/README.md:7:137     - Unknown word (suffer)       -- Rivest that is known to suffer vulnerabilities. It
hashes/README.md:7:209     - Unknown word (Currently)    -- the successor to MD4. Currently MD6 is in the works
hashes/README.md:7:266     - Unknown word (removed)      -- as of 2009 Rivest had removed it from NIST consideration
hashes/README.md:7:46      - Unknown word (gained)       -- algorithms that has gained widespread acceptance
hashes/README.md:7:53      - Unknown word (widespread)   -- algorithms that has gained widespread acceptance. MD5 is hashing
hashes/README.md:7:64      - Unknown word (acceptance)   -- has gained widespread acceptance. MD5 is hashing algorithm
hashes/adler32.py:11:5      - Unknown word (ADLER)      -- MOD_ADLER = 65521
hashes/adler32.py:14:5      - Unknown word (adler)      -- def adler32(plain_text: str)
hashes/adler32.py:17:18     - Unknown word (evaluates)  -- Iterates and evaluates a new value for each
hashes/adler32.py:3:22      - Unknown word (redundancy) -- Compared to a cyclic redundancy check of the same length
hashes/adler32.py:3:62      - Unknown word (trades)     -- the same length, it trades reliability for
hashes/adler32.py:4:23      - Unknown word (latter)     -- speed (preferring the latter).
hashes/adler32.py:4:8       - Unknown word (preferring) -- speed (preferring the latter).
hashes/adler32.py:5:49      - Unknown word (slightly)   -- than Fletcher-16, and slightly less reliable than
hashes/chaos_machine.py:19:16     - Unknown word (Dynamical)  -- # Choosing Dynamical Systems (All)
hashes/chaos_machine.py:19:7      - Unknown word (Choosing)   -- # Choosing Dynamical Systems (All
hashes/chaos_machine.py:21:11     - Unknown word (Evolution)  -- # Evolution Parameter
hashes/chaos_machine.py:24:27     - Unknown word (Orbit)      -- # Control Theory: Orbit Change
hashes/chaos_machine.py:27:27     - Unknown word (Trajectory) -- # Control Theory: Trajectory Change
hashes/chaos_machine.py:30:48     - Unknown word (Jumps)      -- Transition Function) - Jumps
hashes/chaos_machine.py:32:34     - Unknown word (Saving)     -- params_space[key] = r  # Saving to Parameters Space
hashes/chaos_machine.py:45:32     - Unknown word (Marsaglia)  -- (Xorshift by George Marsaglia)
hashes/chaos_machine.py:45:7      - Unknown word (PRNG)       -- # PRNG (Xorshift by George
hashes/chaos_machine.py:65:16     - Unknown word (Chaotic)    -- # Choosing Chaotic Data
hashes/chaos_machine.py:84:7      - Unknown word (Initialization) -- # Initialization
hashes/chaos_machine.py:94:11     - Unknown word (controlling)    -- # for controlling
hashes/chaos_machine.py:97:7      - Unknown word (Pulling)        -- # Pulling Data (Output)
hashes/djb2.py:14:8      - Unknown word (deficient)  -- 3. deficient number
hashes/djb2.py:29:15     - Unknown word (scramble)   -- >>> djb2('scramble bits')
hashes/djb2.py:2:49      - Unknown word (Bernstein)  -- first reported by Dan Bernstein many years ago in comp
hashes/djb2.py:3:40      - Unknown word (favored)    -- this algorithm (now favored by Bernstein) uses xor
hashes/djb2.py:7:23      - Unknown word (adequately) -- It has never been adequately explained.
hashes/djb2.py:7:34      - Unknown word (explained)  -- never been adequately explained.
hashes/enigma_machine.py:2:1       - Unknown word (gear)       -- gear_one = list(range(len
hashes/fletcher16.py:13:5      - Unknown word (fletcher)    -- def fletcher16(text: str) -> int
hashes/fletcher16.py:19:21     - Unknown word (onethousandfourhundredthirtyfour) -- >>> fletcher16('onethousandfourhundredthirtyfour')
hashes/fletcher16.py:3:10      - Unknown word (devised)    -- checksum devised by John G. Fletcher
hashes/fletcher16.py:3:21      - Unknown word (John)       -- checksum devised by John G. Fletcher (1934-2
hashes/fletcher16.py:3:53      - Unknown word (Lawrence)   -- Fletcher (1934-2012) at Lawrence Livermore Labs
hashes/fletcher16.py:3:62      - Unknown word (Livermore)  -- 4-2012) at Lawrence Livermore Labs
hashes/fletcher16.py:4:8       - Unknown word (late)       -- in the late 1970s.[1] The objective
hashes/fletcher16.py:5:36      - Unknown word (approaching) -- detection properties approaching those of a cyclic
hashes/fletcher16.py:6:51      - Unknown word (effort)      -- lower computational effort associated
hashes/hamming_code.py:11:22     - Unknown word (uncorrected)       -- without detection of uncorrected errors. By contrast
hashes/hamming_code.py:12:1      - Unknown word (parity)            -- parity code cannot correct
hashes/hamming_code.py:157:7     - Unknown word (Parity)            -- # Parity bit counter
hashes/hamming_code.py:18:56     - Unknown word (emitter)           -- encoding the message (emitterConverter)
hashes/hamming_code.py:1:36      - Unknown word (Gabriel)    -- Gustavo A. Amorim & Gabriel Kunz
hashes/hamming_code.py:1:44      - Unknown word (Kunz)       -- A. Amorim & Gabriel Kunz
hashes/hamming_code.py:20:56     - Unknown word (receptor)          -- decoding the message (receptorConverter)
hashes/hamming_code.py:24:63     - Unknown word (Pari)              -- many parity bits (sizePari)
hashes/hamming_code.py:268:5     - Unknown word (Receiv)            -- dataReceiv, ack = receptorConverter
hashes/hamming_code.py:26:33     - Unknown word (purposes)          -- is desired (for test purposes) to select a bit to
hashes/hamming_code.py:284:19    - Unknown word (transmission)      -- print("Data after transmission -> " + "".join(dataOut
hashes/hamming_code.py:28:9      - Unknown word (Lastly)            -- Lastly, the variable of the
hashes/hamming_code.py:37:9      - Unknown word (decodes)           -- decodes the message using the
hashes/hamming_code.py:42:38     - Unknown word (forced)            -- the message that was forced the error
hashes/hamming_code.py:52:50     - Unknown word (surrogatepass)     -- encoding="utf-8", errors="surrogatepass"):
hashes/hamming_code.py:75:28     - Unknown word (transmitted)       -- return: message to be transmitted by unreliable medium
hashes/hamming_code.py:75:43     - Unknown word (unreliable)        -- to be transmitted by unreliable medium
hashes/hamming_code.py:8:53      - Unknown word (telecommunication) -- wiki/Hamming_code - In telecommunication,
hashes/hamming_code.py:9:44      - Unknown word (correcting)        -- family of linear error-correcting codes. Hamming
hashes/luhn.py:28:13     - Unknown word (doubled)    -- doubled: int = digit * 2
hashes/luhn.py:6:8       - Unknown word (luhn)       -- def is_luhn(string: str) -> bool
hashes/md5.py:136:5     - Unknown word (Splits)                 -- Splits bit string into blocks
hashes/md5.py:148:41    - Unknown word (there'll)               -- bit_string) == 512, so there'll be 1 block. The block
hashes/md5.py:237:23    - Unknown word (unsigned)               -- (a + b) as an unsigned 32-bit int
hashes/md5.py:2:38      - Unknown word (that's)     -- algorithm is a hash function that's commonly used as a checksum
hashes/md5.py:30:38     - Unknown word (abcdfghijklmnopqrstuvw) -- little_endian(b'1234567890abcdfghijklmnopqrstuvw')
hashes/md5.py:318:54    - Unknown word (Üñîçø)                  -- letters.encode("utf-8"), "Üñîçø∂é".encode("utf-8"),
hashes/md5.py:31:25     - Unknown word (abcdfg)                 -- b'pqrstuvwhijklmno90abcdfg12345678'
hashes/md5.py:31:7      - Unknown word (pqrstuvwhijklmno)       -- b'pqrstuvwhijklmno90abcdfg12345678'
hashes/md5.py:335:11    - Unknown word (amounts)                -- shift_amounts = [
hashes/md5.py:3:13      - Unknown word (corruption) -- detect data corruption. The algorithm works
hashes/md5.py:431:15    - Unknown word (hashed)                 -- # Add hashed chunk to running total
hashes/md5.py:50:14     - Unknown word (Suppose)                -- Example: Suppose the input is the following
hashes/md5.py:8:1       - Unknown word (Although)   -- Although MD5 was used as a cryptograph
hashes/md5.py:8:28      - Unknown word (cryptographic) -- Although MD5 was used as a cryptographic hash function in the
hashes/md5.py:8:63      - Unknown word (past)          -- hash function in the past, it's since
hashes/md5.py:9:6       - Unknown word (cracked)       -- been cracked, so it shouldn't be
hashes/sdbm.py:11:54     - Unknown word (gawk)             -- faster version used in gawk. [there is even a faster
hashes/sdbm.py:12:1      - Unknown word (duff)             -- duff-device version]
hashes/sdbm.py:13:44     - Unknown word (thin)             -- 9 was picked out of thin air while experimenting
hashes/sdbm.py:13:59     - Unknown word (experimenting)    -- out of thin air while experimenting with
hashes/sdbm.py:16:56     - Unknown word (sleepycat)        -- in berkeley db (see sleepycat) and elsewhere.
hashes/sdbm.py:2:32      - Unknown word (sdbm)       -- algorithm was created for sdbm (a public-domain reimplementa
hashes/sdbm.py:2:54      - Unknown word (reimplementation) -- sdbm (a public-domain reimplementation of ndbm)
hashes/sdbm.py:4:28      - Unknown word (scrambling)       -- found to do well in scrambling bits, causing better
hashes/sdbm.py:5:11      - Unknown word (splits)           -- and fewer splits.
hashes/sha1.py:141:36    - Unknown word (commented)     -- unittest.main() has been commented out because we probably
hashes/sha1.py:14:71     - Unknown word (communicating) -- property is useful for communicating
hashes/sha1.py:21:54     - Unknown word (expanded)      -- Each block must be expanded and compressed.
hashes/sha1.py:37:25     - Unknown word (Allan)         -- >>> SHA1Hash(bytes('Allan', 'utf-8')).final_hash
hashes/sha1.py:43:9      - Unknown word (Initiates)     -- Initiates the variables data and
hashes/sha1.py:55:61     - Unknown word (rotates)       -- other methods. Left rotates n by b.
hashes/sha1.py:80:48     - Unknown word (unpacks)       -- block of length 64, unpacks it to a list of integers
hashes/sha1.py:92:9      - Unknown word (expansion)     -- expansion).
hashes/sha1.py:93:64     - Unknown word (copied)        -- that was initialized is copied to a,b,c,d,e
hashes/sha1.py:94:41     - Unknown word (undergo)       -- variables a,b,c,d,e undergo several changes. After
hashes/sha256.py:199:38    - Unknown word (Inherits)   -- for the SHA256 class. Inherits the TestCase class from
hashes/sha256.py:1:14      - Unknown word (Yathurshan) -- # Author: M. Yathurshan
hashes/sha256.py:38:14     - Unknown word (hashes)     -- self.hashes = [
index.md:2:5       - Unknown word (toctree)    -- ```{toctree}
index.md:6:6       - Unknown word (CONTRIBUTING) -- <!-- CONTRIBUTING.md must be the FIRST
knapsack/README.md:11:271    - Unknown word (large)         -- the total value is as large as possible. It derives
knapsack/README.md:11:293    - Unknown word (derives)       -- large as possible. It derives its name from the problem
knapsack/README.md:11:327    - Unknown word (faced)         -- name from the problem faced by someone who is constrained
knapsack/README.md:11:336    - Unknown word (someone)       -- the problem faced by someone who is constrained by
knapsack/README.md:11:351    - Unknown word (constrained)   -- faced by someone who is constrained by a fixed-size knapsack
knapsack/README.md:11:38     - Unknown word (combinatorial) -- problem is a problem in combinatorial optimization: Given
knapsack/README.md:11:397    - Unknown word (fill)          -- size knapsack and must fill it with the most valuable
knapsack/README.md:11:419    - Unknown word (valuable)      -- fill it with the most valuable items. The problem often
knapsack/README.md:11:472    - Unknown word (allocation)    -- often arises in resource allocation where the decision makers
knapsack/README.md:11:502    - Unknown word (makers)        -- allocation where the decision makers have to choose from
knapsack/README.md:13:183    - Unknown word (Tobias)        -- works of mathematician Tobias Dantzig (1884–1956)
knapsack/README.md:13:190    - Unknown word (Dantzig)       -- mathematician Tobias Dantzig (1884–1956), and refers
knapsack/README.md:13:229    - Unknown word (commonplace)   -- , and refers to the commonplace problem of packing the
knapsack/README.md:13:252    - Unknown word (packing)       -- commonplace problem of packing the most valuable or
knapsack/README.md:13:302    - Unknown word (overloading)   -- useful items without overloading the luggage.
knapsack/README.md:13:31     - Unknown word (studied)       -- knapsack problem has been studied for more than a century
knapsack/README.md:13:318    - Unknown word (luggage)       -- without overloading the luggage.
knapsack/README.md:13:69     - Unknown word (early)         -- than a century, with early works dating as far
knapsack/README.md:13:81     - Unknown word (dating)        -- century, with early works dating as far back as 1897
knapsack/README.md:13:95     - Unknown word (back)          -- works dating as far back as 1897 The name "knapsack
knapsack/README.md:20:82     - Unknown word (METHODNAME)    -- and `help(CLASSNAME.METHODNAME)`.
knapsack/README.md:3:18      - Unknown word (taken)      -- This overview is taken from:
knapsack/README.md:3:6       - Unknown word (overview)   -- This overview is taken from:
knapsack/greedy_knapsack.py:15:65     - Unknown word (maxmum)     -- shopkeeper can make given maxmum weight that can
knapsack/greedy_knapsack.py:16:4      - Unknown word (carried)    -- be carried.
knapsack/greedy_knapsack.py:38:27     - Unknown word (Profit)     -- raise ValueError("Profit can not be negative
knapsack/greedy_knapsack.py:5:18      - Unknown word (bags)       -- A shopkeeper has bags of wheat that each have
knapsack/greedy_knapsack.py:5:26      - Unknown word (wheat)      -- shopkeeper has bags of wheat that each have different
knapsack/greedy_knapsack.py:5:3       - Unknown word (shopkeeper) -- A shopkeeper has bags of wheat that
knapsack/greedy_knapsack.py:5:79      - Unknown word (profits)    -- weights and different profits.
knapsack/greedy_knapsack.py:63:51     - Unknown word (encounter)  -- weight but index always encounter the very first element
knapsack/greedy_knapsack.py:64:19     - Unknown word (curb)       -- only. To curb this alter the values
knapsack/knapsack.py:11:5      - Unknown word (whereby)    -- whereby each weight w has a
knapsack/knapsack.py:20:23     - Unknown word (cause)      -- The result is 220 cause the values of 100 and
knapsack/recursive_approach_knapsack.py:29:38     - Unknown word (looking)    -- the element we are looking at
knapsack/tests/test_knapsack.py:4:21      - Unknown word (Schröder)   -- @author: Dr. Tobias Schröder
linear_algebra/README.md:15:7      - Unknown word (constructor) -- - constructor(components) : init the
linear_algebra/README.md:18:48     - Unknown word (indexed)     -- the i-th component (0-indexed)
linear_algebra/README.md:19:39     - Unknown word (length)      -- ) : gets the size / length of the vector (number
linear_algebra/README.md:20:40     - Unknown word (eulidean)    -- length() : returns the eulidean length of the vector
linear_algebra/README.md:21:7      - Unknown word (operator)    -- - operator + : vector addition
linear_algebra/README.md:31:12     - Unknown word (axpy)        -- - function axpy(scalar, vector1, vector
linear_algebra/README.md:69:48     - Unknown word (bytecode)    -- directly use the Python bytecode file `lib.pyc`.
linear_algebra/gaussian_elimination.py:11:5      - Unknown word (retroactive) -- def retroactive_resolution(
linear_algebra/gaussian_elimination.py:2:12      - Unknown word (elimination) -- | Gaussian elimination method for solving a
linear_algebra/gaussian_elimination.py:2:3       - Unknown word (Gaussian)   -- | Gaussian elimination method for
linear_algebra/gaussian_elimination.py:74:7      - Unknown word (augmented)   -- # augmented matrix
linear_algebra/jacobi_iteration_method.py:127:21    - Unknown word (denom)      -- denom = table[row][col]
linear_algebra/jacobi_iteration_method.py:138:22    - Unknown word (diag)       -- denominator = np.diag(coefficient_matrix)
linear_algebra/jacobi_iteration_method.py:13:5      - Unknown word (jacobi)     -- def jacobi_iteration_method(
linear_algebra/jacobi_iteration_method.py:21:67     - Unknown word (diagonally) -- solutions of strictly diagonally dominant
linear_algebra/lu_decomposition.py:10:24     - Unknown word (singular)      -- - If the matrix is singular (i.e., not invertible
linear_algebra/lu_decomposition.py:11:32     - Unknown word (independent)   -- , it has k linearly independent columns), then it has
linear_algebra/lu_decomposition.py:2:18      - Unknown word (decomposition) -- Lower-upper (LU) decomposition factors a matrix as
linear_algebra/lu_decomposition.py:6:24      - Unknown word (invertible)    -- - If the matrix is invertible, then it has an LU decomposit
linear_algebra/lu_decomposition.py:7:39      - Unknown word (minors)        -- its leading principal minors are non-zero (see
linear_algebra/src/conjugate_gradient.py:106:34    - Unknown word (residual)     -- Initialize solution guess, residual, search direction.
linear_algebra/src/conjugate_gradient.py:131:25    - Unknown word (Krylov)       -- # Calculate new Krylov subspace scale.
linear_algebra/src/conjugate_gradient.py:133:27    - Unknown word (conjuage)     -- # Calculate new A conjuage search direction.
linear_algebra/src/conjugate_gradient.py:14:56     - Unknown word (definite)   -- is symmetric positive definite.
linear_algebra/src/conjugate_gradient.py:40:27     - Unknown word (eignevectors) -- Get eigenvalues and eignevectors for a symmetric matrix
linear_algebra/src/conjugate_gradient.py:56:22     - Unknown word (diminesion)   -- spd_matrix is an diminesion x dimensions symmetric
linear_algebra/src/conjugate_gradient.py:81:45     - Unknown word (Definite)     -- NxN Symmetric Positive Definite (SPD) matrix.
linear_algebra/src/gaussian_elimination_pivoting.py:17:61     - Unknown word (Lecture)    -- cs357/su2013/lect.htm Lecture 7
linear_algebra/src/lib.py:124:13    - Unknown word (prods)      -- prods = [self.__components
linear_algebra/src/lib.py:261:9     - Unknown word (cofactor)   -- cofactor(x: int, y: int): returns
linear_algebra/src/polynom_for_points.py:9:47      - Unknown word (fitting)    -- program cannot work out a fitting polynomial.
linear_algebra/src/power_iteration.py:110:44    - Unknown word (hermetian)    -- used for symmetric or hermetian matrices).
linear_algebra/src/power_iteration.py:15:41     - Unknown word (Hermitian)  -- must be either real or Hermitian.
linear_algebra/src/power_iteration.py:25:12     - Unknown word (Scalar)     -- Float. Scalar.
linear_algebra/src/power_iteration.py:45:15     - Unknown word (iscomplexobj) -- assert np.iscomplexobj(input_matrix) == np
linear_algebra/src/power_iteration.py:49:58     - Unknown word (conj)         -- matrix, input_matrix.conj().T)
linear_algebra/src/power_iteration.py:51:11     - Unknown word (convergence)  -- # Set convergence to False. Will define
linear_algebra/src/power_iteration.py:64:16     - Unknown word (rayleigh)     -- # Find rayleigh quotient
linear_algebra/src/power_iteration.py:64:25     - Unknown word (quotient)     -- # Find rayleigh quotient
linear_algebra/src/power_iteration.py:91:22     - Unknown word (triu)         -- imag_matrix = np.triu(1j * complex_input_matrix
linear_algebra/src/rayleigh_quotient.py:10:8      - Unknown word (hermitian)  -- def is_hermitian(matrix: np.ndarray)
linear_algebra/src/schur_complement.py:21:38     - Unknown word (Boyd)       -- Convex Optimization - Boyd and Vandenberghe, A
linear_algebra/src/schur_complement.py:21:47     - Unknown word (Vandenberghe) -- Optimization - Boyd and Vandenberghe, A.5.5
linear_algebra/src/test_linear_algebra.py:150:9     - Unknown word (cofactors)  -- cofactors = [[-3, 14, -10], [
linear_algebra/src/transformations_2d.py:2:24      - Unknown word (regularly)  -- Transformations are regularly used in Linear Algebra
linear_algebra/src/transformations_2d.py:4:28      - Unknown word (reflection) -- added the codes for reflection, projection, scaling
linear_algebra/src/transformations_2d.py:4:40      - Unknown word (projection) -- codes for reflection, projection, scaling and rotation
linear_programming/simplex.py:125:11    - Unknown word (Pivot)        -- # Pivot row is chosen as having
linear_programming/simplex.py:132:9     - Unknown word (dividend)     -- dividend = self.tableau[s, -
linear_programming/simplex.py:137:29    - Unknown word (nans)         -- # Array filled with nans
linear_programming/simplex.py:142:9     - Unknown word (quotients)    -- quotients = np.divide(dividend
linear_programming/simplex.py:145:14    - Unknown word (compensate)   -- # to compensate for earlier exclusion
linear_programming/simplex.py:145:37    - Unknown word (exclusion)    -- compensate for earlier exclusion of objective columns
linear_programming/simplex.py:150:12    - Unknown word (Pivots)       -- """Pivots on value on the intersection
linear_programming/simplex.py:168:18    - Unknown word (coeff)        -- for idx, coeff in enumerate(self.tableau
linear_programming/simplex.py:174:12    - Unknown word (Exits)        -- """Exits first phase of the two
linear_programming/simplex.py:175:30    - Unknown word (completes)    -- rows and columns, or completes the algorithm if exiting
linear_programming/simplex.py:21:7      - Unknown word (Tableau)    -- class Tableau:
linear_programming/simplex.py:22:8      - Unknown word (Operate)    -- """Operate on simplex tableaus
linear_programming/simplex.py:258:25    - Unknown word (minimisation) -- # Non standard: minimisation and equalities
linear_programming/simplex.py:295:29    - Unknown word (interpret)    -- return self.interpret_tableau()
linear_programming/simplex.py:2:30      - Unknown word (simplex)    -- implementation of the simplex algorithm for solving
linear_programming/simplex.py:321:15    - Unknown word (Gives)        -- # Gives indices of nonzero entries
linear_programming/simplex.py:326:21    - Unknown word (rowidx)       -- nonzero_rowidx = nonzero[0][0]
linear_programming/simplex.py:37:28     - Unknown word (artificial) -- ValueError: number of (artificial) variables must be a
linear_programming/simplex.py:40:39     - Unknown word (cycling)    -- iteration number to prevent cycling
linear_programming/simplex.py:44:15     - Unknown word (tableau)    -- self, tableau: np.ndarray, n_vars
linear_programming/simplex.py:67:51     - Unknown word (inequalities) -- variables added to make inequalities into equalities
linear_programming/simplex.py:67:69     - Unknown word (equalities)   -- make inequalities into equalities
linear_programming/simplex.py:70:11     - Unknown word (Objectives)   -- # Objectives for each stage
linear_programming/simplex.py:71:14     - Unknown word (objectives)   -- self.objectives = ["max"]
linear_programming/simplex.py:73:39     - Unknown word (minimise)     -- stage simplex, first minimise then maximise
linear_programming/simplex.py:73:53     - Unknown word (maximise)     -- first minimise then maximise
linear_programming/simplex.py:8:36      - Unknown word (tableaus)   -- programs to simplex tableaus, and the steps taken
machine_learning/apriori_algorithm.py:22:46     - Unknown word (bread)         -- butter'], ['milk', 'bread'], ['milk', 'bread'
machine_learning/apriori_algorithm.py:22:74     - Unknown word (chips)         -- ['milk', 'bread', 'chips']]
machine_learning/apriori_algorithm.py:22:8      - Unknown word (milk)          -- [['milk'], ['milk', 'butter
machine_learning/apriori_algorithm.py:2:80      - Unknown word (basket)     -- also known as market basket
machine_learning/apriori_algorithm.py:30:17     - Unknown word (pruning)       -- The goal of pruning is to filter out candidate
machine_learning/apriori_algorithm.py:35:5      - Unknown word (Prunes)        -- Prunes candidate itemsets that
machine_learning/apriori_algorithm.py:3:40      - Unknown word (relationships) -- discover interesting relationships or associations among
machine_learning/apriori_algorithm.py:47:5      - Unknown word (pruned)        -- pruned = []
machine_learning/apriori_algorithm.py:4:12      - Unknown word (transactional) -- items in a transactional or relational database
machine_learning/apriori_algorithm.py:59:5      - Unknown word (apriori)       -- def apriori(data: list[list[str
machine_learning/apriori_algorithm.py:6:55      - Unknown word (buys)          -- states: "If a customer buys item A and item B, then
machine_learning/apriori_algorithm.py:7:50      - Unknown word (relationship)  -- This rule suggests a relationship between items A, B,
machine_learning/apriori_algorithm.py:83:17     - Unknown word (infrequent)    -- # Prune infrequent itemsets
machine_learning/apriori_algorithm.py:8:17      - Unknown word (customers)     -- indicating that customers who purchased A and
machine_learning/apriori_algorithm.py:8:31      - Unknown word (purchased)     -- indicating that customers who purchased A and B are more likely
machine_learning/astar.py:10:13     - Unknown word (planning)   -- essentially planning ahead at each step so
machine_learning/astar.py:11:42     - Unknown word (brains)     -- as an algorithm with brains.
machine_learning/astar.py:23:63     - Unknown word (arrived)    -- object visited before we arrived at this cell.
machine_learning/astar.py:2:18      - Unknown word (combines)   -- The A* algorithm combines features of uniform
machine_learning/astar.py:65:19     - Unknown word (cord)       -- neughbour_cord = [
machine_learning/astar.py:65:9      - Unknown word (neughbour)  -- neughbour_cord = [
machine_learning/astar.py:9:18      - Unknown word (introduces) -- The A* algorithm introduces a heuristic into a regular
machine_learning/automatic_differentiation.py:198:9     - Unknown word (Executes)      -- Executes at the creation of class
machine_learning/automatic_differentiation.py:199:55    - Unknown word (singleton)     -- This class follows singleton
machine_learning/automatic_differentiation.py:230:54    - Unknown word (gradients)     -- graph for calculating gradients.
machine_learning/automatic_differentiation.py:249:17    - Unknown word (accumulation)  -- Reverse accumulation of partial derivatives
machine_learning/automatic_differentiation.py:262:17    - Unknown word (deriv)         -- partial_deriv = defaultdict(lambda
machine_learning/automatic_differentiation.py:272:17    - Unknown word (dparam)        -- dparam_doutput = self.derivative
machine_learning/automatic_differentiation.py:272:24    - Unknown word (doutput)       -- dparam_doutput = self.derivative(param
machine_learning/automatic_differentiation.py:273:24    - Unknown word (dtarget)       -- dparam_dtarget = dparam_doutput * partial
machine_learning/automatic_differentiation.py:290:13    - Unknown word (Derivative)    -- Derivative of input variable with
machine_learning/automatic_differentiation.py:2:1       - Unknown word (Demonstration) -- Demonstration of the Automatic Differentiat
machine_learning/automatic_differentiation.py:68:14     - Unknown word (Gradient)      -- with GradientTracker() as tracker
machine_learning/automatic_differentiation.py:6:9       - Unknown word (Poojan)        -- Author: Poojan Smart
machine_learning/data_transformations.py:12:24     - Unknown word (Descent)    -- particularly Gradient Descent).
machine_learning/data_transformations.py:14:1      - Unknown word (Standardization) -- Standardization Wikipedia: https://en
machine_learning/data_transformations.py:15:66     - Unknown word (normally)        -- numerical data to a normally distributed
machine_learning/data_transformations.py:17:55     - Unknown word (standardization) -- rmalization. The equation for standardization is
machine_learning/data_transformations.py:22:29     - Unknown word (experiments)     -- often recommended to run experiments with both to see which
machine_learning/data_transformations.py:23:1      - Unknown word (Additionally)    -- Additionally, a few rules of thumb
machine_learning/data_transformations.py:26:59     - Unknown word (outliers)        -- has extreme values / outliers, use standardization
machine_learning/data_transformations.py:37:44     - Unknown word (rounded)         -- of normalized values (rounded to ndigits decimal places
machine_learning/data_transformations.py:53:14     - Unknown word (standardized)    -- Return a standardized list of values.
machine_learning/data_transformations.py:55:40     - Unknown word (standardize)     -- a list of values to standardize
machine_learning/decision_tree.py:105:13    - Unknown word (predictor)  -- the predictor
machine_learning/decision_tree.py:155:49    - Unknown word (trained)    -- Decision tree not yet trained")
machine_learning/decision_tree.py:160:17    - Unknown word (Tres)       -- """Decision Tres test class"""
machine_learning/decision_tree.py:204:32    - Unknown word (squarred)   -- doctest.testmod(name="mean_squarred_error", verbose=True
machine_learning/dimensionality_reduction.py:114:9     - Unknown word (filtered)      -- filtered_eigenvectors = eigenvectors
machine_learning/dimensionality_reduction.py:126:12    - Unknown word (discriminant)  -- def linear_discriminant_analysis(
machine_learning/dimensionality_reduction.py:1:29      - Unknown word (Gasco)      -- Copyright (c) 2023 Diego Gasco (diego.gasco99@gmail
machine_learning/dimensionality_reduction.py:1:62      - Unknown word (Diegomangasco) -- gasco99@gmail.com), Diegomangasco on GitHub
machine_learning/dimensionality_reduction.py:48:11     - Unknown word (Centralize)    -- # Centralize the data of class i
machine_learning/dimensionality_reduction.py:7:1       - Unknown word (Notes)         -- Notes:
machine_learning/forecasting/run.py:125:62    - Unknown word (held)          -- how much online event held in one day,
machine_learning/forecasting/run.py:126:29    - Unknown word (saturday)      -- what day is that(sunday-saturday)
machine_learning/forecasting/run.py:151:7     - Unknown word (voting)        -- # voting system with forecasting
machine_learning/forecasting/run.py:18:35     - Unknown word (Normalizer)  -- preprocessing import Normalizer
machine_learning/forecasting/run.py:24:44     - Unknown word (mtch)        -- train_usr: list, train_mtch: list, test_dt: list
machine_learning/forecasting/run.py:2:18      - Unknown word (forecasting) -- this is code for forecasting
machine_learning/forecasting/run.py:45:45     - Unknown word (exog)        -- data (total_user, with exog data = total_event)
machine_learning/forecasting/run.py:4:28      - Unknown word (shop)        -- you have an online shop and for some reason
machine_learning/forecasting/run.py:53:5      - Unknown word (seasonal)    -- seasonal_order = (1, 1, 1, 7
machine_learning/forecasting/run.py:57:27     - Unknown word (disp)        -- model_fit = model.fit(disp=False, maxiter=600,
machine_learning/forecasting/run.py:5:53      - Unknown word (supposed)    -- that u expected are not supposed to be)
machine_learning/forecasting/run.py:66:22     - Unknown word (principles)  -- it uses the same principles as the SVM for classification
machine_learning/forecasting/run.py:68:8      - Unknown word (suits)       -- it suits better for regression
machine_learning/forecasting/run.py:75:51     - Unknown word (epsilon)     -- rbf", C=1, gamma=0.1, epsilon=0.1)
machine_learning/forecasting/run.py:77:7      - Unknown word (pred)        -- y_pred = regressor.predict
machine_learning/forecasting/run.py:81:5      - Unknown word (interquartile) -- def interquartile_range_checker(train
machine_learning/forecasting/run.py:83:22     - Unknown word (interquatile)  -- Optional method: interquatile range
machine_learning/forecasting/run.py:86:59     - Unknown word (outlier)       -- whether some data is outlier or not
machine_learning/forecasting/run.py:8:22      - Unknown word (quite)       -- the data is quite absurd and only a little
machine_learning/forecasting/run.py:8:28      - Unknown word (absurd)      -- the data is quite absurd and only a little^^
machine_learning/forecasting/run.py:91:13     - Unknown word (percentile)    -- q1 = np.percentile(train_user, 25)
machine_learning/frequent_pattern_growth.py:114:9     - Unknown word (tran)        -- for tran_set in data_set:
machine_learning/frequent_pattern_growth.py:220:59    - Unknown word (ascended)    -- the item as they are ascended.
machine_learning/frequent_pattern_growth.py:25:13     - Unknown word (occur)       -- num_occur: The number of occurrences
machine_learning/frequent_pattern_growth.py:287:5     - Unknown word (Mine)        -- Mine the FP-Tree recursively
machine_learning/frequent_pattern_growth.py:293:68    - Unknown word (mined)       -- for the itemsets being mined.
machine_learning/frequent_pattern_growth.py:320:14    - Unknown word (patt)        -- cond_patt_bases = find_prefix
machine_learning/frequent_pattern_growth.py:335:38    - Unknown word (cheese)      -- frozenset(["bread", "milk", "cheese"]),
machine_learning/frequent_pattern_growth.py:337:30    - Unknown word (diapers)     -- frozenset(["bread", "diapers"]),
machine_learning/frequent_pattern_growth.py:5:26      - Unknown word (limitations) -- overcomes some of the limitations of traditional methods
machine_learning/frequent_pattern_growth.py:5:4       - Unknown word (overcomes)  -- It overcomes some of the limitations
machine_learning/frequent_pattern_growth.py:5:41      - Unknown word (traditional) -- of the limitations of traditional methods such as Apriori
machine_learning/gradient_boosting_classifier.py:118:13    - Unknown word (Accuracy)   -- print(f"Accuracy: {accuracy:.2f}")
machine_learning/gradient_boosting_classifier.py:2:35      - Unknown word (iris)       -- datasets import load_iris
machine_learning/gradient_boosting_classifier.py:48:36     - Unknown word (residuals)  -- Calculate the pseudo-residuals
machine_learning/gradient_boosting_classifier.py:50:26     - Unknown word (learner)    -- # Fit a weak learner (e.g., decision tree
machine_learning/gradient_boosting_classifier.py:85:64     - Unknown word (logistic)   -- pseudo-residuals) for logistic loss.
machine_learning/gradient_boosting_classifier.py:9:26      - Unknown word (estimators) -- def __init__(self, n_estimators: int = 100, learning
machine_learning/gradient_descent.py:107:7     - Unknown word (Tune)       -- # Tune these values to set
machine_learning/gradient_descent.py:123:13    - Unknown word (rtol)       -- rtol=relative_error_limit
machine_learning/gradient_descent.py:19:1      - Unknown word (LEARNING)   -- LEARNING_RATE = 0.009
machine_learning/gradient_descent.py:26:31     - Unknown word (pointed)    -- return: error in example pointed by example number.
machine_learning/gradient_descent.py:2:28      - Unknown word (descent)    -- Implementation of gradient descent algorithm for minimizing
machine_learning/gradient_descent.py:38:28     - Unknown word (biased)     -- Note that there is an 'biased input' whose value is
machine_learning/gradient_descent.py:39:15     - Unknown word (explicitly) -- It is not explicitly mentioned in input data
machine_learning/gradient_descent.py:52:54     - Unknown word (fetched)    -- whose output is to be fetched
machine_learning/k_means_clust.py:123:17    - Unknown word (Heterogeneity) -- plt.ylabel("Heterogeneity")
machine_learning/k_means_clust.py:14:5      - Unknown word (heterogeneity) -- - heterogeneity , empty list that will
machine_learning/k_means_clust.py:15:8      - Unknown word (kmeans)        -- to kmeans func.
machine_learning/k_means_clust.py:170:15    - Unknown word (YOUR)          -- # YOUR CODE HERE
machine_learning/k_means_clust.py:214:15    - Unknown word (Customers)     -- 0 # of Customers ClusterSize
machine_learning/k_means_clust.py:215:33    - Unknown word (Proportion)    -- of Customers  ClusterProportion False    0.666667
machine_learning/k_means_clust.py:230:31    - Unknown word (fillna)        -- predicted = predicted.fillna(value=fill_missing_report
machine_learning/k_means_clust.py:232:37    - Unknown word (dtypes)        -- cols = predicted.select_dtypes(np.number).columns
machine_learning/k_means_clust.py:278:23    - Unknown word (proportion)    -- # calculating the proportion of cluster
machine_learning/k_means_clust.py:279:5     - Unknown word (clusterproportion) -- clusterproportion = pd.DataFrame(
machine_learning/k_means_clust.py:280:21    - Unknown word (iloc)              -- clustersize.iloc[:, 2:].to_numpy() /
machine_learning/k_means_clust.py:308:41    - Unknown word (isin)              -- report["Features"].isin(clustering_variables
machine_learning/k_means_clust.py:40:6      - Unknown word (Transfers)     -- 5. Transfers Dataframe into excel
machine_learning/k_means_clust.py:53:10     - Unknown word (MEANS)         -- TAG = "K-MEANS-CLUST/ "
machine_learning/k_means_clust.py:53:16     - Unknown word (CLUST)         -- TAG = "K-MEANS-CLUST/ "
machine_learning/k_means_clust.py:65:25     - Unknown word (dense)         -- # Keep centroids as dense format, as many entries
machine_learning/k_means_clust.py:65:78     - Unknown word (averaging)     -- will be nonzero due to averaging.
machine_learning/k_means_clust.py:89:5      - Unknown word (revise)        -- def revise_centroids(data, k, cluster
machine_learning/k_nearest_neighbours.py:2:44      - Unknown word (parametric) -- kNN) is a simple non-parametric supervised learning
machine_learning/k_nearest_neighbours.py:2:55      - Unknown word (supervised) -- simple non-parametric supervised learning
machine_learning/k_nearest_neighbours.py:4:10      - Unknown word (classified) -- point is classified using its k nearest
machine_learning/k_nearest_neighbours.py:5:27      - Unknown word (occurring)  -- metric. The most commonly occurring label among the neighbours
machine_learning/k_nearest_neighbours.py:60:11     - Unknown word (Distances)  -- # Distances of all points from the
machine_learning/k_nearest_neighbours.py:6:64      - Unknown word (decided)    -- of the given point is decided by a
machine_learning/k_nearest_neighbours.py:7:1       - Unknown word (majority)   -- majority vote.
machine_learning/linear_discriminant_analysis.py:10:51     - Unknown word (representative) -- your training set is representative of the problem.
machine_learning/linear_discriminant_analysis.py:14:32     - Unknown word (estimation)     -- LDA model requires the estimation of statistics from the
machine_learning/linear_discriminant_analysis.py:208:39    - Unknown word (discriminants)  -- appending values of discriminants for each class to 'temp
machine_learning/linear_discriminant_analysis.py:263:45    - Unknown word (fulfill)        -- and validate that it fulfill a condition.
machine_learning/linear_discriminant_analysis.py:298:58    - Unknown word (Groupings)      -- number of classes (Data Groupings): ",
machine_learning/linear_discriminant_analysis.py:318:60    - Unknown word (theirs)         -- instances in classes and theirs means to generate
machine_learning/linear_discriminant_analysis.py:358:16    - Unknown word (Generated)      -- print("Generated Normal Distribution
machine_learning/linear_discriminant_analysis.py:363:26    - Unknown word (Corresponding)  -- print("Generated Corresponding Ys: \n", y)
machine_learning/linear_discriminant_analysis.py:390:11    - Unknown word (Predicting)     -- # Predicting Y values
machine_learning/linear_discriminant_analysis.py:58:49     - Unknown word (entered)        -- of standard deviation entered by usr or default value
machine_learning/linear_discriminant_analysis.py:6:1       - Unknown word (Assumptions) -- Assumptions About Data :
machine_learning/linear_discriminant_analysis.py:74:33     - Unknown word (detecting)      -- corresponding Y flags to detecting classes
machine_learning/linear_discriminant_analysis.py:78:48     - Unknown word (groupings)      -- Number of classes(data groupings) in dataset
machine_learning/linear_regression.py:130:12    - Unknown word (Resultant)  -- print("Resultant Feature vector : ")
machine_learning/linear_regression.py:35:9      - Unknown word (steep)      -- def run_steep_gradient_descent(data
machine_learning/linear_regression.py:3:1       - Unknown word (predictive) -- predictive analysis. The idea is
machine_learning/linear_regression.py:41:39     - Unknown word (weight's)   -- : Feature vector (weight's for our model)
machine_learning/linear_regression.py:4:61      - Unknown word (cautiously) -- should be chosen very cautiously
machine_learning/linear_regression.py:7:56      - Unknown word (CSGO)       -- particular code, I had used a CSGO dataset (ADR vs
machine_learning/linear_regression.py:8:1       - Unknown word (Rating)     -- Rating). We try to best fit
machine_learning/local_weighted_learning/README.md:10:8      - Unknown word (sequence)   -- output_sequence(y) = Output Sequence
machine_learning/local_weighted_learning/README.md:14:23     - Unknown word (ordinary)   -- The steps involved in ordinary linear regression are
machine_learning/local_weighted_learning/README.md:16:10     - Unknown word (phase)      -- Training phase: Compute \theta to minimize
machine_learning/local_weighted_learning/README.md:16:35     - Unknown word (minimize)   -- phase: Compute \theta to minimize the cost. \
machine_learning/local_weighted_learning/README.md:24:155    - Unknown word (shown)      -- between x and y ? as shown below
machine_learning/local_weighted_learning/README.md:24:72     - Unknown word (again)      -- are linear, but there again comes a question can
machine_learning/local_weighted_learning/README.md:29:117    - Unknown word (Rather)     -- fixed set of params. Rather parameters $\theta$
machine_learning/local_weighted_learning/README.md:2:103     - Unknown word (regression) -- parameters such as **linear regression**. \
machine_learning/local_weighted_learning/README.md:32:7      - Unknown word (Computing)  -- While Computing $\theta$ , a higher
machine_learning/local_weighted_learning/README.md:32:74     - Unknown word (vicinity)   -- given to points in the vicinity of x than points farther
machine_learning/local_weighted_learning/README.md:37:27     - Unknown word (lying)      -- is large fr $x^i$'s lying closer to query point
machine_learning/local_weighted_learning/README.md:37:33     - Unknown word (closer)     -- large fr $x^i$'s lying closer to query point $x_i
machine_learning/local_weighted_learning/README.md:3:18      - Unknown word (question)   -- So, here comes a question of what is *linear regression
machine_learning/local_weighted_learning/README.md:40:3      - Unknown word (Typical)    -- A Typical weight can be computed
machine_learning/local_weighted_learning/README.md:44:1      - Unknown word (Where)      -- Where $\tau$ is the bandwidth
machine_learning/local_weighted_learning/README.md:44:61     - Unknown word (distance)   -- that controls $w^i$ distance from x.
machine_learning/local_weighted_learning/README.md:58:20     - Unknown word (conclude)   -- So, here by we can conclude that the weight fall
machine_learning/local_weighted_learning/README.md:58:45     - Unknown word (fall)       -- conclude that the weight fall exponentially as the
machine_learning/local_weighted_learning/README.md:6:17      - Unknown word (Involved)   -- ### Terminology Involved
machine_learning/local_weighted_learning/local_weighted_learning.py:151:10    - Unknown word (preds)       -- def plot_preds(
machine_learning/local_weighted_learning/local_weighted_learning.py:168:16    - Unknown word (yellow)      -- color="yellow",
machine_learning/local_weighted_learning/local_weighted_learning.py:183:28    - Unknown word (bill)        -- training_data_x, total_bill, tip = load_data("tips
machine_learning/local_weighted_learning/local_weighted_learning.py:183:51    - Unknown word (tips)        -- bill, tip = load_data("tips", "total_bill", "tip
machine_learning/local_weighted_learning/local_weighted_learning.py:22:43     - Unknown word (farther)     -- weighted lower if it's farther from the center, and
machine_learning/local_weighted_learning/local_weighted_learning.py:23:14     - Unknown word (spread)      -- controls the spread of the bell curve.
machine_learning/local_weighted_learning/local_weighted_learning.py:25:70     - Unknown word (scatterplot) -- as locally estimated scatterplot
machine_learning/local_weighted_learning/local_weighted_learning.py:26:12     - Unknown word (LOESS)       -- smoothing (LOESS) typically use different
machine_learning/local_weighted_learning/local_weighted_learning.py:2:1       - Unknown word (Locally)    -- Locally weighted linear regression
machine_learning/local_weighted_learning/local_weighted_learning.py:3:39      - Unknown word (prioritizes) -- linear regression that prioritizes data closest to a given
machine_learning/local_weighted_learning/local_weighted_learning.py:7:14      - Unknown word (XᵀWy)        -- β = (XᵀWX)⁻¹(XᵀWy),
machine_learning/local_weighted_learning/local_weighted_learning.py:7:6       - Unknown word (XᵀWX)        -- β = (XᵀWX)⁻¹(XᵀWy),
machine_learning/logistic_regression.py:13:1      - Unknown word (Helpful)    -- Helpful resources:
machine_learning/logistic_regression.py:146:14    - Unknown word (predicting)  -- ) # predicting the value of probability
machine_learning/logistic_regression.py:14:13     - Unknown word (course)     -- Coursera ML course
machine_learning/logistic_regression.py:156:9     - Unknown word (contour)     -- plt.contour(xx1, xx2, probs, [0
machine_learning/logistic_regression.py:39:26     - Unknown word (approaches) -- The sigmoid function approaches a value of 1 as its
machine_learning/logistic_regression.py:40:26     - Unknown word (Opposite)   -- increasing positive. Opposite for negative values
machine_learning/logistic_regression.py:68:19     - Unknown word (quantifies) -- Cost function quantifies the error between predicted
machine_learning/logistic_regression.py:87:9      - Unknown word (estimations) -- >>> estimations = sigmoid_function(np
machine_learning/loss_functions.py:159:57    - Unknown word (CFCE)        -- focal cross-entropy (CFCE) loss between true
machine_learning/loss_functions.py:162:20    - Unknown word (generalization) -- CFCE loss is a generalization of binary focal cross
machine_learning/loss_functions.py:172:23    - Unknown word (weighting)      -- - alpha: Array of weighting factors for each class
machine_learning/loss_functions.py:20:15     - Unknown word (Predicted)  -- - y_pred: Predicted probabilities for class
machine_learning/loss_functions.py:21:50     - Unknown word (instability) -- constant to avoid numerical instability
machine_learning/loss_functions.py:246:5     - Unknown word (cfce)           -- cfce_loss = -np.sum(
machine_learning/loss_functions.py:253:5     - Unknown word (hinge)          -- def hinge_loss(y_true: np.ndarray
machine_learning/loss_functions.py:258:5     - Unknown word (Hinge)          -- Hinge loss = max(0, 1 - true
machine_learning/loss_functions.py:289:11    - Unknown word (losses)         -- hinge_losses = np.maximum(0, 1.0
machine_learning/loss_functions.py:293:5     - Unknown word (huber)          -- def huber_loss(y_true: np.ndarray
machine_learning/loss_functions.py:295:24    - Unknown word (Huber)          -- Calculate the mean Huber loss between the given
machine_learning/loss_functions.py:297:20    - Unknown word (describes)      -- The Huber loss describes the penalty incurred
machine_learning/loss_functions.py:297:42    - Unknown word (incurred)       -- describes the penalty incurred by an estimation procedure
machine_learning/loss_functions.py:337:9     - Unknown word (measures)       -- MSE measures the squared difference
machine_learning/loss_functions.py:368:68    - Unknown word (observed)       -- between ground truth (observed)
machine_learning/loss_functions.py:37:17     - Unknown word (clip)        -- y_pred = np.clip(y_pred, epsilon, 1
machine_learning/loss_functions.py:37:55     - Unknown word (Clip)        -- epsilon, 1 - epsilon)  # Clip predictions to avoid
machine_learning/loss_functions.py:403:18    - Unknown word (logarithmic)    -- def mean_squared_logarithmic_error(y_true: np.ndarray
machine_learning/loss_functions.py:405:51    - Unknown word (MSLE)           -- squared logarithmic error (MSLE) between ground truth
machine_learning/loss_functions.py:409:77    - Unknown word (skewed)         -- useful for dealing with skewed or
machine_learning/loss_functions.py:42:12     - Unknown word (focal)       -- def binary_focal_cross_entropy(
machine_learning/loss_functions.py:443:33    - Unknown word (Percentage)     -- Calculate the Mean Absolute Percentage Error between y_true
machine_learning/loss_functions.py:484:5     - Unknown word (perplexity)     -- def perplexity_loss(
machine_learning/loss_functions.py:490:17    - Unknown word (Perplexity)     -- Compute the Perplexity which useful in predicting
machine_learning/loss_functions.py:500:38    - Unknown word (sentences)      -- Actual label encoded sentences of shape (batch_size
machine_learning/loss_functions.py:501:76    - Unknown word (vocab)          -- size, sentence_length, vocab_size)
machine_learning/loss_functions.py:50:52     - Unknown word (BFCE)        -- focal cross-entropy (BFCE) loss between true labels
machine_learning/loss_functions.py:54:27     - Unknown word (variation)   -- probabilities. It's a variation of binary cross-entropy
machine_learning/loss_functions.py:55:18     - Unknown word (focusing)    -- imbalance by focusing on hard examples.
machine_learning/loss_functions.py:55:5      - Unknown word (imbalance)   -- imbalance by focusing on hard
machine_learning/loss_functions.py:567:7     - Unknown word (Getting)        -- # Getting the matrix containing
machine_learning/loss_functions.py:578:19    - Unknown word (Smooth)         -- Calculate the Smooth L1 Loss between y_true
machine_learning/loss_functions.py:57:5      - Unknown word (BCFE)        -- BCFE = -Σ(alpha * (1 - y
machine_learning/loss_functions.py:593:15    - Unknown word (Specifies)      -- beta: Specifies the threshold at which
machine_learning/loss_functions.py:632:14    - Unknown word (leibler)        -- def kullback_leibler_divergence(y_true: np
machine_learning/loss_functions.py:632:5     - Unknown word (kullback)       -- def kullback_leibler_divergence(y
machine_learning/loss_functions.py:634:19    - Unknown word (Kullback)       -- Calculate the Kullback-Leibler divergence
machine_learning/loss_functions.py:634:28    - Unknown word (Leibler)        -- Calculate the Kullback-Leibler divergence (KL divergence
machine_learning/loss_functions.py:638:48    - Unknown word (generative)     -- often used in training generative models.
machine_learning/loss_functions.py:65:14     - Unknown word (Focusing)    -- - gamma: Focusing parameter for modulating
machine_learning/loss_functions.py:65:37     - Unknown word (modulating)  -- Focusing parameter for modulating the loss (default:
machine_learning/loss_functions.py:66:14     - Unknown word (Weighting)   -- - alpha: Weighting factor for class 1
machine_learning/loss_functions.py:85:5      - Unknown word (bcfe)        -- bcfe_loss = -(
machine_learning/loss_functions.py:93:5      - Unknown word (categorical) -- def categorical_cross_entropy(
machine_learning/lstm/lstm_prediction.py:3:22      - Unknown word (Recurrent)  -- An LSTM is a type of Recurrent Neural Network (RNN
machine_learning/lstm/lstm_prediction.py:3:56      - Unknown word (discussed)  -- Neural Network (RNN) as discussed at:
machine_learning/mfcc.py:115:11    - Unknown word (framed)         -- audio_framed = audio_frames(
machine_learning/mfcc.py:119:20    - Unknown word (Framed)         -- logging.info(f"Framed audio shape: {audio
machine_learning/mfcc.py:123:41    - Unknown word (Hanning)        -- simplicity we will choose the Hanning window.
machine_learning/mfcc.py:124:26    - Unknown word (hann)           -- window = get_window("hann", ftt_size, fftbins
machine_learning/mfcc.py:124:43    - Unknown word (fftbins)        -- window("hann", ftt_size, fftbins=True)
machine_learning/mfcc.py:125:11    - Unknown word (windowed)       -- audio_windowed = audio_framed * window
machine_learning/mfcc.py:127:20    - Unknown word (Windowed)       -- logging.info(f"Windowed audio shape: {audio
machine_learning/mfcc.py:145:28    - Unknown word (cosine)         -- dct_filters = discrete_cosine_transform(dct_filter
machine_learning/mfcc.py:146:14    - Unknown word (coefficents)    -- cepstral_coefficents = np.dot(dct_filters
machine_learning/mfcc.py:14:29     - Unknown word (windowing)      -- using a technique like windowing to reduce spectral leakage
machine_learning/mfcc.py:14:58     - Unknown word (leakage)        -- windowing to reduce spectral leakage.
machine_learning/mfcc.py:186:39    - Unknown word (hopping)        -- length: The length of the hopping (default is 20ms).
machine_learning/mfcc.py:236:7     - Unknown word (Transpose)      -- # Transpose the audio data to have
machine_learning/mfcc.py:237:11    - Unknown word (transposed)     -- audio_transposed = np.transpose(audio
machine_learning/mfcc.py:26:8      - Unknown word (Filterbank)     -- 4. Mel Filterbank:
machine_learning/mfcc.py:270:30    - Unknown word (squaring)       -- Calculate the power by squaring the absolute values
machine_learning/mfcc.py:27:32     - Unknown word (filterbanks)    -- a set of triangular filterbanks spaced in the Mel frequency
machine_learning/mfcc.py:27:44     - Unknown word (spaced)         -- triangular filterbanks spaced in the Mel frequency
machine_learning/mfcc.py:28:43     - Unknown word (mimic)          -- spectrum. These filters mimic the human auditory system
machine_learning/mfcc.py:28:59     - Unknown word (auditory)       -- filters mimic the human auditory system's
machine_learning/mfcc.py:292:17    - Unknown word (mels)           -- def mel_to_freq(mels: float) -> float:
machine_learning/mfcc.py:29:31     - Unknown word (filterbank)     -- frequency response. Each filterbank sums the power spectrum
machine_learning/mfcc.py:2:15      - Unknown word (Cepstral)   -- Mel Frequency Cepstral Coefficients (MFCC)
machine_learning/mfcc.py:2:24      - Unknown word (Coefficients) -- Mel Frequency Cepstral Coefficients (MFCC) Calculation
machine_learning/mfcc.py:2:38      - Unknown word (MFCC)         -- Cepstral Coefficients (MFCC) Calculation
machine_learning/mfcc.py:32:4      - Unknown word (Logarithmic)    -- 5. Logarithmic Compression:
machine_learning/mfcc.py:33:15     - Unknown word (logarithm)      -- - Take the logarithm (typically base 10)
machine_learning/mfcc.py:347:5     - Unknown word (enorm)          -- enorm = 2.0 / (mel_freqs[
machine_learning/mfcc.py:348:34    - Unknown word (newaxis)        -- filters * enorm[:, np.newaxis]
machine_learning/mfcc.py:34:44     - Unknown word (mimics)         -- dynamic range. This step mimics the logarithmic response
machine_learning/mfcc.py:374:11    - Unknown word (Linearly)       -- # Linearly increase values from
machine_learning/mfcc.py:37:13     - Unknown word (Cosine)         -- 6. Discrete Cosine Transform (DCT):
machine_learning/mfcc.py:37:4      - Unknown word (Discrete)       -- 6. Discrete Cosine Transform (DCT
machine_learning/mfcc.py:38:64     - Unknown word (energies)       -- to the log filterbank energies to
machine_learning/mfcc.py:39:62     - Unknown word (decorrelate)    -- transformation helps decorrelate the
machine_learning/mfcc.py:40:30     - Unknown word (captures)       -- filterbank energies and captures the most important features
machine_learning/mfcc.py:412:5     - Unknown word (fmin)           -- fmin_mel = freq_to_mel(freq
machine_learning/mfcc.py:413:5     - Unknown word (fmax)           -- fmax_mel = freq_to_mel(freq
machine_learning/mfcc.py:418:16    - Unknown word (equally)        -- # Generate equally spaced mel frequencies
machine_learning/mfcc.py:436:39    - Unknown word (fbank)          -- num: The number of the fbank filters.
machine_learning/mfcc.py:43:12     - Unknown word (Extraction)     -- 7. Feature Extraction:
machine_learning/mfcc.py:45:6      - Unknown word (Often)          -- Often, the first few coefficients
machine_learning/mfcc.py:467:26    - Unknown word (wavfile)        -- from scipy.io import wavfile
machine_learning/mfcc.py:49:40     - Unknown word (MFCCs)          -- Cepstral Coefficients (MFCCs):
machine_learning/mfcc.py:51:37     - Unknown word (Daniel)         -- Language Processing by Daniel Jurafsky & James H.
machine_learning/mfcc.py:51:44     - Unknown word (Jurafsky)       -- Processing by Daniel Jurafsky & James H. Martin:
machine_learning/mfcc.py:53:45     - Unknown word (tutorial)       -- Cepstral Coefficient (MFCC) tutorial
machine_learning/mfcc.py:55:24     - Unknown word (cepstral)       -- guide-mel-frequency-cepstral-coefficients-mfccs/
machine_learning/mfcc.py:55:46     - Unknown word (mfccs)          -- cepstral-coefficients-mfccs/
machine_learning/mfcc.py:57:14     - Unknown word (Lavasani)       -- Author: Amir Lavasani
machine_learning/mfcc.py:57:9      - Unknown word (Amir)           -- Author: Amir Lavasani
machine_learning/mfcc.py:63:14     - Unknown word (fftpack)        -- import scipy.fftpack as fft
machine_learning/mfcc.py:69:5      - Unknown word (mfcc)           -- def mfcc(
machine_learning/mfcc.py:6:1       - Unknown word (discriminative) -- discriminative way. It is particularly
machine_learning/mfcc.py:7:38      - Unknown word (speaker)        -- speech recognition and speaker identification.
machine_learning/mfcc.py:98:74     - Unknown word (sine)           -- # Generate a 440 Hz sine wave
machine_learning/multilayer_perceptron_classifier.py:1:14      - Unknown word (neural)     -- from sklearn.neural_network import MLPClassifier
machine_learning/multilayer_perceptron_classifier.py:8:13      - Unknown word (lbfgs)      -- solver="lbfgs", alpha=1e-5, hidden
machine_learning/polynomial_regression.py:100:19    - Unknown word (vander)        -- return np.vander(data, N=degree + 1,
machine_learning/polynomial_regression.py:134:32    - Unknown word (grow)          -- Make sure errors don't grow too large:
machine_learning/polynomial_regression.py:135:13    - Unknown word (coefs)         -- >>> coefs = np.array([-250, 5
machine_learning/polynomial_regression.py:149:21    - Unknown word (pinv)          -- # np.linalg.pinv() computes the Moore
machine_learning/polynomial_regression.py:15:1      - Unknown word (pseudoinverse) -- pseudoinverse of X. In the case of
machine_learning/polynomial_regression.py:175:26    - Unknown word (Predictor)     -- ArithmeticError: Predictor hasn't been fit yet
machine_learning/polynomial_regression.py:202:32    - Unknown word (Efficiency)    -- title("Predicting Fuel Efficiency Using Polynomial Regression
machine_learning/polynomial_regression.py:22:20     - Unknown word (inverting)     -- In OLS estimation, inverting XᵀX to compute X⁺ can
machine_learning/polynomial_regression.py:22:60     - Unknown word (numerically)   -- compute X⁺ can be very numerically unstable. This
machine_learning/polynomial_regression.py:22:72     - Unknown word (unstable)      -- be very numerically unstable. This
machine_learning/polynomial_regression.py:23:16     - Unknown word (sidesteps)     -- implementation sidesteps this need to invert
machine_learning/polynomial_regression.py:28:7      - Unknown word (UΣVᵀ)          -- where UΣVᵀ is an SVD of X.
machine_learning/polynomial_regression.py:59:13     - Unknown word (Vandermonde)   -- the Vandermonde matrix
machine_learning/polynomial_regression.py:5:29      - Unknown word (βₘxᵐ)       -- β₁x + β₂x² + ... + βₘxᵐ + ε
machine_learning/polynomial_regression.py:7:4       - Unknown word (treating)   -- By treating x, x², ..., xᵐ as distinct
machine_learning/scoring_functions.py:108:13    - Unknown word (Deviation)  -- # Mean Bias Deviation
machine_learning/scoring_functions.py:111:42    - Unknown word (underpredicts) -- Negative, if the model underpredicts,
machine_learning/scoring_functions.py:12:32     - Unknown word (perceived)  -- log and roots can be perceived as tools for penalizing
machine_learning/scoring_functions.py:12:55     - Unknown word (penalizing) -- perceived as tools for penalizing big
machine_learning/scoring_functions.py:131:5     - Unknown word (denumerator)   -- denumerator = np.sum(actual) / len
machine_learning/scoring_functions.py:13:63     - Unknown word (situations) -- metrics depends on the situations,
machine_learning/scoring_functions.py:23:45     - Unknown word (decimals)   -- mae(predict,actual),decimals = 2))
machine_learning/scoring_functions.py:4:21      - Unknown word (RMSLE)      -- MAE, MSE, RMSE, RMSLE are included.
machine_learning/scoring_functions.py:84:5      - Unknown word (rmsle)      -- def rmsle(predict, actual):
machine_learning/scoring_functions.py:9:42      - Unknown word (Sometimes)  -- slightly differentiated. Sometimes squared, rooted,
machine_learning/self_organizing_map.py:11:21     - Unknown word (winning)    -- Compute the winning vector by Euclidean
machine_learning/self_organizing_map.py:47:10     - Unknown word (organizing) -- self_organizing_map = SelfOrganizingMap
machine_learning/self_organizing_map.py:9:13      - Unknown word (winner)     -- def get_winner(self, weights: list
machine_learning/sequential_minimum_optimization.py:161:22    - Unknown word (violates)   -- # Check if alpha violates the KKT condition
machine_learning/sequential_minimum_optimization.py:162:16    - Unknown word (obey)       -- def _check_obey_kkt(self, index):
machine_learning/sequential_minimum_optimization.py:20:14     - Unknown word (alphas)     -- init_alphas = np.zeros(train.shape
machine_learning/sequential_minimum_optimization.py:221:9     - Unknown word (loci)       -- loci = yield from self._choose
machine_learning/sequential_minimum_optimization.py:231:82    - Unknown word (violate)    -- no non-bound samples violate
machine_learning/sequential_minimum_optimization.py:239:20    - Unknown word (Scanning)   -- print("Scanning all samples!")
machine_learning/sequential_minimum_optimization.py:267:35    - Unknown word (maximizes)  -- Choose alpha2 that maximizes the step size (|E1
machine_learning/sequential_minimum_optimization.py:291:22    - Unknown word (roll)       -- for i2 in np.roll(self.unbound, rng.choice
machine_learning/sequential_minimum_optimization.py:38:35     - Unknown word (blobs)      -- datasets import make_blobs, make_circles
machine_learning/sequential_minimum_optimization.py:38:47     - Unknown word (circles)    -- import make_blobs, make_circles
machine_learning/sequential_minimum_optimization.py:41:1      - Unknown word (CANCER)     -- CANCER_DATASET_URL = (
machine_learning/sequential_minimum_optimization.py:43:13     - Unknown word (cancer)     -- "breast-cancer-wisconsin/wdbc.data
machine_learning/sequential_minimum_optimization.py:43:20     - Unknown word (wisconsin)  -- "breast-cancer-wisconsin/wdbc.data"
machine_learning/sequential_minimum_optimization.py:43:30     - Unknown word (wdbc)       -- breast-cancer-wisconsin/wdbc.data"
machine_learning/sequential_minimum_optimization.py:43:6      - Unknown word (breast)     -- "breast-cancer-wisconsin/wdbc
machine_learning/sequential_minimum_optimization.py:456:62    - Unknown word (MSIE)       -- Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)"},
machine_learning/sequential_minimum_optimization.py:471:17    - Unknown word (dropna)     -- data = data.dropna(axis=0)
machine_learning/sequential_minimum_optimization.py:484:5     - Unknown word (mysvm)      -- mysvm = SmoSVM(
machine_learning/sequential_minimum_optimization.py:502:13    - Unknown word (Rough)      -- print(f"Rough Accuracy: {score / test
machine_learning/sequential_minimum_optimization.py:534:21    - Unknown word (hstack)     -- train_data = np.hstack((train_y.reshape(50
machine_learning/sequential_minimum_optimization.py:573:5     - Unknown word (density)    -- density, and predicted values
machine_learning/sequential_minimum_optimization.py:581:5     - Unknown word (yrange)     -- yrange = np.linspace(train
machine_learning/sequential_minimum_optimization.py:593:12    - Unknown word (asmatrix)   -- np.asmatrix(grid).T,
machine_learning/sequential_minimum_optimization.py:604:21    - Unknown word (Dark)       -- cmap=plt.cm.Dark2,
machine_learning/similarity_search.py:78:18     - Unknown word (shapes)     -- 2. If data's shapes are different.
machine_learning/similarity_search.py:80:12     - Unknown word (expecting)  -- We are expecting same shapes of two arrays
machine_learning/support_vector_machines.py:103:9     - Unknown word (Fits)           -- Fits the SVC with a set of
machine_learning/support_vector_machines.py:113:17    - Unknown word (Wolfe's)        -- # using Wolfe's Dual to calculate w
machine_learning/support_vector_machines.py:114:11    - Unknown word (Primal)         -- # Primal problem: minimize 1
machine_learning/support_vector_machines.py:161:38    - Unknown word (separation)     -- calculating mean offset of separation plane to points
machine_learning/support_vector_machines.py:35:71     - Unknown word (separable)      -- margin (data not linearly separable)
machine_learning/support_vector_machines.py:35:9      - Unknown word (regularization) -- regularization: constraint for soft
machine_learning/support_vector_machines.py:3:28      - Unknown word (Bounds)     -- scipy.optimize import Bounds, LinearConstraint, minimize
machine_learning/support_vector_machines.py:74:15     - Unknown word (sklear)         -- # sklear: def_gamma = 1/(n_features
machine_learning/support_vector_machines.py:87:14     - Unknown word (Radial)         -- RBF: Radial Basis Function Kernel
machine_learning/support_vector_machines.py:87:21     - Unknown word (Basis)          -- RBF: Radial Basis Function Kernel
machine_learning/word_frequency_functions.py:11:27     - Unknown word (corpus)      -- is to a document in a corpus (a collection of documents
machine_learning/word_frequency_functions.py:20:39     - Unknown word (frequently)  -- number representing how frequently
machine_learning/word_frequency_functions.py:36:12     - Unknown word (originality) -- of the originality of a term. It is mathematical
machine_learning/word_frequency_functions.py:8:31      - Unknown word (recommender) -- mining. 83% of text-based recommender systems use
machine_learning/word_frequency_functions.py:9:35      - Unknown word (Layman's)    -- for term weighting. In Layman's terms, tf-idf
machine_learning/xgboost_classifier.py:27:35     - Unknown word (booster)    -- XGBClassifier(base_score=0.5, booster='gbtree', callbacks
machine_learning/xgboost_classifier.py:27:44     - Unknown word (gbtree)     -- score=0.5, booster='gbtree', callbacks=None,
machine_learning/xgboost_classifier.py:28:29     - Unknown word (bylevel)    -- colsample_bylevel=1, colsample_bynode
machine_learning/xgboost_classifier.py:28:50     - Unknown word (bynode)     -- bylevel=1, colsample_bynode=1, colsample_bytree
machine_learning/xgboost_classifier.py:28:70     - Unknown word (bytree)     -- bynode=1, colsample_bytree=1,
machine_learning/xgboost_classifier.py:29:25     - Unknown word (stopping)   -- early_stopping_rounds=None, enable
machine_learning/xgboost_classifier.py:29:34     - Unknown word (rounds)     -- early_stopping_rounds=None, enable_categorical
machine_learning/xgboost_classifier.py:30:70     - Unknown word (depthwise)  -- id=-1, grow_policy='depthwise',
machine_learning/xgboost_classifier.py:34:32     - Unknown word (monotone)   -- missing=nan, monotone_constraints='()', n
machine_learning/xgboost_classifier.py:49:5      - Unknown word (Iris)       -- Iris type dataset is used
machine_learning/xgboost_classifier.py:5:29      - Unknown word (Confusion)  -- sklearn.metrics import ConfusionMatrixDisplay
machine_learning/xgboost_classifier.py:64:19     - Unknown word (confusion)  -- # Display the confusion matrix of the classifier
machine_learning/xgboost_classifier.py:65:33     - Unknown word (estimator)  -- ConfusionMatrixDisplay.from_estimator(
machine_learning/xgboost_classifier.py:70:15     - Unknown word (Blues)      -- cmap="Blues",
machine_learning/xgboost_classifier.py:73:46     - Unknown word (IRIS)       -- Normalized Confusion Matrix - IRIS Dataset")
machine_learning/xgboost_regressor.py:3:47      - Unknown word (housing)    -- import fetch_california_housing
maths/addition_without_arithmetic.py:3:9       - Unknown word (suraj)      -- Author: suraj Kumar
maths/aliquot_sum.py:1:5       - Unknown word (aliquot)    -- def aliquot_sum(input_num: int)
maths/aliquot_sum.py:5:47      - Unknown word (evenly)     -- than n that divide n evenly. For
maths/allocation_number.py:16:59     - Unknown word (allocated)  -- partition need to be allocated.
maths/area.py:106:18    - Unknown word (cone)       -- def surface_area_cone(radius: float, height
maths/area.py:108:37    - Unknown word (Cone)       -- the Surface Area of a Cone.
maths/area.py:138:18    - Unknown word (conical)    -- def surface_area_conical_frustum(
maths/area.py:138:26    - Unknown word (frustum)    -- surface_area_conical_frustum(
maths/area.py:142:37    - Unknown word (Conical)    -- the Surface Area of a Conical Frustum.
maths/area.py:142:45    - Unknown word (Frustum)    -- Surface Area of a Conical Frustum.
maths/area.py:169:5     - Unknown word (slant)      -- slant_height = (height**2
maths/area.py:173:18    - Unknown word (cylinder)   -- def surface_area_cylinder(radius: float, height
maths/area.py:175:37    - Unknown word (Cylinder)   -- the Surface Area of a Cylinder.
maths/area.py:205:18    - Unknown word (torus)      -- def surface_area_torus(torus_radius: float
maths/area.py:205:45    - Unknown word (tube)       -- torus_radius: float, tube_radius: float) -> float
maths/area.py:206:32    - Unknown word (Torus)      -- Calculate the Area of a Torus.
maths/area.py:216:71    - Unknown word (intersecting) -- support spindle or self intersecting tori
maths/area.py:216:84    - Unknown word (tori)         -- or self intersecting tori
maths/area.py:318:24    - Unknown word (Heron's)      -- This function uses Heron's formula: https://en
maths/area.py:31:18     - Unknown word (cuboid)     -- def surface_area_cuboid(length: float, breadth
maths/area.py:33:37     - Unknown word (Cuboid)     -- the Surface Area of a Cuboid.
maths/area.py:363:10    - Unknown word (parallelogram) -- def area_parallelogram(base: float, height
maths/area.py:455:10    - Unknown word (ellipse)       -- def area_ellipse(radius_x: float, radius
maths/area.py:485:10    - Unknown word (rhombus)       -- def area_rhombus(diagonal_1: float, diagonal
maths/area.py:563:19    - Unknown word (Areas)         -- print("[DEMO] Areas of various geometric
maths/area.py:568:13    - Unknown word (Parallelogram) -- print(f"Parallelogram: {area_parallelogram
maths/area.py:569:13    - Unknown word (Rhombus)       -- print(f"Rhombus: {area_rhombus(10,
maths/area.py:570:13    - Unknown word (Trapezium)     -- print(f"Trapezium: {area_trapezium(10
maths/area.py:582:13    - Unknown word (Equilateral)   -- print(f"Equilateral Triangle: {area_reg
maths/area.py:584:13    - Unknown word (Reqular)       -- print(f"Reqular Pentagon: {area_reg
maths/area.py:584:21    - Unknown word (Pentagon)      -- print(f"Reqular Pentagon: {area_reg_polygon(
maths/area.py:61:37     - Unknown word (Sphere)     -- the Surface Area of a Sphere.
maths/area.py:83:18     - Unknown word (hemisphere) -- def surface_area_hemisphere(radius: float) -> float
maths/area.py:85:37     - Unknown word (Hemisphere) -- the Surface Area of a Hemisphere.
maths/area_under_curve.py:17:5      - Unknown word (Treats)       -- Treats curve as a collection
maths/area_under_curve.py:18:5      - Unknown word (trapezium)    -- trapezium shape they form
maths/area_under_curve.py:22:31     - Unknown word (gauge)        -- param steps: an accuracy gauge; more steps increases
maths/area_under_curve.py:2:1       - Unknown word (Approximates) -- Approximates the area under the curve
maths/area_under_curve.py:2:49      - Unknown word (trapezoidal)  -- the curve using the trapezoidal rule
maths/average_absolute_deviation.py:19:21     - Unknown word (Makes)      -- if not nums:  # Makes sure that the list is
maths/average_mode.py:25:22     - Unknown word (modes)         -- # Gets values of modes
maths/average_mode.py:6:13      - Unknown word (tendency)   -- central tendency) of the input data.
maths/average_mode.py:8:36      - Unknown word (Datastructure) -- list may contain any Datastructure or any Datatype.
maths/bailey_borwein_plouffe.py:11:21     - Unknown word (reduces)     -- A higher number reduces the chance of an error
maths/bailey_borwein_plouffe.py:11:33     - Unknown word (chance)      -- higher number reduces the chance of an error but increases
maths/bailey_borwein_plouffe.py:1:12      - Unknown word (borwein)    -- def bailey_borwein_plouffe(digit_position
maths/bailey_borwein_plouffe.py:1:20      - Unknown word (plouffe)    -- def bailey_borwein_plouffe(digit_position: int
maths/bailey_borwein_plouffe.py:1:5       - Unknown word (bailey)     -- def bailey_borwein_plouffe(digit
maths/bailey_borwein_plouffe.py:3:34      - Unknown word (extraction) -- Implement a popular pi-digit-extraction algorithm known as the
maths/bailey_borwein_plouffe.py:45:18     - Unknown word (approximation) -- # compute an approximation of (16 ** (n - 1))
maths/bailey_borwein_plouffe.py:9:15      - Unknown word (immediately) -- The digit immediately after the decimal point
maths/bailey_borwein_plouffe.py:9:54      - Unknown word (located)     -- the decimal point is located at position 1.
maths/basic_maths.py:34:15     - Unknown word (divisors)   -- def number_of_divisors(n: int) -> int:
maths/basic_maths.py:35:28     - Unknown word (Divisors)   -- Calculate Number of Divisors of an Integer.
maths/basic_maths.py:99:18     - Unknown word (Euler's)    -- """Calculate Euler's Phi Function.
maths/binary_exponentiation.py:108:17    - Unknown word (Modulus)        -- ValueError: Modulus must be a positive integer
maths/binary_exponentiation.py:5:17      - Unknown word (exponentiation) -- used methods of exponentiation. The method is also
maths/binary_multiplication.py:15:25     - Unknown word (concerned)  -- far as the modulo is concerned,
maths/binary_multiplication.py:17:24     - Unknown word (whichever)  -- Now apply RULE 1 or 2, whichever is required.
maths/binary_multiplication.py:19:9      - Unknown word (chinmoy)    -- @author chinmoy159
maths/binomial_distribution.py:7:27      - Unknown word (successes)  -- binomial_distribution(successes: int, trials: int, prob
maths/binomial_distribution.py:7:43      - Unknown word (trials)     -- distribution(successes: int, trials: int, prob: float)
maths/chebyshev_distance.py:1:5       - Unknown word (chebyshev)  -- def chebyshev_distance(point_a: list
maths/chebyshev_distance.py:4:5       - Unknown word (Chessboard) -- Chessboard distance) between two
maths/check_polygon.py:21:39     - Unknown word (reordered)  -- Check numbers are not reordered
maths/check_polygon.py:26:17     - Unknown word (Monogons)   -- ValueError: Monogons and Digons are not polygons
maths/check_polygon.py:26:30     - Unknown word (Digons)     -- ValueError: Monogons and Digons are not polygons in
maths/check_polygon.py:26:45     - Unknown word (polygons)   -- Monogons and Digons are not polygons in the Euclidean space
maths/chinese_remainder_theorem.py:18:12     - Unknown word (Euclid)     -- # Extended Euclid
maths/chinese_remainder_theorem.py:35:31     - Unknown word (inverses)   -- ExtendedEuclid to find inverses
maths/chinese_remainder_theorem.py:36:23     - Unknown word (theorem)    -- def chinese_remainder_theorem(n1: int, r1: int, n
maths/chinese_remainder_theorem.py:74:22     - Unknown word (Inverting)  -- Same a above using InvertingModulo
maths/chudnovsky_algorithm.py:12:28     - Unknown word (multinomial) -- = constant_term / ((multinomial_term * linear_term)
maths/chudnovsky_algorithm.py:44:18     - Unknown word (prec)        -- getcontext().prec = precision
maths/chudnovsky_algorithm.py:8:14      - Unknown word (Ramanujan's) -- based on Ramanujan's PI formulae.
maths/collatz_sequence.py:10:1      - Unknown word (hailstone)   -- hailstone sequence.
maths/collatz_sequence.py:20:5      - Unknown word (collatz)     -- def collatz_sequence(n: int) ->
maths/collatz_sequence.py:2:13      - Unknown word (conjecture) -- The Collatz conjecture is a famous unsolved
maths/collatz_sequence.py:2:36      - Unknown word (unsolved)   -- conjecture is a famous unsolved problem in mathematics
maths/collatz_sequence.py:2:56      - Unknown word (mathematics) -- unsolved problem in mathematics. Given a starting
maths/collatz_sequence.py:63:39     - Unknown word (took)        -- Collatz sequence from {n} took {len(sequence)} steps
maths/collatz_sequence.py:6:16      - Unknown word (claims)      -- The conjecture claims that this sequence will
maths/collatz_sequence.py:8:62      - Unknown word (Ulam)        -- 3n + 1 problem, the Ulam conjecture, Kakutani
maths/collatz_sequence.py:8:79      - Unknown word (Kakutani's)  -- the Ulam conjecture, Kakutani's
maths/collatz_sequence.py:9:14      - Unknown word (Thwaites)    -- problem, the Thwaites conjecture, Hasse's
maths/collatz_sequence.py:9:35      - Unknown word (Hasse's)     -- Thwaites conjecture, Hasse's algorithm, the Syracuse
maths/collatz_sequence.py:9:58      - Unknown word (Syracuse)    -- Hasse's algorithm, the Syracuse problem, and the
maths/combinations.py:33:67     - Unknown word (asked)      -- the function is being asked
maths/combinations.py:46:34     - Unknown word (hands)      -- number of five-card hands possible from a standard
maths/combinations.py:47:26     - Unknown word (deck)       -- f"fifty-two card deck is: {combinations(5
maths/combinations.py:51:27     - Unknown word (students)   -- "If a class of 40 students must be arranged into
maths/combinations.py:53:13     - Unknown word (arrange)    -- "to arrange them.\n",
maths/combinations.py:57:26     - Unknown word (competing)  -- "If 10 teams are competing in a Formula One race
maths/combinations.py:59:29     - Unknown word (awarded)    -- "third place can be awarded.",
maths/continued_fraction.py:11:5      - Unknown word (continued)  -- def continued_fraction(num: Fraction
maths/continued_fraction.py:16:11     - Unknown word (inaccuracies) -- float inaccuracies.
maths/decimal_isolate.py:9:5       - Unknown word (Isolates)   -- Isolates the decimal part of
maths/decimal_to_fraction.py:3:36      - Unknown word (simplest)   -- decimal number in its simplest fraction form
maths/dodecahedron.py:1:3       - Unknown word (dodecahedron) -- # dodecahedron.py
maths/dodecahedron.py:5:4       - Unknown word (pentagon)     -- 12 pentagon faces having the same
maths/double_factorial.py:4:22      - Unknown word (costly)     -- Recursion can be costly for large numbers.
maths/dual_number_automatic_differentiation.py:15:18     - Unknown word (duals)      -- self.duals = [1] * rank
maths/dual_number_automatic_differentiation.py:20:25     - Unknown word (dual)       -- s = "+".join(f"{dual}E{n}" for n, dual in
maths/dual_number_automatic_differentiation.py:56:20     - Unknown word (jtem)       -- for j, jtem in enumerate(other.duals
maths/dual_number_automatic_differentiation.py:95:5      - Unknown word (differentiate) -- def differentiate(func, position, order
maths/entropy.py:27:18     - Unknown word (Behind)     -- >>> text = ("Behind Winston's back the voice
maths/entropy.py:27:25     - Unknown word (Winston's)  -- >>> text = ("Behind Winston's back the voice "
maths/entropy.py:28:27     - Unknown word (telescreen) -- . "from the telescreen was still "
maths/entropy.py:29:18     - Unknown word (babbling)   -- ... "babbling and the overfulfilment
maths/entropy.py:29:35     - Unknown word (overfulfilment) -- "babbling and the overfulfilment")
maths/entropy.py:35:22     - Unknown word (Ministry)       -- >>> text = ("The Ministry of Truth—Minitrue, in
maths/entropy.py:35:80     - Unknown word (official)       -- Newspeak [Newspeak was the official"
maths/entropy.py:36:26     - Unknown word (elegant)        -- .. "face in elegant lettering, the three
maths/entropy.py:36:34     - Unknown word (lettering)      -- "face in elegant lettering, the three")
maths/entropy.py:41:22     - Unknown word (repulsive)      -- >>> text = ("Had repulsive dashwoods suspicion
maths/entropy.py:41:32     - Unknown word (dashwoods)      -- text = ("Had repulsive dashwoods suspicion sincerity
maths/entropy.py:41:42     - Unknown word (suspicion)      -- repulsive dashwoods suspicion sincerity but advantage
maths/entropy.py:41:52     - Unknown word (sincerity)      -- dashwoods suspicion sincerity but advantage now him
maths/entropy.py:42:32     - Unknown word (garret)         -- "Remark easily garret nor nay.  Civil those
maths/entropy.py:42:49     - Unknown word (Civil)          -- easily garret nor nay.  Civil those mrs enjoy shy
maths/entropy.py:42:65     - Unknown word (enjoy)          -- nay. Civil those mrs enjoy shy fat merry. "
maths/entropy.py:42:79     - Unknown word (merry)          -- those mrs enjoy shy fat merry. "
maths/entropy.py:43:31     - Unknown word (jointure)       -- "You greatest jointure saw horrible. He private
maths/entropy.py:44:27     - Unknown word (Fertile)        -- . "suppose. Fertile beloved evident through
maths/entropy.py:44:35     - Unknown word (beloved)        -- "suppose. Fertile beloved evident through no service
maths/entropy.py:44:43     - Unknown word (evident)        -- suppose. Fertile beloved evident through no service elderly
maths/entropy.py:44:70     - Unknown word (elderly)        -- evident through no service elderly is. Blind "
maths/entropy.py:44:82     - Unknown word (Blind)          -- service elderly is. Blind "
maths/entropy.py:45:47     - Unknown word (neglected)      -- every no so at. Own neglected you preferred way sincerity
maths/entropy.py:46:18     - Unknown word (delivered)      -- ... "delivered his attempted. To of
maths/entropy.py:46:32     - Unknown word (attempted)      -- "delivered his attempted. To of message cottage
maths/entropy.py:46:57     - Unknown word (cottage)        -- attempted. To of message cottage windows do besides
maths/entropy.py:47:26     - Unknown word (uncivil)        -- .. "against uncivil. Delightful unreserved
maths/entropy.py:47:36     - Unknown word (Delightful)     -- "against uncivil.  Delightful unreserved impossible
maths/entropy.py:47:47     - Unknown word (unreserved)     -- uncivil. Delightful unreserved impossible few estimating
maths/entropy.py:47:58     - Unknown word (impossible)     -- Delightful unreserved impossible few estimating "
maths/entropy.py:47:73     - Unknown word (estimating)     -- unreserved impossible few estimating "
maths/entropy.py:48:22     - Unknown word (favourable)     -- ... "men favourable see entreaties. She
maths/entropy.py:48:37     - Unknown word (entreaties)     -- "men favourable see entreaties. She propriety immediate
maths/entropy.py:48:53     - Unknown word (propriety)      -- see entreaties. She propriety immediate was improving
maths/entropy.py:49:24     - Unknown word (entrance)       -- ... "He or entrance humoured likewise moderate
maths/entropy.py:49:33     - Unknown word (humoured)       -- "He or entrance humoured likewise moderate. Much
maths/entropy.py:49:42     - Unknown word (likewise)       -- or entrance humoured likewise moderate. Much nor game
maths/entropy.py:49:61     - Unknown word (Much)           -- humoured likewise moderate. Much nor game son say "
maths/entropy.py:50:78     - Unknown word (prevailed)      -- gate. Me we offending prevailed "
maths/euclidean_distance.py:44:9      - Unknown word (Benchmarks) -- Benchmarks
maths/eulers_totient.py:19:5      - Unknown word (totients)   -- totients = [i - 1 for i in range
maths/eulers_totient.py:2:5       - Unknown word (totient)    -- def totient(n: int) -> list:
maths/extended_euclidean_algorithm.py:10:23     - Unknown word (silentcat)  -- @Author: S. Sharma <silentcat>
maths/extended_euclidean_algorithm.py:13:24     - Unknown word (pikulet)    -- Last modified by:   pikulet
maths/extended_euclidean_algorithm.py:5:41      - Unknown word (Bezout's)   -- bn = gcd(m, n) (a.k.a Bezout's Identity)
maths/extended_euclidean_algorithm.py:65:12     - Unknown word (correction) -- # sign correction for negative numbers
maths/factors.py:16:5      - Unknown word (facs)       -- facs: list[int] = []
maths/fast_inverse_sqrt.py:2:48      - Unknown word (Quake)      -- /sqrt(x)) using the Quake III algorithm.
maths/fermat_little_theorem.py:1:39      - Unknown word (Fermat's)   -- to show the usage of Fermat's little theorem in a
maths/fermat_little_theorem.py:2:3       - Unknown word (According)  -- # According to Fermat's little theorem
maths/fibonacci.py:186:29    - Unknown word (recursuive) -- Cache must be outside recursuive function
maths/fibonacci.py:201:9     - Unknown word (binet)      -- def fib_binet(n: int) -> list[int
maths/fibonacci.py:211:5     - Unknown word (thereafter) -- thereafter due to the size limitations
maths/fibonacci.py:28:5      - Unknown word (Times)      -- Times the execution of a function
maths/fibonacci.py:324:36    - Unknown word (Fastest)    -- an M1 MacBook Pro -- Fastest to slowest
maths/fibonacci.py:324:47    - Unknown word (slowest)    -- MacBook Pro -- Fastest to slowest
maths/fibonacci.py:3:26      - Unknown word (Binet's)    -- a simplified form of Binet's formula
maths/fibonacci.py:6:42      - Unknown word (Binet)      -- function because the Binet formula function  uses
maths/gamma.py:15:12     - Unknown word (integrate)  -- from scipy.integrate import quad
maths/gamma.py:15:29     - Unknown word (quad)       -- scipy.integrate import quad
maths/gamma.py:47:17     - Unknown word (integrand)  -- return quad(integrand, 0, inf, args=(num)
maths/gcd_of_n_numbers.py:100:5     - Unknown word (mult)       -- mult = 1
maths/geometric_mean.py:36:27     - Unknown word (restricted) -- Frequently they are restricted to being positive.
maths/geometric_mean.py:36:7      - Unknown word (Frequently) -- # Frequently they are restricted
maths/germain_primes.py:14:8      - Unknown word (germain)    -- def is_germain_prime(number: int)
maths/germain_primes.py:2:3       - Unknown word (Sophie)     -- A Sophie Germain prime is any
maths/germain_primes.py:7:1       - Unknown word (Their)      -- Their corresponding safe primes
maths/greatest_common_divisor.py:6:68      - Unknown word (divisibility) -- b) by definition of divisibility
maths/interquartile_range.py:3:1       - Unknown word (dispersion) -- dispersion, which is the spread
maths/interquartile_range.py:7:8       - Unknown word (inspired)   -- Script inspired by this Wikipedia article
maths/jaccard_similarity.py:17:5      - Unknown word (jaccard)    -- def jaccard_similarity(
maths/jaccard_similarity.py:24:5      - Unknown word (Essentially) -- Essentially, its intersection over
maths/jaccard_similarity.py:8:20      - Unknown word (Massive)    -- the book Mining of Massive Datasets [MMDS 2nd Edition
maths/jaccard_similarity.py:8:38      - Unknown word (MMDS)       -- of Massive Datasets [MMDS 2nd Edition, Chapter
maths/joint_probability_distribution.py:2:11      - Unknown word (joint)      -- Calculate joint probability distribution
maths/josephus_problem.py:106:61    - Unknown word (eliminating) -- steps to take before eliminating someone.
maths/josephus_problem.py:11:16     - Unknown word (continues)   -- - The counting continues until only one person
maths/josephus_problem.py:18:5      - Unknown word (josephus)    -- def josephus_recursive(num_people
maths/josephus_problem.py:2:34      - Unknown word (theoretical) -- problem is a famous theoretical problem related to a
maths/josephus_problem.py:7:18      - Unknown word (standing)    -- - num_people are standing in a circle.
maths/juggler_sequence.py:11:12     - Unknown word (Akshay)     -- # Author : Akshay Dubey (https://github
maths/juggler_sequence.py:11:19     - Unknown word (Dubey)      -- # Author : Akshay Dubey (https://github.com
maths/juggler_sequence.py:15:5      - Unknown word (juggler)    -- def juggler_sequence(number: int
maths/karatsuba.py:4:5       - Unknown word (karatsuba)  -- def karatsuba(a: int, b: int) -> int
maths/kth_lexicographic_permutation.py:17:7      - Unknown word (Factorails)    -- # Factorails from 1! to (n-1)!
maths/kth_lexicographic_permutation.py:18:5      - Unknown word (factorials)    -- factorials = [1]
maths/kth_lexicographic_permutation.py:3:16      - Unknown word (lexicographic) -- Finds k'th lexicographic permutation (in increasing
maths/largest_of_very_large_numbers.py:1:11      - Unknown word (Abhijeeth)  -- # Author: Abhijeeth S
maths/largest_of_very_large_numbers.py:8:36      - Unknown word (manageable) -- large number to a more manageable number
maths/largest_of_very_large_numbers.py:8:5       - Unknown word (Reduces)    -- Reduces large number to a more
maths/liouville_lambda.py:14:5      - Unknown word (liouville)  -- def liouville_lambda(number: int)
maths/liouville_lambda.py:3:32      - Unknown word (denoted)    -- Liouville Lambda function, denoted by λ(n)
maths/lucas_lehmer_primality_test.py:10:1      - Unknown word (Great)      -- Great Internet Mersenne Prime
maths/lucas_lehmer_primality_test.py:10:39     - Unknown word (GIMPS)      -- Mersenne Prime Search (GIMPS) to locate large primes
maths/lucas_lehmer_primality_test.py:16:11     - Unknown word (lehmer)     -- def lucas_lehmer_test(p: int) -> bool
maths/lucas_lehmer_primality_test.py:16:5      - Unknown word (lucas)      -- def lucas_lehmer_test(p: int)
maths/lucas_lehmer_primality_test.py:2:50      - Unknown word (primality)  -- Lehmer test (LLT) is a primality test for Mersenne
maths/lucas_lehmer_primality_test.py:2:69      - Unknown word (Mersenne)   -- a primality test for Mersenne
maths/maclaurin_series.py:8:5       - Unknown word (maclaurin)  -- def maclaurin_sin(theta: float, accuracy
maths/manhattan_distance.py:3:5       - Unknown word (Expectts)   -- Expectts two list of numbers
maths/manhattan_distance.py:81:28     - Unknown word (liner)      -- manhattan_distance_one_liner(point_a: list, point
maths/matrix_exponentiation.py:57:7      - Unknown word (Trivial)     -- # Trivial Cases
maths/matrix_exponentiation.py:6:54      - Unknown word (recurrences) -- technique to solve linear recurrences in logarithmic time
maths/max_sum_sliding_window.py:6:52      - Unknown word (loops)      -- technique' where the nested loops can be converted to
maths/minkowski_distance.py:15:21     - Unknown word (inaccurate)  -- function may be inaccurate.
maths/minkowski_distance.py:1:5       - Unknown word (minkowski)  -- def minkowski_distance(
maths/minkowski_distance.py:9:28      - Unknown word (degenerates) -- the Minkowski distance degenerates to the Manhattan distance
maths/mobius_function.py:12:5      - Unknown word (mobius)     -- def mobius(n: int) -> int:
maths/modular_division.py:12:55     - Unknown word (modn)       -- 0≤x≤n-1, and  b/a=x(modn) (that is, b=ax(modn
maths/modular_division.py:134:9     - Unknown word (mutually)       -- mutually prime, or co-prime if
maths/modular_division.py:15:13     - Unknown word (multiplicative) -- a has a multiplicative inverse modulo n iff
maths/monte_carlo.py:14:26     - Unknown word (centred)    -- . Draw a 2x2 square centred at (0,0).
maths/monte_carlo.py:15:8      - Unknown word (Inscribe)   -- 2. Inscribe a circle within the
maths/monte_carlo.py:23:40     - Unknown word (lands)      -- function to see if a dot lands in the circle.
maths/monte_carlo.py:2:10      - Unknown word (Matteo)     -- @author: MatteoRaso
maths/monte_carlo.py:2:16      - Unknown word (Raso)       -- @author: MatteoRaso
maths/monte_carlo.py:30:25     - Unknown word (guesses)    -- # The proportion of guesses that landed in the circle
maths/monte_carlo.py:30:38     - Unknown word (landed)     -- proportion of guesses that landed in the circle
maths/monte_carlo.py:50:44     - Unknown word (valued)     -- variable non-negative real-valued continuous function
maths/monte_carlo.py:59:12     - Unknown word (Repeatedly) -- a. Repeatedly draw x from uniform
maths/monte_carlo.py:62:8      - Unknown word (Estimated)  -- 4. Estimated value of integral =
maths/monte_carlo.py:96:13     - Unknown word (Estimating) -- print(f"Estimating area under y=x where
maths/monte_carlo_dice.py:10:29     - Unknown word (sided)      -- """Initialize a six sided dice"""
maths/monte_carlo_dice.py:10:35     - Unknown word (dice)       -- Initialize a six sided dice"""
maths/monte_carlo_dice.py:17:20     - Unknown word (throws)     -- def throw_dice(num_throws: int, num_dice: int
maths/monte_carlo_dice.py:19:55     - Unknown word (throwing)   -- all possible sums when throwing dice.
maths/monte_carlo_dice.py:33:5      - Unknown word (dices)      -- dices = [Dice() for i in range
maths/monte_carlo_dice.py:7:9       - Unknown word (SIDES)      -- NUM_SIDES = 6
maths/numerical_analysis/adams_bashforth.py:24:36     - Unknown word (nodal)      -- Solution of y at each nodal point
maths/numerical_analysis/adams_bashforth.py:2:42      - Unknown word (Ordinary)   -- Bashforth methods to solve Ordinary Differential Equations
maths/numerical_analysis/adams_bashforth.py:5:10      - Unknown word (Ravi)       -- Author : Ravi Kumar
maths/numerical_analysis/bisection.py:6:51      - Unknown word (bolzano)    -- becomes 0 in [a,b] using bolzano
maths/numerical_analysis/bisection_2.py:27:5      - Unknown word (bisection)      -- def bisection(a: float, b: float)
maths/numerical_analysis/bisection_2.py:38:7      - Unknown word (Bolzano)        -- # Bolzano theory in order to find
maths/numerical_analysis/bisection_2.py:49:11     - Unknown word (Decide)         -- # Decide the side to repeat the
maths/numerical_analysis/bisection_2.py:4:22      - Unknown word (algebraic)  -- Here f(x) represents algebraic or transcendental equation
maths/numerical_analysis/bisection_2.py:4:35      - Unknown word (transcendental) -- represents algebraic or transcendental equation.
maths/numerical_analysis/integration_by_simpson_approx.py:12:1      - Unknown word (simpson)    -- simpson_integration() takes
maths/numerical_analysis/integration_by_simpson_approx.py:26:20     - Unknown word (Approximation) -- Summary of Simpson Approximation :
maths/numerical_analysis/integration_by_simpson_approx.py:28:4      - Unknown word (simpsons)      -- By simpsons integration :
maths/numerical_analysis/integration_by_simpson_approx.py:29:19     - Unknown word (fxdx)          -- 1. integration of fxdx with limit a to b is
maths/numerical_analysis/integration_by_simpson_approx.py:46:35     - Unknown word (approximated)  -- result : the value of the approximated integration of function
maths/numerical_analysis/integration_by_simpson_approx.py:7:31      - Unknown word (Thomas)     -- approximation proposed by Thomas Simpson in 1743 is one
maths/numerical_analysis/nevilles_method.py:12:5      - Unknown word (neville)    -- def neville_interpolate(x_points
maths/numerical_analysis/nevilles_method.py:19:63     - Unknown word (Neville)    -- approximated value and the Neville iterations
maths/numerical_analysis/nevilles_method.py:3:7       - Unknown word (Neville's)  -- using Neville's method.
maths/numerical_analysis/newton_forward_interpolation.py:8:5       - Unknown word (ucal)       -- def ucal(u: float, p: int) -
maths/numerical_analysis/newton_raphson.py:35:12     - Unknown word (raphson)      -- def newton_raphson(
maths/numerical_analysis/newton_raphson.py:35:5      - Unknown word (newton)       -- def newton_raphson(
maths/numerical_analysis/newton_raphson.py:3:1       - Unknown word (approximates) -- approximates a root of a given real
maths/numerical_analysis/newton_raphson.py:75:27     - Unknown word (converging)   -- ZeroDivisionError: No converging solution found, zero
maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:11     - Unknown word (kutta)      -- def runge_kutta_fehlberg_45(
maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:17     - Unknown word (fehlberg)   -- def runge_kutta_fehlberg_45(
maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:5      - Unknown word (runge)      -- def runge_kutta_fehlberg_45(
maths/numerical_analysis/runge_kutta_gills.py:14:17     - Unknown word (gills)      -- def runge_kutta_gills(
maths/numerical_analysis/runge_kutta_gills.py:2:21      - Unknown word (Gill's)     -- Use the Runge-Kutta-Gill's method of order 4 to
maths/numerical_analysis/secant_method.py:17:5      - Unknown word (secant)     -- def secant_method(lower_bound:
maths/numerical_analysis/secant_method.py:3:9       - Unknown word (dimgrichr)  -- Author: dimgrichr
maths/numerical_analysis/simpson_rule.py:16:57     - Unknown word (Simpson's)  -- of a function using Simpson's Rule.
maths/numerical_analysis/simpson_rule.py:2:26      - Unknown word (quadrature) -- Numerical integration or quadrature for a smooth function
maths/numerical_analysis/simpson_rule.py:4:20      - Unknown word (classical)  -- This method is the classical approach of summing
maths/numerical_analysis/simpson_rule.py:4:51      - Unknown word (Equally)    -- approach of summing 'Equally Spaced Abscissas'
maths/numerical_analysis/simpson_rule.py:4:59      - Unknown word (Spaced)     -- of summing 'Equally Spaced Abscissas'
maths/numerical_analysis/simpson_rule.py:4:66      - Unknown word (Abscissas)  -- summing 'Equally Spaced Abscissas'
maths/numerical_analysis/square_root.py:25:36     - Unknown word (Newton's)   -- root approximated using Newton's method.
maths/perfect_number.py:6:5       - Unknown word (Excluding)  -- Excluding 6, the sum(divisors
maths/persistence.py:1:20      - Unknown word (persistence) -- def multiplicative_persistence(num: int) -> int:
maths/pi_generator.py:11:22     - Unknown word (prove)       -- We cannot try to prove against an interrupted
maths/pi_generator.py:11:52     - Unknown word (uncompleted) -- against an interrupted, uncompleted generation.
maths/pi_generator.py:4:5       - Unknown word (Leibniz)    -- Leibniz Formula for Pi
maths/pi_generator.py:7:23      - Unknown word (converges)  -- Leibniz's formula converges extremely slowly: it
maths/pi_generator.py:7:5       - Unknown word (Leibniz's)  -- Leibniz's formula converges extremely
maths/pi_generator.py:9:5       - Unknown word (Convergence) -- Convergence (https://en.wikipedia
maths/pi_monte_carlo_estimation.py:24:27     - Unknown word (simulations) -- estimate_pi(number_of_simulations: int) -> float:
maths/points_are_collinear_3d.py:21:43     - Unknown word (orthogonal) -- an infinite number of orthogonal vectors.
maths/points_are_collinear_3d.py:84:70     - Unknown word (collinearity) -- that represents the collinearity ratio.
maths/pollard_rho.py:112:26    - Unknown word (hare's)        -- # We can use the hare's position as the new
maths/pollard_rho.py:113:33    - Unknown word (Richard)       -- This is actually what Richard Brent's the "optimized
maths/pollard_rho.py:113:41    - Unknown word (Brent's)       -- actually what Richard Brent's the "optimized" variant
maths/pollard_rho.py:116:66    - Unknown word (incremented)   -- function can just be incremented.
maths/pollard_rho.py:122:15    - Unknown word (unlucky)       -- # We were unlucky or ``num`` itself is
maths/pollard_rho.py:13:9      - Unknown word (Pollard's)  -- Use Pollard's Rho algorithm to return
maths/pollard_rho.py:14:62     - Unknown word (factorization) -- and require further factorization.
maths/pollard_rho.py:42:17     - Unknown word (struggles)     -- # algorithm struggles to find factors that
maths/pollard_rho.py:43:12     - Unknown word (workaround)    -- # As a workaround, we specifically check
maths/pollard_rho.py:53:32     - Unknown word (suggested)     -- this reason, Pollard suggested using ``f(x) = (x**
maths/pollard_rho.py:56:15     - Unknown word (retries)       -- # To make retries easier, we will instead
maths/pollard_rho.py:6:5       - Unknown word (pollard)    -- def pollard_rho(
maths/pollard_rho.py:78:9      - Unknown word (tortoise)      -- tortoise = seed
maths/pollard_rho.py:79:9      - Unknown word (hare)          -- hare = seed
maths/pollard_rho.py:99:19     - Unknown word (Unfortunately) -- # Unfortunately, the divisor is ``num
maths/polynomial_evaluation.py:18:5      - Unknown word (horner)     -- def horner(poly: Sequence[float
maths/polynomial_evaluation.py:19:55     - Unknown word (Horner's)   -- specified point using Horner's method.
maths/polynomials/single_indeterminate_operations.py:3:33      - Unknown word (indeterminate) -- implements a single indeterminate polynomials class
maths/polynomials/single_indeterminate_operations.py:92:9      - Unknown word (Evaluates)     -- Evaluates the polynomial at x
maths/prime_check.py:50:50     - Unknown word (multiples)  -- all even numbers, all multiples of 3 are not primes
maths/prime_sieve_eratosthenes.py:15:17     - Unknown word (eratosthenes) -- def prime_sieve_eratosthenes(num: int) -> list[int
maths/primelib.py:101:14    - Unknown word (erathostenes) -- sieve of erathostenes.
maths/primelib.py:36:1      - Unknown word (goldbach)   -- goldbach(number) // Goldbach
maths/primelib.py:36:22     - Unknown word (Goldbach's) -- goldbach(number) // Goldbach's assumption
maths/primelib.py:36:33     - Unknown word (assumption) -- number) // Goldbach's assumption
maths/primelib.py:497:18    - Unknown word (captured)     -- done = []  # captured numbers int both 'primeFac
maths/primelib.py:680:74    - Unknown word (Divisiors)    -- Error in function getDivisiors(...)"
maths/primelib.py:721:7     - Unknown word (summed)       -- # summed all divisors up to
maths/qr_decomposition.py:10:15     - Unknown word (decomposing) -- method of decomposing A uses the Householder
maths/qr_decomposition.py:18:19     - Unknown word (optimizations) -- Note: several optimizations can be made for numeric
maths/qr_decomposition.py:21:18     - Unknown word (BLAS)          -- version from BLAS should be used.
maths/qr_decomposition.py:4:8       - Unknown word (householder) -- def qr_householder(a: np.ndarray):
maths/qr_decomposition.py:5:56      - Unknown word (Householder) -- of the matrix A using Householder reflection.
maths/qr_decomposition.py:7:26      - Unknown word (decomposes)  -- The QR-decomposition decomposes the matrix A of shape
maths/radix2_fft.py:113:9     - Unknown word (inverce)    -- inverce_c = [[dft_a[i] * dft
maths/radix2_fft.py:20:43     - Unknown word (fourier)    -- compute the discrete fourier transform (DFT) of A
maths/radix2_fft.py:22:62     - Unknown word (similarly)  -- the DFT of A*B, we can similarly
maths/radix2_fft.py:2:38      - Unknown word (radix)      -- Multiplication using radix-2 fast Fourier Transform
maths/radix2_fft.py:87:14     - Unknown word (ncol)       -- next_ncol = self.c_max_length
maths/series/geometric_series.py:27:9      - Unknown word (ration)     -- ration with first term with
maths/series/hexagonal_numbers.py:2:3       - Unknown word (hexagonal)  -- A hexagonal number sequence is a
maths/series/hexagonal_numbers.py:2:46      - Unknown word (figurate)   -- sequence is a sequence of figurate numbers
maths/series/hexagonal_numbers.py:5:1       - Unknown word (hexagons)   -- hexagons with sides up to n dots
maths/series/hexagonal_numbers.py:5:57      - Unknown word (overlaid)   -- when the hexagons are overlaid
maths/sieve_of_eratosthenes.py:10:19     - Unknown word (Bruno)        -- doctest provider: Bruno Simas Hadlich (https
maths/sieve_of_eratosthenes.py:10:25     - Unknown word (Simas)        -- doctest provider: Bruno Simas Hadlich (https://github
maths/sieve_of_eratosthenes.py:10:31     - Unknown word (Hadlich)      -- provider: Bruno Simas Hadlich (https://github.com
maths/sieve_of_eratosthenes.py:11:16     - Unknown word (Dmitry)       -- Also thanks to Dmitry (https://github.com
maths/sieve_of_eratosthenes.py:11:6      - Unknown word (thanks)       -- Also thanks to Dmitry (https://github
maths/sieve_of_eratosthenes.py:2:10      - Unknown word (Eratosthones) -- Sieve of Eratosthones
maths/sieve_of_eratosthenes.py:6:1       - Unknown word (Illustration) -- Illustration:
maths/signum.py:6:5       - Unknown word (signum)     -- def signum(num: float) -> int:
maths/simultaneous_linear_equation_solver.py:101:5     - Unknown word (useable)      -- useable_form = data_set.copy
maths/simultaneous_linear_equation_solver.py:4:23      - Unknown word (simultaneous) -- This algorithm solves simultaneous linear equations of
maths/sin.py:58:19     - Unknown word (Increased)  -- a += 2  # Increased by 2 for every term
maths/sin.py:7:21      - Unknown word (randians)   -- Where: x = angle in randians.
maths/sock_merchant.py:4:10      - Unknown word (merchant)   -- def sock_merchant(colors: list[int])
maths/softmax.py:29:59     - Unknown word (mitigate)     -- We need to ceil to mitigate for
maths/softmax.py:4:68      - Unknown word (normalizes) -- K real numbers, and normalizes
maths/softmax.py:6:8       - Unknown word (exponentials) -- to the exponentials of the input numbers
maths/solovay_strassen_primality_test.py:18:12     - Unknown word (Legendre)     -- of the Legendre symbol, which can be
maths/solovay_strassen_primality_test.py:21:15     - Unknown word (residue)      -- quadratic residue modulo a given modulus
maths/solovay_strassen_primality_test.py:4:55      - Unknown word (criterion)  -- is based on Euler's criterion. It is similar
maths/solovay_strassen_primality_test.py:5:39      - Unknown word (residues)   -- test but uses quadratic residues. It can quickly identify
maths/solovay_strassen_primality_test.py:64:5      - Unknown word (solovay)      -- def solovay_strassen(number: int
maths/solovay_strassen_primality_test.py:6:27      - Unknown word (occasionally) -- composite numbers but may occasionally classify composite numbers
maths/spearman_rank_correlation_coefficient.py:18:5      - Unknown word (ranked)     -- ranked_data = sorted((value
maths/spearman_rank_correlation_coefficient.py:27:15     - Unknown word (spearman)   -- def calculate_spearman_rank_correlation(
maths/spearman_rank_correlation_coefficient.py:31:16     - Unknown word (Spearman's) -- Calculates Spearman's rank correlation coefficient
maths/special_numbers/armstrong_numbers.py:12:1      - Unknown word (PASSING)      -- PASSING = (1, 153, 370, 371
maths/special_numbers/armstrong_numbers.py:13:1      - Unknown word (FAILING)      -- FAILING: tuple = (-153, -1,
maths/special_numbers/armstrong_numbers.py:16:5      - Unknown word (armstrong)    -- def armstrong_number(n: int) -> bool
maths/special_numbers/armstrong_numbers.py:34:7      - Unknown word (Dividing)     -- # Dividing number into separate
maths/special_numbers/armstrong_numbers.py:43:5      - Unknown word (pluperfect)   -- def pluperfect_number(n: int) -> bool
maths/special_numbers/armstrong_numbers.py:70:5      - Unknown word (narcissistic) -- def narcissistic_number(n: int) -> bool
maths/special_numbers/armstrong_numbers.py:7:35      - Unknown word (Narcissistic) -- numbers are also called Narcissistic numbers and Pluperfect
maths/special_numbers/armstrong_numbers.py:7:60      - Unknown word (Pluperfect)   -- Narcissistic numbers and Pluperfect numbers.
maths/special_numbers/armstrong_numbers.py:80:5      - Unknown word (expo)         -- expo = len(str(n))  # the
maths/special_numbers/armstrong_numbers.py:9:9       - Unknown word (Encyclopedia) -- On-Line Encyclopedia of Integer Sequences
maths/special_numbers/automorphic_number.py:14:8      - Unknown word (automorphic) -- def is_automorphic_number(number: int)
maths/special_numbers/carmichael_number.py:35:8      - Unknown word (carmichael) -- def is_carmichael_number(n: int) -> bool
maths/special_numbers/happy_number.py:1:8       - Unknown word (happy)      -- def is_happy_number(number: int)
maths/special_numbers/happy_number.py:6:44      - Unknown word (happiness)  -- number to check for happiness.
maths/special_numbers/harshad_numbers.py:2:3       - Unknown word (harshad)    -- A harshad number (or more specifically
maths/special_numbers/krishnamurthy_number.py:26:5      - Unknown word (krishnamurthy) -- def krishnamurthy(number: int) -> bool
maths/special_numbers/krishnamurthy_number.py:3:21      - Unknown word (Peterson)   -- It is also known as Peterson Number
maths/special_numbers/krishnamurthy_number.py:45:51     - Unknown word (Krisnamurthy)  -- whether a number is a Krisnamurthy Number or not.")
maths/special_numbers/polygonal_numbers.py:3:33      - Unknown word (gonal)      -- the `num`th `sides`-gonal number. It is assumed
maths/special_numbers/pronic_number.py:13:8      - Unknown word (pronic)     -- def is_pronic(number: int) -> bool
maths/special_numbers/pronic_number.py:3:28      - Unknown word (Proic)      -- number n is said to be a Proic number if
maths/special_numbers/proth_number.py:10:5      - Unknown word (proth)      -- def proth(number: int) -> int
maths/special_numbers/proth_number.py:46:9      - Unknown word (Hence)      -- Hence, we have a +2 in the
maths/special_numbers/ugly_numbers.py:3:58      - Unknown word (ugly)       -- shows the first 11 ugly numbers. By convention
maths/special_numbers/ugly_numbers.py:3:75      - Unknown word (convention) -- 11 ugly numbers. By convention,
maths/special_numbers/weird_number.py:32:5      - Unknown word (abundant)   -- def abundant(n: int) -> bool:
maths/special_numbers/weird_number.py:4:22      - Unknown word (weird)      -- Fun fact: The set of weird numbers has positive
maths/sum_of_arithmetic_series.py:1:7       - Unknown word (Coder)      -- # DarkCoder
maths/sumset.py:15:32     - Unknown word (Sylvester's) -- return: the nth number in Sylvester's sequence
maths/sylvester_sequence.py:11:5      - Unknown word (sylvester)  -- def sylvester(number: int) -> int
maths/tanh.py:2:52      - Unknown word (tangent)    -- implementation of the tangent hyperbolic
maths/tanh.py:2:60      - Unknown word (hyperbolic) -- implementation of the tangent hyperbolic
maths/test_prime_check.py:2:1       - Unknown word (Minimalist) -- Minimalist file that allows pytest
maths/twin_prime.py:14:5      - Unknown word (twin)       -- def twin_prime(number: int)
maths/two_sum.py:37:9      - Unknown word (compl)      -- compl = target - val
maths/volume.py:234:15    - Unknown word (circ)       -- def vol_right_circ_cone(radius: float,
maths/volume.py:261:9     - Unknown word (prism)      -- def vol_prism(area_of_base: float
maths/volume.py:263:33    - Unknown word (Prism)      -- Calculate the Volume of a Prism.
maths/volume.py:290:9     - Unknown word (pyramid)    -- def vol_pyramid(area_of_base: float
maths/volume.py:292:33    - Unknown word (Pyramid)    -- Calculate the Volume of a Pyramid.
maths/volume.py:341:35    - Unknown word (cubed)      -- is 4/3 * pi * radius cubed
maths/volume.py:402:9     - Unknown word (hollow)     -- def vol_hollow_circular_cylinder(
maths/volume.py:406:31    - Unknown word (Hollow)     -- Calculate the Volume of a Hollow Circular Cylinder.
maths/volume.py:513:9     - Unknown word (icosahedron) -- def vol_icosahedron(tri_side: float) ->
maths/volume.py:515:34    - Unknown word (Icosahedron) -- Calculate the Volume of an Icosahedron.
maths/volume.py:544:44    - Unknown word (Calculations) -- Results of Various Volume Calculations."""
maths/volume.py:557:13    - Unknown word (Spherical)    -- print(f"Spherical cap: {vol_spherical
maths/volume.py:558:13    - Unknown word (Spheres)      -- print(f"Spheres intersetion: {vol_spheres
maths/volume.py:558:21    - Unknown word (intersetion)  -- print(f"Spheres intersetion: {vol_spheres_intersect
maths/volume.py:60:9      - Unknown word (spheres)    -- def vol_spheres_intersect(
maths/volume.py:66:51     - Unknown word (caps)       -- composed by two spherical caps and therefore its volume
maths/volume.py:81:66     - Unknown word (smallers)   -- returns the volume of the smallers sphere
maths/zellers_congruence.py:5:5       - Unknown word (zeller)     -- def zeller(date_input: str) ->
maths/zellers_congruence.py:77:15     - Unknown word (Monday)     -- "1": "Monday",
maths/zellers_congruence.py:78:15     - Unknown word (Tuesday)    -- "2": "Tuesday",
maths/zellers_congruence.py:79:15     - Unknown word (Wednesday)  -- "3": "Wednesday",
maths/zellers_congruence.py:80:15     - Unknown word (Thursday)   -- "4": "Thursday",
maths/zellers_congruence.py:81:15     - Unknown word (Friday)     -- "5": "Friday",
maths/zellers_congruence.py:82:15     - Unknown word (Saturday)   -- "6": "Saturday",
maths/zellers_congruence.py:8:47      - Unknown word (Gregorian)  -- week for nearly any Gregorian or Julian calendar date
maths/zellers_congruence.py:8:60      - Unknown word (Julian)     -- nearly any Gregorian or Julian calendar date
matrix/binary_search_matrix.py:3:19      - Unknown word (carries)    -- This function carries out Binary search on
matrix/count_islands_in_matrix.py:1:44      - Unknown word (areas)      -- is a group of linked areas, all having the same
matrix/count_islands_in_matrix.py:1:6       - Unknown word (island)     -- # An island in matrix is a group
matrix/count_islands_in_matrix.py:20:9      - Unknown word (diffs)      -- def diffs(self, i: int, j: int
matrix/count_islands_in_matrix.py:22:50     - Unknown word (Coordinate) -- , 0, 0, 1, 1, 1]  # Coordinate order
matrix/count_islands_in_matrix.py:2:30      - Unknown word (islands)    -- code counts number of islands in a given matrix, with
matrix/count_paths.py:29:27     - Unknown word (inaccessible) -- represents a block (inaccessible)
matrix/cramers_rule_2x2.py:28:38     - Unknown word (Consistent) -- Infinite solutions. (Consistent system)
matrix/cramers_rule_2x2.py:32:31     - Unknown word (Inconsistent) -- ValueError: No solution. (Inconsistent system)
matrix/cramers_rule_2x2.py:5:5       - Unknown word (cramers)    -- def cramers_rule_2x2(equation1:
matrix/cramers_rule_2x2.py:65:21     - Unknown word (determinants) -- # Calculate the determinants of the matrices
matrix/cramers_rule_2x2.py:70:69     - Unknown word (Cramer's)     -- has a solution (using Cramer's rule)
matrix/inverse_of_matrix.py:141:42    - Unknown word (Adjoint)    -- the cofactor matrix (Adjoint matrix)
matrix/inverse_of_matrix.py:142:9     - Unknown word (adjoint)    -- adjoint_matrix = array(cofactor
matrix/inverse_of_matrix.py:91:57     - Unknown word (Sarrus)     -- of the matrix using Sarrus rule
matrix/largest_square_area_in_matrix.py:46:44     - Unknown word (approch)    -- area_in_matrix_top_down_approch(
matrix/largest_square_area_in_matrix.py:53:8      - Unknown word (aren't)     -- We aren't using dp_array here
matrix/matrix_based_game.py:15:14     - Unknown word (Simulates)  -- 3. `move_x`: Simulates gravity in a column
matrix/matrix_based_game.py:16:14     - Unknown word (Reorganizes) -- 4. `move_y`: Reorganizes the matrix by shifting
matrix/matrix_based_game.py:16:57     - Unknown word (leftward)    -- by shifting columns leftward when a column becomes
matrix/matrix_based_game.py:22:35     - Unknown word (specifying)  -- size (`lines`): Integer specifying the size of the matrix
matrix/matrix_based_game.py:23:31     - Unknown word (Rows)        -- content (`matrix`): Rows of the matrix, each
matrix/matrix_based_game.py:24:22     - Unknown word (movs)        -- . Number of moves (`movs`): Integer indicating
matrix/matrix_based_game.py:33:1      - Unknown word (RRBG)        -- RRBG
matrix/matrix_based_game.py:34:1      - Unknown word (RBBG)        -- RBBG
matrix/matrix_based_game.py:35:1      - Unknown word (YYGG)        -- YYGG
matrix/matrix_based_game.py:36:1      - Unknown word (XYGG)        -- XYGG
matrix/matrix_based_game.py:48:51     - Unknown word (prompted)    -- the required inputs as prompted.
matrix/matrix_based_game.py:4:50      - Unknown word (players)    -- matrix-based game where players interact with a grid
matrix/matrix_based_game.py:5:23      - Unknown word (goals)      -- elements. The primary goals are to:
matrix/matrix_based_game.py:7:47      - Unknown word (simulating) -- adjust the matrix by simulating gravity, and reorganize
matrix/matrix_based_game.py:7:71      - Unknown word (reorganize) -- simulating gravity, and reorganize empty
matrix/matrix_class.py:130:7     - Unknown word (MATRIX)        -- # MATRIX INFORMATION
matrix/matrix_class.py:248:14    - Unknown word (MANIPULATION)  -- # MATRIX MANIPULATION
matrix/matrix_class.py:310:31    - Unknown word (Subtraction)   -- raise ValueError("Subtraction requires matrices of
matrix/matrix_class.py:33:20     - Unknown word (invertability) -- Squareness and invertability are represented as bool
matrix/matrix_class.py:33:5      - Unknown word (Squareness) -- Squareness and invertability are
matrix/matrix_class.py:36:19     - Unknown word (invertable)    -- >>> matrix.is_invertable()
matrix/matrix_class.py:39:15     - Unknown word (Minors)        -- Identity, Minors, Cofactors and Adjugate
matrix/matrix_class.py:39:23     - Unknown word (Cofactors)     -- Identity, Minors, Cofactors and Adjugate are returned
matrix/matrix_class.py:39:37     - Unknown word (Adjugate)      -- Minors, Cofactors and Adjugate are returned as Matrices
matrix/matrix_class.py:54:22     - Unknown word (adjugate)      -- >>> print(matrix.adjugate())
matrix/matrix_class.py:63:5      - Unknown word (Determinant)   -- Determinant is an int, float, or
matrix/matrix_class.py:67:5      - Unknown word (Negation)      -- Negation, scalar multiplication
matrix/matrix_equalization.py:4:11      - Unknown word (equalization) -- def array_equalization(vector: list[int], step
matrix/matrix_equalization.py:6:20      - Unknown word (equalizes)    -- This algorithm equalizes all elements of the
matrix/matrix_multiplication_recursion.py:11:46     - Unknown word (currenttly) -- list[int]] # psf/black currenttly fails on this line
matrix/matrix_multiplication_recursion.py:158:20    - Unknown word (Multiplying) -- print("Multiplying:")
matrix/matrix_multiplication_recursion.py:179:5     - Unknown word (mytimeit)    -- mytimeit = partial(timeit, globals
matrix/matrix_operation.py:179:36    - Unknown word (broadcast)  -- operands could not be broadcast together with shape
matrix/max_area_of_island.py:3:19      - Unknown word (directionally) -- land) connected 4-directionally (horizontal or vertical
matrix/max_area_of_island.py:4:17      - Unknown word (surrounded)    -- of the grid are surrounded by water.  The area
matrix/max_area_of_island.py:68:19     - Unknown word (Maximizing)    -- # Maximizing the area
matrix/max_area_of_island.py:83:5      - Unknown word (Directions)    -- Directions are [(x, y+1), (x, y
matrix/pascal_triangle.py:3:13      - Unknown word (havingva)   -- The element havingva row index of r and column
matrix/pascal_triangle.py:3:66      - Unknown word (derivedvas) -- column index of c can be derivedvas follows:
matrix/rotate_matrix.py:3:2       - Unknown word (counterclockwise) -- (counterclockwise)
matrix/rotate_matrix.py:4:1       - Unknown word (Discussion)       -- Discussion in stackoverflow:
matrix/sherman_morrison.py:203:9     - Unknown word (sherman)    -- def sherman_morrison(self, u: Matrix
matrix/sherman_morrison.py:214:13    - Unknown word (ainv)       -- >>> ainv = Matrix(3, 3, 0)
matrix/sherman_morrison.py:59:33     - Unknown word (indicies)   -- method Matrix.validate_indicies>
matrix/spiral_print.py:2:34      - Unknown word (spiral)     -- print the matrix in spiral form.
matrix/spiral_print.py:56:11     - Unknown word (horizotal)  -- # horizotal printing increasing
matrix/spiral_print.py:79:9      - Unknown word (Easy)       -- # Other Easy to understand Approach
matrix/spiral_print.py:92:29     - Unknown word (matrix's)   -- Step 2. Now perform matrix's Transpose operation
matrix/spiral_print.py:95:27     - Unknown word (hits)       -- base case hits.
matrix/tests/test_matrix_operation.py:18:40     - Unknown word (matop)      -- matrix_operation as matop
matrix/tests/test_matrix_operation.py:46:9      - Unknown word (theo)       -- theo = matop.add(mat1, mat
matrix/tests/test_matrix_operation.py:4:62      - Unknown word (Additional) -- the following line in "Additional Arguments" for
matrix/tests/test_matrix_operation.py:84:58     - Unknown word (meets)      -- multiplication.__name__} meets dim requirements")
matrix/validate_sudoku_board.py:24:5      - Unknown word (SQUARES)    -- NUM_SQUARES = 9
matrix/validate_sudoku_board.py:31:32     - Unknown word (unsolvable) -- board may be valid but unsolvable.
networking_flow/ford_fulkerson.py:58:10     - Unknown word (fulkerson)  -- def ford_fulkerson(graph: list, source
networking_flow/ford_fulkerson.py:62:5      - Unknown word (CAUTION)    -- CAUTION: This function changes
networking_flow/ford_fulkerson.py:7:20      - Unknown word (augmenting) -- (2) Choose the augmenting path from source to
neural_network/activation_functions/binary_step.py:4:42      - Unknown word (neuron)     -- function in which the neuron is activated if the
neural_network/activation_functions/binary_step.py:5:18      - Unknown word (deactivated) -- or 0, else it is deactivated
neural_network/activation_functions/exponential_linear_unit.py:23:10     - Unknown word (Mathematically) -- Mathematically, f(x) = x, x>0 else
neural_network/activation_functions/gaussian_error_linear_unit.py:18:5      - Unknown word (Mathematical) -- Mathematical function sigmoid takes
neural_network/activation_functions/gaussian_error_linear_unit.py:36:9      - Unknown word (gelu)         -- gelu_vec (np.ndarray): The
neural_network/activation_functions/gaussian_error_linear_unit.py:6:29      - Unknown word (GELU)       -- Gaussian Error Linear Unit (GELU) is a high-performing
neural_network/activation_functions/leaky_rectified_linear_unit.py:12:11     - Unknown word (rectified)  -- def leaky_rectified_linear_unit(vector:
neural_network/activation_functions/leaky_rectified_linear_unit.py:12:5      - Unknown word (leaky)      -- def leaky_rectified_linear_unit
neural_network/activation_functions/leaky_rectified_linear_unit.py:4:51      - Unknown word (vanishing)  -- addresses the problem of the vanishing gradient.
neural_network/activation_functions/mish.py:14:5      - Unknown word (mish)       -- def mish(vector: np.ndarray)
neural_network/activation_functions/mish.py:4:11      - Unknown word (Improved)   -- Use Case: Improved version of the ReLU
neural_network/activation_functions/rectified_linear_unit.py:36:55     - Unknown word (maxima)     -- return element-wise maxima.
neural_network/activation_functions/scaled_exponential_linear_unit.py:2:50      - Unknown word (SELU)       -- Exponential Linear Unit or SELU function.
neural_network/activation_functions/scaled_exponential_linear_unit.py:6:16      - Unknown word (normalizing) -- SELU is a self-normalizing activation function
neural_network/activation_functions/soboleva_modified_hyperbolic_tangent.py:14:5      - Unknown word (soboleva)   -- def soboleva_modified_hyperbolic
neural_network/activation_functions/soboleva_modified_hyperbolic_tangent.py:28:54     - Unknown word (SMHT)       -- array after applying SMHT function
neural_network/activation_functions/squareplus.py:12:5      - Unknown word (squareplus) -- def squareplus(vector: np.ndarray,
neural_network/activation_functions/squareplus.py:18:35     - Unknown word (curved)     -- float): size of the curved region
neural_network/activation_functions/swish.py:10:31     - Unknown word (variety)     -- networks applied to a variety of challenging domains
neural_network/activation_functions/swish.py:10:42     - Unknown word (challenging) -- applied to a variety of challenging domains such as
neural_network/activation_functions/swish.py:3:4       - Unknown word (swish)      -- or swish function.
neural_network/activation_functions/swish.py:53:31     - Unknown word (trainable)   -- vector: np.ndarray, trainable_parameter: int) -> np
neural_network/activation_functions/swish.py:9:1       - Unknown word (Extensive)  -- Extensive experiments shows that
neural_network/activation_functions/swish.py:9:64      - Unknown word (outperforms) -- consistently matches or outperforms ReLU
neural_network/back_propagation_neural_network.py:126:28    - Unknown word (ydata)      -- def train(self, xdata, ydata, train_round, accuracy
neural_network/back_propagation_neural_network.py:130:22    - Unknown word (hlines)     -- self.ax_loss.hlines(self.accuracy, 0, self
neural_network/back_propagation_neural_network.py:15:9      - Unknown word (Stephen)    -- Author: Stephen Lee
neural_network/back_propagation_neural_network.py:41:49     - Unknown word (paras)      -- rate: learning rate for paras
neural_network/back_propagation_neural_network.py:69:35     - Unknown word (xdata)      -- forward_propagation(self, xdata):
neural_network/back_propagation_neural_network.py:99:7      - Unknown word (BPNN)       -- class BPNN:
neural_network/convolution_neural_network.py:109:31    - Unknown word (convs)       -- convolute(self, data, convs, w_convs, thre_convs
neural_network/convolution_neural_network.py:109:9     - Unknown word (convolute)   -- def convolute(self, data, convs, w
neural_network/convolution_neural_network.py:148:14    - Unknown word (pooled)      -- size_pooled = int(size_map / size
neural_network/convolution_neural_network.py:213:25    - Unknown word (datas)       -- self, patterns, datas_train, datas_teach,
neural_network/convolution_neural_network.py:213:44    - Unknown word (teach)       -- datas_train, datas_teach, n_repeat, error_accuracy
neural_network/convolution_neural_network.py:217:29    - Unknown word (Train)       -- print((" - - Shape: Train_Data ", np.shape(datas
neural_network/convolution_neural_network.py:218:29    - Unknown word (Teach)       -- print((" - - Shape: Teach_Data ", np.shape(datas
neural_network/convolution_neural_network.py:229:35    - Unknown word (conved)      -- data_focus1, data_conved1 = self.convolute(
neural_network/convolution_neural_network.py:251:39    - Unknown word (Leaning)     -- --------------Model Leaning -------------------
neural_network/convolution_neural_network.py:299:13    - Unknown word (yplot)       -- yplot = [error_accuracy for
neural_network/convolution_neural_network.py:340:42    - Unknown word (convoluting) -- data of image after convoluting process so we can check
neural_network/convolution_neural_network.py:3:53      - Unknown word (Recognizing) -- Neural Network For Photo Recognizing
neural_network/convolution_neural_network.py:43:19     - Unknown word (thre)        -- self.rate_thre = rate_t
neural_network/convolution_neural_network.py:4:1       - Unknown word (Goal)        -- Goal - - Recognize Handwriting
neural_network/input_data.py:10:62     - Unknown word (BASIS)      -- distributed on an "AS IS" BASIS,
neural_network/input_data.py:11:67     - Unknown word (implied)    -- KIND, either express or implied.
neural_network/input_data.py:12:45     - Unknown word (governing)  -- the specific language governing permissions and
neural_network/input_data.py:144:29    - Unknown word (inages)     -- fake_data: Ignore inages and labels, use fake
neural_network/input_data.py:1:46      - Unknown word (Rights)     -- TensorFlow Authors. All Rights Reserved.
neural_network/input_data.py:27:40     - Unknown word (gfile)      -- python.platform import gfile
neural_network/input_data.py:37:3      - Unknown word (CVDF)       -- # CVDF mirror of http://yann
neural_network/input_data.py:3:3       - Unknown word (Licensed)   -- # Licensed under the Apache License
neural_network/input_data.py:60:12     - Unknown word (Extracting) -- print("Extracting", f.name)
neural_network/input_data.py:75:45     - Unknown word (tensors)    -- Please use tf.one_hot on tensors.")
neural_network/input_data.py:77:34     - Unknown word (scalars)    -- Convert class labels from scalars to one-hot vectors.
neural_network/input_data.py:98:26     - Unknown word (bystream)   -- ValueError: If the bystream doesn't start with
neural_network/input_data.py:9:22      - Unknown word (applicable) -- Unless required by applicable law or agreed to in
neural_network/input_data.py:9:40      - Unknown word (agreed)     -- by applicable law or agreed to in writing, software
neural_network/simple_neural_network.py:46:27     - Unknown word (miss)       -- # How much did we miss?
neural_network/two_hidden_layers_neural_network.py:100:46    - Unknown word (sogmoid)         -- using derivative of sogmoid activation function
neural_network/two_hidden_layers_neural_network.py:100:9     - Unknown word (Updation)        -- Updation is done using derivative
neural_network/two_hidden_layers_neural_network.py:14:23     - Unknown word (initializes)     -- This function initializes the TwoHiddenLayerNeuralNetwo
neural_network/two_hidden_layers_neural_network.py:159:22    - Unknown word (feedforwarding)  -- Performs the feedforwarding and back propagation
neural_network/two_hidden_layers_neural_network.py:255:5     - Unknown word (respected)       -- respected methods for the desired
neural_network/two_hidden_layers_neural_network.py:3:60      - Unknown word (Backpropagation) -- ddeeplearning.com/chap2.html (Backpropagation)
other/alternative_list_arrange.py:3:16      - Unknown word (arranges)   -- The method arranges two lists as one list
other/bankers_algorithm.py:105:9     - Unknown word (Utilize)       -- Utilize various methods in this
other/bankers_algorithm.py:10:1      - Unknown word (predetermined) -- predetermined maximum possible amounts
other/bankers_algorithm.py:110:18    - Unknown word (Allocated)     -- Allocated Resource Table
other/bankers_algorithm.py:12:8      - Unknown word (deciding)      -- before deciding whether allocation should
other/bankers_algorithm.py:15:12     - Unknown word (Rosetta)       -- | [Credit] Rosetta Code C implementation
other/bankers_algorithm.py:15:42     - Unknown word (helped)        -- Code C implementation helped very much.
other/bankers_algorithm.py:182:40    - Unknown word (freed)         -- # update available/freed resources stack
other/bankers_algorithm.py:194:48    - Unknown word (Aborting)      -- System in unsafe state. Aborting...\n")
other/bankers_algorithm.py:1:34      - Unknown word (Banker's)   -- implementation of the Banker's Algorithm in Operating
other/bankers_algorithm.py:1:56      - Unknown word (Operating)  -- Banker's Algorithm in Operating Systems using
other/bankers_algorithm.py:4:13      - Unknown word (Biney)      -- # "Author: "Biney Kingsley (bluedistro
other/bankers_algorithm.py:4:19      - Unknown word (Kingsley)   -- # "Author: "Biney Kingsley (bluedistro@github.io
other/bankers_algorithm.py:8:62      - Unknown word (avoidance)  -- allocation and deadlock avoidance algorithm
other/bankers_algorithm.py:9:14      - Unknown word (Edsger)     -- developed by Edsger Dijkstra that tests
other/davis_putnam_logemann_loveland.py:102:29    - Unknown word (clauses)        -- formula is a set of clauses.
other/davis_putnam_logemann_loveland.py:109:57    - Unknown word (themselves)     -- clauses and the clauses themselves.
other/davis_putnam_logemann_loveland.py:160:23    - Unknown word (uncomplemented) -- | A symbol is the uncomplemented form of a literal.
other/davis_putnam_logemann_loveland.py:18:7      - Unknown word (Clause)         -- class Clause:
other/davis_putnam_logemann_loveland.py:20:9      - Unknown word (clause)         -- | A clause represented in Conjunctive
other/davis_putnam_logemann_loveland.py:21:45     - Unknown word (complemented)   -- of literals, either complemented or otherwise.
other/davis_putnam_logemann_loveland.py:285:5     - Unknown word (dpll)           -- def dpll_algorithm(
other/davis_putnam_logemann_loveland.py:4:33      - Unknown word (DPLL)       -- Putnam-Logemann-Loveland (DPLL) algorithm is a complete
other/davis_putnam_logemann_loveland.py:5:35      - Unknown word (satisfiability) -- algorithm for deciding the satisfiability of propositional logic
other/davis_putnam_logemann_loveland.py:5:53      - Unknown word (propositional)  -- the satisfiability of propositional logic formulae in
other/davis_putnam_logemann_loveland.py:6:1       - Unknown word (conjunctive)    -- conjunctive normal form, i.e, for
other/davis_putnam_logemann_loveland.py:6:47      - Unknown word (Conjunctive)    -- i.e, for solving the Conjunctive Normal Form SATisfiability
other/davis_putnam_logemann_loveland.py:6:73      - Unknown word (Tisfiability)   -- Conjunctive Normal Form SATisfiability
other/davis_putnam_logemann_loveland.py:85:22     - Unknown word (disjunction)    -- 4. Compute disjunction of all values assigned
other/doomsday.py:42:5      - Unknown word (centurian)  -- centurian = year % 100
other/doomsday.py:44:5      - Unknown word (dooms)      -- dooms_day = (
other/doomsday.py:4:1       - Unknown word (DOOMSDAY)   -- DOOMSDAY_LEAP = [4, 1, 7, 4,
other/doomsday.py:4:10      - Unknown word (LEAP)       -- DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6
other/fischer_yates_shuffle.py:13:12     - Unknown word (yates)      -- def fisher_yates_shuffle(data: list)
other/gauss_easter.py:25:5      - Unknown word (metonic)    -- metonic_cycle = year % 19
other/gauss_easter.py:26:12     - Unknown word (leap)       -- julian_leap_year = year % 4
other/gauss_easter.py:26:5      - Unknown word (julian)     -- julian_leap_year = year %
other/gauss_easter.py:28:14     - Unknown word (inhibits)   -- leap_day_inhibits = math.floor(year /
other/gauss_easter.py:29:11     - Unknown word (orbit)      -- lunar_orbit_correction = math.floor
other/gauss_easter.py:29:5      - Unknown word (lunar)      -- lunar_orbit_correction = math
other/gauss_easter.py:30:14     - Unknown word (reinstall)  -- leap_day_reinstall_number = leap_day_inhibits
other/gauss_easter.py:31:5      - Unknown word (secular)    -- secular_moon_shift = (
other/gauss_easter.py:36:27     - Unknown word (March)      -- days to be added to March 21
other/gauss_easter.py:39:14     - Unknown word (Paschal)    -- # PHM -> Paschal Full Moon
other/gauss_easter.py:59:9      - Unknown word (tense)      -- tense = "will be" if year
other/gauss_easter.py:60:17     - Unknown word (Easter)     -- print(f"Easter in {year} {tense} {gauss
other/gauss_easter.py:9:11      - Unknown word (easter)     -- def gauss_easter(year: int) -> datetime
other/graham_scan.py:119:5     - Unknown word (minidx)     -- minidx = 0
other/graham_scan.py:132:65    - Unknown word (preparing)  -- point from points for preparing for sort
other/graham_scan.py:19:7      - Unknown word (Direction)  -- class Direction(Enum):
other/graham_scan.py:28:11     - Unknown word (comparer)   -- def angle_comparer(point: tuple[int, int
other/graham_scan.py:28:44     - Unknown word (minx)       -- point: tuple[int, int], minx: int, miny: int) ->
other/graham_scan.py:28:55     - Unknown word (miny)       -- int, int], minx: int, miny: int) -> float:
other/graham_scan.py:29:25     - Unknown word (toward)     -- """Return the angle toward to point from (minx
other/graham_scan.py:46:23     - Unknown word (accorgind)  -- # sort the points accorgind to the angle from the
other/graham_scan.py:6:23      - Unknown word (graham)     -- python3 -m doctest -v graham_scan.py
other/graham_scan.py:97:35     - Unknown word (hell)       -- The points on convex hell.
other/greedy.py:44:37     - Unknown word (Coca)       -- "Burger", "Pizza", "Coca Cola", "Rice",
other/greedy.py:44:42     - Unknown word (Cola)       -- Burger", "Pizza", "Coca Cola", "Rice",
other/greedy.py:45:18     - Unknown word (Sambhar)    -- ... "Sambhar", "Chicken", "Fries
other/greedy.py:45:29     - Unknown word (Chicken)    -- "Sambhar", "Chicken", "Fries", "Milk"]
other/greedy.py:45:40     - Unknown word (Fries)      -- Sambhar", "Chicken", "Fries", "Milk"]
other/greedy.py:45:49     - Unknown word (Milk)       -- Chicken", "Fries", "Milk"]
other/guess_the_number_search.py:4:55      - Unknown word (guessed)    -- and higher of number guessed
other/h_index.py:3:28      - Unknown word (citations)  -- an array of integers citations where citations[i] is
other/h_index.py:4:13      - Unknown word (researcher) -- citations a researcher received for their ith
other/h_index.py:5:1       - Unknown word (researcher's) -- researcher's h-index.
other/h_index.py:7:56      - Unknown word (scientist)    -- index on Wikipedia: A scientist has an
other/least_recently_used.py:12:59     - Unknown word (Caching)    -- Recently Used (LRU) Caching.
other/least_recently_used.py:53:26     - Unknown word (recently)   -- Remove the least recently used key if the store
other/lfu_cache.py:133:9     - Unknown word (Moves)      -- Moves node forward to maintain
other/lfu_cache.py:166:67    - Unknown word (stand)      -- data. Can be used as a stand-alone object
other/lfu_cache.py:185:23    - Unknown word (misses)     -- CacheInfo(hits=3, misses=2, capacity=2, current
other/lfu_cache.py:265:47    - Unknown word (assertions) -- to type checker via assertions
other/lfu_cache.py:290:9     - Unknown word (Decorated)  -- Decorated function must be function
other/linear_congruential_generator.py:1:22      - Unknown word (Carryer)    -- _author__ = "Tobias Carryer"
other/magicdiamondpattern.py:1:33      - Unknown word (diamond)    -- program for generating diamond pattern in Python 3
other/majority_vote_algorithm.py:2:9       - Unknown word (Booyer)     -- This is Booyer-Moore Majority Vote
other/maximum_subsequence.py:5:40      - Unknown word (amongst)    -- maximum possible sum amongst all non - empty subsequences
other/nested_brackets.py:45:32     - Unknown word (bowl)       -- balanced("Life is a bowl of cherries.")
other/nested_brackets.py:45:40     - Unknown word (cherries)   -- balanced("Life is a bowl of cherries.")
other/number_container_system.py:173:11    - Unknown word (Simply)     -- # Simply return the 0th index
other/password.py:26:9      - Unknown word (incl)       -- # chars_incl= characters that must
other/password.py:29:33     - Unknown word (boot)       -- Password Generator = full boot with random_number,
other/password.py:47:19     - Unknown word (generalised) -- # random is a generalised function for letters
other/password.py:60:29     - Unknown word (Hwea)        -- is_strong_password('Hwea7$2!')
other/password.py:66:38     - Unknown word (udfhiaf)     -- strong_password('Hello1238udfhiaf038fajdvjjf!jaiuFhkqi
other/password.py:66:48     - Unknown word (fajdvjjf)    -- 'Hello1238udfhiaf038fajdvjjf!jaiuFhkqi1')
other/password.py:66:57     - Unknown word (jaiu)        -- 8udfhiaf038fajdvjjf!jaiuFhkqi1')
other/password.py:66:61     - Unknown word (Fhkqi)       -- udfhiaf038fajdvjjf!jaiuFhkqi1')
other/password.py:93:24     - Unknown word (thinking)    -- print("[If you are thinking of using this password
other/quine.py:6:3       - Unknown word (quine)      -- A quine is a computer program
other/quine.py:7:37      - Unknown word (disregarding) -- as its only output (disregarding this docstring and the
other/quine.py:7:73      - Unknown word (shebang)      -- this docstring and the shebang).
other/scoring_algorithm.py:11:21     - Unknown word (vehicles)   -- Example for data of vehicles
other/scoring_algorithm.py:14:11     - Unknown word (mileage)    -- price|mileage|registration_year
other/scoring_algorithm.py:20:13     - Unknown word (vehicle)    -- We want the vehicle with the lowest price
other/scoring_algorithm.py:21:20     - Unknown word (newest)     -- lowest mileage but newest registration year.
other/scoring_algorithm.py:2:17      - Unknown word (markmelnic) -- | developed by: markmelnic
other/scoring_algorithm.py:50:9      - Unknown word (dlist)      -- for dlist, weight in zip(data
other/scoring_algorithm.py:52:9      - Unknown word (maxd)       -- maxd = max(dlist)
other/scoring_algorithm.py:5:34      - Unknown word (percentual) -- using a range based percentual proximity algorithm
other/scoring_algorithm.py:5:45      - Unknown word (proximity)  -- range based percentual proximity algorithm
other/scoring_algorithm.py:7:11      - Unknown word (principle)  -- The basic principle is that all values supplied
other/scoring_algorithm.py:90:9      - Unknown word (slist)      -- for slist in score_lists:
other/scoring_algorithm.py:97:5      - Unknown word (procentual) -- def procentual_proximity(
other/sdes.py:36:11     - Unknown word (sbox)       -- def apply_sbox(s, data):
other/sdes.py:96:29     - Unknown word (decypting)  -- print("Plain text after decypting is:", PT)
other/tower_of_hanoi.py:1:29      - Unknown word (pole)       -- move_tower(height, from_pole, to_pole, with_pole
other/word_search.py:11:26     - Unknown word (randonly)   -- can be made dynamic by randonly selecting a certain
other/word_search.py:13:9      - Unknown word (fits)       -- # count fits within the matrix size
other/word_search.py:14:34     - Unknown word (fish)       -- cat", "dog", "snake", "fish"]
other/word_search.py:337:78    - Unknown word (forcing)     -- that is used when brute forcing
other/word_search.py:351:5     - Unknown word (Graphically) -- Graphically displays the word search
other/word_search.py:60:49     - Unknown word (overwritten) -- column that will be overwritten
physics/altitude_pressure.py:14:53     - Unknown word (Pascals)    -- reference .Pressure is in Pascals
physics/altitude_pressure.py:2:19      - Unknown word (altitude)   -- Title : Calculate altitude using Pressure
physics/altitude_pressure.py:39:17     - Unknown word (Atmospheric) -- ValueError: Atmospheric Pressure can not be
physics/altitude_pressure.py:5:57      - Unknown word (Barometric) -- proximates the altitude using Barometric formula
physics/archimedes_principle_of_buoyant_force.py:11:3      - Unknown word (Acceleration) -- # Acceleration Constant on Earth (unit
physics/archimedes_principle_of_buoyant_force.py:15:5      - Unknown word (archimedes)   -- def archimedes_principle(
physics/archimedes_principle_of_buoyant_force.py:21:34     - Unknown word (liquid)       -- volume: volume of object/liquid being displaced by the
physics/archimedes_principle_of_buoyant_force.py:21:47     - Unknown word (displaced)    -- object/liquid being displaced by the object (m^3)
physics/archimedes_principle_of_buoyant_force.py:22:45     - Unknown word (Gravitational) -- Acceleration from gravity. Gravitational force on the system
physics/archimedes_principle_of_buoyant_force.py:2:15      - Unknown word (buoyant)    -- Calculate the buoyant force of any body completely
physics/archimedes_principle_of_buoyant_force.py:2:65      - Unknown word (submerged)  -- completely or partially submerged in a static
physics/archimedes_principle_of_buoyant_force.py:36:17     - Unknown word (Impossible)    -- ValueError: Impossible object volume
physics/archimedes_principle_of_buoyant_force.py:3:1       - Unknown word (fluid)      -- fluid. This principle was
physics/basic_orbital_capture.py:102:34    - Unknown word (instant)     -- radius of projectile at instant 0 to CM of target
physics/basic_orbital_capture.py:107:19    - Unknown word (projectile's) -- (1)At time=0  the projectile's energy falling from
physics/basic_orbital_capture.py:107:39    - Unknown word (falling)      -- projectile's energy falling from infinity| E=K+U
physics/basic_orbital_capture.py:111:26    - Unknown word (momentum)     -- at time=0 the angular momentum of the projectile relative
physics/basic_orbital_capture.py:116:65    - Unknown word (kinetic)      -- approach will be its kinetic energy
physics/basic_orbital_capture.py:117:29    - Unknown word (gravitational) -- closest approach plus gravitational potential energy(-(GMm
physics/basic_orbital_capture.py:127:10    - Unknown word (conservation)  -- (5)Using conservation of angular momentum
physics/basic_orbital_capture.py:136:10    - Unknown word (plugs)         -- (c) b plugs int a|
physics/basic_orbital_capture.py:173:28    - Unknown word (Fall)          -- Problem Set 3 #8 c.Fall_2017|Honors Astronomy
physics/basic_orbital_capture.py:173:38    - Unknown word (Honors)        -- Set 3 #8 c.Fall_2017|Honors Astronomy|Professor
physics/basic_orbital_capture.py:173:45    - Unknown word (Astronomy)     -- c.Fall_2017|Honors Astronomy|Professor Rachel Bezanson
physics/basic_orbital_capture.py:173:55    - Unknown word (Professor)     -- 17|Honors Astronomy|Professor Rachel Bezanson
physics/basic_orbital_capture.py:173:65    - Unknown word (Rachel)        -- Astronomy|Professor Rachel Bezanson
physics/basic_orbital_capture.py:173:72    - Unknown word (Bezanson)      -- Astronomy|Professor Rachel Bezanson
physics/basic_orbital_capture.py:176:16    - Unknown word (Planetary)     -- 8.8 Planetary Rendezvous: Pg.368
physics/basic_orbital_capture.py:176:26    - Unknown word (Rendezvous)    -- 8.8 Planetary Rendezvous: Pg.368
physics/basic_orbital_capture.py:27:58     - Unknown word (kilograms)   -- central body SI units: kilograms | kg
physics/basic_orbital_capture.py:2:37      - Unknown word (radii)      -- functions will return the radii of impact for a target
physics/basic_orbital_capture.py:3:56      - Unknown word (sectional)  -- it's effective cross sectional area sigma.
physics/basic_orbital_capture.py:4:20      - Unknown word (projectile) -- That is to say any projectile with velocity v passing
physics/basic_orbital_capture.py:5:32      - Unknown word (derivation) -- object with mass M. The derivation of which is given at
physics/basic_orbital_capture.py:70:35     - Unknown word (orbital)     -- radius: The radius of orbital capture and impact for
physics/basic_orbital_capture.py:99:1      - Unknown word (Derivation)  -- Derivation:
physics/basic_orbital_capture.py:9:50      - Unknown word (Astronomers) -- R_capture>R_target. Astronomers refer to the effective
physics/casimir_effect.py:10:23     - Unknown word (resonance)    -- but instead is due to resonance of all-pervasive energy
physics/casimir_effect.py:10:40     - Unknown word (pervasive)    -- to resonance of all-pervasive energy fields in the
physics/casimir_effect.py:10:71     - Unknown word (intervening)  -- energy fields in the intervening
physics/casimir_effect.py:11:60     - Unknown word (falls)        -- strength of the force falls off rapidly with
physics/casimir_effect.py:11:70     - Unknown word (rapidly)      -- the force falls off rapidly with
physics/casimir_effect.py:12:21     - Unknown word (measurable)   -- distance it is only measurable when the distance between
physics/casimir_effect.py:13:13     - Unknown word (submicron)    -- small. On a submicron scale, this force becomes
physics/casimir_effect.py:14:24     - Unknown word (uncharged)    -- dominant force between uncharged conductors.
physics/casimir_effect.py:14:34     - Unknown word (conductors)   -- force between uncharged conductors.
physics/casimir_effect.py:16:17     - Unknown word (Hendrik)      -- Dutch physicist Hendrik B. G. Casimir first
physics/casimir_effect.py:16:7      - Unknown word (physicist)    -- Dutch physicist Hendrik B. G. Casimir
physics/casimir_effect.py:17:22     - Unknown word (experiment)   -- and he formulated an experiment to detect it in 194
physics/casimir_effect.py:17:60     - Unknown word (participating) -- detect it in 1948 while participating in research
physics/casimir_effect.py:17:8      - Unknown word (formulated)   -- and he formulated an experiment to detect
physics/casimir_effect.py:19:10     - Unknown word (metal)         -- parallel metal plates in a vacuum,
physics/casimir_effect.py:19:28     - Unknown word (vacuum)        -- parallel metal plates in a vacuum, and successfully demonstrate
physics/casimir_effect.py:22:25     - Unknown word (idealized)     -- Casimir force F for idealized, perfectly conducting
physics/casimir_effect.py:22:36     - Unknown word (perfectly)     -- force F for idealized, perfectly conducting plates of
physics/casimir_effect.py:22:46     - Unknown word (conducting)    -- idealized, perfectly conducting plates of surface area
physics/casimir_effect.py:23:52     - Unknown word (apart)         -- distance of a meter apart with vacuum between
physics/casimir_effect.py:26:17     - Unknown word (Planck)        -- F = - ((Reduced Planck Constant ℏ) * c * Pi
physics/casimir_effect.py:26:9      - Unknown word (Reduced)       -- F = - ((Reduced Planck Constant ℏ)
physics/casimir_effect.py:34:20     - Unknown word (Polder)        -- - Casimir, H. B. ; Polder, D. (1948) "The Influence
physics/casimir_effect.py:34:43     - Unknown word (Influence)     -- Polder, D. (1948) "The Influence of Retardation on the
physics/casimir_effect.py:34:56     - Unknown word (Retardation)   -- ) "The Influence of Retardation on the
physics/casimir_effect.py:35:18     - Unknown word (Waals)         -- London-van der Waals Forces", Physical Review
physics/casimir_effect.py:35:24     - Unknown word (Forces)        -- London-van der Waals Forces", Physical Review, vol
physics/casimir_effect.py:35:33     - Unknown word (Physical)      -- van der Waals Forces", Physical Review, vol. 73, Issue
physics/casimir_effect.py:3:15      - Unknown word (plates)     -- of one of the plates or distance between
physics/casimir_effect.py:44:1      - Unknown word (REDUCED)       -- REDUCED_PLANCK_CONSTANT = 1
physics/casimir_effect.py:44:9      - Unknown word (PLANCK)        -- REDUCED_PLANCK_CONSTANT = 1.054571
physics/casimir_effect.py:49:5      - Unknown word (casimir)       -- def casimir_force(force: float,
physics/casimir_effect.py:55:34     - Unknown word (plate)         -- Surface area of each plate : magnitude in square
physics/casimir_effect.py:57:59     - Unknown word (Meters)        -- plates : distance in Meters
physics/casimir_effect.py:6:18      - Unknown word (quantum)    -- Description : In quantum field theory, the Casimir
physics/casimir_effect.py:7:1       - Unknown word (acting)     -- acting on the macroscopic boundaries
physics/casimir_effect.py:7:15      - Unknown word (macroscopic) -- acting on the macroscopic boundaries of a confined
physics/casimir_effect.py:7:43      - Unknown word (confined)    -- macroscopic boundaries of a confined space which arises from
physics/casimir_effect.py:87:17     - Unknown word (Magnitude)     -- ValueError: Magnitude of force can not be
physics/casimir_effect.py:8:59      - Unknown word (exerted)      -- is a physical force exerted between separate
physics/casimir_effect.py:8:9       - Unknown word (fluctuations) -- quantum fluctuations of the field. It is
physics/casimir_effect.py:9:71      - Unknown word (particles)    -- nor the exchange of particles,
physics/center_of_mass.py:10:48     - Unknown word (acceleration) -- applied to cause a linear acceleration without an angular
physics/center_of_mass.py:13:17     - Unknown word (mechanics)    -- Calculations in mechanics are often simplified
physics/center_of_mass.py:14:25     - Unknown word (hypothetical) -- center of mass. It is a hypothetical point where the entire
physics/center_of_mass.py:15:15     - Unknown word (concentrated) -- assumed to be concentrated to visualize its motion
physics/center_of_mass.py:16:8      - Unknown word (particle)     -- is the particle equivalent of a given
physics/center_of_mass.py:30:1      - Unknown word (Particle)     -- Particle = namedtuple("Particle
physics/center_of_mass.py:3:15      - Unknown word (masses)     -- positions and masses.
physics/center_of_mass.py:8:11      - Unknown word (barycenter) -- to as the barycenter or balance point) is
physics/centripetal_force.py:11:34     - Unknown word (acts)         -- circular path always acts towards the centre of
physics/centripetal_force.py:13:5      - Unknown word (tangential)   -- and tangential velocity (in meters
physics/centripetal_force.py:14:41     - Unknown word (doubling)     -- that implies that on doubling the tangential velocity
physics/centripetal_force.py:15:31     - Unknown word (quadrupled)   -- centripetal force will be quadrupled. Mathematically it is
physics/centripetal_force.py:3:1       - Unknown word (curvilinear) -- curvilinear motion directed towards
physics/centripetal_force.py:6:13      - Unknown word (centripetal) -- The unit of centripetal force is newton.
physics/centripetal_force.py:9:27      - Unknown word (displacement) -- direction of the object's displacement. Using Newton's second
physics/coulombs_law.py:12:35     - Unknown word (bodies)     -- between two charged bodies (m)
physics/coulombs_law.py:18:5      - Unknown word (coulombs)   -- def coulombs_law(q1: float, q2: float
physics/doppler_frequency.py:11:44     - Unknown word (crest)      -- each successive wave crest is emitted from a position
physics/doppler_frequency.py:11:53     - Unknown word (emitted)    -- successive wave crest is emitted from a position closer
physics/doppler_frequency.py:14:1      - Unknown word (arrivals)   -- arrivals of successive wave crests
physics/doppler_frequency.py:14:29     - Unknown word (crests)     -- arrivals of successive wave crests at the observer is reduced
physics/doppler_frequency.py:17:8      - Unknown word (arrival)    -- so the arrival time between successive
physics/doppler_frequency.py:19:27     - Unknown word (stationary) -- the source of waves is stationary but the observer is
physics/doppler_frequency.py:24:23     - Unknown word (summarized) -- These results are all summarized by the Doppler formula
physics/doppler_frequency.py:2:1       - Unknown word (Doppler's)  -- Doppler's effect
physics/doppler_frequency.py:35:76     - Unknown word (radar)      -- engineering, such as radar,
physics/doppler_frequency.py:36:1      - Unknown word (astronomy)  -- astronomy, medical imaging, and
physics/doppler_frequency.py:36:20     - Unknown word (imaging)    -- astronomy, medical imaging, and seismology.
physics/doppler_frequency.py:36:33     - Unknown word (seismology) -- medical imaging, and seismology.
physics/doppler_frequency.py:47:5      - Unknown word (doppler)    -- def doppler_effect(
physics/doppler_frequency.py:5:16      - Unknown word (observer)   -- relation to an observer who is moving relative
physics/doppler_frequency.py:7:24      - Unknown word (pitch)      -- shift is the change of pitch heard when a vehicle
physics/doppler_frequency.py:7:30      - Unknown word (heard)      -- the change of pitch heard when a vehicle sounding
physics/doppler_frequency.py:7:51      - Unknown word (sounding)   -- heard when a vehicle sounding a horn approaches and
physics/doppler_frequency.py:8:1       - Unknown word (recedes)    -- recedes from an observer.
physics/grahams_law.py:11:6      - Unknown word (Molar)      -- m1 = Molar mass of the first gas
physics/grahams_law.py:24:22     - Unknown word (Effustion)  -- effusion_rate_1: Effustion rate of first gas (m
physics/grahams_law.py:26:58     - Unknown word (kmol)       -- first gas (g/mol, kg/kmol, etc.)
physics/grahams_law.py:2:24      - Unknown word (Effusion)   -- Title: Graham's Law of Effusion
physics/grahams_law.py:2:8       - Unknown word (Graham's)   -- Title: Graham's Law of Effusion
physics/grahams_law.py:4:30      - Unknown word (effusion)   -- Description: Graham's law of effusion states that the rate
physics/grahams_law.py:5:50      - Unknown word (molar)      -- the square root of the molar mass of its particles
physics/hubble_parameter.py:11:22     - Unknown word (radiation)  -- H = hubble_constant*(radiation_density*(redshift+1
physics/hubble_parameter.py:11:5      - Unknown word (hubble)     -- H = hubble_constant*(radiation
physics/hubble_parameter.py:13:52     - Unknown word (dark)       -- curvature*(redshift+1)**2 + dark_energy)**(1/2)
physics/hubble_parameter.py:15:62     - Unknown word (relativity) -- dark_energy are the relativity
physics/hubble_parameter.py:16:25     - Unknown word (densities)  -- the percentage) energy densities that exist
physics/hubble_parameter.py:18:12     - Unknown word (barion)     -- sum of the barion density and the
physics/hubble_parameter.py:19:14     - Unknown word (Curvature)  -- dark matter. Curvature is the curvature parameter
physics/hubble_parameter.py:20:25     - Unknown word (completeness) -- the densities by the completeness
physics/hubble_parameter.py:40:29     - Unknown word (constante)    -- hubble_constant: Hubble constante is the expansion rate
physics/hubble_parameter.py:4:45      - Unknown word (Universe)   -- Hubble parameter H is the Universe expansion rate
physics/hubble_parameter.py:5:17      - Unknown word (cosmology)  -- in any time. In cosmology is customary to use
physics/hubble_parameter.py:5:30      - Unknown word (customary)  -- time. In cosmology is customary to use the redshift
physics/hubble_parameter.py:6:19      - Unknown word (becausethe) -- in place of time, becausethe redshift is directily
physics/hubble_parameter.py:6:42      - Unknown word (directily)  -- becausethe redshift is directily mensure
physics/hubble_parameter.py:6:52      - Unknown word (mensure)    -- redshift is directily mensure
physics/hubble_parameter.py:7:17      - Unknown word (galaxies)   -- in the light of galaxies moving away from us
physics/hubble_parameter.py:98:12     - Unknown word (LCDM)         -- # demo LCDM approximation
physics/ideal_gas_law.py:2:5       - Unknown word (ideal)      -- The ideal gas law, also called
physics/ideal_gas_law.py:4:25      - Unknown word (gases)      -- the behavior of many gases under many conditions
physics/ideal_gas_law.py:4:54      - Unknown word (although)   -- under many conditions, although it has
physics/ideal_gas_law.py:5:35      - Unknown word (stated)     -- limitations. It was first stated by Benoît Paul Émile
physics/ideal_gas_law.py:5:45      - Unknown word (Benoît)     -- was first stated by Benoît Paul Émile Clapeyron
physics/ideal_gas_law.py:5:52      - Unknown word (Paul)       -- first stated by Benoît Paul Émile Clapeyron
physics/ideal_gas_law.py:5:57      - Unknown word (Émile)      -- stated by Benoît Paul Émile Clapeyron
physics/ideal_gas_law.py:5:63      - Unknown word (Clapeyron)  -- by Benoît Paul Émile Clapeyron
physics/ideal_gas_law.py:6:33      - Unknown word (empirical)  -- a combination of the empirical Boyle's law, Charles
physics/ideal_gas_law.py:6:43      - Unknown word (Boyle's)    -- combination of the empirical Boyle's law, Charles's law,
physics/ideal_gas_law.py:7:1       - Unknown word (Avogadro's) -- Avogadro's law, and Gay-Lussac
physics/ideal_gas_law.py:7:25      - Unknown word (Lussac's)   -- Avogadro's law, and Gay-Lussac's law.[1] The ideal gas
physics/in_static_equilibrium.py:12:37     - Unknown word (radian)     -- float, angle: float, radian_mode: bool = False
physics/in_static_equilibrium.py:15:5      - Unknown word (Resolves)   -- Resolves force along rectangular
physics/in_static_equilibrium.py:53:20     - Unknown word (moments)    -- # summation of moments is zero
physics/kinetic_energy.py:12:79     - Unknown word (traveling)    -- rotating object of mass m traveling
physics/kinetic_energy.py:13:25     - Unknown word (relativistic) -- a speed v is ½mv².In relativistic mechanics, this is a
physics/kinetic_energy.py:5:1       - Unknown word (possesses)  -- possesses due to its motion.It
physics/kinetic_energy.py:6:45      - Unknown word (Having)     -- its stated velocity.Having gained this energy during
physics/kinetic_energy.py:7:24      - Unknown word (maintains)  -- acceleration, the body maintains this kinetic energy
physics/kinetic_energy.py:8:41      - Unknown word (decelerating) -- done by the body when decelerating from its current speed
physics/kinetic_energy.py:9:62      - Unknown word (Lagrangian)   -- any term in a system's Lagrangian which includes
physics/kinetic_energy.py:9:9       - Unknown word (Formally)     -- of rest.Formally, a kinetic energy is
physics/lens_formulae.py:21:35     - Unknown word (assumptions) -- calculations easy few assumptions are made while deriving
physics/lens_formulae.py:21:62     - Unknown word (deriving)    -- assumptions are made while deriving the formula
physics/lens_formulae.py:26:12     - Unknown word (aperture)    -- 3. The aperture of the lens taken must
physics/lens_formulae.py:27:22     - Unknown word (incidence)   -- 4. The angles of incidence and angle of refraction
physics/lens_formulae.py:27:45     - Unknown word (refraction)  -- incidence and angle of refraction should be small.
physics/lens_formulae.py:2:59      - Unknown word (lens)       -- calculate focal length of lens, distance of
physics/lens_formulae.py:36:29     - Unknown word (rays)        -- that of the incident rays are negative.
physics/lens_formulae.py:6:4       - Unknown word (optics)     -- In optics, the relationship between
physics/lens_formulae.py:9:54      - Unknown word (concave)    -- for convex as well as concave lenses. The formula
physics/lens_formulae.py:9:62      - Unknown word (lenses)     -- convex as well as concave lenses. The formula
physics/lorentz_transformation_four_vector.py:142:67    - Unknown word (symbolically) -- calculate the transformation symbolically
physics/lorentz_transformation_four_vector.py:165:44    - Unknown word (Symbolic)     -- array([ct, x, y, z])  # Symbolic four vector
physics/lorentz_transformation_four_vector.py:177:18    - Unknown word (symbolic)     -- # Example of symbolic vector:
physics/lorentz_transformation_four_vector.py:187:40    - Unknown word (subs)         -- vector = [four_vector[i].subs(sub_dict) for i in range
physics/lorentz_transformation_four_vector.py:2:61      - Unknown word (inertial)   -- transition between two inertial reference
physics/lorentz_transformation_four_vector.py:40:3      - Unknown word (Vehicle's)  -- # Vehicle's speed divided by speed
physics/lorentz_transformation_four_vector.py:5:53      - Unknown word (boost)      -- rotation (i.e., a Lorentz boost in the x direction)
physics/malus_law.py:13:9      - Unknown word (polarization) -- initial polarization direction and the axis
physics/malus_law.py:14:11     - Unknown word (unpolarized)  -- A beam of unpolarized light can be thought
physics/malus_law.py:14:36     - Unknown word (thought)      -- unpolarized light can be thought of as containing a
physics/malus_law.py:15:27     - Unknown word (polarizations) -- uniform mixture of linear polarizations at all possible angles
physics/malus_law.py:15:9      - Unknown word (mixture)      -- uniform mixture of linear polarizations
physics/malus_law.py:19:50     - Unknown word (Polaroid)      -- this, around 38% for Polaroid-type polarizers but
physics/malus_law.py:19:64     - Unknown word (polarizers)    -- % for Polaroid-type polarizers but
physics/malus_law.py:20:1      - Unknown word (considerably)  -- considerably higher (>49.9%) for
physics/malus_law.py:20:39     - Unknown word (birefringent)  -- higher (>49.9%) for some birefringent prism types.
physics/malus_law.py:22:1      - Unknown word (generally)     -- generally called an analyzer)
physics/malus_law.py:22:63     - Unknown word (polarizing)    -- angle between their polarizing axes
physics/malus_law.py:24:16     - Unknown word (crossed)       -- polarizers are crossed and in theory no light
physics/malus_law.py:25:1      - Unknown word (practically)   -- practically speaking no polarizer
physics/malus_law.py:25:13     - Unknown word (speaking)      -- practically speaking no polarizer is perfect
physics/malus_law.py:26:37     - Unknown word (sheets)        -- example, crossed Polaroid sheets appear slightly blue
physics/malus_law.py:27:7      - Unknown word (extinction)    -- their extinction ratio is better in the
physics/malus_law.py:29:10     - Unknown word (birefringence) -- (such as birefringence) will be shown as an
physics/malus_law.py:30:24     - Unknown word (polarimetry)   -- This effect is used in polarimetry to measure the optical
physics/malus_law.py:31:38     - Unknown word (blockers)      -- are also not perfect blockers of the polarization
physics/malus_law.py:34:39     - Unknown word (Glan)          -- Polaroid to about 1:106 for Glan-Taylor prism polarizers
physics/malus_law.py:34:44     - Unknown word (Taylor)        -- about 1:106 for Glan-Taylor prism polarizers.
physics/malus_law.py:40:5      - Unknown word (malus)         -- def malus_law(initial_intensity
physics/malus_law.py:4:54      - Unknown word (polariser)  -- transmitted through a polariser using Malus Law
physics/malus_law.py:7:15      - Unknown word (Malus's)    -- Description : Malus's law, which is named
physics/malus_law.py:7:49      - Unknown word (Étienne)    -- which is named after Étienne-Louis Malus,
physics/malus_law.py:8:26      - Unknown word (polarizer)  -- that when a perfect polarizer is placed in a polarized
physics/malus_law.py:8:51      - Unknown word (polarized)  -- polarizer is placed in a polarized
physics/malus_law.py:9:20      - Unknown word (irradiance) -- beam of light, the irradiance, I, of the light that
physics/mass_energy_equivalence.py:10:21     - Unknown word (interchangeable) -- mass and energy are interchangeable; a mass increase corresponds
physics/mass_energy_equivalence.py:11:36     - Unknown word (profound)        -- This principle has profound implications in nuclear
physics/mass_energy_equivalence.py:11:45     - Unknown word (implications)    -- principle has profound implications in nuclear reactions
physics/mass_energy_equivalence.py:11:61     - Unknown word (nuclear)         -- profound implications in nuclear reactions,
physics/mass_energy_equivalence.py:11:69     - Unknown word (reactions)       -- implications in nuclear reactions,
physics/mass_energy_equivalence.py:12:1      - Unknown word (explaining)      -- explaining the release of immense
physics/mass_energy_equivalence.py:12:27     - Unknown word (immense)         -- explaining the release of immense energy from minuscule
physics/mass_energy_equivalence.py:12:47     - Unknown word (minuscule)       -- immense energy from minuscule changes in atomic nuclei
physics/mass_energy_equivalence.py:12:75     - Unknown word (nuclei)          -- minuscule changes in atomic nuclei.
physics/mass_energy_equivalence.py:3:20      - Unknown word (equivalence) -- Finding the energy equivalence of mass and mass equivalence
physics/mass_energy_equivalence.py:4:4       - Unknown word (Einstein's)  -- by Einstein's equation.
physics/mass_energy_equivalence.py:7:41      - Unknown word (pivotal)     -- energy equivalence is a pivotal concept in theoretical
physics/mirror_formulae.py:15:5      - Unknown word (Focal)           -- f = Focal length of the spherical
physics/mirror_formulae.py:31:67     - Unknown word (thickness)       -- be thin, meaning its thickness is
physics/mirror_formulae.py:31:8      - Unknown word (Thin)            -- 1) Thin Mirror: The mirror is
physics/mirror_formulae.py:36:14     - Unknown word (practical)       -- for most practical purposes.
physics/mirror_formulae.py:37:14     - Unknown word (Angles)          -- 3) Small Angles: The angles involved
physics/mirror_formulae.py:39:69     - Unknown word (simplifies)      -- the angle itself. It simplifies the
physics/mirror_formulae.py:41:17     - Unknown word (Rays)            -- 4) Paraxial Rays: The mirror formula
physics/mirror_formulae.py:41:45     - Unknown word (derived)         -- The mirror formula is derived using paraxial rays
physics/mirror_formulae.py:41:59     - Unknown word (paraxial)        -- formula is derived using paraxial rays, which are
physics/mirror_formulae.py:41:8      - Unknown word (Paraxial)        -- 4) Paraxial Rays: The mirror formula
physics/mirror_formulae.py:45:23     - Unknown word (Refraction)      -- 5) Reflection and Refraction Laws: The derivation
physics/mirror_formulae.py:45:34     - Unknown word (Laws)            -- Reflection and Refraction Laws: The derivation assumes
physics/mirror_formulae.py:45:8      - Unknown word (Reflection)      -- 5) Reflection and Refraction Laws
physics/mirror_formulae.py:48:42     - Unknown word (refracted)       -- and the incident and refracted rays lie in the same
physics/mirror_formulae.py:49:10     - Unknown word (Snell's)         -- obey Snell's law for refraction.
physics/mirror_formulae.py:54:7      - Unknown word (Convention)      -- (Sign Convention adapted from
physics/mirror_formulae.py:7:61      - Unknown word (characteristics) -- determine the position and characteristics
physics/n_body_simulation.py:115:20    - Unknown word (softening)   -- factor and the softening factor. The time factor
physics/n_body_simulation.py:117:5     - Unknown word (trick)       -- trick for N-body simulations
physics/n_body_simulation.py:139:20    - Unknown word (exert)       -- force they exert on it. Use that force
physics/n_body_simulation.py:165:57    - Unknown word (Pythagoras's) -- of the distance using Pythagoras's theorem
physics/n_body_simulation.py:180:51    - Unknown word (velocities)   -- positions only after all the velocities have been updated
physics/n_body_simulation.py:222:56    - Unknown word (evolves)      -- the given body-system evolves over time.
physics/n_body_simulation.py:229:28    - Unknown word (plotted)      -- # Set section to be plotted
physics/n_body_simulation.py:22:1      - Unknown word (INTERVAL)    -- INTERVAL = 20
physics/n_body_simulation.py:246:5     - Unknown word (anim)         -- anim = animation.FuncAnimation
physics/n_body_simulation.py:247:41    - Unknown word (blit)         -- interval=INTERVAL, blit=True
physics/n_body_simulation.py:293:62    - Unknown word (impulse)      -- velocities so that total impulse is zero,
physics/n_body_simulation.py:314:11    - Unknown word (Bodies)       -- # Bodies are created pairwise
physics/n_body_simulation.py:338:11    - Unknown word (Figure)       -- plot("Figure-8 solution to the 3
physics/n_body_simulation.py:3:1       - Unknown word (dynamical)  -- dynamical system of particles
physics/n_body_simulation.py:3:41      - Unknown word (influence)  -- particles under the influence of gravity. The system
physics/n_body_simulation.py:40:49     - Unknown word (relevant)    -- size" & "color" are not relevant for the simulation itself
physics/n_body_simulation.py:4:47      - Unknown word (exerts)     -- bodies, each of which exerts a gravitational force
physics/n_body_simulation.py:6:1       - Unknown word (gravitation) -- gravitation. The Euler method is
physics/n_body_simulation.py:7:23      - Unknown word (brought)     -- velocity and position brought about by these forces
physics/n_body_simulation.py:7:54      - Unknown word (Softening)   -- about by these forces. Softening is used to prevent
physics/n_body_simulation.py:8:11      - Unknown word (divergences) -- numerical divergences when a particle comes
physics/newtons_law_of_gravitation.py:10:45     - Unknown word (unification) -- as the "first great unification", as it marked the unificatio
physics/newtons_law_of_gravitation.py:11:29     - Unknown word (phenomena)   -- previously described phenomena of gravity on Earth
physics/newtons_law_of_gravitation.py:19:18     - Unknown word (Philosophiæ) -- - Newton (1687) "Philosophiæ Naturalis Principia
physics/newtons_law_of_gravitation.py:19:30     - Unknown word (Naturalis)   -- (1687) "Philosophiæ Naturalis Principia Mathematica
physics/newtons_law_of_gravitation.py:19:40     - Unknown word (Principia)   -- Philosophiæ Naturalis Principia Mathematica"
physics/newtons_law_of_gravitation.py:19:50     - Unknown word (Mathematica) -- Naturalis Principia Mathematica"
physics/newtons_law_of_gravitation.py:25:1      - Unknown word (GRAVITATIONAL) -- GRAVITATIONAL_CONSTANT = 6.6743e-
physics/newtons_law_of_gravitation.py:36:22     - Unknown word (Kilograms)     -- mass_1 : mass in Kilograms
physics/newtons_law_of_gravitation.py:5:53      - Unknown word (explains)   -- Universal Gravitation explains the presence of force
physics/newtons_law_of_gravitation.py:5:66      - Unknown word (presence)   -- Gravitation explains the presence of force of
physics/newtons_law_of_gravitation.py:6:50      - Unknown word (situated)   -- having a definite mass situated at a distance. It is
physics/newtons_law_of_gravitation.py:7:32      - Unknown word (attracts)   -- that, every particle attracts every other particle
physics/newtons_law_of_gravitation.py:7:69      - Unknown word (universe)   -- other particle in the universe with a
physics/newtons_second_law_of_motion.py:12:78     - Unknown word (decreased)  -- acceleration of the object is decreased.
physics/newtons_second_law_of_motion.py:16:1      - Unknown word (Formulation) -- Formulation: F_net = m • a
physics/newtons_second_law_of_motion.py:18:1      - Unknown word (Diagrammatic) -- Diagrammatic Explanation::
physics/newtons_second_law_of_motion.py:3:35      - Unknown word (pertains)   -- second law of motion pertains to the behavior of objects
physics/newtons_second_law_of_motion.py:65:5      - Unknown word (newtons)      -- def newtons_second_law_of_motion
physics/period_of_pendulum.py:14:11     - Unknown word (amplitudes)  -- For small amplitudes, the period of a simple
physics/period_of_pendulum.py:19:44     - Unknown word (hanging)     -- from which the bob is hanging (in m)
physics/period_of_pendulum.py:4:26      - Unknown word (mechanical) -- simple pendulum is a mechanical system that sways or
physics/period_of_pendulum.py:4:49      - Unknown word (sways)      -- mechanical system that sways or moves in an
physics/period_of_pendulum.py:5:1       - Unknown word (oscillatory) -- oscillatory motion. The simple pendulum
physics/period_of_pendulum.py:5:41      - Unknown word (comprises)   -- The simple pendulum comprises of a small bob of
physics/period_of_pendulum.py:6:51      - Unknown word (secured)     -- string of length L and secured to a platform
physics/period_of_pendulum.py:8:1       - Unknown word (driven)      -- driven by gravitational force
physics/period_of_pendulum.py:9:30      - Unknown word (amplitude)   -- of the string and the amplitude (the maximum angle)
physics/period_of_pendulum.py:9:63      - Unknown word (oscillation) -- the maximum angle) of oscillation.
physics/photoelectric_effect.py:11:38     - Unknown word (absorption)      -- atomic bindings by the absorption of a photon of energy
physics/photoelectric_effect.py:11:54     - Unknown word (photon)          -- the absorption of a photon of energy hv, the highest
physics/photoelectric_effect.py:2:45      - Unknown word (electrons)     -- effect is the emission of electrons when electromagnetic
physics/photoelectric_effect.py:2:5       - Unknown word (photoelectric) -- The photoelectric effect is the emission
physics/photoelectric_effect.py:2:60      - Unknown word (electromagnetic) -- emission of electrons when electromagnetic radiation ,
physics/photoelectric_effect.py:3:33      - Unknown word (Electrons)       -- light, hits a material. Electrons emitted in this manner
physics/photoelectric_effect.py:4:1       - Unknown word (photoelectrons)  -- photoelectrons.
physics/photoelectric_effect.py:6:10      - Unknown word (Einstein)        -- In 1905, Einstein proposed a theory of
physics/photoelectric_effect.py:7:19      - Unknown word (tiny)            -- light consists of tiny packets of energy known
physics/photoelectric_effect.py:7:24      - Unknown word (packets)         -- light consists of tiny packets of energy known as photons
physics/photoelectric_effect.py:7:51      - Unknown word (photons)         -- packets of energy known as photons or light quanta. Each
physics/photoelectric_effect.py:9:27      - Unknown word (proportionality) -- electromagnetic wave. The proportionality constant h has become
physics/potential_energy.py:11:40     - Unknown word (released)   -- gravitational field, which is released (converted into
physics/potential_energy.py:16:18     - Unknown word (interacting) -- For two pairwise interacting point particles, the
physics/potential_energy.py:9:27      - Unknown word (massive)    -- the potential energy a massive object has in relation
physics/rainfall_intensity.py:11:24     - Unknown word (Fundamentos) -- Aparicio, F. (1997): Fundamentos de Hidrología de Superficie
physics/rainfall_intensity.py:11:3      - Unknown word (Aparicio)   -- - Aparicio, F. (1997): Fundamentos
physics/rainfall_intensity.py:11:39     - Unknown word (Hidrología)  -- 97): Fundamentos de Hidrología de Superficie.
physics/rainfall_intensity.py:11:53     - Unknown word (Superficie)  -- Fundamentos de Hidrología de Superficie.
physics/rainfall_intensity.py:12:15     - Unknown word (México)      -- Balderas, México, Limusa. 303 p.
physics/rainfall_intensity.py:12:23     - Unknown word (Limusa)      -- Balderas, México, Limusa. 303 p.
physics/rainfall_intensity.py:12:5      - Unknown word (Balderas)    -- Balderas, México, Limusa. 30
physics/rainfall_intensity.py:5:3       - Unknown word (rainfall)   -- a rainfall event for a given duration
physics/reynolds_number.py:10:23     - Unknown word (Viscous)       -- = Inertial Forces / Viscous Forces
physics/reynolds_number.py:10:5      - Unknown word (Inertial)      -- R = Inertial Forces / Viscous Forces
physics/reynolds_number.py:14:5      - Unknown word (Density)       -- p = Density of fluid (in Kg/m^3
physics/reynolds_number.py:17:5      - Unknown word (Viscosity)     -- μ = Viscosity of the fluid (in Ns
physics/reynolds_number.py:21:51     - Unknown word (Numerically)   -- said to be laminar. Numerically, these are
physics/reynolds_number.py:23:38     - Unknown word (Laminar)       -- according to a range. Laminar flow falls below Reynolds
physics/reynolds_number.py:25:53     - Unknown word (travels)       -- flow in which the fluid travels smoothly in
physics/reynolds_number.py:25:61     - Unknown word (smoothly)      -- which the fluid travels smoothly in
physics/reynolds_number.py:26:16     - Unknown word (Conversely)    -- regular paths. Conversely, turbulent flow isn
physics/reynolds_number.py:27:29     - Unknown word (mixing)        -- irregular path with lots of mixing.
physics/reynolds_number.py:34:55     - Unknown word (viscosity)     -- float, diameter: float, viscosity: float
physics/reynolds_number.py:3:31      - Unknown word (laminar)    -- out the type of flow (laminar or turbulent)
physics/reynolds_number.py:3:42      - Unknown word (turbulent)  -- of flow (laminar or turbulent)
physics/reynolds_number.py:5:22      - Unknown word (dimensionless) -- Reynolds number is a dimensionless quantity that is used
physics/reynolds_number.py:6:56      - Unknown word (flowing)       -- laminar or turbulent while flowing through a
physics/reynolds_number.py:8:1       - Unknown word (viscous)       -- viscous forces.
physics/rms_speed_of_molecule.py:12:4      - Unknown word (gaseous)     -- of gaseous particles is constantly
physics/rms_speed_of_molecule.py:15:45     - Unknown word (Particles)   -- particles average behavior. Particles moving in opposite directions
physics/rms_speed_of_molecule.py:17:1      - Unknown word (plausible)   -- plausible that there'll be about
physics/rms_speed_of_molecule.py:19:24     - Unknown word (unhelpful)   -- zero; as this value is unhelpful, the average of velocities
physics/rms_speed_of_molecule.py:26:18     - Unknown word (molecule)    -- def rms_speed_of_molecule(temperature: float,
physics/rms_speed_of_molecule.py:50:5      - Unknown word (vrms)        -- vrms = rms_speed_of_molecule
physics/rms_speed_of_molecule.py:51:21     - Unknown word (Nitrogen)    -- print(f"Vrms of Nitrogen gas at 300 K is {vrms
physics/rms_speed_of_molecule.py:5:4       - Unknown word (Vrms)       -- | Vrms = √3RT/M |
physics/rms_speed_of_molecule.py:8:30      - Unknown word (gasified)   -- Kinetic Molecular Theory, gasified particles are in a condition
physics/rms_speed_of_molecule.py:9:55      - Unknown word (pace)       -- completely different pace, perpetually clashing
physics/rms_speed_of_molecule.py:9:61      - Unknown word (perpetually) -- completely different pace, perpetually clashing and
physics/rms_speed_of_molecule.py:9:73      - Unknown word (clashing)    -- different pace, perpetually clashing and
physics/shear_stress.py:20:8      - Unknown word (Tangential) -- 2. Tangential Force
physics/shear_stress.py:4:47      - Unknown word (coplanar)   -- component of stress that is coplanar to the material cross
physics/shear_stress.py:4:7       - Unknown word (stress)     -- Shear stress is a component of stress
physics/speed_of_sound.py:16:10     - Unknown word (isentropic)   -- K_s: isentropic bulk modulus
physics/speed_of_sound.py:29:19     - Unknown word (Mercury)      -- Example 2 --> Mercury 20°C: bulk_modulus=
physics/speed_of_sound.py:6:40      - Unknown word (propagates) -- propagation, the sound wave propagates through an elastic medium
physics/speed_of_sound.py:8:25      - Unknown word (longitudinal) -- Sound propagates as longitudinal waves in liquids and
physics/speed_of_sound.py:8:47      - Unknown word (liquids)      -- longitudinal waves in liquids and gases and as transverse
physics/speed_of_sound.py:8:72      - Unknown word (transverse)   -- liquids and gases and as transverse waves
physics/speed_of_sound.py:9:8       - Unknown word (solids)       -- in solids. This file calculates
physics/speeds_of_gas_molecules.py:22:40     - Unknown word (integrating) -- can be calculated by integrating the Maxwell-Boltzmann
physics/speeds_of_gas_molecules.py:2:63      - Unknown word (molecules)  -- probable speeds of gas molecules are
physics/speeds_of_gas_molecules.py:61:45     - Unknown word (nitrogen)    -- molecule(273, 0.028) # nitrogen at 273 K
physics/speeds_of_gas_molecules.py:63:45     - Unknown word (oxygen)      -- molecule(300, 0.032) # oxygen at 300 K
physics/terminal_velocity.py:5:54      - Unknown word (attained)   -- the highest velocity attained by an
physics/terminal_velocity.py:7:5       - Unknown word (buoyancy)   -- and buoyancy is equal to the downward
project_euler/README.md:11:13     - Unknown word (Guidelines)  -- ## Solution Guidelines
project_euler/README.md:13:256    - Unknown word (repeated)    -- NTRIBUTING.md) as it won't be repeated in here. If you have
project_euler/README.md:13:290    - Unknown word (doubt)       -- here. If you have any doubt on the guidelines, please
project_euler/README.md:17:19     - Unknown word (consistency) -- * Please maintain consistency in project directory
project_euler/README.md:17:77     - Unknown word (Keep)        -- solution file names. Keep the following points
project_euler/README.md:20:130    - Unknown word (occupy)      -- filled with 0s so as to occupy 3 digits. Example:
project_euler/README.md:20:139    - Unknown word (digits)      -- s so as to occupy 3 digits. Example: `problem_
project_euler/README.md:26:24     - Unknown word (helper)      -- You can have as many helper functions as you want
project_euler/README.md:27:23     - Unknown word (positional)  -- * It should contain positional argument(s) whose default
project_euler/README.md:27:34     - Unknown word (argument)    -- should contain positional argument(s) whose default value
project_euler/README.md:28:56     - Unknown word (arguments)   -- is called without any arguments like so: `solution(
project_euler/README.md:30:161    - Unknown word (brief)       -- docstring along with a brief statement mentioning
project_euler/README.md:30:177    - Unknown word (mentioning)  -- with a brief statement mentioning what the function is
project_euler/README.md:30:25     - Unknown word (includes)    -- Every function, which includes all the helper functions
project_euler/README.md:30:3      - Unknown word (Every)       -- * Every function, which includes
project_euler/README.md:3:85      - Unknown word (licensed)   -- Euler. [Problems are licensed under CC BY-NC-SA 4
project_euler/README.md:54:148    - Unknown word (brackets)    -- content within `[square brackets]` (including the brackets
project_euler/README.md:58:54     - Unknown word (original)    -- number]: [link to the original problem]
project_euler/README.md:5:64      - Unknown word (programming) -- mathematical/computer programming problems that require
project_euler/README.md:60:6      - Unknown word (Entire)      -- ... [Entire problem statement]
project_euler/README.md:66:4      - Unknown word (Stackoverflow) -- - [Stackoverflow link]
project_euler/README.md:74:25     - Unknown word (hint)          -- helper1(arg1: [type hint], arg2: [type hint]
project_euler/README.md:81:6      - Unknown word (Doctest)       -- [Doctest]
project_euler/README.md:8:369     - Unknown word (durations)   -- logs (under `slowest 10 durations`) and open a pull request
project_euler/problem_001/sol1.py:4:1       - Unknown word (Multiples)  -- Multiples of 3 and 5
project_euler/problem_001/sol4.py:27:5      - Unknown word (xmulti)     -- xmulti = []
project_euler/problem_001/sol4.py:28:5      - Unknown word (zmulti)     -- zmulti = []
project_euler/problem_002/sol2.py:36:10     - Unknown word (fibs)       -- even_fibs = []
project_euler/problem_004/sol1.py:33:7      - Unknown word (fetches)    -- # fetches the next number
project_euler/problem_005/sol1.py:57:9      - Unknown word (nfound)     -- nfound = 0
project_euler/problem_006/sol2.py:35:9      - Unknown word (cubes)      -- sum_cubes = (n * (n + 1) // 2
project_euler/problem_009/sol1.py:4:9       - Unknown word (Pythagorean) -- Special Pythagorean triplet
project_euler/problem_009/sol2.py:37:11     - Unknown word (Solving)    -- # Solving the two equations a
project_euler/problem_011/sol1.py:43:13     - Unknown word (horz)       -- horz_product = grid[i][j
project_euler/problem_012/sol1.py:2:1       - Unknown word (Highly)     -- Highly divisible triangular
project_euler/problem_012/sol1.py:30:9      - Unknown word (multiplicity) -- multiplicity = 0
project_euler/problem_014/sol1.py:14:55     - Unknown word (finishing)  -- (starting at 13 and finishing at 1) contains
project_euler/problem_014/sol1.py:15:36     - Unknown word (proved)     -- Although it has not been proved yet (Collatz Problem
project_euler/problem_014/sol1.py:39:5      - Unknown word (counters)   -- counters = {1: 1}
project_euler/problem_014/sol2.py:31:1      - Unknown word (COLLATZ)    -- COLLATZ_SEQUENCE_LENGTHS =
project_euler/problem_017/sol1.py:12:30     - Unknown word (hyphens)    -- not count spaces or hyphens. For example, 342 (three
project_euler/problem_017/sol1.py:28:18     - Unknown word (aloud)      -- # never said aloud)
project_euler/problem_017/sol1.py:31:17     - Unknown word (inconsistency) -- # 20 due to inconsistency in teens)
project_euler/problem_017/sol1.py:31:34     - Unknown word (teens)         -- to inconsistency in teens)
project_euler/problem_019/sol1.py:10:1      - Unknown word (April)      -- April, June and November.
project_euler/problem_019/sol1.py:10:8      - Unknown word (June)       -- April, June and November.
project_euler/problem_019/sol1.py:13:25     - Unknown word (rain)       -- Which has twenty-eight, rain or shine.
project_euler/problem_019/sol1.py:13:33     - Unknown word (shine)      -- twenty-eight, rain or shine.
project_euler/problem_019/sol1.py:19:18     - Unknown word (fell)       -- How many Sundays fell on the first of the
project_euler/problem_019/sol1.py:19:60     - Unknown word (twentieth)  -- the month during the twentieth century
project_euler/problem_019/sol1.py:25:30     - Unknown word (mondays)    -- Returns the number of mondays that fall on the first
project_euler/problem_019/sol1.py:6:5       - Unknown word (yourself)   -- for yourself.
project_euler/problem_019/sol1.py:9:1       - Unknown word (Thirty)     -- Thirty days has September,
project_euler/problem_019/sol1.py:9:17      - Unknown word (September)  -- Thirty days has September,
project_euler/problem_020/sol1.py:48:5      - Unknown word (nfact)      -- nfact = factorial(num)
project_euler/problem_021/sol1.py:2:1       - Unknown word (Amicable)   -- Amicable Numbers
project_euler/problem_021/sol1.py:7:60      - Unknown word (amicable)   -- then a and b are an amicable pair and
project_euler/problem_022/sol1.py:11:63     - Unknown word (COLIN)        -- alphabetical order, COLIN, which is
project_euler/problem_022/sol1.py:7:1       - Unknown word (alphabetical) -- alphabetical order. Then working
project_euler/problem_023/sol1.py:38:5      - Unknown word (abundants)  -- abundants = set()
project_euler/problem_024/sol1.py:9:13      - Unknown word (millionth)  -- What is the millionth lexicographic permutation
project_euler/problem_025/sol1.py:60:14     - Unknown word (incrementing) -- Computes incrementing Fibonacci numbers starting
project_euler/problem_026/sol1.py:19:51     - Unknown word (recurring)    -- , and has a 1-digit recurring cycle. It can be
project_euler/problem_026/sol1.py:29:5      - Unknown word (Considering)  -- Considering any range can be provided
project_euler/problem_026/sol1.py:8:21      - Unknown word (denominators) -- unit fractions with denominators 2 to 10 are given:
project_euler/problem_027/sol1.py:11:12     - Unknown word (certainly)  -- by 41, and certainly when n = 41, 412 +
project_euler/problem_027/sol1.py:12:5      - Unknown word (incredible) -- The incredible formula  n2 - 79n +
project_euler/problem_027/sol1.py:15:13     - Unknown word (quadratics) -- Considering quadratics of the form:
project_euler/problem_027/sol1.py:7:22      - Unknown word (remarkable) -- Euler discovered the remarkable quadratic formula:
project_euler/problem_030/sol1.py:19:48     - Unknown word (criteria)     -- (which exceeds the criteria of number being 3 digit
project_euler/problem_030/sol1.py:1:35      - Unknown word (Powers)     -- Statement (Digit Fifth Powers): https://projecteuler
project_euler/problem_030/sol1.py:3:1       - Unknown word (Surprisingly) -- Surprisingly there are only three
project_euler/problem_031/sol1.py:5:4       - Unknown word (England)    -- In England the currency is made
project_euler/problem_031/sol1.py:5:53      - Unknown word (pence)      -- up of pound, f, and pence, p, and there are
project_euler/problem_031/sol1.py:6:24      - Unknown word (circulation) -- eight coins in general circulation:
project_euler/problem_031/sol2.py:37:50     - Unknown word (paradigm)   -- dynamic programming paradigm in a bottom-up fashion
project_euler/problem_032/sol32.py:2:40      - Unknown word (pandigital) -- an n-digit number is pandigital if it makes use of all
project_euler/problem_032/sol32.py:6:21      - Unknown word (unusual)    -- The product 7254 is unusual, as the identity, 3
project_euler/problem_032/sol32.py:7:1       - Unknown word (multiplicand) -- multiplicand, multiplier, and product
project_euler/problem_033/sol1.py:4:25      - Unknown word (curious)    -- fraction 49/98 is a curious fraction, as an inexperienced
project_euler/problem_033/sol1.py:4:49      - Unknown word (inexperienced) -- curious fraction, as an inexperienced
project_euler/problem_033/sol1.py:5:18      - Unknown word (attempting)    -- mathematician in attempting to simplify it may incorrectl
project_euler/problem_033/sol1.py:5:60      - Unknown word (believe)       -- simplify it may incorrectly believe
project_euler/problem_036/sol1.py:7:13      - Unknown word (palindromes) -- Double-base palindromes
project_euler/problem_037/sol1.py:2:1       - Unknown word (Truncatable) -- Truncatable primes
project_euler/problem_037/sol1.py:5:46      - Unknown word (Being)       -- interesting property. Being prime itself, it is
project_euler/problem_037/sol1.py:6:4       - Unknown word (continuously) -- to continuously remove digits from left
project_euler/problem_037/sol1.py:9:54      - Unknown word (truncatable)  -- primes that are both truncatable from left to right
project_euler/problem_038/sol1.py:10:4      - Unknown word (concatenating) -- By concatenating each product we get
project_euler/problem_038/sol1.py:11:15     - Unknown word (concatenated)  -- 192384576 the concatenated product of 192 and
project_euler/problem_038/sol1.py:21:61     - Unknown word (concactenation) -- the solution will be a concactenation of
project_euler/problem_038/sol1.py:28:5      - Unknown word (concatenation)  -- The concatenation of a with 2a = a *
project_euler/problem_039/sol1.py:17:5      - Unknown word (pythagorean) -- def pythagorean_triple(max_perimeter
project_euler/problem_039/sol1.py:19:64     - Unknown word (angled)      -- perimeter of a right angled triangle
project_euler/problem_039/sol1.py:31:13     - Unknown word (hypotenuse)  -- hypotenuse = (base * base + perpendicula
project_euler/problem_039/sol1.py:8:57      - Unknown word (maximised)  -- number of solutions maximised?
project_euler/problem_040/sol1.py:2:1       - Unknown word (Champernowne's) -- Champernowne's constant
project_euler/problem_040/sol1.py:4:4       - Unknown word (irrational)     -- An irrational decimal fraction is
project_euler/problem_041/sol1.py:2:1       - Unknown word (Pandigital) -- Pandigital prime
project_euler/problem_041/sol1.py:72:5      - Unknown word (pandigitals) -- pandigitals = [num for num in perm
project_euler/problem_042/solution42.py:19:3      - Unknown word (Precomputes) -- # Precomputes a list of the 100 first
project_euler/problem_044/sol1.py:11:37     - Unknown word (minimised)  -- and D = |Pk - Pj| is minimised; what is the value of
project_euler/problem_044/sol1.py:4:1       - Unknown word (Pentagonal) -- Pentagonal numbers are generated
project_euler/problem_044/sol1.py:5:1       - Unknown word (pentagonal) -- pentagonal numbers are:
project_euler/problem_046/sol1.py:4:30      - Unknown word (Goldbach)   -- proposed by Christian Goldbach that every odd composite
project_euler/problem_046/sol1.py:64:5      - Unknown word (composites) -- odd_composites = [num for num in range
project_euler/problem_047/sol1.py:2:1       - Unknown word (Combinatoric) -- Combinatoric selections
project_euler/problem_049/sol1.py:12:1      - Unknown word (exhibiting) -- exhibiting this property, but there
project_euler/problem_049/sol1.py:20:17     - Unknown word (permutated) -- to check if the permutated numbers is in our prime
project_euler/problem_050/sol1.py:24:14     - Unknown word (Erotosthenes) -- Sieve of Erotosthenes
project_euler/problem_050/sol1.py:4:1       - Unknown word (Consecutive) -- Consecutive prime sum
project_euler/problem_050/sol1.py:56:42     - Unknown word (celing)       -- biggest prime, below the celing, that can be written
project_euler/problem_051/sol1.py:12:1      - Unknown word (Consequently) -- Consequently 56003, being the first
project_euler/problem_051/sol1.py:3:13      - Unknown word (replacements) -- Prime digit replacements
project_euler/problem_051/sol1.py:6:4       - Unknown word (replacing)    -- By replacing the 1st digit of the
project_euler/problem_051/sol1.py:90:38     - Unknown word (replaceable)  -- primes with less than 3 replaceable digits
project_euler/problem_052/sol1.py:2:1       - Unknown word (Permuted)   -- Permuted multiples
project_euler/problem_054/sol1.py:115:50    - Unknown word (ueen)       -- 9, T(en), J(ack), Q(ueen), K(ing), A(ce)
project_euler/problem_054/sol1.py:118:11    - Unknown word (pades)      -- S(pades), H(earts), D(iamonds
project_euler/problem_054/sol1.py:118:21    - Unknown word (earts)      -- S(pades), H(earts), D(iamonds), C(lubs
project_euler/problem_054/sol1.py:118:31    - Unknown word (iamonds)    -- pades), H(earts), D(iamonds), C(lubs)
project_euler/problem_054/sol1.py:118:43    - Unknown word (lubs)       -- earts), D(iamonds), C(lubs)
project_euler/problem_054/sol1.py:11:1      - Unknown word (Straight)   -- Straight: All cards are consecutive
project_euler/problem_054/sol1.py:148:53    - Unknown word (Stright)    -- 2H 3H 4H 5H 6H")  # Stright flush
project_euler/problem_054/sol1.py:163:11    - Unknown word (Breaking)   -- # Breaking the tie works on the
project_euler/problem_054/sol1.py:200:26    - Unknown word (Jacks)      -- 'Four of a kind, Jacks'
project_euler/problem_054/sol1.py:203:32    - Unknown word (Threes)     -- Full house, Twos over Threes'
project_euler/problem_054/sol1.py:22:36     - Unknown word (eights)     -- for example, a pair of eights beats a pair of fives
project_euler/problem_054/sol1.py:22:43     - Unknown word (beats)      -- example, a pair of eights beats a pair of fives.
project_euler/problem_054/sol1.py:22:59     - Unknown word (fives)      -- eights beats a pair of fives.
project_euler/problem_054/sol1.py:22:7      - Unknown word (wins)       -- value wins; for example, a pair
project_euler/problem_054/sol1.py:27:57     - Unknown word (dealt)      -- thousand random hands dealt to two players.
project_euler/problem_054/sol1.py:39:20     - Unknown word (codewars)   -- Similar problem on codewars:
project_euler/problem_054/sol1.py:4:18      - Unknown word (poker)      -- In the card game poker, a hand consists of
project_euler/problem_054/sol1.py:59:13     - Unknown word (opponent's) -- opponent's hand (opponent) and
project_euler/problem_054/sol1.py:87:6      - Unknown word (CARD)       -- _CARD_NAME = (
project_euler/problem_054/sol1.py:93:10     - Unknown word (Five)       -- "Five",
project_euler/problem_054/sol1.py:96:10     - Unknown word (Eight)      -- "Eight",
project_euler/problem_054/sol1.py:97:10     - Unknown word (Nine)       -- "Nine",
project_euler/problem_054/test_poker_hand.py:105:6     - Unknown word (FIVE)       -- TEST_FIVE_HIGH_STRAIGHT = (
project_euler/problem_054/test_poker_hand.py:140:11    - Unknown word (oppo)       -- play, oppo = randrange(len(SORTED
project_euler/problem_054/test_poker_hand.py:197:27    - Unknown word (straights)  -- Test that five high straights are compared correctly
project_euler/problem_054/test_poker_hand.py:198:5     - Unknown word (pokerhands) -- pokerhands = [PokerHand("2D AC
project_euler/problem_054/test_poker_hand.py:206:5     - Unknown word (pokerhand)  -- pokerhand = PokerHand("2C 4S AS
project_euler/problem_054/test_poker_hand.py:97:6      - Unknown word (STRAIGHT)   -- TEST_STRAIGHT = (
project_euler/problem_054/test_poker_hand.py:9:8       - Unknown word (HANDS)      -- SORTED_HANDS = (
project_euler/problem_055/sol1.py:17:18     - Unknown word (proven)     -- is Lychrel until proven otherwise. In addition
project_euler/problem_055/sol1.py:2:1       - Unknown word (Lychrel)    -- Lychrel numbers
project_euler/problem_055/sol1.py:58:30     - Unknown word (lychrel)    -- Returns the count of all lychrel numbers below limit
project_euler/problem_056/sol1.py:4:3       - Unknown word (googol)     -- A googol (10^100) is a massive
project_euler/problem_056/sol1.py:5:19      - Unknown word (unimaginably) -- 100^100 is almost unimaginably large: one followed
project_euler/problem_056/sol1.py:6:1       - Unknown word (Despite)      -- Despite their size, the sum
project_euler/problem_057/sol1.py:14:16     - Unknown word (expansions) -- The next three expansions are 99/70, 239/169,
project_euler/problem_057/sol1.py:14:68     - Unknown word (eighth)     -- and 577/408, but the eighth expansion,
project_euler/problem_058/sol1.py:5:21      - Unknown word (spiralling) -- Starting with 1 and spiralling anticlockwise in the
project_euler/problem_058/sol1.py:5:32      - Unknown word (anticlockwise) -- with 1 and spiralling anticlockwise in the following way
project_euler/problem_059/sol1.py:104:22    - Unknown word (filtering)    -- possibilities by filtering using common words until
project_euler/problem_059/sol1.py:11:5      - Unknown word (unbreakable) -- For unbreakable encryption, the key
project_euler/problem_059/sol1.py:18:29     - Unknown word (cyclically)  -- the key is repeated cyclically throughout the message
project_euler/problem_059/sol1.py:19:19     - Unknown word (sufficiently) -- method is using a sufficiently long password key for
project_euler/problem_059/sol1.py:20:4      - Unknown word (memorable)    -- be memorable.
project_euler/problem_059/sol1.py:24:52     - Unknown word (knowledge)    -- ASCII codes, and the knowledge that the plain text
project_euler/problem_059/sol1.py:3:47      - Unknown word (Interchange) -- Code for Information Interchange).
project_euler/problem_059/sol1.py:4:32      - Unknown word (asterisk)    -- example, uppercase A = 65, asterisk (*) = 42, and lowercase
project_euler/problem_059/sol1.py:74:21     - Unknown word (enemy's)      -- >>> text = "The enemy's gate is down"
project_euler/problem_059/sol1.py:80:5      - Unknown word (possibles)    -- possibles: list[str] = []
project_euler/problem_059/sol1.py:8:72      - Unknown word (restores)    -- on the cipher text, restores
project_euler/problem_059/sol1.py:93:30     - Unknown word (asfla)        -- filter_common_word(['asfla adf', 'I am here',
project_euler/problem_059/sol1.py:95:30     - Unknown word (athla)        -- filter_common_word(['athla amf', 'I am here',
project_euler/problem_063/sol1.py:10:13     - Unknown word (conclusions) -- Using these conclusions, we will calculate the
project_euler/problem_063/sol1.py:3:20      - Unknown word (ninth)      -- 134217728=89, is a ninth power.
project_euler/problem_064/sol1.py:7:5       - Unknown word (conciseness) -- For conciseness, we use the notation
project_euler/problem_064/sol1.py:8:46      - Unknown word (indefinitely) -- block (1,3,1,8) repeats indefinitely.
project_euler/problem_065/sol1.py:13:54     - Unknown word (approximations) -- provide the best rational approximations.
project_euler/problem_065/sol1.py:14:21     - Unknown word (convergents)    -- Let us consider the convergents for sqrt(2).
project_euler/problem_065/sol1.py:24:14     - Unknown word (surprising)     -- What is most surprising is that the important
project_euler/problem_065/sol1.py:30:48     - Unknown word (convergent)     -- numerator of the 10th convergent is
project_euler/problem_065/sol1.py:9:29      - Unknown word (infinitum)  -- indicates that 2 repeats ad infinitum. In a similar way, sqrt
project_euler/problem_068/sol1.py:20:32     - Unknown word (uniquely)   -- solution can be described uniquely.
project_euler/problem_068/sol1.py:23:57     - Unknown word (totals)     -- with four different totals: 9, 10, 11, and 12.
project_euler/problem_068/sol1.py:38:45     - Unknown word (arrangements) -- 0, and depending on arrangements,
project_euler/problem_069/sol1.py:10:3      - Unknown word (Relatively) -- n Relatively Prime	φ(n)	n/φ(n)
project_euler/problem_069/sol1.py:31:73     - Unknown word (wikilink)   -- using product formula (wikilink below)
project_euler/problem_069/sol1.py:34:56     - Unknown word (attains)    -- and return the k that attains maximum
project_euler/problem_070/sol1.py:12:1      - Unknown word (Interestingly) -- Interestingly, φ(87109)=79180, and
project_euler/problem_072/sol1.py:17:44     - Unknown word (coprime)    -- between 1 and n that are coprime to n is given by the
project_euler/problem_074/sol1.py:16:77     - Unknown word (stuck)      -- will eventually get stuck in
project_euler/problem_074/sol1.py:26:10     - Unknown word (chains)     -- How many chains, with a starting number
project_euler/problem_074/sol1.py:30:7      - Unknown word (FACTORIALS) -- DIGIT_FACTORIALS = {
project_euler/problem_074/sol1.py:9:1       - Unknown word (Perhaps)    -- Perhaps less well known is
project_euler/problem_074/sol2.py:32:29     - Unknown word (stops)      -- generation of the chain stops before a repeating item
project_euler/problem_075/sol1.py:25:38     - Unknown word (perimeters) -- the frequencies of the perimeters.
project_euler/problem_075/sol1.py:37:5      - Unknown word (formmed)    -- formmed into an integer sided
project_euler/problem_076/sol1.py:2:10      - Unknown word (Summations) -- Counting Summations
project_euler/problem_077/sol1.py:21:5      - Unknown word (PRIMES)     -- NUM_PRIMES = 100
project_euler/problem_077/sol1.py:37:68     - Unknown word (decompositions) -- represented as unique prime decompositions,
project_euler/problem_078/sol1.py:6:23      - Unknown word (piles)      -- can be separated into piles. For example, five coins
project_euler/problem_079/sol1.py:21:26     - Unknown word (logins)     -- find_secret_passcode(logins: list[str]) -> int:
project_euler/problem_080/sol1.py:3:17      - Unknown word (Gupta)      -- Author: Sandeep Gupta
project_euler/problem_080/sol1.py:3:9       - Unknown word (Sandeep)    -- Author: Sandeep Gupta
project_euler/problem_081/sol1.py:4:42      - Unknown word (indicated)  -- the right and down, is indicated in bold red and is equal
project_euler/problem_085/sol1.py:17:5      - Unknown word (Denote)     -- Denote these two triangle numbers
project_euler/problem_085/sol1.py:21:21     - Unknown word (rough)      -- Since this is a rough bound, to be on the
project_euler/problem_085/sol1.py:4:13      - Unknown word (carefully)  -- By counting carefully it can be seen that
project_euler/problem_085/sol1.py:5:19      - Unknown word (rectangles) -- contains eighteen rectangles.
project_euler/problem_086/sol1.py:11:54     - Unknown word (cuboids)    -- exactly 2060 distinct cuboids, ignoring rotations
project_euler/problem_086/sol1.py:20:49     - Unknown word (laying)       -- opening up" the cuboid and laying out its faces on a plane
project_euler/problem_086/sol1.py:20:8      - Unknown word (conceptually) -- By conceptually "opening up" the cuboid
project_euler/problem_086/sol1.py:28:24     - Unknown word (satisfying)   -- The set of cuboids satisfying this property with maximum
project_euler/problem_086/sol1.py:4:14      - Unknown word (sits)       -- A spider, S, sits in one corner of a cuboid
project_euler/problem_086/sol1.py:4:3       - Unknown word (spider)     -- A spider, S, sits in one corner
project_euler/problem_087/sol1.py:42:17     - Unknown word (tetr)        -- tetr = prime3 * prime3 *
project_euler/problem_087/sol1.py:4:21      - Unknown word (expressible) -- The smallest number expressible as the sum of a prime
project_euler/problem_089/sol1.py:122:20    - Unknown word (numeralcleanup) -- >>> solution("/numeralcleanup_test.txt")
project_euler/problem_089/sol1.py:126:5     - Unknown word (savings)        -- savings = 0
project_euler/problem_089/sol1.py:12:1      - Unknown word (VIIIIIIIIIII) -- VIIIIIIIIIII
project_euler/problem_089/sol1.py:134:9     - Unknown word (shortened)      -- shortened = generate_roman_numerals
project_euler/problem_089/sol1.py:13:1      - Unknown word (VVIIIIII)     -- VVIIIIII
project_euler/problem_089/sol1.py:14:1      - Unknown word (XIIIIII)      -- XIIIIII
project_euler/problem_089/sol1.py:15:1      - Unknown word (VVVI)         -- VVVI
project_euler/problem_089/sol1.py:23:33     - Unknown word (definitive)   -- Roman Numerals for the definitive rules for this problem
project_euler/problem_089/sol1.py:40:31     - Unknown word (LXXXIX)       -- parse_roman_numerals("LXXXIX")
project_euler/problem_089/sol1.py:4:31      - Unknown word (numerals)   -- number written in Roman numerals to be considered valid
project_euler/problem_091/sol1.py:5:43      - Unknown word (ΔOPQ)       -- origin, O(0,0), to form ΔOPQ.
project_euler/problem_092/sol1.py:10:14     - Unknown word (amazing)    -- What is most amazing is that EVERY starting
project_euler/problem_092/sol1.py:14:8      - Unknown word (SQUARED)    -- DIGITS_SQUARED = [sum(int(c, 10) *
project_euler/problem_092/sol1.py:33:27     - Unknown word (Slightly)   -- # Increased Speed Slightly by checking every 5
project_euler/problem_092/sol1.py:40:15     - Unknown word (Chains)     -- # There are 2 Chains made,
project_euler/problem_092/sol1.py:48:37     - Unknown word (quicken)    -- dictionary to an array to quicken the solution
project_euler/problem_092/sol1.py:49:1      - Unknown word (CHAINS)     -- CHAINS: list[bool | None]
project_euler/problem_092/sol1.py:9:26      - Unknown word (arrives)    -- Therefore any chain that arrives at 1 or 89 will become
project_euler/problem_094/sol1.py:9:21      - Unknown word (differs)    -- equal and the third differs by no more than one
project_euler/problem_097/sol1.py:4:9       - Unknown word (Subsequently) -- digits. Subsequently other Mersenne primes
project_euler/problem_099/sol1.py:5:1       - Unknown word (calculator) -- calculator would confirm that
project_euler/problem_100/sol1.py:4:30      - Unknown word (coloured)   -- contains twenty-one coloured discs, composed of fifteen
project_euler/problem_100/sol1.py:4:39      - Unknown word (discs)      -- twenty-one coloured discs, composed of fifteen
project_euler/problem_101/sol1.py:116:5     - Unknown word (interpolates) -- interpolates the data points. We
project_euler/problem_101/sol1.py:116:67    - Unknown word (interpolating) -- coefficients of the interpolating
project_euler/problem_101/sol1.py:145:9     - Unknown word (interpolated)  -- def interpolated_func(var: int) -> int
project_euler/problem_101/sol1.py:193:37    - Unknown word (BOPS)          -- sum of the FITs of the BOPS. For each interpolating
project_euler/problem_101/sol1.py:23:1      - Unknown word (sensible)   -- sensible to assume constancy
project_euler/problem_101/sol1.py:33:1      - Unknown word (Clearly)    -- Clearly no BOPs exist for k
project_euler/problem_101/sol1.py:38:24     - Unknown word (tenth)      -- Consider the following tenth degree polynomial generating
project_euler/problem_101/sol1.py:3:1       - Unknown word (certainty)  -- certainty the value of the next
project_euler/problem_104/sol1.py:119:32    - Unknown word (optimisation)  -- m=1e9, done for fast optimisation
project_euler/problem_104/sol1.py:120:5     - Unknown word (tocheck)       -- tocheck = [0] * 1000000
project_euler/problem_104/sol1.py:47:32     - Unknown word (pandigitality) -- check last 9 numbers for pandigitality
project_euler/problem_107/sol1.py:112:5     - Unknown word (adjaceny)   -- adjaceny_matrix = [line.split
project_euler/problem_107/sol1.py:16:28     - Unknown word (optimise)   -- However, it is possible to optimise the network by removing
project_euler/problem_107/sol1.py:17:75     - Unknown word (achieves)   -- connected. The network which achieves
project_euler/problem_109/sol1.py:10:36     - Unknown word (concentric) -- of the board are two concentric circles called the bull
project_euler/problem_109/sol1.py:10:66     - Unknown word (bull)       -- concentric circles called the bull region, or
project_euler/problem_109/sol1.py:11:1      - Unknown word (bulls)      -- bulls-eye. The outer bull
project_euler/problem_109/sol1.py:16:55     - Unknown word (doubles)    -- is normal to play a "doubles out" system, which
project_euler/problem_109/sol1.py:20:5      - Unknown word (bust)       -- is "bust".
project_euler/problem_109/sol1.py:2:16      - Unknown word (darts)      -- In the game of darts a player throws three
project_euler/problem_109/sol1.py:45:1      - Unknown word (Incredibly) -- Incredibly there are 42336 distinct
project_euler/problem_109/sol1.py:68:5      - Unknown word (singles)    -- singles: list[int] = [*list
project_euler/problem_109/sol1.py:73:9      - Unknown word (checkouts)  -- num_checkouts: int = 0
project_euler/problem_109/sol1.py:7:5       - Unknown word (cream)      -- and cream regions inside this
project_euler/problem_109/sol1.py:8:45      - Unknown word (treble)     -- ring score double and treble scores respectively
project_euler/problem_112/sol1.py:8:79      - Unknown word (bouncy)     -- increasing nor decreasing a "bouncy"
project_euler/problem_114/sol1.py:29:43     - Unknown word (lend)       -- example above does not lend itself to the possibility
project_euler/problem_116/sol1.py:28:15     - Unknown word (colours)    -- Assuming that colours cannot be mixed there
project_euler/problem_116/sol1.py:32:66     - Unknown word (tile)       -- at least one coloured tile must be used?
project_euler/problem_116/sol1.py:4:27      - Unknown word (tiles)      -- of five grey square tiles is to have a number
project_euler/problem_116/sol1.py:5:24      - Unknown word (oblong)     -- replaced with coloured oblong tiles chosen
project_euler/problem_117/sol1.py:26:60     - Unknown word (tiled)      -- fifty units in length be tiled?
project_euler/problem_119/sol1.py:9:19      - Unknown word (insist)     -- this sequence and insist that a number must contain
project_euler/problem_120/sol1.py:14:5      - Unknown word (maximizing) -- For maximizing the value, 2an < a*a
project_euler/problem_120/sol1.py:2:20      - Unknown word (remainders) -- Problem 120 Square remainders: https://projecteuler
project_euler/problem_121/sol1.py:10:28     - Unknown word (prize)      -- and so the maximum prize fund the banker should
project_euler/problem_121/sol1.py:10:34     - Unknown word (fund)       -- so the maximum prize fund the banker should allocate
project_euler/problem_121/sol1.py:10:43     - Unknown word (banker)     -- maximum prize fund the banker should allocate for
project_euler/problem_121/sol1.py:11:47     - Unknown word (incur)      -- they would expect to incur a loss. Note that any
project_euler/problem_121/sol1.py:11:75     - Unknown word (payout)     -- loss. Note that any payout will
project_euler/problem_121/sol1.py:12:22     - Unknown word (pounds)     -- be a whole number of pounds and also includes the
project_euler/problem_121/sol1.py:6:12      - Unknown word (pays)       -- The player pays £1 to play and wins
project_euler/problem_121/sol1.py:9:16      - Unknown word (played)     -- If the game is played for four turns, the
project_euler/problem_123/sol1.py:95:40     - Unknown word (reminder)   -- the next prime as the reminder will be 2.
project_euler/problem_129/sol1.py:19:44     - Unknown word (Repunit)    -- value k such that the Repunit of length k is divisible
project_euler/problem_129/sol1.py:4:21      - Unknown word (entirely)   -- A number consisting entirely of ones is called a
project_euler/problem_129/sol1.py:4:50      - Unknown word (repunit)    -- of ones is called a repunit. We shall define R(k
project_euler/problem_131/sol1.py:9:9       - Unknown word (perhaps)    -- What is perhaps most surprising is that
project_euler/problem_135/sol1.py:15:1      - Unknown word (Taking)     -- Taking x, y, z of the form
project_euler/problem_144/sol1.py:13:26     - Unknown word (impacts)    -- and the beam first impacts the mirror at (1.4,
project_euler/problem_144/sol1.py:17:15     - Unknown word (beams)      -- and reflected beams make the same angle
project_euler/problem_144/sol1.py:17:5      - Unknown word (reflected)  -- and reflected beams make the same
project_euler/problem_144/sol1.py:20:24     - Unknown word (wall)       -- the laser beam and the wall of the white cell; the
project_euler/problem_144/sol1.py:27:47     - Unknown word (reflections) -- right shows the first 10 reflections of the beam.
project_euler/problem_144/sol1.py:2:4       - Unknown word (laser)      -- In laser physics, a "white cell
project_euler/problem_144/sol1.py:3:39      - Unknown word (bounces)    -- beam enters the cell, bounces around on the mirrors
project_euler/problem_144/sol1.py:56:41     - Unknown word (simultaeneous) -- next point, solve the simultaeneous equations:
project_euler/problem_145/sol1.py:10:1      - Unknown word (Leading)    -- Leading zeroes are not allowed
project_euler/problem_145/sol1.py:17:1      - Unknown word (EVEN)       -- EVEN_DIGITS = [0, 2, 4,
project_euler/problem_145/sol1.py:3:27      - Unknown word (Smolskiy)   -- Author: Vineet Rao, Maxim Smolskiy
project_euler/problem_145/sol1.py:3:9       - Unknown word (Vineet)     -- Author: Vineet Rao, Maxim Smolskiy
project_euler/problem_173/sol1.py:4:26      - Unknown word (lamina)     -- shall define a square lamina to be a square outline
project_euler/problem_173/sol1.py:6:58      - Unknown word (laminae)    -- two different square laminae:
project_euler/problem_180/sol1.py:14:19     - Unknown word (golden)     -- We call (x,y,z) a golden triple of order k if
project_euler/problem_180/sol1.py:31:62     - Unknown word (fulfilled)  -- equirement fn(x, y, z) = 0 is fulfilled if and
project_euler/problem_180/sol1.py:38:54     - Unknown word (numerators) -- through the possible numerators and denominators
project_euler/problem_180/sol1.py:40:75     - Unknown word (uniquq)     -- <= 0. We use a set "uniquq_s"
project_euler/problem_187/sol1.py:82:5      - Unknown word (semiprimes) -- semiprimes_count = 0
project_euler/problem_188/sol1.py:23:6      - Unknown word (modexpt)             -- def _modexpt(base: int, exponent
project_euler/problem_188/sol1.py:4:5       - Unknown word (hyperexponentiation) -- The hyperexponentiation of a number
project_euler/problem_188/sol1.py:58:39     - Unknown word (assiciative)         -- base↑↑height by right-assiciative repeated modular
project_euler/problem_188/sol1.py:6:28      - Unknown word (tetration)           -- hyperexponentiation or tetration of a number a by a positive
project_euler/problem_191/sol1.py:15:11     - Unknown word (OOOL)        -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO
project_euler/problem_191/sol1.py:15:16     - Unknown word (OOAO)        -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA
project_euler/problem_191/sol1.py:15:21     - Unknown word (OOAA)        -- OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO
project_euler/problem_191/sol1.py:15:26     - Unknown word (OOAL)        -- OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA
project_euler/problem_191/sol1.py:15:31     - Unknown word (OOLO)        -- OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA
project_euler/problem_191/sol1.py:15:36     - Unknown word (OOLA)        -- OOAO OOAA OOAL OOLO OOLA OAOO OAOA
project_euler/problem_191/sol1.py:15:41     - Unknown word (OAOO)        -- OOAA OOAL OOLO OOLA OAOO OAOA
project_euler/problem_191/sol1.py:15:46     - Unknown word (OAOA)        -- OOAL OOLO OOLA OAOO OAOA
project_euler/problem_191/sol1.py:15:6      - Unknown word (OOOA)        -- OOOO OOOA OOOL OOAO OOAA OOAL
project_euler/problem_191/sol1.py:16:1      - Unknown word (OAOL)        -- OAOL OAAO OAAL OALO OALA
project_euler/problem_191/sol1.py:16:11     - Unknown word (OAAL)        -- OAOL OAAO OAAL OALO OALA OLOO OLOA
project_euler/problem_191/sol1.py:16:16     - Unknown word (OALO)        -- OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO
project_euler/problem_191/sol1.py:16:21     - Unknown word (OALA)        -- OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA
project_euler/problem_191/sol1.py:16:26     - Unknown word (OLOO)        -- OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
project_euler/problem_191/sol1.py:16:31     - Unknown word (OLOA)        -- OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO
project_euler/problem_191/sol1.py:16:36     - Unknown word (OLAO)        -- OALO OALA OLOO OLOA OLAO OLAA AOOO
project_euler/problem_191/sol1.py:16:41     - Unknown word (OLAA)        -- OALA OLOO OLOA OLAO OLAA AOOO
project_euler/problem_191/sol1.py:16:46     - Unknown word (AOOO)        -- OLOO OLOA OLAO OLAA AOOO
project_euler/problem_191/sol1.py:16:6      - Unknown word (OAAO)        -- OAOL OAAO OAAL OALO OALA OLOO
project_euler/problem_191/sol1.py:17:1      - Unknown word (AOOA)        -- AOOA AOOL AOAO AOAA AOAL
project_euler/problem_191/sol1.py:17:11     - Unknown word (AOAO)        -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA
project_euler/problem_191/sol1.py:17:16     - Unknown word (AOAA)        -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO
project_euler/problem_191/sol1.py:17:21     - Unknown word (AOAL)        -- AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA
project_euler/problem_191/sol1.py:17:26     - Unknown word (AOLO)        -- AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL
project_euler/problem_191/sol1.py:17:31     - Unknown word (AOLA)        -- AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL
project_euler/problem_191/sol1.py:17:36     - Unknown word (AAOO)        -- AOAA AOAL AOLO AOLA AAOO AAOA AAOL
project_euler/problem_191/sol1.py:17:41     - Unknown word (AAOA)        -- AOAL AOLO AOLA AAOO AAOA AAOL
project_euler/problem_191/sol1.py:17:46     - Unknown word (AAOL)        -- AOLO AOLA AAOO AAOA AAOL
project_euler/problem_191/sol1.py:17:6      - Unknown word (AOOL)        -- AOOA AOOL AOAO AOAA AOAL AOLO
project_euler/problem_191/sol1.py:18:1      - Unknown word (AALO)        -- AALO AALA ALOO ALOA ALAO
project_euler/problem_191/sol1.py:18:11     - Unknown word (ALOO)        -- AALO AALA ALOO ALOA ALAO ALAA LOOO
project_euler/problem_191/sol1.py:18:16     - Unknown word (ALOA)        -- AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA
project_euler/problem_191/sol1.py:18:21     - Unknown word (ALAO)        -- AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO
project_euler/problem_191/sol1.py:18:26     - Unknown word (ALAA)        -- AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA
project_euler/problem_191/sol1.py:18:31     - Unknown word (LOOO)        -- ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA
project_euler/problem_191/sol1.py:18:36     - Unknown word (LOOA)        -- ALOA ALAO ALAA LOOO LOOA LOAO LOAA
project_euler/problem_191/sol1.py:18:41     - Unknown word (LOAO)        -- ALAO ALAA LOOO LOOA LOAO LOAA
project_euler/problem_191/sol1.py:18:46     - Unknown word (LOAA)        -- ALAA LOOO LOOA LOAO LOAA
project_euler/problem_191/sol1.py:18:6      - Unknown word (AALA)        -- AALO AALA ALOO ALOA ALAO ALAA
project_euler/problem_191/sol1.py:19:1      - Unknown word (LAOO)        -- LAOO LAOA LAAO
project_euler/problem_191/sol1.py:19:11     - Unknown word (LAAO)        -- LAOO LAOA LAAO
project_euler/problem_191/sol1.py:19:6      - Unknown word (LAOA)        -- LAOO LAOA LAAO
project_euler/problem_191/sol1.py:2:1       - Unknown word (Prize)      -- Prize Strings
project_euler/problem_191/sol1.py:5:21      - Unknown word (offers)     -- A particular school offers cash rewards to children
project_euler/problem_191/sol1.py:5:33      - Unknown word (rewards)    -- particular school offers cash rewards to children with good
project_euler/problem_191/sol1.py:5:63      - Unknown word (attendance) -- to children with good attendance and
project_euler/problem_191/sol1.py:68:57     - Unknown word (unfold)      -- possible ways that can unfold from
project_euler/problem_191/sol1.py:6:1       - Unknown word (punctuality) -- punctuality. If they are absent
project_euler/problem_191/sol1.py:71:64     - Unknown word (stays)       -- the "absent" counter stays as
project_euler/problem_191/sol1.py:7:10      - Unknown word (occasion)    -- than one occasion then they forfeit their
project_euler/problem_191/sol1.py:7:29      - Unknown word (forfeit)     -- one occasion then they forfeit their prize.
project_euler/problem_191/sol1.py:81:11     - Unknown word (ontime)      -- state_ontime = _calculate(days -
project_euler/problem_191/sol1.py:83:5      - Unknown word (prizestrings) -- prizestrings = state_late + state
project_euler/problem_191/sol1.py:92:53     - Unknown word (caching)      -- recursive function with caching to speed it up.
project_euler/problem_191/sol1.py:9:26      - Unknown word (trinary)     -- During an n-day period a trinary string is formed for
project_euler/problem_203/sol1.py:19:32     - Unknown word (squarefree) -- integer n is called squarefree if no square of a prime
project_euler/problem_203/sol1.py:38:64     - Unknown word (improvement) -- symmetric. A further improvement to this
project_euler/problem_203/sol1.py:63:9      - Unknown word (squarefrees) -- def get_squarefrees(unique_coefficients
project_euler/problem_203/sol1.py:72:48     - Unknown word (contrary)    -- be negative. On the contrary, if any r exists such
project_euler/problem_205/sol1.py:10:30     - Unknown word (Pyramidal)  -- the probability that Pyramidal Peter beats Cubic Colin
project_euler/problem_205/sol1.py:4:28      - Unknown word (pyramidal)  -- has nine four-sided (pyramidal) dice, each with faces
project_euler/problem_205/sol1.py:53:5      - Unknown word (colin)      -- colin_totals_frequencies
project_euler/problem_205/sol1.py:5:1       - Unknown word (Colin)      -- Colin has six six-sided (cubic
project_euler/problem_205/sol1.py:66:11     - Unknown word (games)      -- total_games_number = (4**9) * (
project_euler/problem_207/sol1.py:33:13     - Unknown word (significantly) -- To speed up significantly the search for partitions
project_euler/problem_207/sol1.py:37:50     - Unknown word (drops)         -- partitions / total partitions drops under the given value
project_euler/problem_234/sol1.py:12:42     - Unknown word (exceeding)     -- semidivisible numbers not exceeding 15 is 30, the numbers
project_euler/problem_234/sol1.py:9:23      - Unknown word (semidivisible) -- call an integer n ≥ 4 semidivisible, if one of lps(n) and
project_euler/problem_301/sol1.py:17:15     - Unknown word (deduce)     -- or attempt to deduce for yourself, X(n1,
project_euler/problem_301/sol1.py:5:36      - Unknown word (stones)     -- played with heaps of stones, where two players take
project_euler/problem_493/sol1.py:12:43     - Unknown word (picking)    -- total number of possible picking combinations
project_euler/problem_493/sol1.py:13:18     - Unknown word (binom)      -- [combinations := binom_coeff(70, 20)]
project_euler/problem_493/sol1.py:29:1      - Unknown word (BALLS)      -- BALLS_PER_COLOUR = 10
project_euler/problem_493/sol1.py:30:5      - Unknown word (COLOURS)    -- NUM_COLOURS = 7
project_euler/problem_493/sol1.py:34:18     - Unknown word (picks)      -- def solution(num_picks: int = 20) -> str:
project_euler/problem_493/sol1.py:4:13      - Unknown word (balls)      -- 70 coloured balls are placed in an urn
project_euler/problem_493/sol1.py:4:66      - Unknown word (rainbow)    -- for each of the seven rainbow colours.
project_euler/problem_493/sol1.py:6:62      - Unknown word (bcdefghij)  -- the decimal point (a.bcdefghij).
project_euler/problem_551/sol1.py:28:18     - Unknown word (greatly)    -- is cached to greatly speed up the computation
project_euler/problem_551/sol1.py:34:20     - Unknown word (calulcated) -- Term are calulcated until c > 10^k or the
project_euler/problem_551/sol1.py:83:26     - Unknown word (jumped)     -- _diff, terms_jumped = next_term(a_i, k
project_euler/problem_587/sol1.py:10:46     - Unknown word (occupies)   -- the concave triangle occupies exactly half of the
project_euler/problem_587/sol1.py:8:19      - Unknown word (orange)     -- We shall call the orange shaded region a concave
project_euler/problem_686/sol1.py:91:44     - Unknown word (staring)    -- first power leading to staring digits as 123,
project_euler/problem_800/sol1.py:4:70      - Unknown word (hybrid)     -- numbers p != q is called a hybrid-integer.
quantum/README.md:12:18     - Unknown word (installing) -- - Start using by installing `pip install qiskit
quantum/README.md:13:3      - Unknown word (Tutorials)  -- - Tutorials & References
quantum/README.md:18:11     - Unknown word (Cirq)       -- ## Google Cirq
quantum/README.md:19:52     - Unknown word (cirq)       -- python -m pip install cirq`, refer the [docs](https
quantum/README.md:3:1       - Unknown word (Started)    -- Started at https://github.com
quantum/README.md:8:3       - Unknown word (Rigetti)    -- * Rigetti: https://rigetti.com
quantum/README.md:9:3       - Unknown word (Zapata)     -- * Zapata: https://www.zapatacomputing
quantum/q_fourier_transform.py:17:8      - Unknown word (qiskit)     -- import qiskit
quantum/q_fourier_transform.py:18:25     - Unknown word (Classical)  -- from qiskit import Aer, ClassicalRegister, QuantumCircuit
quantum/q_fourier_transform.py:21:41     - Unknown word (qubits)     -- transform(number_of_qubits: int = 3) -> qiskit
quantum/q_fourier_transform.py:2:49      - Unknown word (desire)     -- transform (qft) for a desire
quantum/q_fourier_transform.py:3:30      - Unknown word (Qiskit)     -- of quantum bits using Qiskit framework. This
quantum/q_fourier_transform.py:4:25      - Unknown word (simulator)  -- experiment run in IBM Q simulator with 10000 shots.
quantum/q_fourier_transform.py:4:46      - Unknown word (shots)      -- simulator with 10000 shots.
quantum/q_fourier_transform.py:6:5       - Unknown word (Shor's)     -- the Shor's algorithm in quantum
quantum/q_fourier_transform.py:86:32     - Unknown word (qasm)       -- backend = Aer.get_backend("qasm_simulator")
scheduling/first_come_first_served.py:101:53    - Unknown word (Turnaround)  -- Time\tWaiting Time\tTurnaround Time")
scheduling/first_come_first_served.py:1:45      - Unknown word (scheduling) -- First Come First Served scheduling algorithm
scheduling/first_come_first_served.py:26:15     - Unknown word (turnaround) -- def calculate_turnaround_times(
scheduling/first_come_first_served.py:33:17     - Unknown word (Practically) -- Practically waiting_time + duration
scheduling/highest_response_ratio_next.py:111:27    - Unknown word (Arrival)    -- print("Process name \tArrival time \tBurst time \tTurn
scheduling/highest_response_ratio_next.py:111:42    - Unknown word (Burst)      -- name \tArrival time \tBurst time \tTurn around time
scheduling/highest_response_ratio_next.py:14:45     - Unknown word (burst)      -- arrival_time: list, burst_time: list, no_of_process
scheduling/highest_response_ratio_next.py:2:30      - Unknown word (HRRN)       -- response ratio next (HRRN) scheduling is a non
scheduling/highest_response_ratio_next.py:2:56      - Unknown word (preemptive) -- scheduling is a non-preemptive discipline.
scheduling/highest_response_ratio_next.py:2:67      - Unknown word (discipline) -- is a non-preemptive discipline.
scheduling/highest_response_ratio_next.py:4:36      - Unknown word (starvation) -- the problem of process starvation.
scheduling/job_sequence_with_deadline.py:2:36      - Unknown word (deadline)   -- of tasks, each with a deadline and reward, calculate
scheduling/job_sequence_with_deadline.py:2:49      - Unknown word (reward)     -- with a deadline and reward, calculate which tasks
scheduling/job_sequencing_with_deadline.py:1:25      - Unknown word (deadlines)  -- job_sequencing_with_deadlines(jobs: list) -> list
scheduling/job_sequencing_with_deadline.py:1:9       - Unknown word (sequencing) -- def job_sequencing_with_deadlines(jobs
scheduling/job_sequencing_with_deadline.py:9:54      - Unknown word (earned)     -- Maximum profit that can be earned by doing jobs
scheduling/multi_level_feedback_queue.py:150:26    - Unknown word (served)     -- def first_come_first_served(self, ready_queue: deque
scheduling/multi_level_feedback_queue.py:152:9     - Unknown word (FCFS)       -- FCFS(First Come, First Served
scheduling/multi_level_feedback_queue.py:153:33    - Unknown word (MLFQ's)     -- FCFS will be applied to MLFQ's last queue
scheduling/multi_level_feedback_queue.py:15:7      - Unknown word (MLFQ)       -- class MLFQ:
scheduling/multi_level_feedback_queue.py:196:24    - Unknown word (consume)    -- If the process consume CPU up to time_slice
scheduling/multi_level_feedback_queue.py:206:65    - Unknown word (terminated) -- # sequence deque of terminated process
scheduling/multi_level_feedback_queue.py:281:21    - Unknown word (extraglobs) -- doctest.testmod(extraglobs={"queue": deque([P1
scheduling/multi_level_feedback_queue.py:32:27     - Unknown word (mlfq's)     -- # total number of mlfq's queues
scheduling/multi_level_feedback_queue.py:34:43     - Unknown word (robin)      -- of queues that round robin algorithm applied
scheduling/multi_level_feedback_queue.py:36:11     - Unknown word (unfinished) -- # unfinished process is in this ready
scheduling/multi_level_feedback_queue.py:50:13     - Unknown word (mlfq)       -- >>> mlfq = MLFQ(3, [17, 25],
scheduling/non_preemptive_shortest_job_first.py:70:15     - Unknown word (turnaroundtime) -- def calculate_turnaroundtime(
scheduling/shortest_job_first.py:140:5     - Unknown word (fcfs)       -- fcfs = pd.DataFrame(
scheduling/shortest_job_first.py:33:5      - Unknown word (minm)       -- minm = 999999999
scheduling/shortest_job_first.py:66:13     - Unknown word (finar)      -- finar = finish_time - arrival
scripts/build_directory_md.py:17:59     - Unknown word (ipynb)      -- filename)[1] in (".py", ".ipynb"):
scripts/validate_filenames.py:22:1      - Unknown word (hyphen)     -- hyphen_files = [file for file
scripts/validate_filenames.py:27:1      - Unknown word (nodir)      -- nodir_files = [file for file
scripts/validate_filenames.py:7:71      - Unknown word (redef)      -- paths # type: ignore[no-redef]
scripts/validate_solutions.py:12:9      - Unknown word (EULER)      -- PROJECT_EULER_DIR_PATH = pathlib.Path
scripts/validate_solutions.py:13:15     - Unknown word (ANSWERS)    -- PROJECT_EULER_ANSWERS_PATH = pathlib.Path
scripts/validate_solutions.py:30:8      - Unknown word (Collects)   -- """Collects all the solution file
searches/binary_search.py:185:5     - Unknown word (unpredictable) -- unpredictable
searches/binary_search.py:22:5      - Unknown word (Locates)    -- Locates the first element in
searches/binary_tree_traversal.py:39:23     - Unknown word (Something)  -- raise ValueError("Something went wrong")
searches/binary_tree_traversal.py:39:33     - Unknown word (went)       -- ValueError("Something went wrong")
searches/fibonacci_search.py:110:13    - Unknown word (fibb)       -- fibb_k = i
searches/fibonacci_search.py:117:14    - Unknown word (Prevent)    -- ) # Prevent out of range
searches/hill_climbing.py:136:52    - Unknown word (ascent)      -- direction with greatest ascent
searches/hill_climbing.py:86:10     - Unknown word (climbing)    -- def hill_climbing(
searches/hill_climbing.py:8:27      - Unknown word (illustrated) -- The interface will be illustrated using the example of
searches/hill_climbing.py:97:32     - Unknown word (climbling)   -- Implementation of the hill climbling algorithm.
searches/median_of_medians.py:3:11      - Unknown word (pivots)     -- to select pivots for quick_select, which
searches/median_of_medians.py:7:1       - Unknown word (deterministically) -- deterministically
searches/simulated_annealing.py:17:11     - Unknown word (temperate)  -- start_temperate: float = 100,
searches/simulated_annealing.py:9:15      - Unknown word (annealing)  -- def simulated_annealing(
searches/simulated_annealing.py:9:5       - Unknown word (simulated)  -- def simulated_annealing(
searches/tabu_search.py:101:9     - Unknown word (minim)      -- minim = 10000
searches/tabu_search.py:203:76    - Unknown word (occurred)   -- lowest distance that occurred
searches/tabu_search.py:23:8      - Unknown word (tabu)       -- python tabu_search.py -f your_file
searches/tabu_search.py:25:31     - Unknown word (tabudata)   -- python tabu_search.py -f tabudata2.txt -i 4 -s 3
searches/tabu_search.py:2:67      - Unknown word (Travelling) -- search algorithm for a Travelling Salesman
searches/tabu_search.py:2:78      - Unknown word (Salesman)   -- algorithm for a Travelling Salesman
searches/ternary_search.py:37:34     - Unknown word (looked)     -- index of element that is looked for.
searches/ternary_search.py:62:9      - Unknown word (ternary)    -- def ite_ternary_search(array: list[int
sorts/README.md:1:3       - Unknown word (Sorting)    -- # Sorting Algorithms
sorts/README.md:2:27      - Unknown word (putting)    -- Sorting is the process of putting data in a specific order
sorts/README.md:3:21      - Unknown word (sorting)    -- is specified by the sorting algorithm. The most
sorts/README.md:3:49      - Unknown word (typical)    -- algorithm. The most typical orders are lexical or
sorts/README.md:3:68      - Unknown word (lexical)    -- most typical orders are lexical or numerical. The significanc
sorts/README.md:3:94      - Unknown word (significance) -- lexical or numerical. The significance
sorts/README.md:4:102     - Unknown word (optimised)    -- searching can be highly optimised.
sorts/README.md:7:103     - Unknown word (scenarios)    -- algorithms in various scenarios.
sorts/README.md:7:95      - Unknown word (various)      -- sorting algorithms in various scenarios.
sorts/bead_sort.py:7:5       - Unknown word (bead)       -- def bead_sort(sequence: list
sorts/bitonic_sort.py:14:62     - Unknown word (ASCENDING)  -- the sorting direction, ASCENDING(1) or
sorts/bitonic_sort.py:15:37     - Unknown word (agrees)     -- ); if (a[i] > a[j]) agrees with the direction,
sorts/bitonic_sort.py:15:5      - Unknown word (DESCENDING) -- DESCENDING(0); if (a[i] > a[j]
sorts/bitonic_sort.py:16:5      - Unknown word (interchanged) -- interchanged.
sorts/bitonic_sort.py:41:5      - Unknown word (bitonic)      -- def bitonic_merge(array: list[int
sorts/bogo_sort.py:21:61     - Unknown word (heterogeneous) -- ordered collection with heterogeneous
sorts/bogo_sort.py:2:45      - Unknown word (bogosort)   -- implementation of the bogosort algorithm,
sorts/bogo_sort.py:3:33      - Unknown word (stupid)     -- as permutation sort, stupid sort, slowsort, shotgun
sorts/bogo_sort.py:3:46      - Unknown word (slowsort)   -- ermutation sort, stupid sort, slowsort, shotgun sort, or monkey
sorts/bogo_sort.py:3:56      - Unknown word (shotgun)    -- stupid sort, slowsort, shotgun sort, or monkey sort
sorts/bogo_sort.py:4:1       - Unknown word (Bogosort)   -- Bogosort generates random permutations
sorts/bogo_sort.py:9:22      - Unknown word (bogo)       -- python -m doctest -v bogo_sort.py
sorts/bucket_sort.py:12:29     - Unknown word (cousin)       -- distribution sort, and is a cousin of radix sort in the
sorts/bucket_sort.py:13:19     - Unknown word (flavour)      -- significant digit flavour.
sorts/bucket_sort.py:14:36     - Unknown word (pigeonhole)   -- a generalization of pigeonhole sort. Bucket sort can
sorts/bucket_sort.py:20:1      - Unknown word (Worst)        -- Worst case scenario occurs
sorts/bucket_sort.py:20:12     - Unknown word (scenario)     -- Worst case scenario occurs when all the
sorts/bucket_sort.py:21:39     - Unknown word (dominated)    -- performance would then be dominated by the algorithm used
sorts/bucket_sort.py:9:4       - Unknown word (distributing) -- by distributing the elements of an array
sorts/cocktail_shaker_sort.py:25:32     - Unknown word (elderberry) -- cocktail_shaker_sort(["elderberry", "banana", "date",
sorts/cocktail_shaker_sort.py:2:26      - Unknown word (cocktail)   -- implementation of the cocktail shaker sort algorithm
sorts/cocktail_shaker_sort.py:2:35      - Unknown word (shaker)     -- mplementation of the cocktail shaker sort algorithm in pure
sorts/comb_sort.py:35:5      - Unknown word (shrink)       -- shrink_factor = 1.3
sorts/comb_sort.py:3:52      - Unknown word (originally) -- simple sorting algorithm originally designed by Wlodzimierz
sorts/comb_sort.py:3:75      - Unknown word (Wlodzimierz) -- originally designed by Wlodzimierz
sorts/comb_sort.py:4:1       - Unknown word (Dobosiewicz) -- Dobosiewicz in 1980.  It was rediscovered
sorts/comb_sort.py:4:30      - Unknown word (rediscovered) -- Dobosiewicz in 1980.  It was rediscovered by Stephen Lacey and
sorts/comb_sort.py:4:54      - Unknown word (Lacey)        -- rediscovered by Stephen Lacey and Richard Box in
sorts/comb_sort.py:7:80      - Unknown word (slowing)      -- in order to prevent slowing
sorts/counting_sort.py:30:5      - Unknown word (coll)       -- coll_len = len(collection
sorts/counting_sort.py:50:41     - Unknown word (respecting) -- elements in the output, respecting the original order
sorts/counting_sort.py:61:31     - Unknown word (thisisthestring) -- counting_sort_string("thisisthestring")
sorts/counting_sort.py:62:6      - Unknown word (eghhiiinrsssttt) -- 'eghhiiinrsssttt'
sorts/cycle_sort.py:2:21      - Unknown word (Honey)       -- Code contributed by Honey Sharma
sorts/cycle_sort.py:2:6       - Unknown word (contributed) -- Code contributed by Honey Sharma
sorts/dutch_national_flag_sort.py:47:35     - Unknown word (abacab)      -- national_flag_sort("abacab")
sorts/dutch_national_flag_sort.py:51:35     - Unknown word (Abacab)      -- national_flag_sort("Abacab")
sorts/dutch_national_flag_sort.py:8:17      - Unknown word (Netherlands) -- The flag of the Netherlands consists of three colors
sorts/external_sort.py:118:9     - Unknown word (merger)     -- merger = FileMerger(NWayMerge
sorts/external_sort.py:82:9      - Unknown word (unshift)    -- def unshift(self, index):
sorts/external_sort.py:89:11     - Unknown word (Merger)     -- class FileMerger:
sorts/gnome_sort.py:2:30      - Unknown word (Stupid)     -- Sort Algorithm (A.K.A. Stupid Sort)
sorts/gnome_sort.py:33:38     - Unknown word (Gnomes)     -- gnome_sort(list(set("Gnomes are stupid!"))))
sorts/gnome_sort.py:34:8      - Unknown word (Gadeimnoprstu) -- ' !Gadeimnoprstu'
sorts/gnome_sort.py:5:31      - Unknown word (swaps)      -- is not respected, it swaps element backward until
sorts/gnome_sort.py:6:23      - Unknown word (resumes)    -- previous element.  It resumes the initial iteration
sorts/gnome_sort.py:9:23      - Unknown word (gnome)      -- python3 -m doctest -v gnome_sort.py
sorts/intro_sort.py:2:1       - Unknown word (Introspective) -- Introspective Sort is a hybrid sort
sorts/iterative_merge_sort.py:3:9       - Unknown word (Aman)       -- Author: Aman Gupta
sorts/iterative_merge_sort.py:49:34     - Unknown word (dang)       -- merge_sort(['dep', 'dang', 'trai'])
sorts/iterative_merge_sort.py:49:42     - Unknown word (trai)       -- sort(['dep', 'dang', 'trai'])
sorts/merge_insertion_sort.py:124:60    - Unknown word (unnecessary) -- so that you can avoid unnecessary comparison.
sorts/msd_radix_sort.py:71:7      - Unknown word (recombine)  -- # recombine lists
sorts/natural_sort.py:10:44     - Unknown word (lexicographically) -- sort algorithm sorts lexicographically,
sorts/natural_sort.py:27:9      - Unknown word (alphanum)          -- def alphanum_key(key):
sorts/natural_sort.py:8:52      - Unknown word (humans)     -- strings in the way that humans expect.
sorts/normal_distribution_quick_sort.md:13:12     - Unknown word (numpy)      -- >>> import numpy as np
sorts/normal_distribution_quick_sort.md:32:12     - Unknown word (bins)       -- >>> count, bins, ignored = plt.hist
sorts/normal_distribution_quick_sort.md:32:18     - Unknown word (ignored)    -- >>> count, bins, ignored = plt.hist(s, 30, normed
sorts/normal_distribution_quick_sort.md:32:44     - Unknown word (normed)     -- ignored = plt.hist(s, 30, normed=True)
sorts/normal_distribution_quick_sort.md:44:30     - Unknown word (Checking)   -- plot the function for Checking 'The Number of Comparisons
sorts/normal_distribution_quick_sort.md:44:54     - Unknown word (Comparisons) -- Checking 'The Number of Comparisons' taking place between
sorts/normal_distribution_quick_sort.md:44:74     - Unknown word (place)       -- Comparisons' taking place between Normal Distribution
sorts/normal_distribution_quick_sort.md:47:12     - Unknown word (matplotlib)  -- >>> import matplotlib.pyplot as plt
sorts/normal_distribution_quick_sort.md:47:23     - Unknown word (pyplot)      -- > import matplotlib.pyplot as plt
sorts/normal_distribution_quick_sort.md:7:74      - Unknown word (mean)       -- Distribution, having mean = 0 and standard deviation
sorts/odd_even_sort.py:15:16     - Unknown word (interconnections) -- with local interconnections.
sorts/odd_even_sort.py:48:7      - Unknown word (inputing)         -- # inputing elements of the list
sorts/odd_even_transposition_parallel.py:102:34    - Unknown word (safer)           -- method is considered safer than fork
sorts/odd_even_transposition_parallel.py:107:61    - Unknown word (retrieved)       -- where the values will be retrieved
sorts/odd_even_transposition_parallel.py:11:1      - Unknown word (synchronization) -- synchronization could be used.
sorts/odd_even_transposition_parallel.py:8:14      - Unknown word (communicates) -- each process communicates with its neighboring
sorts/odd_even_transposition_single_threaded.py:4:15      - Unknown word (parallelized) -- This is a non-parallelized implementation of odd
sorts/odd_even_transposition_single_threaded.py:6:1       - Unknown word (Normally)     -- Normally the swaps in each set
sorts/odd_even_transposition_single_threaded.py:6:39      - Unknown word (simultaneously) -- swaps in each set happen simultaneously, without that the algorithm
sorts/pancake_sort.py:2:45      - Unknown word (pancake)    -- implementation of the pancake sort algorithm
sorts/patience_sort.py:8:37      - Unknown word (patience)   -- implementation of the patience sort algorithm
sorts/pigeon_sort.py:34:5      - Unknown word (holes)      -- holes_range = _max - _min
sorts/pigeon_sort.py:5:23      - Unknown word (pigeon)     -- python3 -m doctest -v pigeon_sort.py
sorts/pigeonhole_sort.py:10:33     - Unknown word (destructive)    -- pigeonhole_sort(a) # a destructive sort
sorts/pigeonhole_sort.py:14:58     - Unknown word (pigeonholes)    -- list (ie, number of pigeonholes we need)
sorts/pigeonhole_sort.py:29:7      - Unknown word (Putting)        -- # Putting the elements back into
sorts/pigeonhole_sort.py:9:28      - Unknown word (nondestructive) -- b = sorted(a)  # a nondestructive sort
sorts/quick_sort_3_partition.py:44:16     - Unknown word (lomuto)     -- def quick_sort_lomuto_partition(sorting: list
sorts/quick_sort_3_partition.py:47:10     - Unknown word (Lomuto)     -- with Lomuto partition scheme:
sorts/radix_sort.py:9:1       - Unknown word (RADIX)      -- RADIX = 10
sorts/recursive_mergesort_array.py:38:30     - Unknown word (lowers)     -- : # Runs until the lowers size of the left and
sorts/shell_sort.py:19:14     - Unknown word (Ciura's)    -- # Marcin Ciura's gap sequence
sorts/shell_sort.py:19:7      - Unknown word (Marcin)     -- # Marcin Ciura's gap sequence
sorts/shrink_shell_sort.py:6:1       - Unknown word (shrinks)    -- shrinks by a certain factor
sorts/slowsort.py:2:43      - Unknown word (humorous)   -- algorithm. It is of humorous nature and not useful
sorts/slowsort.py:3:45      - Unknown word (surrender)  -- principle of multiply and surrender,
sorts/slowsort.py:4:13      - Unknown word (cheek)      -- a tongue-in-cheek joke of divide and conquer
sorts/slowsort.py:4:19      - Unknown word (joke)       -- a tongue-in-cheek joke of divide and conquer
sorts/slowsort.py:4:3       - Unknown word (tongue)     -- a tongue-in-cheek joke of divide
sorts/slowsort.py:5:29      - Unknown word (Andrei)     -- published in 1986 by Andrei Broder and Jorge Stolfi
sorts/slowsort.py:5:36      - Unknown word (Broder)     -- published in 1986 by Andrei Broder and Jorge Stolfi
sorts/slowsort.py:5:47      - Unknown word (Jorge)      -- by Andrei Broder and Jorge Stolfi
sorts/slowsort.py:5:53      - Unknown word (Stolfi)     -- Andrei Broder and Jorge Stolfi
sorts/slowsort.py:6:16      - Unknown word (Pessimal)   -- in their paper Pessimal Algorithms and Simplexity
sorts/slowsort.py:6:40      - Unknown word (Simplexity) -- Pessimal Algorithms and Simplexity Analysis
sorts/slowsort.py:7:4       - Unknown word (parody)     -- (a parody of optimal algorithms
sorts/stooge_sort.py:1:5       - Unknown word (stooge)     -- def stooge_sort(arr: list[int]
sorts/topological_sort.py:19:47     - Unknown word (acyclic)    -- opological sort on a directed acyclic graph."""
sorts/tree_sort.py:4:45      - Unknown word (thru)       -- Tree and then iterate thru it to get a sorted list
sorts/unknown_sort.py:3:11      - Unknown word (Scenario)   -- Best Case Scenario : O(n)
sorts/wiggle_sort.py:12:5      - Unknown word (wiggle)     -- def wiggle_sort(nums: list) ->
strings/aho_corasick.py:6:7       - Unknown word (Automaton)  -- class Automaton:
strings/aho_corasick.py:70:46     - Unknown word (wherever)   -- whatever, err ... , wherever")
strings/aho_corasick.py:8:14      - Unknown word (adlist)     -- self.adlist: list[dict] = []
strings/alternative_string_arrange.py:10:6      - Unknown word (XAYBCD)     -- 'XAYBCD'
strings/alternative_string_arrange.py:12:6      - Unknown word (AXBYZ)      -- 'AXBYZ'
strings/alternative_string_arrange.py:8:6       - Unknown word (AXBYCD)     -- 'AXBYCD'
strings/anagrams.py:11:6      - Unknown word (estt)       -- 'estt'
strings/anagrams.py:13:9      - Unknown word (aehiisssttt) -- ' aehiisssttt'
strings/anagrams.py:15:6      - Unknown word (aefilnstt)   -- 'aefilnstt'
strings/anagrams.py:20:5      - Unknown word (anagram)     -- def anagram(my_word: str) -> list
strings/anagrams.py:23:15     - Unknown word (stet)        -- ['sett', 'stet', 'test']
strings/anagrams.py:23:7      - Unknown word (sett)        -- ['sett', 'stet', 'test']
strings/anagrams.py:40:9      - Unknown word (anagrams)    -- all_anagrams = {word: anagram(word
strings/autocomplete_using_trie.py:36:11     - Unknown word (depart)     -- words = ("depart", "detergent", "daring
strings/autocomplete_using_trie.py:36:21     - Unknown word (detergent)  -- words = ("depart", "detergent", "daring", "dog",
strings/autocomplete_using_trie.py:36:34     - Unknown word (daring)     -- depart", "detergent", "daring", "dog", "deer", "deal
strings/autocomplete_using_trie.py:36:51     - Unknown word (deer)       -- , "daring", "dog", "deer", "deal")
strings/barcode_validator.py:48:18     - Unknown word (dwefgiweuf) -- >>> is_valid(dwefgiweuf)
strings/bitap_string_match.py:13:23     - Unknown word (bitap)      -- python3 -m doctest -v bitap_string_match.py
strings/bitap_string_match.py:28:29     - Unknown word (abdabababc) -- bitap_string_match('abdabababc', 'ababc')
strings/bitap_string_match.py:28:43     - Unknown word (ababc)      -- match('abdabababc', 'ababc')
strings/bitap_string_match.py:32:29     - Unknown word (zxywsijdfosdfnso) -- bitap_string_match('zxywsijdfosdfnso', 'zxywsijdfosdfnso
strings/bitap_string_match.py:38:43     - Unknown word (fofosdfo)         -- match('abdabababc', 'fofosdfo')
strings/bitap_string_match.py:40:29     - Unknown word (abdab)            -- bitap_string_match('abdab', 'fofosdfo')
strings/boyer_moore_search.py:11:36     - Unknown word (entirety)   -- proposed that moves the entirety of Pattern past
strings/boyer_moore_search.py:4:38      - Unknown word (mismatched) -- character rule considers the mismatched character in Text.
strings/boyer_moore_search.py:78:9      - Unknown word (ABAABA)     -- text = "ABAABA"
strings/camel_case_to_snake_case.py:1:5       - Unknown word (camel)      -- def camel_to_snake_case(input
strings/camel_case_to_snake_case.py:35:36     - Unknown word (proceeded)  -- char is lowercase but proceeded by a digit:
strings/can_string_be_rearranged_as_palindrome.py:16:17     - Unknown word (Palindromes) -- Examples of Palindromes mom, dad, malayalam
strings/can_string_be_rearranged_as_palindrome.py:17:57     - Unknown word (Momo)        -- palindrome_counter("Momo")
strings/can_string_be_rearranged_as_palindrome.py:19:57     - Unknown word (Mother)      -- palindrome_counter("Mother")
strings/can_string_be_rearranged_as_palindrome.py:1:14      - Unknown word (susmith)    -- # Created by susmith98
strings/can_string_be_rearranged_as_palindrome.py:21:57     - Unknown word (Father)      -- palindrome_counter("Father")
strings/can_string_be_rearranged_as_palindrome.py:23:72     - Unknown word (canal)       -- counter("A man a plan a canal Panama")
strings/can_string_be_rearranged_as_palindrome.py:23:78     - Unknown word (Panama)      -- A man a plan a canal Panama")
strings/can_string_be_rearranged_as_palindrome.py:54:8      - Unknown word (Incrementing) -- 2) Incrementing the frequency of current
strings/can_string_be_rearranged_as_palindrome.py:65:5      - Unknown word (LOGIC)        -- LOGIC:
strings/can_string_be_rearranged_as_palindrome.py:85:11     - Unknown word (tans)         -- "\tans =",
strings/capitalize.py:24:23     - Unknown word (capitalized) -- # Concatenate the capitalized character with the rest
strings/capitalize.py:6:5       - Unknown word (Capitalizes) -- Capitalizes the first letter of
strings/check_anagrams.py:11:14     - Unknown word (differently) -- arranged differently (ignoring the case)
strings/count_vowels.py:1:11      - Unknown word (vowels)     -- def count_vowels(s: str) -> int:
strings/count_vowels.py:27:15     - Unknown word (aeiou)      -- vowels = "aeiouAEIOU"
strings/count_vowels.py:27:20     - Unknown word (AEIOU)      -- vowels = "aeiouAEIOU"
strings/credit_card_validator.py:62:65     - Unknown word (nonnumerical) -- number because it has nonnumerical characters.
strings/damerau_levenshtein_distance.py:11:5      - Unknown word (damerau)    -- def damerau_levenshtein_distance
strings/damerau_levenshtein_distance.py:25:39     - Unknown word (kitten)     -- levenshtein_distance("kitten", "sitting")
strings/damerau_levenshtein_distance.py:25:49     - Unknown word (sitting)    -- distance("kitten", "sitting")
strings/damerau_levenshtein_distance.py:31:52     - Unknown word (containment) -- distance("container", "containment")
strings/detecting_english_programmatically.py:16:1      - Unknown word (ENGLISH)    -- ENGLISH_WORDS = load_dictionary
strings/detecting_english_programmatically.py:36:6      - Unknown word (wwwgooglecom) -- 'wwwgooglecom'
strings/detecting_english_programmatically.py:49:21     - Unknown word (llold)        -- >>> is_english('llold HorWd')
strings/dna.py:10:6      - Unknown word (CGAT)       -- 'CGAT'
strings/dna.py:11:14     - Unknown word (ATGC)       -- >>> dna("ATGC")
strings/dna.py:12:6      - Unknown word (TACG)       -- 'TACG'
strings/dna.py:13:14     - Unknown word (CTGA)       -- >>> dna("CTGA")
strings/dna.py:14:6      - Unknown word (GACT)       -- 'GACT'
strings/dna.py:15:14     - Unknown word (GFGG)       -- >>> dna("GFGG")
strings/dna.py:21:25     - Unknown word (ATCG)       -- if len(re.findall("[ATCG]", dna)) != len(dna
strings/dna.py:24:49     - Unknown word (TAGC)       -- dna.maketrans("ATCG", "TAGC"))
strings/dna.py:9:14      - Unknown word (GCTA)       -- >>> dna("GCTA")
strings/edit_distance.py:15:24     - Unknown word (GATTIC)      -- >>> edit_distance("GATTIC", "GALTIC")
strings/edit_distance.py:15:34     - Unknown word (GALTIC)      -- distance("GATTIC", "GALTIC")
strings/edit_distance.py:32:26     - Unknown word (ATCGCTG)     -- print(edit_distance("ATCGCTG", "TAGCTAA"))  # Answer
strings/edit_distance.py:32:37     - Unknown word (TAGCTAA)     -- distance("ATCGCTG", "TAGCTAA")) # Answer is 4
strings/edit_distance.py:3:70      - Unknown word (quantifying) -- i.e., it is a way of quantifying how
strings/edit_distance.py:4:5       - Unknown word (dissimilar)  -- dissimilar two strings are to one
strings/frequency_finder.py:34:1      - Unknown word (ETAOIN)     -- ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ
strings/frequency_finder.py:34:11     - Unknown word (ETAOINSHRDLCUMWFGYPBVKJXQZ) -- ETAOIN = "ETAOINSHRDLCUMWFGYPBVKJXQZ"
strings/frequency_finder.py:55:6      - Unknown word (LOWDRHEZQXJKVBPYGFMUCSNIAT) -- 'LOWDRHEZQXJKVBPYGFMUCSNIAT'
strings/frequency_finder.py:57:6      - Unknown word (LHOEZQXJKVBPYGFWMUCDRSNIAT) -- 'LHOEZQXJKVBPYGFWMUCDRSNIAT'
strings/frequency_finder.py:59:6      - Unknown word (HZQXJKVBPYGFWMUCLDRSNIOATE) -- 'HZQXJKVBPYGFWMUCLDRSNIOATE'
strings/frequency_finder.py:93:9      - Unknown word (uncommon)                   -- for uncommon_letter in ETAOIN[-6
strings/hamming_distance.py:16:27     - Unknown word (karolin)    -- > hamming_distance("karolin", "kathrin")
strings/hamming_distance.py:16:38     - Unknown word (kathrin)    -- distance("karolin", "kathrin")
strings/hamming_distance.py:20:38     - Unknown word (kath)       -- distance("karolin", "kath")
strings/is_contains_unique_chars.py:21:25     - Unknown word (turned)     -- # If we already turned on bit for current character
strings/is_contains_unique_chars.py:4:37      - Unknown word (love)       -- contains_unique_chars("I_love.py")
strings/is_isogram.py:10:21     - Unknown word (Uncopyrightable) -- >>> is_isogram('Uncopyrightable')
strings/is_isogram.py:6:8       - Unknown word (isogram)    -- def is_isogram(string: str) -> bool
strings/is_isogram.py:9:17      - Unknown word (isograms)   -- Examples of isograms are uncopyrightable
strings/is_isogram.py:9:30      - Unknown word (uncopyrightable) -- Examples of isograms are uncopyrightable and ambidextrously.
strings/is_isogram.py:9:50      - Unknown word (ambidextrously)  -- uncopyrightable and ambidextrously.
strings/is_pangram.py:13:21     - Unknown word (Waltz)      -- >>> is_pangram("Waltz, bad nymph, for quick
strings/is_pangram.py:13:32     - Unknown word (nymph)      -- pangram("Waltz, bad nymph, for quick jigs vex
strings/is_pangram.py:13:49     - Unknown word (jigs)       -- bad nymph, for quick jigs vex.")
strings/is_pangram.py:15:21     - Unknown word (Jived)      -- >>> is_pangram("Jived fox nymph grabs quick
strings/is_pangram.py:15:37     - Unknown word (grabs)      -- pangram("Jived fox nymph grabs quick waltz.")
strings/is_pangram.py:15:49     - Unknown word (waltz)      -- fox nymph grabs quick waltz.")
strings/is_pangram.py:24:7      - Unknown word (Declare)    -- # Declare frequency as a set to
strings/is_pangram.py:6:8       - Unknown word (pangram)    -- def is_pangram(
strings/is_polish_national_id.py:1:8       - Unknown word (polish)     -- def is_polish_national_id(input_str
strings/is_polish_national_id.py:3:25      - Unknown word (correctness) -- Verification of the correctness of the PESEL number
strings/is_polish_national_id.py:3:44      - Unknown word (PESEL)       -- the correctness of the PESEL number.
strings/is_polish_national_id.py:4:39      - Unknown word (czym)        -- translate.goog/web/gov/czym-jest-numer-pesel?_x
strings/is_polish_national_id.py:4:44      - Unknown word (jest)        -- translate.goog/web/gov/czym-jest-numer-pesel?_x_tr_sl
strings/is_polish_national_id.py:4:49      - Unknown word (numer)       -- goog/web/gov/czym-jest-numer-pesel?_x_tr_sl=auto
strings/is_polish_national_id.py:4:55      - Unknown word (pesel)       -- gov/czym-jest-numer-pesel?_x_tr_sl=auto&_x_tr
strings/is_polish_national_id.py:74:5      - Unknown word (multipliers) -- multipliers = [1, 3, 7, 9, 1, 3
strings/is_spain_national_id.py:16:57     - Unknown word (insensitive)             -- 78z") # It is case-insensitive
strings/is_spain_national_id.py:2:19      - Unknown word (TRWAGMYFPDXBNJZSQVHLCKE) -- LOOKUP_LETTERS = "TRWAGMYFPDXBNJZSQVHLCKE"
strings/is_spain_national_id.py:5:26      - Unknown word (spanish)                 -- is_spain_national_id(spanish_id: str) -> bool:
strings/is_spain_national_id.py:5:8       - Unknown word (spain)                   -- def is_spain_national_id(spanish
strings/is_spain_national_id.py:9:18      - Unknown word (didn't)                  -- checking you didn't do a mistake when entering
strings/is_srilankan_phone_number.py:4:12      - Unknown word (lankan)     -- def is_sri_lankan_phone_number(phone:
strings/is_valid_email_address.py:17:22     - Unknown word (strange)    -- ("example-indeed@strange-example.com", True)
strings/is_valid_email_address.py:33:14     - Unknown word (underscores) -- ("i.like.underscores@but_its_not_allowed
strings/is_valid_email_address.py:39:16     - Unknown word (OCTETS)      -- MAX_LOCAL_PART_OCTETS = 64
strings/is_valid_email_address.py:47:33     - Unknown word (precedes)    -- local part of the email precedes the singular @ symbol
strings/is_valid_email_address.py:48:54     - Unknown word (john)        -- name. For example, "john.smith"
strings/is_valid_email_address.py:49:19     - Unknown word (stricter)    -- The domain is stricter than the local part
strings/is_valid_email_address.py:52:62     - Unknown word (Technically) -- in the email address. Technically if the
strings/is_valid_email_address.py:63:60     - Unknown word (consecutively) -- have more than one "." consecutively.
strings/is_valid_email_address.py:67:9      - Unknown word (Hyphen)        -- 6. Hyphen "-", provided that it
strings/jaro_winkler.py:10:23     - Unknown word (martha)     -- >>> jaro_winkler("martha", "marhta")
strings/jaro_winkler.py:10:33     - Unknown word (marhta)     -- jaro_winkler("martha", "marhta")
strings/jaro_winkler.py:12:23     - Unknown word (CRATE)      -- >>> jaro_winkler("CRATE", "TRACE")
strings/jaro_winkler.py:14:31     - Unknown word (dbdbdbdb)   -- jaro_winkler("test", "dbdbdbdb")
strings/jaro_winkler.py:4:10      - Unknown word (winkler)    -- def jaro_winkler(str1: str, str2: str
strings/jaro_winkler.py:4:5       - Unknown word (jaro)       -- def jaro_winkler(str1: str, str
strings/join.py:8:5       - Unknown word (Joins)      -- Joins a list of strings using
strings/knuth_morris_pratt.py:100:16    - Unknown word (aabaabaaa)               -- pattern = "aabaabaaa"
strings/knuth_morris_pratt.py:4:18      - Unknown word (pratt)      -- def knuth_morris_pratt(text: str, pattern:
strings/knuth_morris_pratt.py:72:14     - Unknown word (alskfjaldsabc) -- text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc
strings/knuth_morris_pratt.py:72:40     - Unknown word (adsfabcabc)    -- alskfjaldsabc1abc1abc12k23adsfabcabc"
strings/knuth_morris_pratt.py:73:14     - Unknown word (alskfjaldsk)   -- text2 = "alskfjaldsk23adsfabcabc"
strings/knuth_morris_pratt.py:78:16     - Unknown word (ABABX)         -- pattern = "ABABX"
strings/knuth_morris_pratt.py:79:13     - Unknown word (ABABZABABYABABX) -- text = "ABABZABABYABABX"
strings/knuth_morris_pratt.py:83:16     - Unknown word (AAAB)            -- pattern = "AAAB"
strings/knuth_morris_pratt.py:84:13     - Unknown word (ABAAAAAB)        -- text = "ABAAAAAB"
strings/knuth_morris_pratt.py:88:16     - Unknown word (abcdabcy)        -- pattern = "abcdabcy"
strings/knuth_morris_pratt.py:89:13     - Unknown word (abcxabcdabxabcdabcdabcy) -- text = "abcxabcdabxabcdabcdabcy"
strings/levenshtein_distance.py:102:48    - Unknown word (benchmarked)   -- of the function being benchmarked.
strings/levenshtein_distance.py:11:41     - Unknown word (planetary)  -- distance("planet", "planetary")
strings/levenshtein_distance.py:23:31     - Unknown word (orchestration) -- levenshtein_distance("orchestration", "container")
strings/levenshtein_distance.py:39:25     - Unknown word (insertions)    -- # Calculate insertions, deletions, and substitutions
strings/levenshtein_distance.py:39:52     - Unknown word (substitutions) -- insertions, deletions, and substitutions
strings/levenshtein_distance.py:57:49     - Unknown word (modifying)     -- optimized for efficiency by modifying rows in place.
strings/lower.py:7:16      - Unknown word (Hell)       -- >>> lower("HellZo")
strings/lower.py:8:6       - Unknown word (hellzo)     -- 'hellzo'
strings/manacher.py:30:57     - Unknown word (furthest)   -- and ending of previous furthest ending palindromic
strings/manacher.py:3:29      - Unknown word (abbbaba)    -- palindromic_string('abbbaba')
strings/manacher.py:4:6       - Unknown word (abbba)      -- 'abbba'
strings/manacher.py:5:29      - Unknown word (ababa)      -- palindromic_string('ababa')
strings/manacher.py:84:27     - Unknown word (distant)    -- and a4 are equally distant from a3 so char(a2)
strings/manacher.py:8:5       - Unknown word (Manacher's) -- Manacher's algorithm which finds
strings/min_cost_string_conversion.py:76:5      - Unknown word (assemble)   -- def assemble_transformation(ops:
strings/min_cost_string_conversion.py:78:5      - Unknown word (Assembles)  -- Assembles the transformations
strings/naive_string_search.py:14:31     - Unknown word (ABAAABCDBBABCDDEBCABC) -- naive_pattern_search("ABAAABCDBBABCDDEBCABC", "ABC")
strings/naive_string_search.py:22:31     - Unknown word (ABCDEGFTEST)           -- naive_pattern_search("ABCDEGFTEST", "TEST")
strings/ngram.py:6:12      - Unknown word (ngram)      -- def create_ngram(sentence: str, ngram
strings/ngram.py:8:12      - Unknown word (ngrams)     -- Create ngrams from a sentence
strings/palindrome.py:13:6      - Unknown word (amanaplanacanalpanama) -- "amanaplanacanalpanama": True,  # "a man a
strings/palindrome.py:13:61     - Unknown word (panama)                -- a man a plan a canal panama"
strings/pig_latin.py:10:6      - Unknown word (atinlay)    -- 'atinlay'
strings/pig_latin.py:12:6      - Unknown word (ananabay)   -- 'ananabay'
strings/pig_latin.py:13:20     - Unknown word (friends)    -- >>> pig_latin("friends")
strings/pig_latin.py:14:6      - Unknown word (iendsfray)  -- 'iendsfray'
strings/pig_latin.py:15:20     - Unknown word (smile)      -- >>> pig_latin("smile")
strings/pig_latin.py:16:6      - Unknown word (ilesmay)    -- 'ilesmay'
strings/pig_latin.py:18:6      - Unknown word (ingstray)   -- 'ingstray'
strings/pig_latin.py:21:20     - Unknown word (omelet)     -- >>> pig_latin("omelet")
strings/pig_latin.py:22:6      - Unknown word (omeletway)  -- 'omeletway'
strings/pig_latin.py:24:6      - Unknown word (areway)     -- 'areway'
strings/pig_latin.py:2:20      - Unknown word (piglatin)   -- """Compute the piglatin of a given string.
strings/pig_latin.py:8:6       - Unknown word (igpay)      -- 'igpay'
strings/prefix_function.py:17:34     - Unknown word (coincidence) -- represents the longest coincidence of prefix and suffix
strings/prefix_function.py:22:26     - Unknown word (aabcdaabc)   -- >> prefix_function("aabcdaabc")
strings/prefix_function.py:24:26     - Unknown word (asdasdad)    -- >> prefix_function("asdasdad")
strings/prefix_function.py:53:25     - Unknown word (abcab)       -- >>> longest_prefix("abcab")
strings/rabin_karp.py:7:11      - Unknown word (karp)       -- def rabin_karp(pattern: str, text:
strings/rabin_karp.py:83:13     - Unknown word (Lüsai)      -- text = "Lüsai"
strings/reverse_letters.py:12:26     - Unknown word (racecar)    -- >> reverse_letters("racecar")
strings/reverse_letters.py:6:30      - Unknown word (wollef)     -- reverse_letters("Hey wollef sroirraw", 3)
strings/reverse_letters.py:6:37      - Unknown word (sroirraw)   -- letters("Hey wollef sroirraw", 3)
strings/reverse_letters.py:7:10      - Unknown word (fellow)     -- 'Hey fellow warriors'
strings/reverse_letters.py:7:17      - Unknown word (warriors)   -- 'Hey fellow warriors'
strings/reverse_letters.py:8:26      - Unknown word (nohty)      -- >> reverse_letters("nohtyP is nohtyP", 2)
strings/reverse_words.py:3:5       - Unknown word (Reverses)   -- Reverses words in a given string
strings/reverse_words.py:6:30      - Unknown word (Love)       -- reverse_words("I Love Python")
strings/split.py:18:17     - Unknown word (abbb)       -- >>> split(";abbb;;c;", separator=';'
strings/string_switch_case.py:11:1      - Unknown word (kebab)      -- kebab case [ can be found
strings/string_switch_case.py:18:3      - Unknown word (assistant)  -- # assistant functions
strings/string_switch_case.py:32:18     - Unknown word (Combined)   -- 'ThisShouldBeCombined'
strings/string_switch_case.py:34:24     - Unknown word (Capitalized) -- 'TheFirstLettersAreCapitalizedThenStringIsMerged'
strings/string_switch_case.py:55:25     - Unknown word (FOUR)        -- 'ONE_TWO_31235THREE4FOUR'
strings/text_justification.py:19:19     - Unknown word (roads)         -- string = "Two roads diverged in a yellow
strings/text_justification.py:19:25     - Unknown word (diverged)      -- string = "Two roads diverged in a yellow wood"
strings/text_justification.py:19:46     - Unknown word (wood)          -- diverged in a yellow wood"
strings/text_justification.py:1:10      - Unknown word (justification) -- def text_justification(word: str, max_width
strings/text_justification.py:35:9      - Unknown word (justify)       -- def justify(line: list, width: int
strings/text_justification.py:4:58      - Unknown word (justified)     -- fully (left and right) justified,
strings/text_justification.py:56:13     - Unknown word (aligned)       -- aligned_words_list = []
strings/title.py:11:24     - Unknown word (AAKASH)     -- >>> to_title_case("AAKASH")
strings/title.py:38:40     - Unknown word (Giri)       -- to_title_case("Aakash Giri")
strings/title.py:41:40     - Unknown word (giri)       -- to_title_case("aakash giri")
strings/title.py:44:40     - Unknown word (GIRI)       -- to_title_case("AAKASH GIRI")
strings/title.py:5:24      - Unknown word (Aakash)     -- >>> to_title_case("Aakash")
strings/title.py:8:24      - Unknown word (aakash)     -- >>> to_title_case("aakash")
strings/top_k_frequent_words.py:8:26      - Unknown word (educational) -- is mostly shown for educational purposes, since the
strings/upper.py:4:17      - Unknown word (subtracting) -- letters and subtracting 32 from their integer
strings/wildcard_pattern_matching.py:37:24     - Unknown word (dabc)       -- >>> match_pattern("dabc", "*abc")
strings/wildcard_pattern_matching.py:43:24     - Unknown word (aaab)       -- >>> match_pattern("aaab", "aa*")
strings/word_occurrence.py:10:9      - Unknown word (occurence)    -- >>> occurence_dict = word_occurrence
strings/word_occurrence.py:1:14      - Unknown word (sarathkaul) -- # Created by sarathkaul on 17/11/19
strings/word_occurrence.py:2:15      - Unknown word (Arkadip)    -- # Modified by Arkadip Bhattacharya(@darkmatter
strings/word_occurrence.py:2:23      - Unknown word (Bhattacharya) -- Modified by Arkadip Bhattacharya(@darkmatter18) on 2
strings/word_occurrence.py:2:37      - Unknown word (darkmatter)   -- Arkadip Bhattacharya(@darkmatter18) on 20/04/2020
strings/word_patterns.py:3:44      - Unknown word (appearances) -- pattern of character appearances in given word
strings/z_function.py:23:21     - Unknown word (abracadabra) -- >>> z_function("abracadabra")
strings/z_function.py:27:21     - Unknown word (zxxzxxz)     -- >>> z_function("zxxzxxz")
strings/z_function.py:32:18     - Unknown word (interval's)  -- # initialize interval's left pointer and right
web_programming/co2_emission.py:18:3      - Unknown word (Emissions)  -- # Emissions in a specific date range
web_programming/covid_stats_via_xpath.py:15:5      - Unknown word (deaths)       -- deaths: int
web_programming/covid_stats_via_xpath.py:16:5      - Unknown word (recovered)    -- recovered: int
web_programming/covid_stats_via_xpath.py:19:5      - Unknown word (covid)        -- def covid_stats(url: str = "https
web_programming/covid_stats_via_xpath.py:28:16     - Unknown word (patients)     -- Total COVID-19 patients recovered in the world
web_programming/covid_stats_via_xpath.py:2:24      - Unknown word (COVID)      -- This is to show simple COVID19 info fetching from
web_programming/covid_stats_via_xpath.py:2:37      - Unknown word (fetching)   -- simple COVID19 info fetching from worldometers site
web_programming/covid_stats_via_xpath.py:2:51      - Unknown word (worldometers) -- info fetching from worldometers site using lxml
web_programming/covid_stats_via_xpath.py:3:12      - Unknown word (motivation)   -- * The main motivation to use lxml in place
web_programming/crawl_google_scholar_citation.py:25:14     - Unknown word (Precisely)  -- "Precisely geometry controlled
web_programming/crawl_google_scholar_citation.py:25:33     - Unknown word (controlled) -- "Precisely geometry controlled microsupercapacitors
web_programming/crawl_google_scholar_citation.py:25:44     - Unknown word (microsupercapacitors) -- geometry controlled microsupercapacitors for ultrahigh areal
web_programming/crawl_google_scholar_citation.py:25:69     - Unknown word (ultrahigh)            -- microsupercapacitors for ultrahigh areal "
web_programming/crawl_google_scholar_citation.py:25:79     - Unknown word (areal)                -- supercapacitors for ultrahigh areal "
web_programming/crawl_google_scholar_citation.py:26:27     - Unknown word (volumetric)           -- "capacitance, volumetric capacitance, and energy
web_programming/crawl_google_scholar_citation.py:28:21     - Unknown word (Chem)                 -- "journal": "Chem. Mater.",
web_programming/crawl_google_scholar_citation.py:28:27     - Unknown word (Mater)                -- "journal": "Chem. Mater.",
web_programming/crawl_google_scholar_citation.py:2:30      - Unknown word (scholar)    -- citation from google scholar
web_programming/crawl_google_scholar_citation.py:2:9       - Unknown word (citation)   -- Get the citation from google scholar
web_programming/currency_converter.py:100:12    - Unknown word (Kyat)       -- MMK Myanma Kyat
web_programming/currency_converter.py:100:5     - Unknown word (Myanma)     -- MMK Myanma Kyat
web_programming/currency_converter.py:101:15    - Unknown word (Tugrik)     -- MNT Mongolian Tugrik
web_programming/currency_converter.py:101:5     - Unknown word (Mongolian)  -- MNT Mongolian Tugrik
web_programming/currency_converter.py:102:11    - Unknown word (Pataca)     -- MOP Macau Pataca
web_programming/currency_converter.py:102:5     - Unknown word (Macau)      -- MOP Macau Pataca
web_programming/currency_converter.py:103:17    - Unknown word (Ouguiya)     -- MRO Mauritanian Ouguiya
web_programming/currency_converter.py:103:5     - Unknown word (Mauritanian) -- MRO Mauritanian Ouguiya
web_programming/currency_converter.py:104:5     - Unknown word (Mauritian)   -- MUR Mauritian Rupee
web_programming/currency_converter.py:105:15    - Unknown word (Rufiyaa)     -- MVR Maldivian Rufiyaa
web_programming/currency_converter.py:105:5     - Unknown word (Maldivian)   -- MVR Maldivian Rufiyaa
web_programming/currency_converter.py:106:12    - Unknown word (Kwacha)      -- MWK Malawi Kwacha
web_programming/currency_converter.py:106:5     - Unknown word (Malawi)      -- MWK Malawi Kwacha
web_programming/currency_converter.py:108:15    - Unknown word (Ringgit)     -- MYR Malaysian Ringgit
web_programming/currency_converter.py:108:5     - Unknown word (Malaysian)   -- MYR Malaysian Ringgit
web_programming/currency_converter.py:109:16    - Unknown word (Metical)     -- MZN Mozambican Metical
web_programming/currency_converter.py:109:5     - Unknown word (Mozambican)  -- MZN Mozambican Metical
web_programming/currency_converter.py:110:5     - Unknown word (Namibian)    -- NAD Namibian Dollar
web_programming/currency_converter.py:111:14    - Unknown word (Naira)       -- NGN Nigerian Naira
web_programming/currency_converter.py:111:5     - Unknown word (Nigerian)    -- NGN Nigerian Naira
web_programming/currency_converter.py:112:15    - Unknown word (Cordoba)     -- NIO Nicaragua Cordoba
web_programming/currency_converter.py:112:5     - Unknown word (Nicaragua)   -- NIO Nicaragua Cordoba
web_programming/currency_converter.py:114:5     - Unknown word (Nepalese)    -- NPR Nepalese Rupee
web_programming/currency_converter.py:116:5     - Unknown word (Omani)       -- OMR Omani Rial
web_programming/currency_converter.py:117:5     - Unknown word (Panamanian)  -- PAB Panamanian Balboa
web_programming/currency_converter.py:118:14    - Unknown word (Nuevo)       -- PEN Peruvian Nuevo Sol
web_programming/currency_converter.py:118:5     - Unknown word (Peruvian)    -- PEN Peruvian Nuevo Sol
web_programming/currency_converter.py:119:15    - Unknown word (Guinean)     -- PGK Papua New Guinean Kina
web_programming/currency_converter.py:119:23    - Unknown word (Kina)        -- PGK Papua New Guinean Kina
web_programming/currency_converter.py:119:5     - Unknown word (Papua)       -- PGK Papua New Guinean Kina
web_programming/currency_converter.py:120:5     - Unknown word (Philippine)  -- PHP Philippine Peso
web_programming/currency_converter.py:121:5     - Unknown word (Pakistani)   -- PKR Pakistani Rupee
web_programming/currency_converter.py:122:12    - Unknown word (Zloty)       -- PLN Polish Zloty
web_programming/currency_converter.py:123:16    - Unknown word (Guarani)     -- PYG Paraguayan Guarani
web_programming/currency_converter.py:123:5     - Unknown word (Paraguayan)  -- PYG Paraguayan Guarani
web_programming/currency_converter.py:124:12    - Unknown word (Riyal)       -- QAR Qatari Riyal
web_programming/currency_converter.py:124:5     - Unknown word (Qatari)      -- QAR Qatari Riyal
web_programming/currency_converter.py:125:5     - Unknown word (Romanian)    -- RON Romanian Leu
web_programming/currency_converter.py:126:5     - Unknown word (Serbian)     -- RSD Serbian Dinar
web_programming/currency_converter.py:127:5     - Unknown word (Russian)     -- RUB Russian Ruble
web_programming/currency_converter.py:128:5     - Unknown word (Rwanda)      -- RWF Rwanda Franc
web_programming/currency_converter.py:129:5     - Unknown word (Saudi)       -- SAR Saudi Riyal
web_programming/currency_converter.py:130:5     - Unknown word (Solomon)     -- SBD Solomon Islands Dollar
web_programming/currency_converter.py:131:5     - Unknown word (Seychellois) -- SCR Seychellois Rupee
web_programming/currency_converter.py:132:5     - Unknown word (Sudanese)    -- SDG Sudanese Pound
web_programming/currency_converter.py:133:5     - Unknown word (Swedish)     -- SEK Swedish Krona
web_programming/currency_converter.py:135:11    - Unknown word (Helena)      -- SHP Saint Helena Pound
web_programming/currency_converter.py:135:5     - Unknown word (Saint)       -- SHP Saint Helena Pound
web_programming/currency_converter.py:136:12    - Unknown word (Leonean)     -- SLL Sierra Leonean Leone
web_programming/currency_converter.py:136:20    - Unknown word (Leone)       -- SLL Sierra Leonean Leone
web_programming/currency_converter.py:136:5     - Unknown word (Sierra)      -- SLL Sierra Leonean Leone
web_programming/currency_converter.py:137:5     - Unknown word (Somali)      -- SOS Somali Shilling
web_programming/currency_converter.py:138:5     - Unknown word (Surinamese)  -- SRD Surinamese Dollar
web_programming/currency_converter.py:140:18    - Unknown word (Principe)    -- STD Sao Tome and Principe Dobra
web_programming/currency_converter.py:140:27    - Unknown word (Dobra)       -- Sao Tome and Principe Dobra
web_programming/currency_converter.py:140:9     - Unknown word (Tome)        -- STD Sao Tome and Principe Dobra
web_programming/currency_converter.py:141:5     - Unknown word (Syrian)      -- SYP Syrian Pound
web_programming/currency_converter.py:142:11    - Unknown word (Lilangeni)   -- SZL Swazi Lilangeni
web_programming/currency_converter.py:142:5     - Unknown word (Swazi)       -- SZL Swazi Lilangeni
web_programming/currency_converter.py:143:10    - Unknown word (Baht)        -- THB Thai Baht
web_programming/currency_converter.py:143:5     - Unknown word (Thai)        -- THB Thai Baht
web_programming/currency_converter.py:144:16    - Unknown word (Somoni)      -- TJS Tajikistan Somoni
web_programming/currency_converter.py:144:5     - Unknown word (Tajikistan)  -- TJS Tajikistan Somoni
web_programming/currency_converter.py:145:5     - Unknown word (Turkmenistani) -- TMT Turkmenistani Manat
web_programming/currency_converter.py:146:5     - Unknown word (Tunisian)      -- TND Tunisian Dinar
web_programming/currency_converter.py:147:11    - Unknown word (Paanga)        -- TOP Tonga Paanga
web_programming/currency_converter.py:147:5     - Unknown word (Tonga)         -- TOP Tonga Paanga
web_programming/currency_converter.py:148:13    - Unknown word (Lira)          -- TRY Turkish Lira
web_programming/currency_converter.py:148:5     - Unknown word (Turkish)       -- TRY Turkish Lira
web_programming/currency_converter.py:149:18    - Unknown word (Tobago)        -- TTD Trinidad and Tobago Dollar
web_programming/currency_converter.py:149:5     - Unknown word (Trinidad)      -- TTD Trinidad and Tobago Dollar
web_programming/currency_converter.py:14:9      - Unknown word (currencies) -- list_of_currencies = """
web_programming/currency_converter.py:151:5     - Unknown word (Tanzanian)     -- TZS Tanzanian Shilling
web_programming/currency_converter.py:152:15    - Unknown word (Hryvnia)       -- UAH Ukrainian Hryvnia
web_programming/currency_converter.py:152:5     - Unknown word (Ukrainian)     -- UAH Ukrainian Hryvnia
web_programming/currency_converter.py:153:5     - Unknown word (Ugandan)       -- UGX Ugandan Shilling
web_programming/currency_converter.py:155:5     - Unknown word (Uruguayan)     -- UYU Uruguayan Peso
web_programming/currency_converter.py:156:5     - Unknown word (Uzbekistan)    -- UZS Uzbekistan Som
web_programming/currency_converter.py:157:16    - Unknown word (Bolivar)       -- VEF Venezuelan Bolivar
web_programming/currency_converter.py:157:5     - Unknown word (Venezuelan)    -- VEF Venezuelan Bolivar
web_programming/currency_converter.py:158:16    - Unknown word (Dong)          -- VND Vietnamese Dong
web_programming/currency_converter.py:158:5     - Unknown word (Vietnamese)    -- VND Vietnamese Dong
web_programming/currency_converter.py:159:13    - Unknown word (Vatu)          -- VUV Vanuatu Vatu
web_programming/currency_converter.py:159:5     - Unknown word (Vanuatu)       -- VUV Vanuatu Vatu
web_programming/currency_converter.py:15:12     - Unknown word (Arab)       -- AED United Arab Emirates Dirham
web_programming/currency_converter.py:15:17     - Unknown word (Emirates)   -- AED United Arab Emirates Dirham
web_programming/currency_converter.py:160:12    - Unknown word (Tala)          -- WST Samoan Tala
web_programming/currency_converter.py:160:5     - Unknown word (Samoan)        -- WST Samoan Tala
web_programming/currency_converter.py:161:13    - Unknown word (African)       -- XAF Central African CFA franc
web_programming/currency_converter.py:161:25    - Unknown word (franc)         -- Central African CFA franc
web_programming/currency_converter.py:165:5     - Unknown word (Yemeni)        -- YER Yemeni Rial
web_programming/currency_converter.py:167:5     - Unknown word (Zambian)       -- ZMW Zambian Kwacha
web_programming/currency_converter.py:16:12     - Unknown word (Afghani)    -- AFN Afghan Afghani
web_programming/currency_converter.py:16:5      - Unknown word (Afghan)     -- AFN Afghan Afghani
web_programming/currency_converter.py:17:5      - Unknown word (Albanian)   -- ALL Albanian Lek
web_programming/currency_converter.py:185:26    - Unknown word (AMDOREN)       -- API_KEY = os.getenv("AMDOREN_API_KEY", "")
web_programming/currency_converter.py:18:5      - Unknown word (Armenian)   -- AMD Armenian Dram
web_programming/currency_converter.py:19:17     - Unknown word (Antillean)  -- ANG Netherlands Antillean Guilder
web_programming/currency_converter.py:19:27     - Unknown word (Guilder)    -- Netherlands Antillean Guilder
web_programming/currency_converter.py:20:13     - Unknown word (Kwanza)     -- AOA Angolan Kwanza
web_programming/currency_converter.py:20:5      - Unknown word (Angolan)    -- AOA Angolan Kwanza
web_programming/currency_converter.py:21:15     - Unknown word (Peso)       -- ARS Argentine Peso
web_programming/currency_converter.py:21:5      - Unknown word (Argentine)  -- ARS Argentine Peso
web_programming/currency_converter.py:23:12     - Unknown word (Florin)     -- AWG Aruban Florin
web_programming/currency_converter.py:23:5      - Unknown word (Aruban)     -- AWG Aruban Florin
web_programming/currency_converter.py:24:17     - Unknown word (Manat)       -- AZN Azerbaijani Manat
web_programming/currency_converter.py:24:5      - Unknown word (Azerbaijani) -- AZN Azerbaijani Manat
web_programming/currency_converter.py:25:14     - Unknown word (Herzegovina) -- BAM Bosnia & Herzegovina Convertible Mark
web_programming/currency_converter.py:25:26     - Unknown word (Convertible) -- Bosnia & Herzegovina Convertible Mark
web_programming/currency_converter.py:25:5      - Unknown word (Bosnia)      -- BAM Bosnia & Herzegovina Convertible
web_programming/currency_converter.py:26:5      - Unknown word (Barbadian)   -- BBD Barbadian Dollar
web_programming/currency_converter.py:27:17     - Unknown word (Taka)        -- BDT Bangladeshi Taka
web_programming/currency_converter.py:27:5      - Unknown word (Bangladeshi) -- BDT Bangladeshi Taka
web_programming/currency_converter.py:28:5      - Unknown word (Bulgarian)   -- BGN Bulgarian Lev
web_programming/currency_converter.py:29:14     - Unknown word (Dinar)       -- BHD Bahraini Dinar
web_programming/currency_converter.py:29:5      - Unknown word (Bahraini)    -- BHD Bahraini Dinar
web_programming/currency_converter.py:2:48      - Unknown word (Amdoren)    -- the currency using the Amdoren Currency API
web_programming/currency_converter.py:30:15     - Unknown word (Franc)       -- BIF Burundian Franc
web_programming/currency_converter.py:30:5      - Unknown word (Burundian)   -- BIF Burundian Franc
web_programming/currency_converter.py:31:5      - Unknown word (Bermudian)   -- BMD Bermudian Dollar
web_programming/currency_converter.py:33:14     - Unknown word (Boliviano)   -- BOB Bolivian Boliviano
web_programming/currency_converter.py:33:5      - Unknown word (Bolivian)    -- BOB Bolivian Boliviano
web_programming/currency_converter.py:35:5      - Unknown word (Bahamian)    -- BSD Bahamian Dollar
web_programming/currency_converter.py:36:15     - Unknown word (Ngultrum)    -- BTN Bhutanese Ngultrum
web_programming/currency_converter.py:36:5      - Unknown word (Bhutanese)   -- BTN Bhutanese Ngultrum
web_programming/currency_converter.py:37:14     - Unknown word (Pula)        -- BWP Botswana Pula
web_programming/currency_converter.py:37:5      - Unknown word (Botswana)    -- BWP Botswana Pula
web_programming/currency_converter.py:38:13     - Unknown word (Ruble)       -- BYN Belarus Ruble
web_programming/currency_converter.py:38:5      - Unknown word (Belarus)     -- BYN Belarus Ruble
web_programming/currency_converter.py:39:5      - Unknown word (Belize)      -- BZD Belize Dollar
web_programming/currency_converter.py:41:5      - Unknown word (Congolese)   -- CDF Congolese Franc
web_programming/currency_converter.py:43:5      - Unknown word (Chilean)     -- CLP Chilean Peso
web_programming/currency_converter.py:44:13     - Unknown word (Yuan)        -- CNY Chinese Yuan
web_programming/currency_converter.py:45:5      - Unknown word (Colombian)   -- COP Colombian Peso
web_programming/currency_converter.py:46:11     - Unknown word (Rican)       -- CRC Costa Rican Colon
web_programming/currency_converter.py:46:5      - Unknown word (Costa)       -- CRC Costa Rican Colon
web_programming/currency_converter.py:47:5      - Unknown word (Cuban)       -- CUC Cuban Convertible Peso
web_programming/currency_converter.py:48:10     - Unknown word (Verdean)     -- CVE Cape Verdean Escudo
web_programming/currency_converter.py:48:18     - Unknown word (Escudo)      -- CVE Cape Verdean Escudo
web_programming/currency_converter.py:49:20     - Unknown word (Koruna)      -- CZK Czech Republic Koruna
web_programming/currency_converter.py:49:5      - Unknown word (Czech)       -- CZK Czech Republic Koruna
web_programming/currency_converter.py:50:5      - Unknown word (Djiboutian)  -- DJF Djiboutian Franc
web_programming/currency_converter.py:51:12     - Unknown word (Krone)       -- DKK Danish Krone
web_programming/currency_converter.py:51:5      - Unknown word (Danish)      -- DKK Danish Krone
web_programming/currency_converter.py:53:5      - Unknown word (Algerian)    -- DZD Algerian Dinar
web_programming/currency_converter.py:54:14     - Unknown word (Pound)       -- EGP Egyptian Pound
web_programming/currency_converter.py:54:5      - Unknown word (Egyptian)    -- EGP Egyptian Pound
web_programming/currency_converter.py:55:14     - Unknown word (Nakfa)       -- ERN Eritrean Nakfa
web_programming/currency_converter.py:55:5      - Unknown word (Eritrean)    -- ERN Eritrean Nakfa
web_programming/currency_converter.py:56:15     - Unknown word (Birr)        -- ETB Ethiopian Birr
web_programming/currency_converter.py:56:5      - Unknown word (Ethiopian)   -- ETB Ethiopian Birr
web_programming/currency_converter.py:57:5      - Unknown word (Euro)        -- EUR Euro
web_programming/currency_converter.py:58:5      - Unknown word (Fiji)        -- FJD Fiji Dollar
web_programming/currency_converter.py:59:19     - Unknown word (Sterling)    -- GBP British Pound Sterling
web_programming/currency_converter.py:60:14     - Unknown word (Lari)        -- GEL Georgian Lari
web_programming/currency_converter.py:60:5      - Unknown word (Georgian)    -- GEL Georgian Lari
web_programming/currency_converter.py:61:14     - Unknown word (Cedi)        -- GHS Ghanaian Cedi
web_programming/currency_converter.py:61:5      - Unknown word (Ghanaian)    -- GHS Ghanaian Cedi
web_programming/currency_converter.py:62:5      - Unknown word (Gibraltar)   -- GIP Gibraltar Pound
web_programming/currency_converter.py:63:13     - Unknown word (Dalasi)      -- GMD Gambian Dalasi
web_programming/currency_converter.py:63:5      - Unknown word (Gambian)     -- GMD Gambian Dalasi
web_programming/currency_converter.py:64:5      - Unknown word (Guinea)      -- GNF Guinea Franc
web_programming/currency_converter.py:65:16     - Unknown word (Quetzal)     -- GTQ Guatemalan Quetzal
web_programming/currency_converter.py:65:5      - Unknown word (Guatemalan)  -- GTQ Guatemalan Quetzal
web_programming/currency_converter.py:66:5      - Unknown word (Guyanaese)   -- GYD Guyanaese Dollar
web_programming/currency_converter.py:68:14     - Unknown word (Lempira)     -- HNL Honduran Lempira
web_programming/currency_converter.py:68:5      - Unknown word (Honduran)    -- HNL Honduran Lempira
web_programming/currency_converter.py:69:14     - Unknown word (Kuna)        -- HRK Croatian Kuna
web_programming/currency_converter.py:69:5      - Unknown word (Croatian)    -- HRK Croatian Kuna
web_programming/currency_converter.py:70:11     - Unknown word (Gourde)      -- HTG Haiti Gourde
web_programming/currency_converter.py:70:5      - Unknown word (Haiti)       -- HTG Haiti Gourde
web_programming/currency_converter.py:72:16     - Unknown word (Rupiah)      -- IDR Indonesian Rupiah
web_programming/currency_converter.py:72:5      - Unknown word (Indonesian)  -- IDR Indonesian Rupiah
web_programming/currency_converter.py:73:13     - Unknown word (Shekel)      -- ILS Israeli Shekel
web_programming/currency_converter.py:73:5      - Unknown word (Israeli)     -- ILS Israeli Shekel
web_programming/currency_converter.py:74:12     - Unknown word (Rupee)       -- INR Indian Rupee
web_programming/currency_converter.py:75:5      - Unknown word (Iraqi)       -- IQD Iraqi Dinar
web_programming/currency_converter.py:76:13     - Unknown word (Rial)        -- IRR Iranian Rial
web_programming/currency_converter.py:76:5      - Unknown word (Iranian)     -- IRR Iranian Rial
web_programming/currency_converter.py:77:15     - Unknown word (Krona)       -- ISK Icelandic Krona
web_programming/currency_converter.py:77:5      - Unknown word (Icelandic)   -- ISK Icelandic Krona
web_programming/currency_converter.py:78:5      - Unknown word (Jamaican)    -- JMD Jamaican Dollar
web_programming/currency_converter.py:79:5      - Unknown word (Jordanian)   -- JOD Jordanian Dinar
web_programming/currency_converter.py:80:5      - Unknown word (Japanese)    -- JPY Japanese Yen
web_programming/currency_converter.py:81:12     - Unknown word (Shilling)    -- KES Kenyan Shilling
web_programming/currency_converter.py:81:5      - Unknown word (Kenyan)      -- KES Kenyan Shilling
web_programming/currency_converter.py:82:5      - Unknown word (Kyrgystani)  -- KGS Kyrgystani Som
web_programming/currency_converter.py:83:15     - Unknown word (Riel)        -- KHR Cambodian Riel
web_programming/currency_converter.py:83:5      - Unknown word (Cambodian)   -- KHR Cambodian Riel
web_programming/currency_converter.py:84:5      - Unknown word (Comorian)    -- KMF Comorian Franc
web_programming/currency_converter.py:85:11     - Unknown word (Korean)      -- KPW North Korean Won
web_programming/currency_converter.py:87:5      - Unknown word (Kuwaiti)     -- KWD Kuwaiti Dinar
web_programming/currency_converter.py:88:5      - Unknown word (Cayman)      -- KYD Cayman Islands Dollar
web_programming/currency_converter.py:89:16     - Unknown word (Tenge)       -- KZT Kazakhstan Tenge
web_programming/currency_converter.py:89:5      - Unknown word (Kazakhstan)  -- KZT Kazakhstan Tenge
web_programming/currency_converter.py:90:5      - Unknown word (Laotian)     -- LAK Laotian Kip
web_programming/currency_converter.py:91:5      - Unknown word (Lebanese)    -- LBP Lebanese Pound
web_programming/currency_converter.py:92:9      - Unknown word (Lankan)      -- LKR Sri Lankan Rupee
web_programming/currency_converter.py:93:5      - Unknown word (Liberian)    -- LRD Liberian Dollar
web_programming/currency_converter.py:94:13     - Unknown word (Loti)        -- LSL Lesotho Loti
web_programming/currency_converter.py:94:5      - Unknown word (Lesotho)     -- LSL Lesotho Loti
web_programming/currency_converter.py:95:5      - Unknown word (Libyan)      -- LYD Libyan Dinar
web_programming/currency_converter.py:96:5      - Unknown word (Moroccan)    -- MAD Moroccan Dirham
web_programming/currency_converter.py:97:5      - Unknown word (Moldovan)    -- MDL Moldovan Leu
web_programming/currency_converter.py:98:14     - Unknown word (Ariary)      -- MGA Malagasy Ariary
web_programming/currency_converter.py:98:5      - Unknown word (Malagasy)    -- MGA Malagasy Ariary
web_programming/currency_converter.py:99:16     - Unknown word (Denar)       -- MKD Macedonian Denar
web_programming/currency_converter.py:99:5      - Unknown word (Macedonian)  -- MKD Macedonian Denar
web_programming/current_stock_price.py:28:21     - Unknown word (streamer)   -- if specific_fin_streamer_tag := soup.find("span
web_programming/current_weather.py:12:13     - Unknown word (weather)        -- def current_weather(location: str) -> list
web_programming/current_weather.py:21:16     - Unknown word (openweathermap) -- params_openweathermap = {"q": location, "appid
web_programming/current_weather.py:27:16     - Unknown word (weatherstack)   -- params_weatherstack = {"query": location
web_programming/current_weather.py:31:31     - Unknown word (Weatherstack)   -- weather_data.append({"Weatherstack": response_weatherstack
web_programming/current_weather.py:4:1       - Unknown word (OPENWEATHERMAP) -- OPENWEATHERMAP_API_KEY = ""
web_programming/current_weather.py:5:1       - Unknown word (WEATHERSTACK)   -- WEATHERSTACK_API_KEY = ""
web_programming/current_weather.py:7:36      - Unknown word (placeholders)   -- URL for the APIs with placeholders
web_programming/daily_horoscope.py:17:21     - Unknown word (Zodiac)     -- "enter your Zodiac sign number:\n",
web_programming/daily_horoscope.py:18:13     - Unknown word (Aries)      -- "1. Aries\n",
web_programming/daily_horoscope.py:19:13     - Unknown word (Taurus)     -- "2. Taurus\n",
web_programming/daily_horoscope.py:20:13     - Unknown word (Gemini)     -- "3. Gemini\n",
web_programming/daily_horoscope.py:21:13     - Unknown word (Cancer)     -- "4. Cancer\n",
web_programming/daily_horoscope.py:23:13     - Unknown word (Virgo)      -- "6. Virgo\n",
web_programming/daily_horoscope.py:24:13     - Unknown word (Libra)      -- "7. Libra\n",
web_programming/daily_horoscope.py:25:13     - Unknown word (Scorpio)    -- "8. Scorpio\n",
web_programming/daily_horoscope.py:26:13     - Unknown word (Sagittarius) -- "9. Sagittarius\n",
web_programming/daily_horoscope.py:27:14     - Unknown word (Capricorn)   -- "10. Capricorn\n",
web_programming/daily_horoscope.py:28:14     - Unknown word (Aquarius)    -- "11. Aquarius\n",
web_programming/daily_horoscope.py:29:14     - Unknown word (Pisces)      -- "12. Pisces\n",
web_programming/daily_horoscope.py:32:34     - Unknown word (yesterday)   -- choose some day:\n", "yesterday\n", "today\n", "tomorrow
web_programming/daily_horoscope.py:32:60     - Unknown word (tomorrow)    -- yesterday\n", "today\n", "tomorrow\n")
web_programming/daily_horoscope.py:5:15      - Unknown word (zodiac)     -- def horoscope(zodiac_sign: int, day: str
web_programming/daily_horoscope.py:5:5       - Unknown word (horoscope)  -- def horoscope(zodiac_sign: int, day
web_programming/daily_horoscope.py:8:41      - Unknown word (aspx)       -- general-daily-{day}.aspx?sign={zodiac_sign}"
web_programming/download_images_from_google_query.py:12:20     - Unknown word (Gecko)      -- " (KHTML, like Gecko) Chrome/70.0.3538.1
web_programming/download_images_from_google_query.py:12:48     - Unknown word (Safari)     -- Chrome/70.0.3538.102 Safari/537.36 Edge/18.1958
web_programming/download_images_from_google_query.py:12:8      - Unknown word (KHTML)      -- " (KHTML, like Gecko) Chrome
web_programming/download_images_from_google_query.py:16:53     - Unknown word (dhaka)      -- query(query: str = "dhaka", max_images: int =
web_programming/download_images_from_google_query.py:31:46     - Unknown word (potato)     -- images_from_google_query("potato")
web_programming/download_images_from_google_query.py:34:49     - Unknown word (abuse)      -- images, 50)  # Prevent abuse!
web_programming/download_images_from_google_query.py:37:17     - Unknown word (isch)       -- "tbm": "isch",
web_programming/download_images_from_google_query.py:60:35     - Unknown word (thumbnails) -- matched_google_images_thumbnails = re.sub(
web_programming/download_images_from_google_query.py:61:43     - Unknown word (gstatic)    -- \/\/encrypted-tbn0\.gstatic\.com\/images\?.*?)\
web_programming/emails_from_url.py:5:15      - Unknown word (Muhammad)   -- __author__ = "Muhammad Umer Farooq"
web_programming/emails_from_url.py:5:24      - Unknown word (Umer)       -- author__ = "Muhammad Umer Farooq"
web_programming/emails_from_url.py:5:29      - Unknown word (Farooq)     -- author__ = "Muhammad Umer Farooq"
web_programming/fetch_anime_and_play.py:12:32     - Unknown word (scraping)   -- list of anime after scraping the site.
web_programming/fetch_anime_and_play.py:143:39    - Unknown word (playerframe) -- find("iframe", {"id": "playerframe"})
web_programming/fetch_anime_and_play.py:14:30     - Unknown word (demon)      -- type(search_scraper("demon_slayer"))
web_programming/fetch_anime_and_play.py:14:36     - Unknown word (slayer)     -- search_scraper("demon_slayer"))
web_programming/fetch_anime_and_play.py:182:64    - Unknown word (serial)      -- nChoose an episode by serial no: ").strip())
web_programming/fetch_anime_and_play.py:24:26     - Unknown word (animes)     -- [list]: [List of animes]
web_programming/fetch_anime_and_play.py:2:32      - Unknown word (Navigable)  -- import BeautifulSoup, NavigableString, Tag
web_programming/fetch_anime_and_play.py:63:18     - Unknown word (episode)    -- def search_anime_episode_list(episode_endpoint
web_programming/fetch_anime_and_play.py:67:20     - Unknown word (episodes)   -- return list of episodes after scraping the site
web_programming/fetch_anime_and_play.py:70:48     - Unknown word (kimetsu)    -- episode_list("/anime/kimetsu-no-yaiba"))
web_programming/fetch_anime_and_play.py:70:59     - Unknown word (yaiba)      -- list("/anime/kimetsu-no-yaiba"))
web_programming/fetch_anime_and_play.py:8:12      - Unknown word (scraper)    -- def search_scraper(anime_name: str) ->
web_programming/fetch_anime_and_play.py:8:20      - Unknown word (anime)      -- def search_scraper(anime_name: str) -> list:
web_programming/fetch_anime_and_play.py:95:42     - Unknown word (eposiodes)  -- Could not find any anime eposiodes with name {anime_name
web_programming/fetch_bbc_news.py:9:26      - Unknown word (articles)   -- fetching a list of articles in json format
web_programming/fetch_github_info.py:4:12      - Unknown word (lawric)     -- Updated by lawric1 on 24/11/20
web_programming/fetch_jobs.py:15:33     - Unknown word (mumbai)     -- jobs(location: str = "mumbai") -> Generator[tuple
web_programming/fetch_jobs.py:19:40     - Unknown word (specifics)  -- attribute finds out all the specifics listed in a job
web_programming/fetch_jobs.py:20:66     - Unknown word (organic)    -- data-tn-component": "organicJob"}):
web_programming/fetch_jobs.py:2:1       - Unknown word (Scraping)   -- Scraping jobs given job title
web_programming/fetch_quotes.py:3:49      - Unknown word (tier)       -- key as it uses free tier.
web_programming/fetch_quotes.py:5:22      - Unknown word (premium)    -- For more details and premium features visit:
web_programming/fetch_well_rx_price.py:21:27     - Unknown word (scrape)       -- Get the page data and scrape it to the generate the
web_programming/fetch_well_rx_price.py:25:27     - Unknown word (Drug)         -- drug_name (str): [Drug name]
web_programming/fetch_well_rx_price.py:35:40     - Unknown word (eliquis)      -- pharmacy_and_price_list("eliquis", None)
web_programming/fetch_well_rx_price.py:3:1       - Unknown word (Scrape)     -- Scrape the price and pharmacy
web_programming/fetch_well_rx_price.py:3:22      - Unknown word (pharmacy)   -- Scrape the price and pharmacy name for a prescription
web_programming/fetch_well_rx_price.py:3:42      - Unknown word (prescription) -- pharmacy name for a prescription drug from rx site
web_programming/fetch_well_rx_price.py:3:55      - Unknown word (drug)         -- name for a prescription drug from rx site
web_programming/fetch_well_rx_price.py:57:60     - Unknown word (pharm)        -- , {"class": "grid-x pharmCard"})
web_programming/fetch_well_rx_price.py:94:21     - Unknown word (Pharmacy)     -- print(f"Pharmacy: {name} Price: {price
web_programming/get_amazon_product_data.py:102:16    - Unknown word (headphones) -- product = "headphones"
web_programming/get_amazon_product_data.py:14:45     - Unknown word (laptop)     -- data(product: str = "laptop") -> DataFrame:
web_programming/get_amazon_product_data.py:4:45      - Unknown word (ratings)    -- include title, URL, price, ratings, and the discount available
web_programming/get_amazon_product_data.py:54:25     - Unknown word (rating)     -- product_rating = item.find("span",
web_programming/get_imdb_top_250_movies_csv.py:24:27     - Unknown word (Movie)      -- writer.writerow(["Movie title", "IMDb rating
web_programming/get_imdb_top_250_movies_csv.py:9:22      - Unknown word (movies)     -- def get_imdb_top_250_movies(url: str = "") -> dict
web_programming/get_imdb_top_250_movies_csv.py:9:9       - Unknown word (imdb)       -- def get_imdb_top_250_movies(url:
web_programming/get_top_billionaires.py:17:25     - Unknown word (gender)     -- "?fields=personName,gender,source,countryOfCitizenship
web_programming/get_top_billionaires.py:17:48     - Unknown word (Citizenship) -- gender,source,countryOfCitizenship,birthDate,finalWorth
web_programming/get_top_billionaires.py:17:75     - Unknown word (Worth)       -- yOfCitizenship,birthDate,finalWorth"
web_programming/get_top_billionaires.py:22:15     - Unknown word (birth)       -- def years_old(birth_timestamp: int, today
web_programming/get_top_billionaires.py:53:26     - Unknown word (billionaires) -- get_forbes_real_time_billionaires() -> list[dict[str,
web_programming/get_top_billionaires.py:53:9      - Unknown word (forbes)      -- def get_forbes_real_time_billionaires
web_programming/get_top_billionaires.py:55:49     - Unknown word (Forbes)       -- time billionaires using Forbes API.
web_programming/get_top_billionaires.py:66:14     - Unknown word (Gender)       -- "Gender": person["gender"],
web_programming/get_top_billionaires.py:67:62     - Unknown word (Billion)      -- finalWorth'] / 1000:.1f} Billion",
web_programming/get_top_billionaires.py:91:9      - Unknown word (billionaire)  -- for billionaire in forbes_billionaires
web_programming/get_top_hn_posts.py:11:20     - Unknown word (stories)    -- def hackernews_top_stories(max_stories: int =
web_programming/get_top_hn_posts.py:13:29     - Unknown word (posts)      -- the top max_stories posts from HackerNews - https
web_programming/get_top_hn_posts.py:13:40     - Unknown word (Hacker)     -- max_stories posts from HackerNews - https://news.ycombinato
web_programming/get_top_hn_posts.py:6:20      - Unknown word (story)      -- def get_hackernews_story(story_id: str) -> dict
web_programming/get_top_hn_posts.py:6:9       - Unknown word (hackernews) -- def get_hackernews_story(story_id: str
web_programming/giphy.py:19:37     - Unknown word (ship)       -- join(get_gifs("space ship")))
web_programming/giphy.py:4:1       - Unknown word (giphy)      -- giphy_api_key = "YOUR API
web_programming/giphy.py:8:9       - Unknown word (gifs)       -- def get_gifs(query: str, api_key
web_programming/instagram_crawler.py:26:21     - Unknown word (failing)    -- Usage: (doctest failing on GitHub Actions)
web_programming/instagram_crawler.py:30:26     - Unknown word (biography)  -- >>> instagram_user.biography
web_programming/instagram_crawler.py:31:16     - Unknown word (developers) -- 'Built for developers.'
web_programming/instagram_crawler.py:76:19     - Unknown word (followers)  -- def number_of_followers(self) -> int:
web_programming/instagram_crawler.py:80:19     - Unknown word (followings) -- def number_of_followings(self) -> int:
web_programming/instagram_video.py:13:30     - Unknown word (IGTV)       -- input("Enter Video/IGTV url: ").strip()
web_programming/instagram_video.py:6:14      - Unknown word (video)      -- def download_video(url: str) -> bytes:
web_programming/nasa_data.py:29:45     - Unknown word (NASA)       -- particular query from NASA archives
web_programming/nasa_data.py:37:5      - Unknown word (apollo)     -- apollo_2011_items = get_archive
web_programming/nasa_data.py:6:9       - Unknown word (apod)       -- def get_apod_data(api_key: str)
web_programming/nasa_data.py:8:13      - Unknown word (APOD)       -- Get the APOD(Astronomical Picture
web_programming/nasa_data.py:8:31      - Unknown word (Picture)    -- the APOD(Astronomical Picture of the day) data
web_programming/recaptcha_verification.py:2:37      - Unknown word (offered)    -- free captcha service offered by Google in order to
web_programming/recaptcha_verification.py:2:74      - Unknown word (websites)   -- Google in order to secure websites and
web_programming/recaptcha_verification.py:31:73     - Unknown word (demonstrating) -- contains a login form for demonstrating
web_programming/reddit.py:12:16     - Unknown word (pwls)       -- name permalink pwls quarantine saved score
web_programming/reddit.py:12:21     - Unknown word (quarantine) -- name permalink pwls quarantine saved score secure_media
web_programming/reddit.py:13:26     - Unknown word (prefixed)   -- subreddit subreddit_name_prefixed subreddit_type thumbnail
web_programming/reddit.py:13:50     - Unknown word (thumbnail)  -- prefixed subreddit_type thumbnail title top_awarded_type
web_programming/reddit.py:14:7      - Unknown word (awards)     -- total_awards_received ups upvote
web_programming/reddit.py:6:43      - Unknown word (flair)      -- utc approved_by author_flair_background_color
web_programming/reddit.py:6:8       - Unknown word (approved)   -- """approved_at_utc approved_by author
web_programming/reddit.py:8:38      - Unknown word (clicked)    -- can_mod_post category clicked content_categories created
web_programming/reddit.py:8:77      - Unknown word (downs)      -- categories created_utc downs
web_programming/reddit.py:9:15      - Unknown word (gildings)   -- edited gilded gildings hidden hide_score is
web_programming/reddit.py:9:8       - Unknown word (gilded)     -- edited gilded gildings hidden hide
web_programming/search_books_by_isbn.py:12:26     - Unknown word (olid)       -- get_openlibrary_data(olid: str = "isbn/014032
web_programming/search_books_by_isbn.py:12:39     - Unknown word (isbn)       -- openlibrary_data(olid: str = "isbn/0140328726") -> dict
web_programming/search_books_by_isbn.py:15:16     - Unknown word (authors)    -- Given an '/authors/OL34184A', return authors
web_programming/search_books_by_isbn.py:16:29     - Unknown word (olids)      -- This code must work for olids with or without a leading
web_programming/search_books_by_isbn.py:20:22     - Unknown word (Puffin)     -- {'publishers': ['Puffin'], 'number_of_pages
web_programming/search_books_by_isbn.py:20:7      - Unknown word (publishers) -- {'publishers': ['Puffin'], 'number
web_programming/search_books_by_isbn.py:22:15     - Unknown word (Adrian)     -- {'name': 'Adrian Brisku', 'created':
web_programming/search_books_by_isbn.py:22:22     - Unknown word (Brisku)     -- {'name': 'Adrian Brisku', 'created': {'type
web_programming/search_books_by_isbn.py:24:80     - Unknown word (slashes)    -- trailing whitespace & slashes
web_programming/search_books_by_isbn.py:7:37      - Unknown word (Workaround) -- import JSONDecodeError  # Workaround for requests.exceptions
web_programming/world_covid19_stats.py:5:20      - Unknown word (scrapped)   -- This data is being scrapped from 'https://www.worldometer
