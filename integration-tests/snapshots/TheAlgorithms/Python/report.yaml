---
Repository: TheAlgorithms/Python
Url: https://github.com/TheAlgorithms/Python.git
Args: '["**/*.{md,py}"]'
Summary:
  files: 1369
  filesWithIssues: 1140
  issues: 38255
  errors: 4
Errors:
  - Dictionary Error with (en_us)
  - Dictionary Error with (filetypes)
  - Dictionary Error with (public-licenses)
  - Dictionary Error with (html-symbol-entities)

issues:
  - "audio_filters/butterworth_filter.py:6:35        Butterworth         U       order IIR filters with Butterworth design."
  - "audio_filters/butterworth_filter.py:9:1         Alternatively       U       Alternatively you can use scipy.signal"
  - "audio_filters/butterworth_filter.py:9:40        butter              U       can use scipy.signal.butter, which should yield"
  - "audio_filters/butterworth_filter.py:14:5        frequency           U       frequency: int,"
  - "audio_filters/butterworth_filter.py:19:5        Creates             U       Creates a low-pass filter"
  - "audio_filters/butterworth_filter.py:22:18       coeffs              U       >>> filter.a_coeffs + filter.b_coeffs"
  - "audio_filters/butterworth_filter.py:38:5        filt                U       filt = IIRFilter(2)"
  - "audio_filters/butterworth_filter.py:39:14       coefficients        U       filt.set_coefficients([a0, a1, a2], [b0, b"
  - "audio_filters/butterworth_filter.py:73:10       bandpass            U       def make_bandpass("
  - "audio_filters/butterworth_filter.py:134:5       gain                U       gain_db: float,"
  - "audio_filters/butterworth_filter.py:183:5       ppmc                U       ppmc = (big_a + 1) + (big"
  - "audio_filters/butterworth_filter.py:185:5       pmpc                U       pmpc = (big_a - 1) + (big"
  - "audio_filters/iir_filter.py:7:5         Assumes         U       Assumes working with float samples"
  - "audio_filters/iir_filter.py:16:15       following       U       Using the following transfer function"
  - "audio_filters/iir_filter.py:42:9        These           U       These should both be of size"
  - "audio_filters/iir_filter.py:47:39       butterworth     U       Make a 2nd-order 1000Hz butterworth lowpass filter"
  - "audio_filters/iir_filter.py:50:54       btype           U       btype='lowpass',"
  - "audio_filters/iir_filter.py:77:9        Calculate       U       Calculate :math:`y[n]`"
  - "audio_filters/README.md:3:59        attenuate           U       of an audio signal to attenuate unwanted frequency and"
  - "audio_filters/README.md:3:69        unwanted            U       signal to attenuate unwanted frequency and amplify"
  - "audio_filters/README.md:3:100       wanted              U       frequency and amplify wanted ones."
  - "audio_filters/README.md:3:107       ones                U       frequency and amplify wanted ones."
  - "audio_filters/README.md:4:1         They                U       They are used within anything"
  - "audio_filters/README.md:4:15        within              U       They are used within anything related to"
  - "audio_filters/README.md:4:22        anything            U       They are used within anything related to sound, whether"
  - "audio_filters/README.md:4:42        sound               U       anything related to sound, whether it is radio"
  - "audio_filters/README.md:4:49        whether             U       anything related to sound, whether it is radio communication"
  - "audio_filters/README.md:4:69        communication       U       whether it is radio communication or a hi-fi system."
  - "audio_filters/show_response.py:22:9         bounds          U       def get_bounds("
  - "audio_filters/show_response.py:23:21        ndarray         U       fft_results: np.ndarray, samplerate: int"
  - "audio_filters/show_response.py:26:20        printing        U       Get bounds for printing fft results"
  - "audio_filters/show_response.py:33:5         lowest          U       lowest = min([-20, np.min(fft"
  - "audio_filters/show_response.py:51:5         filler          U       filler = [0] * (samplerate"
  - "audio_filters/show_response.py:56:7         Frequencies     U       # Frequencies on log scale from 2"
  - "audio_filters/show_response.py:56:43        nyquist         U       log scale from 24 to nyquist frequency"
  - "audio_filters/show_response.py:57:9         xlim            U       plt.xlim(24, samplerate / 2"
  - "audio_filters/show_response.py:58:9         xlabel          U       plt.xlabel(\"Frequency (Hz)\")"
  - "audio_filters/show_response.py:58:17        Frequency       U       plt.xlabel(\"Frequency (Hz)\")"
  - "audio_filters/show_response.py:59:9         xscale          U       plt.xscale(\"log\")"
  - "audio_filters/show_response.py:61:22        reasonable      U       # Display within reasonable bounds"
  - "audio_filters/show_response.py:63:9         ylim            U       plt.ylim(max([-80, bounds[0]"
  - "audio_filters/show_response.py:64:9         ylabel          U       plt.ylabel(\"Gain (dB)\")"
  - "audio_filters/show_response.py:64:17        Gain            U       plt.ylabel(\"Gain (dB)\")"
  - "audio_filters/show_response.py:85:18        angle           U       fft_out = np.angle(np.fft.fft(outputs)"
  - "backtracking/all_combinations.py:2:21           want            U       In this problem, we want to determine all possible"
  - "backtracking/all_combinations.py:2:43           possible        U       want to determine all possible combinations of k"
  - "backtracking/all_combinations.py:3:32           backtracking    U       out of 1 ... n. We use backtracking to solve this problem"
  - "backtracking/all_combinations.py:3:48           solve           U       use backtracking to solve this problem."
  - "backtracking/all_combinations.py:5:6            complexity      U       Time complexity: O(C(n,k)) which is"
  - "backtracking/all_combinations.py:5:41           choose          U       C(n,k)) which is O(n choose k) = O((n!/(k! * (n"
  - "backtracking/all_combinations.py:13:5           combination     U       def combination_lists(n: int, k: int"
  - "backtracking/all_combinations.py:15:5           Generates       U       Generates all possible combinations"
  - "backtracking/all_combinations.py:34:19          must            U       ValueError: k must not be negative"
  - "backtracking/all_combinations.py:72:24          recursively     U       Helper function to recursively build all combinations"
  - "backtracking/all_combinations.py:112:12         Benchmark       U       print(\"Benchmark:\")"
  - "backtracking/all_permutations.py:3:8            given           U       of the given sequence. We use backtracking"
  - "backtracking/all_permutations.py:6:9            denotes         U       where n denotes the length of the given"
  - "backtracking/all_permutations.py:24:8           know            U       We know that each state has"
  - "backtracking/all_permutations.py:24:13          that            U       We know that each state has exactly"
  - "backtracking/all_permutations.py:24:33          exactly         U       that each state has exactly len(sequence) - index"
  - "backtracking/all_permutations.py:25:8           terminates      U       It terminates when it reaches the"
  - "backtracking/all_permutations.py:25:27          reaches         U       It terminates when it reaches the end of the given"
  - "backtracking/all_permutations.py:27:68          generated       U       which permutations are generated."
  - "backtracking/all_permutations.py:28:42          permutation     U       sequence: The current permutation being built."
  - "backtracking/all_permutations.py:28:54          being           U       current permutation being built."
  - "backtracking/all_permutations.py:30:32          track           U       index_used: list to track which elements are used"
  - "backtracking/coloring.py:2:7            Coloring        U       Graph Coloring also called \"m coloring"
  - "backtracking/coloring.py:2:31           coloring        U       Coloring also called \"m coloring problem\""
  - "backtracking/coloring.py:3:1            consists        U       consists of coloring a given"
  - "backtracking/coloring.py:4:23           vertices        U       such that no adjacent vertices are assigned the same"
  - "backtracking/coloring.py:11:5           neighbours      U       neighbours: list[int], colored"
  - "backtracking/coloring.py:11:28          colored         U       neighbours: list[int], colored_vertices: list[int]"
  - "backtracking/coloring.py:14:14          neighbour       U       For each neighbour check if the coloring"
  - "backtracking/coloring.py:29:30          satisfy         U       Does any neighbour not satisfy the constraints"
  - "backtracking/coloring.py:44:38          meaning         U       complete return True (meaning that we successfully"
  - "backtracking/coloring.py:44:54          successfully    U       True (meaning that we successfully colored the graph)"
  - "backtracking/coloring.py:50:60          leads           U       check if this coloring leads to a solution"
  - "backtracking/coloring.py:52:18          Uncolor         U       2.5. Uncolor given vertex"
  - "backtracking/coloring.py:90:30          subroutine      U       Wrapper function to call subroutine called util_color"
  - "backtracking/coloring.py:91:16          either          U       which will either return True or False"
  - "backtracking/coloring.py:92:50          filled          U       colored_vertices list is filled with correct colorings"
  - "backtracking/coloring.py:92:62          correct         U       list is filled with correct colorings"
  - "backtracking/coloring.py:92:70          colorings       U       filled with correct colorings"
  - "backtracking/combination_sum.py:2:8         Combination     U       In the Combination Sum problem, we are"
  - "backtracking/combination_sum.py:2:53        consisting      U       we are given a list consisting of distinct integers"
  - "backtracking/combination_sum.py:3:38        whose           U       all the combinations whose sum equals to target"
  - "backtracking/combination_sum.py:4:28        than            U       use an element more than one."
  - "backtracking/combination_sum.py:6:17        Average         U       Time complexity(Average Case): O(n!)"
  - "backtracking/combination_sum.py:9:6         candidates      U       1 <= candidates.length <= 30"
  - "backtracking/combination_sum.py:20:31       searches        U       recursive function that searches for possible combinations"
  - "backtracking/combination_sum.py:21:10       bigger          U       of a bigger current combination"
  - "backtracking/combination_sum.py:26:34       obtain          U       The value we need to obtain by summing our integers"
  - "backtracking/combination_sum.py:26:44       summing         U       we need to obtain by summing our integers in the"
  - "backtracking/combination_sum.py:50:45       exceeded        U       maximum recursion depth exceeded"
  - "backtracking/crossword_puzzle_solver.py:5:5         puzzle          U       puzzle: list[list[str]], word"
  - "backtracking/crossword_puzzle_solver.py:8:28        placed          U       Check if a word can be placed at the given position"
  - "backtracking/crossword_puzzle_solver.py:82:11       crossword       U       def solve_crossword(puzzle: list[list[str"
  - "backtracking/crossword_puzzle_solver.py:84:5        Solve           U       Solve the crossword puzzle"
  - "backtracking/crossword_puzzle_solver.py:93:27       four            U       > words = ['word', 'four', 'more', 'last']"
  - "backtracking/crossword_puzzle_solver.py:102:43      paragraphs      U       word', 'four', 'more', 'paragraphs']"
  - "backtracking/crossword_puzzle_solver.py:123:5       PUZZLE          U       PUZZLE = [[\"\"] * 3 for _ in"
  - "backtracking/generate_parentheses.py:2:9            Aayush          U       author: Aayush Soni"
  - "backtracking/generate_parentheses.py:2:16           Soni            U       author: Aayush Soni"
  - "backtracking/generate_parentheses.py:3:1            Given           U       Given n pairs of parentheses"
  - "backtracking/generate_parentheses.py:3:18           parentheses     U       Given n pairs of parentheses, write a function to"
  - "backtracking/generate_parentheses.py:4:22           formed          U       combinations of well-formed parentheses."
  - "backtracking/generate_parentheses.py:7:1            Leetcode        U       Leetcode link: https://leetcode"
  - "backtracking/generate_parentheses.py:15:36          balanced        U       valid combinations of balanced parentheses using recursion"
  - "backtracking/generate_parentheses.py:17:30          representing    U       param partial: A string representing the current combination"
  - "backtracking/generate_parentheses.py:24:37          explore         U       function uses recursion to explore all possible combinations"
  - "backtracking/generate_parentheses.py:25:5           ensuring        U       ensuring that at each step, the"
  - "backtracking/generate_parentheses.py:25:49          remain          U       step, the parentheses remain balanced."
  - "backtracking/generate_parentheses.py:39:33          parenthesis     U       If we can add an open parenthesis, do so, and recurse"
  - "backtracking/generate_parentheses.py:55:36          approach        U       function uses a recursive approach to generate the combinations"
  - "backtracking/generate_parentheses.py:57:10          Complexity      U       Time Complexity: O(2^(2n)) - In the"
  - "backtracking/generate_parentheses.py:57:41          worst           U       O(2^(2n)) - In the worst case, we have 2^(2n"
  - "backtracking/hamiltonian_cycle.py:2:3           Hamiltonian     U       A Hamiltonian cycle (Hamiltonian circuit"
  - "backtracking/hamiltonian_cycle.py:3:22          visits          U       through a graph that visits each node exactly once"
  - "backtracking/hamiltonian_cycle.py:4:1           Determining     U       Determining whether such paths and"
  - "backtracking/hamiltonian_cycle.py:4:52          graphs          U       and cycles exist in graphs"
  - "backtracking/hamiltonian_cycle.py:15:60         validating      U       add next into path by validating 2 statements"
  - "backtracking/hamiltonian_cycle.py:15:73         statements      U       path by validating 2 statements"
  - "backtracking/hamiltonian_cycle.py:16:8          There           U       1. There should be path between"
  - "backtracking/hamiltonian_cycle.py:16:29         between         U       There should be path between current and next vertex"
  - "backtracking/hamiltonian_cycle.py:18:13         validations     U       If both validations succeed we return True"
  - "backtracking/hamiltonian_cycle.py:18:25         succeed         U       If both validations succeed we return True, saying"
  - "backtracking/hamiltonian_cycle.py:18:49         saying          U       succeed we return True, saying that it is possible"
  - "backtracking/hamiltonian_cycle.py:19:20         otherwise       U       this vertices, otherwise we return False"
  - "backtracking/hamiltonian_cycle.py:33:29         trying          U       Case 2: Same graph, but trying to connect to node that"
  - "backtracking/hamiltonian_cycle.py:53:20         visited         U       1. Check if we visited all of vertices"
  - "backtracking/hamiltonian_cycle.py:54:48         starting        U       visited vertex has path to starting vertex return True either"
  - "backtracking/hamiltonian_cycle.py:58:43         transiting      U       vertex is valid for transiting from current vertex"
  - "backtracking/hamiltonian_cycle.py:59:17         Remember        U       2.1 Remember next vertex as next"
  - "backtracking/hamiltonian_cycle.py:60:48         going           U       recursive call and check if going to this vertex solves"
  - "backtracking/hamiltonian_cycle.py:60:69         solves          U       going to this vertex solves problem"
  - "backtracking/hamiltonian_cycle.py:62:40         remembered      U       Else backtrack, delete remembered vertex"
  - "backtracking/hamiltonian_cycle.py:78:19         calculation     U       middle of calculation"
  - "backtracking/hamiltonian_cycle.py:113:48        indicating      U       return array of vertices indicating hamiltonian cycle"
  - "backtracking/hamiltonian_cycle.py:113:59        hamiltonian     U       vertices indicating hamiltonian cycle"
  - "backtracking/hamiltonian_cycle.py:116:5         Following       U       Following graph consists of 5"
  - "backtracking/hamiltonian_cycle.py:116:35        edges           U       graph consists of 5 edges."
  - "backtracking/hamiltonian_cycle.py:117:11        look            U       If we look closely, we can see"
  - "backtracking/hamiltonian_cycle.py:117:16        closely         U       If we look closely, we can see that there"
  - "backtracking/hamiltonian_cycle.py:117:41        there           U       closely, we can see that there are multiple Hamiltonian"
  - "backtracking/hamiltonian_cycle.py:171:68        them            U       we have not visited them yet"
  - "backtracking/knight_tour.py:1:3         Knight          U       # Knight Tour Intro: https:/"
  - "backtracking/knight_tour.py:1:10        Tour            U       # Knight Tour Intro: https://www.youtube"
  - "backtracking/knight_tour.py:8:36        knight          U       the valid positions a knight can move to from the"
  - "backtracking/knight_tour.py:25:5        permissible     U       permissible_positions = []"
  - "backtracking/knight_tour.py:27:9        inner           U       for inner_position in positions"
  - "backtracking/knight_tour.py:35:17       board           U       def is_complete(board: list[list[int]]) -"
  - "backtracking/knight_tour.py:37:25       matrix          U       Check if the board (matrix) has been completely"
  - "backtracking/knight_tour.py:37:37       been            U       the board (matrix) has been completely filled with"
  - "backtracking/knight_tour.py:37:42       completely      U       board (matrix) has been completely filled with non-zero"
  - "backtracking/knight_tour.py:46:20       elem            U       return not any(elem == 0 for row in board"
  - "backtracking/knight_tour.py:49:17       tour            U       def open_knight_tour_helper("
  - "backtracking/knight_tour.py:74:38       performed       U       if the tour cannot be performed for the given size."
  - "backtracking/match_word_pattern.py:6:39         against     U       The string to match against the pattern."
  - "backtracking/match_word_pattern.py:36:13        mapped      U       mapped_str = pattern_map[char"
  - "backtracking/minimax.py:2:9         helps           U       Minimax helps to achieve maximum score"
  - "backtracking/minimax.py:2:18        achieve         U       Minimax helps to achieve maximum score in a game"
  - "backtracking/minimax.py:2:75        moves           U       checking all possible moves"
  - "backtracking/minimax.py:5:39        scores          U       index of current node in scores[]."
  - "backtracking/minimax.py:6:15        maximizer       U       if move is of maximizer return true else false"
  - "backtracking/minimax.py:20:77       optimal         U       which helps achieve the optimal"
  - "backtracking/minimax.py:22:55       maximized       U       maximizer, then the score is maximized."
  - "backtracking/minimax.py:23:26       minimizer       U       If the player is the minimizer, then the score is minimized"
  - "backtracking/minimax.py:23:55       minimized       U       minimizer, then the score is minimized."
  - "backtracking/minimax.py:30:22       containing      U       - scores: A list containing the scores of the leaves"
  - "backtracking/minimax.py:33:5        Returns         U       Returns:"
  - "backtracking/minimax.py:48:17       Scores          U       ValueError: Scores cannot be empty"
  - "backtracking/minimax.py:65:19       maximizer's     U       # If it's the maximizer's turn, choose the maximum"
  - "backtracking/minimax.py:65:31       turn            U       it's the maximizer's turn, choose the maximum"
  - "backtracking/minimax.py:73:19       minimizer's     U       # If it's the minimizer's turn, choose the minimum"
  - "backtracking/minimax.py:87:12       Optimal         U       print(\"Optimal value : \", end=\"\")"
  - "backtracking/n_queens_math.py:4:7           queens          U       The n queens problem is: placing"
  - "backtracking/n_queens_math.py:4:26          placing         U       n queens problem is: placing N queens on a N * N"
  - "backtracking/n_queens_math.py:5:63          means           U       that chess board. This means that one queen"
  - "backtracking/n_queens_math.py:6:61          diagonal        U       horizontal, vertical and diagonal lines."
  - "backtracking/n_queens_math.py:11:14         ways            U       the possible ways, we can simplify it"
  - "backtracking/n_queens_math.py:14:8          visualize       U       We can visualize it like this:"
  - "backtracking/n_queens_math.py:19:6          chessboard      U       On a chessboard vertical movement could"
  - "backtracking/n_queens_math.py:19:26         movement        U       chessboard vertical movement could be the rows and"
  - "backtracking/n_queens_math.py:19:35         could           U       chessboard vertical movement could be the rows and horizontal"
  - "backtracking/n_queens_math.py:19:48         rows            U       movement could be the rows and horizontal movement"
  - "backtracking/n_queens_math.py:20:5          columns         U       the columns."
  - "backtracking/n_queens_math.py:27:44         would           U       array for this example would look like this: [1,"
  - "backtracking/n_queens_math.py:34:26         halfway         U       this point we have it halfway completed and we will"
  - "backtracking/n_queens_math.py:34:56         treat           U       completed and we will treat the chessboard as a"
  - "backtracking/n_queens_math.py:35:1          Cartesian       U       Cartesian plane. Hereinafter"
  - "backtracking/n_queens_math.py:35:19         Hereinafter     U       Cartesian plane. Hereinafter we are going to remember"
  - "backtracking/n_queens_math.py:35:47         remember        U       Hereinafter we are going to remember basic math, so in the"
  - "backtracking/n_queens_math.py:36:1          learned         U       learned this formula:"
  - "backtracking/n_queens_math.py:36:14         formula         U       learned this formula:"
  - "backtracking/n_queens_math.py:44:49         angles          U       get the slope. For the angles 45º (right diagonal"
  - "backtracking/n_queens_math.py:45:30         gives           U       diagonal) this formula gives us m = 1, and m = -"
  - "backtracking/n_queens_math.py:45:57         respectively    U       us m = 1, and m = -1 respectively."
  - "backtracking/n_queens_math.py:56:35         axis            U       the line crosses the Y axis (to get more information"
  - "backtracking/n_queens_math.py:62:5          since           U       And since we already have the"
  - "backtracking/n_queens_math.py:74:1          Applying        U       Applying these two formulas we"
  - "backtracking/n_queens_math.py:74:10         these           U       Applying these two formulas we can"
  - "backtracking/n_queens_math.py:74:20         formulas        U       Applying these two formulas we can check if a queen"
  - "backtracking/n_queens_math.py:74:79         attacked        U       some position is being attacked"
  - "backtracking/n_queens_math.py:75:5          another         U       for another one or vice versa."
  - "backtracking/n_queens_math.py:75:20         vice            U       for another one or vice versa."
  - "backtracking/n_queens_math.py:75:25         versa           U       another one or vice versa."
  - "backtracking/n_queens_math.py:84:20         collisions      U       diagonal_right_collisions: list[int],"
  - "backtracking/n_queens_math.py:86:5          boards          U       boards: list[list[str]],"
  - "backtracking/n_queens_math.py:111:36        previously      U       apply that we learned previously. First we check that"
  - "backtracking/n_queens_math.py:112:59        because         U       not other same value because if there is it means"
  - "backtracking/n_queens_math.py:113:28        collision       U       # that there are a collision in vertical. Then we"
  - "backtracking/n_queens_math.py:119:74        their           U       formulas not exist in their variables"
  - "backtracking/n_queens_math.py:151:35        were            U       boards), \"solutions were found.\")"
  - "backtracking/n_queens.py:3:5            nqueens         U       The nqueens problem is of placing"
  - "backtracking/n_queens.py:18:19          returns         U       This function returns a boolean value True"
  - "backtracking/n_queens.py:19:5           considering     U       considering the current state of"
  - "backtracking/n_queens.py:23:18          Coordinates     U       row, column: Coordinates of the cell on the board"
  - "backtracking/n_queens.py:50:19          creates         U       This function creates a state space tree and"
  - "backtracking/n_queens.py:51:5           receives        U       receives a False Boolean and"
  - "backtracking/n_queens.py:56:27          exceeds         U       If the row number exceeds N, we have a board with"
  - "backtracking/n_queens.py:57:33          appended        U       that combination is appended to the solution list"
  - "backtracking/n_queens.py:57:80          printed         U       list and the board is printed."
  - "backtracking/n_queens.py:60:9           printboard      U       printboard(board)"
  - "backtracking/n_queens.py:65:74          feasible        U       column to check if it is feasible to"
  - "backtracking/n_queens.py:67:42          particular      U       combinations for that particular branch are successful"
  - "backtracking/n_queens.py:79:5           Prints          U       Prints the boards that have"
  - "backtracking/power_sum.py:3:56          expressed       U       given integer X, can be expressed as the sum"
  - "backtracking/power_sum.py:4:12          powers          U       of the Nth powers of unique, natural numbers"
  - "backtracking/power_sum.py:5:44          squares         U       combinations of unique squares adding up to 13."
  - "backtracking/power_sum.py:5:52          adding          U       ombinations of unique squares adding up to 13."
  - "backtracking/rat_in_maze.py:4:11        maze            U       def solve_maze("
  - "backtracking/rat_in_maze.py:14:23       dimensional     U       - maze: A two dimensional matrix of zeros and"
  - "backtracking/rat_in_maze.py:23:25       coordinates     U       destination coordinates are invalid."
  - "backtracking/rat_in_maze.py:25:21       navigates       U       This method navigates through a maze represented"
  - "backtracking/rat_in_maze.py:25:46       represented     U       navigates through a maze represented as an n by n matrix"
  - "backtracking/rat_in_maze.py:27:9        aiming          U       aiming to reach a destination"
  - "backtracking/rat_in_maze.py:28:30       walls           U       The maze consists of walls (1s) and open paths"
  - "backtracking/rat_in_maze.py:29:12       providing       U       By providing custom row and column"
  - "backtracking/rat_in_maze.py:30:9        cells           U       cells can be adjusted."
  - "backtracking/rat_in_maze.py:30:22       adjusted        U       cells can be adjusted."
  - "backtracking/rat_in_maze.py:44:44       represent       U       maze, the zeros (0s) represent one of the possible"
  - "backtracking/rat_in_maze.py:130:5       solved          U       solved = run_maze("
  - "backtracking/rat_in_maze.py:148:76      directions      U       going in one of four directions:"
  - "backtracking/rat_in_maze.py:156:40      Otherwise       U       path is found True, Otherwise False."
  - "backtracking/README.md:1:3          Backtracking    U       # Backtracking"
  - "backtracking/README.md:3:26         speed           U       Backtracking is a way to speed up the search process"
  - "backtracking/README.md:3:57         removing        U       the search process by removing candidates when they"
  - "backtracking/README.md:3:82         they            U       removing candidates when they can't be the solution"
  - "backtracking/sudoku.py:2:9          partially       U       Given a partially filled 9x9 2D array"
  - "backtracking/sudoku.py:2:44         objective       U       filled 9x9 2D array, the objective is to fill a 9x9"
  - "backtracking/sudoku.py:3:25         numbered        U       square grid with digits numbered 1 to 9, so that every"
  - "backtracking/sudoku.py:4:17         nine            U       and each of the nine 3x3 sub-grids contains"
  - "backtracking/sudoku.py:4:30         grids           U       of the nine 3x3 sub-grids contains all of the"
  - "backtracking/sudoku.py:15:1         Matrix          U       Matrix = list[list[int]]"
  - "backtracking/sudoku.py:17:3         assigning       U       # assigning initial values to the"
  - "backtracking/sudoku.py:47:25        subgrids        U       column, and the 3x3 subgrids contain the digit 'n"
  - "backtracking/sudoku.py:47:34        contain         U       and the 3x3 subgrids contain the digit 'n'."
  - "backtracking/sudoku.py:65:19        finds           U       This function finds an empty location so"
  - "backtracking/sudoku.py:75:5         sudoku          U       def sudoku(grid: Matrix) -> Matrix"
  - "backtracking/sudoku.py:77:42        attempts        U       partially filled-in grid and attempts to assign values to"
  - "backtracking/sudoku.py:78:9         unassigned      U       all unassigned locations in such a"
  - "backtracking/sudoku.py:78:47        meet            U       locations in such a way to meet the requirements"
  - "backtracking/sudoku.py:78:56        requirements    U       such a way to meet the requirements"
  - "backtracking/sudoku.py:79:9         Sudoku          U       for Sudoku solution (non-duplication"
  - "backtracking/sudoku.py:79:30        duplication     U       Sudoku solution (non-duplication across rows, columns"
  - "backtracking/sudoku.py:79:42        across          U       solution (non-duplication across rows, columns, and boxes"
  - "backtracking/sudoku.py:79:68        boxes           U       across rows, columns, and boxes)"
  - "backtracking/sum_of_subsets.py:2:12         subsetsproblem      U       The sum-of-subsetsproblem states that a set of"
  - "backtracking/sum_of_subsets.py:3:33         subsets             U       determine all possible subsets of the given set whose"
  - "backtracking/sum_of_subsets.py:3:64         summation           U       the given set whose summation sum"
  - "backtracking/sum_of_subsets.py:6:1          Summation           U       Summation of the chosen numbers"
  - "backtracking/sum_of_subsets.py:6:18         chosen              U       Summation of the chosen numbers must be equal"
  - "backtracking/sum_of_subsets.py:13:29        soln                U       generate_sum_of_subsets_soln(nums: list[int], max"
  - "backtracking/sum_of_subsets.py:17:5         remaining           U       remaining_nums_sum = sum(nums"
  - "backtracking/sum_of_subsets.py:32:23        branching           U       It terminates the branching of a node when any of"
  - "backtracking/sum_of_subsets.py:34:20        follows             U       This algorithm follows depth-fist-search and"
  - "backtracking/sum_of_subsets.py:34:34        fist                U       algorithm follows depth-fist-search and backtracks"
  - "backtracking/sum_of_subsets.py:35:5         branchable          U       branchable."
  - "backtracking/word_break.py:4:19         segmented           U       the string can be segmented into a sequence of one"
  - "backtracking/word_break.py:13:10        segmentation        U       word segmentation is possible starting"
  - "backtracking/word_break.py:24:20        leetcode            U       >>> backtrack(\"leetcode\", {\"leet\", \"code\"},"
  - "backtracking/word_break.py:24:33        leet                U       backtrack(\"leetcode\", {\"leet\", \"code\"}, 0)"
  - "backtracking/word_break.py:27:20        applepenapple       U       >>> backtrack(\"applepenapple\", {\"apple\", \"pen\"},"
  - "backtracking/word_break.py:30:20        catsandog           U       >>> backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand"
  - "backtracking/word_break.py:30:34        cats                U       backtrack(\"catsandog\", {\"cats\", \"dog\", \"sand\", \"and"
  - "backtracking/word_break.py:34:44        reached             U       the starting index has reached the end of the string"
  - "backtracking/word_break.py:50:5         Determines          U       Determines if the input string"
  - "backtracking/word_ladder.py:2:6         Ladder              U       Word Ladder is a classic problem"
  - "backtracking/word_ladder.py:4:4         changing            U       by changing one letter at a time"
  - "backtracking/word_ladder.py:5:6         intermediate        U       Each intermediate word must be a valid"
  - "backtracking/word_ladder.py:6:5         goal                U       The goal is to find a transformation"
  - "backtracking/word_ladder.py:24:35       transformations     U       list[str]): The list of transformations from begin_word to current"
  - "backtracking/word_ladder.py:40:55       goad                U       , \"gold\", {\"load\", \"goad\", \"gold\", \"lead\", \"lord"
  - "backtracking/word_ladder.py:40:79       lord                U       goad\", \"gold\", \"lead\", \"lord\"})"
  - "backtracking/word_ladder.py:43:47       came                U       [\"game\"], \"code\", {\"came\", \"cage\", \"code\", \"cade"
  - "backtracking/word_ladder.py:43:55       cage                U       , \"code\", {\"came\", \"cage\", \"code\", \"cade\", \"gave"
  - "backtracking/word_ladder.py:43:71       cade                U       came\", \"cage\", \"code\", \"cade\", \"gave\"})"
  - "backtracking/word_ladder.py:43:79       gave                U       cage\", \"code\", \"cade\", \"gave\"})"
  - "backtracking/word_ladder.py:54:13       transformed         U       transformed_word = current_word"
  - "backtracking/word_ladder.py:57:19       Recur               U       # Recur with the new word added"
  - "backtracking/word_ladder.py:68:10       ladder              U       def word_ladder(begin_word: str, end"
  - "backtracking/word_ladder.py:74:62       starts              U       which the transformation starts."
  - "backtracking/word_search.py:2:11        Alexander       U       Author : Alexander Pantyukhin"
  - "backtracking/word_search.py:2:21        Pantyukhin      U       Author : Alexander Pantyukhin"
  - "backtracking/word_search.py:3:11        November        U       Date : November 24, 2022"
  - "backtracking/word_search.py:9:17        constructed     U       The word can be constructed from letters of sequentially"
  - "backtracking/word_search.py:9:45        sequentially    U       constructed from letters of sequentially adjacent cells,"
  - "backtracking/word_search.py:10:26       horizontally    U       where adjacent cells are horizontally or vertically neighboring"
  - "backtracking/word_search.py:10:42       vertically      U       are horizontally or vertically neighboring."
  - "backtracking/word_search.py:10:53       neighboring     U       horizontally or vertically neighboring."
  - "backtracking/word_search.py:23:2        ABCCED          U       \"ABCCED\""
  - "backtracking/word_search.py:28:16       notes           U       Implementation notes: Use backtracking approach"
  - "backtracking/word_search.py:47:5        exits           U       def exits_word("
  - "backtracking/word_search.py:69:5        traverts        U       traverts_directions = [(0, 1"
  - "backtracking/word_search.py:72:9        direction       U       for direction in traverts_directions"
  - "backtracking/word_search.py:97:79       ABCB            U       \"A\",\"D\",\"E\",\"E\"]], \"ABCB\")"
  - "bit_manipulation/binary_and_operator.py:8:54        provided    U       operation on the integers provided."
  - "bit_manipulation/binary_count_setbits.py:4:33           representation      U       number of 1's in binary representation of that number."
  - "bit_manipulation/binary_or_operator.py:28:41        interpreted     U       float' object cannot be interpreted as an integer"
  - "bit_manipulation/binary_or_operator.py:36:46        leading         U       )[2:] # remove the leading \"0b\""
  - "bit_manipulation/binary_shifts.py:1:25          shifts              U       Information on binary shifts:"
  - "bit_manipulation/binary_shifts.py:6:5           logical             U       def logical_left_shift(number: int"
  - "bit_manipulation/binary_shifts.py:9:35          logically           U       is the integer to be logically left shifted 'shift"
  - "bit_manipulation/binary_shifts.py:9:50          shifted             U       to be logically left shifted 'shift_amount' times"
  - "bit_manipulation/binary_shifts.py:9:73          times               U       shifted 'shift_amount' times."
  - "bit_manipulation/binary_shifts.py:71:35         arithmetically      U       is the integer to be arithmetically right shifted 'shift"
  - "bit_manipulation/binary_shifts.py:90:30         complement          U       # Get binary (2's complement) representation of negative"
  - "bit_manipulation/binary_twos_complement.py:4:5          twos    U       def twos_complement(number: int"
  - "bit_manipulation/bitwise_addition_recursive.py:2:1          Calculates      U       Calculates the sum of two non-negative"
  - "bit_manipulation/bitwise_addition_recursive.py:2:63         operators       U       integers using bitwise operators"
  - "bit_manipulation/bitwise_addition_recursive.py:3:11         explanation     U       Wikipedia explanation: https://en.wikipedia"
  - "bit_manipulation/bitwise_addition_recursive.py:7:13         addition        U       def bitwise_addition_recursive(number: int"
  - "bit_manipulation/bitwise_addition_recursive.py:18:31        MUST            U       TypeError: Both arguments MUST be integers!"
  - "bit_manipulation/bitwise_addition_recursive.py:44:5         carry           U       carry = number & other_number"
  - "bit_manipulation/count_1s_brian_kernighan_method.py:3:60        Brian           U       2 bit integer using Brian Kernighan's way."
  - "bit_manipulation/count_1s_brian_kernighan_method.py:3:66        Kernighan's     U       integer using Brian Kernighan's way."
  - "bit_manipulation/count_1s_brian_kernighan_method.py:35:23       arrive          U       # This way we arrive at next set bit (next"
  - "bit_manipulation/count_1s_brian_kernighan_method.py:35:55       instead         U       next set bit (next 1) instead of looping"
  - "bit_manipulation/count_1s_brian_kernighan_method.py:35:66       looping         U       (next 1) instead of looping"
  - "bit_manipulation/count_1s_brian_kernighan_method.py:36:48       hence           U       and checking for 1s hence the"
  - "bit_manipulation/count_number_of_one_bits.py:4:30           brian           U       set_bits_count_using_brian_kernighans_algorithm"
  - "bit_manipulation/count_number_of_one_bits.py:4:36           kernighans      U       bits_count_using_brian_kernighans_algorithm(number: int"
  - "bit_manipulation/count_number_of_one_bits.py:33:30          modulo          U       set_bits_count_using_modulo_operator(number: int"
  - "bit_manipulation/count_number_of_one_bits.py:63:5           benchmark       U       def benchmark() -> None:"
  - "bit_manipulation/count_number_of_one_bits.py:65:24          comparing       U       Benchmark code for comparing 2 functions, with different"
  - "bit_manipulation/count_number_of_one_bits.py:66:36          consistently    U       Kernighan's algorithm is consistently faster than using modulo"
  - "bit_manipulation/count_number_of_one_bits.py:66:49          faster          U       algorithm is consistently faster than using modulo_operator"
  - "bit_manipulation/count_number_of_one_bits.py:73:9           timing          U       timing = timeit("
  - "bit_manipulation/excess_3_code.py:1:5           excess      U       def excess_3_code(number: int)"
  - "bit_manipulation/find_previous_power_of_two.py:3:14         largest         U       Find the largest power of two that is"
  - "bit_manipulation/find_previous_power_of_two.py:23:24        Equivalent      U       power <<= 1 # Equivalent to multiplying by 2"
  - "bit_manipulation/find_previous_power_of_two.py:23:38        multiplying     U       1 # Equivalent to multiplying by 2"
  - "bit_manipulation/gray_code_sequence.py:1:5          gray            U       def gray_code(bit_count: int"
  - "bit_manipulation/gray_code_sequence.py:8:44         inclusive       U       is between [0,2^n -1] inclusive"
  - "bit_manipulation/gray_code_sequence.py:10:19        appears         U       c) An integer appears at most one times in"
  - "bit_manipulation/gray_code_sequence.py:33:28        operand         U       TypeError: unsupported operand type(s) for <<: 'int"
  - "bit_manipulation/gray_code_sequence.py:36:17        represents      U       # bit count represents no. of bits in the gray"
  - "bit_manipulation/gray_code_sequence.py:63:17        achieved        U       # Base case achieved when either n = 0 or"
  - "bit_manipulation/gray_code_sequence.py:70:33        defines         U       = 1 << bit_count # defines the length of the sequence"
  - "bit_manipulation/gray_code_sequence.py:71:16        equivalent      U       # 1<< n is equivalent to 2^n"
  - "bit_manipulation/gray_code_sequence.py:74:5         smaller         U       smaller_sequence = gray_code"
  - "bit_manipulation/index_of_rightmost_set_bit.py:45:5         Finding         U       Finding the index of rightmost"
  - "bit_manipulation/index_of_rightmost_set_bit.py:45:58        peculiar        U       set bit has some very peculiar use-cases,"
  - "bit_manipulation/index_of_rightmost_set_bit.py:46:5         especially      U       especially in finding missing or"
  - "bit_manipulation/index_of_rightmost_set_bit.py:46:19        finding         U       especially in finding missing or/and repeating"
  - "bit_manipulation/index_of_rightmost_set_bit.py:46:42        repeating       U       finding missing or/and repeating numbers in a list of"
  - "bit_manipulation/is_even.py:1:8         even            U       def is_even(number: int) -> bool"
  - "bit_manipulation/is_even.py:4:5         Explanation     U       Explanation: Lets take a look at"
  - "bit_manipulation/is_even.py:4:18        Lets            U       Explanation: Lets take a look at the following"
  - "bit_manipulation/is_even.py:11:36       observe         U       above examples we can observe that"
  - "bit_manipulation/is_power_of_two.py:9:31        manipulation        U       Implementation notes: Use bit manipulation."
  - "bit_manipulation/is_power_of_two.py:14:18       intersections       U       n & (n - 1) - no intersections = 0"
  - "bit_manipulation/largest_pow_of_two_le_num.py:2:11          Naman       U       Author : Naman Sharma"
  - "bit_manipulation/largest_pow_of_two_le_num.py:2:17          Sharma      U       Author : Naman Sharma"
  - "bit_manipulation/largest_pow_of_two_le_num.py:3:11          October     U       Date : October 2, 2023"
  - "bit_manipulation/missing_number.py:3:5          Finds           U       Finds the missing number in"
  - "bit_manipulation/missing_number.py:3:43         consecutive     U       number in a list of consecutive integers."
  - "bit_manipulation/numbers_different_signs.py:6:55        opposite    U       True these numbers have opposite signs"
  - "bit_manipulation/numbers_different_signs.py:6:64        signs       U       numbers have opposite signs"
  - "bit_manipulation/README.md:3:32         manipulating    U       manipulation is the act of manipulating bits to detect errors"
  - "bit_manipulation/README.md:3:45         bits            U       act of manipulating bits to detect errors (hamming"
  - "bit_manipulation/README.md:3:68         hamming         U       bits to detect errors (hamming code), encrypts and"
  - "bit_manipulation/README.md:3:83         encrypts        U       errors (hamming code), encrypts and decrypts messages"
  - "bit_manipulation/README.md:3:96         decrypts        U       code), encrypts and decrypts messages (more on that"
  - "bit_manipulation/README.md:3:115        more            U       and decrypts messages (more on that in the 'ciphers"
  - "bit_manipulation/README.md:3:136        ciphers         U       more on that in the 'ciphers' folder) or just do"
  - "bit_manipulation/README.md:3:156        just            U       ciphers' folder) or just do anything at the lowest"
  - "bit_manipulation/README.md:3:196        your            U       the lowest level of your computer."
  - "bit_manipulation/reverse_bits.py:14:37          conducted       U       operation can not be conducted on a object of type"
  - "bit_manipulation/reverse_bits.py:70:44          dealing         U       to 32],since we are dealing with 32 bit integer"
  - "bit_manipulation/reverse_bits.py:72:34          unity           U       left shift the bits by unity"
  - "bit_manipulation/single_bit_manipulation_operations.py:3:4          Provide             U       \"\"\"Provide the functionality to"
  - "bit_manipulation/single_bit_manipulation_operations.py:3:16         functionality       U       \"\"\"Provide the functionality to manipulate a single"
  - "bit_manipulation/single_bit_manipulation_operations.py:3:33         manipulate          U       the functionality to manipulate a single bit.\"\"\""
  - "bit_manipulation/single_bit_manipulation_operations.py:11:45        zeroes              U       with all the bits - zeroes and bit on given"
  - "bit_manipulation/single_bit_manipulation_operations.py:60:57        smallest            U       position to be the first (smallest) bit."
  - "bit_manipulation/swap_all_odd_and_even_bits.py:16:32        swapped     U       Finally, we combine the swapped even and odd bits using"
  - "blockchain/diophantine_equation.py:3:6          maths           U       from maths.greatest_common_divisor"
  - "blockchain/diophantine_equation.py:3:28         divisor         U       maths.greatest_common_divisor import greatest_common"
  - "blockchain/diophantine_equation.py:6:5          diophantine     U       def diophantine(a: int, b: int, c: int"
  - "blockchain/diophantine_equation.py:8:5          Diophantine     U       Diophantine Equation : Given integers"
  - "blockchain/diophantine_equation.py:8:17         Equation        U       Diophantine Equation : Given integers a,b"
  - "blockchain/diophantine_equation.py:9:17         equation        U       diophantine equation a*x + b*y = c has a"
  - "blockchain/diophantine_equation.py:10:38        divides         U       common_divisor(a,b) divides c."
  - "blockchain/diophantine_equation.py:12:27        Divisor         U       GCD ( Greatest Common Divisor ) or HCF ( Highest Common"
  - "blockchain/diophantine_equation.py:21:5         That's          U       That's why we need diophantine"
  - "blockchain/diophantine_equation.py:37:42        Equations       U       solutions of Diophantine Equations:"
  - "blockchain/diophantine_equation.py:39:5         Theorem         U       Theorem : Let gcd(a,b) = d,"
  - "blockchain/diophantine_equation.py:76:14        Euclid's        U       Extended Euclid's Algorithm : If d divides"
  - "blockchain/README.md:3:29           distributed             U       Blockchain is a type of **distributed ledger** technology"
  - "blockchain/README.md:3:84           growing                 U       DLT) that consists of growing list of records, called"
  - "blockchain/README.md:3:109          called                  U       growing list of records, called **blocks**, that are"
  - "blockchain/README.md:3:118          blocks                  U       of records, called **blocks**, that are securely"
  - "blockchain/README.md:3:137          securely                U       *blocks**, that are securely linked together using"
  - "blockchain/README.md:3:153          together                U       are securely linked together using **cryptography"
  - "blockchain/README.md:3:162          using                   U       securely linked together using **cryptography**."
  - "blockchain/README.md:3:170          cryptography            U       linked together using **cryptography**."
  - "blockchain/README.md:5:7            breakdown               U       Let's breakdown the terminologies in"
  - "blockchain/README.md:5:42           above                   U       terminologies in the above definition. We find"
  - "blockchain/README.md:5:63           find                    U       above definition. We find below terminologies"
  - "blockchain/README.md:5:68           below                   U       definition. We find below terminologies,"
  - "blockchain/README.md:8:3            Blocks                  U       - Blocks"
  - "blockchain/README.md:9:3            Cryptography            U       - Cryptography"
  - "blockchain/README.md:13:65          simply                  U       ledger technology. It is simply the opposite of centralized"
  - "blockchain/README.md:13:88          centralized             U       simply the opposite of centralized database. Firstly, what"
  - "blockchain/README.md:13:110         Firstly                 U       centralized database. Firstly, what is a **ledger"
  - "blockchain/README.md:13:119         what                    U       entralized database. Firstly, what is a **ledger**? A ledger"
  - "blockchain/README.md:15:21          addressed               U       *Why is Blockchain addressed as digital ledger if"
  - "blockchain/README.md:15:98          What                    U       account transactions? What other transaction details"
  - "blockchain/README.md:17:60          among                   U       ledger which is shared among multiple nodes. This"
  - "blockchain/README.md:17:66          multiple                U       which is shared among multiple nodes. This way there"
  - "blockchain/README.md:17:106         need                    U       This way there exist no need for central authority"
  - "blockchain/README.md:17:151         Okay                    U       authority to hold the info. Okay, how is it differentiated"
  - "blockchain/README.md:17:167         differentiated          U       info. Okay, how is it differentiated from central database"
  - "blockchain/README.md:17:223         benefits                U       database and what are their benefits?"
  - "blockchain/README.md:19:62          stored                  U       branches whose data are stored in a centralized database"
  - "blockchain/README.md:19:118         needs                   U       So even if one branch needs any data from ledger"
  - "blockchain/README.md:19:184         charge                  U       approval from database in charge. And if one hacks the"
  - "blockchain/README.md:19:203         hacks                   U       in charge. And if one hacks the central database"
  - "blockchain/README.md:19:233         gets                    U       central database he gets to tamper and control"
  - "blockchain/README.md:19:241         tamper                  U       database he gets to tamper and control all the"
  - "blockchain/README.md:21:5           lets                    U       Now lets assume every branch"
  - "blockchain/README.md:21:17          every                   U       Now lets assume every branch has a copy of"
  - "blockchain/README.md:21:81          added                   U       then once anything is added to the ledger by anyone"
  - "blockchain/README.md:21:104         anyone                  U       added to the ledger by anyone branch it is gonna automatica"
  - "blockchain/README.md:21:124         gonna                   U       anyone branch it is gonna automatically reflect"
  - "blockchain/README.md:21:130         automatically           U       anyone branch it is gonna automatically reflect in all other"
  - "blockchain/README.md:21:144         reflect                 U       gonna automatically reflect in all other ledgers"
  - "blockchain/README.md:21:208         done                    U       other branch. This is done using Peer-to-peer network"
  - "blockchain/README.md:23:38          tampered                U       even if information is tampered in one branch we can"
  - "blockchain/README.md:23:95          hacked                  U       out. If one branch is hacked we can be alerted ,so"
  - "blockchain/README.md:23:112         alerted                 U       is hacked we can be alerted ,so we can safeguard"
  - "blockchain/README.md:23:131         safeguard               U       be alerted ,so we can safeguard other branches. Now"
  - "blockchain/README.md:23:187         computers               U       assume these branches as computers or nodes and the ledger"
  - "blockchain/README.md:23:325         will                    U       can detect since there will be a mismatch in comparison"
  - "blockchain/README.md:23:335         mismatch                U       since there will be a mismatch in comparison with other"
  - "blockchain/README.md:23:347         comparison              U       will be a mismatch in comparison with other node information"
  - "blockchain/README.md:23:402         concept                 U       information. So this is the concept of Digital Ledger Technology"
  - "blockchain/README.md:25:34          have                    U       required for all nodes to have access to all information"
  - "blockchain/README.md:25:81          Wouldn't                U       information in other nodes? Wouldn't this require enormous"
  - "blockchain/README.md:25:95          require                 U       nodes? Wouldn't this require enormous storage space"
  - "blockchain/README.md:25:103         enormous                U       Wouldn't this require enormous storage space in each"
  - "blockchain/README.md:29:21          nothing                 U       In short a block is nothing but collections of records"
  - "blockchain/README.md:29:63          labelled                U       collections of records with a labelled header. These are connected"
  - "blockchain/README.md:29:100         cryptographically       U       These are connected cryptographically. Once a new block is"
  - "blockchain/README.md:29:150         chain                   U       block is added to a chain, the previous block"
  - "blockchain/README.md:29:161         previous                U       added to a chain, the previous block is connected,"
  - "blockchain/README.md:29:195         precisely               U       block is connected, more precisely said as locked and hence"
  - "blockchain/README.md:29:205         said                    U       connected, more precisely said as locked and hence"
  - "blockchain/README.md:29:243         unaltered               U       and hence, will remain unaltered. We can understand this"
  - "blockchain/README.md:29:261         understand              U       remain unaltered. We can understand this concept once we"
  - "blockchain/README.md:29:305         understanding           U       once we get a clear understanding of working mechanism"
  - "blockchain/README.md:29:330         mechanism               U       understanding of working mechanism of blockchain."
  - "blockchain/README.md:33:11          practice                U       It is the practice and study of secure"
  - "blockchain/README.md:33:24          study                   U       is the practice and study of secure communication"
  - "blockchain/README.md:33:54          techniques              U       secure communication techniques in the midst of adversarial"
  - "blockchain/README.md:33:72          midst                   U       mmunication techniques in the midst of adversarial behavior"
  - "blockchain/README.md:33:81          adversarial             U       techniques in the midst of adversarial behavior. More broadly"
  - "blockchain/README.md:33:93          behavior                U       midst of adversarial behavior. More broadly, cryptography"
  - "blockchain/README.md:33:103         More                    U       adversarial behavior. More broadly, cryptography"
  - "blockchain/README.md:33:108         broadly                 U       adversarial behavior. More broadly, cryptography is the"
  - "blockchain/README.md:33:162         protocols               U       creation and analysis of protocols that prevent third parties"
  - "blockchain/README.md:33:177         prevent                 U       analysis of protocols that prevent third parties or the"
  - "blockchain/README.md:33:191         parties                 U       protocols that prevent third parties or the general public"
  - "blockchain/README.md:33:226         accessing               U       general public from accessing private messages."
  - "blockchain/README.md:35:35          most                    U       cryptography technology is most widely used in blockchain"
  - "blockchain/README.md:35:40          widely                  U       yptography technology is most widely used in blockchain and"
  - "blockchain/README.md:37:63          holder                  U       a distributed record holder which records the information"
  - "blockchain/README.md:37:100         about                   U       records the information about ownership of an asset"
  - "blockchain/README.md:37:106         ownership               U       the information about ownership of an asset. To define"
  - "blockchain/README.md:38:54          makes                   U       immutable ledger that makes it easier to record"
  - "blockchain/README.md:38:63          easier                  U       ledger that makes it easier to record transactions"
  - "blockchain/README.md:38:115         corporate               U       and track assets in a corporate network."
  - "blockchain/README.md:39:19          tangible                U       An asset could be tangible (such as a house, car"
  - "blockchain/README.md:39:29          such                    U       asset could be tangible (such as a house, car, cash"
  - "blockchain/README.md:39:51          cash                    U       such as a house, car, cash, or land) or intangible"
  - "blockchain/README.md:39:69          intangible              U       car, cash, or land) or intangible (such as a business"
  - "blockchain/README.md:39:102         intellectual            U       such as a business) (intellectual property, patents, copyrights"
  - "blockchain/README.md:39:125         patents                 U       intellectual property, patents, copyrights, branding"
  - "blockchain/README.md:39:134         copyrights              U       tellectual property, patents, copyrights, branding). A blockchain"
  - "blockchain/README.md:39:146         branding                U       patents, copyrights, branding). A blockchain network"
  - "blockchain/README.md:39:192         sell                    U       network can track and sell almost anything of value"
  - "blockchain/README.md:39:197         almost                  U       network can track and sell almost anything of value, lowering"
  - "blockchain/README.md:39:223         lowering                U       almost anything of value, lowering risk and costs for everyone"
  - "blockchain/README.md:39:241         costs                   U       value, lowering risk and costs for everyone involved"
  - "blockchain/README.md:39:251         everyone                U       lowering risk and costs for everyone involved."
  - "blockchain/README.md:39:260         involved                U       and costs for everyone involved."
  - "blockchain/README.md:41:22          introduction            U       So this is all about introduction to blockchain technology"
  - "blockchain/README.md:41:64          learn                   U       blockchain technology. To learn more about the topic"
  - "blockchain/README.md:41:91          refer                   U       more about the topic refer below links...."
  - "boolean_algebra/and_gate.py:2:8         Gate        U       An AND Gate is a logic gate in boolean"
  - "boolean_algebra/and_gate.py:2:18        logic       U       An AND Gate is a logic gate in boolean algebra"
  - "boolean_algebra/and_gate.py:2:24        gate        U       AND Gate is a logic gate in boolean algebra which"
  - "boolean_algebra/and_gate.py:2:40        algebra     U       logic gate in boolean algebra which results to 1"
  - "boolean_algebra/and_gate.py:15:1        Refer       U       Refer - https://www.geeksforgeeks"
  - "boolean_algebra/imply_gate.py:4:23          implies     U       It is true if input 1 implies input 2."
  - "boolean_algebra/karnaugh_map_simplification.py:7:14         kmap            U       def simplify_kmap(kmap: list[list[int"
  - "boolean_algebra/karnaugh_map_simplification.py:9:18         Karnaugh        U       Simplify the Karnaugh map."
  - "boolean_algebra/karnaugh_map_simplification.py:23:5         simplified      U       simplified_f = []"
  - "boolean_algebra/karnaugh_map_simplification.py:39:5         Simplified      U       Simplified Expression:"
  - "boolean_algebra/karnaugh_map_simplification.py:44:7         Manually        U       # Manually generate the product"
  - "boolean_algebra/multiplexer.py:3:24         Multiplexer     U       Implement a 2-to-1 Multiplexer."
  - "boolean_algebra/nand_gate.py:2:3            NAND        U       A NAND Gate is a logic gate"
  - "boolean_algebra/nand_gate.py:4:12           along       U       a NOT gate along with an AND gate."
  - "boolean_algebra/nand_gate.py:18:5           nand        U       def nand_gate(input_1: int, input"
  - "boolean_algebra/nor_gate.py:12:22       Akshaj          U       Code provided by Akshaj Vishwanathan"
  - "boolean_algebra/nor_gate.py:12:29       Vishwanathan    U       Code provided by Akshaj Vishwanathan"
  - "boolean_algebra/quine_mc_cluskey.py:52:44       minterms        U       no_of_variable: int, minterms: Sequence[float]) -"
  - "boolean_algebra/quine_mc_cluskey.py:81:15       chart           U       def selection(chart: list[list[int]], prime"
  - "boolean_algebra/quine_mc_cluskey.py:81:45       implicants      U       list[list[int]], prime_implicants: list[str]) -> list"
  - "boolean_algebra/quine_mc_cluskey.py:122:11      implicant       U       def prime_implicant_chart("
  - "boolean_algebra/quine_mc_cluskey.py:144:50      Minterms        U       decimal representation of Minterms 'Spaces Separated'\\n"
  - "boolean_algebra/quine_mc_cluskey.py:150:18      Implicants      U       print(\"Prime Implicants are:\")"
  - "boolean_algebra/quine_mc_cluskey.py:154:5       essential       U       essential_prime_implicants = selection"
  - "boolean_algebra/quine_mc_cluskey.py:155:12      Essential       U       print(\"Essential Prime Implicants are"
  - "boolean_algebra/README.md:1:11          Algebra         U       # Boolean Algebra"
  - "boolean_algebra/README.md:3:31          arithmetic      U       algebra is used to do arithmetic with bits of values"
  - "boolean_algebra/README.md:3:62          True            U       with bits of values True (1) or False (0)."
  - "boolean_algebra/README.md:3:74          False           U       of values True (1) or False (0)."
  - "boolean_algebra/xnor_gate.py:2:3            XNOR    U       A XNOR Gate is a logic gate"
  - "boolean_algebra/xnor_gate.py:19:5           xnor    U       def xnor_gate(input_1: int, input"
  - "boolean_algebra/xor_gate.py:20:5        calculate       U       calculate xor of the input values"
  - "cellular_automata/conways_game_of_life.py:10:10         glider          U       # Define glider example"
  - "cellular_automata/conways_game_of_life.py:11:1          GLIDER          U       GLIDER = ["
  - "cellular_automata/conways_game_of_life.py:26:9          generation      U       def new_generation(cells: list[list[int"
  - "cellular_automata/conways_game_of_life.py:55:42         excerpt         U       of the game of life (excerpt from Wikipedia):"
  - "cellular_automata/conways_game_of_life.py:56:66         survives        U       three live neighbours survives."
  - "cellular_automata/conways_game_of_life.py:57:59         becomes         U       three live neighbours becomes a live cell."
  - "cellular_automata/conways_game_of_life.py:59:18         Similarly       U       # Similarly, all other dead cells"
  - "cellular_automata/conways_game_of_life.py:59:50         stay            U       all other dead cells stay dead."
  - "cellular_automata/conways_game_of_life.py:80:9          pixels          U       pixels = img.load()"
  - "cellular_automata/game_of_life.py:1:34          Anurag          U       Game Of Life, Author Anurag Kumar(mailto:anuragkumarak"
  - "cellular_automata/game_of_life.py:1:41          Kumar           U       Life, Author Anurag Kumar(mailto:anuragkumarak"
  - "cellular_automata/game_of_life.py:3:1           Requirements    U       Requirements:"
  - "cellular_automata/game_of_life.py:18:21         fewer           U       Any live cell with fewer than two live neighbours"
  - "cellular_automata/game_of_life.py:19:2          dies            U       dies, as if caused by under"
  - "cellular_automata/game_of_life.py:19:14         caused          U       dies, as if caused by under-population"
  - "cellular_automata/game_of_life.py:19:30         population      U       as if caused by under-population."
  - "cellular_automata/game_of_life.py:21:50         lives           U       three live neighbours lives"
  - "cellular_automata/game_of_life.py:28:2          comes           U       comes a live cell, as if by"
  - "cellular_automata/game_of_life.py:28:30         reproduction    U       live cell, as if by reproduction."
  - "cellular_automata/game_of_life.py:58:12         accordingly     U       status accordingly.(in the same canvas"
  - "cellular_automata/game_of_life.py:71:39         judge           U       gen_canvas[r][c] = __judge_point("
  - "cellular_automata/game_of_life.py:89:7          handling        U       # handling duplicate entry for"
  - "cellular_automata/game_of_life.py:115:20        structure       U       # main working structure of this module."
  - "cellular_automata/game_of_life.py:118:19        subplots        U       fig, ax = plt.subplots()"
  - "cellular_automata/game_of_life.py:120:5         cmap            U       cmap = ListedColormap([\"w"
  - "cellular_automata/game_of_life.py:124:16        matshow         U       ax.matshow(c, cmap=cmap)"
  - "cellular_automata/langtons_ant.py:2:1           Langton's       U       Langton's ant"
  - "cellular_automata/langtons_ant.py:11:17         animation       U       from matplotlib.animation import FuncAnimation"
  - "cellular_automata/langtons_ant.py:11:38         Animation       U       animation import FuncAnimation"
  - "cellular_automata/langtons_ant.py:17:7          Langtons        U       class LangtonsAnt:"
  - "cellular_automata/langtons_ant.py:19:5          Represents      U       Represents the main LangonsAnt"
  - "cellular_automata/langtons_ant.py:19:25         Langons         U       Represents the main LangonsAnt algorithm."
  - "cellular_automata/langtons_ant.py:33:11         Initially       U       # Initially pointing left (similar"
  - "cellular_automata/langtons_ant.py:33:21         pointing        U       # Initially pointing left (similar to the"
  - "cellular_automata/langtons_ant.py:37:24         axes            U       def move_ant(self, axes: plt.Axes | None, display"
  - "cellular_automata/langtons_ant.py:37:34         Axes            U       ant(self, axes: plt.Axes | None, display: bool"
  - "cellular_automata/langtons_ant.py:39:9          Performs        U       Performs three tasks:"
  - "cellular_automata/langtons_ant.py:40:24         turns           U       1. The ant turns either clockwise or"
  - "cellular_automata/langtons_ant.py:40:37         clockwise       U       The ant turns either clockwise or anti-clockwise according"
  - "cellular_automata/langtons_ant.py:40:50         anti            U       either clockwise or anti-clockwise according"
  - "cellular_automata/langtons_ant.py:40:65         according       U       clockwise or anti-clockwise according to the colour"
  - "cellular_automata/langtons_ant.py:41:38         currently       U       the square that it is currently on. If the square is"
  - "cellular_automata/langtons_ant.py:43:79         facing          U       that it is currently facing"
  - "cellular_automata/langtons_ant.py:44:56         inverted        U       was previously on is inverted (White -> Black and"
  - "cellular_automata/langtons_ant.py:47:52         displayed       U       the board will also be displayed on the axes"
  - "cellular_automata/langtons_ant.py:65:11         Turn            U       # Turn clockwise or anti-clockwise"
  - "cellular_automata/langtons_ant.py:82:22         xaxis           U       axes.get_xaxis().set_ticks([])"
  - "cellular_automata/langtons_ant.py:83:22         yaxis           U       axes.get_yaxis().set_ticks([])"
  - "cellular_automata/langtons_ant.py:84:18         imshow          U       axes.imshow(self.board, cmap=\"gray"
  - "cellular_automata/langtons_ant.py:88:9          Displays        U       Displays the board without delay"
  - "cellular_automata/langtons_ant.py:89:12         visually        U       to visually understand and track"
  - "cellular_automata/langtons_ant.py:94:61         getting         U       variable to prevent it from getting garbage collected"
  - "cellular_automata/langtons_ant.py:94:69         garbage         U       prevent it from getting garbage collected"
  - "cellular_automata/langtons_ant.py:94:77         collected       U       from getting garbage collected"
  - "cellular_automata/langtons_ant.py:96:67         interval        U       True), frames=frames, interval=1"
  - "cellular_automata/nagel_schrekenberg.py:2:14        evolution       U       Simulate the evolution of a highway with only"
  - "cellular_automata/nagel_schrekenberg.py:3:16        divided         U       The highway is divided in cells, each cell"
  - "cellular_automata/nagel_schrekenberg.py:4:63        come            U       to one end, it will come out on the other."
  - "cellular_automata/nagel_schrekenberg.py:9:33        cars            U       are the speed of the cars with 0 being the lowest"
  - "cellular_automata/nagel_schrekenberg.py:12:1        probability     U       probability The probability"
  - "cellular_automata/nagel_schrekenberg.py:12:56       slow            U       robability that a driver will slow down"
  - "cellular_automata/nagel_schrekenberg.py:73:50       better          U       cells)): # May need a better name for this"
  - "cellular_automata/nagel_schrekenberg.py:91:7        Beforce         U       # Beforce calculations, the highway"
  - "cellular_automata/nagel_schrekenberg.py:91:15       calculations    U       # Beforce calculations, the highway is empty"
  - "cellular_automata/nagel_schrekenberg.py:100:37      causing         U       We can't have the car causing an accident"
  - "cellular_automata/nagel_schrekenberg.py:103:19      Randomly        U       # Randomly, a driver will slow"
  - "cellular_automata/nagel_schrekenberg.py:122:14      speeds          U       next_speeds_calculated = update"
  - "cellular_automata/nagel_schrekenberg.py:122:21      calculated      U       next_speeds_calculated = update(highway[i]"
  - "cellular_automata/one_dimensional.py:2:23           generations     U       Return an image of 16 generations of one-dimensional cellular"
  - "cellular_automata/one_dimensional.py:2:54           cellular        U       enerations of one-dimensional cellular automata based on a"
  - "cellular_automata/one_dimensional.py:2:63           automata        U       dimensional cellular automata based on a given"
  - "cellular_automata/one_dimensional.py:13:1           CELLS           U       CELLS = [[0, 0, 0, 0, 0,"
  - "cellular_automata/one_dimensional.py:36:14          neighbor        U       left_neighbor = 0 if i == 0 else cells"
  - "cellular_automata/one_dimensional.py:39:9           situation       U       situation = 7 - int(f\"{left_neighbor"
  - "cellular_automata/README.md:1:3         Cellular        U       # Cellular Automata"
  - "cellular_automata/README.md:1:12        Automata        U       # Cellular Automata"
  - "cellular_automata/README.md:3:68        matter          U       behavior of \"life\", no matter if it is a robot or"
  - "cellular_automata/README.md:4:6         usually         U       They usually follow simple rules"
  - "cellular_automata/README.md:4:14        follow          U       They usually follow simple rules but can"
  - "cellular_automata/README.md:4:21        simple          U       They usually follow simple rules but can lead to"
  - "cellular_automata/README.md:4:42        lead            U       simple rules but can lead to the creation of complex"
  - "cellular_automata/README.md:4:66        complex         U       lead to the creation of complex forms."
  - "cellular_automata/README.md:5:10        popular         U       The most popular cellular automaton is"
  - "cellular_automata/README.md:5:27        automaton       U       most popular cellular automaton is Conway's [Game of"
  - "cellular_automata/README.md:5:40        Conway's        U       cellular automaton is Conway's [Game of Life](https"
  - "cellular_automata/wa_tor.py:8:15        aims                            U       This solution aims to completely remove"
  - "cellular_automata/wa_tor.py:8:45        systematic                      U       completely remove any systematic approach"
  - "cellular_automata/wa_tor.py:9:27        utilise                         U       the Wa-Tor planet, and utilise fully random methods"
  - "cellular_automata/wa_tor.py:11:38       allows                          U       are a working set that allows the Wa-Tor planet"
  - "cellular_automata/wa_tor.py:23:1        PREY                            U       PREY_INITIAL_COUNT = 30"
  - "cellular_automata/wa_tor.py:23:50       prey                            U       The initial number of prey entities"
  - "cellular_automata/wa_tor.py:24:6        REPRODUCTION                    U       PREY_REPRODUCTION_TIME = 5 # The chronons"
  - "cellular_automata/wa_tor.py:24:35       chronons                        U       REPRODUCTION_TIME = 5 # The chronons before reproducing"
  - "cellular_automata/wa_tor.py:24:51       reproducing                     U       The chronons before reproducing"
  - "cellular_automata/wa_tor.py:26:1        PREDATOR                        U       PREDATOR_INITIAL_COUNT = 50"
  - "cellular_automata/wa_tor.py:26:54       predator                        U       The initial number of predator entities"
  - "cellular_automata/wa_tor.py:30:10       FOOD                            U       PREDATOR_FOOD_VALUE = 5"
  - "cellular_automata/wa_tor.py:33:41       organisms                       U       # The max number of organisms on the board"
  - "cellular_automata/wa_tor.py:34:45       unbalanced                      U       entities to delete from the unbalanced side"
  - "cellular_automata/wa_tor.py:35:8        UNBALANCED                      U       DELETE_UNBALANCED_ENTITIES = 50"
  - "cellular_automata/wa_tor.py:98:16       passed                          U       :attr time_passed: A function that is"
  - "cellular_automata/wa_tor.py:99:24       chronon                         U       time passes (a chronon) in order to visually"
  - "cellular_automata/wa_tor.py:101:52      progression                     U       to slow the algorithm progression."
  - "cellular_automata/wa_tor.py:125:11      Populate                        U       # Populate planet with predators"
  - "cellular_automata/wa_tor.py:125:32      predators                       U       Populate planet with predators and prey randomly"
  - "cellular_automata/wa_tor.py:125:51      randomly                        U       with predators and prey randomly"
  - "cellular_automata/wa_tor.py:134:9       Ease                            U       Ease of access for testing"
  - "cellular_automata/wa_tor.py:155:9       Adds                            U       Adds an entity, making sure"
  - "cellular_automata/wa_tor.py:155:25      making                          U       Adds an entity, making sure the entity does"
  - "cellular_automata/wa_tor.py:155:32      sure                            U       Adds an entity, making sure the entity does"
  - "cellular_automata/wa_tor.py:185:9       Balances                        U       Balances predators and preys"
  - "cellular_automata/wa_tor.py:185:32      preys                           U       Balances predators and preys so that prey"
  - "cellular_automata/wa_tor.py:187:27      reproduce                       U       space for them to reproduce."
  - "cellular_automata/wa_tor.py:219:9       Subtly                          U       Subtly different to the `move"
  - "cellular_automata/wa_tor.py:261:9       Attempts                        U       Attempts to move to an unoccupied"
  - "cellular_automata/wa_tor.py:261:32      unoccupied                      U       Attempts to move to an unoccupied neighbouring square"
  - "cellular_automata/wa_tor.py:261:43      neighbouring                    U       move to an unoccupied neighbouring square"
  - "cellular_automata/wa_tor.py:267:69      depicting                       U       like priority queue) depicting"
  - "cellular_automata/wa_tor.py:268:38      attempt                         U       order to attempt to move. Removes any"
  - "cellular_automata/wa_tor.py:268:55      Removes                         U       to attempt to move. Removes any systematic"
  - "cellular_automata/wa_tor.py:301:13      reproducable (reproducible)     U       >>> reproducable_entity = Entity(False"
  - "cellular_automata/wa_tor.py:320:11      Weight                          U       # Weight adjacent locations"
  - "cellular_automata/wa_tor.py:341:19      Reproduce                       U       # Reproduce in previous square"
  - "cellular_automata/wa_tor.py:356:32      survived                        U       2. Once a prey has survived a certain number of"
  - "cellular_automata/wa_tor.py:356:43      certain                         U       prey has survived a certain number of chronons it"
  - "cellular_automata/wa_tor.py:358:16      leaving                         U       leaving behind a new prey in"
  - "cellular_automata/wa_tor.py:358:24      behind                          U       leaving behind a new prey in its old"
  - "cellular_automata/wa_tor.py:376:9       occupied                        U       occupied_by_prey_coords: tuple"
  - "cellular_automata/wa_tor.py:388:50      deprived                        U       chronon, each predator is deprived of a unit of energy"
  - "cellular_automata/wa_tor.py:389:16      Upon                            U       3. Upon reaching zero energy"
  - "cellular_automata/wa_tor.py:389:21      reaching                        U       3. Upon reaching zero energy, a predator"
  - "cellular_automata/wa_tor.py:391:19      eats                            U       it eats the prey and earns a"
  - "cellular_automata/wa_tor.py:391:37      earns                           U       it eats the prey and earns a certain amount of"
  - "cellular_automata/wa_tor.py:416:20      onto                            U       # Move onto prey"
  - "cellular_automata/wa_tor.py:421:20      Eats                            U       # (4.) Eats the prey and earns energy"
  - "cellular_automata/wa_tor.py:433:9       Emulate                         U       Emulate time passing by looping"
  - "cellular_automata/wa_tor.py:433:22      passing                         U       Emulate time passing by looping `iteration"
  - "cellular_automata/wa_tor.py:443:56      randomness                      U       time to simulate true randomness"
  - "cellular_automata/wa_tor.py:444:20      removes                         U       # This removes the systematic approach"
  - "cellular_automata/wa_tor.py:477:19      visualisation                   U       # visualisation in a terminal or a graph"
  - "cellular_automata/wa_tor.py:481:5       visualise                       U       def visualise(wt: WaTor, iter_number"
  - "cellular_automata/wa_tor.py:483:5       Visually                        U       Visually displays the Wa-Tor"
  - "cellular_automata/wa_tor.py:483:14      displays                        U       Visually displays the Wa-Tor planet using"
  - "cellular_automata/wa_tor.py:485:26      intervals                       U       the Wa-Tor planet at intervals."
  - "cellular_automata/wa_tor.py:487:23      codes                           U       Uses ascii colour codes to colourfully display"
  - "cellular_automata/wa_tor.py:487:32      colourfully                     U       ascii colour codes to colourfully display the predators"
  - "cellular_automata/wa_tor.py:488:22      Prey                            U       * (0x60f197) Prey = ``#``"
  - "cellular_automata/wa_tor.py:489:21      Predator                        U       * (0xfffff) Predator = ``x``"
  - "cellular_automata/wa_tor.py:509:5       ansi                            U       ansi_colour_end = \"\\x1b["
  - "cellular_automata/wa_tor.py:537:30      able                            U       Block the thread to be able to visualise seeing"
  - "cellular_automata/wa_tor.py:537:48      seeing                          U       be able to visualise seeing the algorithm"
  - "ciphers/a1z26.py:3:1            corresponding       U       corresponding to the character's position"
  - "ciphers/affine_cipher.py:4:50           iterative           U       divisor import gcd_by_iterative"
  - "ciphers/affine_cipher.py:6:15           cryptomath          U       from . import cryptomath_module as cryptomath"
  - "ciphers/affine_cipher.py:19:33          Choose              U       \"A is set to 1. Choose different key\""
  - "ciphers/affine_cipher.py:34:22          relatively          U       \"are not relatively prime. Choose a different"
  - "ciphers/affine_cipher.py:40:63          monoalphabetic      U       cipher is a type of monoalphabetic '"
  - "ciphers/affine_cipher.py:41:32          substitution        U       'substitution cipher.')"
  - "ciphers/affine_cipher.py:42:35          Mpyx                U       I}p~{HL}Gp{vp pFsH}pxMpyxIx JHL O}F{~pvuOvF{FuF"
  - "ciphers/atbash.py:6:5           atbash          U       def atbash_slow(sequence: str)"
  - "ciphers/atbash.py:9:6           ZYXWVUT         U       'ZYXWVUT'"
  - "ciphers/atbash.py:45:20         performance     U       print(\"Running performance benchmarks...\")"
  - "ciphers/atbash.py:45:32         benchmarks      U       Running performance benchmarks...\")"
  - "ciphers/autokey.py:4:38         autoclave       U       cipher (also known as the autoclave cipher) is a cipher"
  - "ciphers/autokey.py:5:1          incorporates    U       incorporates the message (the plaintext"
  - "ciphers/autokey.py:6:57         fashion         U       message in some automated fashion,"
  - "ciphers/autokey.py:7:1          sometimes       U       sometimes by selecting certain"
  - "ciphers/autokey.py:7:14         selecting       U       sometimes by selecting certain letters from"
  - "ciphers/autokey.py:8:19         primer          U       by adding a short primer key to the front of"
  - "ciphers/autokey.py:14:62        returning       U       and `key` (string), returning the"
  - "ciphers/autokey.py:17:33        coffee          U       encrypt(\"hello world\", \"coffee\")"
  - "ciphers/autokey.py:18:6         jsqqs           U       'jsqqs avvwo'"
  - "ciphers/autokey.py:18:12        avvwo           U       'jsqqs avvwo'"
  - "ciphers/autokey.py:20:6         vvjfpk          U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/autokey.py:20:16        ohvp            U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/autokey.py:20:24        ddylsv          U       'vvjfpk wj ohvp su ddylsv'"
  - "ciphers/autokey.py:79:77        decrypted       U       string), returning the decrypted"
  - "ciphers/baconian_cipher.py:2:30         Baconian                        U       to encode and decode Baconian or Bacon's Cipher"
  - "ciphers/baconian_cipher.py:2:42         Bacon's                         U       and decode Baconian or Bacon's Cipher"
  - "ciphers/baconian_cipher.py:8:11         AAAAB                           U       \"b\": \"AAAAB\","
  - "ciphers/baconian_cipher.py:9:11         AAABA                           U       \"c\": \"AAABA\","
  - "ciphers/baconian_cipher.py:10:11        AAABB                           U       \"d\": \"AAABB\","
  - "ciphers/baconian_cipher.py:11:11        AABAA                           U       \"e\": \"AABAA\","
  - "ciphers/baconian_cipher.py:12:11        AABAB                           U       \"f\": \"AABAB\","
  - "ciphers/baconian_cipher.py:13:11        AABBA                           U       \"g\": \"AABBA\","
  - "ciphers/baconian_cipher.py:14:11        AABBB                           U       \"h\": \"AABBB\","
  - "ciphers/baconian_cipher.py:15:11        ABAAA                           U       \"i\": \"ABAAA\","
  - "ciphers/baconian_cipher.py:16:11        BBBAA                           U       \"j\": \"BBBAA\","
  - "ciphers/baconian_cipher.py:17:11        ABAAB                           U       \"k\": \"ABAAB\","
  - "ciphers/baconian_cipher.py:18:11        ABABA                           U       \"l\": \"ABABA\","
  - "ciphers/baconian_cipher.py:19:11        ABABB                           U       \"m\": \"ABABB\","
  - "ciphers/baconian_cipher.py:20:11        ABBAA                           U       \"n\": \"ABBAA\","
  - "ciphers/baconian_cipher.py:21:11        ABBAB                           U       \"o\": \"ABBAB\","
  - "ciphers/baconian_cipher.py:22:11        ABBBA                           U       \"p\": \"ABBBA\","
  - "ciphers/baconian_cipher.py:23:11        ABBBB                           U       \"q\": \"ABBBB\","
  - "ciphers/baconian_cipher.py:24:11        BAAAA                           U       \"r\": \"BAAAA\","
  - "ciphers/baconian_cipher.py:25:11        BAAAB                           U       \"s\": \"BAAAB\","
  - "ciphers/baconian_cipher.py:26:11        BAABA                           U       \"t\": \"BAABA\","
  - "ciphers/baconian_cipher.py:27:11        BAABB                           U       \"u\": \"BAABB\","
  - "ciphers/baconian_cipher.py:28:11        BBBAB                           U       \"v\": \"BBBAB\","
  - "ciphers/baconian_cipher.py:29:11        BABAA                           U       \"w\": \"BABAA\","
  - "ciphers/baconian_cipher.py:30:11        BABAB                           U       \"x\": \"BABAB\","
  - "ciphers/baconian_cipher.py:31:11        BABBA                           U       \"y\": \"BABBA\","
  - "ciphers/baconian_cipher.py:32:11        BABBB                           U       \"z\": \"BABBB\","
  - "ciphers/baconian_cipher.py:42:5         Encodes                         U       Encodes to Baconian cipher"
  - "ciphers/baconian_cipher.py:45:6         AABBBAABAAABABAABABAABBAB       U       'AABBBAABAAABABAABABAABBAB'"
  - "ciphers/baconian_cipher.py:47:32        BABAAABBABBAAAAABABAAAABB       U       AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB'"
  - "ciphers/baconian_cipher.py:64:5         Decodes                         U       Decodes from Baconian cipher"
  - "ciphers/base16.py:13:36         hexadecimal     U       turn each byte into its hexadecimal representation, make"
  - "ciphers/base16.py:14:38         everything      U       uppercase, and then join everything together and return"
  - "ciphers/base16.py:44:18         validity        U       # Check data validity, following RFC3548"
  - "ciphers/base32.py:13:7          JBSWY           U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:13:13         DPEBLW          U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:13:21         TMMQQQ          U       b'JBSWY3DPEBLW64TMMQQQ===='"
  - "ciphers/base32.py:15:7          GEZDGNBVGY      U       b'GEZDGNBVGY======'"
  - "ciphers/base32.py:17:7          ONXW            U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV"
  - "ciphers/base32.py:17:12         ZJANRXW         U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW"
  - "ciphers/base32.py:17:20         ZZAMNXW         U       b'ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="
  - "ciphers/base32.py:17:29         DMMV            U       ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='"
  - "ciphers/base32.py:17:38         UOJUW           U       ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY='"
  - "ciphers/base64_cipher.py:12:76          consider            U       of 6, for instance, consider the"
  - "ciphers/base64_cipher.py:15:15          seen                U       As can be seen above, 2 more binary"
  - "ciphers/base64_cipher.py:15:68          there's             U       should be added, so there's 4"
  - "ciphers/base64_cipher.py:16:5           possibilities       U       possibilities here: 00, 01, 10 or"
  - "ciphers/base64_cipher.py:17:5           That                U       That being said, Base64 encoding"
  - "ciphers/base64_cipher.py:17:53          Steganography       U       encoding can be used in Steganography to hide data in these"
  - "ciphers/base64_cipher.py:35:21          supplied            U       # Make sure the supplied data is a bytes-like"
  - "ciphers/base64_cipher.py:86:21          Incorrect           U       AssertionError: Incorrect padding"
  - "ciphers/beaufort_cipher.py:2:9          Mohit                   U       Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:2:15         Radadiya                U       Author: Mohit Radadiya"
  - "ciphers/beaufort_cipher.py:11:17        generates               U       # This function generates the key in"
  - "ciphers/beaufort_cipher.py:12:12        manner                  U       # a cyclic manner until it's length isn"
  - "ciphers/beaufort_cipher.py:16:27        GERMAN                  U       > generate_key(\"THE GERMAN ATTACK\",\"SECRET\")"
  - "ciphers/beaufort_cipher.py:17:6         SECRETSECRETSECRE       U       'SECRETSECRETSECRE'"
  - "ciphers/beaufort_cipher.py:36:10        PAYUWL                  U       'BDC PAYUWL JPAIYI'"
  - "ciphers/beaufort_cipher.py:36:17        JPAIYI                  U       'BDC PAYUWL JPAIYI'"
  - "ciphers/bifid.py:4:5            Bifid           U       The Bifid Cipher uses a Polybius"
  - "ciphers/bifid.py:4:25           Polybius        U       Bifid Cipher uses a Polybius Square to encipher a"
  - "ciphers/bifid.py:4:44           encipher        U       a Polybius Square to encipher a message in a way that"
  - "ciphers/bifid.py:5:10           fairly          U       makes it fairly difficult to decipher"
  - "ciphers/bifid.py:5:17           difficult       U       makes it fairly difficult to decipher without"
  - "ciphers/bifid.py:5:30           decipher        U       fairly difficult to decipher without knowing the"
  - "ciphers/bifid.py:5:47           knowing         U       to decipher without knowing the secret."
  - "ciphers/bifid.py:28:9           polybius        U       polybius square"
  - "ciphers/bifid.py:58:53          qtltbdxrxlk     U       encode('testmessage') == 'qtltbdxrxlk'"
  - "ciphers/bifid.py:78:34          reshape         U       second_step = first_step.reshape(2 * len(message))"
  - "ciphers/brute_force_caesar_cipher.py:6:18           TMDETUX         U       >>> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:6:26           PMDVU           U       >> decrypt('TMDETUX PMDVU')"
  - "ciphers/brute_force_caesar_cipher.py:7:5            Decryption      U       Decryption using Key #0: TMDETUX"
  - "ciphers/brute_force_caesar_cipher.py:8:30           SLCDSTW         U       Decryption using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:8:38           OLCUT           U       using Key #1: SLCDSTW OLCUT"
  - "ciphers/brute_force_caesar_cipher.py:9:30           RKBCRSV         U       Decryption using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:9:38           NKBTS           U       using Key #2: RKBCRSV NKBTS"
  - "ciphers/brute_force_caesar_cipher.py:10:30          QJABQRU         U       Decryption using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:10:38          MJASR           U       using Key #3: QJABQRU MJASR"
  - "ciphers/brute_force_caesar_cipher.py:11:30          PIZAPQT         U       Decryption using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:11:38          LIZRQ           U       using Key #4: PIZAPQT LIZRQ"
  - "ciphers/brute_force_caesar_cipher.py:12:30          OHYZOPS         U       Decryption using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:12:38          KHYQP           U       using Key #5: OHYZOPS KHYQP"
  - "ciphers/brute_force_caesar_cipher.py:13:30          NGXYNOR         U       Decryption using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:13:38          JGXPO           U       using Key #6: NGXYNOR JGXPO"
  - "ciphers/brute_force_caesar_cipher.py:14:30          MFWXMNQ         U       Decryption using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:14:38          IFWON           U       using Key #7: MFWXMNQ IFWON"
  - "ciphers/brute_force_caesar_cipher.py:15:30          LEVWLMP         U       Decryption using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:15:38          HEVNM           U       using Key #8: LEVWLMP HEVNM"
  - "ciphers/brute_force_caesar_cipher.py:16:30          KDUVKLO         U       Decryption using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:16:38          GDUML           U       using Key #9: KDUVKLO GDUML"
  - "ciphers/brute_force_caesar_cipher.py:17:31          JCTUJKN         U       Decryption using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:17:39          FCTLK           U       using Key #10: JCTUJKN FCTLK"
  - "ciphers/brute_force_caesar_cipher.py:18:31          IBSTIJM         U       Decryption using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:18:39          EBSKJ           U       using Key #11: IBSTIJM EBSKJ"
  - "ciphers/brute_force_caesar_cipher.py:19:31          HARSHIL         U       Decryption using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:19:39          DARJI           U       using Key #12: HARSHIL DARJI"
  - "ciphers/brute_force_caesar_cipher.py:20:31          GZQRGHK         U       Decryption using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:20:39          CZQIH           U       using Key #13: GZQRGHK CZQIH"
  - "ciphers/brute_force_caesar_cipher.py:21:31          FYPQFGJ         U       Decryption using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:21:39          BYPHG           U       using Key #14: FYPQFGJ BYPHG"
  - "ciphers/brute_force_caesar_cipher.py:22:31          EXOPEFI         U       Decryption using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:22:39          AXOGF           U       using Key #15: EXOPEFI AXOGF"
  - "ciphers/brute_force_caesar_cipher.py:23:31          DWNODEH         U       Decryption using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:23:39          ZWNFE           U       using Key #16: DWNODEH ZWNFE"
  - "ciphers/brute_force_caesar_cipher.py:24:31          CVMNCDG         U       Decryption using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:24:39          YVMED           U       using Key #17: CVMNCDG YVMED"
  - "ciphers/brute_force_caesar_cipher.py:25:31          BULMBCF         U       Decryption using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:25:39          XULDC           U       using Key #18: BULMBCF XULDC"
  - "ciphers/brute_force_caesar_cipher.py:26:31          ATKLABE         U       Decryption using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:26:39          WTKCB           U       using Key #19: ATKLABE WTKCB"
  - "ciphers/brute_force_caesar_cipher.py:27:31          ZSJKZAD         U       Decryption using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:27:39          VSJBA           U       using Key #20: ZSJKZAD VSJBA"
  - "ciphers/brute_force_caesar_cipher.py:28:31          YRIJYZC         U       Decryption using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:28:39          URIAZ           U       using Key #21: YRIJYZC URIAZ"
  - "ciphers/brute_force_caesar_cipher.py:29:31          XQHIXYB         U       Decryption using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:29:39          TQHZY           U       using Key #22: XQHIXYB TQHZY"
  - "ciphers/brute_force_caesar_cipher.py:30:31          WPGHWXA         U       Decryption using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:30:39          SPGYX           U       using Key #23: WPGHWXA SPGYX"
  - "ciphers/brute_force_caesar_cipher.py:31:31          VOFGVWZ         U       Decryption using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:31:39          ROFXW           U       using Key #24: VOFGVWZ ROFXW"
  - "ciphers/brute_force_caesar_cipher.py:32:31          UNEFUVY         U       Decryption using Key #25: UNEFUVY QNEWV"
  - "ciphers/brute_force_caesar_cipher.py:32:39          QNEWV           U       using Key #25: UNEFUVY QNEWV"
  - "ciphers/caesar_cipher.py:11:37          caesar          U       given string with the caesar cipher and returns the"
  - "ciphers/caesar_cipher.py:23:33          english         U       specified, the standard english alphabet with upper"
  - "ciphers/caesar_cipher.py:33:38          Julius          U       cipher is named after Julius Caesar who used it when"
  - "ciphers/caesar_cipher.py:33:45          Caesar          U       is named after Julius Caesar who used it when sending"
  - "ciphers/caesar_cipher.py:34:12          military        U       secret military messages to his troops"
  - "ciphers/caesar_cipher.py:34:37          troops          U       military messages to his troops. This is a simple substitutio"
  - "ciphers/caesar_cipher.py:40:14          captain         U       ``Hello, captain``"
  - "ciphers/caesar_cipher.py:47:71          become          U       a time. ``H`` would become ``J``,"
  - "ciphers/caesar_cipher.py:48:32          away            U       `J`` is two letters away, and so on. If the shift"
  - "ciphers/caesar_cipher.py:49:68          beginning       U       we just start at the beginning"
  - "ciphers/caesar_cipher.py:52:34          Jgnnq           U       final message would be ``Jgnnq, ecrvckp``"
  - "ciphers/caesar_cipher.py:52:41          ecrvckp         U       message would be ``Jgnnq, ecrvckp``"
  - "ciphers/caesar_cipher.py:54:5           Further         U       Further reading"
  - "ciphers/caesar_cipher.py:62:38          jumps           U       The quick brown fox jumps over the lazy dog',"
  - "ciphers/caesar_cipher.py:63:11          Cqks            U       'bpm yCqks jzwEv nwF rCuxA wDmz"
  - "ciphers/caesar_cipher.py:69:8           qtbjwhfxj       U       'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:69:18          fqumfgjy        U       'f qtbjwhfxj fqumfgjy'"
  - "ciphers/caesar_cipher.py:120:30         Please          U       the \"key\" or \"shift\". Please keep in mind, here we"
  - "ciphers/caesar_cipher.py:120:45         mind            U       shift\". Please keep in mind, here we will be focused"
  - "ciphers/caesar_cipher.py:120:67         focused         U       mind, here we will be focused on"
  - "ciphers/caesar_cipher.py:121:5          decryption      U       decryption."
  - "ciphers/caesar_cipher.py:135:14         doing           U       continue doing this. A letter like"
  - "ciphers/caesar_cipher.py:163:5          brute           U       def brute_force(input_string:"
  - "ciphers/caesar_cipher.py:185:5          Brute           U       Brute force is when a person"
  - "ciphers/caesar_cipher.py:185:34         intercepts      U       force is when a person intercepts a message or password"
  - "ciphers/caesar_cipher.py:186:57         easy            U       combination. This is easy with the caesar"
  - "ciphers/caesar_cipher.py:188:29         larger          U       complex the cipher, the larger amount of time it will"
  - "ciphers/caesar_cipher.py:191:58         simplicity      U       alphabet (``abcde``), for simplicity and we intercepted"
  - "ciphers/caesar_cipher.py:191:76         intercepted     U       for simplicity and we intercepted"
  - "ciphers/caesar_cipher.py:194:67         sense           U       combination that makes sense:"
  - "ciphers/caesar_cipher.py:234:48         chose           U       based on what the user chose"
  - "ciphers/caesar_cipher.py:236:36         please          U       print(\"Invalid choice, please enter a valid choice"
  - "ciphers/caesar_cipher.py:255:20         Goodbye         U       print(\"Goodbye.\")"
  - "ciphers/decrypt_caesar_with_chi_squared.py:5:29         squared         U       decrypt_caesar_with_chi_squared("
  - "ciphers/decrypt_caesar_with_chi_squared.py:8:5          frequencies     U       frequencies_dict: dict[str, float"
  - "ciphers/decrypt_caesar_with_chi_squared.py:20:31        commas          U       string separated by commas)"
  - "ciphers/decrypt_caesar_with_chi_squared.py:22:38        percentage      U       letters and values are a percentage representation of the"
  - "ciphers/decrypt_caesar_with_chi_squared.py:24:72        matters         U       `True`` if the case matters during"
  - "ciphers/decrypt_caesar_with_chi_squared.py:25:37        doesn't         U       decryption, ``False`` if it doesn't"
  - "ciphers/decrypt_caesar_with_chi_squared.py:29:16        likely          U       (`most_likely_cipher`, `most_likely"
  - "ciphers/decrypt_caesar_with_chi_squared.py:47:33        insecure        U       caesar cipher is a very insecure encryption algorithm"
  - "ciphers/decrypt_caesar_with_chi_squared.py:47:64        however         U       encryption algorithm, however it has"
  - "ciphers/decrypt_caesar_with_chi_squared.py:49:47        replaced        U       in the plain text is replaced by a character in the"
  - "ciphers/decrypt_caesar_with_chi_squared.py:55:22        ifmmp           U       | Cipher text: ``ifmmp``"
  - "ciphers/decrypt_caesar_with_chi_squared.py:58:16        imagine         U       As you can imagine, this doesn't provide"
  - "ciphers/decrypt_caesar_with_chi_squared.py:58:38        provide         U       imagine, this doesn't provide lots of security. In"
  - "ciphers/decrypt_caesar_with_chi_squared.py:58:67        fact            U       lots of security. In fact"
  - "ciphers/decrypt_caesar_with_chi_squared.py:59:5         decrypting      U       decrypting ciphertext by brute"
  - "ciphers/decrypt_caesar_with_chi_squared.py:59:45        extremely       U       ciphertext by brute-force is extremely easy even by hand. However"
  - "ciphers/decrypt_caesar_with_chi_squared.py:59:74        However         U       extremely easy even by hand. However"
  - "ciphers/decrypt_caesar_with_chi_squared.py:66:8         shows           U       it shows up compared to other"
  - "ciphers/decrypt_caesar_with_chi_squared.py:67:33        likelihood      U       representing the percentage likelihood). The most common letter"
  - "ciphers/decrypt_caesar_with_chi_squared.py:73:71        average         U       the combination, the average"
  - "ciphers/decrypt_caesar_with_chi_squared.py:74:42        appear          U       times the letter should appear the message is calculated"
  - "ciphers/decrypt_caesar_with_chi_squared.py:81:31        margin          U       Then, to calculate the margin of error (the amount"
  - "ciphers/decrypt_caesar_with_chi_squared.py:86:48        actually        U       of times the letter actually appears"
  - "ciphers/decrypt_caesar_with_chi_squared.py:87:21        predicted       U       - p be the predicted value of the number"
  - "ciphers/decrypt_caesar_with_chi_squared.py:89:50        referred        U       squared test result (referred to here as chi-squared"
  - "ciphers/decrypt_caesar_with_chi_squared.py:115:24       jhlzhy          U       ... 'dof pz aol jhlzhy jpwoly zv wvwbshy? pa"
  - "ciphers/decrypt_caesar_with_chi_squared.py:115:31       jpwoly          U       'dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv"
  - "ciphers/decrypt_caesar_with_chi_squared.py:115:41       wvwbshy         U       aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr"
  - "ciphers/decrypt_caesar_with_chi_squared.py:115:60       lhzf            U       zv wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:115:68       jyhjr           U       wvwbshy? pa pz avv lhzf av jyhjr!'"
  - "ciphers/decrypt_caesar_with_chi_squared.py:120:42       crybd           U       caesar_with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:120:48       cdbsxq          U       with_chi_squared('crybd cdbsxq')"
  - "ciphers/decrypt_caesar_with_chi_squared.py:123:42       Crybd           U       caesar_with_chi_squared('Crybd Cdbsxq', case_sensitive"
  - "ciphers/decrypt_caesar_with_chi_squared.py:123:48       Cdbsxq          U       with_chi_squared('Crybd Cdbsxq', case_sensitive=True"
  - "ciphers/decrypt_caesar_with_chi_squared.py:134:63       much            U       english language (how much they show up)"
  - "ciphers/decrypt_caesar_with_chi_squared.py:200:58       occurs          U       of times the letter occurs in the message"
  - "ciphers/decrypt_caesar_with_chi_squared.py:201:21       occurrences     U       occurrences = decrypted_with_shift"
  - "ciphers/decrypt_caesar_with_chi_squared.py:203:31       excepcted       U       # Get the excepcted amount of times the"
  - "ciphers/deterministic_miller_rabin.py:1:15          Nathan              U       \"\"\"Created by Nathan Damon, @bizzfitch on"
  - "ciphers/deterministic_miller_rabin.py:1:22          Damon               U       \"\"Created by Nathan Damon, @bizzfitch on github"
  - "ciphers/deterministic_miller_rabin.py:1:30          bizzfitch           U       Created by Nathan Damon, @bizzfitch on github"
  - "ciphers/deterministic_miller_rabin.py:2:10          miller              U       >>> test_miller_rabin()"
  - "ciphers/deterministic_miller_rabin.py:2:17          rabin               U       >>> test_miller_rabin()"
  - "ciphers/deterministic_miller_rabin.py:6:32          probable            U       rabin(n: int, allow_probable: bool = False) -> bool"
  - "ciphers/deterministic_miller_rabin.py:7:8           Deterministic       U       \"\"\"Deterministic Miller-Rabin algorithm"
  - "ciphers/deterministic_miller_rabin.py:7:22          Miller              U       \"\"\"Deterministic Miller-Rabin algorithm for"
  - "ciphers/deterministic_miller_rabin.py:7:29          Rabin               U       Deterministic Miller-Rabin algorithm for primes"
  - "ciphers/deterministic_miller_rabin.py:7:49          primes              U       Rabin algorithm for primes ~< 3.32e24."
  - "ciphers/deterministic_miller_rabin.py:9:10          numerical           U       Uses numerical analysis results to"
  - "ciphers/deterministic_miller_rabin.py:11:57         indicates           U       return value of True indicates that n is"
  - "ciphers/deterministic_miller_rabin.py:12:52         negatives           U       does not allow False negatives- a return value"
  - "ciphers/deterministic_miller_rabin.py:13:24         composite           U       of False is ALWAYS composite."
  - "ciphers/deterministic_miller_rabin.py:18:35         Since               U       integer to be tested. Since we usually care if a"
  - "ciphers/deterministic_miller_rabin.py:18:52         care                U       tested. Since we usually care if a number is prime"
  - "ciphers/deterministic_miller_rabin.py:19:40         raising             U       returns False instead of raising a ValueError."
  - "ciphers/deterministic_miller_rabin.py:21:9          Whether             U       Whether or not to test n above"
  - "ciphers/deterministic_miller_rabin.py:21:63         deterministic       U       the upper bound of the deterministic test."
  - "ciphers/deterministic_miller_rabin.py:35:53         quickly             U       1, 3, 7, 9): # can quickly check last digit"
  - "ciphers/deterministic_miller_rabin.py:40:48         probabilistic       U       probable=True to allow probabilistic test. \""
  - "ciphers/deterministic_miller_rabin.py:69:7          essentially         U       # essentially, solve for d * 2 **"
  - "ciphers/deterministic_miller_rabin.py:80:48         compositeness       U       loop will not determine compositeness"
  - "ciphers/deterministic_miller_rabin.py:84:53         evaluated           U       the above loop never evaluated to true,"
  - "ciphers/deterministic_miller_rabin.py:91:18         nontrivial          U       \"\"\"Testing a nontrivial (ends in 1, 3, 7, 9"
  - "ciphers/diffie_hellman.py:1:22          hexlify         U       from binascii import hexlify"
  - "ciphers/diffie_hellman.py:3:16          urandom         U       from os import urandom"
  - "ciphers/diffie_hellman.py:5:19          Modular         U       # RFC 3526 - More Modular Exponential (MODP) Diffie"
  - "ciphers/diffie_hellman.py:5:27          Exponential     U       3526 - More Modular Exponential (MODP) Diffie-Hellman"
  - "ciphers/diffie_hellman.py:5:40          MODP            U       Modular Exponential (MODP) Diffie-Hellman groups"
  - "ciphers/diffie_hellman.py:5:46          Diffie          U       Modular Exponential (MODP) Diffie-Hellman groups for"
  - "ciphers/diffie_hellman.py:5:53          Hellman         U       Exponential (MODP) Diffie-Hellman groups for"
  - "ciphers/diffie_hellman.py:196:11        generating      U       >>> # generating shared key using the"
  - "ciphers/diffie.py:4:10          primitive       U       def find_primitive(modulus: int) -> int"
  - "ciphers/diffie.py:4:20          modulus         U       def find_primitive(modulus: int) -> int | None"
  - "ciphers/diffie.py:15:30         Modulo          U       find_primitive(7) # Modulo 7 has primitive root"
  - "ciphers/elgamal_key_generator.py:11:10          written         U       # I have written my code naively same"
  - "ciphers/elgamal_key_generator.py:11:26          naively         U       have written my code naively same as definition of"
  - "ciphers/elgamal_key_generator.py:14:47          ISBN            U       Cryptography(CRC Press, ISBN : 0-8493-8523-7, October"
  - "ciphers/elgamal_key_generator.py:15:10          seems           U       # and it seems to run nicely!"
  - "ciphers/elgamal_key_generator.py:15:23          nicely          U       and it seems to run nicely!"
  - "ciphers/elgamal_key_generator.py:17:12          Generating      U       print(\"Generating primitive root of p"
  - "ciphers/elgamal_key_generator.py:41:72          privkey         U       path.exists(f\"{name}_privkey.txt\"):"
  - "ciphers/elgamal_key_generator.py:60:12          Making          U       print(\"Making key files...\")"
  - "ciphers/elgamal_key_generator.py:61:21          elgamal         U       make_key_files(\"elgamal\", 2048)"
  - "ciphers/enigma_machine2.py:3:3          Video                           U       | Video explanation: https:"
  - "ciphers/enigma_machine2.py:4:18         Numberphile's                   U       | Also check out Numberphile's and Computerphile's"
  - "ciphers/enigma_machine2.py:4:36         Computerphile's                 U       out Numberphile's and Computerphile's videos on this topic"
  - "ciphers/enigma_machine2.py:4:52         videos                          U       and Computerphile's videos on this topic"
  - "ciphers/enigma_machine2.py:6:33         enigma                          U       contains function ``enigma`` which emulates"
  - "ciphers/enigma_machine2.py:6:48         emulates                        U       function ``enigma`` which emulates"
  - "ciphers/enigma_machine2.py:7:5          famous                          U       the famous Enigma machine from"
  - "ciphers/enigma_machine2.py:7:12         Enigma                          U       the famous Enigma machine from WWII."
  - "ciphers/enigma_machine2.py:7:32         WWII                            U       Enigma machine from WWII."
  - "ciphers/enigma_machine2.py:13:28        rotors                          U       randomly generated rotors"
  - "ciphers/enigma_machine2.py:14:3         reflector                       U       - reflector (aka static rotor)"
  - "ciphers/enigma_machine2.py:14:25        rotor                           U       reflector (aka static rotor)"
  - "ciphers/enigma_machine2.py:17:12        Trapinch                        U       Created by TrapinchO"
  - "ciphers/enigma_machine2.py:22:1         Rotor                           U       RotorPositionT = tuple[int"
  - "ciphers/enigma_machine2.py:32:11        EGZWVONAHDCLFQMSIPJBYUKXTR      U       rotor1 = \"EGZWVONAHDCLFQMSIPJBYUKXTR\""
  - "ciphers/enigma_machine2.py:33:11        FOBHMDKEXQNRAULPGSJVTYICZW      U       rotor2 = \"FOBHMDKEXQNRAULPGSJVTYICZW\""
  - "ciphers/enigma_machine2.py:34:11        ZJXESIUQLHAVRMDOYGTNFWPBKC      U       rotor3 = \"ZJXESIUQLHAVRMDOYGTNFWPBKC\""
  - "ciphers/enigma_machine2.py:66:11        RMDJXFUWGISLHVTCQNKYPBEZOA      U       rotor4 = \"RMDJXFUWGISLHVTCQNKYPBEZOA\""
  - "ciphers/enigma_machine2.py:67:11        SGLCPQWZHKXAREONTFBVIYJUDM      U       rotor5 = \"SGLCPQWZHKXAREONTFBVIYJUDM\""
  - "ciphers/enigma_machine2.py:68:11        HVSICLTYKQUBXDWAJZOMFGPREN      U       rotor6 = \"HVSICLTYKQUBXDWAJZOMFGPREN\""
  - "ciphers/enigma_machine2.py:69:11        RZWQHFMVDBKICJLNTUXAGYPSOE      U       rotor7 = \"RZWQHFMVDBKICJLNTUXAGYPSOE\""
  - "ciphers/enigma_machine2.py:70:11        LFKIJODBEGAMQPXVUHYSTCZRWN      U       rotor8 = \"LFKIJODBEGAMQPXVUHYSTCZRWN\""
  - "ciphers/enigma_machine2.py:71:11        KOAEGVDHXPQZMLFTYWJNBRCIUS      U       rotor9 = \"KOAEGVDHXPQZMLFTYWJNBRCIUS\""
  - "ciphers/enigma_machine2.py:80:56        POLAND                          U       , rotor2, rotor3), 'POLAND')"
  - "ciphers/enigma_machine2.py:85:26        positon (position, positron)    U       param rotpos: rotor_positon"
  - "ciphers/enigma_machine2.py:87:16        plugb                           U       :param pb: plugb -> validated and transformed"
  - "ciphers/enigma_machine2.py:87:25        validated                       U       :param pb: plugb -> validated and transformed"
  - "ciphers/enigma_machine2.py:97:5         rotorpos                        U       rotorpos1, rotorpos2, rotorpos"
  - "ciphers/enigma_machine2.py:108:7        Validates                       U       # Validates string and returns dict"
  - "ciphers/enigma_machine2.py:109:5        pbdict                          U       pbdict = _plugboard(pb)"
  - "ciphers/enigma_machine2.py:109:15       plugboard                       U       pbdict = _plugboard(pb)"
  - "ciphers/enigma_machine2.py:114:16       pbstring                        U       def _plugboard(pbstring: str) -> dict[str, str"
  - "ciphers/enigma_machine2.py:118:21       PICTURES                        U       >>> _plugboard('PICTURES')"
  - "ciphers/enigma_machine2.py:123:25       stands                          U       In the code, ``pb`` stands for ``plugboard``"
  - "ciphers/enigma_machine2.py:128:36       converted                       U       dictionary containing converted pairs"
  - "ciphers/enigma_machine2.py:135:17       Plugboard                       U       msg = f\"Plugboard setting isn't type string"
  - "ciphers/enigma_machine2.py:146:5        tmppbl                          U       tmppbl = set()"
  - "ciphers/enigma_machine2.py:180:20       goes                            U       - Input letter goes into the plugboard."
  - "ciphers/enigma_machine2.py:184:75       shuffled                        U       symbol, where one is shuffled."
  - "ciphers/enigma_machine2.py:191:9        VKLEPDBGRNWTFCJOHQAMUZYIXS      U       | VKLEPDBGRNWTFCJOHQAMUZYIXS |"
  - "ciphers/enigma_machine2.py:194:19       switched                        U       There it is switched with paired symbol."
  - "ciphers/enigma_machine2.py:194:33       paired                          U       it is switched with paired symbol."
  - "ciphers/enigma_machine2.py:195:77       alphanet                        U       each with half of the alphanet."
  - "ciphers/enigma_machine2.py:201:9        ZYXWVUTSRQPON                   U       | ZYXWVUTSRQPON | so when E goes in"
  - "ciphers/enigma_machine2.py:209:50       pictures                        U       , (1, 2, 1), plugb='pictures')"
  - "ciphers/enigma_machine2.py:210:6        KORYH                           U       'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:210:12       JUHHI                           U       'KORYH JUHHI!'"
  - "ciphers/enigma_machine2.py:211:24       juhhi                           U       >>> enigma('KORYH, juhhi!', (1, 2, 1), plugb"
  - "ciphers/enigma_machine2.py:214:6        FPNCZ                           U       'FPNCZ QWOBU!'"
  - "ciphers/enigma_machine2.py:214:12       QWOBU                           U       'FPNCZ QWOBU!'"
  - "ciphers/enigma_machine2.py:272:21       resets                          U       # moves/resets rotor positions"
  - "ciphers/enigma_machine2.py:301:12       Decrypted                       U       print(\"Decrypted message:\", enigma(en"
  - "ciphers/fractionated_morse_cipher.py:2:24           Fractionated        U       Python program for the Fractionated Morse Cipher."
  - "ciphers/fractionated_morse_cipher.py:2:37           Morse               U       for the Fractionated Morse Cipher."
  - "ciphers/fractionated_morse_cipher.py:4:37           converts            U       actionated Morse cipher first converts the plaintext to Morse"
  - "ciphers/fractionated_morse_cipher.py:5:6            enciphers           U       then enciphers fixed-size blocks of"
  - "ciphers/fractionated_morse_cipher.py:6:6            procedure           U       This procedure means plaintext letters"
  - "ciphers/fractionated_morse_cipher.py:14:1           MORSE               U       MORSE_CODE_DICT = {"
  - "ciphers/fractionated_morse_cipher.py:44:19          trigrams            U       # Define possible trigrams of Morse code"
  - "ciphers/fractionated_morse_cipher.py:79:15          morse               U       def encode_to_morse(plaintext: str) -> str"
  - "ciphers/fractionated_morse_cipher.py:95:13          fractionated        U       def encrypt_fractionated_morse(plaintext: str"
  - "ciphers/fractionated_morse_cipher.py:107:10         ESOAVVLJRSSTRX      U       'ESOAVVLJRSSTRX'"
  - "ciphers/gronsfeld_cipher.py:4:5         gronsfeld       U       def gronsfeld(text: str, key: str"
  - "ciphers/gronsfeld_cipher.py:6:32        Gronsfeld       U       Encrypt plaintext with the Gronsfeld cipher"
  - "ciphers/gronsfeld_cipher.py:9:6         LFNPP           U       'LFNPP'"
  - "ciphers/gronsfeld_cipher.py:11:6        IGOMQ           U       'IGOMQ'"
  - "ciphers/hill_cipher.py:10:1         Your                    U       Your text is divided into"
  - "ciphers/hill_cipher.py:10:27        batches                 U       text is divided into batches of length N and converted"
  - "ciphers/hill_cipher.py:10:74        vectors                 U       converted to numerical vectors"
  - "ciphers/hill_cipher.py:13:17        multiplied              U       The key is then multiplied with the newly created"
  - "ciphers/hill_cipher.py:13:37        newly                   U       multiplied with the newly created batch vector"
  - "ciphers/hill_cipher.py:14:28        multiplication          U       encoded vector. After each multiplication modular 36 calculations"
  - "ciphers/hill_cipher.py:14:43        modular                 U       each multiplication modular 36 calculations are"
  - "ciphers/hill_cipher.py:15:25        bring                   U       the vectors so as to bring the numbers between"
  - "ciphers/hill_cipher.py:16:21        alphanumerics           U       their corresponding alphanumerics."
  - "ciphers/hill_cipher.py:19:1         encrypting              U       encrypting key modular 36. The"
  - "ciphers/hill_cipher.py:23:5         determinant             U       The determinant of the encryption key"
  - "ciphers/hill_cipher.py:26:26        considers               U       implementation only considers alphanumerics in the"
  - "ciphers/hill_cipher.py:30:12        might                   U       decrypting might be a little different"
  - "ciphers/hill_cipher.py:30:23        little                  U       decrypting might be a little different than the original"
  - "ciphers/hill_cipher.py:89:24        linalg                  U       det = round(np.linalg.det(self.encrypt_key"
  - "ciphers/hill_cipher.py:106:10       TESTINGHILLCIPHERR      U       'TESTINGHILLCIPHERR'"
  - "ciphers/hill_cipher.py:108:10       HELLOO                  U       'HELLOO'"
  - "ciphers/hill_cipher.py:122:10       WHXYJOLM                U       'WHXYJOLM9C6XT085LL'"
  - "ciphers/hill_cipher.py:202:12       Would                   U       print(\"Would you like to encrypt"
  - "ciphers/mixed_keyword_cypher.py:24:6        XKJGUFMJST      U       'XKJGUFMJST'"
  - "ciphers/mixed_keyword_cypher.py:34:10       determines      U       # it determines how we will map plaintext"
  - "ciphers/mixed_keyword_cypher.py:39:21       those           U       # the number of those unique characters will"
  - "ciphers/mixed_keyword_cypher.py:47:37       splitting       U       modified alphabet by splitting the shifted alphabet"
  - "ciphers/mono_alphabetic_ciphers.py:10:28        QWERTYUIOPASDFGHJKLZXCVBNM      U       translate_message(\"QWERTYUIOPASDFGHJKLZXCVBNM\",\"Hello World\",\"encrypt"
  - "ciphers/mono_alphabetic_ciphers.py:11:6         Pcssi                           U       'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:11:12        Bidsm                           U       'Pcssi Bidsm'"
  - "ciphers/mono_alphabetic_ciphers.py:42:6         Itssg                           U       'Itssg Vgksr'"
  - "ciphers/mono_alphabetic_ciphers.py:42:12        Vgksr                           U       'Itssg Vgksr'"
  - "ciphers/morse_code.py:20:6          Exclamation     U       } # Exclamation mark is not in ITU-R"
  - "ciphers/permutation_cipher.py:3:1           technique           U       technique that rearranges the"
  - "ciphers/permutation_cipher.py:3:16          rearranges          U       technique that rearranges the characters in a"
  - "ciphers/permutation_cipher.py:6:34          rearrangement       U       the order of character rearrangement."
  - "ciphers/permutation_cipher.py:29:11         sizes               U       block_sizes = ["
  - "ciphers/permutation_cipher.py:88:9          rearranged          U       rearranged_block = [block[digit"
  - "ciphers/playfair_cipher.py:4:5          Playfair                        U       The Playfair cipher was developed"
  - "ciphers/playfair_cipher.py:4:25         developed                       U       Playfair cipher was developed by Charles Wheatstone"
  - "ciphers/playfair_cipher.py:4:46         Wheatstone                      U       developed by Charles Wheatstone in 1854"
  - "ciphers/playfair_cipher.py:5:14         heavily                         U       It's use was heavily promotedby Lord Playfair"
  - "ciphers/playfair_cipher.py:5:22         promotedby                      U       It's use was heavily promotedby Lord Playfair, hence"
  - "ciphers/playfair_cipher.py:5:33         Lord                            U       was heavily promotedby Lord Playfair, hence its"
  - "ciphers/playfair_cipher.py:9:29         diagram                         U       was the first literal diagram substitution cipher"
  - "ciphers/playfair_cipher.py:10:12        manual                          U       2) It is a manual symmetric encryption"
  - "ciphers/playfair_cipher.py:13:38        encodes                         U       lementation in the code below encodes alphabets only."
  - "ciphers/playfair_cipher.py:13:46        alphabets                       U       the code below encodes alphabets only."
  - "ciphers/playfair_cipher.py:17:16        longer                          U       Playfair is no longer used by military forces"
  - "ciphers/playfair_cipher.py:17:40        forces                          U       longer used by military forces because of known"
  - "ciphers/playfair_cipher.py:18:1         insecurities                    U       insecurities and of the advent of"
  - "ciphers/playfair_cipher.py:18:25        advent                          U       insecurities and of the advent of automated encryption"
  - "ciphers/playfair_cipher.py:19:16        regarded                        U       This cipher is regarded as insecure since before"
  - "ciphers/playfair_cipher.py:27:5         chunker                         U       def chunker(seq: Iterable[str],"
  - "ciphers/playfair_cipher.py:36:19        dirty                           U       def prepare_input(dirty: str) -> str:"
  - "ciphers/playfair_cipher.py:38:33        casing                          U       the plaintext by up-casing it"
  - "ciphers/playfair_cipher.py:39:9         separating                      U       and separating repeated letters with"
  - "ciphers/playfair_cipher.py:63:24        interchangeably                 U       # I and J are used interchangeably to allow"
  - "ciphers/playfair_cipher.py:65:17        ABCDEFGHIKLMNOPQRSTUVWXYZ       U       alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\""
  - "ciphers/playfair_cipher.py:67:71        simpler                         U       actual encoding/decoding simpler"
  - "ciphers/playfair_cipher.py:70:63        ignoring                        U       they are in `alphabet` ignoring duplicates"
  - "ciphers/playfair_cipher.py:88:26        MONARCHY                        U       >> encode(\"Hello\", \"MONARCHY\")"
  - "ciphers/playfair_cipher.py:89:6         CFSUPM                          U       'CFSUPM'"
  - "ciphers/playfair_cipher.py:90:36        flank                           U       \"attack on the left flank\", \"EMERGENCY\")"
  - "ciphers/playfair_cipher.py:91:6         DQZSBYFSDZFMFNLOHFDRSG          U       'DQZSBYFSDZFMFNLOHFDRSG'"
  - "ciphers/playfair_cipher.py:92:17        Sorry                           U       >>> encode(\"Sorry!\", \"SPECIAL\")"
  - "ciphers/playfair_cipher.py:93:6         AVXETX                          U       'AVXETX'"
  - "ciphers/playfair_cipher.py:95:6         UMBENF                          U       'UMBENF'"
  - "ciphers/playfair_cipher.py:96:17        Photosynthesis                  U       >>> encode(\"Photosynthesis!\", \"THE SUN\")"
  - "ciphers/playfair_cipher.py:97:6         OEMHQHVCHESUKE                  U       'OEMHQHVCHESUKE'"
  - "ciphers/playfair_cipher.py:125:17       BMZFAZRZDH                      U       >>> decode(\"BMZFAZRZDH\", \"HAZARD\")"
  - "ciphers/playfair_cipher.py:125:31       HAZARD                          U       decode(\"BMZFAZRZDH\", \"HAZARD\")"
  - "ciphers/playfair_cipher.py:126:6        FIREHAZARD                      U       'FIREHAZARD'"
  - "ciphers/playfair_cipher.py:127:17       HNBWBPQT                        U       >>> decode(\"HNBWBPQT\", \"AUTOMOBILE\")"
  - "ciphers/playfair_cipher.py:128:6        DRIVINGX                        U       'DRIVINGX'"
  - "ciphers/playfair_cipher.py:129:17       SLYSSAQS                        U       >>> decode(\"SLYSSAQS\", \"CASTLE\")"
  - "ciphers/playfair_cipher.py:130:6        ATXTACKX                        U       'ATXTACKX'"
  - "ciphers/playfair_cipher.py:158:39       THANKS                          U       Encoded:\", encode(\"BYE AND THANKS\", \"GREETING\"))"
  - "ciphers/playfair_cipher.py:158:49       GREETING                        U       encode(\"BYE AND THANKS\", \"GREETING\"))"
  - "ciphers/playfair_cipher.py:159:31       CXRBANRLBALQ                    U       \"Decoded:\", decode(\"CXRBANRLBALQ\", \"GREETING\"))"
  - "ciphers/porta_cipher.py:2:29        NOPQRSTUVWXYZ       U       (\"ABCDEFGHIJKLM\", \"NOPQRSTUVWXYZ\"),"
  - "ciphers/porta_cipher.py:4:29        ZNOPQRSTUVWXY       U       (\"ABCDEFGHIJKLM\", \"ZNOPQRSTUVWXY\"),"
  - "ciphers/porta_cipher.py:6:29        YZNOPQRSTUVWX       U       (\"ABCDEFGHIJKLM\", \"YZNOPQRSTUVWX\"),"
  - "ciphers/porta_cipher.py:8:29        XYZNOPQRSTUVW       U       (\"ABCDEFGHIJKLM\", \"XYZNOPQRSTUVW\"),"
  - "ciphers/porta_cipher.py:10:29       WXYZNOPQRSTUV       U       (\"ABCDEFGHIJKLM\", \"WXYZNOPQRSTUV\"),"
  - "ciphers/porta_cipher.py:12:29       VWXYZNOPQRSTU       U       (\"ABCDEFGHIJKLM\", \"VWXYZNOPQRSTU\"),"
  - "ciphers/porta_cipher.py:14:29       UVWXYZNOPQRST       U       (\"ABCDEFGHIJKLM\", \"UVWXYZNOPQRST\"),"
  - "ciphers/porta_cipher.py:16:29       TUVWXYZNOPQRS       U       (\"ABCDEFGHIJKLM\", \"TUVWXYZNOPQRS\"),"
  - "ciphers/porta_cipher.py:18:29       STUVWXYZNOPQR       U       (\"ABCDEFGHIJKLM\", \"STUVWXYZNOPQR\"),"
  - "ciphers/porta_cipher.py:20:29       RSTUVWXYZNOPQ       U       (\"ABCDEFGHIJKLM\", \"RSTUVWXYZNOPQ\"),"
  - "ciphers/porta_cipher.py:22:29       QRSTUVWXYZNOP       U       (\"ABCDEFGHIJKLM\", \"QRSTUVWXYZNOP\"),"
  - "ciphers/porta_cipher.py:24:29       PQRSTUVWXYZNO       U       (\"ABCDEFGHIJKLM\", \"PQRSTUVWXYZNO\"),"
  - "ciphers/porta_cipher.py:26:29       OPQRSTUVWXYZN       U       (\"ABCDEFGHIJKLM\", \"OPQRSTUVWXYZN\"),"
  - "ciphers/porta_cipher.py:33:25       marvin              U       >>> generate_table('marvin') # doctest: +NORMALIZE"
  - "ciphers/porta_cipher.py:43:28       jessica             U       encrypt('marvin', 'jessica')"
  - "ciphers/porta_cipher.py:44:6        QRACRWU             U       'QRACRWU'"
  - "ciphers/porta_cipher.py:50:23       opponent            U       cipher += get_opponent(table[count], char)"
  - "ciphers/porta_cipher.py:58:6        JESSICA             U       'JESSICA'"
  - "ciphers/porta_cipher.py:89:26       Fist                U       doctest.testmod() # Fist ensure that all our"
  - "ciphers/rabin_miller.py:1:3         Primality       U       # Primality Testing with the Rabin"
  - "ciphers/rail_fence_cipher.py:6:5            Shuffles        U       Shuffles the character of a string"
  - "ciphers/rail_fence_cipher.py:7:30           dependent       U       grid (the height is dependent on the key) in a zigzag"
  - "ciphers/rail_fence_cipher.py:7:57           zigzag          U       dependent on the key) in a zigzag"
  - "ciphers/rail_fence_cipher.py:11:10          olordll         U       'HWe olordll'"
  - "ciphers/rail_fence_cipher.py:32:42          puts            U       position % (lowest * 2) # puts it in bounds"
  - "ciphers/rail_fence_cipher.py:43:47          fills           U       based on the key and fills it in with"
  - "ciphers/rail_fence_cipher.py:74:9           splice          U       splice = input_string[counter"
  - "ciphers/rail_fence_cipher.py:78:27          reads           U       output_string = \"\" # reads as zigzag"
  - "ciphers/rail_fence_cipher.py:87:5           bruteforce      U       def bruteforce(input_string: str)"
  - "ciphers/rail_fence_cipher.py:88:33          guessing        U       decrypt function by guessing every key"
  - "ciphers/README.md:1:3           Ciphers         U       # Ciphers"
  - "ciphers/README.md:3:21          protect         U       Ciphers are used to protect data from people that"
  - "ciphers/README.md:3:88          everywhere      U       to have it. They are everywhere on the internet to protect"
  - "ciphers/rot13.py:1:5            dencrypt    U       def dencrypt(s: str, n: int = 13"
  - "ciphers/rot13.py:8:9            frperg      U       \"Zl frperg onax nppbhag ahzore"
  - "ciphers/rot13.py:8:16           onax        U       \"Zl frperg onax nppbhag ahzore vf 1"
  - "ciphers/rot13.py:8:21           nppbhag     U       \"Zl frperg onax nppbhag ahzore vf 173-52946"
  - "ciphers/rot13.py:8:29           ahzore      U       frperg onax nppbhag ahzore vf 173-52946 fb qba"
  - "ciphers/rot13.py:8:58           gryy        U       vf 173-52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rot13.py:8:63           nalbar      U       52946 fb qba'g gryy nalbar!!\""
  - "ciphers/rsa_cipher.py:81:33         Either          U       \"than the key size. Either decrease the block size"
  - "ciphers/rsa_cipher.py:105:33        Were            U       \"than the key size. Were the correct key file"
  - "ciphers/rsa_cipher.py:130:17        Encrypting      U       print(f\"Encrypting and writing to {filename"
  - "ciphers/rsa_factorization.py:4:17           efficiently     U       The program can efficiently factor RSA prime number"
  - "ciphers/rsa_factorization.py:10:23          minutes         U       large number can take minutes to factor, therefore"
  - "ciphers/rsa_factorization.py:10:42          therefore       U       take minutes to factor, therefore are not included in"
  - "ciphers/rsa_factorization.py:10:60          included        U       factor, therefore are not included in doctest."
  - "ciphers/rsa_factorization.py:19:5           rsafactor       U       def rsafactor(d: int, e: int, n: int"
  - "ciphers/rsa_factorization.py:21:31          factors         U       function returns the factors of N, where p*q=N"
  - "ciphers/rsa_factorization.py:26:52          suggests        U       public key. As its name suggests, it is public and is"
  - "ciphers/rsa_factorization.py:28:79          recipient       U       is known only to the recipient"
  - "ciphers/rsa_factorization.py:54:35          divisible       U       break # t is not divisible by 2, break and choose"
  - "ciphers/rsa_key_generator.py:18:30          repeatability       U       random.seed(0) # for repeatability"
  - "ciphers/running_key_cipher.py:8:5           Encrypts    U       Encrypts the plaintext using"
  - "ciphers/running_key_cipher.py:10:39         piece       U       The running key (long piece of text)."
  - "ciphers/running_key_cipher.py:31:5          Decrypts    U       Decrypts the ciphertext using"
  - "ciphers/running_key_cipher.py:54:29         duck        U       key = \"How does the duck know that? said Victor"
  - "ciphers/running_key_cipher.py:54:50         Victor      U       duck know that? said Victor\""
  - "ciphers/shuffled_shift_cipher.py:7:7            Shuffled                        U       class ShuffledShiftCipher:"
  - "ciphers/shuffled_shift_cipher.py:13:33          English                         U       uppercase letters of the English alphabet"
  - "ciphers/shuffled_shift_cipher.py:18:46          pivoted                         U       in the plaintext, is pivoted and shuffled. Refer"
  - "ciphers/shuffled_shift_cipher.py:19:50          shuffling                       U       learn more about the shuffling."
  - "ciphers/shuffled_shift_cipher.py:25:28          possess                         U       Each cipher object can possess an optional argument"
  - "ciphers/shuffled_shift_cipher.py:33:9           Initializes                     U       Initializes a cipher object with"
  - "ciphers/shuffled_shift_cipher.py:35:15          creating                        U       while creating the object"
  - "ciphers/shuffled_shift_cipher.py:49:9           Mutates                         U       Mutates the list by changing"
  - "ciphers/shuffled_shift_cipher.py:49:55          alternate                       U       changing the sign of each alternate element"
  - "ciphers/shuffled_shift_cipher.py:52:22          mutated                         U       :return: the mutated list"
  - "ciphers/shuffled_shift_cipher.py:66:10          rtype                           U       :rtype: list"
  - "ciphers/shuffled_shift_cipher.py:75:51          pivoting                        U       character choices by pivoting at breakpoints"
  - "ciphers/shuffled_shift_cipher.py:80:17          CAMERA                          U       and CAMERA is the passcode"
  - "ciphers/shuffled_shift_cipher.py:82:38          MLKJIHGF                        U       shuffled parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:47          RQPON                           U       parts: [A,CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:82:53          ZYXWVUTS                        U       CB,ED,MLKJIHGF,RQPON,ZYXWVUTS]"
  - "ciphers/shuffled_shift_cipher.py:83:35          ACBEDMLKJIHGFRQPONZYXWVUTS      U       shuffled __key_list : ACBEDMLKJIHGFRQPONZYXWVUTS"
  - "ciphers/shuffled_shift_cipher.py:85:9           Shuffling                       U       Shuffling only 26 letters of the"
  - "ciphers/shuffled_shift_cipher.py:87:24          including                       U       97 characters (including letters, digits, punctuation"
  - "ciphers/shuffled_shift_cipher.py:88:9           thereby                         U       thereby creating a possibility"
  - "ciphers/shuffled_shift_cipher.py:88:28          possibility                     U       thereby creating a possibility of 97! combinations"
  - "ciphers/shuffled_shift_cipher.py:89:12          itself                          U       in itself), thus diminishing the"
  - "ciphers/shuffled_shift_cipher.py:89:21          thus                            U       in itself), thus diminishing the possibility"
  - "ciphers/shuffled_shift_cipher.py:89:26          diminishing                     U       in itself), thus diminishing the possibility of a"
  - "ciphers/shuffled_shift_cipher.py:90:35          introduce                       U       Moreover, shift keys even introduce a multiple of 26 for"
  - "ciphers/shuffled_shift_cipher.py:93:36          nearly                          U       list_options contain nearly all printable except"
  - "ciphers/shuffled_shift_cipher.py:102:22         pivot                           U       # points and pivot each substring"
  - "ciphers/shuffled_shift_cipher.py:129:18         shifting                        U       Performs shifting of the encoded_message"
  - "ciphers/shuffled_shift_cipher.py:132:44         Xyqe                            U       ShuffledShiftCipher('4PYIXyqeQZr44')"
  - "ciphers/simple_keyword_cypher.py:3:23           alphabetic      U       Removes duplicate alphabetic characters in a keyword"
  - "ciphers/simple_keyword_cypher.py:4:11           appearance      U       first appearance)."
  - "ciphers/simple_keyword_cypher.py:13:12          dups            U       key_no_dups = \"\""
  - "ciphers/simple_keyword_cypher.py:48:5           Enciphers       U       Enciphers a message given a cipher"
  - "ciphers/simple_keyword_cypher.py:52:14          enciphered      U       :return: enciphered string"
  - "ciphers/simple_keyword_cypher.py:55:6           CYJJM           U       'CYJJM VMQJB!!'"
  - "ciphers/simple_keyword_cypher.py:55:12          VMQJB           U       'CYJJM VMQJB!!'"
  - "ciphers/simple_keyword_cypher.py:62:5           Deciphers       U       Deciphers a message given a cipher"
  - "ciphers/simple_keyword_cypher.py:66:14          Deciphered      U       :return: Deciphered string"
  - "ciphers/simple_keyword_cypher.py:79:5           Handles         U       Handles I/O"
  - "ciphers/simple_keyword_cypher.py:85:21          Encipher        U       option = input(\"Encipher or decipher? E/D:\")"
  - "ciphers/simple_substitution_cipher.py:9:12          LFWOAYUISVKMNXPBDCRJTQEGHZ      U       key = \"LFWOAYUISVKMNXPBDCRJTQEGHZ\""
  - "ciphers/simple_substitution_cipher.py:10:5          resp                            U       resp = input(\"Encrypt/Decrypt"
  - "ciphers/simple_substitution_cipher.py:36:56         Harshil                         U       LFWOAYUISVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:36:64         Darji                           U       SVKMNXPBDCRJTQEGHZ', 'Harshil Darji')"
  - "ciphers/simple_substitution_cipher.py:37:6          Ilcrism                         U       'Ilcrism Olcvs'"
  - "ciphers/simple_substitution_cipher.py:37:14         Olcvs                           U       'Ilcrism Olcvs'"
  - "ciphers/transposition_cipher_encrypt_decrypt_file.py:9:21           prehistoric     U       input_file = \"./prehistoric_men.txt\""
  - "ciphers/transposition_cipher.py:5:53        determined      U       shifted a certain number(determined by the key) that"
  - "ciphers/transposition_cipher.py:6:46        permuted        U       that results in the permuted text, known as the encrypted"
  - "ciphers/transposition_cipher.py:7:40        demonstrated    U       transposition cipher demonstrated under is the ROUTE cipher"
  - "ciphers/transposition_cipher.py:28:6        Hlia            U       'Hlia rDsahrij'"
  - "ciphers/transposition_cipher.py:28:12       Dsahrij         U       'Hlia rDsahrij'"
  - "ciphers/transposition_cipher.py:46:9        shaded          U       num_shaded_boxes = (num_cols *"
  - "ciphers/trifid_cipher.py:2:5            trifid                          U       The trifid cipher uses a table"
  - "ciphers/trifid_cipher.py:2:35           fractionate                     U       cipher uses a table to fractionate each plaintext letter"
  - "ciphers/trifid_cipher.py:3:1            mixes                           U       mixes the constituents of"
  - "ciphers/trifid_cipher.py:3:11           constituents                    U       mixes the constituents of the trigrams, and"
  - "ciphers/trifid_cipher.py:25:5           Arrange                         U       Arrange the triagram value of"
  - "ciphers/trifid_cipher.py:25:17          triagram                        U       Arrange the triagram value of each letter"
  - "ciphers/trifid_cipher.py:44:56          respective                      U       input string into their respective trigram values, join"
  - "ciphers/trifid_cipher.py:66:42          triagrams                       U       function that generates the triagrams and assigns each letter"
  - "ciphers/trifid_cipher.py:66:56          assigns                         U       generates the triagrams and assigns each letter of the"
  - "ciphers/trifid_cipher.py:68:61          confirming                      U       to_character`) after confirming if the"
  - "ciphers/trifid_cipher.py:72:22          IAMABOY                         U       >>> expected = ('IAMABOY','ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  - "ciphers/trifid_cipher.py:86:54          Vwxyzzwwtyyujjgfd               U       abCdeFghijkLmnopqrStuVwxyzzwwtyyujjgfd')"
  - "ciphers/trifid_cipher.py:91:18          punctuations                    U       Testing with punctuations that are not in the"
  - "ciphers/trifid_cipher.py:115:16         dictionares                     U       # Generate dictionares"
  - "ciphers/trifid_cipher.py:131:53         punctuatuions                   U       the trifid_cipher. Any punctuatuions that"
  - "ciphers/trifid_cipher.py:139:75         whilst                          U       you want in a group whilst"
  - "ciphers/trifid_cipher.py:143:6          BCDGBQY                         U       'BCDGBQY'"
  - "ciphers/trifid_cipher.py:148:29         aide                            U       encrypt_message(' aide toi le c iel ta"
  - "ciphers/trifid_cipher.py:149:10         FELIXMARDSTBCGHJKNOPQUVWYZ      U       ... 'FELIXMARDSTBCGHJKNOPQUVWYZ+',5)"
  - "ciphers/trifid_cipher.py:150:6          FMJFVOISSUFTFPUFEQQC            U       'FMJFVOISSUFTFPUFEQQC'"
  - "ciphers/trifid_cipher.py:189:5          Decrypting                      U       Decrypting with your own alphabet"
  - "ciphers/trifid_cipher.py:192:6          AIDETOILECIELTAIDERA            U       'AIDETOILECIELTAIDERA'"
  - "ciphers/trifid_cipher.py:212:28         WALL                            U       msg = \"DEFEND THE EAST WALL OF THE CASTLE.\""
  - "ciphers/trifid_cipher.py:213:39         EPSDUCVWYM                      U       encrypt_message(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/trifid_cipher.py:213:50         ZLKXNBTFGORIJHAQ                U       message(msg, \"EPSDUCVWYM.ZLKXNBTFGORIJHAQ\")"
  - "ciphers/vernam_cipher.py:1:5            vernam      U       def vernam_encrypt(plaintext: str"
  - "ciphers/vernam_cipher.py:4:6            RIJVS       U       'RIJVS'"
  - "ciphers/vigenere_cipher.py:22:63        Dharmaj     U       is Harshil Darji from Dharmaj.')"
  - "ciphers/vigenere_cipher.py:23:6         Akij        U       'Akij ra Odrjqqs Gaisq muod"
  - "ciphers/vigenere_cipher.py:23:14        Odrjqqs     U       'Akij ra Odrjqqs Gaisq muod Mphumrs."
  - "ciphers/vigenere_cipher.py:23:22        Gaisq       U       'Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:28        muod        U       Akij ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/vigenere_cipher.py:23:33        Mphumrs     U       ra Odrjqqs Gaisq muod Mphumrs.'"
  - "ciphers/xor_cipher.py:2:19          Bender          U       author: Christian Bender"
  - "ciphers/xor_cipher.py:7:6           useful          U       some useful methods for encrypting"
  - "ciphers/xor_cipher.py:45:34         hallo           U       XORCipher().encrypt(\"hallo welt\", 1)"
  - "ciphers/xor_cipher.py:45:40         welt            U       XORCipher().encrypt(\"hallo welt\", 1)"
  - "ciphers/xor_cipher.py:49:34         HALLO           U       XORCipher().encrypt(\"HALLO WELT\", 32)"
  - "ciphers/xor_cipher.py:49:40         WELT            U       XORCipher().encrypt(\"HALLO WELT\", 32)"
  - "ciphers/xor_cipher.py:63:31         appropriate     U       make sure key is an appropriate size"
  - "ciphers/xor_cipher.py:116:16        vdmu            U       'i`mmn!vdmu'"
  - "ciphers/xor_cipher.py:202:66        fout            U       encrypt.out\", \"w+\") as fout:"
  - "ciphers/xor_cipher.py:263:24        unsuccessful    U       print(\"encrypt unsuccessful\")"
  - "compression/burrows_wheeler.py:4:5          Burrows             U       The Burrows-Wheeler transform (BWT"
  - "compression/burrows_wheeler.py:4:13         Wheeler             U       The Burrows-Wheeler transform (BWT, also"
  - "compression/burrows_wheeler.py:6:27         tends               U       compression, since it tends to be easy to compress"
  - "compression/burrows_wheeler.py:8:27         importantly         U       length encoding. More importantly, the transformation"
  - "compression/burrows_wheeler.py:9:9          needing             U       without needing to store any additional"
  - "compression/burrows_wheeler.py:9:30         additional          U       needing to store any additional data except the position"
  - "compression/burrows_wheeler.py:10:56        improving           U       thus a \"free\" method of improving the efficiency"
  - "compression/burrows_wheeler.py:10:70        efficiency          U       method of improving the efficiency"
  - "compression/burrows_wheeler.py:11:57        computation         U       costing only some extra computation."
  - "compression/burrows_wheeler.py:24:9         rotations           U       def all_rotations(s: str) -> list[str"
  - "compression/burrows_wheeler.py:26:39        rotated             U       string that will be rotated len(s) times."
  - "compression/burrows_wheeler.py:31:25        BANANA              U       >>> all_rotations(\"^BANANA|\") # doctest: +NORMALIZE"
  - "compression/burrows_wheeler.py:32:31        ANANA               U       BANANA|', 'BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA"
  - "compression/burrows_wheeler.py:32:43        NANA                U       BANANA|^', 'ANANA|^B', 'NANA|^BA', 'ANA|^BAN', 'NA"
  - "compression/burrows_wheeler.py:32:71        BANA                U       BA', 'ANA|^BAN', 'NA|^BANA',"
  - "compression/burrows_wheeler.py:33:9         BANAN               U       'A|^BANAN', '|^BANANA']"
  - "compression/burrows_wheeler.py:34:33        casa                U       rotations(\"a_asa_da_casa\") # doctest: +NORMALIZE"
  - "compression/burrows_wheeler.py:35:32        casaa               U       asa_da_casa', '_asa_da_casaa', 'asa_da_casaa_',"
  - "compression/burrows_wheeler.py:37:40        asaa                U       , 'casaa_asa_da_', 'asaa_asa_da_c', 'saa_asa"
  - "compression/burrows_wheeler.py:39:24        panamabanana        U       >>> all_rotations(\"panamabanana\") # doctest: +NORMALIZE"
  - "compression/burrows_wheeler.py:40:23        anamabananap        U       ['panamabanana', 'anamabananap', 'namabananapa', 'amabananap"
  - "compression/burrows_wheeler.py:40:39        namabananapa        U       namabanana', 'anamabananap', 'namabananapa', 'amabananapan',"
  - "compression/burrows_wheeler.py:40:55        amabananapan        U       amabananap', 'namabananapa', 'amabananapan',"
  - "compression/burrows_wheeler.py:41:6         mabananapana        U       'mabananapana', 'abananapanam', 'bananapana"
  - "compression/burrows_wheeler.py:41:22        abananapanam        U       'mabananapana', 'abananapanam', 'bananapanama', 'ananapanam"
  - "compression/burrows_wheeler.py:41:38        bananapanama        U       bananapana', 'abananapanam', 'bananapanama', 'ananapanamab',"
  - "compression/burrows_wheeler.py:41:54        ananapanamab        U       ananapanam', 'bananapanama', 'ananapanamab',"
  - "compression/burrows_wheeler.py:42:6         nanapanamaba        U       'nanapanamaba', 'anapanamaban', 'napanamaba"
  - "compression/burrows_wheeler.py:42:22        anapanamaban        U       'nanapanamaba', 'anapanamaban', 'napanamabana', 'apanamaban"
  - "compression/burrows_wheeler.py:42:38        napanamabana        U       napanamaba', 'anapanamaban', 'napanamabana', 'apanamabanan']"
  - "compression/burrows_wheeler.py:42:54        apanamabanan        U       apanamaban', 'napanamabana', 'apanamabanan']"
  - "compression/burrows_wheeler.py:57:25        composed            U       :return: the string composed of the last char of"
  - "compression/burrows_wheeler.py:66:21        aaaadss             U       {'bwt_string': 'aaaadss_c__aa', 'idx_original"
  - "compression/burrows_wheeler.py:68:21        mnpbnnaaaaaa        U       {'bwt_string': 'mnpbnnaaaaaa', 'idx_original_string"
  - "compression/burrows_wheeler.py:84:55        alphabetically      U       list of rotations in alphabetically order"
  - "compression/burrows_wheeler.py:98:66        executed            U       string when bwt was executed"
  - "compression/burrows_wheeler.py:123:70       passive             U       type must be int or passive"
  - "compression/burrows_wheeler.py:175:11       Reversing           U       f\"Reversing Burrows Wheeler transform"
  - "compression/huffman.py:41:13        Huffman         U       for the Huffman Tree."
  - "compression/huffman.py:56:5         Recursively     U       Recursively traverse the Huffman"
  - "compression/huffman.py:69:5         huffman         U       def huffman(file_path: str) -> None"
  - "compression/lempel_ziv_decompress.py:2:39           Lempel              U       several implementations of Lempel-Ziv-Welch decompression"
  - "compression/lempel_ziv_decompress.py:2:50           Welch               U       implementations of Lempel-Ziv-Welch decompression algorithm"
  - "compression/lempel_ziv_decompress.py:2:56           decompression       U       of Lempel-Ziv-Welch decompression algorithm"
  - "compression/lempel_ziv_decompress.py:12:5           Reads               U       Reads given file as bytes"
  - "compression/lempel_ziv_decompress.py:23:25          accessible          U       print(\"File not accessible\")"
  - "compression/lempel_ziv_decompress.py:29:5           Decompresses        U       Decompresses given data_bits using"
  - "compression/lempel_ziv_decompress.py:59:5           Writes              U       Writes given to_write string"
  - "compression/lempel_ziv_decompress.py:59:47          consist             U       string (should only consist of 0's and 1's) as bytes"
  - "compression/lempel_ziv_decompress.py:64:39          opened              U       file_path, \"wb\") as opened_file:"
  - "compression/lempel_ziv_decompress.py:102:24         decompresses        U       Reads source file, decompresses it and writes the result"
  - "compression/lempel_ziv_decompress.py:102:44         writes              U       decompresses it and writes the result in destination"
  - "compression/lempel_ziv.py:46:5          Compresses      U       Compresses given data_bits using"
  - "compression/lempel_ziv.py:76:46         Elias           U       length in front (using Elias gamma coding) of the"
  - "compression/lempel_ziv.py:115:24        compresses      U       Reads source file, compresses it and writes the compressed"
  - "compression/lz77.py:3:3         lossless                U       - lossless data compression published"
  - "compression/lz77.py:3:42        papers                  U       compression published in papers by Abraham Lempel and"
  - "compression/lz77.py:3:52        Abraham                 U       published in papers by Abraham Lempel and Jacob Ziv"
  - "compression/lz77.py:3:71        Jacob                   U       by Abraham Lempel and Jacob Ziv in 1977"
  - "compression/lz77.py:4:24        sliding                 U       also known as LZ1 or sliding-window compression"
  - "compression/lz77.py:5:12        basis                   U       - form the basis for many variations"
  - "compression/lz77.py:5:27        variations              U       form the basis for many variations including LZW, LZSS"
  - "compression/lz77.py:5:53        LZSS                    U       variations including LZW, LZSS, LZMA and others"
  - "compression/lz77.py:5:68        others                  U       LZW, LZSS, LZMA and others"
  - "compression/lz77.py:9:10        ahead                   U       - look ahead buffer"
  - "compression/lz77.py:12:6        manages                 U       LZ77 manages a dictionary that uses"
  - "compression/lz77.py:12:37       triples                 U       dictionary that uses triples composed of:"
  - "compression/lz77.py:18:14       parsed                  U       As a file is parsed, the dictionary is dynamicall"
  - "compression/lz77.py:18:40       dynamically             U       parsed, the dictionary is dynamically updated to reflect the"
  - "compression/lz77.py:22:2        cabracadabrarrarrad     U       \"cabracadabrarrarrad\" <-> [(0, 0, 'c'),"
  - "compression/lz77.py:24:2        ababcbababaa            U       \"ababcbababaa\" <-> [(0, 0, 'a'),"
  - "compression/lz77.py:25:2        aacaacabcabaaac         U       \"aacaacabcabaaac\" <-> [(0, 0, 'a'),"
  - "compression/lz77.py:34:15       Lucia                   U       __author__ = \"Lucia Harcekova\""
  - "compression/lz77.py:34:21       Harcekova               U       __author__ = \"Lucia Harcekova\""
  - "compression/lz77.py:40:28       triplet                 U       Dataclass representing triplet called token consisting"
  - "compression/lz77.py:97:31       exceed                  U       # - check if size exceed the max search buffer"
  - "compression/lz77.py:97:73       drop                    U       buffer size, if so, drop the"
  - "compression/lz77.py:98:17       oldest                  U       # oldest elements"
  - "compression/lz77.py:116:37      triplets                U       tokens: list containing triplets (offset, length, char"
  - "compression/lz77.py:149:55      abrarrarrad             U       find_encoding_token(\"abrarrarrad\", \"abracad\").offset"
  - "compression/lz77.py:149:70      abracad                 U       token(\"abrarrarrad\", \"abracad\").offset"
  - "compression/lz77.py:151:55      adabrarrarrad           U       find_encoding_token(\"adabrarrarrad\", \"cabrac\").length"
  - "compression/lz77.py:151:72      cabrac                  U       token(\"adabrarrarrad\", \"cabrac\").length"
  - "compression/lz77.py:200:59      rarrad                  U       match_length_from_index(\"rarrad\", \"adabrar\", 0, 4)"
  - "compression/lz77.py:200:69      adabrar                 U       from_index(\"rarrad\", \"adabrar\", 0, 4)"
  - "compression/peak_signal_to_noise_ratio.py:2:16          noise       U       Peak signal-to-noise ratio - PSNR"
  - "compression/peak_signal_to_noise_ratio.py:2:30          PSNR        U       signal-to-noise ratio - PSNR"
  - "compression/peak_signal_to_noise_ratio.py:17:49         contrast    U       ratio(original: float, contrast: float) -> float:"
  - "compression/peak_signal_to_noise_ratio.py:28:20         imread      U       original = cv2.imread(os.path.join(dir_path"
  - "compression/README.md:3:67          taking          U       to store data without taking too much space."
  - "compression/README.md:4:24          loses           U       Either the compression loses some data (then we talk"
  - "compression/README.md:4:30          some            U       the compression loses some data (then we talk about"
  - "compression/README.md:4:49          talk            U       loses some data (then we talk about lossy compression"
  - "compression/README.md:4:60          lossy           U       (then we talk about lossy compression, such as"
  - "compression/README.md:4:99          does            U       such as .jpg) or it does not (and then it is"
  - "compression/README.md:6:1           Lossless        U       Lossless compression is mainly"
  - "compression/README.md:6:25          mainly          U       Lossless compression is mainly used for archive purpose"
  - "compression/README.md:6:49          purpose         U       mainly used for archive purpose as it allows storing"
  - "compression/README.md:6:70          storing         U       purpose as it allows storing data without losing"
  - "compression/README.md:6:91          losing          U       storing data without losing information about the"
  - "compression/README.md:6:125         archived        U       information about the file archived. On the other hand,"
  - "compression/README.md:6:148         hand            U       archived. On the other hand, lossy compression is"
  - "compression/README.md:6:201         where           U       for transfer of file where quality isn't necessarily"
  - "compression/README.md:6:207         quality         U       transfer of file where quality isn't necessarily what"
  - "compression/README.md:6:221         necessarily     U       where quality isn't necessarily what is required (i"
  - "compression/run_length_encoding.py:7:28         AAAABBBCCDAA                U       run_length_encode(\"AAAABBBCCDAA\")"
  - "compression/run_length_encoding.py:13:28        AAADDDDDDFFFCCCAAVVVV       U       run_length_encode(\"AAADDDDDDFFFCCCAAVVVV\")"
  - "computer_vision/cnn_classification.py:2:15          Neural          U       Convolutional Neural Network"
  - "computer_vision/cnn_classification.py:4:1           Objective       U       Objective : To train a CNN model"
  - "computer_vision/cnn_classification.py:4:16          train           U       Objective : To train a CNN model detect if"
  - "computer_vision/cnn_classification.py:4:61          Lung            U       if TB is present in Lung X-ray or not."
  - "computer_vision/cnn_classification.py:6:15          Theory          U       Resources CNN Theory :"
  - "computer_vision/cnn_classification.py:17:37         extracted       U       of the images will be extracted from the folder name"
  - "computer_vision/cnn_classification.py:26:3          Importing       U       # Importing the Keras libraries"
  - "computer_vision/cnn_classification.py:31:7          Initialising    U       # Initialising the CNN"
  - "computer_vision/cnn_classification.py:35:16         Convolution     U       # Step 1 - Convolution"
  - "computer_vision/cnn_classification.py:36:34         breadth         U       ,64 is the length & breadth of dataset images and"
  - "computer_vision/cnn_classification.py:37:20         kernel          U       # (3,3) is the kernel size (filter matrix"
  - "computer_vision/cnn_classification.py:45:7          Adding          U       # Adding a second convolutional"
  - "computer_vision/cnn_classification.py:53:27         Dense           U       classifier.add(layers.Dense(units=128, activation"
  - "computer_vision/cnn_classification.py:56:7          Compiling       U       # Compiling the CNN"
  - "computer_vision/cnn_classification.py:58:9          optimizer       U       optimizer=\"adam\", loss=\"binary"
  - "computer_vision/cnn_classification.py:58:20         adam            U       optimizer=\"adam\", loss=\"binary_crossentropy"
  - "computer_vision/cnn_classification.py:58:27         loss            U       optimizer=\"adam\", loss=\"binary_crossentropy"
  - "computer_vision/cnn_classification.py:58:40         crossentropy    U       adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy"
  - "computer_vision/cnn_classification.py:58:65         accuracy        U       crossentropy\", metrics=[\"accuracy\"]"
  - "computer_vision/cnn_classification.py:61:16         Fitting         U       # Part 2 - Fitting the CNN to the images"
  - "computer_vision/cnn_classification.py:63:12         Trained         U       # Load Trained model weights"
  - "computer_vision/cnn_classification.py:66:7          regressor       U       # regressor=load_model('cnn.h5'"
  - "computer_vision/cnn_classification.py:69:28         shear           U       rescale=1.0 / 255, shear_range=0.2, zoom_range"
  - "computer_vision/cnn_classification.py:83:42         epochs          U       steps_per_epoch=5, epochs=30, validation_data"
  - "computer_vision/cnn_classification.py:100:23        Abnormality     U       prediction = \"Abnormality detected\""
  - "computer_vision/flip_augmentation.py:9:42           vision      U       bounding box for computer vision task"
  - "computer_vision/flip_augmentation.py:26:16          annos       U       img_paths, annos = get_dataset(LABEL"
  - "computer_vision/flip_augmentation.py:28:53          anno        U       paths = update_image_and_anno(img_paths, annos, FLIP"
  - "computer_vision/flip_augmentation.py:35:13          imwrite     U       cv2.imwrite(f\"{file_root}.jpg\","
  - "computer_vision/flip_augmentation.py:35:53          IMWRITE     U       root}.jpg\", image, [cv2.IMWRITE_JPEG_QUALITY, 85])"
  - "computer_vision/flip_augmentation.py:35:66          QUALITY     U       image, [cv2.IMWRITE_JPEG_QUALITY, 85])"
  - "computer_vision/flip_augmentation.py:86:32          narray      U       new_imgs_list <type: narray>: image after resize"
  - "computer_vision/haralick_descriptors.py:11:43       Squared             U       implementation of Root Mean Squared Error"
  - "computer_vision/haralick_descriptors.py:29:5        Normalizes          U       Normalizes image in Numpy 2D array"
  - "computer_vision/haralick_descriptors.py:76:10       luminance           U       Uses luminance weights to transform"
  - "computer_vision/haralick_descriptors.py:88:5        binarize            U       def binarize(image: np.ndarray, threshold"
  - "computer_vision/haralick_descriptors.py:90:5        Binarizes           U       Binarizes a grayscale image based"
  - "computer_vision/haralick_descriptors.py:109:5       Erosion             U       Erosion and Dilation."
  - "computer_vision/haralick_descriptors.py:109:17      Dilation            U       Erosion and Dilation."
  - "computer_vision/haralick_descriptors.py:113:30      erosion             U       kind: Can be either 'erosion', in which case the"
  - "computer_vision/haralick_descriptors.py:114:39      dilation            U       function is called, or 'dilation', when :func:np.min"
  - "computer_vision/haralick_descriptors.py:116:31      applying            U       to be used when applying convolution to original"
  - "computer_vision/haralick_descriptors.py:116:40      convolution         U       be used when applying convolution to original image"
  - "computer_vision/haralick_descriptors.py:144:11      padded              U       # Use padded image when applying"
  - "computer_vision/haralick_descriptors.py:154:50      centered            U       transformation method to the centered section of the image"
  - "computer_vision/haralick_descriptors.py:160:5       opening             U       def opening_filter(image: np.ndarray"
  - "computer_vision/haralick_descriptors.py:162:5       Opening             U       Opening filter, defined as the"
  - "computer_vision/haralick_descriptors.py:199:27      thresholding        U       Apply binary mask, or thresholding based"
  - "computer_vision/haralick_descriptors.py:202:48      complementary       U       true value mask and its complementary false value mask."
  - "computer_vision/haralick_descriptors.py:209:13      morphological       U       >>> morphological = opening_filter(binary"
  - "computer_vision/haralick_descriptors.py:222:43      coordinate          U       oncurrency(image: np.ndarray, coordinate: tuple[int, int]) -"
  - "computer_vision/haralick_descriptors.py:224:25      occurrence          U       Calculate sample co-occurrence matrix based on input"
  - "computer_vision/haralick_descriptors.py:256:5       haralick            U       def haralick_descriptors(matrix:"
  - "computer_vision/haralick_descriptors.py:257:25      Haralick            U       \"\"\"Calculates all 8 Haralick descriptors based on"
  - "computer_vision/haralick_descriptors.py:259:46      Homogeneity         U       Inverse Difference, Homogeneity, Entropy,"
  - "computer_vision/haralick_descriptors.py:260:13      Dissimilarity       U       Energy, Dissimilarity, Contrast and Correlation"
  - "computer_vision/haralick_descriptors.py:260:28      Contrast            U       Energy, Dissimilarity, Contrast and Correlation"
  - "computer_vision/haralick_descriptors.py:263:57      calculating         U       matrix to use as base for calculating descriptors."
  - "computer_vision/haralick_descriptors.py:266:33      resulting           U       Reverse ordered list of resulting descriptors"
  - "computer_vision/haralick_descriptors.py:280:14      ogrid               U       # but np.ogrid works just fine"
  - "computer_vision/haralick_descriptors.py:280:31      fine                U       np.ogrid works just fine"
  - "computer_vision/haralick_descriptors.py:283:21      frequent            U       # Pre-calculate frequent multiplication and subtractio"
  - "computer_vision/haralick_descriptors.py:283:49      subtraction         U       frequent multiplication and subtraction"
  - "computer_vision/haralick_descriptors.py:287:44      Probability         U       numerical value of Maximum Probability"
  - "computer_vision/haralick_descriptors.py:288:13      prob                U       maximum_prob = np.max(matrix)"
  - "computer_vision/haralick_descriptors.py:289:48      individually        U       for each descriptor individually to calculate its matrix"
  - "computer_vision/haralick_descriptors.py:294:5       dissimilarity       U       dissimilarity = matrix * np.abs(sub"
  - "computer_vision/haralick_descriptors.py:296:5       homogeneity         U       homogeneity = matrix / (1 + np.power"
  - "computer_vision/haralick_descriptors.py:299:34      ranging             U       values for descriptors ranging from the first one to"
  - "computer_vision/haralick_descriptors.py:314:5       masks               U       masks: tuple[np.ndarray, np"
  - "computer_vision/haralick_descriptors.py:318:29      matrices            U       different co-occurrence matrices, given input masks and"
  - "computer_vision/haralick_descriptors.py:333:24      individual          U       # Concatenate each individual descriptor into"
  - "computer_vision/haralick_descriptors.py:338:5       euclidean           U       def euclidean(point_1: np.ndarray"
  - "computer_vision/haralick_descriptors.py:352:9       distances           U       def get_distances(descriptors: np.ndarray"
  - "computer_vision/haralick_descriptors.py:354:19      Euclidean           U       Calculate all Euclidean distances between a"
  - "computer_vision/haralick_descriptors.py:357:5       showing             U       showing which descriptor is"
  - "computer_vision/haralick_descriptors.py:411:32      correspondent       U       respective masks and correspondent Harralick Descriptors"
  - "computer_vision/haralick_descriptors.py:411:46      Harralick           U       masks and correspondent Harralick Descriptors."
  - "computer_vision/haralick_descriptors.py:430:42      morphology          U       other images using the morphology method of choice."
  - "computer_vision/harris_corner.py:13:19          empirically         U       k : is an empirically determined constant"
  - "computer_vision/harris_corner.py:14:23          neighbourhoods      U       window_size : neighbourhoods considered"
  - "computer_vision/harris_corner.py:14:38          considered          U       size : neighbourhoods considered"
  - "computer_vision/harris_corner.py:28:32          corners             U       Returns the image with corners identified"
  - "computer_vision/harris_corner.py:37:55          GRAY                U       color_img, cv2.COLOR_GRAY2RGB)"
  - "computer_vision/harris_corner.py:38:21          gradient            U       dy, dx = np.gradient(img)"
  - "computer_vision/horn_schunck.py:2:5         Horn                U       The Horn-Schunck method estimates"
  - "computer_vision/horn_schunck.py:2:10        Schunck             U       The Horn-Schunck method estimates the"
  - "computer_vision/horn_schunck.py:2:25        estimates           U       Horn-Schunck method estimates the optical flow for"
  - "computer_vision/horn_schunck.py:2:39        optical             U       method estimates the optical flow for every single"
  - "computer_vision/horn_schunck.py:4:13        assuming            U       It works by assuming brightness constancy"
  - "computer_vision/horn_schunck.py:4:22        brightness          U       It works by assuming brightness constancy between two"
  - "computer_vision/horn_schunck.py:4:33        constancy           U       assuming brightness constancy between two consecutive"
  - "computer_vision/horn_schunck.py:5:5         smoothness          U       and smoothness in the optical flow"
  - "computer_vision/horn_schunck.py:7:1         Useful              U       Useful resources:"
  - "computer_vision/horn_schunck.py:15:12       ndimage             U       from scipy.ndimage import convolve"
  - "computer_vision/horn_schunck.py:15:27       convolve            U       scipy.ndimage import convolve"
  - "computer_vision/horn_schunck.py:22:5        Warps               U       Warps the pixels of an image"
  - "computer_vision/horn_schunck.py:24:5        Pixels              U       Pixels that are warped from"
  - "computer_vision/horn_schunck.py:24:21       warped              U       Pixels that are warped from an invalid location"
  - "computer_vision/horn_schunck.py:31:14       Warped              U       Returns: Warped image"
  - "computer_vision/horn_schunck.py:45:12       meshgrid            U       np.meshgrid(np.arange(0, image.shape"
  - "computer_vision/horn_schunck.py:61:5        horn                U       def horn_schunck("
  - "computer_vision/horn_schunck.py:61:10       schunck             U       def horn_schunck("
  - "computer_vision/horn_schunck.py:68:19       performs            U       This function performs the Horn-Schunck algorithm"
  - "computer_vision/horn_schunck.py:68:71       estimated           U       algorithm and returns the estimated"
  - "computer_vision/horn_schunck.py:69:25       assumed             U       optical flow. It is assumed that the input images"
  - "computer_vision/horn_schunck.py:75:16       Regularization      U       alpha: Regularization constant"
  - "computer_vision/horn_schunck.py:76:29       iterations          U       num_iter: Number of iterations performed"
  - "computer_vision/horn_schunck.py:96:15       kernels             U       # Prepare kernels for the calculation"
  - "computer_vision/horn_schunck.py:96:50       derivatives         U       the calculation of the derivatives and the average velocity"
  - "computer_vision/horn_schunck.py:96:78       velocity            U       derivatives and the average velocity"
  - "computer_vision/horn_schunck.py:100:12      laplacian           U       kernel_laplacian = np.array("
  - "computer_vision/horn_schunck.py:104:19      refine              U       # Iteratively refine the flow"
  - "computer_vision/horn_schunck.py:107:9       derivative          U       derivative_x = convolve(warped"
  - "computer_vision/horn_schunck.py:114:36      proposed            U       updates the flow as proposed in the paper (Step"
  - "computer_vision/intensity_based_segmentation.py:3:13        necessary       U       # Importing necessary libraries"
  - "computer_vision/intensity_based_segmentation.py:9:38        thresholds      U       image(image: np.ndarray, thresholds: list[int]) -> np.ndarray"
  - "computer_vision/intensity_based_segmentation.py:11:42       intensity       U       segmentation based on intensity thresholds."
  - "computer_vision/intensity_based_segmentation.py:15:21       Intensity       U       thresholds: Intensity thresholds to define"
  - "computer_vision/intensity_based_segmentation.py:18:46       corresponds     U       array where each region corresponds to a threshold range"
  - "computer_vision/intensity_based_segmentation.py:50:9        figure          U       plt.figure(figsize=(10, 5))"
  - "computer_vision/intensity_based_segmentation.py:50:16       figsize         U       plt.figure(figsize=(10, 5))"
  - "computer_vision/intensity_based_segmentation.py:58:16       Segmented       U       plt.title(\"Segmented Image\")"
  - "computer_vision/mosaic_augmentation.py:14:8         TINY            U       FILTER_TINY_SCALE = 1 / 100"
  - "computer_vision/mosaic_augmentation.py:29:9         idxs            U       idxs = random.sample(range"
  - "computer_vision/mosaic_augmentation.py:44:17        Succeeded       U       print(f\"Succeeded {index + 1}/{NUMBER"
  - "computer_vision/mosaic_augmentation.py:110:5        divid           U       divid_point_x = int(scale"
  - "computer_vision/pooling_functions.py:7:3            Maxpooling          U       # Maxpooling Function"
  - "computer_vision/pooling_functions.py:8:5            maxpooling          U       def maxpooling(arr: np.ndarray, size"
  - "computer_vision/pooling_functions.py:8:44           stride              U       ndarray, size: int, stride: int) -> np.ndarray"
  - "computer_vision/pooling_functions.py:16:24          maxpooled           U       numpy array of maxpooled matrix"
  - "computer_vision/pooling_functions.py:63:3           Averagepooling      U       # Averagepooling Function"
  - "computer_vision/pooling_functions.py:64:5           avgpooling          U       def avgpooling(arr: np.ndarray, size"
  - "computer_vision/pooling_functions.py:72:24          avgpooled           U       numpy array of avgpooled matrix"
  - "computer_vision/pooling_functions.py:90:5           avgpool             U       avgpool_shape = (arr.shape["
  - "computer_vision/pooling_functions.py:127:59         displaying          U       array and maxpooling, displaying the result"
  - "computer_vision/pooling_functions.py:132:47         averagepooling      U       image to numpy array and averagepooling, displaying the result"
  - "computer_vision/README.md:1:12          Vision              U       # Computer Vision"
  - "computer_vision/README.md:3:62          enabling            U       science that works on enabling computers to see, identify"
  - "computer_vision/README.md:3:89          identify            U       enabling computers to see, identify and process images in"
  - "computer_vision/README.md:3:124         same                U       process images in the same way that human does"
  - "computer_vision/README.md:3:138         human               U       in the same way that human does, and provide appropriate"
  - "computer_vision/README.md:5:7           like                U       It is like imparting human intelligence"
  - "computer_vision/README.md:5:12          imparting           U       It is like imparting human intelligence and"
  - "computer_vision/README.md:5:28          intelligence        U       like imparting human intelligence and instincts to a computer"
  - "computer_vision/README.md:5:45          instincts           U       human intelligence and instincts to a computer."
  - "computer_vision/README.md:6:51          different           U       vision are a little different from each other. Image"
  - "computer_vision/README.md:6:130         transforming        U       some algorithms for transforming image from one form"
  - "computer_vision/README.md:6:181         smoothing           U       form to the other like smoothing, contrasting, stretching"
  - "computer_vision/README.md:6:192         contrasting         U       other like smoothing, contrasting, stretching, etc."
  - "computer_vision/README.md:6:205         stretching          U       smoothing, contrasting, stretching, etc."
  - "computer_vision/README.md:8:1           While               U       While computer vision comes"
  - "computer_vision/README.md:8:34          modelling           U       computer vision comes from modelling image processing using"
  - "computer_vision/README.md:8:93          learning            U       techniques of machine learning, computer vision applies"
  - "computer_vision/README.md:8:119         applies             U       learning, computer vision applies machine learning to"
  - "computer_vision/README.md:8:170         interpretation      U       recognize patterns for interpretation of images (much like"
  - "computer_vision/README.md:8:221         visual              U       like the process of visual reasoning of human vision"
  - "computer_vision/README.md:8:228         reasoning           U       the process of visual reasoning of human vision)."
  - "CONTRIBUTING.md:1:3         Contributing        U       # Contributing guidelines"
  - "CONTRIBUTING.md:1:16        guidelines          U       # Contributing guidelines"
  - "CONTRIBUTING.md:3:4         Before              U       ## Before contributing"
  - "CONTRIBUTING.md:3:11        contributing        U       ## Before contributing"
  - "CONTRIBUTING.md:5:1         Welcome             U       Welcome to [TheAlgorithms/Python"
  - "CONTRIBUTING.md:5:84        submitting          U       TheAlgorithms/Python)! Before submitting your pull requests,"
  - "CONTRIBUTING.md:5:185       doubts              U       guidelines__. If you have any doubts about the contributing"
  - "CONTRIBUTING.md:5:215       guide               U       about the contributing guide, please feel free to"
  - "CONTRIBUTING.md:5:229       feel                U       contributing guide, please feel free to [state it clearly"
  - "CONTRIBUTING.md:5:252       clearly             U       feel free to [state it clearly in an issue](https:"
  - "CONTRIBUTING.md:5:350       Gitter              U       ask the community on [Gitter](https://gitter.im/TheAlgorit"
  - "CONTRIBUTING.md:9:5         Contributor         U       ### Contributor"
  - "CONTRIBUTING.md:11:8        delighted           U       We are delighted that you are considering"
  - "CONTRIBUTING.md:11:76       structures          U       algorithms and data structures for others! This repository"
  - "CONTRIBUTING.md:11:118      referenced          U       This repository is referenced and used by learners"
  - "CONTRIBUTING.md:11:141      learners            U       referenced and used by learners from all over the globe"
  - "CONTRIBUTING.md:11:195      contributors        U       By being one of our contributors, you agree and confirm"
  - "CONTRIBUTING.md:11:213      agree               U       our contributors, you agree and confirm that:"
  - "CONTRIBUTING.md:13:26       plagiarism          U       You did your work - no plagiarism allowed."
  - "CONTRIBUTING.md:14:9        plagiarized         U       - Any plagiarized work will not be merged"
  - "CONTRIBUTING.md:14:38       merged              U       plagiarized work will not be merged."
  - "CONTRIBUTING.md:16:8        submitted           U       - Your submitted work fulfills or mostly"
  - "CONTRIBUTING.md:16:23       fulfills            U       Your submitted work fulfills or mostly fulfills our"
  - "CONTRIBUTING.md:16:35       mostly              U       submitted work fulfills or mostly fulfills our styles"
  - "CONTRIBUTING.md:18:7        implementation      U       __New implementation__ is welcome! For example"
  - "CONTRIBUTING.md:18:27       welcome             U       implementation__ is welcome! For example, new solutions"
  - "CONTRIBUTING.md:18:40       example             U       lementation__ is welcome! For example, new solutions for a"
  - "CONTRIBUTING.md:18:88       representations     U       a problem, different representations for a graph data structure"
  - "CONTRIBUTING.md:18:144      designs             U       structure or algorithm designs with different complexity"
  - "CONTRIBUTING.md:18:185      identical           U       different complexity, but __identical implementation__ of"
  - "CONTRIBUTING.md:18:218      existing            U       implementation__ of an existing implementation is not"
  - "CONTRIBUTING.md:18:295      already             U       whether the solution is already implemented or not before"
  - "CONTRIBUTING.md:18:322      before              U       already implemented or not before submitting your pull"
  - "CONTRIBUTING.md:20:3        Improving           U       __Improving comments__ and __writing"
  - "CONTRIBUTING.md:20:38       proper              U       comments__ and __writing proper tests__ are also highly"
  - "CONTRIBUTING.md:20:57       also                U       writing proper tests__ are also highly welcome."
  - "CONTRIBUTING.md:20:62       highly              U       proper tests__ are also highly welcome."
  - "CONTRIBUTING.md:22:5        Contribution        U       ### Contribution"
  - "CONTRIBUTING.md:24:4        appreciate          U       We appreciate any contribution, from"
  - "CONTRIBUTING.md:24:19       contribution        U       We appreciate any contribution, from fixing a grammar"
  - "CONTRIBUTING.md:24:38       fixing              U       any contribution, from fixing a grammar mistake in"
  - "CONTRIBUTING.md:24:47       grammar             U       contribution, from fixing a grammar mistake in a comment"
  - "CONTRIBUTING.md:24:55       mistake             U       from fixing a grammar mistake in a comment to implementing"
  - "CONTRIBUTING.md:26:145      mental              U       actions) to save time and mental energy. After you have"
  - "CONTRIBUTING.md:26:280      submission          U       at the bottom of your submission page. If those tests"
  - "CONTRIBUTING.md:26:535      help                U       community member will try to help."
  - "CONTRIBUTING.md:28:6        Issues              U       #### Issues"
  - "CONTRIBUTING.md:30:12       interested          U       If you are interested in resolving an [open"
  - "CONTRIBUTING.md:30:26       resolving           U       you are interested in resolving an [open issue](https"
  - "CONTRIBUTING.md:30:171      issues              U       __We do not assign issues in this repo__ so please"
  - "CONTRIBUTING.md:32:31       contribute          U       create an issue to contribute an algorithm. Please"
  - "CONTRIBUTING.md:34:16       keep                U       Please help us keep our issue list small"
  - "CONTRIBUTING.md:34:53       Fixes               U       list small by adding `Fixes #{$ISSUE_NUMBER}` to"
  - "CONTRIBUTING.md:35:35       fixes               U       if your pull request fixes issue #10, then please"
  - "CONTRIBUTING.md:43:43       classes             U       or more functions (or classes) that:"
  - "CONTRIBUTING.md:44:3        take                U       * take one or more inputs,"
  - "CONTRIBUTING.md:45:3        perform             U       * perform some internal calculations"
  - "CONTRIBUTING.md:45:16       internal            U       * perform some internal calculations or data"
  - "CONTRIBUTING.md:45:46       manipulations       U       calculations or data manipulations,"
  - "CONTRIBUTING.md:47:8        minimal             U       * have minimal side effects (Ex. `print"
  - "CONTRIBUTING.md:47:21       effects             U       * have minimal side effects (Ex. `print()`, `plot"
  - "CONTRIBUTING.md:47:35       print               U       minimal side effects (Ex. `print()`, `plot()`, `read"
  - "CONTRIBUTING.md:49:22       packaged            U       Algorithms should be packaged in a way that would"
  - "CONTRIBUTING.md:49:68       readers             U       would make it easy for readers to put them into larger"
  - "CONTRIBUTING.md:49:100      programs            U       put them into larger programs."
  - "CONTRIBUTING.md:53:14       naming              U       * use Python naming conventions and intuitive"
  - "CONTRIBUTING.md:53:21       conventions         U       * use Python naming conventions and intuitive variable"
  - "CONTRIBUTING.md:53:65       ease                U       intuitive variable names to ease comprehension"
  - "CONTRIBUTING.md:53:70       comprehension       U       variable names to ease comprehension"
  - "CONTRIBUTING.md:54:6        flexible            U       * be flexible to take different input"
  - "CONTRIBUTING.md:55:20       hints               U       * have Python type hints for their input parameters"
  - "CONTRIBUTING.md:56:3        raise               U       * raise Python exceptions ("
  - "CONTRIBUTING.md:56:16       exceptions          U       * raise Python exceptions (`ValueError`, etc."
  - "CONTRIBUTING.md:56:51       erroneous           U       ValueError`, etc.) on erroneous input values"
  - "CONTRIBUTING.md:57:8        docstrings          U       * have docstrings with clear explanations"
  - "CONTRIBUTING.md:57:30       explanations        U       docstrings with clear explanations and/or URLs to source"
  - "CONTRIBUTING.md:58:11       doctests            U       * contain doctests that test both valid"
  - "CONTRIBUTING.md:58:30       both                U       contain doctests that test both valid and erroneous"
  - "CONTRIBUTING.md:59:57       plotting            U       instead of printing or plotting them"
  - "CONTRIBUTING.md:61:85       Instead             U       existing Python packages. Instead, they should perform"
  - "CONTRIBUTING.md:61:156      convert             U       or manipulations to convert input values into different"
  - "CONTRIBUTING.md:61:207      Those               U       different output values. Those calculations or manipulations"
  - "CONTRIBUTING.md:66:4        bash                U       ```bash"
  - "CONTRIBUTING.md:70:91       found               U       there are any errors found during the run, fix"
  - "CONTRIBUTING.md:70:97       during              U       are any errors found during the run, fix them and"
  - "CONTRIBUTING.md:70:176      manually            U       even run the plugin manually on all files:"
  - "CONTRIBUTING.md:78:25       readable            U       want your work to be readable by others; therefore"
  - "CONTRIBUTING.md:78:59       encourage           U       others; therefore, we encourage you to note the following"
  - "CONTRIBUTING.md:81:10       focus               U       - Please focus hard on the naming of"
  - "CONTRIBUTING.md:81:16       hard                U       - Please focus hard on the naming of functions"
  - "CONTRIBUTING.md:81:74       Help                U       classes, and variables. Help your reader by using"
  - "CONTRIBUTING.md:81:102      descriptive         U       your reader by using __descriptive names__ that can help"
  - "CONTRIBUTING.md:81:150      redundant           U       can help you to remove redundant comments."
  - "CONTRIBUTING.md:82:61       avoid               U       old school* so please avoid them unless their life"
  - "CONTRIBUTING.md:82:72       unless              U       so please avoid them unless their life only spans"
  - "CONTRIBUTING.md:82:95       spans               U       unless their life only spans a few lines."
  - "CONTRIBUTING.md:83:5        Expand              U       - Expand acronyms because `gcd"
  - "CONTRIBUTING.md:83:12       acronyms            U       - Expand acronyms because `gcd()` is hard"
  - "CONTRIBUTING.md:83:64       greatest            U       hard to understand but `greatest_common_divisor()` is"
  - "CONTRIBUTING.md:84:31       Naming              U       Please follow the [Python Naming Conventions](https:"
  - "CONTRIBUTING.md:84:38       Conventions         U       follow the [Python Naming Conventions](https://pep8.org/#prescripti"
  - "CONTRIBUTING.md:84:149      lower               U       function_names should be lower_case, CONSTANTS in UPPERCASE"
  - "CONTRIBUTING.md:84:174      UPPERCASE           U       lower_case, CONSTANTS in UPPERCASE, ClassNames should be"
  - "CONTRIBUTING.md:86:37       strings             U       the use of Python [f-strings](https://realpython"
  - "CONTRIBUTING.md:88:155      requirement         U       This is not yet a requirement but it does make your"
  - "CONTRIBUTING.md:88:226      aligns              U       readable and automatically aligns it with much of [PEP"
  - "CONTRIBUTING.md:88:322      formatters          U       There are other code formatters (autopep8, yapf) but"
  - "CONTRIBUTING.md:88:334      autopep             U       other code formatters (autopep8, yapf) but the __black"
  - "CONTRIBUTING.md:88:344      yapf                U       formatters (autopep8, yapf) but the __black__ formatter"
  - "CONTRIBUTING.md:88:368      formatter           U       yapf) but the __black__ formatter is now hosted by the"
  - "CONTRIBUTING.md:95:7        submissions         U       - All submissions will need to pass the"
  - "CONTRIBUTING.md:95:47       ruff                U       need to pass the test `ruff .` before they will"
  - "CONTRIBUTING.md:95:114      locally             U       possible, try this test locally on your Python file"
  - "CONTRIBUTING.md:102:3       Original            U       - Original code submission require"
  - "CONTRIBUTING.md:108:69      improved            U       may be requested to be improved:"
  - "CONTRIBUTING.md:111:15      increased           U       x = x + 2 # increased by 2"
  - "CONTRIBUTING.md:114:15      trivial             U       This is too trivial. Comments are expected"
  - "CONTRIBUTING.md:114:37      expected            U       trivial. Comments are expected to be explanatory. For"
  - "CONTRIBUTING.md:114:52      explanatory         U       Comments are expected to be explanatory. For comments, you can"
  - "CONTRIBUTING.md:114:152     consistent          U       as long as you are consistent within the same piece"
  - "CONTRIBUTING.md:116:38      inside              U       you to put docstrings inside your functions but please"
  - "CONTRIBUTING.md:116:75      attention           U       functions but please pay attention to the indentation of"
  - "CONTRIBUTING.md:116:92      indentation         U       pay attention to the indentation of docstrings. The following"
  - "CONTRIBUTING.md:116:138     good                U       The following is a good example:"
  - "CONTRIBUTING.md:126:94      illustrate          U       library/doctest.html)) to illustrate and verify your work"
  - "CONTRIBUTING.md:142:33      pytest              U       doctests will be run by pytest as part of our automated"
  - "CONTRIBUTING.md:145:14      doctest             U       python3 -m doctest -v my_submission.py"
  - "CONTRIBUTING.md:148:64      encouraged          U       function is __not__ encouraged:"
  - "CONTRIBUTING.md:152:13      worse               U       # Or even worse..."
  - "CONTRIBUTING.md:156:25      uses                U       However, if your code uses `input()` then we encourage"
  - "CONTRIBUTING.md:156:65      gracefully          U       we encourage you to gracefully deal with leading and"
  - "CONTRIBUTING.md:156:76      deal                U       encourage you to gracefully deal with leading and trailing"
  - "CONTRIBUTING.md:156:98      trailing            U       deal with leading and trailing whitespace in user input"
  - "CONTRIBUTING.md:156:144     strip               U       user input by adding `.strip()` as in:"
  - "CONTRIBUTING.md:162:171     mypy                U       automated testing will run [mypy](http://mypy-lang.org"
  - "CONTRIBUTING.md:169:3       Instructions        U       Instructions on how to install mypy"
  - "CONTRIBUTING.md:169:53      here                U       install mypy can be found [here](https://github.com"
  - "CONTRIBUTING.md:171:11      comprehensions      U       - [__List comprehensions and generators__](https"
  - "CONTRIBUTING.md:171:30      generators          U       List comprehensions and generators__](https://docs.python"
  - "CONTRIBUTING.md:171:124     preferred           U       comprehensions) are preferred over the use of `lambda"
  - "CONTRIBUTING.md:171:194     important           U       filter`, `reduce` but the important thing is to demonstrate"
  - "CONTRIBUTING.md:171:216     demonstrate         U       important thing is to demonstrate the power of Python"
  - "CONTRIBUTING.md:171:281     maintain            U       is easy to read and maintain."
  - "CONTRIBUTING.md:173:3       Avoid               U       - Avoid importing external libraries"
  - "CONTRIBUTING.md:173:9       importing           U       - Avoid importing external libraries for"
  - "CONTRIBUTING.md:173:28      libraries           U       Avoid importing external libraries for basic algorithms"
  - "CONTRIBUTING.md:173:89      complicated         U       those libraries for complicated algorithms."
  - "CONTRIBUTING.md:174:29      module              U       you need a third-party module that is not in the file"
  - "CONTRIBUTING.md:176:29      Submissions         U       Other Requirements for Submissions"
  - "CONTRIBUTING.md:177:46      euler               U       code in the `project_euler/` directory, please"
  - "CONTRIBUTING.md:177:97      Guideline           U       read [the dedicated Guideline](https://github.com"
  - "CONTRIBUTING.md:177:220     Euler               U       contributing to our Project Euler library."
  - "CONTRIBUTING.md:177:226     library             U       to our Project Euler library."
  - "CONTRIBUTING.md:178:62      Notebooks           U       should be `.py`. Jupyter Notebooks should be submitted"
  - "CONTRIBUTING.md:179:3       Strictly            U       - Strictly use snake_case (underscore"
  - "CONTRIBUTING.md:179:16      snake               U       - Strictly use snake_case (underscore_separated"
  - "CONTRIBUTING.md:179:39      separated           U       snake_case (underscore_separated) in your file_name,"
  - "CONTRIBUTING.md:182:15      modified            U       - If you have modified/added code work, make"
  - "CONTRIBUTING.md:182:60      compiles            U       make sure the code compiles before submitting."
  - "CONTRIBUTING.md:183:74      concise             U       ensure your language is concise and contains no grammar"
  - "CONTRIBUTING.md:183:86      contains            U       language is concise and contains no grammar errors."
  - "CONTRIBUTING.md:184:66      periodically        U       md file which will be periodically autogenerated by our"
  - "CONTRIBUTING.md:185:121     Optional            U       Algorithms-Explanation) (Optional but recommended)."
  - "CONTRIBUTING.md:185:134     recommended         U       Explanation) (Optional but recommended)."
  - "CONTRIBUTING.md:188:3       Most                U       - Most importantly,"
  - "CONTRIBUTING.md:191:5       Happy               U       - Happy coding!"
  - "CONTRIBUTING.md:193:1       Writer              U       Writer [@poyea](https://github"
  - "CONTRIBUTING.md:193:10      poyea               U       Writer [@poyea](https://github.com"
  - "conversions/astronomical_length_scale_conversion.py:4:1         Metre               U       Metre, Kilometre, Megametre"
  - "conversions/astronomical_length_scale_conversion.py:4:8         Kilometre           U       Metre, Kilometre, Megametre, Gigametre"
  - "conversions/astronomical_length_scale_conversion.py:4:19        Megametre           U       Metre, Kilometre, Megametre, Gigametre,"
  - "conversions/astronomical_length_scale_conversion.py:4:30        Gigametre           U       Kilometre, Megametre, Gigametre,"
  - "conversions/astronomical_length_scale_conversion.py:5:1         Terametre           U       Terametre, Petametre, Exametre"
  - "conversions/astronomical_length_scale_conversion.py:5:12        Petametre           U       Terametre, Petametre, Exametre, Zettametre"
  - "conversions/astronomical_length_scale_conversion.py:5:23        Exametre            U       Terametre, Petametre, Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:5:33        Zettametre          U       Petametre, Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:5:45        Yottametre          U       Exametre, Zettametre, Yottametre"
  - "conversions/astronomical_length_scale_conversion.py:23:6        kilometer           U       \"kilometer\": \"km\","
  - "conversions/astronomical_length_scale_conversion.py:24:6        megametre           U       \"megametre\": \"Mm\","
  - "conversions/astronomical_length_scale_conversion.py:25:6        gigametre           U       \"gigametre\": \"Gm\","
  - "conversions/astronomical_length_scale_conversion.py:26:6        terametre           U       \"terametre\": \"Tm\","
  - "conversions/astronomical_length_scale_conversion.py:27:6        petametre           U       \"petametre\": \"Pm\","
  - "conversions/astronomical_length_scale_conversion.py:28:6        exametre            U       \"exametre\": \"Em\","
  - "conversions/astronomical_length_scale_conversion.py:29:6        zettametre          U       \"zettametre\": \"Zm\","
  - "conversions/astronomical_length_scale_conversion.py:30:6        yottametre          U       \"yottametre\": \"Ym\","
  - "conversions/astronomical_length_scale_conversion.py:48:24       astronomical        U       Conversion between astronomical length units."
  - "conversions/astronomical_length_scale_conversion.py:66:44       inch                U       conversion(4, \"wrongUnit\", \"inch\")"
  - "conversions/astronomical_length_scale_conversion.py:70:16       abbreviations       U       Conversion abbreviations are: m, km, Mm, Gm,"
  - "conversions/astronomical_length_scale_conversion.py:73:10       sanitized           U       from_sanitized = from_type.lower()"
  - "conversions/binary_to_hexadecimal.py:40:7           Sanitising      U       # Sanitising parameter"
  - "conversions/binary_to_octal.py:2:58         octal       U       binary string to the octal equivalent."
  - "conversions/convert_number_to_words.py:5:7          Numbering           U       class NumberingSystem(Enum):"
  - "conversions/convert_number_to_words.py:7:15         quadrillion         U       (15, \"quadrillion\"),"
  - "conversions/convert_number_to_words.py:8:15         trillion            U       (12, \"trillion\"),"
  - "conversions/convert_number_to_words.py:9:14         billion             U       (9, \"billion\"),"
  - "conversions/convert_number_to_words.py:10:14        million             U       (6, \"million\"),"
  - "conversions/convert_number_to_words.py:12:14        hundred             U       (2, \"hundred\"),"
  - "conversions/convert_number_to_words.py:17:14        milliard            U       (9, \"milliard\"),"
  - "conversions/convert_number_to_words.py:24:15        crore               U       (14, \"crore crore\"),"
  - "conversions/convert_number_to_words.py:25:15        lakh                U       (12, \"lakh crore\"),"
  - "conversions/convert_number_to_words.py:35:9         Gets                U       Gets the max value supported"
  - "conversions/convert_number_to_words.py:52:43        numbering           U       ValueError(\"Invalid numbering system\")"
  - "conversions/convert_number_to_words.py:57:5         ONES                U       ONES = { # noqa: RUF012"
  - "conversions/convert_number_to_words.py:63:13        five                U       5: \"five\","
  - "conversions/convert_number_to_words.py:66:13        eight               U       8: \"eight\","
  - "conversions/convert_number_to_words.py:70:5         TEENS               U       TEENS = { # noqa: RUF012"
  - "conversions/convert_number_to_words.py:72:13        eleven              U       1: \"eleven\","
  - "conversions/convert_number_to_words.py:73:13        twelve              U       2: \"twelve\","
  - "conversions/convert_number_to_words.py:74:13        thirteen            U       3: \"thirteen\","
  - "conversions/convert_number_to_words.py:75:13        fourteen            U       4: \"fourteen\","
  - "conversions/convert_number_to_words.py:76:13        fifteen             U       5: \"fifteen\","
  - "conversions/convert_number_to_words.py:77:13        sixteen             U       6: \"sixteen\","
  - "conversions/convert_number_to_words.py:78:13        seventeen           U       7: \"seventeen\","
  - "conversions/convert_number_to_words.py:79:13        eighteen            U       8: \"eighteen\","
  - "conversions/convert_number_to_words.py:80:13        nineteen            U       9: \"nineteen\","
  - "conversions/convert_number_to_words.py:83:5         TENS                U       TENS = { # noqa: RUF012"
  - "conversions/convert_number_to_words.py:84:13        twenty              U       2: \"twenty\","
  - "conversions/convert_number_to_words.py:85:13        thirty              U       3: \"thirty\","
  - "conversions/convert_number_to_words.py:86:13        forty               U       4: \"forty\","
  - "conversions/convert_number_to_words.py:87:13        fifty               U       5: \"fifty\","
  - "conversions/convert_number_to_words.py:88:13        sixty               U       6: \"sixty\","
  - "conversions/convert_number_to_words.py:89:13        seventy             U       7: \"seventy\","
  - "conversions/convert_number_to_words.py:90:13        eighty              U       8: \"eighty\","
  - "conversions/convert_number_to_words.py:91:13        ninety              U       9: \"ninety\","
  - "conversions/convert_number_to_words.py:97:5         Converts            U       Converts small, non-negative"
  - "conversions/convert_number_to_words.py:97:48        irregular           U       negative integers with irregular constructions in English"
  - "conversions/convert_number_to_words.py:97:58        constructions       U       integers with irregular constructions in English (i.e.,"
  - "conversions/convert_number_to_words.py:125:5        tens                U       tens, ones = divmod(num,"
  - "conversions/decimal_to_any.py:1:51          Representation      U       Number to Any Other Representation\"\"\""
  - "conversions/decimal_to_hexadecimal.py:1:40          Hexadecimal         U       (Decimal) Values to Hexadecimal Representations\"\"\""
  - "conversions/decimal_to_hexadecimal.py:1:52          Representations     U       Values to Hexadecimal Representations\"\"\""
  - "conversions/decimal_to_octal.py:1:35        Octal           U       Decimal Number to an Octal Number.\"\"\""
  - "conversions/decimal_to_octal.py:22:38       basically       U       math.floor(num / 8) # basically /= 8 without remainder"
  - "conversions/decimal_to_octal.py:23:16       formatting      U       # This formatting removes trailing '."
  - "conversions/decimal_to_octal.py:28:20       equivalents     U       \"\"\"Print octal equivalents of decimal numbers."
  - "conversions/energy_conversions.py:4:18          joule                   U       Available units: joule, kilojoule, megajoule"
  - "conversions/energy_conversions.py:4:25          kilojoule               U       Available units: joule, kilojoule, megajoule, gigajoule"
  - "conversions/energy_conversions.py:4:36          megajoule               U       units: joule, kilojoule, megajoule, gigajoule,\\"
  - "conversions/energy_conversions.py:4:47          gigajoule               U       kilojoule, megajoule, gigajoule,\\"
  - "conversions/energy_conversions.py:5:7           wattsecond              U       wattsecond, watthour, kilowatthour"
  - "conversions/energy_conversions.py:5:19          watthour                U       wattsecond, watthour, kilowatthour, newtonmeter"
  - "conversions/energy_conversions.py:5:29          kilowatthour            U       wattsecond, watthour, kilowatthour, newtonmeter, calorie"
  - "conversions/energy_conversions.py:5:43          newtonmeter             U       watthour, kilowatthour, newtonmeter, calorie_nutr,\\"
  - "conversions/energy_conversions.py:5:56          calorie                 U       kilowatthour, newtonmeter, calorie_nutr,\\"
  - "conversions/energy_conversions.py:5:64          nutr                    U       newtonmeter, calorie_nutr,\\"
  - "conversions/energy_conversions.py:6:11          kilocalorie             U       kilocalorie_nutr, electronvolt,"
  - "conversions/energy_conversions.py:6:29          electronvolt            U       kilocalorie_nutr, electronvolt, britishthermalunit"
  - "conversions/energy_conversions.py:6:43          britishthermalunit      U       nutr, electronvolt, britishthermalunit_it, footpound"
  - "conversions/energy_conversions.py:6:66          footpound               U       britishthermalunit_it, footpound"
  - "conversions/excel_title_to_column.py:4:34           sheet       U       column title in an Excel sheet, return"
  - "conversions/hex_to_bin.py:6:5           Shifts      U       Shifts the bits of the number"
  - "conversions/hex_to_bin.py:6:63          voids       U       right and fills 0 on voids left as a result."
  - "conversions/hex_to_bin.py:7:26          dividing    U       Similar effect as of dividing the number with some"
  - "conversions/ipv4_conversion.py:25:30        octet       U       ValueError: Invalid IPv4 octet 256"
  - "conversions/ipv4_conversion.py:28:5         octets      U       octets = [int(octet) for octet"
  - "conversions/length_conversion.py:3:35           Feet            U       Units:- Metre,Kilometre,Feet,Inch,Centimeter,Yard"
  - "conversions/length_conversion.py:3:40           Inch            U       Metre,Kilometre,Feet,Inch,Centimeter,Yard,Foot"
  - "conversions/length_conversion.py:3:45           Centimeter      U       Kilometre,Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter"
  - "conversions/length_conversion.py:3:56           Yard            U       Feet,Inch,Centimeter,Yard,Foot,Mile,Millimeter"
  - "conversions/length_conversion.py:3:66           Mile            U       Centimeter,Yard,Foot,Mile,Millimeter"
  - "conversions/length_conversion.py:3:71           Millimeter      U       Centimeter,Yard,Foot,Mile,Millimeter"
  - "conversions/length_conversion.py:34:6           millimeter      U       \"millimeter\": \"mm\","
  - "conversions/length_conversion.py:35:6           centimeter      U       \"centimeter\": \"cm\","
  - "conversions/length_conversion.py:39:6           inche           U       \"inche\": \"in\", # Trailing"
  - "conversions/length_conversion.py:39:45          stripped        U       Trailing 's' has been stripped off"
  - "conversions/length_conversion.py:40:6           feet            U       \"feet\": \"ft\","
  - "conversions/length_conversion.py:42:6           yard            U       \"yard\": \"yd\","
  - "conversions/length_conversion.py:43:6           mile            U       \"mile\": \"mi\","
  - "conversions/length_conversion.py:62:40          FEET            U       conversion(4, \"METER\", \"FEET\")"
  - "conversions/length_conversion.py:94:31          miles           U       length_conversion(2, \"miles\", \"InChEs\")"
  - "conversions/molecular_chemistry.py:2:28         molecular       U       Functions useful for doing molecular chemistry:"
  - "conversions/molecular_chemistry.py:2:38         chemistry       U       for doing molecular chemistry:"
  - "conversions/molecular_chemistry.py:3:3          molarity        U       * molarity_to_normality"
  - "conversions/molecular_chemistry.py:3:15         normality       U       * molarity_to_normality"
  - "conversions/molecular_chemistry.py:4:3          moles           U       * moles_to_pressure"
  - "conversions/molecular_chemistry.py:4:12         pressure        U       * moles_to_pressure"
  - "conversions/molecular_chemistry.py:6:26         temperature     U       pressure_and_volume_to_temperature"
  - "conversions/molecular_chemistry.py:10:27        nfactor         U       molarity_to_normality(nfactor: int, moles: float,"
  - "conversions/molecular_chemistry.py:29:7         Ideal           U       Ideal gas laws are used."
  - "conversions/molecular_chemistry.py:29:17        laws            U       Ideal gas laws are used."
  - "conversions/molecular_chemistry.py:30:7         Temperature     U       Temperature is taken in kelvin."
  - "conversions/molecular_chemistry.py:30:31        kelvin          U       Temperature is taken in kelvin."
  - "conversions/molecular_chemistry.py:32:7         Pressure        U       Pressure has atm as SI unit."
  - "conversions/octal_to_binary.py:2:11         Bama            U       * Author: Bama Charan Chhandogi (https"
  - "conversions/octal_to_binary.py:2:16         Charan          U       * Author: Bama Charan Chhandogi (https://github"
  - "conversions/octal_to_binary.py:2:23         Chhandogi       U       Author: Bama Charan Chhandogi (https://github.com"
  - "conversions/octal_to_hexadecimal.py:40:5        revhex      U       revhex = \"\""
  - "conversions/prefix_conversions_string.py:2:11           Manuel      U       * Author: Manuel Di Lullo (https://github"
  - "conversions/prefix_conversions_string.py:2:21           Lullo       U       * Author: Manuel Di Lullo (https://github.com"
  - "conversions/prefix_conversions_string.py:5:1            Inspired    U       Inspired by prefix_conversion"
  - "conversions/prefix_conversions_string.py:5:61           lance       U       in this repository by lance-pyles"
  - "conversions/prefix_conversions_string.py:5:67           pyles       U       repository by lance-pyles"
  - "conversions/prefix_conversions_string.py:22:5           yotta       U       yotta = 80"
  - "conversions/prefix_conversions_string.py:23:5           zetta       U       zetta = 70"
  - "conversions/prefix_conversions_string.py:25:5           peta        U       peta = 50"
  - "conversions/prefix_conversions_string.py:27:5           giga        U       giga = 30"
  - "conversions/prefix_conversions_string.py:28:5           mega        U       mega = 20"
  - "conversions/prefix_conversions_string.py:29:5           kilo        U       kilo = 10"
  - "conversions/prefix_conversions_string.py:42:5           hecto       U       hecto = 2"
  - "conversions/prefix_conversions_string.py:43:5           deca        U       deca = 1"
  - "conversions/prefix_conversions_string.py:44:5           deci        U       deci = -1"
  - "conversions/prefix_conversions_string.py:45:5           centi       U       centi = -2"
  - "conversions/prefix_conversions_string.py:46:5           milli       U       milli = -3"
  - "conversions/prefix_conversions_string.py:49:5           pico        U       pico = -12"
  - "conversions/prefix_conversions_string.py:50:5           femto       U       femto = -15"
  - "conversions/prefix_conversions_string.py:51:5           atto        U       atto = -18"
  - "conversions/prefix_conversions_string.py:52:5           zepto       U       zepto = -21"
  - "conversions/prefix_conversions_string.py:53:5           yocto       U       yocto = -24"
  - "conversions/pressure_conversions.py:3:30        Kilopascal      U       Available Units:- Pascal,Bar,Kilopascal,Megapascal,psi(pound"
  - "conversions/pressure_conversions.py:3:41        Megapascal      U       Pascal,Bar,Kilopascal,Megapascal,psi(pound per square"
  - "conversions/pressure_conversions.py:3:56        pound           U       Kilopascal,Megapascal,psi(pound per square inch),"
  - "conversions/pressure_conversions.py:4:9         mercury         U       inHg(in mercury column),torr,atm"
  - "conversions/pressure_conversions.py:4:25        torr            U       inHg(in mercury column),torr,atm"
  - "conversions/pressure_conversions.py:30:1        PRESSURE        U       PRESSURE_CONVERSION = {"
  - "conversions/pressure_conversions.py:34:6        kilopascal      U       \"kilopascal\": FromTo(0.00986923"
  - "conversions/pressure_conversions.py:35:6        megapascal      U       \"megapascal\": FromTo(9.86923, 0"
  - "conversions/README.md:3:129         binary      U       base or unit, e.g. binary to decimal, integer"
  - "conversions/README.md:3:139         decimal     U       unit, e.g. binary to decimal, integer to string or"
  - "conversions/README.md:3:177         meters      U       to string or foot to meters."
  - "conversions/rectangular_to_polar.py:4:5         rectangular     U       def rectangular_to_polar(real: float"
  - "conversions/rectangular_to_polar.py:4:20        polar           U       def rectangular_to_polar(real: float, img: float"
  - "conversions/rgb_cmyk_conversion.py:3:44         percentages     U       conversion. Returns percentages of CMYK paint."
  - "conversions/rgb_cmyk_conversion.py:6:65         linearly        U       that converts colors linearly and gives"
  - "conversions/rgb_cmyk_conversion.py:7:10         approximate     U       only approximate results. Actual preparation"
  - "conversions/rgb_cmyk_conversion.py:35:37        blue            U       cmyk(0, 0, 255) # blue"
  - "conversions/rgb_hsv_conversion.py:2:27          additive            U       RGB color model is an additive color model in which"
  - "conversions/rgb_hsv_conversion.py:3:51          broad               U       ways to reproduce a broad array of colors. The"
  - "conversions/rgb_hsv_conversion.py:4:29          initials            U       model comes from the initials of the three additive"
  - "conversions/rgb_hsv_conversion.py:6:67          saturation          U       three components: hue, saturation and"
  - "conversions/rgb_hsv_conversion.py:10:14         adapted             U       (description adapted from https://en.wikipedia"
  - "conversions/rgb_hsv_conversion.py:51:5          chroma              U       chroma = value * saturation"
  - "conversions/rgb_hsv_conversion.py:88:15         approximately       U       Function \"approximately_equal_hsv\" is needed"
  - "conversions/rgb_hsv_conversion.py:88:67         deviations          U       needed because of small deviations due to"
  - "conversions/rgb_hsv_conversion.py:89:5          rounding            U       rounding for the RGB-values."
  - "conversions/rgb_hsv_conversion.py:144:5         Utility             U       Utility-function to check that"
  - "conversions/roman_numerals.py:20:5          Leet            U       LeetCode No. 13 Roman to"
  - "conversions/roman_numerals.py:21:19         numeral         U       Given a roman numeral, convert it to an integer"
  - "conversions/roman_numerals.py:24:29         CLIV            U       tests = {\"III\": 3, \"CLIV\": 154, \"MIX\": 1009,"
  - "conversions/roman_numerals.py:24:68         MMMCMXCIX       U       1009, \"MMD\": 2500, \"MMMCMXCIX\": 3999}"
  - "conversions/roman_numerals.py:50:9          arabic          U       for arabic, roman in ROMAN:"
  - "conversions/speed_conversions.py:14:6           knot    U       \"knot\": 1.852,"
  - "conversions/temperature_conversions.py:4:5          celsius         U       def celsius_to_fahrenheit(celsius"
  - "conversions/temperature_conversions.py:4:16         fahrenheit      U       def celsius_to_fahrenheit(celsius: float, ndigits"
  - "conversions/temperature_conversions.py:4:43         ndigits         U       fahrenheit(celsius: float, ndigits: int = 2) -> float:"
  - "conversions/temperature_conversions.py:6:32         Celsius         U       Convert a given value from Celsius to Fahrenheit and round"
  - "conversions/temperature_conversions.py:6:43         Fahrenheit      U       value from Celsius to Fahrenheit and round it to 2 decimal"
  - "conversions/temperature_conversions.py:34:43        Kelvin          U       value from Celsius to Kelvin and round it to 2 decimal"
  - "conversions/temperature_conversions.py:56:16        rankine         U       def celsius_to_rankine(celsius: float, ndigits"
  - "conversions/temperature_conversions.py:58:43        Rankine         U       value from Celsius to Rankine and round it to 2 decimal"
  - "conversions/temperature_conversions.py:306:5        reaumur         U       def reaumur_to_kelvin(reaumur: float"
  - "conversions/time_conversions.py:2:75        measuring       U       as a standard way of measuring or"
  - "conversions/time_conversions.py:5:1         oscillations    U       oscillations of the caesium atom"
  - "conversions/time_conversions.py:5:21        caesium         U       oscillations of the caesium atom."
  - "conversions/time_conversions.py:13:6        hours           U       \"hours\": 3600.0, # 1 hour"
  - "conversions/time_conversions.py:15:6        weeks           U       \"weeks\": 604800.0, # 1 week"
  - "conversions/time_conversions.py:16:29       Approximate     U       months\": 2629800.0, # Approximate value for a month in"
  - "conversions/time_conversions.py:31:40       Hours           U       time(3500, \"Seconds\", \"Hours\")"
  - "conversions/time_conversions.py:37:26       WEEKS           U       >> convert_time(2, \"WEEKS\", \"days\")"
  - "conversions/time_conversions.py:39:37       MINUTES         U       time(0.5, \"hours\", \"MINUTES\")"
  - "conversions/time_conversions.py:53:26       cool            U       >> convert_time(1, \"cool\", \"century\") # doctest"
  - "conversions/volume_conversions.py:3:19          Cubic           U       Available Units:- Cubic metre,Litre,KiloLitre"
  - "conversions/volume_conversions.py:3:25          metre           U       Available Units:- Cubic metre,Litre,KiloLitre,Gallon"
  - "conversions/volume_conversions.py:3:31          Litre           U       Units:- Cubic metre,Litre,KiloLitre,Gallon,Cubic"
  - "conversions/volume_conversions.py:3:37          Kilo            U       - Cubic metre,Litre,KiloLitre,Gallon,Cubic yard"
  - "conversions/volume_conversions.py:3:47          Gallon          U       metre,Litre,KiloLitre,Gallon,Cubic yard,Cubic foot"
  - "conversions/volume_conversions.py:30:6          cubic           U       \"cubic meter\": FromTo(1, 1"
  - "conversions/volume_conversions.py:31:6          litre           U       \"litre\": FromTo(0.001, 100"
  - "conversions/volume_conversions.py:32:6          kilolitre       U       \"kilolitre\": FromTo(1, 1),"
  - "conversions/volume_conversions.py:33:6          gallon          U       \"gallon\": FromTo(0.00454, 2"
  - "conversions/weight_conversion.py:2:15           weight          U       Conversion of weight units."
  - "conversions/weight_conversion.py:4:15           Anubhav         U       __author__ = \"Anubhav Solanki\""
  - "conversions/weight_conversion.py:4:23           Solanki         U       author__ = \"Anubhav Solanki\""
  - "conversions/weight_conversion.py:33:1           KILOGRAM        U       KILOGRAM_CHART: dict[str, float"
  - "conversions/weight_conversion.py:33:10          CHART           U       KILOGRAM_CHART: dict[str, float] ="
  - "conversions/weight_conversion.py:34:6           kilogram        U       \"kilogram\": 1,"
  - "conversions/weight_conversion.py:35:6           gram            U       \"gram\": pow(10, 3),"
  - "conversions/weight_conversion.py:36:6           milligram       U       \"milligram\": pow(10, 6),"
  - "conversions/weight_conversion.py:42:6           ounce           U       \"ounce\": 35.273990723,"
  - "conversions/weight_conversion.py:43:6           carrat          U       \"carrat\": 5000,"
  - "conversions/weight_conversion.py:47:1           WEIGHT          U       WEIGHT_TYPE_CHART: dict[str"
  - "data_structures/arrays/equilibrium_index_in_array.py:2:10           Equilibrium     U       Find the Equilibrium Index of an Array."
  - "data_structures/arrays/equilibrium_index_in_array.py:6:22           equilibrium     U       python -m doctest -v equilibrium_index_in_array.py"
  - "data_structures/arrays/equilibrium_index_in_array.py:12:62          higher          U       the sum of elements at higher indexes."
  - "data_structures/arrays/find_triplets_with_0_sum.py:27:30        hashing         U       triplets_with_0_sum_hashing(arr: list[int]) -> list"
  - "data_structures/arrays/find_triplets_with_0_sum.py:48:5         Auxiliary       U       Auxiliary Space: O(N)"
  - "data_structures/arrays/index_2d_array_in_1d.py:2:1          Retrieves       U       Retrieves the value of an 0-indexed"
  - "data_structures/arrays/index_2d_array_in_1d.py:17:5         retrieves       U       and retrieves the integer value at"
  - "data_structures/arrays/kth_largest_element.py:17:29         partitioned     U       arr: The list to be partitioned"
  - "data_structures/arrays/kth_largest_element.py:22:47         partitioning    U       pivot element after partitioning"
  - "data_structures/arrays/kth_largest_element.py:29:34         cherry          U       partition(['apple', 'cherry', 'date', 'banana']"
  - "data_structures/arrays/kth_largest_element.py:29:52         banana          U       'cherry', 'date', 'banana'], 0, 3)"
  - "data_structures/arrays/permutations.py:1:5          permute     U       def permute_recursive(nums: list"
  - "data_structures/arrays/prefix_sum.py:65:9           sums    U       sums = {0}"
  - "data_structures/arrays/product_sum.py:9:28          obtained        U       The product sum is obtained by adding all elements"
  - "data_structures/arrays/product_sum.py:10:12         depths          U       respective depths."
  - "data_structures/arrays/product_sum.py:25:17         calculates      U       Recursively calculates the product sum of an"
  - "data_structures/arrays/sparse_table.py:2:46         answering       U       structure that allows answering range queries on"
  - "data_structures/arrays/sparse_table.py:3:55         throughout      U       elements do not change throughout all the queries."
  - "data_structures/arrays/sparse_table.py:8:28         nlogn           U       Overall time complexity: O(nlogn)"
  - "data_structures/arrays/sparse_table.py:19:77        precomputed     U       length and store the precomputed"
  - "data_structures/arrays/sparse_table.py:52:65        halves          U       and find minimum of 2 halves"
  - "data_structures/arrays/sudoku_solver.py:3:75        improvements        U       Python. If you have improvements,"
  - "data_structures/arrays/sudoku_solver.py:26:1        peers               U       peers = {s: {x for u in units"
  - "data_structures/arrays/sudoku_solver.py:51:23       contradiction       U       return False if a contradiction is detected.\"\"\""
  - "data_structures/arrays/sudoku_solver.py:61:69       empties             U       with '0' or '.' for empties.\""
  - "data_structures/arrays/sudoku_solver.py:68:8        Eliminate           U       \"\"\"Eliminate all the other values"
  - "data_structures/arrays/sudoku_solver.py:71:12       eliminate           U       if all(eliminate(values, s, d2) for d"
  - "data_structures/arrays/sudoku_solver.py:81:35       eliminated          U       return values ## Already eliminated"
  - "data_structures/arrays/sudoku_solver.py:83:29       reduced             U       1) If a square s is reduced to one value d2, then"
  - "data_structures/arrays/sudoku_solver.py:85:26       Contradiction       U       return False ## Contradiction: removed last value"
  - "data_structures/arrays/sudoku_solver.py:92:9        dplaces             U       dplaces = [s for s in u if d"
  - "data_structures/arrays/sudoku_solver.py:131:33      earlier             U       return False ## Failed earlier"
  - "data_structures/arrays/sudoku_solver.py:133:27      Solved              U       return values ## Solved!"
  - "data_structures/arrays/sudoku_solver.py:134:8       Chose               U       ## Chose the unfilled square"
  - "data_structures/arrays/sudoku_solver.py:134:18      unfilled            U       ## Chose the unfilled square s with the fewest"
  - "data_structures/arrays/sudoku_solver.py:134:45      fewest              U       unfilled square s with the fewest possibilities"
  - "data_structures/arrays/sudoku_solver.py:139:31      showif              U       all(grids, name=\"\", showif=0.0):"
  - "data_structures/arrays/sudoku_solver.py:140:8       Attempt             U       \"\"\"Attempt to solve a sequence"
  - "data_structures/arrays/sudoku_solver.py:141:49      puzzles             U       of seconds, display puzzles that take longer."
  - "data_structures/arrays/sudoku_solver.py:148:43      enough              U       puzzles that take long enough"
  - "data_structures/arrays/sudoku_solver.py:159:51      secs                U       s puzzles (avg %.2f secs (%d Hz), max %.2f secs"
  - "data_structures/arrays/sudoku_solver.py:167:9       unitsolved          U       def unitsolved(unit):"
  - "data_structures/arrays/sudoku_solver.py:180:68      contradictions      U       assignments. Restart on contradictions."
  - "data_structures/arrays/sudoku_solver.py:181:55      solvable            U       not guaranteed to be solvable, but empirically"
  - "data_structures/arrays/sudoku_solver.py:190:43      Give                U       puzzle(assignments) ## Give up and make a new puzzle"
  - "data_structures/arrays/sudoku_solver.py:214:28      hardest             U       solve_all(from_file(\"hardest.txt\"), \"hardest\", None"
  - "data_structures/binary_tree/avl_tree.py:112:14      symmetry        U       a mirror symmetry rotation of the left"
  - "data_structures/binary_tree/avl_tree.py:241:9       Ltree           U       class AVLtree:"
  - "data_structures/binary_tree/avl_tree.py:294:26      traversale      U       -> str: # a level traversale, gives a more intuitive"
  - "data_structures/binary_tree/basic_binary_tree.py:57:9           medium      U       def medium_tree(cls) -> BinaryTree"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:33:9        Empties     U       Empties the tree"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:89:9        Searches    U       Searches a node in the tree"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:138:19      reassign    U       self._reassign_nodes(node, lowest_node"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:188:28      inserted    U       Gets the max label inserted in the tree"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:234:9       inorder     U       def inorder_traversal(self) -> Iterator"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:601:12      Inorder     U       print(\"Inorder traversal:\", inorder"
  - "data_structures/binary_tree/binary_search_tree_recursive.py:611:14      Deleting    U       print(\"\\nDeleting elements 13, 10, 8,"
  - "data_structures/binary_tree/binary_search_tree.py:57:6          existence       U       Test existence"
  - "data_structures/binary_tree/binary_search_tree.py:146:51        kids            U       not None: # reset its kids"
  - "data_structures/binary_tree/binary_search_tree.py:236:15        deep            U       We go deep on the right branch"
  - "data_structures/binary_tree/binary_search_tree.py:281:11        Look            U       # Look for the node with that"
  - "data_structures/binary_tree/binary_search_tree.py:294:13        predecessor     U       predecessor = self.get_max("
  - "data_structures/binary_tree/binary_search_tree.py:300:18        Assigns         U       ) # Assigns the value to the node"
  - "data_structures/binary_tree/binary_tree_node_sum.py:18:37       pointers    U       a value variable and pointers to Nodes to its left"
  - "data_structures/binary_tree/binary_tree_traversals.py:129:9         populate            U       def populate_output(root: Node |"
  - "data_structures/binary_tree/binary_tree_traversals.py:166:73        alternatively       U       right and right to left, alternatively."
  - "data_structures/binary_tree/binary_tree_traversals.py:189:11        Traversals          U       # All Traversals of the binary are as"
  - "data_structures/binary_tree/binary_tree_traversals.py:200:18        wise                U       print(\"Level-wise order Traversal: \")"
  - "data_structures/binary_tree/diameter_of_binary_tree.py:2:5          diameter        U       The diameter/width of a tree is defined"
  - "data_structures/binary_tree/diameter_of_binary_tree.py:64:5         Constructed     U       Constructed binary tree is"
  - "data_structures/binary_tree/distribute_coins.py:7:11        coins           U       node.data coins. There are exactly n"
  - "data_structures/binary_tree/distribute_coins.py:9:60        coin            U       adjacent nodes and move one coin from one node"
  - "data_structures/binary_tree/distribute_coins.py:53:7        Coins           U       class CoinsDistribResult(NamedTuple"
  - "data_structures/binary_tree/distribute_coins.py:53:12       Distrib         U       class CoinsDistribResult(NamedTuple):"
  - "data_structures/binary_tree/distribute_coins.py:58:5        distribute      U       def distribute_coins(root: TreeNode"
  - "data_structures/binary_tree/distribute_coins.py:106:13      distrib         U       def get_distrib(node: TreeNode | None"
  - "data_structures/binary_tree/fenwick_tree.py:4:7         Fenwick         U       class FenwickTree:"
  - "data_structures/binary_tree/fenwick_tree.py:134:52      exclusive       U       bound of the query (exclusive)"
  - "data_structures/binary_tree/fenwick_tree.py:230:18      Largest         U       j = 1 # Largest power of 2 <= size"
  - "data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:6:16        demonstrates    U       flattening and demonstrates the flattening process"
  - "data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:7:27        flattened       U       function to visualize the flattened linked list."
  - "data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:10:9        Arunkumar       U       Author: Arunkumar A"
  - "data_structures/binary_tree/flatten_binarytree_to_linkedlist.py:136:12      Flattened       U       print(\"Flattened Linked List:\")"
  - "data_structures/binary_tree/floor_and_ceiling.py:4:7            ceiling     U       * The ceiling of key 'k' is the minimum"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:2:1          Illustrate      U       Illustrate how to implement inorder"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:3:9          Gurneet         U       Author: Gurneet Singh"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:3:17         Singh           U       Author: Gurneet Singh"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:9:8          Defining        U       \"\"\"Defining the structure of BinaryTreeNo"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:19:61        declare         U       make a new node and declare it as root."
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:36:35        proceed         U       to left subtree and proceed recursively"
  - "data_structures/binary_tree/inorder_tree_traversal_2022.py:74:12        Printing        U       print(\"Printing values of binary search"
  - "data_structures/binary_tree/is_sorted.py:9:68           ascending       U       nodes are sorted in ascending order."
  - "data_structures/binary_tree/lazy_segment_tree.py:128:5          segt    U       segt = SegmentTree(size)"
  - "data_structures/binary_tree/lowest_common_ancestor.py:27:33         saves           U       creating sparse table which saves each nodes 2^i-th parent"
  - "data_structures/binary_tree/lowest_common_ancestor.py:38:19         ancestor        U       def lowest_common_ancestor("
  - "data_structures/binary_tree/lowest_common_ancestor.py:41:17         deeper          U       # u must be deeper in the tree than v"
  - "data_structures/binary_tree/lowest_common_ancestor.py:51:25         upwards         U       # moving both nodes upwards till lca in found"
  - "data_structures/binary_tree/lowest_common_ancestor.py:51:33         till            U       moving both nodes upwards till lca in found"
  - "data_structures/binary_tree/lowest_common_ancestor.py:87:7          initializing    U       # initializing with 0"
  - "data_structures/binary_tree/lowest_common_ancestor.py:89:54         unvisited       U       means every node is unvisited"
  - "data_structures/binary_tree/maximum_fenwick_tree.py:80:26       border      U       current_left_border = self.get_prev(index"
  - "data_structures/binary_tree/maximum_fenwick_tree.py:98:23       Because     U       right -= 1 # Because of right is exclusive"
  - "data_structures/binary_tree/maximum_sum_bst.py:19:18        traverses       U       The solution traverses a binary tree to find"
  - "data_structures/binary_tree/maximum_sum_bst.py:49:9         solver          U       def solver(node: TreeNode | None"
  - "data_structures/binary_tree/merge_two_binary_trees.py:4:14          merging     U       The rule for merging is that if two nodes"
  - "data_structures/binary_tree/mirror_binary_tree.py:35:32         rooted      U       Mirror the binary tree rooted at this node by swapping"
  - "data_structures/binary_tree/mirror_binary_tree.py:35:55         swapping    U       rooted at this node by swapping left and right children"
  - "data_structures/binary_tree/mirror_binary_tree.py:134:9         mirrored    U       The mirrored tree looks like this"
  - "data_structures/binary_tree/non_recursive_segment_tree.py:3:7           virtually       U       works virtually with any list of the"
  - "data_structures/binary_tree/non_recursive_segment_tree.py:3:68          commutative     U       of elements with a \"commutative\""
  - "data_structures/binary_tree/non_recursive_segment_tree.py:4:1           combiner        U       combiner."
  - "data_structures/binary_tree/non_recursive_segment_tree.py:95:26         combined        U       :return: element combined in the range [left,"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:2:30         exciting        U       are going to find an exciting number called Catalan"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:2:53         Catalan         U       exciting number called Catalan number which is use"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:5:33         SUMMATION       U       the formula: t(n) = SUMMATION(i = 1 to n)t(i-1)t(n"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:12:1         Basically       U       Basically we Create the 2 function"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:13:8         catalan         U       1. catalan_number(node_count: int"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:20:5         binomial        U       def binomial_coefficient(n: int,"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:20:14        coefficient     U       def binomial_coefficient(n: int, k: int) -> int"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:22:28        Binomial        U       Since Here we Find the Binomial Coefficient:"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:22:37        Coefficient     U       we Find the Binomial Coefficient:"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:32:22        kept            U       result = 1 # To kept the Calculated Value"
  - "data_structures/binary_tree/number_of_possible_binary_trees.py:32:31        Calculated      U       result = 1 # To kept the Calculated Value"
  - "data_structures/binary_tree/README.md:1:3           Binary              U       # Binary Tree Traversal"
  - "data_structures/binary_tree/README.md:1:15          Traversal           U       # Binary Tree Traversal"
  - "data_structures/binary_tree/README.md:3:4           Overview            U       ## Overview"
  - "data_structures/binary_tree/README.md:5:59          traversal           U       data structures and traversal being an algorithm relates"
  - "data_structures/binary_tree/README.md:5:88          relates             U       traversal being an algorithm relates to classic problems"
  - "data_structures/binary_tree/README.md:5:124         directly            U       classic problems, either directly or indirectly."
  - "data_structures/binary_tree/README.md:5:136         indirectly          U       either directly or indirectly."
  - "data_structures/binary_tree/README.md:7:14          grasp               U       > If you can grasp the traversal of binary"
  - "data_structures/binary_tree/README.md:11:3          Depth               U       - Depth First Traversals (DFS"
  - "data_structures/binary_tree/README.md:13:28         Breadth             U       Level Order Traversal or Breadth First or Traversal"
  - "data_structures/binary_tree/README.md:17:22         simplify            U       Stack can be used to simplify the process of DFS traversal"
  - "data_structures/binary_tree/README.md:17:61         Besides             U       process of DFS traversal. Besides, since tree is a recursive"
  - "data_structures/binary_tree/README.md:17:86         recursive           U       Besides, since tree is a recursive data structure, recursion"
  - "data_structures/binary_tree/README.md:17:112        recursion           U       recursive data structure, recursion and stack are two key"
  - "data_structures/binary_tree/README.md:23:32         determine           U       point of BFS is how to determine whether the traversal"
  - "data_structures/binary_tree/README.md:23:135        flag                U       use a variable as a flag to represent the end"
  - "data_structures/binary_tree/README.md:31:4          Visit               U       1. Visit the root node and push"
  - "data_structures/binary_tree/README.md:37:1          Conclusion          U       Conclusion: This problem involves"
  - "data_structures/binary_tree/README.md:37:26         involves            U       Conclusion: This problem involves the classic recursive"
  - "data_structures/binary_tree/README.md:39:27         picture             U       you look at the bigger picture, you'll find that the"
  - "data_structures/binary_tree/README.md:39:84         followed            U       process of traversal is as followed. `Visit the left subtrees"
  - "data_structures/binary_tree/README.md:39:156        visit               U       from top to bottom, and visit the right subtrees respective"
  - "data_structures/binary_tree/README.md:39:251        perspective         U       implement it from this perspective, things will be somewhat"
  - "data_structures/binary_tree/README.md:39:279        somewhat            U       perspective, things will be somewhat different. For the"
  - "data_structures/binary_tree/README.md:51:79         until               U       Repeat this process until a leaf node reached"
  - "data_structures/binary_tree/README.md:51:87         leaf                U       this process until a leaf node reached."
  - "data_structures/binary_tree/README.md:55:10         popping             U       3. Start popping nodes from the stack"
  - "data_structures/binary_tree/README.md:57:6          worth               U       It's worth pointing out that the"
  - "data_structures/binary_tree/README.md:57:111        helpful             U       sorted array, which is helpful for coming up simplified"
  - "data_structures/binary_tree/README.md:57:123        coming              U       which is helpful for coming up simplified solutions"
  - "data_structures/binary_tree/README.md:63:38         deserves            U       bit of a challenge. It deserves the `hard` tag of LeetCode"
  - "data_structures/binary_tree/README.md:65:77         cunning             U       but the last one. A cunning way to do it is to:"
  - "data_structures/binary_tree/README.md:67:123        traversed           U       right subtrees have been traversed, then it can be popped"
  - "data_structures/binary_tree/README.md:67:149        popped              U       traversed, then it can be popped from the stack."
  - "data_structures/binary_tree/README.md:69:39         easily              U       leaf node`, you can easily tell whether a node"
  - "data_structures/binary_tree/README.md:69:46         tell                U       node`, you can easily tell whether a node is a"
  - "data_structures/binary_tree/README.md:69:108        null                U       left and right are `null`."
  - "data_structures/binary_tree/README.md:71:266        think               U       But if you come to think about it, as we are"
  - "data_structures/binary_tree/README.md:71:448        reducing            U       popping from the stack, reducing the space complexity"
  - "data_structures/binary_tree/README.md:81:37         FIFO                U       root node, put it in a FIFO queue, put in the queue"
  - "data_structures/binary_tree/README.md:81:68         special             U       put in the queue a special flag (we are using"
  - "data_structures/binary_tree/README.md:87:78         finished            U       current level has not finished yet, we enqueue its"
  - "data_structures/binary_tree/README.md:89:13         marking             U       ## Bi-color marking"
  - "data_structures/binary_tree/README.md:91:91         described           U       algorithm, which works as described below."
  - "data_structures/binary_tree/README.md:99:1          Enlightened         U       Enlightened by tri-color marking"
  - "data_structures/binary_tree/README.md:99:68         invented            U       marking method can be invented to solve all three traversal"
  - "data_structures/binary_tree/README.md:101:10        idea                U       The core idea is as follow."
  - "data_structures/binary_tree/README.md:105:13        visiting            U       - If we are visiting a white node, turn it"
  - "data_structures/binary_tree/README.md:109:1         Implementation      U       Implementation of pre-order and post"
  - "data_structures/binary_tree/README.md:109:109       pushing             U       changing the order of pushing the child nodes into"
  - "data_structures/binary_tree/red_black_tree.py:11:56         deleting        U       perform faster for writing/deleting nodes"
  - "data_structures/binary_tree/red_black_tree.py:12:9          slower          U       and slower for reading in the average"
  - "data_structures/binary_tree/red_black_tree.py:12:49         though          U       in the average case, though, because they're"
  - "data_structures/binary_tree/red_black_tree.py:12:65         they're         U       case, though, because they're"
  - "data_structures/binary_tree/red_black_tree.py:13:63         asymptotic      U       both will get the same asymptotic"
  - "data_structures/binary_tree/red_black_tree.py:46:9          Performing      U       Performing one rotation can be"
  - "data_structures/binary_tree/red_black_tree.py:88:12         Inserts         U       \"\"\"Inserts label into the subtree"
  - "data_structures/binary_tree/red_black_tree.py:104:35        repair          U       self.left._insert_repair()"
  - "data_structures/binary_tree/red_black_tree.py:113:12        Repair          U       \"\"\"Repair the coloring from inserting"
  - "data_structures/binary_tree/red_black_tree.py:113:37        inserting       U       Repair the coloring from inserting into a tree.\"\"\""
  - "data_structures/binary_tree/red_black_tree.py:121:13        uncle           U       uncle = self.parent.sibling"
  - "data_structures/binary_tree/red_black_tree.py:132:29        grandparent     U       if self.grandparent:"
  - "data_structures/binary_tree/red_black_tree.py:167:41        happens         U       # The only way this happens to a node with one child"
  - "data_structures/binary_tree/red_black_tree.py:206:63        messed          U       tree that may have been messed up.\"\"\""
  - "data_structures/binary_tree/red_black_tree.py:281:10        wording         U       (wording stolen from wikipedia"
  - "data_structures/binary_tree/red_black_tree.py:281:18        stolen          U       (wording stolen from wikipedia article"
  - "data_structures/binary_tree/red_black_tree.py:286:52        descendent      U       any node to all of its descendent NIL nodes"
  - "data_structures/binary_tree/red_black_tree.py:324:23        incorrectly     U       tree is color incorrectly)."
  - "data_structures/binary_tree/red_black_tree.py:335:37        unequal         U       The two children have unequal depths"
  - "data_structures/binary_tree/red_black_tree.py:513:37        allowing        U       the color of a node, allowing for None leaves.\"\"\""
  - "data_structures/binary_tree/red_black_tree.py:561:27        balances        U       \"Test that the tree balances inserts to O(log(n)"
  - "data_structures/binary_tree/red_black_tree.py:561:36        inserts         U       that the tree balances inserts to O(log(n)) by doing"
  - "data_structures/binary_tree/red_black_tree.py:571:45        correctly       U       method of the tree correctly balances, colors,"
  - "data_structures/binary_tree/red_black_tree.py:592:14        searching       U       \"\"\"Tests searching through the tree for"
  - "data_structures/binary_tree/red_black_tree.py:601:17        something       U       # Found something not in there"
  - "data_structures/binary_tree/red_black_tree.py:608:59        verifying       U       method of the tree, verifying the"
  - "data_structures/binary_tree/red_black_tree.py:609:19        removal         U       insertion and removal of elements, and the"
  - "data_structures/binary_tree/red_black_tree.py:638:5         tuples          U       tuples = [(-20, None, -16)"
  - "data_structures/binary_tree/red_black_tree.py:673:15        chaining        U       def test_tree_chaining() -> bool:"
  - "data_structures/binary_tree/red_black_tree.py:688:5         pytests         U       def pytests() -> None:"
  - "data_structures/binary_tree/red_black_tree.py:703:20        Inserting       U       print_results(\"Inserting\", test_insert())"
  - "data_structures/binary_tree/red_black_tree.py:704:20        Searching       U       print_results(\"Searching\", test_insert_and_search"
  - "data_structures/binary_tree/serialize_deserialize_binary_tree.py:12:5           Props           U       Props:"
  - "data_structures/binary_tree/serialize_deserialize_binary_tree.py:58:9           Represent       U       Represent the tree as a string"
  - "data_structures/binary_tree/serialize_deserialize_binary_tree.py:97:9           serialzed       U       >>> serialzed_data = repr(root)"
  - "data_structures/binary_tree/symmetric_tree.py:71:10         asymmetric      U       def make_asymmetric_tree() -> Node:"
  - "data_structures/binary_tree/symmetric_tree.py:134:40        mirrors         U       the two subtrees are mirrors of each other, False"
  - "data_structures/binary_tree/symmetric_tree.py:145:16        sides           U       # Both sides are empty, which is"
  - "data_structures/binary_tree/treap.py:8:5            Treap's     U       Treap's node"
  - "data_structures/binary_tree/treap.py:9:5            Treap       U       Treap is a binary tree by"
  - "data_structures/binary_tree/treap.py:42:73          Nones       U       tree is split into 2 Nones"
  - "data_structures/binary_tree/treap.py:55:9           Just        U       Just symmetric to previous"
  - "data_structures/binary_tree/treap.py:96:5           erase       U       def erase(root: Node | None, value"
  - "data_structures/binary_tree/treap.py:98:5           Erase       U       Erase element"
  - "data_structures/binary_tree/treap.py:121:14         treap       U       def interact_treap(root: Node | None, args"
  - "data_structures/binary_tree/treap.py:159:36         prints      U       each command, program prints treap\"\"\""
  - "data_structures/binary_tree/wavelet_tree.py:2:1         Wavelet         U       Wavelet tree is a data-structure"
  - "data_structures/binary_tree/wavelet_tree.py:2:34        designed        U       is a data-structure designed to efficiently answer"
  - "data_structures/binary_tree/wavelet_tree.py:3:13        Wavelets        U       for arrays. Wavelets trees are different"
  - "data_structures/binary_tree/wavelet_tree.py:5:35        fenwick         U       with segment trees or fenwick trees. You can read"
  - "data_structures/binary_tree/wavelet_tree.py:18:14       minn            U       self.minn: int = -1"
  - "data_structures/binary_tree/wavelet_tree.py:19:14       maxx            U       self.maxx: int = -1"
  - "data_structures/binary_tree/wavelet_tree.py:51:41       maintaining     U       the rest in right_arr, maintaining the order of the elements"
  - "data_structures/binary_tree/wavelet_tree.py:121:5       quantile        U       def quantile(node: Node | None, index"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:2:54         heuristics      U       Lists and some added heuristics for efficiency"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:3:15         Heuristic       U       Union by Rank Heuristic and Path Compression"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:16:14        ranks           U       self.ranks = [1] * num_sets"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:21:53        heuristic       U       using Union by rank heuristic"
  - "data_structures/disjoint_set/alternate_disjoint_set.py:54:26        disj            U       def get_parent(self, disj_set: int) -> int:"
  - "data_structures/hashing/bloom_filter.py:5:54        efficient       U       set() it is more space-efficient."
  - "data_structures/hashing/bloom_filter.py:7:5         bloom           U       >>> bloom = Bloom(size=8)"
  - "data_structures/hashing/bloom_filter.py:7:13        Bloom           U       >>> bloom = Bloom(size=8)"
  - "data_structures/hashing/bloom_filter.py:15:6        Titanic         U       >>> \"Titanic\" in bloom"
  - "data_structures/hashing/bloom_filter.py:25:16       Avatar          U       >>> bloom.add(\"Avatar\")"
  - "data_structures/hashing/bloom_filter.py:34:17       films           U       >>> not_present_films = (\"The Godfather\","
  - "data_structures/hashing/bloom_filter.py:34:31       Godfather       U       present_films = (\"The Godfather\", \"Interstellar\", \"Parasite"
  - "data_structures/hashing/bloom_filter.py:34:44       Interstellar    U       (\"The Godfather\", \"Interstellar\", \"Parasite\", \"Pulp"
  - "data_structures/hashing/bloom_filter.py:34:60       Parasite        U       Godfather\", \"Interstellar\", \"Parasite\", \"Pulp Fiction\")"
  - "data_structures/hashing/bloom_filter.py:34:77       Fiction         U       , \"Parasite\", \"Pulp Fiction\")"
  - "data_structures/hashing/bloom_filter.py:36:7        film            U       ... film: bloom.format_hash(film"
  - "data_structures/hashing/bloom_filter.py:45:31       positives       U       sometimes there are false positives:"
  - "data_structures/hashing/bloom_filter.py:46:6        Ratatouille     U       >>> \"Ratatouille\" in bloom"
  - "data_structures/hashing/bloom_filter.py:51:17       increases       U       The probability increases with the number of elements"
  - "data_structures/hashing/bloom_filter.py:52:17       decreases       U       The probability decreases with the number of bits"
  - "data_structures/hashing/double_hash.py:3:59         Addressed       U       resolving technique in Open Addressed Hash tables."
  - "data_structures/hashing/double_hash.py:5:13         advantage       U       occurs. The advantage of Double hashing is"
  - "data_structures/hashing/double_hash.py:5:80         probing         U       of the best form of probing,"
  - "data_structures/hashing/double_hash.py:6:1          producing       U       producing a uniform distribution"
  - "data_structures/hashing/double_hash.py:16:14        theory          U       from .number_theory.prime_numbers import"
  - "data_structures/hashing/double_hash.py:21:34        addressing      U       Table example with open addressing and Double Hash"
  - "data_structures/hashing/hash_map.py:6:1         Another         U       Another hash map implementation"
  - "data_structures/hashing/hash_map.py:7:8         Dictionaries    U       Modern Dictionaries by Raymond Hettinger"
  - "data_structures/hashing/hash_map.py:7:32        Hettinger       U       Dictionaries by Raymond Hettinger"
  - "data_structures/hashing/hash_map.py:107:35      twice           U       Return true if we need twice fewer buckets when we"
  - "data_structures/hashing/hash_map.py:159:9       Trying          U       Trying to add an element with"
  - "data_structures/hashing/hash_map.py:178:12      Changing        U       1. Changing value of item whose"
  - "data_structures/hashing/hash_table.py:62:9          Creating        U       Creating HashTable with size"
  - "data_structures/hashing/hash_table.py:90:33         entering        U       bulk_insert is used for entering more than one element"
  - "data_structures/hashing/hash_table.py:185:27        searched        U       The hash table is searched sequentially from the"
  - "data_structures/hashing/hash_table.py:226:53        slices          U       must be integers or slices, not float"
  - "data_structures/hashing/hash_table.py:239:9         rehashing       U       def rehashing(self):"
  - "data_structures/hashing/hash_table.py:240:9         survivor        U       survivor_values = [value for"
  - "data_structures/hashing/hash_table.py:243:51        hell's          U       self.size_table # hell's pointers D: don't DRY"
  - "data_structures/hashing/number_theory/prime_numbers.py:43:11        Negatives       U       # Negatives, 0, 1 and all even numbers"
  - "data_structures/hashing/quadratic_probing.py:6:7            Quadratic       U       class QuadraticProbing(HashTable):"
  - "data_structures/hashing/quadratic_probing.py:6:16           Probing         U       class QuadraticProbing(HashTable):"
  - "data_structures/hashing/quadratic_probing.py:19:63          successive      U       hash index and adding successive"
  - "data_structures/hashing/quadratic_probing.py:20:32          quadratic       U       values of an arbitrary quadratic polynomial until open"
  - "data_structures/hashing/quadratic_probing.py:20:42          polynomial      U       arbitrary quadratic polynomial until open slot is found"
  - "data_structures/hashing/tests/test_hash_map.py:56:52        upsize          U       range(5)], # guaranteed upsize"
  - "data_structures/hashing/tests/test_hash_map.py:66:14        parametrize     U       @pytest.mark.parametrize("
  - "data_structures/heap/binomial_heap.py:3:26          Structures          U       Reference: Advanced Data Structures, Peter Brass"
  - "data_structures/heap/binomial_heap.py:3:44          Brass               U       Data Structures, Peter Brass"
  - "data_structures/heap/binomial_heap.py:9:15          doubly              U       Node in a doubly-linked binomial tree"
  - "data_structures/heap/binomial_heap.py:28:62         Unequal             U       other.left_tree_size, \"Unequal Sizes of Blocks\""
  - "data_structures/heap/binomial_heap.py:28:70         Sizes               U       tree_size, \"Unequal Sizes of Blocks\""
  - "data_structures/heap/binomial_heap.py:50:9          oriented            U       Min-oriented priority queue implemented"
  - "data_structures/heap/binomial_heap.py:52:64         logn                U       elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:52:70         amoratized          U       elements: Guaranteed logn, amoratized 1"
  - "data_structures/heap/binomial_heap.py:53:18         meld                U       - Merge (meld) heaps of size m and"
  - "data_structures/heap/binomial_heap.py:53:24         heaps               U       - Merge (meld) heaps of size m and n: O(logn"
  - "data_structures/heap/binomial_heap.py:53:56         logm                U       size m and n: O(logn + logm)"
  - "data_structures/heap/binomial_heap.py:112:10        Heaps               U       mergeHeaps() test"
  - "data_structures/heap/binomial_heap.py:168:11        Consecutively       U       # Consecutively merge roots with same"
  - "data_structures/heap/binomial_heap.py:177:19        Neighbouring        U       # Neighbouring Nodes"
  - "data_structures/heap/binomial_heap.py:181:19        Merging             U       # Merging trees"
  - "data_structures/heap/binomial_heap.py:184:19        Updating            U       # Updating links"
  - "data_structures/heap/binomial_heap.py:316:11        Remaining           U       # Remaining cases"
  - "data_structures/heap/binomial_heap.py:325:11        Neighbour           U       # Neighbour nodes"
  - "data_structures/heap/binomial_heap.py:388:9         Performance         U       Performance is poor, so use only"
  - "data_structures/heap/binomial_heap.py:388:24        poor                U       Performance is poor, so use only for small"
  - "data_structures/heap/heap_generic.py:13:43          supporting      U       indexes of each item for supporting updates and deletion"
  - "data_structures/heap/heap_generic.py:46:12          Compares        U       \"\"\"Compares the two items using"
  - "data_structures/heap/heap_generic.py:66:30          upward          U       \"\"Fixes the heap in upward direction of given index"
  - "data_structures/heap/heap_generic.py:73:30          downward        U       \"\"Fixes the heap in downward direction of given index"
  - "data_structures/heap/heap_generic.py:86:11          Ideally         U       # Ideally only one of them will"
  - "data_structures/heap/heap_generic.py:91:12          Deletes         U       \"\"\"Deletes given item from heap"
  - "data_structures/heap/heap.py:115:36         responsible     U       the function that is responsible for restoring the property"
  - "data_structures/heap/heap.py:115:52         restoring       U       that is responsible for restoring the property"
  - "data_structures/heap/heap.py:127:28         indeed          U       # if violation indeed exists"
  - "data_structures/heap/min_heap.py:63:18          sift    U       self.sift_down(i, array)"
  - "data_structures/heap/randomized_heap.py:12:7        Randomized      U       class RandomizedHeapNode(Generic[T])"
  - "data_structures/heap/randomized_heap.py:14:21       randomized      U       One node of the randomized heap. Contains the value"
  - "data_structures/heap/skew_heap.py:96:5          Visualization       U       Visualization: https://www.cs.usfca"
  - "data_structures/heap/skew_heap.py:153:11        Pushing             U       # Pushing items back to the heap"
  - "data_structures/kd_tree/build_kdtree.py:1:16        Ramy                U       # Created by: Ramy-Badr-Ahmed (https:/"
  - "data_structures/kd_tree/build_kdtree.py:1:21        Badr                U       # Created by: Ramy-Badr-Ahmed (https://github"
  - "data_structures/kd_tree/build_kdtree.py:1:26        Ahmed               U       Created by: Ramy-Badr-Ahmed (https://github.com"
  - "data_structures/kd_tree/build_kdtree.py:5:11        mention             U       # Please mention me (@Ramy-Badr-Ahmed"
  - "data_structures/kd_tree/build_kdtree.py:6:15        bugs                U       # addressing bugs/corrections to this"
  - "data_structures/kd_tree/build_kdtree.py:6:20        corrections         U       # addressing bugs/corrections to this file."
  - "data_structures/kd_tree/build_kdtree.py:7:4         Thank               U       # Thank you!"
  - "data_structures/kd_tree/build_kdtree.py:12:11       kdtree              U       def build_kdtree(points: list[list[float"
  - "data_structures/kd_tree/build_kdtree.py:28:27       Dimensionality      U       = len(points[0]) # Dimensionality of the points"
  - "data_structures/kd_tree/example/example_usage.py:12:38          hypercube       U       structures.kd_tree.example.hypercube_points import hypercube"
  - "data_structures/kd_tree/example/example_usage.py:18:5           Demonstrates    U       Demonstrates the use of KD-Tree by"
  - "data_structures/kd_tree/example/example_usage.py:19:39          performing      U       dimensional hypercube and performing a nearest neighbor search"
  - "data_structures/kd_tree/example/example_usage.py:23:9           dimensions      U       num_dimensions: int = 10"
  - "data_structures/kd_tree/example/hypercube_points.py:16:29       uniformly       U       Generates random points uniformly distributed within an"
  - "data_structures/kd_tree/nearest_neighbour_search.py:65:13       nearer      U       nearer_subtree = node.left"
  - "data_structures/kd_tree/nearest_neighbour_search.py:66:13       further     U       further_subtree = node.right"
  - "data_structures/kd_tree/tests/test_kdtree.py:55:59          simplistic      U       balanced to some extent (simplistic check)"
  - "data_structures/linked_list/__init__.py:78:11       Switched    U       # Switched 'self.is_empty()' to"
  - "data_structures/linked_list/__init__.py:80:46       giving      U       below else part and giving error"
  - "data_structures/linked_list/circular_linked_list.py:15:7        Circular    U       class CircularLinkedList:"
  - "data_structures/linked_list/circular_linked_list.py:21:63       yielding    U       Circular Linked List yielding their data."
  - "data_structures/linked_list/circular_linked_list.py:22:9        Yields      U       Yields:"
  - "data_structures/linked_list/circular_linked_list.py:151:10      circular    U       def test_circular_linked_list() -> None"
  - "data_structures/linked_list/circular_linked_list.py:163:49      happen      U       rtionError # This should not happen"
  - "data_structures/linked_list/deque_doubly.py:2:26        Doubly          U       Implementing Deque using DoublyLinkedList ..."
  - "data_structures/linked_list/deque_doubly.py:12:31       inherited       U       Private class (to be inherited)\"\"\""
  - "data_structures/linked_list/deque_doubly.py:29:15       trailer         U       self._trailer = self._Node(None, None"
  - "data_structures/linked_list/deque_doubly.py:40:39       successor       U       self, predecessor, e, successor):"
  - "data_structures/linked_list/deque_doubly.py:103:8       Equeu           U       # DEqueu Remove Operations (At"
  - "data_structures/linked_list/doubly_linked_list_two.py:2:44          holds           U       similar to an array, it holds values. However, links"
  - "data_structures/linked_list/doubly_linked_list_two.py:4:34          ended           U       example of a double ended, doubly linked list"
  - "data_structures/linked_list/doubly_linked_list_two.py:6:57          typically       U       contains an extra pointer, typically called previous"
  - "data_structures/linked_list/doubly_linked_list_two.py:7:69          singly          U       data which are there in singly linked list."
  - "data_structures/linked_list/doubly_linked_list_two.py:8:4           Advantages      U       - Advantages over SLL - It can be"
  - "data_structures/linked_list/floyds_cycle_detection.py:2:1           Floyd's         U       Floyd's cycle detection algorithm"
  - "data_structures/linked_list/floyds_cycle_detection.py:6:23          eventually      U       the fast pointer will eventually catch up to the slow"
  - "data_structures/linked_list/floyds_cycle_detection.py:91:9          Detects         U       Detects if there is a cycle"
  - "data_structures/linked_list/floyds_cycle_detection.py:141:45        potential       U       not None to avoid any potential type errors."
  - "data_structures/linked_list/from_sequence.py:1:13           Prorgam     U       # Recursive Prorgam to create a Linked List"
  - "data_structures/linked_list/is_palindrome.py:12:8           palindrome      U       def is_palindrome(head: ListNode | None"
  - "data_structures/linked_list/merge_two_lists.py:2:16         merges      U       Algorithm that merges two sorted linked lists"
  - "data_structures/linked_list/print_reverse.py:25:42          Speeds      U       Node | None = None # Speeds up the append() operation"
  - "data_structures/linked_list/reverse_k_group.py:118:19       reversing       U       print(f\"After reversing groups of size {k}:"
  - "data_structures/linked_list/rotate_to_the_right.py:14:19        entire      U       Print the entire linked list iteratively"
  - "data_structures/linked_list/singly_linked_list.py:52:26         intended            U       This function is intended for iterators to access"
  - "data_structures/linked_list/singly_linked_list.py:92:31         visualization       U       String representation/visualization of a Linked Lists"
  - "data_structures/linked_list/singly_linked_list.py:201:40        fourth              U       list.insert_nth(1, \"fourth\")"
  - "data_structures/linked_list/singly_linked_list.py:339:14        reverses            U       This reverses the linked list order"
  - "data_structures/linked_list/singly_linked_list.py:413:35        varying             U       section of the test used varying data types for input"
  - "data_structures/linked_list/singly_linked_list.py:420:10        dlrow               U       \"dlrow olleH\","
  - "data_structures/linked_list/singly_linked_list.py:420:16        olle                U       \"dlrow olleH\","
  - "data_structures/linked_list/skip_list.py:2:25           Probabilistic       U       Based on \"Skip Lists: A Probabilistic Alternative to Balanced"
  - "data_structures/linked_list/skip_list.py:2:54           Balanced            U       Probabilistic Alternative to Balanced Trees\" by William Pugh"
  - "data_structures/linked_list/skip_list.py:2:73           William             U       to Balanced Trees\" by William Pugh"
  - "data_structures/linked_list/skip_list.py:2:81           Pugh                U       Balanced Trees\" by William Pugh"
  - "data_structures/linked_list/skip_list.py:24:18          Visual              U       :return: Visual representation of Node"
  - "data_structures/linked_list/skip_list.py:92:9           forwards            U       forwards = node.forward.copy"
  - "data_structures/linked_list/skip_list.py:119:18         Higher              U       Higher values are less likely"
  - "data_structures/linked_list/skip_list.py:130:21         Searched            U       :param key: Searched key,"
  - "data_structures/linked_list/skip_list.py:142:51         lesser              U       When node level is lesser than `i` decrement"
  - "data_structures/linked_list/skip_list.py:143:43         Jumping             U       forward[i].key < key - Jumping to node with key value"
  - "data_structures/linked_list/skip_list.py:145:46         skipping            U       in skipping searched key."
  - "data_structures/linked_list/skip_list.py:148:67         potentially         U       searched node) will potentially have to"
  - "data_structures/linked_list/skip_list.py:325:32         founded             U       deleted_items_are_not_founded_by_find_method():"
  - "data_structures/linked_list/skip_list.py:373:17         doesnt (doesn't)    U       def test_delete_doesnt_leave_dead_nodes():"
  - "data_structures/linked_list/skip_list.py:391:22         yields              U       def test_iter_always_yields_sorted_values():"
  - "data_structures/linked_list/skip_list.py:410:58         nature              U       to the probabilistic nature of skip list"
  - "data_structures/queue/circular_queue_linked_list.py:24:14       rear        U       self.rear: Node | None = None"
  - "data_structures/queue/circular_queue_linked_list.py:88:9        Saves       U       Saves data at the end of the"
  - "data_structures/queue/circular_queue.py:78:20       UNDERFLOW       U       Exception: UNDERFLOW"
  - "data_structures/queue/double_ended_queue.py:23:5        Observers       U       Observers"
  - "data_structures/queue/double_ended_queue.py:245:18      topop           U       @returns topop.val: the value of the"
  - "data_structures/queue/double_ended_queue.py:406:32      dequeues        U       if the length of the dequeues are not the same, they"
  - "data_structures/queue/priority_queue_using_list.py:20:5         urgent      U       urgent (high priority) and"
  - "data_structures/queue/priority_queue_using_list.py:154:23       enters      U       This function enters the element into the"
  - "data_structures/queue/queue_on_pseudo_stack.py:23:8         Dequeues    U       \"\"\"Dequeues {@code item}"
  - "data_structures/queue/queue_on_pseudo_stack.py:36:8         Rotates     U       \"\"\"Rotates the queue {@code rotation"
  - "data_structures/stacks/balanced_parentheses.py:35:33        demonstration       U       Balanced parentheses demonstration:\\n\")"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:2:19        Joslin          U       Author: Alexander Joslin"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:3:20        echoaj          U       GitHub: github.com/echoaj"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:6:29        evaluating      U       algorithm-for-evaluating-mathematical-expressions"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:6:40        mathematical    U       algorithm-for-evaluating-mathematical-expressions-fc0837dae"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:8:12        Dijkstra's      U       We can use Dijkstra's two stack algorithm"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:11:1        THESE           U       THESE ARE THE ALGORITHM'S"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:12:68       encountered     U       When an operand is encountered,"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:21:58       operands        U       operator stack. The two operands it must"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:22:9        operate         U       operate on must be the last"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:22:50       pushed          U       the last two operands pushed onto the operand stack"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:27:25       infix           U       RULE 5: When the entire infix expression has been"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:27:51       scanned         U       expression has been scanned, the value left on"
  - "data_structures/stacks/dijkstras_two_stack_algorithm.py:40:5        dijkstras       U       def dijkstras_two_stack_algorithm"
  - "data_structures/stacks/infix_to_postfix_conversion.py:12:1          PRECEDENCES         U       PRECEDENCES: dict[str, int] = {"
  - "data_structures/stacks/infix_to_postfix_conversion.py:19:1          ASSOCIATIVITIES     U       ASSOCIATIVITIES: dict[str, Literal["
  - "data_structures/stacks/infix_to_postfix_conversion.py:28:5          precedence          U       def precedence(char: str) -> int:"
  - "data_structures/stacks/infix_to_postfix_conversion.py:37:5          associativity       U       def associativity(char: str) -> Literal"
  - "data_structures/stacks/infix_to_postfix_conversion.py:50:17         Mismatched          U       ValueError: Mismatched parentheses"
  - "data_structures/stacks/infix_to_postfix_conversion.py:94:19         Precedences         U       # Precedences are equal"
  - "data_structures/stacks/infix_to_postfix_conversion.py:111:12        Infix               U       print(\"Infix to Postfix Notation"
  - "data_structures/stacks/next_greater_element.py:43:57        utilizes        U       This implementation utilizes"
  - "data_structures/stacks/next_greater_element.py:44:40        slicing         U       for the outer loop and slicing for the inner loop."
  - "data_structures/stacks/next_greater_element.py:46:16        improves        U       While this improves readability over next"
  - "data_structures/stacks/next_greater_element.py:46:25        readability     U       While this improves readability over next_greatest_element"
  - "data_structures/stacks/next_greater_element.py:73:5         Efficient       U       Efficient solution to find the"
  - "data_structures/stacks/next_greater_element.py:74:70        suitable        U       reduced to O(n), making it suitable"
  - "data_structures/stacks/next_greater_element.py:77:15        keeps           U       The stack keeps track of elements for"
  - "data_structures/stacks/next_greater_element.py:77:74        hasn't          U       next greater element hasn't"
  - "data_structures/stacks/postfix_evaluation.py:2:9            Polish          U       Reverse Polish Nation is also known"
  - "data_structures/stacks/postfix_evaluation.py:31:1           OPERATORS       U       OPERATORS = {"
  - "data_structures/stacks/postfix_evaluation.py:43:69          serves          U       This function also serves as a check"
  - "data_structures/stacks/postfix_evaluation.py:60:28          neither         U       msg = f\"{token} is neither a number nor a valid"
  - "data_structures/stacks/postfix_evaluation.py:137:28         negate          U       b *= -1 # negate b"
  - "data_structures/stacks/stack_using_two_queues.py:72:25          Popped      U       print(f\"Popped element: {popped_element"
  - "data_structures/stacks/stack_using_two_queues.py:76:13          peeked      U       peeked_element = stack.peek"
  - "data_structures/stacks/stack.py:12:12       Underflow       U       class StackUnderflowError(BaseException)"
  - "data_structures/stacks/stack.py:18:70       adds            U       ) and pop(). push() adds an"
  - "data_structures/stacks/stack.py:21:25       LIFO            U       Last In, First Out (LIFO)."
  - "data_structures/stacks/stock_span_problem.py:2:5            stock       U       The stock span problem is a financial"
  - "data_structures/stacks/stock_span_problem.py:2:11           span        U       The stock span problem is a financial"
  - "data_structures/stacks/stock_span_problem.py:2:75           daily       U       we have a series of n daily"
  - "data_structures/stacks/stock_span_problem.py:3:59           stock's     U       to calculate span of stock's price for all n days"
  - "data_structures/stacks/stock_span_problem.py:17:7           Span        U       # Span value of first element"
  - "data_structures/stacks/stock_span_problem.py:37:5           utility     U       # A utility function to print elements"
  - "data_structures/suffix_tree/example/example_usage.py:14:5           Demonstrate     U       Demonstrate the usage of the SuffixTree"
  - "data_structures/suffix_tree/example/example_usage.py:16:39          predefined      U       a SuffixTree with a predefined text."
  - "data_structures/suffix_tree/example/example_usage.py:17:7           Defines         U       - Defines a list of patterns to"
  - "data_structures/suffix_tree/example/example_usage.py:27:13          monkey          U       text = \"monkey banana\""
  - "data_structures/suffix_tree/suffix_tree_node.py:26:38       Indicates       U       end_of_string (bool): Indicates if this node represents"
  - "data_structures/trie/radix_tree.py:2:3          Radix           U       A Radix Tree is a data structure"
  - "data_structures/trie/radix_tree.py:3:23         whicheach       U       trie (prefix tree) in whicheach node that is the only"
  - "data_structures/trie/radix_tree.py:27:24        myprefix        U       >>> RadixNode(\"myprefix\").match(\"mystring\")"
  - "data_structures/trie/radix_tree.py:195:21       bananas         U       words = \"banana bananas bandana band apple all"
  - "data_structures/trie/radix_tree.py:195:29       bandana         U       words = \"banana bananas bandana band apple all beast"
  - "data_structures/trie/radix_tree.py:195:52       beast           U       bandana band apple all beast\".split()"
  - "data_structures/trie/radix_tree.py:200:27       bandanas        U       assert not root.find(\"bandanas\")"
  - "data_structures/trie/trie.py:4:11           impractical     U       making it impractical in practice. It however"
  - "digital_image_processing/change_brightness.py:11:9          Fundamental     U       Fundamental Transformation/Operation"
  - "digital_image_processing/change_brightness.py:11:46         that'll         U       Transformation/Operation that'll be performed on"
  - "digital_image_processing/change_brightness.py:23:33         lena            U       Image.open(\"image_data/lena.jpg\") as img:"
  - "digital_image_processing/change_brightness.py:25:9          brigt           U       brigt_img = change_brightness"
  - "digital_image_processing/convert_to_negative.py:2:32        opencv      U       mplemented an algorithm using opencv to convert a colored"
  - "digital_image_processing/dithering/burkes.py:2:16           Burke's         U       Implementation Burke's algorithm (dithering"
  - "digital_image_processing/dithering/burkes.py:2:35           dithering       U       ementation Burke's algorithm (dithering)"
  - "digital_image_processing/dithering/burkes.py:9:7            Burkes          U       class Burkes:"
  - "digital_image_processing/dithering/burkes.py:33:11          lack            U       # lack of if statements"
  - "digital_image_processing/dithering/burkes.py:50:9           Formula         U       Formula from https://en.wikipedia"
  - "digital_image_processing/dithering/burkes.py:51:12          Lightness       U       cf Lightness section, and Fig 13c"
  - "digital_image_processing/dithering/burkes.py:83:5           burkes          U       burkes_instances = ["
  - "digital_image_processing/edge_detection/canny.py:5:39           sobel           U       image_processing.filters.sobel_filter import sobel"
  - "digital_image_processing/edge_detection/canny.py:10:9           gaussian        U       def gen_gaussian_kernel(k_size, sigma"
  - "digital_image_processing/edge_detection/canny.py:10:33          sigma           U       gaussian_kernel(k_size, sigma):"
  - "digital_image_processing/edge_detection/canny.py:12:15          mgrid           U       x, y = np.mgrid[0 - center : k_size"
  - "digital_image_processing/edge_detection/canny.py:21:65          grad            U       gradient_direction, sobel_grad):"
  - "digital_image_processing/edge_detection/canny.py:23:17          suppression     U       Non-maximum suppression. If the edge strength"
  - "digital_image_processing/edge_detection/canny.py:23:42          strength        U       suppression. If the edge strength of the current pixel"
  - "digital_image_processing/edge_detection/canny.py:25:45          suppressed      U       Otherwise, the value will be suppressed."
  - "digital_image_processing/edge_detection/canny.py:78:42          marked          U       threshold value, it is marked as a strong edge pixel"
  - "digital_image_processing/edge_detection/canny.py:96:20          Usually         U       Edge tracking. Usually a weak edge pixel caused"
  - "digital_image_processing/edge_detection/canny.py:97:54          unconnected     U       noise responses are unconnected. As long as there is"
  - "digital_image_processing/edge_detection/canny.py:98:63          neighborhood    U       involved in its 8-connected neighborhood, that weak"
  - "digital_image_processing/edge_detection/canny.py:119:5          canny           U       def canny(image, threshold_low"
  - "digital_image_processing/edge_detection/canny.py:122:28         degree          U       get the gradient and degree by sobel_filter"
  - "digital_image_processing/filters/bilateral_filter.py:8:8            Kernel      U       N: Kernel size(Must be an odd"
  - "digital_image_processing/filters/bilateral_filter.py:8:20           Must        U       N: Kernel size(Must be an odd number)"
  - "digital_image_processing/filters/bilateral_filter.py:23:5           cons        U       cons = 1 / (sigma * math"
  - "digital_image_processing/filters/convolve.py:5:36           ravel           U       import array, dot, pad, ravel, uint8, zeros"
  - "digital_image_processing/filters/convolve.py:27:7           Pads            U       # Pads image with the edge"
  - "digital_image_processing/filters/convolve.py:45:7           Laplace         U       # Laplace operator"
  - "digital_image_processing/filters/convolve.py:48:13          Laplacian       U       imshow(\"Laplacian\", out)"
  - "digital_image_processing/filters/gabor_filter.py:1:25           Gaborfilter     U       Implementation of the Gaborfilter"
  - "digital_image_processing/filters/gabor_filter.py:7:5            gabor           U       def gabor_filter_kernel("
  - "digital_image_processing/filters/gabor_filter.py:8:5            ksize           U       ksize: int, sigma: int, theta"
  - "digital_image_processing/filters/gabor_filter.py:8:41           lambd           U       sigma: int, theta: int, lambd: int, gamma: int, psi"
  - "digital_image_processing/filters/gabor_filter.py:11:25          kernelsize      U       :param ksize: The kernelsize of the convolutional"
  - "digital_image_processing/filters/gabor_filter.py:12:30          deviation       U       param sigma: standard deviation of the gaussian bell"
  - "digital_image_processing/filters/gabor_filter.py:12:61          curve           U       of the gaussian bell curve"
  - "digital_image_processing/filters/gabor_filter.py:13:58          parallel        U       of the normal to the parallel stripes"
  - "digital_image_processing/filters/gabor_filter.py:13:67          stripes         U       normal to the parallel stripes"
  - "digital_image_processing/filters/gabor_filter.py:14:24          Gabor           U       of Gabor function."
  - "digital_image_processing/filters/gabor_filter.py:15:39          sinusoidal      U       Wavelength of the sinusoidal component."
  - "digital_image_processing/filters/gabor_filter.py:16:50          specifies       U       spatial aspect ratio and specifies the ellipticity"
  - "digital_image_processing/filters/gabor_filter.py:16:64          ellipticity     U       ratio and specifies the ellipticity"
  - "digital_image_processing/filters/gabor_filter.py:39:25          radiant         U       # degree to radiant"
  - "digital_image_processing/filters/laplacian_filter.py:1:14           ojas        U       # @Author : ojas-wani"
  - "digital_image_processing/filters/laplacian_filter.py:1:19           wani        U       # @Author : ojas-wani"
  - "digital_image_processing/filters/laplacian_filter.py:7:5            BORDER      U       BORDER_DEFAULT,"
  - "digital_image_processing/filters/local_binary_pattern.py:9:5            Comparing       U       Comparing local neighborhood pixel"
  - "digital_image_processing/filters/local_binary_pattern.py:9:70           centre          U       with threshold value of centre pixel."
  - "digital_image_processing/filters/local_binary_pattern.py:11:28          boundaries      U       e. values present at boundaries."
  - "digital_image_processing/filters/local_binary_pattern.py:29:39          patternof       U       of the local binary patternof the pixel"
  - "digital_image_processing/filters/local_binary_pattern.py:45:7           Starting        U       # Starting from the top right,"
  - "digital_image_processing/filters/local_binary_pattern.py:66:61          IMREAD          U       data/lena.jpg\", cv2.IMREAD_GRAYSCALE"
  - "digital_image_processing/filters/median_filter.py:6:19          divide      U       from numpy import divide, int8, multiply, ravel"
  - "digital_image_processing/filters/median_filter.py:15:17         borders     U       # set image borders"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:4:10           Binish          U       @author: Binish125"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:15:15          Stretch         U       class ConstantStretch:"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:27:9           stretch         U       def stretch(self, input_image):"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:30:23          hist            U       x, _, _ = plt.hist(self.img.ravel(), 2"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:49:14          histogram       U       def plot_histogram(self):"
  - "digital_image_processing/histogram_equalization/histogram_stretch.py:61:5           stretcher       U       stretcher = ConstantStretch()"
  - "digital_image_processing/index_calculation.py:1:11          João                U       # Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:1:16          Gustavo             U       # Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:1:27          Amorim              U       Author: João Gustavo A. Amorim"
  - "digital_image_processing/index_calculation.py:10:24         calculus            U       Class implemented to calculus the index"
  - "digital_image_processing/index_calculation.py:11:12         Calculation         U       class IndexCalculation:"
  - "digital_image_processing/index_calculation.py:14:52         vegetation          U       consists in calculating vegetation indices, these"
  - "digital_image_processing/index_calculation.py:15:43         agriculture         U       be used for precision agriculture for example (or remote"
  - "digital_image_processing/index_calculation.py:16:9          sensing             U       sensing). There are functions"
  - "digital_image_processing/index_calculation.py:19:7          Vegetation          U       # Vegetation index"
  - "digital_image_processing/index_calculation.py:21:38         spectral            U       Vegetation Index (VI) is a spectral transformation of two"
  - "digital_image_processing/index_calculation.py:22:21         enhance             U       designed to enhance the contribution of"
  - "digital_image_processing/index_calculation.py:23:9          reliable            U       reliable spatial and temporal"
  - "digital_image_processing/index_calculation.py:23:30         temporal            U       reliable spatial and temporal inter-comparisons of"
  - "digital_image_processing/index_calculation.py:23:39         inter               U       spatial and temporal inter-comparisons of terrestrial"
  - "digital_image_processing/index_calculation.py:23:45         comparisons         U       spatial and temporal inter-comparisons of terrestrial"
  - "digital_image_processing/index_calculation.py:23:60         terrestrial         U       inter-comparisons of terrestrial"
  - "digital_image_processing/index_calculation.py:24:9          photosynthetic      U       photosynthetic activity and canopy"
  - "digital_image_processing/index_calculation.py:24:37         canopy              U       photosynthetic activity and canopy structural variations"
  - "digital_image_processing/index_calculation.py:24:44         structural          U       activity and canopy structural variations"
  - "digital_image_processing/index_calculation.py:27:22         infrared            U       * nir - near-infrared"
  - "digital_image_processing/index_calculation.py:45:15         abbreviation        U       #\"abbreviationOfIndexName\" -- list"
  - "digital_image_processing/index_calculation.py:47:15         ARVI                U       #\"ARVI2\" -- red"
  - "digital_image_processing/index_calculation.py:48:15         CCCI                U       #\"CCCI\" -- red"
  - "digital_image_processing/index_calculation.py:51:15         NDVI                U       #\"NDVI\" -- red"
  - "digital_image_processing/index_calculation.py:52:15         BNDVI               U       #\"BNDVI\" -- blue"
  - "digital_image_processing/index_calculation.py:54:15         GNDVI               U       #\"GNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:55:15         GBNDVI              U       #\"GBNDVI\" -- green"
  - "digital_image_processing/index_calculation.py:56:15         GRNDVI              U       #\"GRNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:57:15         RBNDVI              U       #\"RBNDVI\" -- red,"
  - "digital_image_processing/index_calculation.py:58:15         PNDVI               U       #\"PNDVI\" -- red"
  - "digital_image_processing/index_calculation.py:59:15         ATSAVI              U       #\"ATSAVI\" -- red,"
  - "digital_image_processing/index_calculation.py:60:15         BWDRVI              U       #\"BWDRVI\" -- blue"
  - "digital_image_processing/index_calculation.py:61:16         Igreen              U       #\"CIgreen\" -- green"
  - "digital_image_processing/index_calculation.py:62:16         Irededge            U       #\"CIrededge\" -- redEdge"
  - "digital_image_processing/index_calculation.py:64:15         CTVI                U       #\"CTVI\" -- red"
  - "digital_image_processing/index_calculation.py:65:15         GDVI                U       #\"GDVI\" -- green"
  - "digital_image_processing/index_calculation.py:67:15         GEMI                U       #\"GEMI\" -- red"
  - "digital_image_processing/index_calculation.py:68:15         GOSAVI              U       #\"GOSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:69:15         GSAVI               U       #\"GSAVI\" -- green"
  - "digital_image_processing/index_calculation.py:72:15         IPVI                U       #\"IPVI\" -- red"
  - "digital_image_processing/index_calculation.py:75:15         MRVI                U       #\"MRVI\" -- red"
  - "digital_image_processing/index_calculation.py:76:15         MSAVI               U       #\"MSAVI\" -- red"
  - "digital_image_processing/index_calculation.py:77:15         Norm                U       #\"NormG\" -- red"
  - "digital_image_processing/index_calculation.py:80:15         NGRDI               U       #\"NGRDI\" -- red"
  - "digital_image_processing/index_calculation.py:86:15         NDRE                U       #\"NDRE\" -- redEdge"
  - "digital_image_processing/index_calculation.py:97:13         Blue                U       #notBlueIndex = [\"ARVI2\", \"CCCI"
  - "digital_image_processing/index_calculation.py:108:18        matricies           U       self.set_matricies(red=red, green=green"
  - "digital_image_processing/index_calculation.py:127:63        instantiated        U       index with the values instantiated in the class"
  - "digital_image_processing/index_calculation.py:131:9         funcs               U       funcs = {"
  - "digital_image_processing/index_calculation.py:133:26        ccci                U       \"CCCI\": self.ccci,"
  - "digital_image_processing/index_calculation.py:136:26        ndvi                U       \"NDVI\": self.ndvi,"
  - "digital_image_processing/index_calculation.py:137:27        bndvi               U       \"BNDVI\": self.bndvi,"
  - "digital_image_processing/index_calculation.py:139:27        gndvi               U       \"GNDVI\": self.gndvi,"
  - "digital_image_processing/index_calculation.py:140:28        gbndvi              U       \"GBNDVI\": self.gbndvi,"
  - "digital_image_processing/index_calculation.py:141:28        grndvi              U       \"GRNDVI\": self.grndvi,"
  - "digital_image_processing/index_calculation.py:142:28        rbndvi              U       \"RBNDVI\": self.rbndvi,"
  - "digital_image_processing/index_calculation.py:143:27        pndvi               U       \"PNDVI\": self.pndvi,"
  - "digital_image_processing/index_calculation.py:144:28        atsavi              U       \"ATSAVI\": self.atsavi,"
  - "digital_image_processing/index_calculation.py:145:28        bwdrvi              U       \"BWDRVI\": self.bwdrvi,"
  - "digital_image_processing/index_calculation.py:147:34        rededge             U       CIrededge\": self.ci_rededge,"
  - "digital_image_processing/index_calculation.py:149:26        ctvi                U       \"CTVI\": self.ctvi,"
  - "digital_image_processing/index_calculation.py:150:26        gdvi                U       \"GDVI\": self.gdvi,"
  - "digital_image_processing/index_calculation.py:152:26        gemi                U       \"GEMI\": self.gemi,"
  - "digital_image_processing/index_calculation.py:153:28        gosavi              U       \"GOSAVI\": self.gosavi,"
  - "digital_image_processing/index_calculation.py:154:27        gsavi               U       \"GSAVI\": self.gsavi,"
  - "digital_image_processing/index_calculation.py:157:26        ipvi                U       \"IPVI\": self.ipvi,"
  - "digital_image_processing/index_calculation.py:160:26        mrvi                U       \"MRVI\": self.mrvi,"
  - "digital_image_processing/index_calculation.py:161:29        savi                U       \"MSAVI\": self.m_savi,"
  - "digital_image_processing/index_calculation.py:162:27        norm                U       \"NormG\": self.norm_g,"
  - "digital_image_processing/index_calculation.py:165:27        ngrdi               U       \"NGRDI\": self.ngrdi,"
  - "digital_image_processing/index_calculation.py:171:26        ndre                U       \"NDRE\": self.ndre,"
  - "digital_image_processing/index_calculation.py:182:9         Atmospherically     U       Atmospherically Resistant Vegetation"
  - "digital_image_processing/index_calculation.py:182:25        Resistant           U       Atmospherically Resistant Vegetation Index 2"
  - "digital_image_processing/index_calculation.py:191:9         Canopy              U       Canopy Chlorophyll Content"
  - "digital_image_processing/index_calculation.py:191:16        Chlorophyll         U       Canopy Chlorophyll Content Index"
  - "digital_image_processing/index_calculation.py:220:16        Calibrated          U       Index, Calibrated NDVI - CDVI"
  - "digital_image_processing/index_calculation.py:220:34        CDVI                U       Index, Calibrated NDVI - CDVI"
  - "digital_image_processing/index_calculation.py:291:9         Adjusted            U       Adjusted transformed soil-adjusted"
  - "digital_image_processing/index_calculation.py:291:30        soil                U       Adjusted transformed soil-adjusted VI"
  - "digital_image_processing/index_calculation.py:326:9         Coloration          U       Coloration Index"
  - "digital_image_processing/index_calculation.py:334:9         Corrected           U       Corrected Transformed Vegetation"
  - "digital_image_processing/index_calculation.py:334:19        Transformed         U       Corrected Transformed Vegetation Index"
  - "digital_image_processing/index_calculation.py:372:30        Soil                U       self.green Optimized Soil Adjusted Vegetation"
  - "digital_image_processing/index_calculation.py:410:9         Infraself           U       Infraself.red percentage vegetation"
  - "digital_image_processing/index_calculation.py:479:11        Iself               U       (VIself.green)"
  - "digital_image_processing/index_calculation.py:487:56        redness             U       red/self.green self.redness Index"
  - "digital_image_processing/index_calculation.py:495:9         Saturation          U       Saturation"
  - "digital_image_processing/index_calculation.py:533:3         genering            U       # genering a random matrices to"
  - "digital_image_processing/index_calculation.py:548:28        instantiate         U       set the values after instantiate the class cl, (for update"
  - "digital_image_processing/index_calculation.py:550:7         Matrices            U       cl.setMatrices(red=red, green=green"
  - "digital_image_processing/index_calculation.py:564:18        maxprec             U       floatmode='maxprec_equal'))"
  - "digital_image_processing/morphological_operations/dilation_operation.py:42:12       dilated         U       Return dilated image"
  - "digital_image_processing/morphological_operations/dilation_operation.py:71:5        structuring     U       structuring_element = np.array("
  - "digital_image_processing/morphological_operations/erosion_operation.py:44:12        eroded      U       Return eroded image"
  - "digital_image_processing/resize/resize.py:9:5           Simplest    U       Simplest and fastest version"
  - "digital_image_processing/resize/resize.py:9:18          fastest     U       Simplest and fastest version of image resizing"
  - "digital_image_processing/rotation/rotation.py:50:5          titles      U       titles = [\"Original\", \"Rotation"
  - "digital_image_processing/sepia.py:2:42          tone        U       algorithm using opencv to tone an image with sepia"
  - "digital_image_processing/sepia.py:2:61          sepia       U       to tone an image with sepia technique"
  - "digital_image_processing/test_digital_image_processing.py:65:7          laplace         U       # laplace diagonals"
  - "digital_image_processing/test_digital_image_processing.py:65:15         diagonals       U       # laplace diagonals"
  - "DIRECTORY.md:8:10           Combinations            U       * [All Combinations](backtracking/all_combination"
  - "DIRECTORY.md:9:10           Permutations            U       * [All Permutations](backtracking/all_permutation"
  - "DIRECTORY.md:10:10          Subsequences            U       * [All Subsequences](backtracking/all_subsequence"
  - "DIRECTORY.md:13:6           Crossword               U       * [Crossword Puzzle Solver](backtracking"
  - "DIRECTORY.md:13:16          Puzzle                  U       * [Crossword Puzzle Solver](backtracking"
  - "DIRECTORY.md:13:23          Solver                  U       * [Crossword Puzzle Solver](backtracking/crossword"
  - "DIRECTORY.md:14:15          Parentheses             U       * [Generate Parentheses](backtracking/generate"
  - "DIRECTORY.md:18:6           Minimax                 U       * [Minimax](backtracking/minimax"
  - "DIRECTORY.md:19:8           Queens                  U       * [N Queens](backtracking/n_queens"
  - "DIRECTORY.md:22:13          Maze                    U       * [Rat In Maze](backtracking/rat_in"
  - "DIRECTORY.md:24:13          Subsets                 U       * [Sum Of Subsets](backtracking/sum_of"
  - "DIRECTORY.md:25:11          Break                   U       * [Word Break](backtracking/word_break"
  - "DIRECTORY.md:29:8           Manipulation            U       ## Bit Manipulation"
  - "DIRECTORY.md:30:17          Operator                U       * [Binary And Operator](bit_manipulation/binary"
  - "DIRECTORY.md:31:13          Coded                   U       * [Binary Coded Decimal](bit_manipulation"
  - "DIRECTORY.md:31:19          Decimal                 U       * [Binary Coded Decimal](bit_manipulation/binary"
  - "DIRECTORY.md:32:19          Setbits                 U       * [Binary Count Setbits](bit_manipulation/binary"
  - "DIRECTORY.md:33:19          Trailing                U       * [Binary Count Trailing Zeros](bit_manipulation"
  - "DIRECTORY.md:33:28          Zeros                   U       Binary Count Trailing Zeros](bit_manipulation/binary"
  - "DIRECTORY.md:36:13          Twos                    U       * [Binary Twos Complement](bit_manipulation"
  - "DIRECTORY.md:38:14          Addition                U       * [Bitwise Addition Recursive](bit_manipulation"
  - "DIRECTORY.md:38:23          Recursive               U       * [Bitwise Addition Recursive](bit_manipulation/bitwise"
  - "DIRECTORY.md:39:21          Kernighan               U       * [Count 1S Brian Kernighan Method](bit_manipulation"
  - "DIRECTORY.md:40:26          Bits                    U       Count Number Of One Bits](bit_manipulation/count"
  - "DIRECTORY.md:41:6           Excess                  U       * [Excess 3 Code](bit_manipulation"
  - "DIRECTORY.md:42:6           Find                    U       * [Find Previous Power Of Two"
  - "DIRECTORY.md:42:11          Previous                U       * [Find Previous Power Of Two](bit_manipulatio"
  - "DIRECTORY.md:43:16          Sequence                U       * [Gray Code Sequence](bit_manipulation/gray"
  - "DIRECTORY.md:44:6           Highest                 U       * [Highest Set Bit](bit_manipulation"
  - "DIRECTORY.md:45:15          Rightmost               U       * [Index Of Rightmost Set Bit](bit_manipulation"
  - "DIRECTORY.md:46:9           Even                    U       * [Is Even](bit_manipulation/is"
  - "DIRECTORY.md:50:14          Different               U       * [Numbers Different Signs](bit_manipulation"
  - "DIRECTORY.md:50:24          Signs                   U       [Numbers Different Signs](bit_manipulation/numbers"
  - "DIRECTORY.md:52:6           Reverse                 U       * [Reverse Bits](bit_manipulation"
  - "DIRECTORY.md:61:6           Imply                   U       * [Imply Gate](boolean_algebra"
  - "DIRECTORY.md:62:19          Simplification          U       * [Karnaugh Map Simplification](boolean_algebra/karnaugh"
  - "DIRECTORY.md:64:6           Nand                    U       * [Nand Gate](boolean_algebra"
  - "DIRECTORY.md:65:6           Nimply                  U       * [Nimply Gate](boolean_algebra"
  - "DIRECTORY.md:69:6           Quine                   U       * [Quine Mc Cluskey](boolean"
  - "DIRECTORY.md:69:15          Cluskey                 U       * [Quine Mc Cluskey](boolean_algebra/quine"
  - "DIRECTORY.md:70:6           Xnor                    U       * [Xnor Gate](boolean_algebra"
  - "DIRECTORY.md:74:6           Conways                 U       * [Conways Game Of Life](cellular"
  - "DIRECTORY.md:77:6           Nagel                   U       * [Nagel Schrekenberg](cellular"
  - "DIRECTORY.md:77:12          Schrekenberg            U       * [Nagel Schrekenberg](cellular_automata/nagel"
  - "DIRECTORY.md:78:10          Dimensional             U       * [One Dimensional](cellular_automata/one"
  - "DIRECTORY.md:83:6           Affine                  U       * [Affine Cipher](ciphers/affine"
  - "DIRECTORY.md:83:13          Cipher                  U       * [Affine Cipher](ciphers/affine_cipher"
  - "DIRECTORY.md:84:6           Atbash                  U       * [Atbash](ciphers/atbash.py)"
  - "DIRECTORY.md:85:6           Autokey                 U       * [Autokey](ciphers/autokey.py"
  - "DIRECTORY.md:91:6           Beaufort                U       * [Beaufort Cipher](ciphers/beaufort"
  - "DIRECTORY.md:95:6           Cryptomath              U       * [Cryptomath Module](ciphers/cryptomath"
  - "DIRECTORY.md:95:17          Module                  U       * [Cryptomath Module](ciphers/cryptomath"
  - "DIRECTORY.md:100:6          Elgamal                 U       * [Elgamal Key Generator](ciphers"
  - "DIRECTORY.md:105:6          Mixed                   U       * [Mixed Keyword Cypher](ciphers"
  - "DIRECTORY.md:105:12         Keyword                 U       * [Mixed Keyword Cypher](ciphers/mixed"
  - "DIRECTORY.md:106:6          Mono                    U       * [Mono Alphabetic Ciphers]"
  - "DIRECTORY.md:108:6          Onepad                  U       * [Onepad Cipher](ciphers/onepad"
  - "DIRECTORY.md:109:6          Permutation             U       * [Permutation Cipher](ciphers/permutation"
  - "DIRECTORY.md:112:6          Porta                   U       * [Porta Cipher](ciphers/porta"
  - "DIRECTORY.md:114:6          Rail                    U       * [Rail Fence Cipher](ciphers"
  - "DIRECTORY.md:114:11         Fence                   U       * [Rail Fence Cipher](ciphers/rail"
  - "DIRECTORY.md:117:10         Factorization           U       * [Rsa Factorization](ciphers/rsa_factorization"
  - "DIRECTORY.md:120:15         Shift                   U       * [Shuffled Shift Cipher](ciphers/shuffled"
  - "DIRECTORY.md:121:6          Simple                  U       * [Simple Keyword Cypher](ciphers"
  - "DIRECTORY.md:122:13         Substitution            U       * [Simple Substitution Cipher](ciphers/simple"
  - "DIRECTORY.md:123:6          Transposition           U       * [Transposition Cipher](ciphers/transposition"
  - "DIRECTORY.md:125:6          Trifid                  U       * [Trifid Cipher](ciphers/trifid"
  - "DIRECTORY.md:126:6          Vernam                  U       * [Vernam Cipher](ciphers/vernam"
  - "DIRECTORY.md:127:6          Vigenere                U       * [Vigenere Cipher](ciphers/vigenere"
  - "DIRECTORY.md:136:21         Noise                   U       * [Peak Signal To Noise Ratio](compression/peak"
  - "DIRECTORY.md:137:10         Length                  U       * [Run Length Encoding](compression"
  - "DIRECTORY.md:137:17         Encoding                U       * [Run Length Encoding](compression/run_length"
  - "DIRECTORY.md:141:6          Flip                    U       * [Flip Augmentation](computer"
  - "DIRECTORY.md:141:11         Augmentation            U       * [Flip Augmentation](computer_vision/flip"
  - "DIRECTORY.md:143:13         Corner                  U       * [Harris Corner](computer_vision/harris"
  - "DIRECTORY.md:145:22         Segmentation            U       * [Intensity Based Segmentation](computer_vision/intensity"
  - "DIRECTORY.md:146:6          Mean                    U       * [Mean Threshold](computer"
  - "DIRECTORY.md:146:11         Threshold               U       * [Mean Threshold](computer_vision/mean"
  - "DIRECTORY.md:148:6          Pooling                 U       * [Pooling Functions](computer"
  - "DIRECTORY.md:150:4          Conversions             U       ## Conversions"
  - "DIRECTORY.md:151:6          Astronomical            U       * [Astronomical Length Scale Conversion"
  - "DIRECTORY.md:155:6          Convert                 U       * [Convert Number To Words](conversions"
  - "DIRECTORY.md:161:6          Excel                   U       * [Excel Title To Column](conversions"
  - "DIRECTORY.md:161:21         Column                  U       * [Excel Title To Column](conversions/excel_title"
  - "DIRECTORY.md:166:6          Molecular               U       * [Molecular Chemistry](conversions"
  - "DIRECTORY.md:166:16         Chemistry               U       * [Molecular Chemistry](conversions/molecular"
  - "DIRECTORY.md:173:6          Rectangular             U       * [Rectangular To Polar](conversions"
  - "DIRECTORY.md:173:21         Polar                   U       * [Rectangular To Polar](conversions/rectangular"
  - "DIRECTORY.md:174:10         Cmyk                    U       * [Rgb Cmyk Conversion](conversions"
  - "DIRECTORY.md:176:6          Roman                   U       * [Roman Numerals](conversions"
  - "DIRECTORY.md:176:12         Numerals                U       * [Roman Numerals](conversions/roman_numerals"
  - "DIRECTORY.md:177:6          Speed                   U       * [Speed Conversions](conversions"
  - "DIRECTORY.md:186:13         Triplets                U       * [Find Triplets With 0 Sum](data_structures"
  - "DIRECTORY.md:189:8          Median                  U       * [Median Two Array](data_structures"
  - "DIRECTORY.md:190:8          Monotonic               U       * [Monotonic Array](data_structures"
  - "DIRECTORY.md:195:8          Sparse                  U       * [Sparse Table](data_structures"
  - "DIRECTORY.md:202:20         Mirror                  U       * [Binary Tree Mirror](data_structures/binary"
  - "DIRECTORY.md:206:8          Diameter                U       * [Diameter Of Binary Tree](data"
  - "DIRECTORY.md:208:8          Distribute              U       * [Distribute Coins](data_structures"
  - "DIRECTORY.md:210:16         Binarytree              U       * [Flatten Binarytree To Linkedlist](data"
  - "DIRECTORY.md:210:30         Linkedlist              U       Flatten Binarytree To Linkedlist](data_structures/binary"
  - "DIRECTORY.md:211:8          Floor                   U       * [Floor And Ceiling](data_structures"
  - "DIRECTORY.md:211:18         Ceiling                 U       * [Floor And Ceiling](data_structures/binary"
  - "DIRECTORY.md:216:8          Lowest                  U       * [Lowest Common Ancestor](data"
  - "DIRECTORY.md:216:22         Ancestor                U       * [Lowest Common Ancestor](data_structures/binary"
  - "DIRECTORY.md:217:8          Maximum                 U       * [Maximum Fenwick Tree](data_structures"
  - "DIRECTORY.md:222:18         Possible                U       * [Number Of Possible Binary Trees](data_structures"
  - "DIRECTORY.md:227:8          Symmetric               U       * [Symmetric Tree](data_structures"
  - "DIRECTORY.md:230:5          Disjoint                U       * Disjoint Set"
  - "DIRECTORY.md:231:8          Alternate               U       * [Alternate Disjoint Set](data_structures"
  - "DIRECTORY.md:233:5          Hashing                 U       * Hashing"
  - "DIRECTORY.md:244:5          Heap                    U       * Heap"
  - "DIRECTORY.md:251:8          Skew                    U       * [Skew Heap](data_structures"
  - "DIRECTORY.md:253:14         Kdtree                  U       * [Build Kdtree](data_structures/kd"
  - "DIRECTORY.md:254:7          Example                 U       * Example"
  - "DIRECTORY.md:256:10         Hypercube               U       * [Hypercube Points](data_structures"
  - "DIRECTORY.md:258:8          Nearest                 U       * [Nearest Neighbour Search](data"
  - "DIRECTORY.md:263:8          Deque                   U       * [Deque Doubly](data_structures"
  - "DIRECTORY.md:266:8          Floyds                  U       * [Floyds Cycle Detection](data"
  - "DIRECTORY.md:268:12         Loop                    U       * [Has Loop](data_structures/linked"
  - "DIRECTORY.md:269:11         Palindrome              U       * [Is Palindrome](data_structures/linked"
  - "DIRECTORY.md:271:8          Middle                  U       * [Middle Element Of Linked List"
  - "DIRECTORY.md:272:8          Print                   U       * [Print Reverse](data_structures"
  - "DIRECTORY.md:275:8          Singly                  U       * [Singly Linked List](data_structures"
  - "DIRECTORY.md:276:8          Skip                    U       * [Skip List](data_structures"
  - "DIRECTORY.md:281:15         Ended                   U       * [Double Ended Queue](data_structures"
  - "DIRECTORY.md:283:23         Using                   U       * [Priority Queue Using List](data_structures"
  - "DIRECTORY.md:286:17         Pseudo                  U       * [Queue On Pseudo Stack](data_structures"
  - "DIRECTORY.md:289:8          Dijkstras               U       * [Dijkstras Two Stack Algorithm"
  - "DIRECTORY.md:292:8          Lexicographical         U       * [Lexicographical Numbers](data_structures"
  - "DIRECTORY.md:293:13         Greater                 U       * [Next Greater Element](data_structures"
  - "DIRECTORY.md:300:8          Stock                   U       * [Stock Span Problem](data_structures"
  - "DIRECTORY.md:301:5          Suffix                  U       * Suffix Tree"
  - "DIRECTORY.md:313:13         Brightness              U       * [Change Brightness](digital_image_processing"
  - "DIRECTORY.md:315:17         Negative                U       * [Convert To Negative](digital_image_processing"
  - "DIRECTORY.md:316:5          Dithering               U       * Dithering"
  - "DIRECTORY.md:318:5          Edge                    U       * Edge Detection"
  - "DIRECTORY.md:319:8          Canny                   U       * [Canny](digital_image_processing"
  - "DIRECTORY.md:321:8          Bilateral               U       * [Bilateral Filter](digital_image"
  - "DIRECTORY.md:328:8          Sobel                   U       * [Sobel Filter](digital_image"
  - "DIRECTORY.md:329:5          Histogram               U       * Histogram Equalization"
  - "DIRECTORY.md:329:15         Equalization            U       * Histogram Equalization"
  - "DIRECTORY.md:332:5          Morphological           U       * Morphological Operations"
  - "DIRECTORY.md:339:6          Sepia                   U       * [Sepia](digital_image_processing"
  - "DIRECTORY.md:342:15         Conquer                 U       ## Divide And Conquer"
  - "DIRECTORY.md:343:6          Closest                 U       * [Closest Pair Of Points](divide"
  - "DIRECTORY.md:344:6          Convex                  U       * [Convex Hull](divide_and_conquer"
  - "DIRECTORY.md:344:13         Hull                    U       * [Convex Hull](divide_and_conquer"
  - "DIRECTORY.md:346:22         Iterative               U       * [Heaps Algorithm Iterative](divide_and_conquer"
  - "DIRECTORY.md:347:6          Inversions              U       * [Inversions](divide_and_conquer"
  - "DIRECTORY.md:349:10         Difference              U       * [Max Difference Pair](divide_and_conquer"
  - "DIRECTORY.md:350:10         Subarray                U       * [Max Subarray](divide_and_conquer"
  - "DIRECTORY.md:351:6          Mergesort               U       * [Mergesort](divide_and_conquer"
  - "DIRECTORY.md:354:6          Strassen                U       * [Strassen Matrix Multiplication"
  - "DIRECTORY.md:354:22         Multiplication          U       * [Strassen Matrix Multiplication](divide_and_conquer"
  - "DIRECTORY.md:357:6          Conf                    U       * [Conf](docs/conf.py)"
  - "DIRECTORY.md:359:12         Programming             U       ## Dynamic Programming"
  - "DIRECTORY.md:361:10         Construct               U       * [All Construct](dynamic_programming"
  - "DIRECTORY.md:362:6          Bitmask                 U       * [Bitmask](dynamic_programming"
  - "DIRECTORY.md:364:6          Climbing                U       * [Climbing Stairs](dynamic_programming"
  - "DIRECTORY.md:364:15         Stairs                  U       * [Climbing Stairs](dynamic_programming"
  - "DIRECTORY.md:366:6          Edit                    U       * [Edit Distance](dynamic_programming"
  - "DIRECTORY.md:366:11         Distance                U       * [Edit Distance](dynamic_programming"
  - "DIRECTORY.md:367:6          Factorial               U       * [Factorial](dynamic_programming"
  - "DIRECTORY.md:368:11         Fibonacci               U       * [Fast Fibonacci](dynamic_programming"
  - "DIRECTORY.md:370:6          Fizz                    U       * [Fizz Buzz](dynamic_programming"
  - "DIRECTORY.md:370:11         Buzz                    U       * [Fizz Buzz](dynamic_programming"
  - "DIRECTORY.md:371:6          Floyd                   U       * [Floyd Warshall](dynamic_programming"
  - "DIRECTORY.md:371:12         Warshall                U       * [Floyd Warshall](dynamic_programming"
  - "DIRECTORY.md:373:24         Submasks                U       [Iterating Through Submasks](dynamic_programming"
  - "DIRECTORY.md:374:8          Means                   U       * [K Means Clustering Tensorflow"
  - "DIRECTORY.md:374:14         Clustering              U       * [K Means Clustering Tensorflow](dynamic"
  - "DIRECTORY.md:374:25         Tensorflow              U       [K Means Clustering Tensorflow](dynamic_programming"
  - "DIRECTORY.md:375:6          Knapsack                U       * [Knapsack](dynamic_programming"
  - "DIRECTORY.md:376:14         Divisible               U       * [Largest Divisible Subset](dynamic_programming"
  - "DIRECTORY.md:377:6          Longest                 U       * [Longest Common Subsequence]"
  - "DIRECTORY.md:377:21         Subsequence             U       * [Longest Common Subsequence](dynamic_programming"
  - "DIRECTORY.md:378:21         Substring               U       * [Longest Common Substring](dynamic_programming"
  - "DIRECTORY.md:379:14         Increasing              U       * [Longest Increasing Subsequence](dynamic"
  - "DIRECTORY.md:381:39         Nlogn                   U       Increasing Subsequence O Nlogn](dynamic_programming"
  - "DIRECTORY.md:382:14         Palindromic             U       * [Longest Palindromic Subsequence](dynamic"
  - "DIRECTORY.md:383:13         Chain                   U       * [Matrix Chain Multiplication](dynamic"
  - "DIRECTORY.md:385:14         Adjacent                U       * [Max Non Adjacent Sum](dynamic_programming"
  - "DIRECTORY.md:389:6          Minimum                 U       * [Minimum Coin Change](dynamic"
  - "DIRECTORY.md:389:14         Coin                    U       * [Minimum Coin Change](dynamic_programming"
  - "DIRECTORY.md:393:14         Squares                 U       * [Minimum Squares To Represent A Number"
  - "DIRECTORY.md:395:14         Tickets                 U       * [Minimum Tickets Cost](dynamic_programming"
  - "DIRECTORY.md:397:17         Partitioning            U       * [Palindrome Partitioning](dynamic_programming"
  - "DIRECTORY.md:399:10         Cutting                 U       * [Rod Cutting](dynamic_programming"
  - "DIRECTORY.md:400:12         Waterman                U       * [Smith Waterman](dynamic_programming"
  - "DIRECTORY.md:401:13         Generation              U       * [Subset Generation](dynamic_programming"
  - "DIRECTORY.md:403:6          Trapped                 U       * [Trapped Water](dynamic_programming"
  - "DIRECTORY.md:404:6          Tribonacci              U       * [Tribonacci](dynamic_programming"
  - "DIRECTORY.md:405:6          Viterbi                 U       * [Viterbi](dynamic_programming"
  - "DIRECTORY.md:406:6          Wildcard                U       * [Wildcard Matching](dynamic_programming"
  - "DIRECTORY.md:406:15         Matching                U       * [Wildcard Matching](dynamic_programming"
  - "DIRECTORY.md:410:6          Apparent                U       * [Apparent Power](electronics/apparent"
  - "DIRECTORY.md:411:14         Voltage                 U       * [Builtin Voltage](electronics/builtin"
  - "DIRECTORY.md:412:16         Equivalence             U       * [Capacitor Equivalence](electronics/capacitor"
  - "DIRECTORY.md:413:14         Concentration           U       * [Carrier Concentration](electronics/carrier"
  - "DIRECTORY.md:414:6          Charging                U       * [Charging Capacitor](electronics"
  - "DIRECTORY.md:415:15         Inductor                U       * [Charging Inductor](electronics/charging"
  - "DIRECTORY.md:417:6          Coulombs                U       * [Coulombs Law](electronics/coulombs"
  - "DIRECTORY.md:418:15         Conductivity            U       * [Electric Conductivity](electronics/electric"
  - "DIRECTORY.md:420:6          Electrical              U       * [Electrical Impedance](electronics"
  - "DIRECTORY.md:420:17         Impedance               U       * [Electrical Impedance](electronics/electrical"
  - "DIRECTORY.md:422:10         Reactance               U       * [Ind Reactance](electronics/ind_reactance"
  - "DIRECTORY.md:423:6          Ohms                    U       * [Ohms Law](electronics/ohms"
  - "DIRECTORY.md:425:6          Resistor                U       * [Resistor Color Code](electronics"
  - "DIRECTORY.md:427:6          Resonant                U       * [Resonant Frequency](electronics"
  - "DIRECTORY.md:437:6          Equated                 U       * [Equated Monthly Installments"
  - "DIRECTORY.md:437:14         Monthly                 U       * [Equated Monthly Installments](financial"
  - "DIRECTORY.md:437:22         Installments            U       * [Equated Monthly Installments](financial/equated_monthly"
  - "DIRECTORY.md:439:6          Interest                U       * [Interest](financial/interest"
  - "DIRECTORY.md:440:6          Present                 U       * [Present Value](financial/present"
  - "DIRECTORY.md:444:4          Fractals                U       ## Fractals"
  - "DIRECTORY.md:445:6          Julia                   U       * [Julia Sets](fractals/julia"
  - "DIRECTORY.md:446:6          Koch                    U       * [Koch Snowflake](fractals"
  - "DIRECTORY.md:446:11         Snowflake               U       * [Koch Snowflake](fractals/koch_snowflake"
  - "DIRECTORY.md:447:6          Mandelbrot              U       * [Mandelbrot](fractals/mandelbrot"
  - "DIRECTORY.md:448:6          Sierpinski              U       * [Sierpinski Triangle](fractals/sierpinski"
  - "DIRECTORY.md:449:6          Vicsek                  U       * [Vicsek](fractals/vicsek.py"
  - "DIRECTORY.md:451:10         Logic                   U       ## Fuzzy Logic"
  - "DIRECTORY.md:454:4          Genetic                 U       ## Genetic Algorithm"
  - "DIRECTORY.md:457:4          Geodesy                 U       ## Geodesy"
  - "DIRECTORY.md:458:6          Haversine               U       * [Haversine Distance](geodesy/haversine"
  - "DIRECTORY.md:459:6          Lamberts                U       * [Lamberts Ellipsoidal Distance"
  - "DIRECTORY.md:459:15         Ellipsoidal             U       * [Lamberts Ellipsoidal Distance](geodesy/lamberts"
  - "DIRECTORY.md:461:4          Geometry                U       ## Geometry"
  - "DIRECTORY.md:464:4          Graphics                U       ## Graphics"
  - "DIRECTORY.md:465:6          Bezier                  U       * [Bezier Curve](graphics/bezier"
  - "DIRECTORY.md:465:13         Curve                   U       * [Bezier Curve](graphics/bezier_curve"
  - "DIRECTORY.md:466:6          Butterfly               U       * [Butterfly Pattern](graphics/butterfly"
  - "DIRECTORY.md:467:14         Differential            U       * [Digital Differential Analyzer Line](graphics"
  - "DIRECTORY.md:467:27         Analyzer                U       Digital Differential Analyzer Line](graphics/digital"
  - "DIRECTORY.md:470:4          Graphs                  U       ## Graphs"
  - "DIRECTORY.md:472:10         Colony                  U       * [Ant Colony Optimization Algorithms"
  - "DIRECTORY.md:472:17         Optimization            U       * [Ant Colony Optimization Algorithms](graphs/ant"
  - "DIRECTORY.md:473:6          Articulation            U       * [Articulation Points](graphs/articulation"
  - "DIRECTORY.md:475:6          Bellman                 U       * [Bellman Ford](graphs/bellman"
  - "DIRECTORY.md:476:9          Directional             U       * [Bi Directional Dijkstra](graphs/bi"
  - "DIRECTORY.md:476:21         Dijkstra                U       * [Bi Directional Dijkstra](graphs/bi_directional"
  - "DIRECTORY.md:477:6          Bidirectional           U       * [Bidirectional A Star](graphs/bidirectional"
  - "DIRECTORY.md:479:6          Boruvka                 U       * [Boruvka](graphs/boruvka.py)"
  - "DIRECTORY.md:482:27         Shortest                U       Breadth First Search Shortest Path](graphs/breadth"
  - "DIRECTORY.md:485:12         Bipatrite               U       * [Check Bipatrite](graphs/check_bipatrite"
  - "DIRECTORY.md:488:6          Deep                    U       * [Deep Clone Graph](graphs"
  - "DIRECTORY.md:496:6          Dinic                   U       * [Dinic](graphs/dinic.py)"
  - "DIRECTORY.md:497:6          Directed                U       * [Directed And Undirected Weighted"
  - "DIRECTORY.md:497:19         Undirected              U       * [Directed And Undirected Weighted Graph](graphs"
  - "DIRECTORY.md:497:30         Weighted                U       Directed And Undirected Weighted Graph](graphs/directed"
  - "DIRECTORY.md:498:6          Edmonds                 U       * [Edmonds Karp Multiple Source"
  - "DIRECTORY.md:498:14         Karp                    U       * [Edmonds Karp Multiple Source And"
  - "DIRECTORY.md:498:19         Multiple                U       * [Edmonds Karp Multiple Source And Sink](graphs"
  - "DIRECTORY.md:499:6          Eulerian                U       * [Eulerian Path And Circuit For"
  - "DIRECTORY.md:501:14         Bridges                 U       * [Finding Bridges](graphs/finding_bridges"
  - "DIRECTORY.md:502:6          Frequent                U       * [Frequent Pattern Graph Miner"
  - "DIRECTORY.md:502:29         Miner                   U       Frequent Pattern Graph Miner](graphs/frequent_pattern"
  - "DIRECTORY.md:503:8          Topological             U       * [G Topological Sort](graphs/g_topological"
  - "DIRECTORY.md:504:6          Gale                    U       * [Gale Shapley Bigraph](graphs"
  - "DIRECTORY.md:504:11         Shapley                 U       * [Gale Shapley Bigraph](graphs/gale"
  - "DIRECTORY.md:504:19         Bigraph                 U       * [Gale Shapley Bigraph](graphs/gale_shapley"
  - "DIRECTORY.md:505:12         Adjacency               U       * [Graph Adjacency List](graphs/graph_adjacency"
  - "DIRECTORY.md:509:6          Greedy                  U       * [Greedy Best First](graphs/greedy"
  - "DIRECTORY.md:510:24         Cover                   U       [Greedy Min Vertex Cover](graphs/greedy_min_vertex"
  - "DIRECTORY.md:511:6          Kahns                   U       * [Kahns Algorithm Long](graphs"
  - "DIRECTORY.md:512:22         Topo                    U       * [Kahns Algorithm Topo](graphs/kahns_algorithm"
  - "DIRECTORY.md:513:6          Karger                  U       * [Karger](graphs/karger.py)"
  - "DIRECTORY.md:514:6          Lanczos                 U       * [Lanczos Eigenvectors](graphs"
  - "DIRECTORY.md:514:14         Eigenvectors            U       * [Lanczos Eigenvectors](graphs/lanczos_eigenvectors"
  - "DIRECTORY.md:515:6          Markov                  U       * [Markov Chain](graphs/markov"
  - "DIRECTORY.md:518:14         Spanning                U       * [Minimum Spanning Tree Boruvka](graphs"
  - "DIRECTORY.md:519:28         Kruskal                 U       Minimum Spanning Tree Kruskal](graphs/minimum_spanning"
  - "DIRECTORY.md:521:28         Prims                   U       Minimum Spanning Tree Prims](graphs/minimum_spanning"
  - "DIRECTORY.md:523:6          Multi                   U       * [Multi Heuristic Astar](graphs"
  - "DIRECTORY.md:523:22         Astar                   U       * [Multi Heuristic Astar](graphs/multi_heuristic"
  - "DIRECTORY.md:524:11         Rank                    U       * [Page Rank](graphs/page_rank.py"
  - "DIRECTORY.md:525:6          Prim                    U       * [Prim](graphs/prim.py)"
  - "DIRECTORY.md:527:10         Kosaraju                U       * [Scc Kosaraju](graphs/scc_kosaraju"
  - "DIRECTORY.md:528:6          Strongly                U       * [Strongly Connected Components"
  - "DIRECTORY.md:529:6          Tarjans                 U       * [Tarjans Scc](graphs/tarjans"
  - "DIRECTORY.md:535:27         Sell                    U       Best Time To Buy And Sell Stock](greedy_methods"
  - "DIRECTORY.md:536:6          Fractional              U       * [Fractional Cover Problem](greedy"
  - "DIRECTORY.md:539:10         Station                 U       * [Gas Station](greedy_methods/gas"
  - "DIRECTORY.md:541:14         Waiting                 U       * [Minimum Waiting Time](greedy_methods"
  - "DIRECTORY.md:543:6          Smallest                U       * [Smallest Range](greedy_methods"
  - "DIRECTORY.md:545:4          Hashes                  U       ## Hashes"
  - "DIRECTORY.md:546:6          Adler                   U       * [Adler32](hashes/adler32.py"
  - "DIRECTORY.md:547:6          Chaos                   U       * [Chaos Machine](hashes/chaos"
  - "DIRECTORY.md:551:6          Fletcher                U       * [Fletcher16](hashes/fletcher1"
  - "DIRECTORY.md:552:6          Hamming                 U       * [Hamming Code](hashes/hamming"
  - "DIRECTORY.md:553:6          Luhn                    U       * [Luhn](hashes/luhn.py)"
  - "DIRECTORY.md:555:6          Sdbm                    U       * [Sdbm](hashes/sdbm.py)"
  - "DIRECTORY.md:562:16         Approach                U       * [Recursive Approach Knapsack](knapsack/recursive"
  - "DIRECTORY.md:568:15         Elimination             U       * [Gaussian Elimination](linear_algebra/gaussian"
  - "DIRECTORY.md:569:6          Jacobi                  U       * [Jacobi Iteration Method](linear"
  - "DIRECTORY.md:569:13         Iteration               U       * [Jacobi Iteration Method](linear_algebra"
  - "DIRECTORY.md:570:9          Decomposition           U       * [Lu Decomposition](linear_algebra/lu_decomposit"
  - "DIRECTORY.md:572:8          Conjugate               U       * [Conjugate Gradient](linear_algebra"
  - "DIRECTORY.md:573:29         Pivoting                U       Gaussian Elimination Pivoting](linear_algebra/src"
  - "DIRECTORY.md:575:8          Polynom                 U       * [Polynom For Points](linear_algebra"
  - "DIRECTORY.md:578:8          Rayleigh                U       * [Rayleigh Quotient](linear_algebra"
  - "DIRECTORY.md:578:17         Quotient                U       * [Rayleigh Quotient](linear_algebra/src"
  - "DIRECTORY.md:579:8          Schur                   U       * [Schur Complement](linear_algebra"
  - "DIRECTORY.md:581:8          Transformations         U       * [Transformations 2D](linear_algebra/src"
  - "DIRECTORY.md:584:6          Simplex                 U       * [Simplex](linear_programming"
  - "DIRECTORY.md:586:12         Learning                U       ## Machine Learning"
  - "DIRECTORY.md:587:6          Apriori                 U       * [Apriori Algorithm](machine_learning"
  - "DIRECTORY.md:589:16         Differentiation         U       * [Automatic Differentiation](machine_learning/automatic"
  - "DIRECTORY.md:592:21         Reduction               U       * [Dimensionality Reduction](machine_learning/dimensional"
  - "DIRECTORY.md:593:5          Forecasting             U       * Forecasting"
  - "DIRECTORY.md:595:23         Growth                  U       * [Frequent Pattern Growth](machine_learning/frequent"
  - "DIRECTORY.md:596:15         Boosting                U       * [Gradient Boosting Classifier](machine"
  - "DIRECTORY.md:598:14         Clust                   U       * [K Means Clust](machine_learning/k"
  - "DIRECTORY.md:599:16         Neighbours              U       * [K Nearest Neighbours](machine_learning/k"
  - "DIRECTORY.md:600:13         Discriminant            U       * [Linear Discriminant Analysis](machine_learning"
  - "DIRECTORY.md:601:13         Regression              U       * [Linear Regression](machine_learning/linear"
  - "DIRECTORY.md:604:6          Logistic                U       * [Logistic Regression](machine"
  - "DIRECTORY.md:605:6          Loss                    U       * [Loss Functions](machine_learning"
  - "DIRECTORY.md:606:5          Lstm                    U       * Lstm"
  - "DIRECTORY.md:608:6          Mfcc                    U       * [Mfcc](machine_learning/mfcc"
  - "DIRECTORY.md:609:6          Multilayer              U       * [Multilayer Perceptron Classifier"
  - "DIRECTORY.md:610:6          Polynomial              U       * [Polynomial Regression](machine"
  - "DIRECTORY.md:611:6          Scoring                 U       * [Scoring Functions](machine_learning"
  - "DIRECTORY.md:612:6          Self                    U       * [Self Organizing Map](machine"
  - "DIRECTORY.md:612:11         Organizing              U       * [Self Organizing Map](machine_learning"
  - "DIRECTORY.md:613:6          Sequential              U       * [Sequential Minimum Optimization"
  - "DIRECTORY.md:614:6          Similarity              U       * [Similarity Search](machine_learning"
  - "DIRECTORY.md:617:6          Xgboost                 U       * [Xgboost Classifier](machine"
  - "DIRECTORY.md:618:14         Regressor               U       * [Xgboost Regressor](machine_learning/xgboost"
  - "DIRECTORY.md:620:4          Maths                   U       ## Maths"
  - "DIRECTORY.md:622:23         Arithmetic              U       * [Addition Without Arithmetic](maths/addition_without"
  - "DIRECTORY.md:623:6          Aliquot                 U       * [Aliquot Sum](maths/aliquot_sum"
  - "DIRECTORY.md:624:6          Allocation              U       * [Allocation Number](maths/allocation"
  - "DIRECTORY.md:628:14         Absolute                U       * [Average Absolute Deviation](maths/average"
  - "DIRECTORY.md:631:14         Mode                    U       * [Average Mode](maths/average_mode"
  - "DIRECTORY.md:632:6          Bailey                  U       * [Bailey Borwein Plouffe](maths"
  - "DIRECTORY.md:632:13         Borwein                 U       * [Bailey Borwein Plouffe](maths/bailey"
  - "DIRECTORY.md:632:21         Plouffe                 U       * [Bailey Borwein Plouffe](maths/bailey_borwein"
  - "DIRECTORY.md:635:13         Exponentiation          U       * [Binary Exponentiation](maths/binary_exponentiation"
  - "DIRECTORY.md:639:6          Ceil                    U       * [Ceil](maths/ceil.py)"
  - "DIRECTORY.md:640:6          Chebyshev               U       * [Chebyshev Distance](maths/chebyshev"
  - "DIRECTORY.md:642:14         Remainder               U       * [Chinese Remainder Theorem](maths/chinese"
  - "DIRECTORY.md:643:6          Chudnovsky              U       * [Chudnovsky Algorithm](maths/chudnovsky"
  - "DIRECTORY.md:644:6          Collatz                 U       * [Collatz Sequence](maths/collatz"
  - "DIRECTORY.md:646:6          Continued               U       * [Continued Fraction](maths/continued"
  - "DIRECTORY.md:646:16         Fraction                U       * [Continued Fraction](maths/continued_fraction"
  - "DIRECTORY.md:647:14         Isolate                 U       * [Decimal Isolate](maths/decimal_isolate"
  - "DIRECTORY.md:649:6          Dodecahedron            U       * [Dodecahedron](maths/dodecahedron"
  - "DIRECTORY.md:651:6          Dual                    U       * [Dual Number Automatic Differentiat"
  - "DIRECTORY.md:652:6          Entropy                 U       * [Entropy](maths/entropy.py)"
  - "DIRECTORY.md:655:12         Modified                U       * [Euler Modified](maths/euler_modified"
  - "DIRECTORY.md:656:6          Eulers                  U       * [Eulers Totient](maths/eulers"
  - "DIRECTORY.md:656:13         Totient                 U       * [Eulers Totient](maths/eulers_totient"
  - "DIRECTORY.md:659:6          Factors                 U       * [Factors](maths/factors.py)"
  - "DIRECTORY.md:660:11         Inverse                 U       * [Fast Inverse Sqrt](maths/fast_inverse"
  - "DIRECTORY.md:661:6          Fermat                  U       * [Fermat Little Theorem](maths"
  - "DIRECTORY.md:661:13         Little                  U       * [Fermat Little Theorem](maths/fermat"
  - "DIRECTORY.md:669:6          Geometric               U       * [Geometric Mean](maths/geometric"
  - "DIRECTORY.md:670:6          Germain                 U       * [Germain Primes](maths/germain"
  - "DIRECTORY.md:671:6          Greatest                U       * [Greatest Common Divisor](maths"
  - "DIRECTORY.md:672:6          Hardy                   U       * [Hardy Ramanujanalgo](maths"
  - "DIRECTORY.md:672:12         Ramanujanalgo           U       * [Hardy Ramanujanalgo](maths/hardy_ramanujanalgo"
  - "DIRECTORY.md:674:6          Interquartile           U       * [Interquartile Range](maths/interquartile"
  - "DIRECTORY.md:678:6          Jaccard                 U       * [Jaccard Similarity](maths/jaccard"
  - "DIRECTORY.md:679:6          Joint                   U       * [Joint Probability Distribution"
  - "DIRECTORY.md:680:6          Josephus                U       * [Josephus Problem](maths/josephus"
  - "DIRECTORY.md:681:6          Juggler                 U       * [Juggler Sequence](maths/juggler"
  - "DIRECTORY.md:682:6          Karatsuba               U       * [Karatsuba](maths/karatsuba.py"
  - "DIRECTORY.md:683:10         Lexicographic           U       * [Kth Lexicographic Permutation](maths/kth"
  - "DIRECTORY.md:684:17         Very                    U       * [Largest Of Very Large Numbers](maths"
  - "DIRECTORY.md:684:22         Large                   U       * [Largest Of Very Large Numbers](maths/largest"
  - "DIRECTORY.md:685:6          Least                   U       * [Least Common Multiple](maths"
  - "DIRECTORY.md:687:6          Liouville               U       * [Liouville Lambda](maths/liouville"
  - "DIRECTORY.md:688:6          Lucas                   U       * [Lucas Lehmer Primality Test"
  - "DIRECTORY.md:688:12         Lehmer                  U       * [Lucas Lehmer Primality Test](maths"
  - "DIRECTORY.md:690:6          Maclaurin               U       * [Maclaurin Series](maths/maclaurin"
  - "DIRECTORY.md:691:6          Manhattan               U       * [Manhattan Distance](maths/manhattan"
  - "DIRECTORY.md:693:14         Sliding                 U       * [Max Sum Sliding Window](maths/max_sum"
  - "DIRECTORY.md:694:6          Minkowski               U       * [Minkowski Distance](maths/minkowski"
  - "DIRECTORY.md:695:6          Mobius                  U       * [Mobius Function](maths/mobius"
  - "DIRECTORY.md:696:14         Division                U       * [Modular Division](maths/modular_division"
  - "DIRECTORY.md:698:6          Monte                   U       * [Monte Carlo](maths/monte_carlo"
  - "DIRECTORY.md:698:12         Carlo                   U       * [Monte Carlo](maths/monte_carlo.py"
  - "DIRECTORY.md:699:18         Dice                    U       * [Monte Carlo Dice](maths/monte_carlo_dice"
  - "DIRECTORY.md:700:16         Digits                  U       * [Number Of Digits](maths/number_of_digits"
  - "DIRECTORY.md:701:5          Numerical               U       * Numerical Analysis"
  - "DIRECTORY.md:702:8          Adams                   U       * [Adams Bashforth](maths/numerical"
  - "DIRECTORY.md:702:14         Bashforth               U       * [Adams Bashforth](maths/numerical_analysis"
  - "DIRECTORY.md:703:8          Bisection               U       * [Bisection](maths/numerical_analysis"
  - "DIRECTORY.md:705:23         Simpson                 U       * [Integration By Simpson Approx](maths/numerical"
  - "DIRECTORY.md:707:8          Nevilles                U       * [Nevilles Method](maths/numerical"
  - "DIRECTORY.md:708:8          Newton                  U       * [Newton Forward Interpolation"
  - "DIRECTORY.md:709:15         Raphson                 U       * [Newton Raphson](maths/numerical_analysis"
  - "DIRECTORY.md:711:8          Proper                  U       * [Proper Fractions](maths/numerical"
  - "DIRECTORY.md:711:15         Fractions               U       * [Proper Fractions](maths/numerical_analysis"
  - "DIRECTORY.md:712:8          Runge                   U       * [Runge Kutta](maths/numerical"
  - "DIRECTORY.md:712:14         Kutta                   U       * [Runge Kutta](maths/numerical_analysis"
  - "DIRECTORY.md:713:20         Fehlberg                U       * [Runge Kutta Fehlberg 45](maths/numerical"
  - "DIRECTORY.md:714:20         Gills                   U       * [Runge Kutta Gills](maths/numerical_analysis"
  - "DIRECTORY.md:715:8          Secant                  U       * [Secant Method](maths/numerical"
  - "DIRECTORY.md:718:10         Sieve                   U       * [Odd Sieve](maths/odd_sieve.py"
  - "DIRECTORY.md:719:6          Perfect                 U       * [Perfect Cube](maths/perfect"
  - "DIRECTORY.md:722:6          Persistence             U       * [Persistence](maths/persistence.py"
  - "DIRECTORY.md:724:21         Estimation              U       * [Pi Monte Carlo Estimation](maths/pi_monte_carlo"
  - "DIRECTORY.md:725:17         Collinear               U       * [Points Are Collinear 3D](maths/points_are"
  - "DIRECTORY.md:726:6          Pollard                 U       * [Pollard Rho](maths/pollard_rho"
  - "DIRECTORY.md:728:5          Polynomials             U       * Polynomials"
  - "DIRECTORY.md:729:15         Indeterminate           U       * [Single Indeterminate Operations](maths/polynomials"
  - "DIRECTORY.md:730:18         Recursion               U       * [Power Using Recursion](maths/power_using_recursion"
  - "DIRECTORY.md:734:18         Eratosthenes            U       * [Prime Sieve Eratosthenes](maths/prime_sieve_eratosthen"
  - "DIRECTORY.md:735:6          Primelib                U       * [Primelib](maths/primelib.py)"
  - "DIRECTORY.md:737:6          Pythagoras              U       * [Pythagoras](maths/pythagoras.py"
  - "DIRECTORY.md:739:26         Complex                 U       Quadratic Equations Complex Numbers](maths/quadratic"
  - "DIRECTORY.md:740:6          Radians                 U       * [Radians](maths/radians.py)"
  - "DIRECTORY.md:742:13         Digit                   U       * [Remove Digit](maths/remove_digit"
  - "DIRECTORY.md:748:8          Harmonic                U       * [Harmonic](maths/series/harmonic"
  - "DIRECTORY.md:750:8          Hexagonal               U       * [Hexagonal Numbers](maths/series"
  - "DIRECTORY.md:753:6          Sigmoid                 U       * [Sigmoid](maths/sigmoid.py)"
  - "DIRECTORY.md:754:6          Signum                  U       * [Signum](maths/signum.py)"
  - "DIRECTORY.md:755:6          Simultaneous            U       * [Simultaneous Linear Equation Solver"
  - "DIRECTORY.md:757:6          Sock                    U       * [Sock Merchant](maths/sock"
  - "DIRECTORY.md:757:11         Merchant                U       * [Sock Merchant](maths/sock_merchant"
  - "DIRECTORY.md:758:6          Softmax                 U       * [Softmax](maths/softmax.py)"
  - "DIRECTORY.md:759:6          Solovay                 U       * [Solovay Strassen Primality Test"
  - "DIRECTORY.md:760:6          Spearman                U       * [Spearman Rank Correlation Coefficient"
  - "DIRECTORY.md:760:20         Correlation             U       * [Spearman Rank Correlation Coefficient](maths/spearman"
  - "DIRECTORY.md:761:5          Special                 U       * Special Numbers"
  - "DIRECTORY.md:762:8          Armstrong               U       * [Armstrong Numbers](maths/special"
  - "DIRECTORY.md:763:8          Automorphic             U       * [Automorphic Number](maths/special"
  - "DIRECTORY.md:764:8          Bell                    U       * [Bell Numbers](maths/special"
  - "DIRECTORY.md:765:8          Carmichael              U       * [Carmichael Number](maths/special"
  - "DIRECTORY.md:769:8          Harshad                 U       * [Harshad Numbers](maths/special"
  - "DIRECTORY.md:771:8          Krishnamurthy           U       * [Krishnamurthy Number](maths/special"
  - "DIRECTORY.md:773:8          Polygonal               U       * [Polygonal Numbers](maths/special"
  - "DIRECTORY.md:774:8          Pronic                  U       * [Pronic Number](maths/special"
  - "DIRECTORY.md:775:8          Proth                   U       * [Proth Number](maths/special"
  - "DIRECTORY.md:776:8          Triangular              U       * [Triangular Numbers](maths/special"
  - "DIRECTORY.md:777:8          Ugly                    U       * [Ugly Numbers](maths/special"
  - "DIRECTORY.md:778:8          Weird                   U       * [Weird Number](maths/special"
  - "DIRECTORY.md:781:23         Progression             U       * [Sum Of Geometric Progression](maths/sum_of_geometric"
  - "DIRECTORY.md:783:6          Sumset                  U       * [Sumset](maths/sumset.py)"
  - "DIRECTORY.md:784:6          Sylvester               U       * [Sylvester Sequence](maths/sylvester"
  - "DIRECTORY.md:785:6          Tanh                    U       * [Tanh](maths/tanh.py)"
  - "DIRECTORY.md:788:6          Trapezoidal             U       * [Trapezoidal Rule](maths/trapezoidal"
  - "DIRECTORY.md:789:6          Triplet                 U       * [Triplet Sum](maths/triplet_sum"
  - "DIRECTORY.md:790:6          Twin                    U       * [Twin Prime](maths/twin_prime"
  - "DIRECTORY.md:794:6          Zellers                 U       * [Zellers Congruence](maths/zellers"
  - "DIRECTORY.md:794:14         Congruence              U       * [Zellers Congruence](maths/zellers_congruence"
  - "DIRECTORY.md:798:12         Islands                 U       * [Count Islands In Matrix](matrix/count"
  - "DIRECTORY.md:801:6          Cramers                 U       * [Cramers Rule 2X2](matrix/cramers"
  - "DIRECTORY.md:809:18         Island                  U       * [Max Area Of Island](matrix/max_area_of"
  - "DIRECTORY.md:815:6          Sherman                 U       * [Sherman Morrison](matrix/sherman"
  - "DIRECTORY.md:816:6          Spiral                  U       * [Spiral Print](matrix/spiral"
  - "DIRECTORY.md:819:22         Board                   U       * [Validate Sudoku Board](matrix/validate_sudoku"
  - "DIRECTORY.md:821:4          Networking              U       ## Networking Flow"
  - "DIRECTORY.md:822:11         Fulkerson               U       * [Ford Fulkerson](networking_flow/ford"
  - "DIRECTORY.md:830:8          Leaky                   U       * [Leaky Rectified Linear Unit"
  - "DIRECTORY.md:830:14         Rectified               U       * [Leaky Rectified Linear Unit](neural"
  - "DIRECTORY.md:831:8          Mish                    U       * [Mish](neural_network/activation"
  - "DIRECTORY.md:834:8          Soboleva                U       * [Soboleva Modified Hyperbolic"
  - "DIRECTORY.md:834:26         Hyperbolic              U       [Soboleva Modified Hyperbolic Tangent](neural_network"
  - "DIRECTORY.md:834:37         Tangent                 U       Modified Hyperbolic Tangent](neural_network/activation"
  - "DIRECTORY.md:835:8          Softplus                U       * [Softplus](neural_network/activation"
  - "DIRECTORY.md:836:8          Squareplus              U       * [Squareplus](neural_network/activation"
  - "DIRECTORY.md:837:8          Swish                   U       * [Swish](neural_network/activation"
  - "DIRECTORY.md:838:6          Back                    U       * [Back Propagation Neural Network"
  - "DIRECTORY.md:846:6          Alternative             U       * [Alternative List Arrange](other"
  - "DIRECTORY.md:847:6          Bankers                 U       * [Bankers Algorithm](other/bankers"
  - "DIRECTORY.md:848:12         Putnam                  U       * [Davis Putnam Logemann Loveland](other"
  - "DIRECTORY.md:848:19         Logemann                U       * [Davis Putnam Logemann Loveland](other/davis"
  - "DIRECTORY.md:848:28         Loveland                U       Davis Putnam Logemann Loveland](other/davis_putnam"
  - "DIRECTORY.md:849:6          Doomsday                U       * [Doomsday](other/doomsday.py)"
  - "DIRECTORY.md:850:6          Fischer                 U       * [Fischer Yates Shuffle](other"
  - "DIRECTORY.md:850:14         Yates                   U       * [Fischer Yates Shuffle](other/fischer"
  - "DIRECTORY.md:850:20         Shuffle                 U       * [Fischer Yates Shuffle](other/fischer_yates"
  - "DIRECTORY.md:851:6          Gauss                   U       * [Gauss Easter](other/gauss"
  - "DIRECTORY.md:852:6          Graham                  U       * [Graham Scan](other/graham_scan"
  - "DIRECTORY.md:854:6          Guess                   U       * [Guess The Number Search](other"
  - "DIRECTORY.md:856:12         Recently                U       * [Least Recently Used](other/least_recently"
  - "DIRECTORY.md:858:13         Congruential            U       * [Linear Congruential Generator](other/linear"
  - "DIRECTORY.md:860:6          Magicdiamondpattern     U       * [Magicdiamondpattern](other/magicdiamondpattern"
  - "DIRECTORY.md:861:6          Majority                U       * [Majority Vote Algorithm](other"
  - "DIRECTORY.md:863:6          Nested                  U       * [Nested Brackets](other/nested"
  - "DIRECTORY.md:863:13         Brackets                U       * [Nested Brackets](other/nested_brackets"
  - "DIRECTORY.md:868:6          Sdes                    U       * [Sdes](other/sdes.py)"
  - "DIRECTORY.md:869:15         Hanoi                   U       * [Tower Of Hanoi](other/tower_of_hanoi"
  - "DIRECTORY.md:873:6          Altitude                U       * [Altitude Pressure](physics/altitude"
  - "DIRECTORY.md:874:6          Archimedes              U       * [Archimedes Principle Of Buoyant"
  - "DIRECTORY.md:874:17         Principle               U       * [Archimedes Principle Of Buoyant Force](physics"
  - "DIRECTORY.md:874:30         Buoyant                 U       Archimedes Principle Of Buoyant Force](physics/archimedes"
  - "DIRECTORY.md:875:12         Orbital                 U       * [Basic Orbital Capture](physics/basic"
  - "DIRECTORY.md:875:20         Capture                 U       * [Basic Orbital Capture](physics/basic_orbital"
  - "DIRECTORY.md:876:6          Casimir                 U       * [Casimir Effect](physics/casimir"
  - "DIRECTORY.md:877:16         Mass                    U       * [Center Of Mass](physics/center_of_mass"
  - "DIRECTORY.md:878:6          Centripetal             U       * [Centripetal Force](physics/centripetal"
  - "DIRECTORY.md:880:6          Doppler                 U       * [Doppler Frequency](physics/doppler"
  - "DIRECTORY.md:881:6          Grahams                 U       * [Grahams Law](physics/grahams"
  - "DIRECTORY.md:882:17         Projectile              U       * [Horizontal Projectile Motion](physics/horizontal"
  - "DIRECTORY.md:883:6          Hubble                  U       * [Hubble Parameter](physics/hubble"
  - "DIRECTORY.md:886:6          Kinetic                 U       * [Kinetic Energy](physics/kinetic"
  - "DIRECTORY.md:887:6          Lens                    U       * [Lens Formulae](physics/lens"
  - "DIRECTORY.md:887:11         Formulae                U       * [Lens Formulae](physics/lens_formulae"
  - "DIRECTORY.md:888:6          Lorentz                 U       * [Lorentz Transformation Four"
  - "DIRECTORY.md:888:29         Four                    U       Lorentz Transformation Four Vector](physics/lorentz"
  - "DIRECTORY.md:889:6          Malus                   U       * [Malus Law](physics/malus_law"
  - "DIRECTORY.md:893:6          Newtons                 U       * [Newtons Law Of Gravitation]"
  - "DIRECTORY.md:893:21         Gravitation             U       * [Newtons Law Of Gravitation](physics/newtons_law"
  - "DIRECTORY.md:894:14         Second                  U       * [Newtons Second Law Of Motion](physics"
  - "DIRECTORY.md:895:16         Pendulum                U       * [Period Of Pendulum](physics/period_of_pendulum"
  - "DIRECTORY.md:896:6          Photoelectric           U       * [Photoelectric Effect](physics/photoelectric"
  - "DIRECTORY.md:897:6          Potential               U       * [Potential Energy](physics/potential"
  - "DIRECTORY.md:898:6          Rainfall                U       * [Rainfall Intensity](physics/rainfall"
  - "DIRECTORY.md:900:19         Molecule                U       * [Rms Speed Of Molecule](physics/rms_speed_of"
  - "DIRECTORY.md:901:6          Shear                   U       * [Shear Stress](physics/shear"
  - "DIRECTORY.md:901:12         Stress                  U       * [Shear Stress](physics/shear_stress"
  - "DIRECTORY.md:902:15         Sound                   U       * [Speed Of Sound](physics/speed_of_sound"
  - "DIRECTORY.md:903:20         Molecules               U       * [Speeds Of Gas Molecules](physics/speeds_of_gas"
  - "DIRECTORY.md:904:15         Velocity                U       * [Terminal Velocity](physics/terminal_velocity"
  - "DIRECTORY.md:1051:13        Poker                   U       * [Test Poker Hand](project_euler"
  - "DIRECTORY.md:1051:19        Hand                    U       * [Test Poker Hand](project_euler/problem"
  - "DIRECTORY.md:1202:4         Quantum                 U       ## Quantum"
  - "DIRECTORY.md:1203:8         Fourier                 U       * [Q Fourier Transform](quantum/q"
  - "DIRECTORY.md:1205:4         Scheduling              U       ## Scheduling"
  - "DIRECTORY.md:1206:12        Come                    U       * [First Come First Served](scheduling"
  - "DIRECTORY.md:1206:23        Served                  U       * [First Come First Served](scheduling/first_come"
  - "DIRECTORY.md:1208:24        Deadline                U       [Job Sequence With Deadline](scheduling/job_sequence"
  - "DIRECTORY.md:1209:10        Sequencing              U       * [Job Sequencing With Deadline](scheduling"
  - "DIRECTORY.md:1211:10        Preemptive              U       * [Non Preemptive Shortest Job First]"
  - "DIRECTORY.md:1212:6         Round                   U       * [Round Robin](scheduling/round"
  - "DIRECTORY.md:1212:12        Robin                   U       * [Round Robin](scheduling/round_robin"
  - "DIRECTORY.md:1224:6         Jump                    U       * [Jump Search](searches/jump"
  - "DIRECTORY.md:1226:16        Medians                 U       * [Median Of Medians](searches/median_of"
  - "DIRECTORY.md:1228:6         Sentinel                U       * [Sentinel Linear Search](searches"
  - "DIRECTORY.md:1230:6         Simulated               U       * [Simulated Annealing](searches"
  - "DIRECTORY.md:1230:16        Annealing               U       * [Simulated Annealing](searches/simulated"
  - "DIRECTORY.md:1231:6         Tabu                    U       * [Tabu Search](searches/tabu"
  - "DIRECTORY.md:1232:6         Ternary                 U       * [Ternary Search](searches/ternary"
  - "DIRECTORY.md:1234:4         Sorts                   U       ## Sorts"
  - "DIRECTORY.md:1235:6         Bead                    U       * [Bead Sort](sorts/bead_sort"
  - "DIRECTORY.md:1236:13        Insertion               U       * [Binary Insertion Sort](sorts/binary_insertion"
  - "DIRECTORY.md:1237:6         Bitonic                 U       * [Bitonic Sort](sorts/bitonic"
  - "DIRECTORY.md:1238:6         Bogo                    U       * [Bogo Sort](sorts/bogo_sort"
  - "DIRECTORY.md:1241:6         Circle                  U       * [Circle Sort](sorts/circle_sort"
  - "DIRECTORY.md:1242:6         Cocktail                U       * [Cocktail Shaker Sort](sorts/cocktail"
  - "DIRECTORY.md:1242:15        Shaker                  U       * [Cocktail Shaker Sort](sorts/cocktail"
  - "DIRECTORY.md:1243:6         Comb                    U       * [Comb Sort](sorts/comb_sort"
  - "DIRECTORY.md:1244:6         Counting                U       * [Counting Sort](sorts/counting"
  - "DIRECTORY.md:1247:21        Flag                    U       * [Dutch National Flag Sort](sorts/dutch_national"
  - "DIRECTORY.md:1250:6         Gnome                   U       * [Gnome Sort](sorts/gnome_sort"
  - "DIRECTORY.md:1253:6         Intro                   U       * [Intro Sort](sorts/intro_sort"
  - "DIRECTORY.md:1261:36        Threaded                U       Transposition Single Threaded](sorts/odd_even_transposition"
  - "DIRECTORY.md:1262:6         Pancake                 U       * [Pancake Sort](sorts/pancake"
  - "DIRECTORY.md:1263:6         Patience                U       * [Patience Sort](sorts/patience"
  - "DIRECTORY.md:1264:6         Pigeon                  U       * [Pigeon Sort](sorts/pigeon_sort"
  - "DIRECTORY.md:1265:6         Pigeonhole              U       * [Pigeonhole Sort](sorts/pigeonhole"
  - "DIRECTORY.md:1274:6         Shrink                  U       * [Shrink Shell Sort](sorts/shrink"
  - "DIRECTORY.md:1275:6         Slowsort                U       * [Slowsort](sorts/slowsort.py)"
  - "DIRECTORY.md:1276:6         Stooge                  U       * [Stooge Sort](sorts/stooge_sort"
  - "DIRECTORY.md:1277:6         Strand                  U       * [Strand Sort](sorts/strand_sort"
  - "DIRECTORY.md:1281:6         Unknown                 U       * [Unknown Sort](sorts/unknown"
  - "DIRECTORY.md:1282:6         Wiggle                  U       * [Wiggle Sort](sorts/wiggle_sort"
  - "DIRECTORY.md:1284:4         Strings                 U       ## Strings"
  - "DIRECTORY.md:1285:10        Corasick                U       * [Aho Corasick](strings/aho_corasick"
  - "DIRECTORY.md:1287:6         Anagrams                U       * [Anagrams](strings/anagrams.py"
  - "DIRECTORY.md:1290:6         Bitap                   U       * [Bitap String Match](strings"
  - "DIRECTORY.md:1291:6         Boyer                   U       * [Boyer Moore Search](strings"
  - "DIRECTORY.md:1291:12        Moore                   U       * [Boyer Moore Search](strings/boyer"
  - "DIRECTORY.md:1292:6         Camel                   U       * [Camel Case To Snake Case]"
  - "DIRECTORY.md:1292:20        Snake                   U       * [Camel Case To Snake Case](strings/camel"
  - "DIRECTORY.md:1293:20        Rearranged              U       * [Can String Be Rearranged As Palindrome](strings"
  - "DIRECTORY.md:1294:6         Capitalize              U       * [Capitalize](strings/capitalize"
  - "DIRECTORY.md:1296:12        Vowels                  U       * [Count Vowels](strings/count_vowels"
  - "DIRECTORY.md:1297:13        Card                    U       * [Credit Card Validator](strings/credit"
  - "DIRECTORY.md:1298:6         Damerau                 U       * [Damerau Levenshtein Distance"
  - "DIRECTORY.md:1299:6         Detecting               U       * [Detecting English Programmatically"
  - "DIRECTORY.md:1299:24        Programmatically        U       [Detecting English Programmatically](strings/detecting_english"
  - "DIRECTORY.md:1302:16        Finder                  U       * [Frequency Finder](strings/frequency_finder"
  - "DIRECTORY.md:1305:9         Contains                U       * [Is Contains Unique Chars](strings"
  - "DIRECTORY.md:1305:25        Chars                   U       [Is Contains Unique Chars](strings/is_contains"
  - "DIRECTORY.md:1306:9         Isogram                 U       * [Is Isogram](strings/is_isogram"
  - "DIRECTORY.md:1307:9         Pangram                 U       * [Is Pangram](strings/is_pangram"
  - "DIRECTORY.md:1309:9         Spain                   U       * [Is Spain National Id](strings"
  - "DIRECTORY.md:1310:9         Srilankan               U       * [Is Srilankan Phone Number](strings"
  - "DIRECTORY.md:1312:6         Jaro                    U       * [Jaro Winkler](strings/jaro"
  - "DIRECTORY.md:1312:11        Winkler                 U       * [Jaro Winkler](strings/jaro_winkler"
  - "DIRECTORY.md:1314:19        Pratt                   U       * [Knuth Morris Pratt](strings/knuth_morris"
  - "DIRECTORY.md:1316:6         Lower                   U       * [Lower](strings/lower.py)"
  - "DIRECTORY.md:1317:6         Manacher                U       * [Manacher](strings/manacher.py"
  - "DIRECTORY.md:1319:6         Naive                   U       * [Naive String Search](strings"
  - "DIRECTORY.md:1320:6         Ngram                   U       * [Ngram](strings/ngram.py)"
  - "DIRECTORY.md:1322:10        Latin                   U       * [Pig Latin](strings/pig_latin.py"
  - "DIRECTORY.md:1325:13        Duplicate               U       * [Remove Duplicate](strings/remove_duplicate"
  - "DIRECTORY.md:1326:14        Letters                 U       * [Reverse Letters](strings/reverse_letters"
  - "DIRECTORY.md:1331:6         Strip                   U       * [Strip](strings/strip.py)"
  - "DIRECTORY.md:1332:11        Justification           U       * [Text Justification](strings/text_justification"
  - "DIRECTORY.md:1335:6         Upper                   U       * [Upper](strings/upper.py)"
  - "DIRECTORY.md:1336:6         Wave                    U       * [Wave String](strings/wave"
  - "DIRECTORY.md:1338:11        Occurrence              U       * [Word Occurrence](strings/word_occurrence"
  - "DIRECTORY.md:1343:10        Emission                U       * [Co2 Emission](web_programming/co"
  - "DIRECTORY.md:1344:6         Covid                   U       * [Covid Stats Via Xpath](web"
  - "DIRECTORY.md:1344:12        Stats                   U       * [Covid Stats Via Xpath](web_programming"
  - "DIRECTORY.md:1345:6         Crawl                   U       * [Crawl Google Results](web"
  - "DIRECTORY.md:1346:19        Scholar                 U       * [Crawl Google Scholar Citation](web_programming"
  - "DIRECTORY.md:1346:27        Citation                U       Crawl Google Scholar Citation](web_programming/crawl"
  - "DIRECTORY.md:1347:6         Currency                U       * [Currency Converter](web_programming"
  - "DIRECTORY.md:1347:15        Converter               U       * [Currency Converter](web_programming/currency"
  - "DIRECTORY.md:1349:14        Weather                 U       * [Current Weather](web_programming/current"
  - "DIRECTORY.md:1350:6         Daily                   U       * [Daily Horoscope](web_programming"
  - "DIRECTORY.md:1350:12        Horoscope               U       * [Daily Horoscope](web_programming/daily"
  - "DIRECTORY.md:1353:12        Anime                   U       * [Fetch Anime And Play](web_programming"
  - "DIRECTORY.md:1353:22        Play                    U       * [Fetch Anime And Play](web_programming/fetch"
  - "DIRECTORY.md:1360:10        Imdb                    U       * [Get Imdb Top 250 Movies Csv]"
  - "DIRECTORY.md:1360:23        Movies                  U       * [Get Imdb Top 250 Movies Csv](web_programming"
  - "DIRECTORY.md:1361:13        Geolocation             U       * [Get Ip Geolocation](web_programming/get"
  - "DIRECTORY.md:1362:14        Billionaires            U       * [Get Top Billionaires](web_programming/get"
  - "DIRECTORY.md:1363:17        Posts                   U       * [Get Top Hn Posts](web_programming/get"
  - "DIRECTORY.md:1364:6         Giphy                   U       * [Giphy](web_programming/giphy"
  - "DIRECTORY.md:1368:6         Nasa                    U       * [Nasa Data](web_programming"
  - "DIRECTORY.md:1371:6         Recaptcha               U       * [Recaptcha Verification](web_programming"
  - "DIRECTORY.md:1373:22        Isbn                    U       * [Search Books By Isbn](web_programming/search"
  - "divide_and_conquer/closest_pair_of_points.py:4:18           Divide          U       Approach used -> Divide and conquer"
  - "divide_and_conquer/closest_pair_of_points.py:4:29           conquer         U       Approach used -> Divide and conquer"
  - "divide_and_conquer/closest_pair_of_points.py:5:36           ords            U       sorted based on Xco-ords and"
  - "divide_and_conquer/closest_pair_of_points.py:6:24           separately      U       then based on Yco-ords separately."
  - "divide_and_conquer/closest_pair_of_points.py:11:11          handled         U       This case handled by forming a strip of"
  - "divide_and_conquer/convex_hull.py:4:62          geometrical         U       several applications in geometrical problems,"
  - "divide_and_conquer/convex_hull.py:110:5         Ignoring            U       Ignoring deformed point 1. All"
  - "divide_and_conquer/convex_hull.py:110:14        deformed            U       Ignoring deformed point 1. All points"
  - "divide_and_conquer/convex_hull.py:137:5         validates           U       validates an input instance before"
  - "divide_and_conquer/convex_hull.py:152:81        scalar              U       data structure like a scalar"
  - "divide_and_conquer/convex_hull.py:170:17        Expecting           U       ValueError: Expecting a list of points but"
  - "divide_and_conquer/convex_hull.py:190:5         Computes            U       Computes the sign perpendicular"
  - "divide_and_conquer/convex_hull.py:190:23        perpendicular       U       Computes the sign perpendicular distance of a 2d point"
  - "divide_and_conquer/convex_hull.py:193:75        straight            U       three points are on a straight line."
  - "divide_and_conquer/convex_hull.py:195:51        triangle            U       det| is the area of triangle abc"
  - "divide_and_conquer/convex_hull.py:206:58        computed            U       segment ab c is. det is computed as"
  - "divide_and_conquer/convex_hull.py:227:19        convexity           U       definition of convexity to determine whether"
  - "divide_and_conquer/convex_hull.py:232:23        definitely          U       Runtime: O(n^3) - definitely horrible"
  - "divide_and_conquer/convex_hull.py:232:34        horrible            U       O(n^3) - definitely horrible"
  - "divide_and_conquer/convex_hull.py:297:81        strategy            U       a divide-and-conquer strategy"
  - "divide_and_conquer/convex_hull.py:298:19        exploits            U       The algorithm exploits the geometric properties"
  - "divide_and_conquer/convex_hull.py:298:71        repeatedly          U       properties of the problem by repeatedly"
  - "divide_and_conquer/convex_hull.py:299:49        hulls               U       points into smaller hulls, and finding the convex"
  - "divide_and_conquer/convex_hull.py:334:21        anchors             U       # use these two anchors to divide all the points"
  - "divide_and_conquer/convex_hull.py:337:47        joining             U       left (above) the line joining the extreme points belong"
  - "divide_and_conquer/convex_hull.py:337:59        extreme             U       the line joining the extreme points belong to the"
  - "divide_and_conquer/convex_hull.py:337:74        belong              U       joining the extreme points belong to the"
  - "divide_and_conquer/convex_hull.py:391:9         candidate           U       candidate_points = []"
  - "divide_and_conquer/convex_hull.py:409:17        melkman             U       def convex_hull_melkman(points: list[Point]"
  - "divide_and_conquer/convex_hull.py:412:69        polygonal           U       inserting points of a simple polygonal chain"
  - "divide_and_conquer/convex_hull.py:466:25        lies                U       # The point lies within the convex hull"
  - "divide_and_conquer/heaps_algorithm_iterative.py:3:4         minimizes       U       It minimizes movement by generating"
  - "divide_and_conquer/inversions.py:4:8            inversions      U       called inversions. Counting the number"
  - "divide_and_conquer/inversions.py:5:26           Among           U       object is the important. Among other things, counting"
  - "divide_and_conquer/inversions.py:14:45          naive           U       of inversions using a naive brute-force algorithm"
  - "divide_and_conquer/inversions.py:69:8           inversion       U       a, inversion_p = count_inversions"
  - "divide_and_conquer/inversions.py:104:51         emerges         U       inversions. The claim emerges from the"
  - "divide_and_conquer/kth_order_statistic.py:3:23          trivially           U       Recall we can do this trivially in O(nlogn) time. Sort"
  - "divide_and_conquer/kth_order_statistic.py:20:23         sophisticated       U       We can use a more sophisticated algorithm here, such"
  - "divide_and_conquer/kth_order_statistic.py:20:75         medians             U       such as the median-of-medians"
  - "divide_and_conquer/kth_order_statistic.py:48:17         lucky               U       # if we get lucky, pivot might be the"
  - "divide_and_conquer/max_subarray.py:4:38         contiguous      U       , 2, 1, -5, 4], the contiguous subarray with the maximum"
  - "divide_and_conquer/max_subarray.py:23:5         Solves          U       Solves the maximum subarray"
  - "divide_and_conquer/max_subarray.py:70:5         summ            U       summ: int | float = 0"
  - "divide_and_conquer/mergesort.py:97:12       avoids      U       # this avoids integer overflow in"
  - "divide_and_conquer/peak.py:2:23         unimodal        U       Finding the peak of a unimodal list using divide and"
  - "divide_and_conquer/peak.py:4:17         afterwards      U       then decreasing afterwards. (for p >= 1)"
  - "divide_and_conquer/peak.py:5:4          obvious         U       An obvious solution can be performed"
  - "divide_and_conquer/peak.py:7:7          Kleinberg       U       (From Kleinberg and Tardos. Algorithm"
  - "divide_and_conquer/peak.py:7:21         Tardos          U       (From Kleinberg and Tardos. Algorithm Design."
  - "divide_and_conquer/peak.py:8:1          Addison         U       Addison Wesley 2006: Chapter"
  - "divide_and_conquer/peak.py:8:9          Wesley          U       Addison Wesley 2006: Chapter 5 Solved"
  - "divide_and_conquer/peak.py:8:22         Chapter         U       Addison Wesley 2006: Chapter 5 Solved Exercise 1"
  - "divide_and_conquer/peak.py:8:39         Exercise        U       6: Chapter 5 Solved Exercise 1)"
  - "divide_and_conquer/strassen_matrix_multiplication.py:36:5           quadrant        U       quadrant."
  - "divide_and_conquer/strassen_matrix_multiplication.py:74:12          strassen        U       def actual_strassen(matrix_a: list, matrix"
  - "divide_and_conquer/strassen_matrix_multiplication.py:98:43          quadrants       U       new matrix from our 4 quadrants"
  - "divide_and_conquer/strassen_matrix_multiplication.py:116:14         Unable          U       \"Unable to multiply these matrices"
  - "divide_and_conquer/strassen_matrix_multiplication.py:148:7          Removing        U       # Removing the additional zeros"
  - "docs/conf.py:3:45           globalns    U       ../pyproject.toml\", globalns=globals()).name"
  - "dynamic_programming/all_construct.py:17:24          purple              U       >>> all_construct(\"purple\",[\"purp\",\"p\",\"ur\",\"le"
  - "dynamic_programming/all_construct.py:17:34          purp                U       construct(\"purple\",[\"purp\",\"p\",\"ur\",\"le\",\"purpl"
  - "dynamic_programming/all_construct.py:17:55          purpl               U       purp\",\"p\",\"ur\",\"le\",\"purpl\"])"
  - "dynamic_programming/all_construct.py:53:26          jwajalapa           U       print(all_construct(\"jwajalapa\", [\"jwa\", \"j\", \"w\","
  - "dynamic_programming/all_construct.py:53:68          lapa                U       j\", \"w\", \"a\", \"la\", \"lapa\"]))"
  - "dynamic_programming/all_construct.py:54:26          rajamati            U       print(all_construct(\"rajamati\", [\"s\", \"raj\", \"amat"
  - "dynamic_programming/all_construct.py:54:59          raja                U       s\", \"raj\", \"amat\", \"raja\", \"ma\", \"i\", \"t\"]))"
  - "dynamic_programming/all_construct.py:57:14          hexagonosaurus      U       \"hexagonosaurus\","
  - "dynamic_programming/all_construct.py:58:52          auru                U       \"ag\", \"ago\", \"ru\", \"auru\", \"rus\", \"go\", \"no\""
  - "dynamic_programming/bitmask.py:3:37         questions       U       Python implementation for questions involving task assignments"
  - "dynamic_programming/bitmask.py:3:47         involving       U       implementation for questions involving task assignments between"
  - "dynamic_programming/bitmask.py:4:6          Bitmasking      U       Here Bitmasking and DP are used for"
  - "dynamic_programming/bitmask.py:4:37         solving         U       and DP are used for solving this."
  - "dynamic_programming/bitmask.py:20:11        initially       U       # initially all values are set to"
  - "dynamic_programming/bitmask.py:25:61        persons         U       stores the list of persons for each task"
  - "dynamic_programming/bitmask.py:32:27        finalmask       U       # if mask == self.finalmask all persons are distributed"
  - "dynamic_programming/bitmask.py:44:57        arrangement     U       don't this task in the arrangement"
  - "dynamic_programming/catalan_numbers.py:7:20         Dyck            U       * - The number of Dyck words of length 2n"
  - "dynamic_programming/catalan_numbers.py:15:21        satisfies       U       * A Catalan number satisfies the following recurrence"
  - "dynamic_programming/catalan_numbers.py:15:45        recurrence      U       satisfies the following recurrence relation"
  - "dynamic_programming/catalan_numbers.py:52:7         Recurrence      U       # Recurrence relation: C(i) = sum"
  - "dynamic_programming/catalan_numbers.py:75:43        goodbye         U       **** Invalid input, goodbye! ************\\n\")"
  - "dynamic_programming/climbing_stairs.py:4:5          climb           U       def climb_stairs(number_of_steps"
  - "dynamic_programming/climbing_stairs.py:4:11         stairs          U       def climb_stairs(number_of_steps: int"
  - "dynamic_programming/climbing_stairs.py:6:9          Cdoe            U       LeetCdoe No.70: Climbing Stairs"
  - "dynamic_programming/climbing_stairs.py:7:46         staircase       U       climb a number_of_steps staircase where each time you"
  - "dynamic_programming/combination_sum_iv.py:29:32         exponential     U       possible combination in exponential Time Complexity."
  - "dynamic_programming/edit_distance.py:2:11           Turfa           U       Author : Turfa Auliarachman"
  - "dynamic_programming/edit_distance.py:2:17           Auliarachman    U       Author : Turfa Auliarachman"
  - "dynamic_programming/edit_distance.py:10:12          permitted       U       A = B. The permitted operations are removal"
  - "dynamic_programming/edit_distance.py:46:47          intention       U       .min_dist_top_down(\"intention\", \"execution\")"
  - "dynamic_programming/fast_fibonacci.py:13:5          fibonacci       U       def fibonacci(n: int) -> int:"
  - "dynamic_programming/fizz_buzz.py:4:5            fizz            U       def fizz_buzz(number: int, iterations"
  - "dynamic_programming/fizz_buzz.py:4:10           buzz            U       def fizz_buzz(number: int, iterations"
  - "dynamic_programming/fizz_buzz.py:6:7            Plays           U       | Plays FizzBuzz."
  - "dynamic_programming/fizz_buzz.py:10:30          Itself          U       Else Prints The Number Itself."
  - "dynamic_programming/fizz_buzz.py:17:17          Iterations      U       ValueError: Iterations must be done more than"
  - "dynamic_programming/floyd_warshall.py:9:14          adjacency       U       ] # adjacency matrix for weight"
  - "dynamic_programming/floyd_warshall.py:16:16         directed        U       Adds a directed edge from node u"
  - "dynamic_programming/floyd_warshall.py:26:9          floyd           U       def floyd_warshall(self):"
  - "dynamic_programming/floyd_warshall.py:26:15         warshall        U       def floyd_warshall(self):"
  - "dynamic_programming/integer_partition.py:4:1            Subtracting     U       Subtracting 1 from each part of"
  - "dynamic_programming/integer_partition.py:5:25           facts           U       into k parts. These two facts together are used for"
  - "dynamic_programming/integer_partition.py:34:5           memo            U       memo: list[list[int]] ="
  - "dynamic_programming/iterating_through_submasks.py:2:10          Syed        U       Author : Syed Faizan (3rd Year Student"
  - "dynamic_programming/iterating_through_submasks.py:2:15          Faizan      U       Author : Syed Faizan (3rd Year Student IIIT"
  - "dynamic_programming/iterating_through_submasks.py:2:32          Student     U       Syed Faizan (3rd Year Student IIIT Pune)"
  - "dynamic_programming/iterating_through_submasks.py:2:40          IIIT        U       Faizan (3rd Year Student IIIT Pune)"
  - "dynamic_programming/iterating_through_submasks.py:2:45          Pune        U       rd Year Student IIIT Pune)"
  - "dynamic_programming/iterating_through_submasks.py:3:10          faizan      U       github : faizan2700"
  - "dynamic_programming/iterating_through_submasks.py:4:17          bitmask     U       You are given a bitmask m and you want to efficiently"
  - "dynamic_programming/iterating_through_submasks.py:5:5           submasks    U       its submasks. The mask s is submask"
  - "dynamic_programming/iterating_through_submasks.py:5:29          submask     U       submasks. The mask s is submask of m if only bits that"
  - "dynamic_programming/k_means_clustering_tensorflow.py:7:33           noofclusters        U       means_cluster(vectors, noofclusters):"
  - "dynamic_programming/k_means_clustering_tensorflow.py:11:19          dimensionality      U       of vectors of dimensionality k."
  - "dynamic_programming/k_means_clustering_tensorflow.py:21:31          centroids           U       Will help select random centroids from among the available"
  - "dynamic_programming/k_means_clustering_tensorflow.py:25:16          COMPUTATION         U       # GRAPH OF COMPUTATION"
  - "dynamic_programming/k_means_clustering_tensorflow.py:27:31          ensures             U       this algorithm. This ensures that as this function"
  - "dynamic_programming/k_means_clustering_tensorflow.py:28:62          crowded             U       doesn't keep getting crowded with"
  - "dynamic_programming/k_means_clustering_tensorflow.py:36:9           sess                U       sess = tf.Session()"
  - "dynamic_programming/k_means_clustering_tensorflow.py:38:11          CONSTRUCTING        U       ##CONSTRUCTING THE ELEMENTS OF COMPUTATION"
  - "dynamic_programming/k_means_clustering_tensorflow.py:65:43          computes            U       takes the input and computes a mean along the 0th"
  - "dynamic_programming/k_means_clustering_tensorflow.py:69:20          computing           U       ##Node for computing Euclidean distances"
  - "dynamic_programming/k_means_clustering_tensorflow.py:70:11          Placeholders        U       # Placeholders for input"
  - "dynamic_programming/k_means_clustering_tensorflow.py:73:9           euclid              U       euclid_dist = tf.sqrt(tf.reduce"
  - "dynamic_programming/k_means_clustering_tensorflow.py:81:11          INITIALIZING        U       ##INITIALIZING STATE VARIABLES"
  - "dynamic_programming/k_means_clustering_tensorflow.py:83:26          initialization      U       ##This will help initialization of all Variables defined"
  - "dynamic_programming/k_means_clustering_tensorflow.py:92:11          CLUSTERING          U       ##CLUSTERING ITERATIONS"
  - "dynamic_programming/k_means_clustering_tensorflow.py:92:22          ITERATIONS          U       ##CLUSTERING ITERATIONS"
  - "dynamic_programming/k_means_clustering_tensorflow.py:94:39          Maximization        U       perform the Expectation-Maximization steps of K-Means clustering"
  - "dynamic_programming/k_means_clustering_tensorflow.py:94:69          clustering          U       Maximization steps of K-Means clustering"
  - "dynamic_programming/k_means_clustering_tensorflow.py:96:42          Stopping            U       instead of using a Stopping Criterion."
  - "dynamic_programming/k_means_clustering_tensorflow.py:96:51          Criterion           U       of using a Stopping Criterion."
  - "dynamic_programming/k_means_clustering_tensorflow.py:97:9           noofiterations      U       noofiterations = 100"
  - "dynamic_programming/k_means_clustering_tensorflow.py:104:17         vect                U       vect = vectors[vector_n]"
  - "dynamic_programming/k_means_clustering_tensorflow.py:123:15         MAXIMIZATION        U       ##MAXIMIZATION STEP"
  - "dynamic_programming/k_means_clustering_tensorflow.py:125:63         maximize            U       the centroids so as to maximize the"
  - "dynamic_programming/k_means_clustering_tensorflow.py:126:36         minimizing          U       overall objective of minimizing within-cluster Sum-of"
  - "dynamic_programming/k_means_clustering_tensorflow.py:129:26         vects               U       assigned_vects = ["
  - "dynamic_programming/knapsack.py:2:59        knapsack            U       put these items in a knapsack of"
  - "dynamic_programming/knapsack.py:12:75       subproblems         U       functions. Here we solve the subproblems"
  - "dynamic_programming/knapsack.py:13:22       unlike              U       which are needed unlike the below example"
  - "dynamic_programming/knapsack.py:61:18       rise                U       which gave rise to the optimal value"
  - "dynamic_programming/knapsack.py:105:17      reconstructs        U       Recursively reconstructs one of the optimal subsets"
  - "dynamic_programming/knapsack.py:114:45      consideration       U       index of the item under consideration"
  - "dynamic_programming/largest_divisible_subset.py:6:27        biggest         U       Algorithm to find the biggest subset in the given"
  - "dynamic_programming/largest_divisible_subset.py:55:7        Reconstruct     U       # Reconstruct the divisible subset"
  - "dynamic_programming/longest_common_subsequence.py:25:52         gaming          U       subsequence(\"programming\", \"gaming\")"
  - "dynamic_programming/longest_common_subsequence.py:29:49         food            U       subsequence(\"computer\", \"food\")"
  - "dynamic_programming/longest_common_subsequence.py:39:53         Identical       U       subsequence(\"abc\", \"abc\") # Identical strings"
  - "dynamic_programming/longest_common_subsequence.py:45:56         Interleaved     U       \"abcdef\", \"ace\") # Interleaved subsequence"
  - "dynamic_programming/longest_common_subsequence.py:47:45         ACBD            U       subsequence(\"ABCD\", \"ACBD\") # No repeated characters"
  - "dynamic_programming/longest_common_subsequence.py:58:7          declaring       U       # declaring the array for storing"
  - "dynamic_programming/longest_common_subsequence.py:86:10         AGGTAB          U       a = \"AGGTAB\""
  - "dynamic_programming/longest_common_subsequence.py:87:10         GXTXAYB         U       b = \"GXTXAYB\""
  - "dynamic_programming/longest_common_subsequence.py:89:24         GTAB            U       expected_subseq = \"GTAB\""
  - "dynamic_programming/longest_common_substring.py:8:22        xabded          U       ``abcdef`` and ``xabded`` have two longest common"
  - "dynamic_programming/longest_common_substring.py:9:5         Therefore       U       Therefore, algorithm should return"
  - "dynamic_programming/longest_common_substring.py:29:35       Geeksfor        U       longest_common_substring(\"GeeksforGeeks\", \"GeeksQuiz\")"
  - "dynamic_programming/longest_common_substring.py:29:43       Geeks           U       common_substring(\"GeeksforGeeks\", \"GeeksQuiz\")"
  - "dynamic_programming/longest_common_substring.py:29:57       Quiz            U       GeeksforGeeks\", \"GeeksQuiz\")"
  - "dynamic_programming/longest_common_substring.py:31:35       abcdxyz         U       longest_common_substring(\"abcdxyz\", \"xyzabcd\")"
  - "dynamic_programming/longest_common_substring.py:31:46       xyzabcd         U       substring(\"abcdxyz\", \"xyzabcd\")"
  - "dynamic_programming/longest_common_substring.py:33:35       zxabcdezy       U       longest_common_substring(\"zxabcdezy\", \"yzabcdezx\")"
  - "dynamic_programming/longest_common_substring.py:33:48       yzabcdezx       U       substring(\"zxabcdezy\", \"yzabcdezx\")"
  - "dynamic_programming/longest_common_substring.py:34:6        abcdez          U       'abcdez'"
  - "dynamic_programming/longest_increasing_subsequence_iterative.py:2:11        Sanjay      U       Author : Sanjay Muthu <https://github"
  - "dynamic_programming/longest_increasing_subsequence_iterative.py:2:18        Muthu       U       Author : Sanjay Muthu <https://github.com"
  - "dynamic_programming/longest_increasing_subsequence_o_nlogn.py:2:11          Aravind         U       # Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence_o_nlogn.py:2:19          Kashyap         U       # Author: Aravind Kashyap"
  - "dynamic_programming/longest_increasing_subsequence_o_nlogn.py:4:18          programme       U       # comments: This programme outputs the Longest"
  - "dynamic_programming/longest_increasing_subsequence.py:2:11          Mehdi       U       Author : Mehdi ALAOUI"
  - "dynamic_programming/longest_increasing_subsequence.py:2:17          ALAOUI      U       Author : Mehdi ALAOUI"
  - "dynamic_programming/longest_palindromic_subsequence.py:2:9          Sanket          U       author: Sanket Kittad"
  - "dynamic_programming/longest_palindromic_subsequence.py:2:16         Kittad          U       author: Sanket Kittad"
  - "dynamic_programming/longest_palindromic_subsequence.py:3:36         palindromic     U       s, find the longest palindromic subsequence's length"
  - "dynamic_programming/longest_palindromic_subsequence.py:4:13         bbbab           U       Input: s = \"bbbab\""
  - "dynamic_programming/longest_palindromic_subsequence.py:16:42        bbabcbcab       U       palindromic_subsequence(\"bbabcbcab\")"
  - "dynamic_programming/matrix_chain_multiplication.py:2:30         multiplications     U       the minimum number of multiplications needed to multiply chain"
  - "dynamic_programming/matrix_chain_multiplication.py:9:31         equations           U       Solve complex polynomial equations in the field of algebra"
  - "dynamic_programming/matrix_chain_multiplication.py:11:24        impact              U       . Calculate overall impact of macroeconomic decisions"
  - "dynamic_programming/matrix_chain_multiplication.py:11:34        macroeconomic       U       Calculate overall impact of macroeconomic decisions as economic"
  - "dynamic_programming/matrix_chain_multiplication.py:11:48        decisions           U       impact of macroeconomic decisions as economic equations"
  - "dynamic_programming/matrix_chain_multiplication.py:11:61        economic            U       macroeconomic decisions as economic equations involve a"
  - "dynamic_programming/matrix_chain_multiplication.py:11:80        involve             U       as economic equations involve a"
  - "dynamic_programming/matrix_chain_multiplication.py:13:11        driving             U       4. Self-driving car navigation can be"
  - "dynamic_programming/matrix_chain_multiplication.py:13:23        navigation          U       4. Self-driving car navigation can be made more accurate"
  - "dynamic_programming/matrix_chain_multiplication.py:13:51        accurate            U       navigation can be made more accurate as matrix multiplication"
  - "dynamic_programming/matrix_chain_multiplication.py:14:6         accurately          U       accurately determine position and"
  - "dynamic_programming/matrix_chain_multiplication.py:14:55        obstacles           U       position and orientation of obstacles in short time."
  - "dynamic_programming/matrix_chain_multiplication.py:22:4         suppose             U       So suppose ``arr = [40, 20, 30"
  - "dynamic_programming/matrix_chain_multiplication.py:25:48        denoting            U       returns an integer denoting minimum number of"
  - "dynamic_programming/matrix_chain_multiplication.py:29:17        decide              U       We only need to decide the order in which to"
  - "dynamic_programming/matrix_chain_multiplication.py:34:43        associative         U       multiplication is not associative ie ``(M1*M2)*M3 != M"
  - "dynamic_programming/matrix_chain_multiplication.py:56:32        multiplcations      U       the minimum number of multiplcations required to multiply"
  - "dynamic_programming/matrix_chain_multiplication.py:81:7         initialising        U       # initialising 2D dp matrix"
  - "dynamic_programming/matrix_chain_multiplication.py:131:5        elapsed             U       def elapsed_time(msg: str) -> Iterator"
  - "dynamic_programming/matrix_chain_order.py:32:11         optiomal    U       def print_optiomal_solution(optimal_solution"
  - "dynamic_programming/max_non_adjacent_sum.py:22:9        excluding       U       max_excluding = 0"
  - "dynamic_programming/max_subarray_sum.py:7:1         Kadane's        U       Kadane's algorithm is a simple"
  - "dynamic_programming/max_subarray_sum.py:17:39       subarrays       U       float], allow_empty_subarrays: bool = False"
  - "dynamic_programming/min_distance_up_bottom.py:7:1           Levinstein              U       Levinstein distance"
  - "dynamic_programming/min_distance_up_bottom.py:22:33         zooicoarchaeologist     U       distance_up_bottom(\"zooicoarchaeologist\", \"zoologist\")"
  - "dynamic_programming/min_distance_up_bottom.py:22:56         zoologist               U       zooicoarchaeologist\", \"zoologist\")"
  - "dynamic_programming/min_distance_up_bottom.py:30:31         overflows               U       if first word index overflows - delete all from the"
  - "dynamic_programming/minimum_coin_change.py:2:49         quantities      U       available in infinite quantities"
  - "dynamic_programming/minimum_coin_change.py:35:7         picked          U       # picked coin"
  - "dynamic_programming/minimum_cost_path.py:8:27           traced      U       Find the minimum cost traced by all possible paths"
  - "dynamic_programming/minimum_cost_path.py:26:7           updating    U       # updating the path cost for current"
  - "dynamic_programming/minimum_squares_to_represent_a_number.py:34:5           answers     U       answers = [-1] * (number +"
  - "dynamic_programming/minimum_steps_to_one.py:32:42       tabulation      U       1 implemented using tabulation."
  - "dynamic_programming/minimum_tickets_cost.py:6:39        travel      U       days when you need to travel. Each day is integer"
  - "dynamic_programming/minimum_tickets_cost.py:7:21        tickets     U       You are able to use tickets for 1 day, 7 days and"
  - "dynamic_programming/minimum_tickets_cost.py:8:6         ticket      U       Each ticket has a cost."
  - "dynamic_programming/optimal_binary_search_tree.py:3:65          abbreviated         U       binary search tree (abbreviated BST)"
  - "dynamic_programming/optimal_binary_search_tree.py:4:47          delivers            U       programming algorithm that delivers O(n^2) performance."
  - "dynamic_programming/optimal_binary_search_tree.py:13:46         characteristic      U       nodes in the BST. The characteristic of low-cost"
  - "dynamic_programming/optimal_binary_search_tree.py:14:11         having              U       # BSTs is having a faster overall search"
  - "dynamic_programming/optimal_binary_search_tree.py:72:22         CLRS                U       Implemented from CLRS (Introduction to Algorithms"
  - "dynamic_programming/optimal_binary_search_tree.py:72:28         Introduction        U       Implemented from CLRS (Introduction to Algorithms) book"
  - "dynamic_programming/optimal_binary_search_tree.py:93:55         sorts               U       first, the code below sorts the keys in"
  - "dynamic_programming/optimal_binary_search_tree.py:94:28         rearrange           U       increasing order and rearrange its frequencies accordingly"
  - "dynamic_programming/optimal_binary_search_tree.py:100:5         freqs               U       freqs = [nodes[i].freq for"
  - "dynamic_programming/optimal_binary_search_tree.py:108:53        constructing        U       will be used later for constructing binary search tree"
  - "dynamic_programming/optimal_binary_search_tree.py:118:29        optimization        U       # Apply Knuth's optimization"
  - "dynamic_programming/palindrome_partitioning.py:4:18         cuts                U       Find the minimum cuts needed for a palindrome"
  - "dynamic_programming/palindrome_partitioning.py:20:34        ababbbabbababa      U       minimum_partitions(\"ababbbabbababa\")"
  - "dynamic_programming/regex_match.py:6:42         preceding       U       zero or more of the preceding element."
  - "dynamic_programming/rod_cutting.py:2:54         cutting         U       implementations for the rod-cutting problem:"
  - "dynamic_programming/rod_cutting.py:6:72         revenue         U       the maximum possible revenue"
  - "dynamic_programming/rod_cutting.py:7:1          obtainable      U       obtainable from a rod of length"
  - "dynamic_programming/rod_cutting.py:7:55         prices          U       n`` given a list of prices for each integral piece"
  - "dynamic_programming/rod_cutting.py:8:77         selling         U       cutting the rod and selling the"
  - "dynamic_programming/rod_cutting.py:9:1          pieces          U       pieces separately or not cutting"
  - "dynamic_programming/rod_cutting.py:16:66        benefit         U       naively without using the benefit of dynamic"
  - "dynamic_programming/rod_cutting.py:44:6         enforce         U       _enforce_args(n, prices)"
  - "dynamic_programming/rod_cutting.py:47:9         revue           U       max_revue = float(\"-inf\")"
  - "dynamic_programming/rod_cutting.py:72:11        convenience     U       For convenience and because Python's"
  - "dynamic_programming/rod_cutting.py:73:21        accommodate     U       = n + 1``, to accommodate for the revenue obtainable"
  - "dynamic_programming/rod_cutting.py:184:5        Throws          U       Throws ``ValueError``:"
  - "dynamic_programming/smith_waterman.py:4:1           alignment       U       alignment. It is particularly"
  - "dynamic_programming/smith_waterman.py:4:18          particularly    U       alignment. It is particularly useful for finding similariti"
  - "dynamic_programming/smith_waterman.py:4:50          similarities    U       rticularly useful for finding similarities between two sequences"
  - "dynamic_programming/smith_waterman.py:5:16          protein         U       such as DNA or protein sequences. In this implementa"
  - "dynamic_programming/smith_waterman.py:5:59          gaps            U       this implementation, gaps are penalized"
  - "dynamic_programming/smith_waterman.py:5:68          penalized       U       implementation, gaps are penalized"
  - "dynamic_programming/smith_waterman.py:6:76          introduced      U       amount for each gap introduced"
  - "dynamic_programming/smith_waterman.py:8:20          penalty         U       supports other gap penalty methods as well."
  - "dynamic_programming/smith_waterman.py:39:11         waterman        U       def smith_waterman("
  - "dynamic_programming/smith_waterman.py:50:25         ACAC            U       >>> smith_waterman('ACAC', 'CA')"
  - "dynamic_programming/smith_waterman.py:52:25         acac            U       >>> smith_waterman('acac', 'ca')"
  - "dynamic_programming/smith_waterman.py:95:32         AGTCT           U       smith_waterman('AGT', 'AGTCT')"
  - "dynamic_programming/smith_waterman.py:132:5         Starts          U       Starts from the highest scoring"
  - "dynamic_programming/smith_waterman.py:132:29        scoring         U       Starts from the highest scoring cell in the matrix and"
  - "dynamic_programming/smith_waterman.py:189:14        HEAGAWGHEE      U       query = \"HEAGAWGHEE\""
  - "dynamic_programming/smith_waterman.py:190:16        PAWHEAE         U       subject = \"PAWHEAE\""
  - "dynamic_programming/sum_of_subset.py:8:22           says    U       # a subset value says 1 if that subset sum"
  - "dynamic_programming/trapped_water.py:2:57           elevation       U       integers representing an elevation map where the width"
  - "dynamic_programming/trapped_water.py:3:52           rainwater       U       calculates how much rainwater can be trapped."
  - "dynamic_programming/trapped_water.py:3:69           trapped         U       much rainwater can be trapped."
  - "dynamic_programming/trapped_water.py:9:36           bars            U       the maximum height of bars on the left and right"
  - "dynamic_programming/trapped_water.py:16:23          heights         U       def trapped_rainwater(heights: tuple[int, ...]) -"
  - "dynamic_programming/trapped_water.py:20:45          determining     U       programming approach, determining the maximum height of"
  - "dynamic_programming/tribonacci.py:4:5           tribonacci      U       def tribonacci(num: int) -> list[int"
  - "dynamic_programming/viterbi.py:4:5          viterbi             U       def viterbi("
  - "dynamic_programming/viterbi.py:7:13         probabilities       U       initial_probabilities: dict,"
  - "dynamic_programming/viterbi.py:9:5          emission            U       emission_probabilities: dict"
  - "dynamic_programming/viterbi.py:19:36        cold                U       observations = [\"normal\", \"cold\", \"dizzy\"]"
  - "dynamic_programming/viterbi.py:19:44        dizzy               U       [\"normal\", \"cold\", \"dizzy\"]"
  - "dynamic_programming/viterbi.py:20:20        Healthy             U       >>> states = [\"Healthy\", \"Fever\"]"
  - "dynamic_programming/viterbi.py:20:31        Fever               U       states = [\"Healthy\", \"Fever\"]"
  - "dynamic_programming/viterbi.py:35:17        There's             U       ValueError: There's an empty parameter"
  - "dynamic_programming/viterbi.py:127:7        Fills               U       # Fills the data structure with"
  - "dynamic_programming/viterbi.py:128:17       transitions         U       # different transitions and pointers to previous"
  - "dynamic_programming/wildcard_matching.py:2:11           ilyas       U       Author : ilyas dahhou"
  - "dynamic_programming/wildcard_matching.py:2:17           dahhou      U       Author : ilyas dahhou"
  - "dynamic_programming/wildcard_matching.py:10:21          cover       U       The matching should cover the entire input string"
  - "dynamic_programming/wildcard_matching.py:41:19          baaabab     U       >>> is_match('baaabab','*****ba*****ba')"
  - "dynamic_programming/word_break.py:3:11          December        U       Date : December 12, 2022"
  - "dynamic_programming/word_break.py:13:65         scanning        U       It will be useful for scanning"
  - "dynamic_programming/word_break.py:68:10         keeper          U       word_keeper_key = \"WORD_KEEPER\""
  - "dynamic_programming/word_break.py:68:29         KEEPER          U       word_keeper_key = \"WORD_KEEPER\""
  - "dynamic_programming/word_break.py:84:12         breakable       U       def is_breakable(index: int) -> bool"
  - "electronics/apparent_power.py:5:5           apparent    U       def apparent_power("
  - "electronics/apparent_power.py:6:5           voltage     U       voltage: float, current: float"
  - "electronics/builtin_voltage.py:3:29         Boltzmann           U       scipy.constants import Boltzmann, physical_constants"
  - "electronics/builtin_voltage.py:3:40         physical            U       constants import Boltzmann, physical_constants"
  - "electronics/builtin_voltage.py:5:12         TEMPERATURE         U       T = 300 # TEMPERATURE (unit = K)"
  - "electronics/builtin_voltage.py:9:5          donor               U       donor_conc: float, # donor"
  - "electronics/builtin_voltage.py:9:11         conc                U       donor_conc: float, # donor concentratio"
  - "electronics/builtin_voltage.py:9:33         concentration       U       conc: float, # donor concentration"
  - "electronics/builtin_voltage.py:10:5         acceptor            U       acceptor_conc: float, # acceptor"
  - "electronics/builtin_voltage.py:11:5         intrinsic           U       intrinsic_conc: float, # intrinsic"
  - "electronics/builtin_voltage.py:14:61        junction            U       Builtin Voltage of a pn junction diode."
  - "electronics/builtin_voltage.py:14:70        diode               U       Voltage of a pn junction diode."
  - "electronics/builtin_voltage.py:22:17        Donor               U       ValueError: Donor concentration should"
  - "electronics/builtin_voltage.py:26:17        Acceptor            U       ValueError: Acceptor concentration should"
  - "electronics/builtin_voltage.py:30:17        Intrinsic           U       ValueError: Intrinsic concentration should"
  - "electronics/builtin_voltage.py:60:35        electron            U       physical_constants[\"electron volt\"][0]"
  - "electronics/builtin_voltage.py:60:44        volt                U       constants[\"electron volt\"][0]"
  - "electronics/capacitor_equivalence.py:6:5            capacitor       U       def capacitor_parallel(capacitors"
  - "electronics/capacitor_equivalence.py:6:24           capacitors      U       def capacitor_parallel(capacitors: list[float]) -> float"
  - "electronics/capacitor_equivalence.py:9:30           resistance      U       Calculate the equivalent resistance for any number of capacitors"
  - "electronics/capacitor_equivalence.py:15:17          Capacitor       U       ValueError: Capacitor at index 2 has a negative"
  - "electronics/carrier_concentration.py:10:5           hole                U       hole_conc: float,"
  - "electronics/carrier_concentration.py:15:8           Electron            U       1. Electron Concentration"
  - "electronics/carrier_concentration.py:16:8           Hole                U       2, Hole Concentration"
  - "electronics/carrier_concentration.py:33:64          semiconductor       U       cannot be negative in a semiconductor"
  - "electronics/charging_capacitor.py:1:16          ARRL            U       # source - The ARRL Handbook for Radio Communicat"
  - "electronics/charging_capacitor.py:8:31          resistor        U       general speed but when a resistor is connected in the"
  - "electronics/charging_capacitor.py:9:32          charges         U       capacitor then the capacitor charges slowly means it will"
  - "electronics/charging_capacitor.py:9:40          slowly          U       the capacitor charges slowly means it will take more"
  - "electronics/charging_capacitor.py:9:81          usual           U       take more time than usual."
  - "electronics/charging_capacitor.py:10:30         charged         U       the capacitor is being charged, the voltage is in exponentia"
  - "electronics/charging_capacitor.py:12:13         ohms            U       'resistance(ohms) * capacitance(farads"
  - "electronics/charging_capacitor.py:12:21         capacitance     U       'resistance(ohms) * capacitance(farads)' is called RC"
  - "electronics/charging_capacitor.py:12:33         farads          U       ohms) * capacitance(farads)' is called RC-timeconstant"
  - "electronics/charging_capacitor.py:14:19         initiation      U       time 't' from the initiation of charging a capacitor"
  - "electronics/charging_capacitor.py:14:33         charging        U       from the initiation of charging a capacitor with the"
  - "electronics/charging_capacitor.py:15:47         discharging     U       Both at charging and discharging of a capacitor."
  - "electronics/charging_capacitor.py:22:42         volts           U       float, # voltage in volts."
  - "electronics/charging_capacitor.py:28:52         initiating      U       any nth second after initiating its charging."
  - "electronics/charging_capacitor.py:52:17         Resistance      U       ValueError: Resistance must be positive."
  - "electronics/charging_capacitor.py:57:17         Capacitance     U       ValueError: Capacitance must be positive."
  - "electronics/charging_inductor.py:8:23           magnetic            U       stores energy in its 'magnetic field' or 'magnetostatic"
  - "electronics/charging_inductor.py:8:43           magnetostatic       U       magnetic field' or 'magnetostatic field'."
  - "electronics/charging_inductor.py:10:6           inductor            U       When inductor is connected to 'DC"
  - "electronics/charging_inductor.py:11:1           wire                U       wire because it's real effect"
  - "electronics/charging_inductor.py:15:16          finite              U       from zero to a finite value causes a sudden"
  - "electronics/charging_inductor.py:15:29          causes              U       zero to a finite value causes a sudden voltage to"
  - "electronics/charging_inductor.py:15:38          sudden              U       finite value causes a sudden voltage to induced in"
  - "electronics/charging_inductor.py:15:56          induced             U       a sudden voltage to induced in inductor which"
  - "electronics/charging_inductor.py:16:1           opposes             U       opposes the current. which results"
  - "electronics/charging_inductor.py:17:1           cease               U       cease if there is no further"
  - "electronics/charging_inductor.py:18:6           rising              U       stop rising."
  - "electronics/charging_inductor.py:20:21          Inductance          U       'Resistance(ohms) / Inductance(henrys)' is known as"
  - "electronics/charging_inductor.py:20:32          henrys              U       Resistance(ohms) / Inductance(henrys)' is known as RL-timeconstant"
  - "electronics/charging_inductor.py:35:5           inductance          U       inductance: float, # inductance"
  - "electronics/circular_convolution.py:5:22        periodic        U       is a special case of periodic convolution, which is"
  - "electronics/circular_convolution.py:6:47        Periodic        U       have the same period. Periodic convolution arises,"
  - "electronics/circular_convolution.py:6:68        arises          U       Periodic convolution arises,"
  - "electronics/circular_convolution.py:7:36        discrete        U       in the context of the discrete-time Fourier transform"
  - "electronics/circular_convolution.py:7:69        DTFT            U       time Fourier transform (DTFT)."
  - "electronics/circular_convolution.py:9:20        DTFTs           U       convolution of the DTFTs of the individual sequences"
  - "electronics/circular_convolution.py:91:37       transpose       U       signal = np.matmul(np.transpose(matrix), np.transpose"
  - "electronics/coulombs_law.py:5:1         COULOMBS            U       COULOMBS_CONSTANT = 8.988e9"
  - "electronics/coulombs_law.py:8:5         couloumbs           U       def couloumbs_law("
  - "electronics/coulombs_law.py:12:11       Coulomb's           U       Apply Coulomb's Law on any three given"
  - "electronics/coulombs_law.py:16:35       magnitude           U       Law states that the magnitude of the electrostatic"
  - "electronics/coulombs_law.py:16:52       electrostatic       U       the magnitude of the electrostatic force of"
  - "electronics/coulombs_law.py:17:19       repulsion           U       attraction or repulsion between two point charges"
  - "electronics/coulombs_law.py:17:67       proportional        U       charges is directly proportional"
  - "electronics/coulombs_law.py:18:27       magnitudes          U       to the product of the magnitudes of charges and inversely"
  - "electronics/coulombs_law.py:18:53       inversely           U       magnitudes of charges and inversely proportional to"
  - "electronics/coulombs_law.py:23:5        Coulomb             U       Coulomb (1785) \"Premier mémoire"
  - "electronics/coulombs_law.py:23:21       Premier             U       Coulomb (1785) \"Premier mémoire sur l'électricit"
  - "electronics/coulombs_law.py:23:29       mémoire             U       Coulomb (1785) \"Premier mémoire sur l'électricité et"
  - "electronics/coulombs_law.py:23:41       l'électricité       U       Premier mémoire sur l'électricité et le magnétisme,\""
  - "electronics/coulombs_law.py:23:61       magnétisme          U       l'électricité et le magnétisme,\""
  - "electronics/coulombs_law.py:24:5        Histoire            U       Histoire de l'Académie Royale"
  - "electronics/coulombs_law.py:24:17       l'Académie          U       Histoire de l'Académie Royale des Sciences"
  - "electronics/coulombs_law.py:24:28       Royale              U       Histoire de l'Académie Royale des Sciences, pp. 5"
  - "electronics/coulombs_law.py:79:23       Exactly             U       raise ValueError(\"Exactly one argument must be"
  - "electronics/electric_conductivity.py:3:1            ELECTRON        U       ELECTRON_CHARGE = 1.6021e-19"
  - "electronics/electric_conductivity.py:3:10           CHARGE          U       ELECTRON_CHARGE = 1.6021e-19 # units"
  - "electronics/electric_conductivity.py:6:14           conductivity    U       def electric_conductivity("
  - "electronics/electric_conductivity.py:9:5            mobility        U       mobility: float,"
  - "electronics/electric_conductivity.py:15:17          Mobility        U       3. Electron Mobility"
  - "electronics/electric_power.py:15:5          fundamental     U       fundamental value of electrical"
  - "electronics/electric_power.py:15:26         electrical      U       fundamental value of electrical system."
  - "electronics/electrical_impedance.py:1:15        impedance       U       \"\"\"Electrical impedance is the measure of the"
  - "electronics/electrical_impedance.py:1:47        opposition      U       is the measure of the opposition that a"
  - "electronics/electrical_impedance.py:2:9         presents        U       circuit presents to a current when a"
  - "electronics/electrical_impedance.py:3:48        alternating     U       concept of resistance to alternating current (AC) circuits"
  - "electronics/electrical_impedance.py:3:73        circuits        U       alternating current (AC) circuits."
  - "electronics/electrical_impedance.py:13:24       reactance       U       resistance: float, reactance: float, impedance: float"
  - "electronics/ic_555_timer.py:4:36        duty            U       the frequency and/or duty cycle of an astable"
  - "electronics/ic_555_timer.py:4:53        astable         U       or duty cycle of an astable 555 timer."
  - "electronics/ic_555_timer.py:7:55        resistances     U       value of the external resistances (in ohms)"
  - "electronics/ic_555_timer.py:8:25        Microfarad      U       and capacitance (in Microfarad), and calculates the"
  - "electronics/ic_555_timer.py:16:36       Microfarads     U       is the capacitance in Microfarads."
  - "electronics/ic_555_timer.py:19:7        Duty            U       | Duty Cycle = (R1 + R2) /"
  - "electronics/ind_reactance.py:11:15          inductive       U       Calculate inductive reactance, frequency"
  - "electronics/ind_reactance.py:16:38          Henries         U       float with units in Henries"
  - "electronics/ind_reactance.py:35:17          Inductive       U       ValueError: Inductive reactance cannot be"
  - "electronics/resistor_color_code.py:2:9          Calculating     U       Title : Calculating the resistance of a"
  - "electronics/resistor_color_code.py:5:5          Resistors       U       Resistors resist the flow of electrical"
  - "electronics/resistor_color_code.py:5:15         resist          U       Resistors resist the flow of electrical"
  - "electronics/resistor_color_code.py:5:79         tells           U       one has a value that tells how"
  - "electronics/resistor_color_code.py:6:5          strongly        U       strongly it resists current flow"
  - "electronics/resistor_color_code.py:6:17         resists         U       strongly it resists current flow.This value"
  - "electronics/resistor_color_code.py:6:68         often           U       value's unit is the ohm, often noted with the"
  - "electronics/resistor_color_code.py:6:74         noted           U       unit is the ohm, often noted with the"
  - "electronics/resistor_color_code.py:7:5          Greek           U       Greek letter omega: Ω."
  - "electronics/resistor_color_code.py:7:18         omega           U       Greek letter omega: Ω."
  - "electronics/resistor_color_code.py:10:15        tolerance       U       value and tolerance, as long as you understand"
  - "electronics/resistor_color_code.py:11:20        arranged        U       the colors are arranged is very important, and"
  - "electronics/resistor_color_code.py:14:26        resistors       U       The color coding for resistors is an international"
  - "electronics/resistor_color_code.py:17:47        varies          U       present in a resistor varies from three to six. These"
  - "electronics/resistor_color_code.py:18:5         significant     U       significant figures, multiplier"
  - "electronics/resistor_color_code.py:18:17        figures         U       significant figures, multiplier, tolerance"
  - "electronics/resistor_color_code.py:18:26        multiplier      U       significant figures, multiplier, tolerance, reliability"
  - "electronics/resistor_color_code.py:18:49        reliability     U       multiplier, tolerance, reliability, and temperature coefficient"
  - "electronics/resistor_color_code.py:25:5         Significant     U       Significant figures - The number"
  - "electronics/resistor_color_code.py:28:37        Orange          U       Brown = 1, Red = 2, Orange = 3, Yellow = 4, Green"
  - "electronics/resistor_color_code.py:28:49        Yellow          U       Red = 2, Orange = 3, Yellow = 4, Green = 5, Blue"
  - "electronics/resistor_color_code.py:29:5         Violet          U       Violet = 7, Grey = 8, White"
  - "electronics/resistor_color_code.py:31:5         Multiplier      U       Multiplier - There will be one"
  - "electronics/resistor_color_code.py:35:74        Silver          U       10^9, Gold = 10^-1, Silver = 10^-2)"
  - "electronics/resistor_color_code.py:39:5         Tolerance       U       Tolerance - The tolerance band"
  - "electronics/resistor_color_code.py:44:20        mentioned       U       If no color is mentioned then by default tolerance"
  - "electronics/resistor_color_code.py:47:17        Coeffecient     U       Temperature Coeffecient - Indicates the change"
  - "electronics/resistor_color_code.py:48:19        ambient         U       a function of ambient temperature in terms"
  - "electronics/resistor_color_code.py:50:51        coeffecient     U       associated with Temperature coeffecient -"
  - "electronics/resistor_color_code.py:169:25       Ivory           U       >>> get_multiplier('Ivory')"
  - "electronics/resistor_color_code.py:189:24       Indigo          U       >>> get_tolerance('Indigo')"
  - "electronics/resistor_color_code.py:209:38       Cyan            U       temperature_coeffecient('Cyan')"
  - "electronics/resistor_color_code.py:225:21       belonging       U       number of bands belonging to that type in the"
  - "electronics/resistor_color_code.py:328:51       Lime            U       , [\"Violet\",\"Blue\",\"Lime\",\"Grey\"])"
  - "electronics/resistor_color_code.py:361:9        resisitance     U       resisitance = significant_digits"
  - "electronics/resonant_frequency.py:3:33          resonant        U       circuit, also called a resonant circuit, tank circuit"
  - "electronics/resonant_frequency.py:3:51          tank            U       a resonant circuit, tank circuit, or tuned circuit"
  - "electronics/resonant_frequency.py:3:68          tuned           U       circuit, tank circuit, or tuned circuit,"
  - "electronics/resonant_frequency.py:6:38          resonator       U       act as an electrical resonator, an electrical analogue"
  - "electronics/resonant_frequency.py:6:63          analogue        U       resonator, an electrical analogue of a"
  - "electronics/resonant_frequency.py:7:29          oscillating     U       fork, storing energy oscillating at the circuit's resonant"
  - "electronics/resonant_frequency.py:19:43         capacitnace     U       value of inductance and capacitnace."
  - "electronics/wheatstone_bridge.py:5:5            wheatstone      U       def wheatstone_solver("
  - "file_transfer/receive_file.py:14:16         Receiving       U       print(\"Receiving data...\")"
  - "file_transfer/receive_file.py:21:12         Successfully    U       print(\"Successfully received the file\")"
  - "file_transfer/send_file.py:13:39        Establish       U       addr = sock.accept() # Establish connection with client"
  - "file_transfer/tests/test_send_file.py:18:13         ensurance       U       # ===== ensurance ====="
  - "financial/equated_monthly_installments.py:2:26          amortization    U       Program to calculate the amortization amount per month, given"
  - "financial/equated_monthly_installments.py:3:13          borrowed        U       - Principal borrowed"
  - "financial/equated_monthly_installments.py:4:11          interest        U       - Rate of interest per annum"
  - "financial/equated_monthly_installments.py:4:24          annum           U       Rate of interest per annum"
  - "financial/equated_monthly_installments.py:5:12          repay           U       - Years to repay the loan"
  - "financial/equated_monthly_installments.py:5:22          loan            U       Years to repay the loan"
  - "financial/equated_monthly_installments.py:11:5          equated         U       def equated_monthly_installments"
  - "financial/equated_monthly_installments.py:11:13         monthly         U       def equated_monthly_installments("
  - "financial/equated_monthly_installments.py:11:21         installments    U       def equated_monthly_installments("
  - "financial/equated_monthly_installments.py:44:7          Yearly          U       # Yearly rate is divided by"
  - "financial/exponential_moving_average.py:8:16        conjunction     U       EMA is used in conjunction with Simple moving average"
  - "financial/exponential_moving_average.py:8:66        reacts          U       moving average (SMA), EMA reacts to the"
  - "financial/exponential_moving_average.py:9:22        quicker         U       changes in the value quicker than SMA, which is one"
  - "financial/exponential_moving_average.py:9:60        advantages      U       which is one of the advantages of using EMA."
  - "financial/exponential_moving_average.py:19:31       averages        U       Yields exponential moving averages of the given stock prices"
  - "financial/exponential_moving_average.py:38:51       thumb           U       average (EMA) is a rule of thumb technique for"
  - "financial/exponential_moving_average.py:53:15       Assigning       U       # Assigning simple moving average"
  - "financial/interest.py:44:5          nominal         U       nominal_annual_interest_rate"
  - "financial/interest.py:44:13         annual          U       nominal_annual_interest_rate_percentage"
  - "financial/interest.py:45:15         compounding     U       number_of_compounding_periods: float,"
  - "financial/interest.py:45:27         periods         U       number_of_compounding_periods: float,"
  - "financial/present_value.py:4:63         yearly      U       value of a stream of yearly cash flows given..."
  - "financial/present_value.py:8:22         assumes     U       Note: This algorithm assumes that cash flows are"
  - "financial/present_value.py:8:50         paid        U       that cash flows are paid at the end of the specified"
  - "financial/present_value.py:27:17        Cash        U       ValueError: Cash flows list cannot be"
  - "financial/README.md:3:74        initial     U       calculated by multiplying the initial principal amount by"
  - "financial/README.md:3:92        amount      U       the initial principal amount by one plus the annual"
  - "financial/README.md:3:136       raised      U       annual interest rate raised to the number of compound"
  - "financial/README.md:4:45        received    U       Simple interest paid or received over a certain period"
  - "financial/README.md:4:143       lent        U       that was borrowed or lent. \" [Simple Interest"
  - "financial/simple_moving_average.py:2:38         statistical     U       Moving Average (SMA) is a statistical calculation used to"
  - "financial/simple_moving_average.py:4:58         smooth          U       time series analysis to smooth out price data"
  - "financial/simple_moving_average.py:5:14         trends          U       and identify trends."
  - "financial/simple_moving_average.py:57:7         Specify         U       # Specify the window size for"
  - "fractals/julia_sets.py:1:11         Alexandre       U       \"\"\"Author Alexandre De Zotti"
  - "fractals/julia_sets.py:1:24         Zotti           U       Author Alexandre De Zotti"
  - "fractals/julia_sets.py:3:1          Draws           U       Draws Julia sets of quadratic"
  - "fractals/julia_sets.py:3:31         polynomials     U       Julia sets of quadratic polynomials and exponential maps"
  - "fractals/julia_sets.py:4:7          specifically    U       More specifically, this iterates the function"
  - "fractals/julia_sets.py:5:7          plots           U       then plots whether the absolute"
  - "fractals/julia_sets.py:7:2          really          U       really an escape radius but"
  - "fractals/julia_sets.py:7:30         rather          U       an escape radius but rather a convenient way to"
  - "fractals/julia_sets.py:7:39         convenient      U       radius but rather a convenient way to approximate the"
  - "fractals/julia_sets.py:8:19         orbits          U       set with bounded orbits."
  - "fractals/julia_sets.py:10:14        presented       U       The examples presented here are:"
  - "fractals/julia_sets.py:11:7         Cauliflower     U       - The Cauliflower Julia set, see e.g."
  - "fractals/julia_sets.py:14:33        ambiantly       U       exponential map Julia set, ambiantly homeomorphic to the"
  - "fractals/julia_sets.py:14:43        homeomorphic    U       Julia set, ambiantly homeomorphic to the examples in"
  - "fractals/julia_sets.py:19:1         Remark          U       Remark: Some overflow runtime"
  - "fractals/julia_sets.py:20:65        computations    U       using numpy's efficient computations."
  - "fractals/julia_sets.py:21:2         Overflows       U       Overflows and infinites are replaced"
  - "fractals/julia_sets.py:21:16        infinites       U       Overflows and infinites are replaced after each"
  - "fractals/julia_sets.py:31:3         cauliflower     U       c_cauliflower = 0.25 + 0.0j"
  - "fractals/julia_sets.py:70:6         imaginary       U       imaginary parts ranging from"
  - "fractals/julia_sets.py:134:5        Plots           U       Plots of whether the absolute"
  - "fractals/koch_snowflake.py:3:14         snowflake           U       The Koch snowflake is a fractal curve and"
  - "fractals/koch_snowflake.py:3:67         fractals            U       one of the earliest fractals to"
  - "fractals/koch_snowflake.py:5:17         stages              U       sequence of stages. The first stage is"
  - "fractals/koch_snowflake.py:5:47         equilateral         U       The first stage is an equilateral triangle, and each"
  - "fractals/koch_snowflake.py:6:42         outward             U       is formed by adding outward bends to each side of"
  - "fractals/koch_snowflake.py:6:50         bends               U       formed by adding outward bends to each side of the"
  - "fractals/koch_snowflake.py:7:48         triangles           U       smaller equilateral triangles."
  - "fractals/koch_snowflake.py:16:13        koch                U       #84-the-koch-curve-and-the-arraylist"
  - "fractals/koch_snowflake.py:32:9         VECTORS             U       INITIAL_VECTORS = [VECTOR_1, VECTOR"
  - "fractals/koch_snowflake.py:41:8         careful             U       Be careful with high values (above"
  - "fractals/koch_snowflake.py:42:5         exponentially       U       exponentially."
  - "fractals/koch_snowflake.py:55:5         Loops               U       Loops through each pair of"
  - "fractals/koch_snowflake.py:58:33        bent                U       degree rotation so it is bent outwards."
  - "fractals/koch_snowflake.py:58:38        outwards            U       rotation so it is bent outwards."
  - "fractals/koch_snowflake.py:97:13        stretched           U       # avoid stretched display of graph"
  - "fractals/mandelbrot.py:3:36         diverge             U       * z_n + c\" does not diverge, i.e. remains bounded"
  - "fractals/mandelbrot.py:3:50         remains             U       does not diverge, i.e. remains bounded. Thus, a"
  - "fractals/mandelbrot.py:3:67         Thus                U       e. remains bounded. Thus, a"
  - "fractals/mandelbrot.py:7:47         drawn               U       real component, usually drawn on the x-axis, and"
  - "fractals/mandelbrot.py:8:63         visualizations      U       on the y-axis. Most visualizations"
  - "fractals/mandelbrot.py:9:45         indicate            U       use a color-coding to indicate after how many steps"
  - "fractals/mandelbrot.py:11:1         exhibit             U       exhibit an elaborate and infinitely"
  - "fractals/mandelbrot.py:11:12        elaborate           U       exhibit an elaborate and infinitely complicated"
  - "fractals/mandelbrot.py:11:26        infinitely          U       exhibit an elaborate and infinitely complicated boundary"
  - "fractals/mandelbrot.py:11:63        reveals             U       complicated boundary that reveals"
  - "fractals/mandelbrot.py:12:1         progressively       U       progressively ever-finer recursive"
  - "fractals/mandelbrot.py:12:20        finer               U       progressively ever-finer recursive detail at"
  - "fractals/mandelbrot.py:12:57        magnifications      U       detail at increasing magnifications, making"
  - "fractals/mandelbrot.py:26:5         constituted         U       constituted by this x-y-pair diverges"
  - "fractals/mandelbrot.py:26:34        diverges            U       constituted by this x-y-pair diverges. Members of the Mandelbrot"
  - "fractals/mandelbrot.py:43:11        divergence          U       # divergence happens for all complex"
  - "fractals/mandelbrot.py:100:30       viewed              U       the Mandelbrot set is viewed. The main area of the"
  - "fractals/mandelbrot.py:101:5        roughly             U       roughly between \"-1.5 < x <"
  - "fractals/mandelbrot.py:103:5        Commenting          U       Commenting out tests that slow"
  - "fractals/mandelbrot.py:104:32       mandelbrot          U       s call fractals/mandelbrot.py::mandelbrot.get_image"
  - "fractals/mandelbrot.py:140:57       zoomed              U       different section, zoomed in"
  - "fractals/sierpinski_triangle.py:2:55        anuragkumarak       U       uragkumarak95@gmail.com | git/anuragkumarak95"
  - "fractals/sierpinski_triangle.py:6:13        Sierpiński          U       What is the Sierpiński Triangle?"
  - "fractals/sierpinski_triangle.py:6:24        Triangle            U       What is the Sierpiński Triangle?"
  - "fractals/sierpinski_triangle.py:7:40        spelled             U       triangle (sometimes spelled Sierpinski), also called"
  - "fractals/sierpinski_triangle.py:8:12        gasket              U       Sierpiński gasket or Sierpiński sieve"
  - "fractals/sierpinski_triangle.py:8:33        sieve               U       gasket or Sierpiński sieve, is a fractal attractive"
  - "fractals/sierpinski_triangle.py:9:47        subdivided          U       equilateral triangle, subdivided recursively into"
  - "fractals/sierpinski_triangle.py:10:32       Originally          U       equilateral triangles. Originally constructed as a curve"
  - "fractals/sierpinski_triangle.py:11:58       mathematically      U       sets—that is, it is a mathematically"
  - "fractals/sierpinski_triangle.py:12:27       reproducible        U       generated pattern that is reproducible at any magnification"
  - "fractals/sierpinski_triangle.py:12:47       magnification       U       reproducible at any magnification or reduction. It is"
  - "fractals/sierpinski_triangle.py:13:24       mathematician       U       named after the Polish mathematician Wacław Sierpiński, but"
  - "fractals/sierpinski_triangle.py:13:38       Wacław              U       Polish mathematician Wacław Sierpiński, but appeared"
  - "fractals/sierpinski_triangle.py:13:61       appeared            U       Wacław Sierpiński, but appeared as a"
  - "fractals/sierpinski_triangle.py:14:1        decorative          U       decorative pattern many centuries"
  - "fractals/sierpinski_triangle.py:14:25       centuries           U       decorative pattern many centuries before the work of Sierpi"
  - "fractals/sierpinski_triangle.py:17:15       sierpinski          U       Usage: python sierpinski_triangle.py <int:depth"
  - "fractals/sierpinski_triangle.py:76:14       Correct             U       \"Correct format for using this"
  - "fractals/vicsek.py:1:4          Authors         U       \"\"\"Authors Bastien Capiaux & Mehdi"
  - "fractals/vicsek.py:1:12         Bastien         U       \"\"\"Authors Bastien Capiaux & Mehdi Oudghiri"
  - "fractals/vicsek.py:1:20         Capiaux         U       \"\"\"Authors Bastien Capiaux & Mehdi Oudghiri"
  - "fractals/vicsek.py:1:36         Oudghiri        U       Bastien Capiaux & Mehdi Oudghiri"
  - "fractals/vicsek.py:6:20         resembles       U       level of recursion resembles the overall pattern"
  - "fractals/vicsek.py:9:32         exhibits        U       results in a pattern that exhibits self-similarity and"
  - "fractals/vicsek.py:10:8         shaped          U       square-shaped outline with smaller"
  - "fractals/vicsek.py:57:10        vicsek          U       def draw_vicsek_fractal(x: float, y"
  - "fuzzy_logic/fuzzy_operations.py:2:5         Shreya          U       By @Shreya123714"
  - "fuzzy_logic/fuzzy_operations.py:16:7        Fuzzy           U       class FuzzySet:"
  - "fuzzy_logic/fuzzy_operations.py:18:58       fuzzy           U       manipulating triangular fuzzy sets."
  - "fuzzy_logic/fuzzy_operations.py:28:49       negation        U       Calculate the complement (negation) of this fuzzy set."
  - "fuzzy_logic/fuzzy_operations.py:31:9        sheru           U       >>> sheru = FuzzySet(\"Sheru\","
  - "fuzzy_logic/fuzzy_operations.py:31:27       Sheru           U       > sheru = FuzzySet(\"Sheru\", 0.4, 1, 0.6)"
  - "fuzzy_logic/fuzzy_operations.py:37:9        siya            U       >>> siya = FuzzySet(\"Siya\","
  - "fuzzy_logic/fuzzy_operations.py:37:26       Siya            U       >> siya = FuzzySet(\"Siya\", 0.5, 1, 0.7)"
  - "fuzzy_logic/fuzzy_operations.py:41:7        Complement      U       # Complement Operation"
  - "fuzzy_logic/fuzzy_operations.py:98:41       intersect       U       Another fuzzy set to intersect with."
  - "fuzzy_logic/fuzzy_operations.py:181:9       legend          U       plt.legend()"
  - "genetic_algorithm/basic_string.py:2:50          phases              U       algorithm to show how the 4 phases of a genetic algorithm"
  - "genetic_algorithm/basic_string.py:2:62          genetic             U       how the 4 phases of a genetic algorithm works"
  - "genetic_algorithm/basic_string.py:3:25          Crossover           U       Evaluation, Selection, Crossover and Mutation)"
  - "genetic_algorithm/basic_string.py:3:39          Mutation            U       Selection, Crossover and Mutation)"
  - "genetic_algorithm/basic_string.py:5:11          rkia                U       Author: D4rkia"
  - "genetic_algorithm/basic_string.py:12:36         Bigger              U       of the population. Bigger could be faster but"
  - "genetic_algorithm/basic_string.py:12:78         expensive           U       faster but is more memory expensive."
  - "genetic_algorithm/basic_string.py:13:3          POPULATION          U       N_POPULATION = 200"
  - "genetic_algorithm/basic_string.py:17:51         mutate              U       of a generation can mutate, changing one of its"
  - "genetic_algorithm/basic_string.py:17:79         genes               U       changing one of its genes."
  - "genetic_algorithm/basic_string.py:18:13         guarantee           U       # This will guarantee that all genes will"
  - "genetic_algorithm/basic_string.py:19:1          MUTATION            U       MUTATION_PROBABILITY = 0.4"
  - "genetic_algorithm/basic_string.py:19:10         PROBABILITY         U       MUTATION_PROBABILITY = 0.4"
  - "genetic_algorithm/basic_string.py:20:18         improve             U       # Just a seed to improve randomness required"
  - "genetic_algorithm/basic_string.py:28:19         Helxo               U       >>> evaluate(\"Helxo Worlx\", \"Hello World"
  - "genetic_algorithm/basic_string.py:28:25         Worlx               U       >>> evaluate(\"Helxo Worlx\", \"Hello World\")"
  - "genetic_algorithm/basic_string.py:35:5          crossover           U       def crossover(parent_1: str, parent"
  - "genetic_algorithm/basic_string.py:50:5          Mutate              U       Mutate a random gene of a child"
  - "genetic_algorithm/basic_string.py:50:21         gene                U       Mutate a random gene of a child with another"
  - "genetic_algorithm/basic_string.py:72:48         ghijkl              U       [(\"abcdef\", 4.0), (\"ghijkl\", 5.0), (\"mnopqr\","
  - "genetic_algorithm/basic_string.py:72:65         mnopqr              U       (\"ghijkl\", 5.0), (\"mnopqr\", 7.0)]"
  - "genetic_algorithm/basic_string.py:84:30         proportionally      U       Generate more children proportionally to the fitness score"
  - "genetic_algorithm/basic_string.py:84:52         fitness             U       proportionally to the fitness score."
  - "genetic_algorithm/basic_string.py:99:46         besides             U       target contains no genes besides the ones inside genes"
  - "genetic_algorithm/basic_string.py:109:62        converge            U       list, evolution cannot converge"
  - "genetic_algorithm/basic_string.py:140:41        perfect             U       will end when we find a perfect match for our target"
  - "genetic_algorithm/basic_string.py:171:27        Population          U       f\"\\nTotal Population:{total_population}\""
  - "genetic_algorithm/basic_string.py:176:37        keeping             U       the old population, keeping some of the best evolutions"
  - "genetic_algorithm/basic_string.py:176:62        evolutions          U       keeping some of the best evolutions."
  - "genetic_algorithm/basic_string.py:177:11        Keeping             U       # Keeping this avoid regression"
  - "genetic_algorithm/basic_string.py:199:60        evolve              U       to evaluate, combine, evolve, and mutate a string"
  - "genetic_algorithm/basic_string.py:203:10        nopqrstuvwxyz       U       \"nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)"
  - "genetic_algorithm/basic_string.py:203:35        èéòà                U       nopqrstuvwxyz.,;!?+-*#@^'èéòà€ù=)(&%$£/\\\\\""
  - "geodesy/haversine_distance.py:3:1           AXIS            U       AXIS_A = 6378137.0"
  - "geodesy/haversine_distance.py:10:15         great           U       Calculate great circle distance between"
  - "geodesy/haversine_distance.py:10:61         sphere          U       between two points in a sphere,"
  - "geodesy/haversine_distance.py:11:11         longitudes      U       given longitudes and latitudes https"
  - "geodesy/haversine_distance.py:11:26         latitudes       U       given longitudes and latitudes https://en.wikipedia"
  - "geodesy/haversine_distance.py:13:41         spherical       U       the globe is \"sort of\" spherical, so a path between two"
  - "geodesy/haversine_distance.py:14:63         Earth's         U       need to account for the Earth's curvature"
  - "geodesy/haversine_distance.py:14:71         curvature       U       account for the Earth's curvature"
  - "geodesy/haversine_distance.py:15:65         negligible      U       to B. This effect is negligible for"
  - "geodesy/haversine_distance.py:16:77         treats          U       The Haversine method treats"
  - "geodesy/haversine_distance.py:17:9          earth           U       the earth as a sphere which allows"
  - "geodesy/haversine_distance.py:19:21         Earth           U       them. Since the Earth is not a perfect sphere"
  - "geodesy/haversine_distance.py:20:13         ellipsoidal     U       Earth's ellipsoidal nature are more accurate"
  - "geodesy/haversine_distance.py:21:39         handy           U       like Haversine can be handy for shorter range distances"
  - "geodesy/haversine_distance.py:21:49         shorter         U       Haversine can be handy for shorter range distances."
  - "geodesy/haversine_distance.py:24:27         latitude        U       * `lat1`, `lon1`: latitude and longitude of coordinate"
  - "geodesy/haversine_distance.py:24:40         longitude       U       lon1`: latitude and longitude of coordinate 1"
  - "geodesy/haversine_distance.py:27:9          geographical    U       geographical distance between two"
  - "geodesy/haversine_distance.py:27:53         metres          U       between two points in metres"
  - "geodesy/haversine_distance.py:31:13         FRANCISCO       U       >>> SAN_FRANCISCO = point_2d(37.77485"
  - "geodesy/haversine_distance.py:32:9          YOSEMITE        U       >>> YOSEMITE = point_2d(37.86474"
  - "geodesy/lamberts_ellipsoidal_distance.py:7:1            EQUATORIAL          U       EQUATORIAL_RADIUS = 6378137"
  - "geodesy/lamberts_ellipsoidal_distance.py:10:5           lamberts            U       def lamberts_ellipsoidal_distance"
  - "geodesy/lamberts_ellipsoidal_distance.py:18:31          geodesy             U       This algorithm uses geodesy/haversine_distance.py"
  - "geodesy/lamberts_ellipsoidal_distance.py:21:5           Representing        U       Representing the earth as an ellipsoid"
  - "geodesy/lamberts_ellipsoidal_distance.py:23:17          oblate              U       Earth as an oblate ellipsoid which means"
  - "geodesy/lamberts_ellipsoidal_distance.py:23:46          accounting          U       ellipsoid which means accounting for the flattening that"
  - "geodesy/lamberts_ellipsoidal_distance.py:24:28          poles               U       the North and South poles. Lambert's formulae"
  - "geodesy/lamberts_ellipsoidal_distance.py:24:35          Lambert's           U       North and South poles. Lambert's formulae provide accuracy"
  - "geodesy/lamberts_ellipsoidal_distance.py:24:45          formulae            U       South poles. Lambert's formulae provide accuracy on"
  - "geodesy/lamberts_ellipsoidal_distance.py:25:8           meteres             U       10 meteres over thousands of kilometeres"
  - "geodesy/lamberts_ellipsoidal_distance.py:25:21          thousands           U       10 meteres over thousands of kilometeres. Other"
  - "geodesy/lamberts_ellipsoidal_distance.py:25:34          kilometeres         U       meteres over thousands of kilometeres. Other methods can provide"
  - "geodesy/lamberts_ellipsoidal_distance.py:27:34          computational       U       distances without increasing computational intensity."
  - "geodesy/lamberts_ellipsoidal_distance.py:40:9           VENICE              U       >>> VENICE = point_2d(45.44301"
  - "geodesy/lamberts_ellipsoidal_distance.py:54:7           Parametric          U       # Parametric latitudes"
  - "geodesy/lamberts_ellipsoidal_distance.py:60:60          equatorial          U       haversine_distance / equatorial radius"
  - "geodesy/lamberts_ellipsoidal_distance.py:63:7           Intermediate        U       # Intermediate P and Q values"
  - "geodesy/lamberts_ellipsoidal_distance.py:68:39          Pcos                U       sin(sigma)) * sin^2Pcos^2Q / cos^2(sigma/2)"
  - "geodesy/lamberts_ellipsoidal_distance.py:70:7           demonimator         U       x_demonimator = cos(sigma / 2) **"
  - "geodesy/lamberts_ellipsoidal_distance.py:74:39          Psin                U       sin(sigma)) * cos^2Psin^2Q / sin^2(sigma/2)"
  - "geometry/geometry.py:12:7           Angle       U       class Angle:"
  - "geometry/geometry.py:79:7           Ellipse     U       class Ellipse:"
  - "graphics/bezier_curve.py:10:23          weighted        U       Bezier curve is a weighted sum of a set of control"
  - "graphics/bezier_curve.py:21:11          Degree          U       # Degree determines the flexibility"
  - "graphics/bezier_curve.py:21:33          flexibility     U       Degree determines the flexibility of the curve."
  - "graphics/bezier_curve.py:22:27          produce         U       # Degree = 1 will produce a straight line."
  - "graphics/bezier_curve.py:49:9           bezier          U       def bezier_curve_function(self"
  - "graphics/bezier_curve.py:79:60          produced        U       the finer the curve produced."
  - "graphics/bezier_curve.py:102:13         scatter         U       plt.scatter(x, y, color=\"red\", label"
  - "graphics/butterfly_pattern.py:1:5           butterfly       U       def butterfly_pattern(n: int) -> str"
  - "graphics/butterfly_pattern.py:26:14         stars           U       left_stars = \"*\" * i"
  - "graphics/digital_differential_analyzer_line.py:4:13         differential    U       def digital_differential_analyzer_line("
  - "graphics/digital_differential_analyzer_line.py:4:26         analyzer        U       digital_differential_analyzer_line("
  - "graphics/digital_differential_analyzer_line.py:48:51        Drawing         U       Differential Analyzer Line Drawing Algorithm\")"
  - "graphics/vector3_for_2d_rendering.py:2:25           surfaces        U       render 3d points for 2d surfaces."
  - "graphics/vector3_for_2d_rendering.py:10:15          xcodz           U       __author__ = \"xcodz-dot, cclaus, dhruvmanila"
  - "graphics/vector3_for_2d_rendering.py:10:26          cclaus          U       author__ = \"xcodz-dot, cclaus, dhruvmanila\""
  - "graphics/vector3_for_2d_rendering.py:10:34          dhruvmanila     U       \"xcodz-dot, cclaus, dhruvmanila\""
  - "graphics/vector3_for_2d_rendering.py:17:31          drawable        U       Converts 3d point to a 2d drawable point"
  - "graphics/vector3_for_2d_rendering.py:69:26          Axis            U       raise TypeError(\"Axis must be a str\")"
  - "graphs/a_star.py:3:1            DIRECTIONS      U       DIRECTIONS = ["
  - "graphs/a_star.py:20:33          avoiding        U       for a path on a grid avoiding obstacles."
  - "graphs/a_star.py:59:5           resign          U       resign = False # flag set"
  - "graphs/a_star.py:63:44          unable          U       ValueError(\"Algorithm is unable to find solution\")"
  - "graphs/a_star.py:64:38          costliest       U       to choose the least costliest action so as to move"
  - "graphs/a_star.py:111:48         whereas         U       # 0 are free path whereas 1's are obstacles"
  - "graphs/a_star.py:122:26         pushes          U       the cost map which pushes the path closer to the"
  - "graphs/ant_colony_optimization_algorithms.py:2:12           colony              U       Use an ant colony optimization algorithm"
  - "graphs/ant_colony_optimization_algorithms.py:2:55           travelling          U       algorithm to solve the travelling salesman problem (TSP"
  - "graphs/ant_colony_optimization_algorithms.py:2:66           salesman            U       solve the travelling salesman problem (TSP)"
  - "graphs/ant_colony_optimization_algorithms.py:3:7            asks                U       which asks the following question"
  - "graphs/ant_colony_optimization_algorithms.py:4:18           cities              U       \"Given a list of cities and the distances between"
  - "graphs/ant_colony_optimization_algorithms.py:11:9           Clark               U       Author: Clark"
  - "graphs/ant_colony_optimization_algorithms.py:31:5           ants                U       ants_num: int,"
  - "graphs/ant_colony_optimization_algorithms.py:33:5           pheromone           U       pheromone_evaporation: float,"
  - "graphs/ant_colony_optimization_algorithms.py:33:15          evaporation         U       pheromone_evaporation: float,"
  - "graphs/ant_colony_optimization_algorithms.py:35:5           beta                U       beta: float,"
  - "graphs/ant_colony_optimization_algorithms.py:36:18          Pheromone           U       q: float, # Pheromone system parameters Q"
  - "graphs/ant_colony_optimization_algorithms.py:125:12         pheromones          U       Update pheromones on the route and update"
  - "graphs/ant_colony_optimization_algorithms.py:147:48         volatilization      U       cities)): # Update the volatilization of pheromone on all"
  - "graphs/basic_graphs.py:8:16         unweighted      U       def initialize_unweighted_directed_graph("
  - "graphs/basic_graphs.py:21:27        undirected      U       initialize_unweighted_undirected_graph("
  - "graphs/basic_graphs.py:55:17        Unweighted      U       \"1. Unweighted directed \\n\""
  - "graphs/basic_graphs.py:143:32       knows           U       known - Set of knows nodes"
  - "graphs/basic_graphs.py:144:24       Preceding       U       path - Preceding node in path"
  - "graphs/basic_graphs.py:149:5        dijk            U       def dijk(g, s):"
  - "graphs/basic_graphs.py:189:5        topo            U       def topo(g, ind=None, q=None"
  - "graphs/basic_graphs.py:193:38       Ince            U       * (len(g) + 1) # SInce oth Index is ignored"
  - "graphs/basic_graphs.py:219:5        adjm            U       def adjm():"
  - "graphs/basic_graphs.py:248:11       Warshall's      U       Floyd Warshall's algorithm"
  - "graphs/basic_graphs.py:259:5        floy            U       def floy(a_and_n):"
  - "graphs/basic_graphs.py:274:5        Prim's          U       Prim's MST Algorithm"
  - "graphs/basic_graphs.py:284:5        prim            U       def prim(g, s):"
  - "graphs/basic_graphs.py:313:5        edglist         U       def edglist():"
  - "graphs/basic_graphs.py:342:5        Kruskal's       U       Kruskal's MST Algorithm"
  - "graphs/basic_graphs.py:350:5        krusk           U       def krusk(e_and_n):"
  - "graphs/bellman_ford.py:20:5         bellman     U       def bellman_ford("
  - "graphs/bi_directional_dijkstra.py:2:4           directional         U       Bi-directional Dijkstra's algorithm"
  - "graphs/bi_directional_dijkstra.py:11:11         Swayam              U       # Author: Swayam Singh (https://github"
  - "graphs/bi_directional_dijkstra.py:19:14         relaxation          U       def pass_and_relaxation("
  - "graphs/bi_directional_dijkstra.py:47:5          bidirectional       U       def bidirectional_dij("
  - "graphs/bi_directional_dijkstra.py:57:35         reachable           U       the destination is not reachable, function returns -"
  - "graphs/bidirectional_a_star.py:10:9         manhattan       U       # 1 for manhattan, 0 for euclidean"
  - "graphs/bidirectional_a_star.py:11:1         HEURISTIC       U       HEURISTIC = 0"
  - "graphs/bidirectional_a_star.py:80:9         astar           U       >>> astar = AStar((0, 0), (len"
  - "graphs/bidirectional_a_star.py:83:35        successors      U       pos for x in astar.get_successors(astar.start)]"
  - "graphs/bidirectional_a_star.py:257:5        bidir           U       bidir_astar = BidirectionalAStar"
  - "graphs/bidirectional_breadth_first_search.py:181:12         Unidirectional      U       print(\"Unidirectional BFS computation time"
  - "graphs/boruvka.py:1:4           Borůvka's       U       \"\"\"Borůvka's algorithm."
  - "graphs/boruvka.py:3:24          spanning        U       Determines the minimum spanning tree (MST) of a graph"
  - "graphs/boruvka.py:4:26          greedy          U       vka's algorithm is a greedy algorithm for finding"
  - "graphs/boruvka.py:11:77         couple          U       since we have to keep a couple"
  - "graphs/boruvka.py:42:20         belongs         U       a node belongs to."
  - "graphs/boruvka.py:55:12         Propagates      U       \"\"\"Propagates a new component throughout"
  - "graphs/boruvka.py:69:63         compares        U       components for two nodes, compares the components"
  - "graphs/boruvka.py:70:31         attaches        U       in terms of size, and attaches the smaller one to the"
  - "graphs/boruvka.py:83:9          boruvka         U       def boruvka(self) -> None:"
  - "graphs/boruvka.py:109:21        observing       U       observing right now, we will assign"
  - "graphs/breadth_first_search_2.py:5:24           unexplored      U       all nodes initially unexplored"
  - "graphs/breadth_first_search_2.py:6:11           explored        U       mark s as explored"
  - "graphs/breadth_first_search_shortest_path_2.py:4:1          Manual      U       Manual test:"
  - "graphs/breadth_first_search_shortest_path.py:1:4            Breath          U       \"\"\"Breath First Search (BFS) can"
  - "graphs/breadth_first_search_shortest_path.py:22:42          upon            U       vertex have to be defined upon initialization."
  - "graphs/breadth_first_search_shortest_path.py:29:9           breath          U       def breath_first_search(self)"
  - "graphs/breadth_first_search_shortest_path.py:51:55          describing      U       function returns a string, describing the result:"
  - "graphs/breadth_first_search_zero_one_shortest_path.py:2:73          dijkstra    U       which is faster than dijkstra."
  - "graphs/breadth_first_search.py:3:12         OMKAR       U       \"\"\"Author: OMKAR PATHAK\"\"\""
  - "graphs/breadth_first_search.py:3:18         PATHAK      U       \"\"\"Author: OMKAR PATHAK\"\"\""
  - "graphs/breadth_first_search.py:16:49        graaph      U       list representation of graaph"
  - "graphs/check_bipatrite.py:4:8           bipartite       U       def is_bipartite_dfs(graph: defaultdict"
  - "graphs/check_bipatrite.py:41:35         fails           U       FIXME: This test should fails with KeyError: 4."
  - "graphs/connected_components.py:13:22        vert        U       def dfs(graph: dict, vert: int, visited: list"
  - "graphs/connected_components.py:24:15        verts       U       connected_verts = []"
  - "graphs/deep_clone_graph.py:49:5         originals       U       originals_to_clones = {} # map"
  - "graphs/deep_clone_graph.py:49:18        clones          U       originals_to_clones = {} # map nodes to"
  - "graphs/depth_first_search.py:27:53          exploring       U       elements to stack without exploring them"
  - "graphs/dijkstra_2.py:11:14          mdist       U       def min_dist(mdist, vset, v):"
  - "graphs/dijkstra_2.py:11:21          vset        U       def min_dist(mdist, vset, v):"
  - "graphs/dijkstra_2.py:57:5           gsrc        U       gsrc = int(input(\"\\nEnter"
  - "graphs/dijkstra_algorithm.py:1:76           scratch     U       source shortest path from scratch"
  - "graphs/dijkstra_algorithm.py:2:11           Shubham     U       # Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:2:19           Malik       U       # Author: Shubham Malik"
  - "graphs/dijkstra_algorithm.py:185:9          Swaps       U       Swaps array elements at indices"
  - "graphs/dijkstra_algorithm.py:264:11         Assuming    U       # Assuming undirected graph"
  - "graphs/dijkstra_algorithm.py:408:9          Shows       U       Shows the shortest path from"
  - "graphs/dijkstra_binary_grid.py:4:3          walkable        U       a walkable node and 0 represents"
  - "graphs/dijkstra_binary_grid.py:4:37         obstacle        U       and 0 represents an obstacle."
  - "graphs/dijkstra_binary_grid.py:6:1          Diagonal        U       Diagonal movement can be allowed"
  - "graphs/dijkstra_binary_grid.py:30:18        movements       U       diagonal movements are allowed."
  - "graphs/dijkstra_binary_grid.py:56:5         predecessors    U       predecessors = np.empty((rows, cols"
  - "graphs/dijkstra.py:4:1          DIJKSTRA        U       DIJKSTRA(graph G, start vertex"
  - "graphs/dijkstra.py:25:67        guarantees      U       use of a min heap as H guarantees"
  - "graphs/dinic.py:17:33       rcap        U       edge(self, a, b, c, rcap=0):"
  - "graphs/dinic.py:87:20       verices     U       Finally we add the verices near the sink to the"
  - "graphs/directed_and_undirected_weighted_graph.py:15:7           handles         U       # handles repetition"
  - "graphs/directed_and_undirected_weighted_graph.py:15:15          repetition      U       # handles repetition"
  - "graphs/directed_and_undirected_weighted_graph.py:35:28          meant           U       if no destination is meant the default value is"
  - "graphs/directed_and_undirected_weighted_graph.py:153:9          indirect        U       indirect_parents = []"
  - "graphs/directed_and_undirected_weighted_graph.py:156:9          anticipating    U       anticipating_nodes = set()"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:2:40        sinks                   U       self, graph, sources, sinks):"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:63:14       verticies (vertices)    U       self.verticies_count = flow_network"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:66:41       shouldn't               U       a reference, so you shouldn't change"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:94:11       Relabel                 U       class PushRelabelExecutor(MaximumFlowAlgorithmE"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:101:14      excesses                U       self.excesses = [0] * self.verticies"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:106:21      substance               U       # push some substance to graph"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:107:13      nextvertex              U       for nextvertex_index, bandwidth in"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:147:18      relabel                 U       self.relabel(vertex_index)"
  - "graphs/edmonds_karp_multiple_source_and_sink.py:174:5       entrances               U       entrances = [0]"
  - "graphs/eulerian_path_and_circuit_for_undirected_graph.py:8:25           eulerian    U       using dfs for finding eulerian path traversal"
  - "graphs/even_tree.py:12:57       decomposed      U       that it can always be decomposed into"
  - "graphs/even_tree.py:22:23       redefined       U       # pylint: disable=redefined-outer-name"
  - "graphs/finding_bridges.py:3:40          vulnerabilities     U       one. Bridges represent vulnerabilities in a connected network"
  - "graphs/finding_bridges.py:4:59          wired               U       networks. For example, in a wired computer network, an"
  - "graphs/finding_bridges.py:5:1           articulation        U       articulation point indicates the"
  - "graphs/finding_bridges.py:6:1           wires               U       wires or connections."
  - "graphs/finding_bridges.py:60:13         bridges             U       def compute_bridges(graph: dict[int, list"
  - "graphs/frequent_pattern_graph_miner.py:4:3          novel           U       A novel Frequent Pattern Graph"
  - "graphs/frequent_pattern_graph_miner.py:4:70         compactly       U       FP-GraphMiner, that compactly"
  - "graphs/frequent_pattern_graph_miner.py:6:39         mine            U       used to efficiently mine frequent subgraphs including"
  - "graphs/frequent_pattern_graph_miner.py:6:73         maximal         U       subgraphs including maximal"
  - "graphs/frequent_pattern_graph_miner.py:66:54        descending      U       Bitcode), Bitcode] in descending order"
  - "graphs/g_topological_sort.py:1:11           Phyllipe        U       # Author: Phyllipe Bezerra (https://github"
  - "graphs/g_topological_sort.py:1:20           Bezerra         U       # Author: Phyllipe Bezerra (https://github.com"
  - "graphs/g_topological_sort.py:3:1            clothes         U       clothes = {"
  - "graphs/g_topological_sort.py:4:9            underwear       U       0: \"underwear\","
  - "graphs/g_topological_sort.py:5:9            pants           U       1: \"pants\","
  - "graphs/g_topological_sort.py:6:9            belt            U       2: \"belt\","
  - "graphs/g_topological_sort.py:7:9            suit            U       3: \"suit\","
  - "graphs/g_topological_sort.py:8:9            shoe            U       4: \"shoe\","
  - "graphs/g_topological_sort.py:9:9            socks           U       5: \"socks\","
  - "graphs/g_topological_sort.py:10:9           shirt           U       6: \"shirt\","
  - "graphs/g_topological_sort.py:24:17          clothing        U       current_clothing = stack.pop()"
  - "graphs/gale_shapley_bigraph.py:4:5          stable          U       def stable_matching("
  - "graphs/gale_shapley_bigraph.py:5:11         pref            U       donor_pref: list[list[int]], recipient"
  - "graphs/gale_shapley_bigraph.py:8:58         pairing         U       bipartite graph, i.e a pairing where no 2 objects"
  - "graphs/gale_shapley_bigraph.py:10:5         oegan           U       oegan donors and recipients"
  - "graphs/gale_shapley_bigraph.py:10:11        donors          U       oegan donors and recipients (where"
  - "graphs/gale_shapley_bigraph.py:12:18        organ           U       index is the organ recipient."
  - "graphs/gale_shapley_bigraph.py:16:56        Numberphile     U       v=Qcv1IqHWAzg&t=13s (Numberphile YouTube)."
  - "graphs/gale_shapley_bigraph.py:27:50        donated         U       # who the donor has donated to"
  - "graphs/gale_shapley_bigraph.py:29:9         donations       U       num_donations = [0] * n"
  - "graphs/graph_adjacency_list.py:3:9          Vikram          U       Author: Vikram Nithyanandam"
  - "graphs/graph_adjacency_list.py:3:16         Nithyanandam    U       Author: Vikram Nithyanandam"
  - "graphs/graph_adjacency_list.py:8:1          effectively     U       effectively initialized and modified"
  - "graphs/graph_adjacency_list.py:13:18        Ideas           U       Potential Future Ideas:"
  - "graphs/graph_adjacency_list.py:15:61        whatever        U       customizable to store whatever the client wants"
  - "graphs/graph_adjacency_list.py:15:81        wants           U       whatever the client wants"
  - "graphs/graph_adjacency_list.py:16:11        multigraph      U       - Support multigraph functionality if the"
  - "graphs/graph_adjacency_list.py:47:11        Falsey          U       # Falsey checks"
  - "graphs/graph_adjacency_list.py:63:30        thrown          U       a ValueError will be thrown."
  - "graphs/graph_adjacency_list.py:100:53       deletes         U       vertex from the graph and deletes all incoming and"
  - "graphs/graph_adjacency_list.py:176:9        Clears          U       Clears all vertices and edges"
  - "graphs/graph_adjacency_matrix.py:145:17         slide       U       # first slide up the rows by deleting"
  - "graphs/graph_list.py:3:25           Nwachukwu       U       Author: OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/graph_list.py:3:35           Chidiebere      U       OMKAR PATHAK, Nwachukwu Chidiebere"
  - "graphs/graph_list.py:16:36          Structure       U       List type Graph Data Structure that accounts for directed"
  - "graphs/graph_list.py:88:9           Connects        U       Connects vertices together. Creates"
  - "graphs/graph_list.py:90:9           Vertices        U       Vertices will be created if not"
  - "graphs/graphs_floyd_warshall.py:32:8        Whenever    U       5. Whenever distance[i][j] is given"
  - "graphs/graphs_floyd_warshall.py:87:7        specify     U       # specify source, destination"
  - "graphs/graphs_floyd_warshall.py:99:34       vertice     U       Expected Output from the vertice, edge and src, dst,"
  - "graphs/greedy_best_first.py:10:6        GRIDS       U       TEST_GRIDS = ["
  - "graphs/greedy_best_first.py:77:9        Could       U       Could elaborate to offer more"
  - "graphs/greedy_best_first.py:77:28       offer       U       Could elaborate to offer more than one choice"
  - "graphs/greedy_min_vertex_cover.py:3:16          Approximization     U       * Description: Approximization algorithm for minimum"
  - "graphs/greedy_min_vertex_cover.py:42:22         arcs                U       # Remove all arcs adjacent to argmax"
  - "graphs/greedy_min_vertex_cover.py:44:20         haven't             U       # if v haven't adjacent node, skip"
  - "graphs/greedy_min_vertex_cover.py:48:34         elem's              U       remove argmax from elem's adjacent list and update"
  - "graphs/kahns_algorithm_long.py:1:40         Acyclic     U       distance in Directed Acyclic Graph using KahnsAlgorithm"
  - "graphs/kahns_algorithm_long.py:3:5          indegree    U       indegree = [0] * len(graph)"
  - "graphs/kahns_algorithm_topo.py:4:11         Kahn's              U       using Kahn's Algorithm via Breadth"
  - "graphs/kahns_algorithm_topo.py:14:9         topologically       U       The topologically sorted order of vertices"
  - "graphs/karger.py:2:22           Karger's        U       An implementation of Karger's Algorithm for partitioning"
  - "graphs/karger.py:30:64          give            U       meaning it will not give"
  - "graphs/karger.py:34:40          adacency        U       dictionary containing adacency lists for the graph"
  - "graphs/karger.py:44:22          contracted      U       # Dict that maps contracted nodes to a list of all"
  - "graphs/karger.py:54:11          Contract        U       # Contract edge (u, v) to new node"
  - "graphs/lanczos_eigenvectors.py:2:28         Eigenvalues     U       Lanczos Method for Finding Eigenvalues and Eigenvectors of"
  - "graphs/lanczos_eigenvectors.py:4:72         eigenvalues     U       approximate the largest eigenvalues"
  - "graphs/lanczos_eigenvectors.py:5:19         eigenvectors    U       and corresponding eigenvectors of a symmetric matrix"
  - "graphs/lanczos_eigenvectors.py:7:16         tridiagonal     U       the graph to a tridiagonal matrix, whose eigenvalues"
  - "graphs/lanczos_eigenvectors.py:11:9         lanczos         U       - `find_lanczos_eigenvectors`: Computes"
  - "graphs/lanczos_eigenvectors.py:12:62        orthonormal     U       tridiagonal matrix and orthonormal basis vectors."
  - "graphs/lanczos_eigenvectors.py:13:29        Multiplies      U       multiply_matrix_vector`: Multiplies an adjacency list graph"
  - "graphs/lanczos_eigenvectors.py:21:3         Eigenvector     U       - Eigenvector Centrality: https:/"
  - "graphs/lanczos_eigenvectors.py:21:15        Centrality      U       - Eigenvector Centrality: https://en.wikipedia"
  - "graphs/lanczos_eigenvectors.py:26:15        centrality      U       analyze graph centrality."
  - "graphs/lanczos_eigenvectors.py:178:62       eigenvector     U       where each column is an eigenvector corresponding"
  - "graphs/lanczos_eigenvectors.py:179:35       eigenvalue      U       to an eigenvalue."
  - "graphs/lanczos_eigenvectors.py:192:43       eigh            U       eigenvectors = np.linalg.eigh(tridiagonal_matrix)"
  - "graphs/matching_min_vertex_cover.py:27:40       extremity       U       to_node) and add his extremity to chosen_vertices and"
  - "graphs/matching_min_vertex_cover.py:41:21       couples         U       Return a set of couples that represents all"
  - "graphs/minimum_spanning_tree_boruvka.py:37:13       Boruvks's       U       For Boruvks's algorithm the weights"
  - "graphs/minimum_spanning_tree_boruvka.py:70:9        Returna         U       Returna all edges in the graph"
  - "graphs/minimum_spanning_tree_boruvka.py:103:41      Boruvka's       U       set Union and Find for Boruvka's algorithm"
  - "graphs/minimum_spanning_tree_boruvka.py:170:13      cheap           U       cheap_edge = {}"
  - "graphs/minimum_spanning_tree_kruskal.py:1:5         kruskal     U       def kruskal("
  - "graphs/minimum_spanning_tree_prims.py:75:5          prisms          U       def prisms_algorithm(adjacency"
  - "graphs/minimum_spanning_tree_prims.py:90:44         Neighboring     U       len(adjacency_list) # Neighboring Tree Vertex of selected"
  - "graphs/minimum_spanning_tree_prims2.py:2:23         Jarník's        U       Prim's (also known as Jarník's) algorithm is a greedy"
  - "graphs/minimum_spanning_tree_prims2.py:5:47         operates        U       minimized. The algorithm operates by building this tree"
  - "graphs/minimum_spanning_tree_prims2.py:6:71         cheapest        U       each step adding the cheapest possible"
  - "graphs/minimum_spanning_tree_prims2.py:135:77       internally      U       movement) [to be used internally"
  - "graphs/minimum_spanning_tree_prims2.py:220:5        prims           U       def prims_algo("
  - "graphs/minimum_spanning_tree_prims2.py:241:7        prim's          U       # prim's algorithm for minimum"
  - "graphs/multi_heuristic_astar.py:47:17       prito           U       for prito, yyy in temp:"
  - "graphs/multi_heuristic_astar.py:135:16      inad            U       close_list_inad,"
  - "graphs/multi_heuristic_astar.py:139:9       itera           U       for itera in range(n_heuristic"
  - "graphs/multi_heuristic_astar.py:227:49      inconsistent    U       consistent and two other inconsistent"
  - "graphs/page_rank.py:21:14       inbound         U       self.inbound = []"
  - "graphs/page_rank.py:39:5        outbounds       U       outbounds = {}"
  - "graphs/prim.py:22:45        edges's         U       a dict to store the edges's weight"
  - "graphs/prim.py:39:41        neighbor's      U       pointer to a vertex at neighbor's list.\"\"\""
  - "graphs/prim.py:93:9         Edges           U       Edges of a Minimum Spanning"
  - "graphs/scc_kosaraju.py:24:5         kosaraju    U       def kosaraju():"
  - "graphs/strongly_connected_components.py:13:5        topology    U       def topology_sort("
  - "graphs/tarjans_scc.py:4:5           tarjan              U       def tarjan(g: list[list[int]])"
  - "graphs/tarjans_scc.py:6:5           Tarjan's            U       Tarjan's algo for finding strongly"
  - "graphs/tarjans_scc.py:12:23         saving              U       for each node and saving the nodes we visit on"
  - "graphs/tarjans_scc.py:16:42         equireachable       U       we save it and it's equireachable vertices as a strongly"
  - "greedy_methods/best_time_to_buy_and_sell_stock.py:2:52          profit      U       calculate the maximum profit that can be made from"
  - "greedy_methods/best_time_to_buy_and_sell_stock.py:9:50          GREEDY      U       using the concept of \"GREEDY ALGORITHM\"."
  - "greedy_methods/fractional_cover_problem.py:33:5         fractional      U       def fractional_cover(items: list[Item"
  - "greedy_methods/fractional_cover_problem.py:43:13        knapsack's      U       the knapsack's capacity."
  - "greedy_methods/gas_station.py:4:12          station         U       at the ith station is gas_quantities[i"
  - "greedy_methods/gas_station.py:8:15          journey         U       You begin the journey with an empty tank at"
  - "greedy_methods/gas_station.py:11:5          station's       U       gas station's index if you can travel"
  - "greedy_methods/gas_station.py:21:1          Greedily        U       Greedily calculate the net gain"
  - "greedy_methods/gas_station.py:21:38         quantity        U       calculate the net gain (gas_quantity - cost) at each station"
  - "greedy_methods/minimum_coin_change.py:3:27          denominations       U       you want to enter your denominations ? (Y/N) :N"
  - "greedy_methods/minimum_coin_change.py:9:17          denomination        U       Enter number of denomination:10"
  - "greedy_methods/minimum_coin_change.py:85:46         Denomination        U       ominations.append(int(input(f\"Denomination {i}: \").strip()))"
  - "greedy_methods/minimum_waiting_time.py:12:27        produces        U       ensures that the function produces the correct output."
  - "greedy_methods/minimum_waiting_time.py:22:36        measured        U       queries: A list of queries measured in picoseconds"
  - "greedy_methods/minimum_waiting_time.py:22:48        picoseconds     U       queries measured in picoseconds"
  - "greedy_methods/optimal_merge_pattern.py:10:48       resultant       U       solution, where the resultant file"
  - "greedy_methods/optimal_merge_pattern.py:17:55       possibly        U       record file requires possibly m+n record moves"
  - "greedy_methods/optimal_merge_pattern.py:24:45       optimum         U       merge all the files with optimum cost"
  - "greedy_methods/optimal_merge_pattern.py:43:11       Consider        U       # Consider two files with minimum"
  - "hashes/adler32.py:3:22          redundancy      U       Compared to a cyclic redundancy check of the same length"
  - "hashes/adler32.py:3:62          trades          U       the same length, it trades reliability for"
  - "hashes/adler32.py:4:8           preferring      U       speed (preferring the latter)."
  - "hashes/adler32.py:4:23          latter          U       speed (preferring the latter)."
  - "hashes/adler32.py:5:49          slightly        U       than Fletcher-16, and slightly less reliable than"
  - "hashes/adler32.py:11:5          ADLER           U       MOD_ADLER = 65521"
  - "hashes/adler32.py:14:5          adler           U       def adler32(plain_text: str)"
  - "hashes/adler32.py:17:18         evaluates       U       Iterates and evaluates a new value for each"
  - "hashes/chaos_machine.py:19:7        Choosing            U       # Choosing Dynamical Systems (All"
  - "hashes/chaos_machine.py:19:16       Dynamical           U       # Choosing Dynamical Systems (All)"
  - "hashes/chaos_machine.py:21:11       Evolution           U       # Evolution Parameter"
  - "hashes/chaos_machine.py:24:27       Orbit               U       # Control Theory: Orbit Change"
  - "hashes/chaos_machine.py:27:27       Trajectory          U       # Control Theory: Trajectory Change"
  - "hashes/chaos_machine.py:30:48       Jumps               U       Transition Function) - Jumps"
  - "hashes/chaos_machine.py:32:34       Saving              U       params_space[key] = r # Saving to Parameters Space"
  - "hashes/chaos_machine.py:45:7        PRNG                U       # PRNG (Xorshift by George"
  - "hashes/chaos_machine.py:45:32       Marsaglia           U       (Xorshift by George Marsaglia)"
  - "hashes/chaos_machine.py:65:16       Chaotic             U       # Choosing Chaotic Data"
  - "hashes/chaos_machine.py:84:7        Initialization      U       # Initialization"
  - "hashes/chaos_machine.py:94:11       controlling         U       # for controlling"
  - "hashes/chaos_machine.py:97:7        Pulling             U       # Pulling Data (Output)"
  - "hashes/djb2.py:2:49         Bernstein       U       first reported by Dan Bernstein many years ago in comp"
  - "hashes/djb2.py:3:40         favored         U       this algorithm (now favored by Bernstein) uses xor"
  - "hashes/djb2.py:7:23         adequately      U       It has never been adequately explained."
  - "hashes/djb2.py:7:34         explained       U       never been adequately explained."
  - "hashes/djb2.py:14:8         deficient       U       3. deficient number"
  - "hashes/djb2.py:29:15        scramble        U       >>> djb2('scramble bits')"
  - "hashes/enigma_machine.py:2:1            gear    U       gear_one = list(range(len"
  - "hashes/fletcher16.py:3:10           devised                             U       checksum devised by John G. Fletcher"
  - "hashes/fletcher16.py:3:21           John                                U       checksum devised by John G. Fletcher (1934-2"
  - "hashes/fletcher16.py:3:53           Lawrence                            U       Fletcher (1934-2012) at Lawrence Livermore Labs"
  - "hashes/fletcher16.py:3:62           Livermore                           U       4-2012) at Lawrence Livermore Labs"
  - "hashes/fletcher16.py:4:8            late                                U       in the late 1970s.[1] The objective"
  - "hashes/fletcher16.py:5:36           approaching                         U       detection properties approaching those of a cyclic"
  - "hashes/fletcher16.py:6:51           effort                              U       lower computational effort associated"
  - "hashes/fletcher16.py:13:5           fletcher                            U       def fletcher16(text: str) -> int"
  - "hashes/fletcher16.py:19:21          onethousandfourhundredthirtyfour    U       >>> fletcher16('onethousandfourhundredthirtyfour')"
  - "hashes/hamming_code.py:1:36         Gabriel                 U       Gustavo A. Amorim & Gabriel Kunz"
  - "hashes/hamming_code.py:1:44         Kunz                    U       A. Amorim & Gabriel Kunz"
  - "hashes/hamming_code.py:8:53         telecommunication       U       wiki/Hamming_code - In telecommunication,"
  - "hashes/hamming_code.py:9:44         correcting              U       family of linear error-correcting codes. Hamming"
  - "hashes/hamming_code.py:11:22        uncorrected             U       without detection of uncorrected errors. By contrast"
  - "hashes/hamming_code.py:12:1         parity                  U       parity code cannot correct"
  - "hashes/hamming_code.py:18:56        emitter                 U       encoding the message (emitterConverter)"
  - "hashes/hamming_code.py:20:56        receptor                U       decoding the message (receptorConverter)"
  - "hashes/hamming_code.py:24:63        Pari                    U       many parity bits (sizePari)"
  - "hashes/hamming_code.py:26:33        purposes                U       is desired (for test purposes) to select a bit to"
  - "hashes/hamming_code.py:28:9         Lastly                  U       Lastly, the variable of the"
  - "hashes/hamming_code.py:37:9         decodes                 U       decodes the message using the"
  - "hashes/hamming_code.py:42:38        forced                  U       the message that was forced the error"
  - "hashes/hamming_code.py:52:50        surrogatepass           U       encoding=\"utf-8\", errors=\"surrogatepass\"):"
  - "hashes/hamming_code.py:75:28        transmitted             U       return: message to be transmitted by unreliable medium"
  - "hashes/hamming_code.py:75:43        unreliable              U       to be transmitted by unreliable medium"
  - "hashes/hamming_code.py:157:7        Parity                  U       # Parity bit counter"
  - "hashes/hamming_code.py:268:5        Receiv                  U       dataReceiv, ack = receptorConverter"
  - "hashes/hamming_code.py:284:19       transmission            U       print(\"Data after transmission -> \" + \"\".join(dataOut"
  - "hashes/luhn.py:6:8          luhn        U       def is_luhn(string: str) -> bool"
  - "hashes/luhn.py:28:13        doubled     U       doubled: int = digit * 2"
  - "hashes/md5.py:2:38          that's                      U       algorithm is a hash function that's commonly used as a checksum"
  - "hashes/md5.py:3:13          corruption                  U       detect data corruption. The algorithm works"
  - "hashes/md5.py:8:1           Although                    U       Although MD5 was used as a cryptograph"
  - "hashes/md5.py:8:28          cryptographic               U       Although MD5 was used as a cryptographic hash function in the"
  - "hashes/md5.py:8:63          past                        U       hash function in the past, it's since"
  - "hashes/md5.py:9:6           cracked                     U       been cracked, so it shouldn't be"
  - "hashes/md5.py:30:38         abcdfghijklmnopqrstuvw      U       little_endian(b'1234567890abcdfghijklmnopqrstuvw')"
  - "hashes/md5.py:31:7          pqrstuvwhijklmno            U       b'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:31:25         abcdfg                      U       b'pqrstuvwhijklmno90abcdfg12345678'"
  - "hashes/md5.py:50:14         Suppose                     U       Example: Suppose the input is the following"
  - "hashes/md5.py:136:5         Splits                      U       Splits bit string into blocks"
  - "hashes/md5.py:148:41        there'll                    U       bit_string) == 512, so there'll be 1 block. The block"
  - "hashes/md5.py:237:23        unsigned                    U       (a + b) as an unsigned 32-bit int"
  - "hashes/md5.py:318:54        Üñîçø                       U       letters.encode(\"utf-8\"), \"Üñîçø∂é\".encode(\"utf-8\"),"
  - "hashes/md5.py:335:11        amounts                     U       shift_amounts = ["
  - "hashes/md5.py:431:15        hashed                      U       # Add hashed chunk to running total"
  - "hashes/README.md:2:59           specified           U       amount of data to a specified size using an algorithm"
  - "hashes/README.md:2:139          feeling             U       value (or, if you're feeling fancy, a hash code,"
  - "hashes/README.md:2:147          fancy               U       or, if you're feeling fancy, a hash code, hash sums"
  - "hashes/README.md:2:287          functionally        U       function. While it is functionally conceivable to reverse"
  - "hashes/README.md:2:300          conceivable         U       While it is functionally conceivable to reverse-hash stuff"
  - "hashes/README.md:2:315          reverse             U       functionally conceivable to reverse-hash stuff, the required"
  - "hashes/README.md:3:1            Unlike              U       Unlike encryption, which is"
  - "hashes/README.md:3:144          altered             U       of data has not been altered—that it is authentic"
  - "hashes/README.md:3:163          authentic           U       been altered—that it is authentic. In other words, it"
  - "hashes/README.md:3:208          checksum            U       words, it functions as a checksum."
  - "hashes/README.md:7:46           gained              U       algorithms that has gained widespread acceptance"
  - "hashes/README.md:7:53           widespread          U       algorithms that has gained widespread acceptance. MD5 is hashing"
  - "hashes/README.md:7:64           acceptance          U       has gained widespread acceptance. MD5 is hashing algorithm"
  - "hashes/README.md:7:101          made                U       is hashing algorithm made by Ray Rivest that is"
  - "hashes/README.md:7:113          Rivest              U       algorithm made by Ray Rivest that is known to suffer"
  - "hashes/README.md:7:137          suffer              U       Rivest that is known to suffer vulnerabilities. It"
  - "hashes/README.md:7:209          Currently           U       the successor to MD4. Currently MD6 is in the works"
  - "hashes/README.md:7:266          removed             U       as of 2009 Rivest had removed it from NIST consideration"
  - "hashes/README.md:10:52          probably            U       Hashing Algorithm and it’s probably best known as the hashing"
  - "hashes/README.md:10:118         cipher              U       used in most SSL/TLS cipher suites. A cipher suite"
  - "hashes/README.md:10:253         aspects             U       handles the hashing aspects. SHA-1, as we mentioned"
  - "hashes/README.md:10:301         deprecated          U       mentioned earlier, is now deprecated. SHA-2 is now mandatory"
  - "hashes/README.md:10:326         mandatory           U       deprecated. SHA-2 is now mandatory. SHA-2 is sometimes"
  - "hashes/README.md:10:381         variants            U       known as SHA-256, though variants with longer bit lengths"
  - "hashes/README.md:10:406         lengths             U       variants with longer bit lengths are also available."
  - "hashes/README.md:13:111         collaborative       U       Algorithm. It was a collaborative effort between both"
  - "hashes/README.md:13:231         lose                U       which was beginning to lose potency against brute"
  - "hashes/README.md:13:236         potency             U       was beginning to lose potency against brute force"
  - "hashes/README.md:14:5           importance          U       The importance of the 256 in the name"
  - "hashes/README.md:14:39          refers              U       the 256 in the name refers to the final hash digest"
  - "hashes/README.md:14:53          final               U       the name refers to the final hash digest value, i"
  - "hashes/README.md:14:119         regardless          U       will remain 256 bits regardless of the size of the plaintext"
  - "hashes/README.md:14:209         similar             U       in the SHA family are similar to SHA 256 in some ways"
  - "hashes/README.md:17:26          renowned            U       Luhn algorithm, also renowned as the modulus 10 or"
  - "hashes/README.md:17:79          straightforward     U       mod 10 algorithm, is a straightforward checksum formula used"
  - "hashes/README.md:17:131         wide                U       formula used to validate a wide range of identification"
  - "hashes/README.md:17:145         identification      U       validate a wide range of identification numbers, including credit"
  - "hashes/README.md:17:186         card                U       numbers, including credit card numbers, IMEI numbers"
  - "hashes/README.md:17:200         IMEI                U       credit card numbers, IMEI numbers, and Canadian"
  - "hashes/README.md:17:218         Canadian            U       numbers, IMEI numbers, and Canadian Social Insurance Numbers"
  - "hashes/README.md:17:227         Social              U       numbers, and Canadian Social Insurance Numbers. A"
  - "hashes/README.md:17:268         mathematicians      U       Numbers. A community of mathematicians developed the LUHN formula"
  - "hashes/README.md:17:297         LUHN                U       mathematicians developed the LUHN formula in the late"
  - "hashes/README.md:17:355         cards               U       Companies offering credit cards quickly followed suit"
  - "hashes/README.md:17:497         many                U       most credit cards and many government identification"
  - "hashes/README.md:17:502         government          U       credit cards and many government identification numbers"
  - "hashes/README.md:17:558         differentiating     U       as a simple method of differentiating valid figures from mistyped"
  - "hashes/README.md:17:593         mistyped            U       rentiating valid figures from mistyped or otherwise incorrect"
  - "hashes/README.md:17:615         incorrect           U       mistyped or otherwise incorrect numbers. It was created"
  - "hashes/README.md:17:652         guard               U       numbers. It was created to guard against unintentional"
  - "hashes/README.md:17:666         unintentional       U       created to guard against unintentional errors, not malicious"
  - "hashes/README.md:17:692         malicious           U       unintentional errors, not malicious attacks."
  - "hashes/sdbm.py:2:32         sdbm                U       algorithm was created for sdbm (a public-domain reimplementa"
  - "hashes/sdbm.py:2:54         reimplementation    U       sdbm (a public-domain reimplementation of ndbm)"
  - "hashes/sdbm.py:4:28         scrambling          U       found to do well in scrambling bits, causing better"
  - "hashes/sdbm.py:5:11         splits              U       and fewer splits."
  - "hashes/sdbm.py:11:54        gawk                U       faster version used in gawk. [there is even a faster"
  - "hashes/sdbm.py:12:1         duff                U       duff-device version]"
  - "hashes/sdbm.py:13:44        thin                U       9 was picked out of thin air while experimenting"
  - "hashes/sdbm.py:13:59        experimenting       U       out of thin air while experimenting with"
  - "hashes/sdbm.py:16:56        sleepycat           U       in berkeley db (see sleepycat) and elsewhere."
  - "hashes/sha1.py:14:71        communicating       U       property is useful for communicating"
  - "hashes/sha1.py:21:54        expanded            U       Each block must be expanded and compressed."
  - "hashes/sha1.py:37:25        Allan               U       >>> SHA1Hash(bytes('Allan', 'utf-8')).final_hash"
  - "hashes/sha1.py:43:9         Initiates           U       Initiates the variables data and"
  - "hashes/sha1.py:55:61        rotates             U       other methods. Left rotates n by b."
  - "hashes/sha1.py:80:48        unpacks             U       block of length 64, unpacks it to a list of integers"
  - "hashes/sha1.py:92:9         expansion           U       expansion)."
  - "hashes/sha1.py:93:64        copied              U       that was initialized is copied to a,b,c,d,e"
  - "hashes/sha1.py:94:41        undergo             U       variables a,b,c,d,e undergo several changes. After"
  - "hashes/sha1.py:141:36       commented           U       unittest.main() has been commented out because we probably"
  - "hashes/sha256.py:1:14           Yathurshan      U       # Author: M. Yathurshan"
  - "hashes/sha256.py:38:14          hashes          U       self.hashes = ["
  - "hashes/sha256.py:199:38         Inherits        U       for the SHA256 class. Inherits the TestCase class from"
  - "index.md:2:5            toctree         U       ```{toctree}"
  - "index.md:6:6            CONTRIBUTING    U       <!-- CONTRIBUTING.md must be the FIRST"
  - "knapsack/greedy_knapsack.py:5:3         shopkeeper      U       A shopkeeper has bags of wheat that"
  - "knapsack/greedy_knapsack.py:5:18        bags            U       A shopkeeper has bags of wheat that each have"
  - "knapsack/greedy_knapsack.py:5:26        wheat           U       shopkeeper has bags of wheat that each have different"
  - "knapsack/greedy_knapsack.py:5:79        profits         U       weights and different profits."
  - "knapsack/greedy_knapsack.py:15:65       maxmum          U       shopkeeper can make given maxmum weight that can"
  - "knapsack/greedy_knapsack.py:16:4        carried         U       be carried."
  - "knapsack/greedy_knapsack.py:38:27       Profit          U       raise ValueError(\"Profit can not be negative"
  - "knapsack/greedy_knapsack.py:63:51       encounter       U       weight but index always encounter the very first element"
  - "knapsack/greedy_knapsack.py:64:19       curb            U       only. To curb this alter the values"
  - "knapsack/knapsack.py:11:5           whereby     U       whereby each weight w has a"
  - "knapsack/knapsack.py:20:23          cause       U       The result is 220 cause the values of 100 and"
  - "knapsack/README.md:3:6          overview            U       This overview is taken from:"
  - "knapsack/README.md:3:18         taken               U       This overview is taken from:"
  - "knapsack/README.md:11:38        combinatorial       U       problem is a problem in combinatorial optimization: Given"
  - "knapsack/README.md:11:271       large               U       the total value is as large as possible. It derives"
  - "knapsack/README.md:11:293       derives             U       large as possible. It derives its name from the problem"
  - "knapsack/README.md:11:327       faced               U       name from the problem faced by someone who is constrained"
  - "knapsack/README.md:11:336       someone             U       the problem faced by someone who is constrained by"
  - "knapsack/README.md:11:351       constrained         U       faced by someone who is constrained by a fixed-size knapsack"
  - "knapsack/README.md:11:397       fill                U       size knapsack and must fill it with the most valuable"
  - "knapsack/README.md:11:419       valuable            U       fill it with the most valuable items. The problem often"
  - "knapsack/README.md:11:472       allocation          U       often arises in resource allocation where the decision makers"
  - "knapsack/README.md:11:502       makers              U       allocation where the decision makers have to choose from"
  - "knapsack/README.md:13:31        studied             U       knapsack problem has been studied for more than a century"
  - "knapsack/README.md:13:69        early               U       than a century, with early works dating as far"
  - "knapsack/README.md:13:81        dating              U       century, with early works dating as far back as 1897"
  - "knapsack/README.md:13:95        back                U       works dating as far back as 1897 The name \"knapsack"
  - "knapsack/README.md:13:183       Tobias              U       works of mathematician Tobias Dantzig (1884–1956)"
  - "knapsack/README.md:13:190       Dantzig             U       mathematician Tobias Dantzig (1884–1956), and refers"
  - "knapsack/README.md:13:229       commonplace         U       , and refers to the commonplace problem of packing the"
  - "knapsack/README.md:13:252       packing             U       commonplace problem of packing the most valuable or"
  - "knapsack/README.md:13:302       overloading         U       useful items without overloading the luggage."
  - "knapsack/README.md:13:318       luggage             U       without overloading the luggage."
  - "knapsack/README.md:20:82        METHODNAME          U       and `help(CLASSNAME.METHODNAME)`."
  - "knapsack/recursive_approach_knapsack.py:29:38       looking     U       the element we are looking at"
  - "knapsack/tests/test_knapsack.py:4:21        Schröder    U       @author: Dr. Tobias Schröder"
  - "LICENSE.md:3:1          Copyright           U       Copyright (c) 2016-2022 TheAlgorithms"
  - "LICENSE.md:5:15         hereby              U       Permission is hereby granted, free of charge"
  - "LICENSE.md:5:22         granted             U       Permission is hereby granted, free of charge, to"
  - "LICENSE.md:5:61         obtaining           U       charge, to any person obtaining a copy"
  - "LICENSE.md:7:25         restriction         U       the Software without restriction, including without limitation"
  - "LICENSE.md:7:56         limitation          U       estriction, including without limitation the rights"
  - "LICENSE.md:7:71         rights              U       without limitation the rights"
  - "LICENSE.md:8:51         sublicense          U       publish, distribute, sublicense, and/or sell"
  - "LICENSE.md:9:1          copies              U       copies of the Software, and"
  - "LICENSE.md:9:32         permit              U       the Software, and to permit persons to whom the"
  - "LICENSE.md:9:50         whom                U       to permit persons to whom the Software is"
  - "LICENSE.md:10:1         furnished           U       furnished to do so, subject to"
  - "LICENSE.md:10:21        subject             U       furnished to do so, subject to the following conditions"
  - "LICENSE.md:12:11        copyright           U       The above copyright notice and this permission"
  - "LICENSE.md:12:21        notice              U       The above copyright notice and this permission"
  - "LICENSE.md:12:55        shall               U       this permission notice shall be included in all"
  - "LICENSE.md:13:11        substantial         U       copies or substantial portions of the Software"
  - "LICENSE.md:13:23        portions            U       copies or substantial portions of the Software."
  - "LICENSE.md:15:17        PROVIDED            U       THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY"
  - "LICENSE.md:15:43        WARRANTY            U       PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS"
  - "LICENSE.md:15:59        KIND                U       WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
  - "LICENSE.md:16:1         IMPLIED             U       IMPLIED, INCLUDING BUT NOT LIMITED"
  - "LICENSE.md:16:10        INCLUDING           U       IMPLIED, INCLUDING BUT NOT LIMITED TO THE"
  - "LICENSE.md:16:43        WARRANTIES          U       BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
  - "LICENSE.md:17:1         FITNESS             U       FITNESS FOR A PARTICULAR PURPOSE"
  - "LICENSE.md:17:15        PARTICULAR          U       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT"
  - "LICENSE.md:17:26        PURPOSE             U       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT"
  - "LICENSE.md:17:38        NONINFRINGEMENT     U       PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
  - "LICENSE.md:17:67        SHALL               U       NONINFRINGEMENT. IN NO EVENT SHALL THE"
  - "LICENSE.md:18:1         AUTHORS             U       AUTHORS OR COPYRIGHT HOLDERS"
  - "LICENSE.md:18:12        COPYRIGHT           U       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR"
  - "LICENSE.md:18:22        HOLDERS             U       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM"
  - "LICENSE.md:18:33        LIABLE              U       COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES"
  - "LICENSE.md:18:55        DAMAGES             U       LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
  - "LICENSE.md:19:1         LIABILITY           U       LIABILITY, WHETHER IN AN ACTION"
  - "LICENSE.md:19:12        WHETHER             U       LIABILITY, WHETHER IN AN ACTION OF CONTRACT"
  - "LICENSE.md:19:36        CONTRACT            U       WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,"
  - "LICENSE.md:19:46        TORT                U       ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING"
  - "LICENSE.md:19:54        OTHERWISE           U       OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
  - "LICENSE.md:19:65        ARISING             U       TORT OR OTHERWISE, ARISING FROM,"
  - "LICENSE.md:20:63        DEALINGS            U       OR THE USE OR OTHER DEALINGS IN THE"
  - "linear_algebra/gaussian_elimination.py:2:3          Gaussian        U       | Gaussian elimination method for"
  - "linear_algebra/gaussian_elimination.py:2:12         elimination     U       | Gaussian elimination method for solving a"
  - "linear_algebra/gaussian_elimination.py:11:5         retroactive     U       def retroactive_resolution("
  - "linear_algebra/gaussian_elimination.py:74:7         augmented       U       # augmented matrix"
  - "linear_algebra/jacobi_iteration_method.py:13:5          jacobi          U       def jacobi_iteration_method("
  - "linear_algebra/jacobi_iteration_method.py:21:67         diagonally      U       solutions of strictly diagonally dominant"
  - "linear_algebra/jacobi_iteration_method.py:127:21        denom           U       denom = table[row][col]"
  - "linear_algebra/jacobi_iteration_method.py:138:22        diag            U       denominator = np.diag(coefficient_matrix)"
  - "linear_algebra/lu_decomposition.py:2:18         decomposition       U       Lower-upper (LU) decomposition factors a matrix as"
  - "linear_algebra/lu_decomposition.py:6:24         invertible          U       - If the matrix is invertible, then it has an LU decomposit"
  - "linear_algebra/lu_decomposition.py:7:39         minors              U       its leading principal minors are non-zero (see"
  - "linear_algebra/lu_decomposition.py:10:24        singular            U       - If the matrix is singular (i.e., not invertible"
  - "linear_algebra/lu_decomposition.py:11:32        independent         U       , it has k linearly independent columns), then it has"
  - "linear_algebra/README.md:15:7           constructor     U       - constructor(components) : init the"
  - "linear_algebra/README.md:18:48          indexed         U       the i-th component (0-indexed)"
  - "linear_algebra/README.md:19:39          length          U       ) : gets the size / length of the vector (number"
  - "linear_algebra/README.md:20:40          eulidean        U       length() : returns the eulidean length of the vector"
  - "linear_algebra/README.md:21:7           operator        U       - operator + : vector addition"
  - "linear_algebra/README.md:31:12          axpy            U       - function axpy(scalar, vector1, vector"
  - "linear_algebra/README.md:69:48          bytecode        U       directly use the Python bytecode file `lib.pyc`."
  - "linear_algebra/src/conjugate_gradient.py:14:56          definite        U       is symmetric positive definite."
  - "linear_algebra/src/conjugate_gradient.py:40:27          eignevectors    U       Get eigenvalues and eignevectors for a symmetric matrix"
  - "linear_algebra/src/conjugate_gradient.py:56:22          diminesion      U       spd_matrix is an diminesion x dimensions symmetric"
  - "linear_algebra/src/conjugate_gradient.py:81:45          Definite        U       NxN Symmetric Positive Definite (SPD) matrix."
  - "linear_algebra/src/conjugate_gradient.py:106:34         residual        U       Initialize solution guess, residual, search direction."
  - "linear_algebra/src/conjugate_gradient.py:131:25         Krylov          U       # Calculate new Krylov subspace scale."
  - "linear_algebra/src/conjugate_gradient.py:133:27         conjuage        U       # Calculate new A conjuage search direction."
  - "linear_algebra/src/gaussian_elimination_pivoting.py:17:61       Lecture     U       cs357/su2013/lect.htm Lecture 7"
  - "linear_algebra/src/lib.py:124:13        prods       U       prods = [self.__components"
  - "linear_algebra/src/lib.py:261:9         cofactor    U       cofactor(x: int, y: int): returns"
  - "linear_algebra/src/polynom_for_points.py:9:47           fitting     U       program cannot work out a fitting polynomial."
  - "linear_algebra/src/power_iteration.py:15:41         Hermitian       U       must be either real or Hermitian."
  - "linear_algebra/src/power_iteration.py:25:12         Scalar          U       Float. Scalar."
  - "linear_algebra/src/power_iteration.py:45:15         iscomplexobj    U       assert np.iscomplexobj(input_matrix) == np"
  - "linear_algebra/src/power_iteration.py:49:58         conj            U       matrix, input_matrix.conj().T)"
  - "linear_algebra/src/power_iteration.py:51:11         convergence     U       # Set convergence to False. Will define"
  - "linear_algebra/src/power_iteration.py:64:16         rayleigh        U       # Find rayleigh quotient"
  - "linear_algebra/src/power_iteration.py:64:25         quotient        U       # Find rayleigh quotient"
  - "linear_algebra/src/power_iteration.py:91:22         triu            U       imag_matrix = np.triu(1j * complex_input_matrix"
  - "linear_algebra/src/power_iteration.py:110:44        hermetian       U       used for symmetric or hermetian matrices)."
  - "linear_algebra/src/rayleigh_quotient.py:10:8        hermitian       U       def is_hermitian(matrix: np.ndarray)"
  - "linear_algebra/src/schur_complement.py:21:38        Boyd            U       Convex Optimization - Boyd and Vandenberghe, A"
  - "linear_algebra/src/schur_complement.py:21:47        Vandenberghe    U       Optimization - Boyd and Vandenberghe, A.5.5"
  - "linear_algebra/src/test_linear_algebra.py:150:9         cofactors       U       cofactors = [[-3, 14, -10], ["
  - "linear_algebra/src/transformations_2d.py:2:24           regularly       U       Transformations are regularly used in Linear Algebra"
  - "linear_algebra/src/transformations_2d.py:4:28           reflection      U       added the codes for reflection, projection, scaling"
  - "linear_algebra/src/transformations_2d.py:4:40           projection      U       codes for reflection, projection, scaling and rotation"
  - "linear_programming/simplex.py:2:30          simplex         U       implementation of the simplex algorithm for solving"
  - "linear_programming/simplex.py:8:36          tableaus        U       programs to simplex tableaus, and the steps taken"
  - "linear_programming/simplex.py:21:7          Tableau         U       class Tableau:"
  - "linear_programming/simplex.py:22:8          Operate         U       \"\"\"Operate on simplex tableaus"
  - "linear_programming/simplex.py:37:28         artificial      U       ValueError: number of (artificial) variables must be a"
  - "linear_programming/simplex.py:40:39         cycling         U       iteration number to prevent cycling"
  - "linear_programming/simplex.py:44:15         tableau         U       self, tableau: np.ndarray, n_vars"
  - "linear_programming/simplex.py:67:51         inequalities    U       variables added to make inequalities into equalities"
  - "linear_programming/simplex.py:67:69         equalities      U       make inequalities into equalities"
  - "linear_programming/simplex.py:70:11         Objectives      U       # Objectives for each stage"
  - "linear_programming/simplex.py:71:14         objectives      U       self.objectives = [\"max\"]"
  - "linear_programming/simplex.py:73:39         minimise        U       stage simplex, first minimise then maximise"
  - "linear_programming/simplex.py:73:53         maximise        U       first minimise then maximise"
  - "linear_programming/simplex.py:125:11        Pivot           U       # Pivot row is chosen as having"
  - "linear_programming/simplex.py:132:9         dividend        U       dividend = self.tableau[s, -"
  - "linear_programming/simplex.py:137:29        nans            U       # Array filled with nans"
  - "linear_programming/simplex.py:142:9         quotients       U       quotients = np.divide(dividend"
  - "linear_programming/simplex.py:145:14        compensate      U       # to compensate for earlier exclusion"
  - "linear_programming/simplex.py:145:37        exclusion       U       compensate for earlier exclusion of objective columns"
  - "linear_programming/simplex.py:150:12        Pivots          U       \"\"\"Pivots on value on the intersection"
  - "linear_programming/simplex.py:168:18        coeff           U       for idx, coeff in enumerate(self.tableau"
  - "linear_programming/simplex.py:174:12        Exits           U       \"\"\"Exits first phase of the two"
  - "linear_programming/simplex.py:175:30        completes       U       rows and columns, or completes the algorithm if exiting"
  - "linear_programming/simplex.py:258:25        minimisation    U       # Non standard: minimisation and equalities"
  - "linear_programming/simplex.py:295:29        interpret       U       return self.interpret_tableau()"
  - "linear_programming/simplex.py:321:15        Gives           U       # Gives indices of nonzero entries"
  - "linear_programming/simplex.py:326:21        rowidx          U       nonzero_rowidx = nonzero[0][0]"
  - "machine_learning/apriori_algorithm.py:2:80          basket              U       also known as market basket"
  - "machine_learning/apriori_algorithm.py:3:40          relationships       U       discover interesting relationships or associations among"
  - "machine_learning/apriori_algorithm.py:4:12          transactional       U       items in a transactional or relational database"
  - "machine_learning/apriori_algorithm.py:6:55          buys                U       states: \"If a customer buys item A and item B, then"
  - "machine_learning/apriori_algorithm.py:7:50          relationship        U       This rule suggests a relationship between items A, B,"
  - "machine_learning/apriori_algorithm.py:8:17          customers           U       indicating that customers who purchased A and"
  - "machine_learning/apriori_algorithm.py:8:31          purchased           U       indicating that customers who purchased A and B are more likely"
  - "machine_learning/apriori_algorithm.py:22:8          milk                U       [['milk'], ['milk', 'butter"
  - "machine_learning/apriori_algorithm.py:22:46         bread               U       butter'], ['milk', 'bread'], ['milk', 'bread'"
  - "machine_learning/apriori_algorithm.py:22:74         chips               U       ['milk', 'bread', 'chips']]"
  - "machine_learning/apriori_algorithm.py:30:17         pruning             U       The goal of pruning is to filter out candidate"
  - "machine_learning/apriori_algorithm.py:35:5          Prunes              U       Prunes candidate itemsets that"
  - "machine_learning/apriori_algorithm.py:47:5          pruned              U       pruned = []"
  - "machine_learning/apriori_algorithm.py:59:5          apriori             U       def apriori(data: list[list[str"
  - "machine_learning/apriori_algorithm.py:83:17         infrequent          U       # Prune infrequent itemsets"
  - "machine_learning/astar.py:2:18          combines        U       The A* algorithm combines features of uniform"
  - "machine_learning/astar.py:9:18          introduces      U       The A* algorithm introduces a heuristic into a regular"
  - "machine_learning/astar.py:10:13         planning        U       essentially planning ahead at each step so"
  - "machine_learning/astar.py:11:42         brains          U       as an algorithm with brains."
  - "machine_learning/astar.py:23:63         arrived         U       object visited before we arrived at this cell."
  - "machine_learning/astar.py:65:9          neughbour       U       neughbour_cord = ["
  - "machine_learning/astar.py:65:19         cord            U       neughbour_cord = ["
  - "machine_learning/automatic_differentiation.py:2:1           Demonstration       U       Demonstration of the Automatic Differentiat"
  - "machine_learning/automatic_differentiation.py:6:9           Poojan              U       Author: Poojan Smart"
  - "machine_learning/automatic_differentiation.py:68:14         Gradient            U       with GradientTracker() as tracker"
  - "machine_learning/automatic_differentiation.py:198:9         Executes            U       Executes at the creation of class"
  - "machine_learning/automatic_differentiation.py:199:55        singleton           U       This class follows singleton"
  - "machine_learning/automatic_differentiation.py:230:54        gradients           U       graph for calculating gradients."
  - "machine_learning/automatic_differentiation.py:249:17        accumulation        U       Reverse accumulation of partial derivatives"
  - "machine_learning/automatic_differentiation.py:262:17        deriv               U       partial_deriv = defaultdict(lambda"
  - "machine_learning/automatic_differentiation.py:272:17        dparam              U       dparam_doutput = self.derivative"
  - "machine_learning/automatic_differentiation.py:272:24        doutput             U       dparam_doutput = self.derivative(param"
  - "machine_learning/automatic_differentiation.py:273:24        dtarget             U       dparam_dtarget = dparam_doutput * partial"
  - "machine_learning/automatic_differentiation.py:290:13        Derivative          U       Derivative of input variable with"
  - "machine_learning/data_transformations.py:12:24          Descent             U       particularly Gradient Descent)."
  - "machine_learning/data_transformations.py:14:1           Standardization     U       Standardization Wikipedia: https://en"
  - "machine_learning/data_transformations.py:15:66          normally            U       numerical data to a normally distributed"
  - "machine_learning/data_transformations.py:17:55          standardization     U       rmalization. The equation for standardization is"
  - "machine_learning/data_transformations.py:22:29          experiments         U       often recommended to run experiments with both to see which"
  - "machine_learning/data_transformations.py:23:1           Additionally        U       Additionally, a few rules of thumb"
  - "machine_learning/data_transformations.py:26:59          outliers            U       has extreme values / outliers, use standardization"
  - "machine_learning/data_transformations.py:37:44          rounded             U       of normalized values (rounded to ndigits decimal places"
  - "machine_learning/data_transformations.py:53:14          standardized        U       Return a standardized list of values."
  - "machine_learning/data_transformations.py:55:40          standardize         U       a list of values to standardize"
  - "machine_learning/decision_tree.py:105:13        predictor       U       the predictor"
  - "machine_learning/decision_tree.py:155:49        trained         U       Decision tree not yet trained\")"
  - "machine_learning/decision_tree.py:160:17        Tres            U       \"\"\"Decision Tres test class\"\"\""
  - "machine_learning/decision_tree.py:204:32        squarred        U       doctest.testmod(name=\"mean_squarred_error\", verbose=True"
  - "machine_learning/dimensionality_reduction.py:1:29           Gasco               U       Copyright (c) 2023 Diego Gasco (diego.gasco99@gmail"
  - "machine_learning/dimensionality_reduction.py:1:62           Diegomangasco       U       gasco99@gmail.com), Diegomangasco on GitHub"
  - "machine_learning/dimensionality_reduction.py:7:1            Notes               U       Notes:"
  - "machine_learning/dimensionality_reduction.py:48:11          Centralize          U       # Centralize the data of class i"
  - "machine_learning/dimensionality_reduction.py:114:9          filtered            U       filtered_eigenvectors = eigenvectors"
  - "machine_learning/dimensionality_reduction.py:126:12         discriminant        U       def linear_discriminant_analysis("
  - "machine_learning/forecasting/run.py:2:18        forecasting         U       this is code for forecasting"
  - "machine_learning/forecasting/run.py:4:28        shop                U       you have an online shop and for some reason"
  - "machine_learning/forecasting/run.py:5:53        supposed            U       that u expected are not supposed to be)"
  - "machine_learning/forecasting/run.py:8:22        quite               U       the data is quite absurd and only a little"
  - "machine_learning/forecasting/run.py:8:28        absurd              U       the data is quite absurd and only a little^^"
  - "machine_learning/forecasting/run.py:18:35       Normalizer          U       preprocessing import Normalizer"
  - "machine_learning/forecasting/run.py:24:44       mtch                U       train_usr: list, train_mtch: list, test_dt: list"
  - "machine_learning/forecasting/run.py:45:45       exog                U       data (total_user, with exog data = total_event)"
  - "machine_learning/forecasting/run.py:53:5        seasonal            U       seasonal_order = (1, 1, 1, 7"
  - "machine_learning/forecasting/run.py:57:27       disp                U       model_fit = model.fit(disp=False, maxiter=600,"
  - "machine_learning/forecasting/run.py:66:22       principles          U       it uses the same principles as the SVM for classification"
  - "machine_learning/forecasting/run.py:68:8        suits               U       it suits better for regression"
  - "machine_learning/forecasting/run.py:75:51       epsilon             U       rbf\", C=1, gamma=0.1, epsilon=0.1)"
  - "machine_learning/forecasting/run.py:77:7        pred                U       y_pred = regressor.predict"
  - "machine_learning/forecasting/run.py:81:5        interquartile       U       def interquartile_range_checker(train"
  - "machine_learning/forecasting/run.py:83:22       interquatile        U       Optional method: interquatile range"
  - "machine_learning/forecasting/run.py:86:59       outlier             U       whether some data is outlier or not"
  - "machine_learning/forecasting/run.py:91:13       percentile          U       q1 = np.percentile(train_user, 25)"
  - "machine_learning/forecasting/run.py:125:62      held                U       how much online event held in one day,"
  - "machine_learning/forecasting/run.py:126:29      saturday            U       what day is that(sunday-saturday)"
  - "machine_learning/forecasting/run.py:151:7       voting              U       # voting system with forecasting"
  - "machine_learning/frequent_pattern_growth.py:5:4         overcomes       U       It overcomes some of the limitations"
  - "machine_learning/frequent_pattern_growth.py:5:26        limitations     U       overcomes some of the limitations of traditional methods"
  - "machine_learning/frequent_pattern_growth.py:5:41        traditional     U       of the limitations of traditional methods such as Apriori"
  - "machine_learning/frequent_pattern_growth.py:25:13       occur           U       num_occur: The number of occurrences"
  - "machine_learning/frequent_pattern_growth.py:114:9       tran            U       for tran_set in data_set:"
  - "machine_learning/frequent_pattern_growth.py:220:59      ascended        U       the item as they are ascended."
  - "machine_learning/frequent_pattern_growth.py:287:5       Mine            U       Mine the FP-Tree recursively"
  - "machine_learning/frequent_pattern_growth.py:293:68      mined           U       for the itemsets being mined."
  - "machine_learning/frequent_pattern_growth.py:320:14      patt            U       cond_patt_bases = find_prefix"
  - "machine_learning/frequent_pattern_growth.py:335:38      cheese          U       frozenset([\"bread\", \"milk\", \"cheese\"]),"
  - "machine_learning/frequent_pattern_growth.py:337:30      diapers         U       frozenset([\"bread\", \"diapers\"]),"
  - "machine_learning/gradient_boosting_classifier.py:2:35           iris            U       datasets import load_iris"
  - "machine_learning/gradient_boosting_classifier.py:9:26           estimators      U       def __init__(self, n_estimators: int = 100, learning"
  - "machine_learning/gradient_boosting_classifier.py:48:36          residuals       U       Calculate the pseudo-residuals"
  - "machine_learning/gradient_boosting_classifier.py:50:26          learner         U       # Fit a weak learner (e.g., decision tree"
  - "machine_learning/gradient_boosting_classifier.py:85:64          logistic        U       pseudo-residuals) for logistic loss."
  - "machine_learning/gradient_boosting_classifier.py:118:13         Accuracy        U       print(f\"Accuracy: {accuracy:.2f}\")"
  - "machine_learning/gradient_descent.py:2:28           descent         U       Implementation of gradient descent algorithm for minimizing"
  - "machine_learning/gradient_descent.py:19:1           LEARNING        U       LEARNING_RATE = 0.009"
  - "machine_learning/gradient_descent.py:26:31          pointed         U       return: error in example pointed by example number."
  - "machine_learning/gradient_descent.py:38:28          biased          U       Note that there is an 'biased input' whose value is"
  - "machine_learning/gradient_descent.py:39:15          explicitly      U       It is not explicitly mentioned in input data"
  - "machine_learning/gradient_descent.py:52:54          fetched         U       whose output is to be fetched"
  - "machine_learning/gradient_descent.py:107:7          Tune            U       # Tune these values to set"
  - "machine_learning/gradient_descent.py:123:13         rtol            U       rtol=relative_error_limit"
  - "machine_learning/k_means_clust.py:14:5          heterogeneity           U       - heterogeneity , empty list that will"
  - "machine_learning/k_means_clust.py:15:8          kmeans                  U       to kmeans func."
  - "machine_learning/k_means_clust.py:40:6          Transfers               U       5. Transfers Dataframe into excel"
  - "machine_learning/k_means_clust.py:53:10         MEANS                   U       TAG = \"K-MEANS-CLUST/ \""
  - "machine_learning/k_means_clust.py:53:16         CLUST                   U       TAG = \"K-MEANS-CLUST/ \""
  - "machine_learning/k_means_clust.py:65:25         dense                   U       # Keep centroids as dense format, as many entries"
  - "machine_learning/k_means_clust.py:65:78         averaging               U       will be nonzero due to averaging."
  - "machine_learning/k_means_clust.py:89:5          revise                  U       def revise_centroids(data, k, cluster"
  - "machine_learning/k_means_clust.py:123:17        Heterogeneity           U       plt.ylabel(\"Heterogeneity\")"
  - "machine_learning/k_means_clust.py:170:15        YOUR                    U       # YOUR CODE HERE"
  - "machine_learning/k_means_clust.py:214:15        Customers               U       0 # of Customers ClusterSize"
  - "machine_learning/k_means_clust.py:215:33        Proportion              U       of Customers ClusterProportion False 0.666667"
  - "machine_learning/k_means_clust.py:230:31        fillna                  U       predicted = predicted.fillna(value=fill_missing_report"
  - "machine_learning/k_means_clust.py:232:37        dtypes                  U       cols = predicted.select_dtypes(np.number).columns"
  - "machine_learning/k_means_clust.py:278:23        proportion              U       # calculating the proportion of cluster"
  - "machine_learning/k_means_clust.py:279:5         clusterproportion       U       clusterproportion = pd.DataFrame("
  - "machine_learning/k_means_clust.py:280:21        iloc                    U       clustersize.iloc[:, 2:].to_numpy() /"
  - "machine_learning/k_means_clust.py:308:41        isin                    U       report[\"Features\"].isin(clustering_variables"
  - "machine_learning/k_nearest_neighbours.py:2:44           parametric      U       kNN) is a simple non-parametric supervised learning"
  - "machine_learning/k_nearest_neighbours.py:2:55           supervised      U       simple non-parametric supervised learning"
  - "machine_learning/k_nearest_neighbours.py:4:10           classified      U       point is classified using its k nearest"
  - "machine_learning/k_nearest_neighbours.py:5:27           occurring       U       metric. The most commonly occurring label among the neighbours"
  - "machine_learning/k_nearest_neighbours.py:6:64           decided         U       of the given point is decided by a"
  - "machine_learning/k_nearest_neighbours.py:7:1            majority        U       majority vote."
  - "machine_learning/k_nearest_neighbours.py:60:11          Distances       U       # Distances of all points from the"
  - "machine_learning/linear_discriminant_analysis.py:6:1            Assumptions         U       Assumptions About Data :"
  - "machine_learning/linear_discriminant_analysis.py:10:51          representative      U       your training set is representative of the problem."
  - "machine_learning/linear_discriminant_analysis.py:14:32          estimation          U       LDA model requires the estimation of statistics from the"
  - "machine_learning/linear_discriminant_analysis.py:58:49          entered             U       of standard deviation entered by usr or default value"
  - "machine_learning/linear_discriminant_analysis.py:74:33          detecting           U       corresponding Y flags to detecting classes"
  - "machine_learning/linear_discriminant_analysis.py:78:48          groupings           U       Number of classes(data groupings) in dataset"
  - "machine_learning/linear_discriminant_analysis.py:208:39         discriminants       U       appending values of discriminants for each class to 'temp"
  - "machine_learning/linear_discriminant_analysis.py:263:45         fulfill             U       and validate that it fulfill a condition."
  - "machine_learning/linear_discriminant_analysis.py:298:58         Groupings           U       number of classes (Data Groupings): \","
  - "machine_learning/linear_discriminant_analysis.py:318:60         theirs              U       instances in classes and theirs means to generate"
  - "machine_learning/linear_discriminant_analysis.py:358:16         Generated           U       print(\"Generated Normal Distribution"
  - "machine_learning/linear_discriminant_analysis.py:363:26         Corresponding       U       print(\"Generated Corresponding Ys: \\n\", y)"
  - "machine_learning/linear_discriminant_analysis.py:390:11         Predicting          U       # Predicting Y values"
  - "machine_learning/linear_regression.py:3:1           predictive      U       predictive analysis. The idea is"
  - "machine_learning/linear_regression.py:4:61          cautiously      U       should be chosen very cautiously"
  - "machine_learning/linear_regression.py:7:56          CSGO            U       particular code, I had used a CSGO dataset (ADR vs"
  - "machine_learning/linear_regression.py:8:1           Rating          U       Rating). We try to best fit"
  - "machine_learning/linear_regression.py:35:9          steep           U       def run_steep_gradient_descent(data"
  - "machine_learning/linear_regression.py:41:39         weight's        U       : Feature vector (weight's for our model)"
  - "machine_learning/linear_regression.py:130:12        Resultant       U       print(\"Resultant Feature vector : \")"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:2:1         Locally         U       Locally weighted linear regression"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:3:39        prioritizes     U       linear regression that prioritizes data closest to a given"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:7:6         XᵀWX            U       β = (XᵀWX)⁻¹(XᵀWy),"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:7:14        XᵀWy            U       β = (XᵀWX)⁻¹(XᵀWy),"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:22:43       farther         U       weighted lower if it's farther from the center, and"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:23:14       spread          U       controls the spread of the bell curve."
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:25:70       scatterplot     U       as locally estimated scatterplot"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:26:12       LOESS           U       smoothing (LOESS) typically use different"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:151:10      preds           U       def plot_preds("
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:168:16      yellow          U       color=\"yellow\","
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:183:28      bill            U       training_data_x, total_bill, tip = load_data(\"tips"
  - "machine_learning/local_weighted_learning/local_weighted_learning.py:183:51      tips            U       bill, tip = load_data(\"tips\", \"total_bill\", \"tip"
  - "machine_learning/local_weighted_learning/README.md:2:103        regression      U       parameters such as **linear regression**. \\"
  - "machine_learning/local_weighted_learning/README.md:3:18         question        U       So, here comes a question of what is *linear regression"
  - "machine_learning/local_weighted_learning/README.md:6:17         Involved        U       ### Terminology Involved"
  - "machine_learning/local_weighted_learning/README.md:10:8         sequence        U       output_sequence(y) = Output Sequence"
  - "machine_learning/local_weighted_learning/README.md:14:23        ordinary        U       The steps involved in ordinary linear regression are"
  - "machine_learning/local_weighted_learning/README.md:16:10        phase           U       Training phase: Compute \\theta to minimize"
  - "machine_learning/local_weighted_learning/README.md:16:35        minimize        U       phase: Compute \\theta to minimize the cost. \\"
  - "machine_learning/local_weighted_learning/README.md:24:72        again           U       are linear, but there again comes a question can"
  - "machine_learning/local_weighted_learning/README.md:24:155       shown           U       between x and y ? as shown below"
  - "machine_learning/local_weighted_learning/README.md:29:117       Rather          U       fixed set of params. Rather parameters $\\theta$"
  - "machine_learning/local_weighted_learning/README.md:32:7         Computing       U       While Computing $\\theta$ , a higher"
  - "machine_learning/local_weighted_learning/README.md:32:74        vicinity        U       given to points in the vicinity of x than points farther"
  - "machine_learning/local_weighted_learning/README.md:37:27        lying           U       is large fr $x^i$'s lying closer to query point"
  - "machine_learning/local_weighted_learning/README.md:37:33        closer          U       large fr $x^i$'s lying closer to query point $x_i"
  - "machine_learning/local_weighted_learning/README.md:40:3         Typical         U       A Typical weight can be computed"
  - "machine_learning/local_weighted_learning/README.md:44:1         Where           U       Where $\\tau$ is the bandwidth"
  - "machine_learning/local_weighted_learning/README.md:44:61        distance        U       that controls $w^i$ distance from x."
  - "machine_learning/local_weighted_learning/README.md:58:20        conclude        U       So, here by we can conclude that the weight fall"
  - "machine_learning/local_weighted_learning/README.md:58:45        fall            U       conclude that the weight fall exponentially as the"
  - "machine_learning/logistic_regression.py:13:1        Helpful         U       Helpful resources:"
  - "machine_learning/logistic_regression.py:14:13       course          U       Coursera ML course"
  - "machine_learning/logistic_regression.py:39:26       approaches      U       The sigmoid function approaches a value of 1 as its"
  - "machine_learning/logistic_regression.py:40:26       Opposite        U       increasing positive. Opposite for negative values"
  - "machine_learning/logistic_regression.py:68:19       quantifies      U       Cost function quantifies the error between predicted"
  - "machine_learning/logistic_regression.py:87:9        estimations     U       >>> estimations = sigmoid_function(np"
  - "machine_learning/logistic_regression.py:146:14      predicting      U       ) # predicting the value of probability"
  - "machine_learning/logistic_regression.py:156:9       contour         U       plt.contour(xx1, xx2, probs, [0"
  - "machine_learning/loss_functions.py:20:15        Predicted           U       - y_pred: Predicted probabilities for class"
  - "machine_learning/loss_functions.py:21:50        instability         U       constant to avoid numerical instability"
  - "machine_learning/loss_functions.py:37:17        clip                U       y_pred = np.clip(y_pred, epsilon, 1"
  - "machine_learning/loss_functions.py:37:55        Clip                U       epsilon, 1 - epsilon) # Clip predictions to avoid"
  - "machine_learning/loss_functions.py:42:12        focal               U       def binary_focal_cross_entropy("
  - "machine_learning/loss_functions.py:50:52        BFCE                U       focal cross-entropy (BFCE) loss between true labels"
  - "machine_learning/loss_functions.py:54:27        variation           U       probabilities. It's a variation of binary cross-entropy"
  - "machine_learning/loss_functions.py:55:5         imbalance           U       imbalance by focusing on hard"
  - "machine_learning/loss_functions.py:55:18        focusing            U       imbalance by focusing on hard examples."
  - "machine_learning/loss_functions.py:57:5         BCFE                U       BCFE = -Σ(alpha * (1 - y"
  - "machine_learning/loss_functions.py:65:14        Focusing            U       - gamma: Focusing parameter for modulating"
  - "machine_learning/loss_functions.py:65:37        modulating          U       Focusing parameter for modulating the loss (default:"
  - "machine_learning/loss_functions.py:66:14        Weighting           U       - alpha: Weighting factor for class 1"
  - "machine_learning/loss_functions.py:85:5         bcfe                U       bcfe_loss = -("
  - "machine_learning/loss_functions.py:93:5         categorical         U       def categorical_cross_entropy("
  - "machine_learning/loss_functions.py:159:57       CFCE                U       focal cross-entropy (CFCE) loss between true"
  - "machine_learning/loss_functions.py:162:20       generalization      U       CFCE loss is a generalization of binary focal cross"
  - "machine_learning/loss_functions.py:172:23       weighting           U       - alpha: Array of weighting factors for each class"
  - "machine_learning/loss_functions.py:246:5        cfce                U       cfce_loss = -np.sum("
  - "machine_learning/loss_functions.py:253:5        hinge               U       def hinge_loss(y_true: np.ndarray"
  - "machine_learning/loss_functions.py:258:5        Hinge               U       Hinge loss = max(0, 1 - true"
  - "machine_learning/loss_functions.py:289:11       losses              U       hinge_losses = np.maximum(0, 1.0"
  - "machine_learning/loss_functions.py:293:5        huber               U       def huber_loss(y_true: np.ndarray"
  - "machine_learning/loss_functions.py:295:24       Huber               U       Calculate the mean Huber loss between the given"
  - "machine_learning/loss_functions.py:297:20       describes           U       The Huber loss describes the penalty incurred"
  - "machine_learning/loss_functions.py:297:42       incurred            U       describes the penalty incurred by an estimation procedure"
  - "machine_learning/loss_functions.py:337:9        measures            U       MSE measures the squared difference"
  - "machine_learning/loss_functions.py:368:68       observed            U       between ground truth (observed)"
  - "machine_learning/loss_functions.py:403:18       logarithmic         U       def mean_squared_logarithmic_error(y_true: np.ndarray"
  - "machine_learning/loss_functions.py:405:51       MSLE                U       squared logarithmic error (MSLE) between ground truth"
  - "machine_learning/loss_functions.py:409:77       skewed              U       useful for dealing with skewed or"
  - "machine_learning/loss_functions.py:443:33       Percentage          U       Calculate the Mean Absolute Percentage Error between y_true"
  - "machine_learning/loss_functions.py:484:5        perplexity          U       def perplexity_loss("
  - "machine_learning/loss_functions.py:490:17       Perplexity          U       Compute the Perplexity which useful in predicting"
  - "machine_learning/loss_functions.py:500:38       sentences           U       Actual label encoded sentences of shape (batch_size"
  - "machine_learning/loss_functions.py:501:76       vocab               U       size, sentence_length, vocab_size)"
  - "machine_learning/loss_functions.py:567:7        Getting             U       # Getting the matrix containing"
  - "machine_learning/loss_functions.py:578:19       Smooth              U       Calculate the Smooth L1 Loss between y_true"
  - "machine_learning/loss_functions.py:593:15       Specifies           U       beta: Specifies the threshold at which"
  - "machine_learning/loss_functions.py:632:5        kullback            U       def kullback_leibler_divergence(y"
  - "machine_learning/loss_functions.py:632:14       leibler             U       def kullback_leibler_divergence(y_true: np"
  - "machine_learning/loss_functions.py:634:19       Kullback            U       Calculate the Kullback-Leibler divergence"
  - "machine_learning/loss_functions.py:634:28       Leibler             U       Calculate the Kullback-Leibler divergence (KL divergence"
  - "machine_learning/loss_functions.py:638:48       generative          U       often used in training generative models."
  - "machine_learning/lstm/lstm_prediction.py:3:22           Recurrent       U       An LSTM is a type of Recurrent Neural Network (RNN"
  - "machine_learning/lstm/lstm_prediction.py:3:56           discussed       U       Neural Network (RNN) as discussed at:"
  - "machine_learning/mfcc.py:2:15           Cepstral            U       Mel Frequency Cepstral Coefficients (MFCC)"
  - "machine_learning/mfcc.py:2:24           Coefficients        U       Mel Frequency Cepstral Coefficients (MFCC) Calculation"
  - "machine_learning/mfcc.py:2:38           MFCC                U       Cepstral Coefficients (MFCC) Calculation"
  - "machine_learning/mfcc.py:6:1            discriminative      U       discriminative way. It is particularly"
  - "machine_learning/mfcc.py:7:38           speaker             U       speech recognition and speaker identification."
  - "machine_learning/mfcc.py:14:29          windowing           U       using a technique like windowing to reduce spectral leakage"
  - "machine_learning/mfcc.py:14:58          leakage             U       windowing to reduce spectral leakage."
  - "machine_learning/mfcc.py:26:8           Filterbank          U       4. Mel Filterbank:"
  - "machine_learning/mfcc.py:27:32          filterbanks         U       a set of triangular filterbanks spaced in the Mel frequency"
  - "machine_learning/mfcc.py:27:44          spaced              U       triangular filterbanks spaced in the Mel frequency"
  - "machine_learning/mfcc.py:28:43          mimic               U       spectrum. These filters mimic the human auditory system"
  - "machine_learning/mfcc.py:28:59          auditory            U       filters mimic the human auditory system's"
  - "machine_learning/mfcc.py:29:31          filterbank          U       frequency response. Each filterbank sums the power spectrum"
  - "machine_learning/mfcc.py:32:4           Logarithmic         U       5. Logarithmic Compression:"
  - "machine_learning/mfcc.py:33:15          logarithm           U       - Take the logarithm (typically base 10)"
  - "machine_learning/mfcc.py:34:44          mimics              U       dynamic range. This step mimics the logarithmic response"
  - "machine_learning/mfcc.py:37:4           Discrete            U       6. Discrete Cosine Transform (DCT"
  - "machine_learning/mfcc.py:37:13          Cosine              U       6. Discrete Cosine Transform (DCT):"
  - "machine_learning/mfcc.py:38:64          energies            U       to the log filterbank energies to"
  - "machine_learning/mfcc.py:39:62          decorrelate         U       transformation helps decorrelate the"
  - "machine_learning/mfcc.py:40:30          captures            U       filterbank energies and captures the most important features"
  - "machine_learning/mfcc.py:43:12          Extraction          U       7. Feature Extraction:"
  - "machine_learning/mfcc.py:45:6           Often               U       Often, the first few coefficients"
  - "machine_learning/mfcc.py:49:40          MFCCs               U       Cepstral Coefficients (MFCCs):"
  - "machine_learning/mfcc.py:51:37          Daniel              U       Language Processing by Daniel Jurafsky & James H."
  - "machine_learning/mfcc.py:51:44          Jurafsky            U       Processing by Daniel Jurafsky & James H. Martin:"
  - "machine_learning/mfcc.py:53:45          tutorial            U       Cepstral Coefficient (MFCC) tutorial"
  - "machine_learning/mfcc.py:55:24          cepstral            U       guide-mel-frequency-cepstral-coefficients-mfccs/"
  - "machine_learning/mfcc.py:55:46          mfccs               U       cepstral-coefficients-mfccs/"
  - "machine_learning/mfcc.py:57:9           Amir                U       Author: Amir Lavasani"
  - "machine_learning/mfcc.py:57:14          Lavasani            U       Author: Amir Lavasani"
  - "machine_learning/mfcc.py:63:14          fftpack             U       import scipy.fftpack as fft"
  - "machine_learning/mfcc.py:69:5           mfcc                U       def mfcc("
  - "machine_learning/mfcc.py:98:74          sine                U       # Generate a 440 Hz sine wave"
  - "machine_learning/mfcc.py:115:11         framed              U       audio_framed = audio_frames("
  - "machine_learning/mfcc.py:119:20         Framed              U       logging.info(f\"Framed audio shape: {audio"
  - "machine_learning/mfcc.py:123:41         Hanning             U       simplicity we will choose the Hanning window."
  - "machine_learning/mfcc.py:124:26         hann                U       window = get_window(\"hann\", ftt_size, fftbins"
  - "machine_learning/mfcc.py:124:43         fftbins             U       window(\"hann\", ftt_size, fftbins=True)"
  - "machine_learning/mfcc.py:125:11         windowed            U       audio_windowed = audio_framed * window"
  - "machine_learning/mfcc.py:127:20         Windowed            U       logging.info(f\"Windowed audio shape: {audio"
  - "machine_learning/mfcc.py:145:28         cosine              U       dct_filters = discrete_cosine_transform(dct_filter"
  - "machine_learning/mfcc.py:146:14         coefficents         U       cepstral_coefficents = np.dot(dct_filters"
  - "machine_learning/mfcc.py:186:39         hopping             U       length: The length of the hopping (default is 20ms)."
  - "machine_learning/mfcc.py:236:7          Transpose           U       # Transpose the audio data to have"
  - "machine_learning/mfcc.py:237:11         transposed          U       audio_transposed = np.transpose(audio"
  - "machine_learning/mfcc.py:270:30         squaring            U       Calculate the power by squaring the absolute values"
  - "machine_learning/mfcc.py:292:17         mels                U       def mel_to_freq(mels: float) -> float:"
  - "machine_learning/mfcc.py:347:5          enorm               U       enorm = 2.0 / (mel_freqs["
  - "machine_learning/mfcc.py:348:34         newaxis             U       filters * enorm[:, np.newaxis]"
  - "machine_learning/mfcc.py:374:11         Linearly            U       # Linearly increase values from"
  - "machine_learning/mfcc.py:412:5          fmin                U       fmin_mel = freq_to_mel(freq"
  - "machine_learning/mfcc.py:413:5          fmax                U       fmax_mel = freq_to_mel(freq"
  - "machine_learning/mfcc.py:418:16         equally             U       # Generate equally spaced mel frequencies"
  - "machine_learning/mfcc.py:436:39         fbank               U       num: The number of the fbank filters."
  - "machine_learning/mfcc.py:467:26         wavfile             U       from scipy.io import wavfile"
  - "machine_learning/multilayer_perceptron_classifier.py:1:14           neural      U       from sklearn.neural_network import MLPClassifier"
  - "machine_learning/multilayer_perceptron_classifier.py:8:13           lbfgs       U       solver=\"lbfgs\", alpha=1e-5, hidden"
  - "machine_learning/polynomial_regression.py:5:29          βₘxᵐ                U       β₁x + β₂x² + ... + βₘxᵐ + ε"
  - "machine_learning/polynomial_regression.py:7:4           treating            U       By treating x, x², ..., xᵐ as distinct"
  - "machine_learning/polynomial_regression.py:15:1          pseudoinverse       U       pseudoinverse of X. In the case of"
  - "machine_learning/polynomial_regression.py:22:20         inverting           U       In OLS estimation, inverting XᵀX to compute X⁺ can"
  - "machine_learning/polynomial_regression.py:22:60         numerically         U       compute X⁺ can be very numerically unstable. This"
  - "machine_learning/polynomial_regression.py:22:72         unstable            U       be very numerically unstable. This"
  - "machine_learning/polynomial_regression.py:23:16         sidesteps           U       implementation sidesteps this need to invert"
  - "machine_learning/polynomial_regression.py:28:7          UΣVᵀ                U       where UΣVᵀ is an SVD of X."
  - "machine_learning/polynomial_regression.py:59:13         Vandermonde         U       the Vandermonde matrix"
  - "machine_learning/polynomial_regression.py:100:19        vander              U       return np.vander(data, N=degree + 1,"
  - "machine_learning/polynomial_regression.py:134:32        grow                U       Make sure errors don't grow too large:"
  - "machine_learning/polynomial_regression.py:135:13        coefs               U       >>> coefs = np.array([-250, 5"
  - "machine_learning/polynomial_regression.py:149:21        pinv                U       # np.linalg.pinv() computes the Moore"
  - "machine_learning/polynomial_regression.py:175:26        Predictor           U       ArithmeticError: Predictor hasn't been fit yet"
  - "machine_learning/polynomial_regression.py:202:32        Efficiency          U       title(\"Predicting Fuel Efficiency Using Polynomial Regression"
  - "machine_learning/scoring_functions.py:4:21          RMSLE               U       MAE, MSE, RMSE, RMSLE are included."
  - "machine_learning/scoring_functions.py:9:42          Sometimes           U       slightly differentiated. Sometimes squared, rooted,"
  - "machine_learning/scoring_functions.py:12:32         perceived           U       log and roots can be perceived as tools for penalizing"
  - "machine_learning/scoring_functions.py:12:55         penalizing          U       perceived as tools for penalizing big"
  - "machine_learning/scoring_functions.py:13:63         situations          U       metrics depends on the situations,"
  - "machine_learning/scoring_functions.py:23:45         decimals            U       mae(predict,actual),decimals = 2))"
  - "machine_learning/scoring_functions.py:84:5          rmsle               U       def rmsle(predict, actual):"
  - "machine_learning/scoring_functions.py:108:13        Deviation           U       # Mean Bias Deviation"
  - "machine_learning/scoring_functions.py:111:42        underpredicts       U       Negative, if the model underpredicts,"
  - "machine_learning/scoring_functions.py:131:5         denumerator         U       denumerator = np.sum(actual) / len"
  - "machine_learning/self_organizing_map.py:9:13        winner          U       def get_winner(self, weights: list"
  - "machine_learning/self_organizing_map.py:11:21       winning         U       Compute the winning vector by Euclidean"
  - "machine_learning/self_organizing_map.py:47:10       organizing      U       self_organizing_map = SelfOrganizingMap"
  - "machine_learning/sequential_minimum_optimization.py:20:14       alphas          U       init_alphas = np.zeros(train.shape"
  - "machine_learning/sequential_minimum_optimization.py:38:35       blobs           U       datasets import make_blobs, make_circles"
  - "machine_learning/sequential_minimum_optimization.py:38:47       circles         U       import make_blobs, make_circles"
  - "machine_learning/sequential_minimum_optimization.py:41:1        CANCER          U       CANCER_DATASET_URL = ("
  - "machine_learning/sequential_minimum_optimization.py:43:6        breast          U       \"breast-cancer-wisconsin/wdbc"
  - "machine_learning/sequential_minimum_optimization.py:43:13       cancer          U       \"breast-cancer-wisconsin/wdbc.data"
  - "machine_learning/sequential_minimum_optimization.py:43:20       wisconsin       U       \"breast-cancer-wisconsin/wdbc.data\""
  - "machine_learning/sequential_minimum_optimization.py:43:30       wdbc            U       breast-cancer-wisconsin/wdbc.data\""
  - "machine_learning/sequential_minimum_optimization.py:161:22      violates        U       # Check if alpha violates the KKT condition"
  - "machine_learning/sequential_minimum_optimization.py:162:16      obey            U       def _check_obey_kkt(self, index):"
  - "machine_learning/sequential_minimum_optimization.py:221:9       loci            U       loci = yield from self._choose"
  - "machine_learning/sequential_minimum_optimization.py:231:82      violate         U       no non-bound samples violate"
  - "machine_learning/sequential_minimum_optimization.py:239:20      Scanning        U       print(\"Scanning all samples!\")"
  - "machine_learning/sequential_minimum_optimization.py:267:35      maximizes       U       Choose alpha2 that maximizes the step size (|E1"
  - "machine_learning/sequential_minimum_optimization.py:291:22      roll            U       for i2 in np.roll(self.unbound, rng.choice"
  - "machine_learning/sequential_minimum_optimization.py:456:62      MSIE            U       Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)\"},"
  - "machine_learning/sequential_minimum_optimization.py:471:17      dropna          U       data = data.dropna(axis=0)"
  - "machine_learning/sequential_minimum_optimization.py:484:5       mysvm           U       mysvm = SmoSVM("
  - "machine_learning/sequential_minimum_optimization.py:502:13      Rough           U       print(f\"Rough Accuracy: {score / test"
  - "machine_learning/sequential_minimum_optimization.py:534:21      hstack          U       train_data = np.hstack((train_y.reshape(50"
  - "machine_learning/sequential_minimum_optimization.py:573:5       density         U       density, and predicted values"
  - "machine_learning/sequential_minimum_optimization.py:581:5       yrange          U       yrange = np.linspace(train"
  - "machine_learning/sequential_minimum_optimization.py:593:12      asmatrix        U       np.asmatrix(grid).T,"
  - "machine_learning/sequential_minimum_optimization.py:604:21      Dark            U       cmap=plt.cm.Dark2,"
  - "machine_learning/similarity_search.py:78:18         shapes          U       2. If data's shapes are different."
  - "machine_learning/similarity_search.py:80:12         expecting       U       We are expecting same shapes of two arrays"
  - "machine_learning/support_vector_machines.py:3:28        Bounds              U       scipy.optimize import Bounds, LinearConstraint, minimize"
  - "machine_learning/support_vector_machines.py:35:9        regularization      U       regularization: constraint for soft"
  - "machine_learning/support_vector_machines.py:35:71       separable           U       margin (data not linearly separable)"
  - "machine_learning/support_vector_machines.py:74:15       sklear              U       # sklear: def_gamma = 1/(n_features"
  - "machine_learning/support_vector_machines.py:87:14       Radial              U       RBF: Radial Basis Function Kernel"
  - "machine_learning/support_vector_machines.py:87:21       Basis               U       RBF: Radial Basis Function Kernel"
  - "machine_learning/support_vector_machines.py:103:9       Fits                U       Fits the SVC with a set of"
  - "machine_learning/support_vector_machines.py:113:17      Wolfe's             U       # using Wolfe's Dual to calculate w"
  - "machine_learning/support_vector_machines.py:114:11      Primal              U       # Primal problem: minimize 1"
  - "machine_learning/support_vector_machines.py:161:38      separation          U       calculating mean offset of separation plane to points"
  - "machine_learning/word_frequency_functions.py:8:31           recommender     U       mining. 83% of text-based recommender systems use"
  - "machine_learning/word_frequency_functions.py:9:35           Layman's        U       for term weighting. In Layman's terms, tf-idf"
  - "machine_learning/word_frequency_functions.py:11:27          corpus          U       is to a document in a corpus (a collection of documents"
  - "machine_learning/word_frequency_functions.py:20:39          frequently      U       number representing how frequently"
  - "machine_learning/word_frequency_functions.py:36:12          originality     U       of the originality of a term. It is mathematical"
  - "machine_learning/xgboost_classifier.py:5:29         Confusion       U       sklearn.metrics import ConfusionMatrixDisplay"
  - "machine_learning/xgboost_classifier.py:27:35        booster         U       XGBClassifier(base_score=0.5, booster='gbtree', callbacks"
  - "machine_learning/xgboost_classifier.py:27:44        gbtree          U       score=0.5, booster='gbtree', callbacks=None,"
  - "machine_learning/xgboost_classifier.py:28:29        bylevel         U       colsample_bylevel=1, colsample_bynode"
  - "machine_learning/xgboost_classifier.py:28:50        bynode          U       bylevel=1, colsample_bynode=1, colsample_bytree"
  - "machine_learning/xgboost_classifier.py:28:70        bytree          U       bynode=1, colsample_bytree=1,"
  - "machine_learning/xgboost_classifier.py:29:25        stopping        U       early_stopping_rounds=None, enable"
  - "machine_learning/xgboost_classifier.py:29:34        rounds          U       early_stopping_rounds=None, enable_categorical"
  - "machine_learning/xgboost_classifier.py:30:70        depthwise       U       id=-1, grow_policy='depthwise',"
  - "machine_learning/xgboost_classifier.py:34:32        monotone        U       missing=nan, monotone_constraints='()', n"
  - "machine_learning/xgboost_classifier.py:49:5         Iris            U       Iris type dataset is used"
  - "machine_learning/xgboost_classifier.py:64:19        confusion       U       # Display the confusion matrix of the classifier"
  - "machine_learning/xgboost_classifier.py:65:33        estimator       U       ConfusionMatrixDisplay.from_estimator("
  - "machine_learning/xgboost_classifier.py:70:15        Blues           U       cmap=\"Blues\","
  - "machine_learning/xgboost_classifier.py:73:46        IRIS            U       Normalized Confusion Matrix - IRIS Dataset\")"
  - "machine_learning/xgboost_regressor.py:3:47          housing     U       import fetch_california_housing"
  - "maths/addition_without_arithmetic.py:3:9            suraj       U       Author: suraj Kumar"
  - "maths/aliquot_sum.py:1:5            aliquot     U       def aliquot_sum(input_num: int)"
  - "maths/aliquot_sum.py:5:47           evenly      U       than n that divide n evenly. For"
  - "maths/allocation_number.py:16:59        allocated       U       partition need to be allocated."
  - "maths/area_under_curve.py:2:1           Approximates    U       Approximates the area under the curve"
  - "maths/area_under_curve.py:2:49          trapezoidal     U       the curve using the trapezoidal rule"
  - "maths/area_under_curve.py:17:5          Treats          U       Treats curve as a collection"
  - "maths/area_under_curve.py:18:5          trapezium       U       trapezium shape they form"
  - "maths/area_under_curve.py:22:31         gauge           U       param steps: an accuracy gauge; more steps increases"
  - "maths/area.py:31:18         cuboid              U       def surface_area_cuboid(length: float, breadth"
  - "maths/area.py:33:37         Cuboid              U       the Surface Area of a Cuboid."
  - "maths/area.py:61:37         Sphere              U       the Surface Area of a Sphere."
  - "maths/area.py:83:18         hemisphere          U       def surface_area_hemisphere(radius: float) -> float"
  - "maths/area.py:85:37         Hemisphere          U       the Surface Area of a Hemisphere."
  - "maths/area.py:106:18        cone                U       def surface_area_cone(radius: float, height"
  - "maths/area.py:108:37        Cone                U       the Surface Area of a Cone."
  - "maths/area.py:138:18        conical             U       def surface_area_conical_frustum("
  - "maths/area.py:138:26        frustum             U       surface_area_conical_frustum("
  - "maths/area.py:142:37        Conical             U       the Surface Area of a Conical Frustum."
  - "maths/area.py:142:45        Frustum             U       Surface Area of a Conical Frustum."
  - "maths/area.py:169:5         slant               U       slant_height = (height**2"
  - "maths/area.py:173:18        cylinder            U       def surface_area_cylinder(radius: float, height"
  - "maths/area.py:175:37        Cylinder            U       the Surface Area of a Cylinder."
  - "maths/area.py:205:18        torus               U       def surface_area_torus(torus_radius: float"
  - "maths/area.py:205:45        tube                U       torus_radius: float, tube_radius: float) -> float"
  - "maths/area.py:206:32        Torus               U       Calculate the Area of a Torus."
  - "maths/area.py:216:71        intersecting        U       support spindle or self intersecting tori"
  - "maths/area.py:216:84        tori                U       or self intersecting tori"
  - "maths/area.py:318:24        Heron's             U       This function uses Heron's formula: https://en"
  - "maths/area.py:363:10        parallelogram       U       def area_parallelogram(base: float, height"
  - "maths/area.py:455:10        ellipse             U       def area_ellipse(radius_x: float, radius"
  - "maths/area.py:485:10        rhombus             U       def area_rhombus(diagonal_1: float, diagonal"
  - "maths/area.py:563:19        Areas               U       print(\"[DEMO] Areas of various geometric"
  - "maths/area.py:568:13        Parallelogram       U       print(f\"Parallelogram: {area_parallelogram"
  - "maths/area.py:569:13        Rhombus             U       print(f\"Rhombus: {area_rhombus(10,"
  - "maths/area.py:570:13        Trapezium           U       print(f\"Trapezium: {area_trapezium(10"
  - "maths/area.py:582:13        Equilateral         U       print(f\"Equilateral Triangle: {area_reg"
  - "maths/area.py:584:13        Reqular             U       print(f\"Reqular Pentagon: {area_reg"
  - "maths/area.py:584:21        Pentagon            U       print(f\"Reqular Pentagon: {area_reg_polygon("
  - "maths/average_absolute_deviation.py:19:21       Makes       U       if not nums: # Makes sure that the list is"
  - "maths/average_mode.py:6:13          tendency            U       central tendency) of the input data."
  - "maths/average_mode.py:8:36          Datastructure       U       list may contain any Datastructure or any Datatype."
  - "maths/average_mode.py:25:22         modes               U       # Gets values of modes"
  - "maths/bailey_borwein_plouffe.py:1:5         bailey              U       def bailey_borwein_plouffe(digit"
  - "maths/bailey_borwein_plouffe.py:1:12        borwein             U       def bailey_borwein_plouffe(digit_position"
  - "maths/bailey_borwein_plouffe.py:1:20        plouffe             U       def bailey_borwein_plouffe(digit_position: int"
  - "maths/bailey_borwein_plouffe.py:3:34        extraction          U       Implement a popular pi-digit-extraction algorithm known as the"
  - "maths/bailey_borwein_plouffe.py:9:15        immediately         U       The digit immediately after the decimal point"
  - "maths/bailey_borwein_plouffe.py:9:54        located             U       the decimal point is located at position 1."
  - "maths/bailey_borwein_plouffe.py:11:21       reduces             U       A higher number reduces the chance of an error"
  - "maths/bailey_borwein_plouffe.py:11:33       chance              U       higher number reduces the chance of an error but increases"
  - "maths/bailey_borwein_plouffe.py:45:18       approximation       U       # compute an approximation of (16 ** (n - 1))"
  - "maths/basic_maths.py:34:15          divisors    U       def number_of_divisors(n: int) -> int:"
  - "maths/basic_maths.py:35:28          Divisors    U       Calculate Number of Divisors of an Integer."
  - "maths/basic_maths.py:99:18          Euler's     U       \"\"\"Calculate Euler's Phi Function."
  - "maths/binary_exponentiation.py:5:17         exponentiation      U       used methods of exponentiation. The method is also"
  - "maths/binary_exponentiation.py:108:17       Modulus             U       ValueError: Modulus must be a positive integer"
  - "maths/binary_multiplication.py:15:25        concerned       U       far as the modulo is concerned,"
  - "maths/binary_multiplication.py:17:24        whichever       U       Now apply RULE 1 or 2, whichever is required."
  - "maths/binary_multiplication.py:19:9         chinmoy         U       @author chinmoy159"
  - "maths/binomial_distribution.py:7:27         successes       U       binomial_distribution(successes: int, trials: int, prob"
  - "maths/binomial_distribution.py:7:43         trials          U       distribution(successes: int, trials: int, prob: float)"
  - "maths/chebyshev_distance.py:1:5         chebyshev       U       def chebyshev_distance(point_a: list"
  - "maths/chebyshev_distance.py:4:5         Chessboard      U       Chessboard distance) between two"
  - "maths/check_polygon.py:21:39        reordered       U       Check numbers are not reordered"
  - "maths/check_polygon.py:26:17        Monogons        U       ValueError: Monogons and Digons are not polygons"
  - "maths/check_polygon.py:26:30        Digons          U       ValueError: Monogons and Digons are not polygons in"
  - "maths/check_polygon.py:26:45        polygons        U       Monogons and Digons are not polygons in the Euclidean space"
  - "maths/chinese_remainder_theorem.py:18:12        Euclid          U       # Extended Euclid"
  - "maths/chinese_remainder_theorem.py:35:31        inverses        U       ExtendedEuclid to find inverses"
  - "maths/chinese_remainder_theorem.py:36:23        theorem         U       def chinese_remainder_theorem(n1: int, r1: int, n"
  - "maths/chinese_remainder_theorem.py:74:22        Inverting       U       Same a above using InvertingModulo"
  - "maths/chudnovsky_algorithm.py:8:14          Ramanujan's     U       based on Ramanujan's PI formulae."
  - "maths/chudnovsky_algorithm.py:12:28         multinomial     U       = constant_term / ((multinomial_term * linear_term)"
  - "maths/chudnovsky_algorithm.py:44:18         prec            U       getcontext().prec = precision"
  - "maths/collatz_sequence.py:2:13          conjecture      U       The Collatz conjecture is a famous unsolved"
  - "maths/collatz_sequence.py:2:36          unsolved        U       conjecture is a famous unsolved problem in mathematics"
  - "maths/collatz_sequence.py:2:56          mathematics     U       unsolved problem in mathematics. Given a starting"
  - "maths/collatz_sequence.py:6:16          claims          U       The conjecture claims that this sequence will"
  - "maths/collatz_sequence.py:8:62          Ulam            U       3n + 1 problem, the Ulam conjecture, Kakutani"
  - "maths/collatz_sequence.py:8:79          Kakutani's      U       the Ulam conjecture, Kakutani's"
  - "maths/collatz_sequence.py:9:14          Thwaites        U       problem, the Thwaites conjecture, Hasse's"
  - "maths/collatz_sequence.py:9:35          Hasse's         U       Thwaites conjecture, Hasse's algorithm, the Syracuse"
  - "maths/collatz_sequence.py:9:58          Syracuse        U       Hasse's algorithm, the Syracuse problem, and the"
  - "maths/collatz_sequence.py:10:1          hailstone       U       hailstone sequence."
  - "maths/collatz_sequence.py:20:5          collatz         U       def collatz_sequence(n: int) ->"
  - "maths/collatz_sequence.py:63:39         took            U       Collatz sequence from {n} took {len(sequence)} steps"
  - "maths/combinations.py:33:67         asked           U       the function is being asked"
  - "maths/combinations.py:46:34         hands           U       number of five-card hands possible from a standard"
  - "maths/combinations.py:47:26         deck            U       f\"fifty-two card deck is: {combinations(5"
  - "maths/combinations.py:51:27         students        U       \"If a class of 40 students must be arranged into"
  - "maths/combinations.py:53:13         arrange         U       \"to arrange them.\\n\","
  - "maths/combinations.py:57:26         competing       U       \"If 10 teams are competing in a Formula One race"
  - "maths/combinations.py:59:29         awarded         U       \"third place can be awarded.\","
  - "maths/continued_fraction.py:11:5        continued       U       def continued_fraction(num: Fraction"
  - "maths/continued_fraction.py:16:11       inaccuracies    U       float inaccuracies."
  - "maths/decimal_isolate.py:9:5            Isolates    U       Isolates the decimal part of"
  - "maths/decimal_to_fraction.py:3:36           simplest    U       decimal number in its simplest fraction form"
  - "maths/dodecahedron.py:1:3           dodecahedron    U       # dodecahedron.py"
  - "maths/dodecahedron.py:5:4           pentagon        U       12 pentagon faces having the same"
  - "maths/double_factorial.py:4:22          costly      U       Recursion can be costly for large numbers."
  - "maths/dual_number_automatic_differentiation.py:15:18        duals               U       self.duals = [1] * rank"
  - "maths/dual_number_automatic_differentiation.py:20:25        dual                U       s = \"+\".join(f\"{dual}E{n}\" for n, dual in"
  - "maths/dual_number_automatic_differentiation.py:56:20        jtem                U       for j, jtem in enumerate(other.duals"
  - "maths/dual_number_automatic_differentiation.py:95:5         differentiate       U       def differentiate(func, position, order"
  - "maths/entropy.py:27:18          Behind              U       >>> text = (\"Behind Winston's back the voice"
  - "maths/entropy.py:27:25          Winston's           U       >>> text = (\"Behind Winston's back the voice \""
  - "maths/entropy.py:28:27          telescreen          U       . \"from the telescreen was still \""
  - "maths/entropy.py:29:18          babbling            U       ... \"babbling and the overfulfilment"
  - "maths/entropy.py:29:35          overfulfilment      U       \"babbling and the overfulfilment\")"
  - "maths/entropy.py:35:22          Ministry            U       >>> text = (\"The Ministry of Truth—Minitrue, in"
  - "maths/entropy.py:35:80          official            U       Newspeak [Newspeak was the official\""
  - "maths/entropy.py:36:26          elegant             U       .. \"face in elegant lettering, the three"
  - "maths/entropy.py:36:34          lettering           U       \"face in elegant lettering, the three\")"
  - "maths/entropy.py:41:22          repulsive           U       >>> text = (\"Had repulsive dashwoods suspicion"
  - "maths/entropy.py:41:32          dashwoods           U       text = (\"Had repulsive dashwoods suspicion sincerity"
  - "maths/entropy.py:41:42          suspicion           U       repulsive dashwoods suspicion sincerity but advantage"
  - "maths/entropy.py:41:52          sincerity           U       dashwoods suspicion sincerity but advantage now him"
  - "maths/entropy.py:42:32          garret              U       \"Remark easily garret nor nay. Civil those"
  - "maths/entropy.py:42:49          Civil               U       easily garret nor nay. Civil those mrs enjoy shy"
  - "maths/entropy.py:42:65          enjoy               U       nay. Civil those mrs enjoy shy fat merry. \""
  - "maths/entropy.py:42:79          merry               U       those mrs enjoy shy fat merry. \""
  - "maths/entropy.py:43:31          jointure            U       \"You greatest jointure saw horrible. He private"
  - "maths/entropy.py:44:27          Fertile             U       . \"suppose. Fertile beloved evident through"
  - "maths/entropy.py:44:35          beloved             U       \"suppose. Fertile beloved evident through no service"
  - "maths/entropy.py:44:43          evident             U       suppose. Fertile beloved evident through no service elderly"
  - "maths/entropy.py:44:70          elderly             U       evident through no service elderly is. Blind \""
  - "maths/entropy.py:44:82          Blind               U       service elderly is. Blind \""
  - "maths/entropy.py:45:47          neglected           U       every no so at. Own neglected you preferred way sincerity"
  - "maths/entropy.py:46:18          delivered           U       ... \"delivered his attempted. To of"
  - "maths/entropy.py:46:32          attempted           U       \"delivered his attempted. To of message cottage"
  - "maths/entropy.py:46:57          cottage             U       attempted. To of message cottage windows do besides"
  - "maths/entropy.py:47:26          uncivil             U       .. \"against uncivil. Delightful unreserved"
  - "maths/entropy.py:47:36          Delightful          U       \"against uncivil. Delightful unreserved impossible"
  - "maths/entropy.py:47:47          unreserved          U       uncivil. Delightful unreserved impossible few estimating"
  - "maths/entropy.py:47:58          impossible          U       Delightful unreserved impossible few estimating \""
  - "maths/entropy.py:47:73          estimating          U       unreserved impossible few estimating \""
  - "maths/entropy.py:48:22          favourable          U       ... \"men favourable see entreaties. She"
  - "maths/entropy.py:48:37          entreaties          U       \"men favourable see entreaties. She propriety immediate"
  - "maths/entropy.py:48:53          propriety           U       see entreaties. She propriety immediate was improving"
  - "maths/entropy.py:49:24          entrance            U       ... \"He or entrance humoured likewise moderate"
  - "maths/entropy.py:49:33          humoured            U       \"He or entrance humoured likewise moderate. Much"
  - "maths/entropy.py:49:42          likewise            U       or entrance humoured likewise moderate. Much nor game"
  - "maths/entropy.py:49:61          Much                U       humoured likewise moderate. Much nor game son say \""
  - "maths/entropy.py:50:78          prevailed           U       gate. Me we offending prevailed \""
  - "maths/euclidean_distance.py:44:9        Benchmarks      U       Benchmarks"
  - "maths/eulers_totient.py:2:5         totient     U       def totient(n: int) -> list:"
  - "maths/eulers_totient.py:19:5        totients    U       totients = [i - 1 for i in range"
  - "maths/extended_euclidean_algorithm.py:5:41          Bezout's        U       bn = gcd(m, n) (a.k.a Bezout's Identity)"
  - "maths/extended_euclidean_algorithm.py:10:23         silentcat       U       @Author: S. Sharma <silentcat>"
  - "maths/extended_euclidean_algorithm.py:13:24         pikulet         U       Last modified by: pikulet"
  - "maths/extended_euclidean_algorithm.py:65:12         correction      U       # sign correction for negative numbers"
  - "maths/factors.py:16:5           facs    U       facs: list[int] = []"
  - "maths/fast_inverse_sqrt.py:2:48         Quake       U       /sqrt(x)) using the Quake III algorithm."
  - "maths/fermat_little_theorem.py:1:39         Fermat's        U       to show the usage of Fermat's little theorem in a"
  - "maths/fermat_little_theorem.py:2:3          According       U       # According to Fermat's little theorem"
  - "maths/fibonacci.py:3:26         Binet's         U       a simplified form of Binet's formula"
  - "maths/fibonacci.py:6:42         Binet           U       function because the Binet formula function uses"
  - "maths/fibonacci.py:28:5         Times           U       Times the execution of a function"
  - "maths/fibonacci.py:186:29       recursuive      U       Cache must be outside recursuive function"
  - "maths/fibonacci.py:201:9        binet           U       def fib_binet(n: int) -> list[int"
  - "maths/fibonacci.py:211:5        thereafter      U       thereafter due to the size limitations"
  - "maths/fibonacci.py:324:36       Fastest         U       an M1 MacBook Pro -- Fastest to slowest"
  - "maths/fibonacci.py:324:47       slowest         U       MacBook Pro -- Fastest to slowest"
  - "maths/gamma.py:15:12        integrate       U       from scipy.integrate import quad"
  - "maths/gamma.py:15:29        quad            U       scipy.integrate import quad"
  - "maths/gamma.py:47:17        integrand       U       return quad(integrand, 0, inf, args=(num)"
  - "maths/gcd_of_n_numbers.py:100:5         mult    U       mult = 1"
  - "maths/geometric_mean.py:36:7        Frequently      U       # Frequently they are restricted"
  - "maths/geometric_mean.py:36:27       restricted      U       Frequently they are restricted to being positive."
  - "maths/germain_primes.py:2:3         Sophie      U       A Sophie Germain prime is any"
  - "maths/germain_primes.py:7:1         Their       U       Their corresponding safe primes"
  - "maths/germain_primes.py:14:8        germain     U       def is_germain_prime(number: int)"
  - "maths/greatest_common_divisor.py:6:68           divisibility    U       b) by definition of divisibility"
  - "maths/interquartile_range.py:3:1            dispersion      U       dispersion, which is the spread"
  - "maths/interquartile_range.py:7:8            inspired        U       Script inspired by this Wikipedia article"
  - "maths/jaccard_similarity.py:8:20        Massive         U       the book Mining of Massive Datasets [MMDS 2nd Edition"
  - "maths/jaccard_similarity.py:8:38        MMDS            U       of Massive Datasets [MMDS 2nd Edition, Chapter"
  - "maths/jaccard_similarity.py:17:5        jaccard         U       def jaccard_similarity("
  - "maths/jaccard_similarity.py:24:5        Essentially     U       Essentially, its intersection over"
  - "maths/joint_probability_distribution.py:2:11        joint       U       Calculate joint probability distribution"
  - "maths/josephus_problem.py:2:34          theoretical     U       problem is a famous theoretical problem related to a"
  - "maths/josephus_problem.py:7:18          standing        U       - num_people are standing in a circle."
  - "maths/josephus_problem.py:11:16         continues       U       - The counting continues until only one person"
  - "maths/josephus_problem.py:18:5          josephus        U       def josephus_recursive(num_people"
  - "maths/josephus_problem.py:106:61        eliminating     U       steps to take before eliminating someone."
  - "maths/juggler_sequence.py:11:12         Akshay      U       # Author : Akshay Dubey (https://github"
  - "maths/juggler_sequence.py:11:19         Dubey       U       # Author : Akshay Dubey (https://github.com"
  - "maths/juggler_sequence.py:15:5          juggler     U       def juggler_sequence(number: int"
  - "maths/karatsuba.py:4:5          karatsuba       U       def karatsuba(a: int, b: int) -> int"
  - "maths/kth_lexicographic_permutation.py:3:16         lexicographic       U       Finds k'th lexicographic permutation (in increasing"
  - "maths/kth_lexicographic_permutation.py:17:7         Factorails          U       # Factorails from 1! to (n-1)!"
  - "maths/kth_lexicographic_permutation.py:18:5         factorials          U       factorials = [1]"
  - "maths/largest_of_very_large_numbers.py:1:11         Abhijeeth       U       # Author: Abhijeeth S"
  - "maths/largest_of_very_large_numbers.py:8:5          Reduces         U       Reduces large number to a more"
  - "maths/largest_of_very_large_numbers.py:8:36         manageable      U       large number to a more manageable number"
  - "maths/liouville_lambda.py:3:32          denoted         U       Liouville Lambda function, denoted by λ(n)"
  - "maths/liouville_lambda.py:14:5          liouville       U       def liouville_lambda(number: int)"
  - "maths/lucas_lehmer_primality_test.py:2:50           primality       U       Lehmer test (LLT) is a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:2:69           Mersenne        U       a primality test for Mersenne"
  - "maths/lucas_lehmer_primality_test.py:10:1           Great           U       Great Internet Mersenne Prime"
  - "maths/lucas_lehmer_primality_test.py:10:39          GIMPS           U       Mersenne Prime Search (GIMPS) to locate large primes"
  - "maths/lucas_lehmer_primality_test.py:16:5           lucas           U       def lucas_lehmer_test(p: int)"
  - "maths/lucas_lehmer_primality_test.py:16:11          lehmer          U       def lucas_lehmer_test(p: int) -> bool"
  - "maths/maclaurin_series.py:8:5           maclaurin       U       def maclaurin_sin(theta: float, accuracy"
  - "maths/manhattan_distance.py:3:5         Expectts    U       Expectts two list of numbers"
  - "maths/manhattan_distance.py:81:28       liner       U       manhattan_distance_one_liner(point_a: list, point"
  - "maths/matrix_exponentiation.py:6:54         recurrences     U       technique to solve linear recurrences in logarithmic time"
  - "maths/matrix_exponentiation.py:57:7         Trivial         U       # Trivial Cases"
  - "maths/max_sum_sliding_window.py:6:52        loops       U       technique' where the nested loops can be converted to"
  - "maths/minkowski_distance.py:1:5         minkowski       U       def minkowski_distance("
  - "maths/minkowski_distance.py:9:28        degenerates     U       the Minkowski distance degenerates to the Manhattan distance"
  - "maths/minkowski_distance.py:15:21       inaccurate      U       function may be inaccurate."
  - "maths/mobius_function.py:12:5           mobius      U       def mobius(n: int) -> int:"
  - "maths/modular_division.py:12:55         modn                U       0≤x≤n-1, and b/a=x(modn) (that is, b=ax(modn"
  - "maths/modular_division.py:15:13         multiplicative      U       a has a multiplicative inverse modulo n iff"
  - "maths/modular_division.py:134:9         mutually            U       mutually prime, or co-prime if"
  - "maths/monte_carlo_dice.py:7:9           SIDES       U       NUM_SIDES = 6"
  - "maths/monte_carlo_dice.py:10:29         sided       U       \"\"\"Initialize a six sided dice\"\"\""
  - "maths/monte_carlo_dice.py:10:35         dice        U       Initialize a six sided dice\"\"\""
  - "maths/monte_carlo_dice.py:17:20         throws      U       def throw_dice(num_throws: int, num_dice: int"
  - "maths/monte_carlo_dice.py:19:55         throwing    U       all possible sums when throwing dice."
  - "maths/monte_carlo_dice.py:33:5          dices       U       dices = [Dice() for i in range"
  - "maths/monte_carlo.py:2:10           Matteo          U       @author: MatteoRaso"
  - "maths/monte_carlo.py:2:16           Raso            U       @author: MatteoRaso"
  - "maths/monte_carlo.py:14:26          centred         U       . Draw a 2x2 square centred at (0,0)."
  - "maths/monte_carlo.py:15:8           Inscribe        U       2. Inscribe a circle within the"
  - "maths/monte_carlo.py:23:40          lands           U       function to see if a dot lands in the circle."
  - "maths/monte_carlo.py:30:25          guesses         U       # The proportion of guesses that landed in the circle"
  - "maths/monte_carlo.py:30:38          landed          U       proportion of guesses that landed in the circle"
  - "maths/monte_carlo.py:50:44          valued          U       variable non-negative real-valued continuous function"
  - "maths/monte_carlo.py:59:12          Repeatedly      U       a. Repeatedly draw x from uniform"
  - "maths/monte_carlo.py:62:8           Estimated       U       4. Estimated value of integral ="
  - "maths/monte_carlo.py:96:13          Estimating      U       print(f\"Estimating area under y=x where"
  - "maths/numerical_analysis/adams_bashforth.py:2:42        Ordinary    U       Bashforth methods to solve Ordinary Differential Equations"
  - "maths/numerical_analysis/adams_bashforth.py:5:10        Ravi        U       Author : Ravi Kumar"
  - "maths/numerical_analysis/adams_bashforth.py:24:36       nodal       U       Solution of y at each nodal point"
  - "maths/numerical_analysis/bisection_2.py:4:22        algebraic           U       Here f(x) represents algebraic or transcendental equation"
  - "maths/numerical_analysis/bisection_2.py:4:35        transcendental      U       represents algebraic or transcendental equation."
  - "maths/numerical_analysis/bisection_2.py:27:5        bisection           U       def bisection(a: float, b: float)"
  - "maths/numerical_analysis/bisection_2.py:38:7        Bolzano             U       # Bolzano theory in order to find"
  - "maths/numerical_analysis/bisection_2.py:49:11       Decide              U       # Decide the side to repeat the"
  - "maths/numerical_analysis/bisection.py:6:51          bolzano     U       becomes 0 in [a,b] using bolzano"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:7:31          Thomas              U       approximation proposed by Thomas Simpson in 1743 is one"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:12:1          simpson             U       simpson_integration() takes"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:26:20         Approximation       U       Summary of Simpson Approximation :"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:28:4          simpsons            U       By simpsons integration :"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:29:19         fxdx                U       1. integration of fxdx with limit a to b is"
  - "maths/numerical_analysis/integration_by_simpson_approx.py:46:35         approximated        U       result : the value of the approximated integration of function"
  - "maths/numerical_analysis/nevilles_method.py:3:7         Neville's       U       using Neville's method."
  - "maths/numerical_analysis/nevilles_method.py:12:5        neville         U       def neville_interpolate(x_points"
  - "maths/numerical_analysis/nevilles_method.py:19:63       Neville         U       approximated value and the Neville iterations"
  - "maths/numerical_analysis/newton_forward_interpolation.py:8:5            ucal    U       def ucal(u: float, p: int) -"
  - "maths/numerical_analysis/newton_raphson.py:3:1          approximates    U       approximates a root of a given real"
  - "maths/numerical_analysis/newton_raphson.py:35:5         newton          U       def newton_raphson("
  - "maths/numerical_analysis/newton_raphson.py:35:12        raphson         U       def newton_raphson("
  - "maths/numerical_analysis/newton_raphson.py:75:27        converging      U       ZeroDivisionError: No converging solution found, zero"
  - "maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:5        runge       U       def runge_kutta_fehlberg_45("
  - "maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:11       kutta       U       def runge_kutta_fehlberg_45("
  - "maths/numerical_analysis/runge_kutta_fehlberg_45.py:10:17       fehlberg    U       def runge_kutta_fehlberg_45("
  - "maths/numerical_analysis/runge_kutta_gills.py:2:21          Gill's      U       Use the Runge-Kutta-Gill's method of order 4 to"
  - "maths/numerical_analysis/runge_kutta_gills.py:14:17         gills       U       def runge_kutta_gills("
  - "maths/numerical_analysis/secant_method.py:3:9           dimgrichr       U       Author: dimgrichr"
  - "maths/numerical_analysis/secant_method.py:17:5          secant          U       def secant_method(lower_bound:"
  - "maths/numerical_analysis/simpson_rule.py:2:26           quadrature      U       Numerical integration or quadrature for a smooth function"
  - "maths/numerical_analysis/simpson_rule.py:4:20           classical       U       This method is the classical approach of summing"
  - "maths/numerical_analysis/simpson_rule.py:4:51           Equally         U       approach of summing 'Equally Spaced Abscissas'"
  - "maths/numerical_analysis/simpson_rule.py:4:59           Spaced          U       of summing 'Equally Spaced Abscissas'"
  - "maths/numerical_analysis/simpson_rule.py:4:66           Abscissas       U       summing 'Equally Spaced Abscissas'"
  - "maths/numerical_analysis/simpson_rule.py:16:57          Simpson's       U       of a function using Simpson's Rule."
  - "maths/numerical_analysis/square_root.py:25:36       Newton's    U       root approximated using Newton's method."
  - "maths/perfect_number.py:6:5         Excluding       U       Excluding 6, the sum(divisors"
  - "maths/persistence.py:1:20           persistence     U       def multiplicative_persistence(num: int) -> int:"
  - "maths/pi_generator.py:4:5           Leibniz         U       Leibniz Formula for Pi"
  - "maths/pi_generator.py:7:5           Leibniz's       U       Leibniz's formula converges extremely"
  - "maths/pi_generator.py:7:23          converges       U       Leibniz's formula converges extremely slowly: it"
  - "maths/pi_generator.py:9:5           Convergence     U       Convergence (https://en.wikipedia"
  - "maths/pi_generator.py:11:22         prove           U       We cannot try to prove against an interrupted"
  - "maths/pi_generator.py:11:52         uncompleted     U       against an interrupted, uncompleted generation."
  - "maths/pi_monte_carlo_estimation.py:24:27        simulations     U       estimate_pi(number_of_simulations: int) -> float:"
  - "maths/points_are_collinear_3d.py:21:43          orthogonal      U       an infinite number of orthogonal vectors."
  - "maths/points_are_collinear_3d.py:84:70          collinearity    U       that represents the collinearity ratio."
  - "maths/pollard_rho.py:6:5            pollard             U       def pollard_rho("
  - "maths/pollard_rho.py:13:9           Pollard's           U       Use Pollard's Rho algorithm to return"
  - "maths/pollard_rho.py:14:62          factorization       U       and require further factorization."
  - "maths/pollard_rho.py:42:17          struggles           U       # algorithm struggles to find factors that"
  - "maths/pollard_rho.py:43:12          workaround          U       # As a workaround, we specifically check"
  - "maths/pollard_rho.py:53:32          suggested           U       this reason, Pollard suggested using ``f(x) = (x**"
  - "maths/pollard_rho.py:56:15          retries             U       # To make retries easier, we will instead"
  - "maths/pollard_rho.py:78:9           tortoise            U       tortoise = seed"
  - "maths/pollard_rho.py:79:9           hare                U       hare = seed"
  - "maths/pollard_rho.py:99:19          Unfortunately       U       # Unfortunately, the divisor is ``num"
  - "maths/pollard_rho.py:112:26         hare's              U       # We can use the hare's position as the new"
  - "maths/pollard_rho.py:113:33         Richard             U       This is actually what Richard Brent's the \"optimized"
  - "maths/pollard_rho.py:113:41         Brent's             U       actually what Richard Brent's the \"optimized\" variant"
  - "maths/pollard_rho.py:116:66         incremented         U       function can just be incremented."
  - "maths/pollard_rho.py:122:15         unlucky             U       # We were unlucky or ``num`` itself is"
  - "maths/polynomial_evaluation.py:18:5         horner      U       def horner(poly: Sequence[float"
  - "maths/polynomial_evaluation.py:19:55        Horner's    U       specified point using Horner's method."
  - "maths/polynomials/single_indeterminate_operations.py:3:33           indeterminate       U       implements a single indeterminate polynomials class"
  - "maths/polynomials/single_indeterminate_operations.py:92:9           Evaluates           U       Evaluates the polynomial at x"
  - "maths/prime_check.py:50:50          multiples       U       all even numbers, all multiples of 3 are not primes"
  - "maths/prime_sieve_eratosthenes.py:15:17         eratosthenes    U       def prime_sieve_eratosthenes(num: int) -> list[int"
  - "maths/primelib.py:36:1          goldbach        U       goldbach(number) // Goldbach"
  - "maths/primelib.py:36:22         Goldbach's      U       goldbach(number) // Goldbach's assumption"
  - "maths/primelib.py:36:33         assumption      U       number) // Goldbach's assumption"
  - "maths/primelib.py:101:14        erathostenes    U       sieve of erathostenes."
  - "maths/primelib.py:497:18        captured        U       done = [] # captured numbers int both 'primeFac"
  - "maths/primelib.py:680:74        Divisiors       U       Error in function getDivisiors(...)\""
  - "maths/primelib.py:721:7         summed          U       # summed all divisors up to"
  - "maths/qr_decomposition.py:4:8           householder         U       def qr_householder(a: np.ndarray):"
  - "maths/qr_decomposition.py:5:56          Householder         U       of the matrix A using Householder reflection."
  - "maths/qr_decomposition.py:7:26          decomposes          U       The QR-decomposition decomposes the matrix A of shape"
  - "maths/qr_decomposition.py:10:15         decomposing         U       method of decomposing A uses the Householder"
  - "maths/qr_decomposition.py:18:19         optimizations       U       Note: several optimizations can be made for numeric"
  - "maths/qr_decomposition.py:21:18         BLAS                U       version from BLAS should be used."
  - "maths/radix2_fft.py:2:38        radix           U       Multiplication using radix-2 fast Fourier Transform"
  - "maths/radix2_fft.py:20:43       fourier         U       compute the discrete fourier transform (DFT) of A"
  - "maths/radix2_fft.py:22:62       similarly       U       the DFT of A*B, we can similarly"
  - "maths/radix2_fft.py:87:14       ncol            U       next_ncol = self.c_max_length"
  - "maths/radix2_fft.py:113:9       inverce         U       inverce_c = [[dft_a[i] * dft"
  - "maths/series/geometric_series.py:27:9           ration      U       ration with first term with"
  - "maths/series/hexagonal_numbers.py:2:3           hexagonal       U       A hexagonal number sequence is a"
  - "maths/series/hexagonal_numbers.py:2:46          figurate        U       sequence is a sequence of figurate numbers"
  - "maths/series/hexagonal_numbers.py:5:1           hexagons        U       hexagons with sides up to n dots"
  - "maths/series/hexagonal_numbers.py:5:57          overlaid        U       when the hexagons are overlaid"
  - "maths/sieve_of_eratosthenes.py:2:10         Eratosthones    U       Sieve of Eratosthones"
  - "maths/sieve_of_eratosthenes.py:6:1          Illustration    U       Illustration:"
  - "maths/sieve_of_eratosthenes.py:10:19        Bruno           U       doctest provider: Bruno Simas Hadlich (https"
  - "maths/sieve_of_eratosthenes.py:10:25        Simas           U       doctest provider: Bruno Simas Hadlich (https://github"
  - "maths/sieve_of_eratosthenes.py:10:31        Hadlich         U       provider: Bruno Simas Hadlich (https://github.com"
  - "maths/sieve_of_eratosthenes.py:11:6         thanks          U       Also thanks to Dmitry (https://github"
  - "maths/sieve_of_eratosthenes.py:11:16        Dmitry          U       Also thanks to Dmitry (https://github.com"
  - "maths/signum.py:6:5         signum      U       def signum(num: float) -> int:"
  - "maths/simultaneous_linear_equation_solver.py:4:23           simultaneous    U       This algorithm solves simultaneous linear equations of"
  - "maths/simultaneous_linear_equation_solver.py:101:5          useable         U       useable_form = data_set.copy"
  - "maths/sin.py:7:21           randians        U       Where: x = angle in randians."
  - "maths/sin.py:58:19          Increased       U       a += 2 # Increased by 2 for every term"
  - "maths/sock_merchant.py:4:10         merchant    U       def sock_merchant(colors: list[int])"
  - "maths/softmax.py:4:68           normalizes      U       K real numbers, and normalizes"
  - "maths/softmax.py:6:8            exponentials    U       to the exponentials of the input numbers"
  - "maths/softmax.py:29:59          mitigate        U       We need to ceil to mitigate for"
  - "maths/solovay_strassen_primality_test.py:4:55           criterion       U       is based on Euler's criterion. It is similar"
  - "maths/solovay_strassen_primality_test.py:5:39           residues        U       test but uses quadratic residues. It can quickly identify"
  - "maths/solovay_strassen_primality_test.py:6:27           occasionally    U       composite numbers but may occasionally classify composite numbers"
  - "maths/solovay_strassen_primality_test.py:18:12          Legendre        U       of the Legendre symbol, which can be"
  - "maths/solovay_strassen_primality_test.py:21:15          residue         U       quadratic residue modulo a given modulus"
  - "maths/solovay_strassen_primality_test.py:64:5           solovay         U       def solovay_strassen(number: int"
  - "maths/spearman_rank_correlation_coefficient.py:18:5         ranked          U       ranked_data = sorted((value"
  - "maths/spearman_rank_correlation_coefficient.py:27:15        spearman        U       def calculate_spearman_rank_correlation("
  - "maths/spearman_rank_correlation_coefficient.py:31:16        Spearman's      U       Calculates Spearman's rank correlation coefficient"
  - "maths/special_numbers/armstrong_numbers.py:7:35         Narcissistic    U       numbers are also called Narcissistic numbers and Pluperfect"
  - "maths/special_numbers/armstrong_numbers.py:7:60         Pluperfect      U       Narcissistic numbers and Pluperfect numbers."
  - "maths/special_numbers/armstrong_numbers.py:9:9          Encyclopedia    U       On-Line Encyclopedia of Integer Sequences"
  - "maths/special_numbers/armstrong_numbers.py:12:1         PASSING         U       PASSING = (1, 153, 370, 371"
  - "maths/special_numbers/armstrong_numbers.py:13:1         FAILING         U       FAILING: tuple = (-153, -1,"
  - "maths/special_numbers/armstrong_numbers.py:16:5         armstrong       U       def armstrong_number(n: int) -> bool"
  - "maths/special_numbers/armstrong_numbers.py:34:7         Dividing        U       # Dividing number into separate"
  - "maths/special_numbers/armstrong_numbers.py:43:5         pluperfect      U       def pluperfect_number(n: int) -> bool"
  - "maths/special_numbers/armstrong_numbers.py:70:5         narcissistic    U       def narcissistic_number(n: int) -> bool"
  - "maths/special_numbers/armstrong_numbers.py:80:5         expo            U       expo = len(str(n)) # the"
  - "maths/special_numbers/automorphic_number.py:14:8        automorphic     U       def is_automorphic_number(number: int)"
  - "maths/special_numbers/carmichael_number.py:35:8         carmichael      U       def is_carmichael_number(n: int) -> bool"
  - "maths/special_numbers/happy_number.py:1:8           happy           U       def is_happy_number(number: int)"
  - "maths/special_numbers/happy_number.py:6:44          happiness       U       number to check for happiness."
  - "maths/special_numbers/harshad_numbers.py:2:3            harshad     U       A harshad number (or more specifically"
  - "maths/special_numbers/krishnamurthy_number.py:3:21          Peterson            U       It is also known as Peterson Number"
  - "maths/special_numbers/krishnamurthy_number.py:26:5          krishnamurthy       U       def krishnamurthy(number: int) -> bool"
  - "maths/special_numbers/krishnamurthy_number.py:45:51         Krisnamurthy        U       whether a number is a Krisnamurthy Number or not.\")"
  - "maths/special_numbers/polygonal_numbers.py:3:33         gonal       U       the `num`th `sides`-gonal number. It is assumed"
  - "maths/special_numbers/pronic_number.py:3:28         Proic       U       number n is said to be a Proic number if"
  - "maths/special_numbers/pronic_number.py:13:8         pronic      U       def is_pronic(number: int) -> bool"
  - "maths/special_numbers/proth_number.py:10:5          proth       U       def proth(number: int) -> int"
  - "maths/special_numbers/proth_number.py:46:9          Hence       U       Hence, we have a +2 in the"
  - "maths/special_numbers/ugly_numbers.py:3:58          ugly            U       shows the first 11 ugly numbers. By convention"
  - "maths/special_numbers/ugly_numbers.py:3:75          convention      U       11 ugly numbers. By convention,"
  - "maths/special_numbers/weird_number.py:4:22          weird       U       Fun fact: The set of weird numbers has positive"
  - "maths/special_numbers/weird_number.py:32:5          abundant    U       def abundant(n: int) -> bool:"
  - "maths/sum_of_arithmetic_series.py:1:7           Coder       U       # DarkCoder"
  - "maths/sumset.py:15:32       Sylvester's     U       return: the nth number in Sylvester's sequence"
  - "maths/sylvester_sequence.py:11:5        sylvester       U       def sylvester(number: int) -> int"
  - "maths/tanh.py:2:52          tangent         U       implementation of the tangent hyperbolic"
  - "maths/tanh.py:2:60          hyperbolic      U       implementation of the tangent hyperbolic"
  - "maths/test_prime_check.py:2:1           Minimalist      U       Minimalist file that allows pytest"
  - "maths/twin_prime.py:14:5        twin    U       def twin_prime(number: int)"
  - "maths/two_sum.py:37:9           compl       U       compl = target - val"
  - "maths/volume.py:60:9        spheres         U       def vol_spheres_intersect("
  - "maths/volume.py:66:51       caps            U       composed by two spherical caps and therefore its volume"
  - "maths/volume.py:81:66       smallers        U       returns the volume of the smallers sphere"
  - "maths/volume.py:234:15      circ            U       def vol_right_circ_cone(radius: float,"
  - "maths/volume.py:261:9       prism           U       def vol_prism(area_of_base: float"
  - "maths/volume.py:263:33      Prism           U       Calculate the Volume of a Prism."
  - "maths/volume.py:290:9       pyramid         U       def vol_pyramid(area_of_base: float"
  - "maths/volume.py:292:33      Pyramid         U       Calculate the Volume of a Pyramid."
  - "maths/volume.py:341:35      cubed           U       is 4/3 * pi * radius cubed"
  - "maths/volume.py:402:9       hollow          U       def vol_hollow_circular_cylinder("
  - "maths/volume.py:406:31      Hollow          U       Calculate the Volume of a Hollow Circular Cylinder."
  - "maths/volume.py:513:9       icosahedron     U       def vol_icosahedron(tri_side: float) ->"
  - "maths/volume.py:515:34      Icosahedron     U       Calculate the Volume of an Icosahedron."
  - "maths/volume.py:544:44      Calculations    U       Results of Various Volume Calculations.\"\"\""
  - "maths/volume.py:557:13      Spherical       U       print(f\"Spherical cap: {vol_spherical"
  - "maths/volume.py:558:13      Spheres         U       print(f\"Spheres intersetion: {vol_spheres"
  - "maths/volume.py:558:21      intersetion     U       print(f\"Spheres intersetion: {vol_spheres_intersect"
  - "maths/zellers_congruence.py:5:5         zeller          U       def zeller(date_input: str) ->"
  - "maths/zellers_congruence.py:8:47        Gregorian       U       week for nearly any Gregorian or Julian calendar date"
  - "maths/zellers_congruence.py:8:60        Julian          U       nearly any Gregorian or Julian calendar date"
  - "maths/zellers_congruence.py:77:15       Monday          U       \"1\": \"Monday\","
  - "maths/zellers_congruence.py:78:15       Tuesday         U       \"2\": \"Tuesday\","
  - "maths/zellers_congruence.py:79:15       Wednesday       U       \"3\": \"Wednesday\","
  - "maths/zellers_congruence.py:80:15       Thursday        U       \"4\": \"Thursday\","
  - "maths/zellers_congruence.py:81:15       Friday          U       \"5\": \"Friday\","
  - "maths/zellers_congruence.py:82:15       Saturday        U       \"6\": \"Saturday\","
  - "matrix/binary_search_matrix.py:3:19         carries     U       This function carries out Binary search on"
  - "matrix/count_islands_in_matrix.py:1:6           island          U       # An island in matrix is a group"
  - "matrix/count_islands_in_matrix.py:1:44          areas           U       is a group of linked areas, all having the same"
  - "matrix/count_islands_in_matrix.py:2:30          islands         U       code counts number of islands in a given matrix, with"
  - "matrix/count_islands_in_matrix.py:20:9          diffs           U       def diffs(self, i: int, j: int"
  - "matrix/count_islands_in_matrix.py:22:50         Coordinate      U       , 0, 0, 1, 1, 1] # Coordinate order"
  - "matrix/count_paths.py:29:27         inaccessible    U       represents a block (inaccessible)"
  - "matrix/cramers_rule_2x2.py:5:5          cramers         U       def cramers_rule_2x2(equation1:"
  - "matrix/cramers_rule_2x2.py:28:38        Consistent      U       Infinite solutions. (Consistent system)"
  - "matrix/cramers_rule_2x2.py:32:31        Inconsistent    U       ValueError: No solution. (Inconsistent system)"
  - "matrix/cramers_rule_2x2.py:65:21        determinants    U       # Calculate the determinants of the matrices"
  - "matrix/cramers_rule_2x2.py:70:69        Cramer's        U       has a solution (using Cramer's rule)"
  - "matrix/inverse_of_matrix.py:91:57       Sarrus      U       of the matrix using Sarrus rule"
  - "matrix/inverse_of_matrix.py:141:42      Adjoint     U       the cofactor matrix (Adjoint matrix)"
  - "matrix/inverse_of_matrix.py:142:9       adjoint     U       adjoint_matrix = array(cofactor"
  - "matrix/largest_square_area_in_matrix.py:46:44       approch     U       area_in_matrix_top_down_approch("
  - "matrix/largest_square_area_in_matrix.py:53:8        aren't      U       We aren't using dp_array here"
  - "matrix/matrix_based_game.py:4:50        players         U       matrix-based game where players interact with a grid"
  - "matrix/matrix_based_game.py:5:23        goals           U       elements. The primary goals are to:"
  - "matrix/matrix_based_game.py:7:47        simulating      U       adjust the matrix by simulating gravity, and reorganize"
  - "matrix/matrix_based_game.py:7:71        reorganize      U       simulating gravity, and reorganize empty"
  - "matrix/matrix_based_game.py:15:14       Simulates       U       3. `move_x`: Simulates gravity in a column"
  - "matrix/matrix_based_game.py:16:14       Reorganizes     U       4. `move_y`: Reorganizes the matrix by shifting"
  - "matrix/matrix_based_game.py:16:57       leftward        U       by shifting columns leftward when a column becomes"
  - "matrix/matrix_based_game.py:22:35       specifying      U       size (`lines`): Integer specifying the size of the matrix"
  - "matrix/matrix_based_game.py:23:31       Rows            U       content (`matrix`): Rows of the matrix, each"
  - "matrix/matrix_based_game.py:24:22       movs            U       . Number of moves (`movs`): Integer indicating"
  - "matrix/matrix_based_game.py:33:1        RRBG            U       RRBG"
  - "matrix/matrix_based_game.py:34:1        RBBG            U       RBBG"
  - "matrix/matrix_based_game.py:35:1        YYGG            U       YYGG"
  - "matrix/matrix_based_game.py:36:1        XYGG            U       XYGG"
  - "matrix/matrix_based_game.py:48:51       prompted        U       the required inputs as prompted."
  - "matrix/matrix_class.py:33:5         Squareness          U       Squareness and invertability are"
  - "matrix/matrix_class.py:33:20        invertability       U       Squareness and invertability are represented as bool"
  - "matrix/matrix_class.py:36:19        invertable          U       >>> matrix.is_invertable()"
  - "matrix/matrix_class.py:39:15        Minors              U       Identity, Minors, Cofactors and Adjugate"
  - "matrix/matrix_class.py:39:23        Cofactors           U       Identity, Minors, Cofactors and Adjugate are returned"
  - "matrix/matrix_class.py:39:37        Adjugate            U       Minors, Cofactors and Adjugate are returned as Matrices"
  - "matrix/matrix_class.py:54:22        adjugate            U       >>> print(matrix.adjugate())"
  - "matrix/matrix_class.py:63:5         Determinant         U       Determinant is an int, float, or"
  - "matrix/matrix_class.py:67:5         Negation            U       Negation, scalar multiplication"
  - "matrix/matrix_class.py:130:7        MATRIX              U       # MATRIX INFORMATION"
  - "matrix/matrix_class.py:248:14       MANIPULATION        U       # MATRIX MANIPULATION"
  - "matrix/matrix_class.py:310:31       Subtraction         U       raise ValueError(\"Subtraction requires matrices of"
  - "matrix/matrix_equalization.py:4:11          equalization    U       def array_equalization(vector: list[int], step"
  - "matrix/matrix_equalization.py:6:20          equalizes       U       This algorithm equalizes all elements of the"
  - "matrix/matrix_multiplication_recursion.py:11:46         currenttly      U       list[int]] # psf/black currenttly fails on this line"
  - "matrix/matrix_multiplication_recursion.py:158:20        Multiplying     U       print(\"Multiplying:\")"
  - "matrix/matrix_multiplication_recursion.py:179:5         mytimeit        U       mytimeit = partial(timeit, globals"
  - "matrix/matrix_operation.py:179:36       broadcast       U       operands could not be broadcast together with shape"
  - "matrix/max_area_of_island.py:3:19           directionally       U       land) connected 4-directionally (horizontal or vertical"
  - "matrix/max_area_of_island.py:4:17           surrounded          U       of the grid are surrounded by water. The area"
  - "matrix/max_area_of_island.py:68:19          Maximizing          U       # Maximizing the area"
  - "matrix/max_area_of_island.py:83:5           Directions          U       Directions are [(x, y+1), (x, y"
  - "matrix/pascal_triangle.py:3:13          havingva        U       The element havingva row index of r and column"
  - "matrix/pascal_triangle.py:3:66          derivedvas      U       column index of c can be derivedvas follows:"
  - "matrix/rotate_matrix.py:3:2         counterclockwise    U       (counterclockwise)"
  - "matrix/rotate_matrix.py:4:1         Discussion          U       Discussion in stackoverflow:"
  - "matrix/sherman_morrison.py:59:33        indicies (indices)      U       method Matrix.validate_indicies>"
  - "matrix/sherman_morrison.py:203:9        sherman                 U       def sherman_morrison(self, u: Matrix"
  - "matrix/sherman_morrison.py:214:13       ainv                    U       >>> ainv = Matrix(3, 3, 0)"
  - "matrix/spiral_print.py:2:34         spiral          U       print the matrix in spiral form."
  - "matrix/spiral_print.py:56:11        horizotal       U       # horizotal printing increasing"
  - "matrix/spiral_print.py:79:9         Easy            U       # Other Easy to understand Approach"
  - "matrix/spiral_print.py:92:29        matrix's        U       Step 2. Now perform matrix's Transpose operation"
  - "matrix/spiral_print.py:95:27        hits            U       base case hits."
  - "matrix/tests/test_matrix_operation.py:4:62          Additional      U       the following line in \"Additional Arguments\" for"
  - "matrix/tests/test_matrix_operation.py:18:40         matop           U       matrix_operation as matop"
  - "matrix/tests/test_matrix_operation.py:46:9          theo            U       theo = matop.add(mat1, mat"
  - "matrix/tests/test_matrix_operation.py:84:58         meets           U       multiplication.__name__} meets dim requirements\")"
  - "matrix/validate_sudoku_board.py:24:5        SQUARES         U       NUM_SQUARES = 9"
  - "matrix/validate_sudoku_board.py:31:32       unsolvable      U       board may be valid but unsolvable."
  - "networking_flow/ford_fulkerson.py:7:20          augmenting      U       (2) Choose the augmenting path from source to"
  - "networking_flow/ford_fulkerson.py:58:10         fulkerson       U       def ford_fulkerson(graph: list, source"
  - "networking_flow/ford_fulkerson.py:62:5          CAUTION         U       CAUTION: This function changes"
  - "neural_network/activation_functions/binary_step.py:4:42         neuron          U       function in which the neuron is activated if the"
  - "neural_network/activation_functions/binary_step.py:5:18         deactivated     U       or 0, else it is deactivated"
  - "neural_network/activation_functions/exponential_linear_unit.py:23:10        Mathematically      U       Mathematically, f(x) = x, x>0 else"
  - "neural_network/activation_functions/gaussian_error_linear_unit.py:6:29          GELU            U       Gaussian Error Linear Unit (GELU) is a high-performing"
  - "neural_network/activation_functions/gaussian_error_linear_unit.py:18:5          Mathematical    U       Mathematical function sigmoid takes"
  - "neural_network/activation_functions/gaussian_error_linear_unit.py:36:9          gelu            U       gelu_vec (np.ndarray): The"
  - "neural_network/activation_functions/leaky_rectified_linear_unit.py:4:51         vanishing       U       addresses the problem of the vanishing gradient."
  - "neural_network/activation_functions/leaky_rectified_linear_unit.py:12:5         leaky           U       def leaky_rectified_linear_unit"
  - "neural_network/activation_functions/leaky_rectified_linear_unit.py:12:11        rectified       U       def leaky_rectified_linear_unit(vector:"
  - "neural_network/activation_functions/mish.py:4:11        Improved    U       Use Case: Improved version of the ReLU"
  - "neural_network/activation_functions/mish.py:14:5        mish        U       def mish(vector: np.ndarray)"
  - "neural_network/activation_functions/rectified_linear_unit.py:36:55          maxima      U       return element-wise maxima."
  - "neural_network/activation_functions/scaled_exponential_linear_unit.py:2:50          SELU            U       Exponential Linear Unit or SELU function."
  - "neural_network/activation_functions/scaled_exponential_linear_unit.py:6:16          normalizing     U       SELU is a self-normalizing activation function"
  - "neural_network/activation_functions/soboleva_modified_hyperbolic_tangent.py:14:5        soboleva    U       def soboleva_modified_hyperbolic"
  - "neural_network/activation_functions/soboleva_modified_hyperbolic_tangent.py:28:54       SMHT        U       array after applying SMHT function"
  - "neural_network/activation_functions/squareplus.py:12:5          squareplus      U       def squareplus(vector: np.ndarray,"
  - "neural_network/activation_functions/squareplus.py:18:35         curved          U       float): size of the curved region"
  - "neural_network/activation_functions/swish.py:3:4            swish           U       or swish function."
  - "neural_network/activation_functions/swish.py:9:1            Extensive       U       Extensive experiments shows that"
  - "neural_network/activation_functions/swish.py:9:64           outperforms     U       consistently matches or outperforms ReLU"
  - "neural_network/activation_functions/swish.py:10:31          variety         U       networks applied to a variety of challenging domains"
  - "neural_network/activation_functions/swish.py:10:42          challenging     U       applied to a variety of challenging domains such as"
  - "neural_network/activation_functions/swish.py:53:31          trainable       U       vector: np.ndarray, trainable_parameter: int) -> np"
  - "neural_network/back_propagation_neural_network.py:15:9          Stephen     U       Author: Stephen Lee"
  - "neural_network/back_propagation_neural_network.py:41:49         paras       U       rate: learning rate for paras"
  - "neural_network/back_propagation_neural_network.py:69:35         xdata       U       forward_propagation(self, xdata):"
  - "neural_network/back_propagation_neural_network.py:99:7          BPNN        U       class BPNN:"
  - "neural_network/back_propagation_neural_network.py:126:28        ydata       U       def train(self, xdata, ydata, train_round, accuracy"
  - "neural_network/back_propagation_neural_network.py:130:22        hlines      U       self.ax_loss.hlines(self.accuracy, 0, self"
  - "neural_network/convolution_neural_network.py:3:53           Recognizing     U       Neural Network For Photo Recognizing"
  - "neural_network/convolution_neural_network.py:4:1            Goal            U       Goal - - Recognize Handwriting"
  - "neural_network/convolution_neural_network.py:43:19          thre            U       self.rate_thre = rate_t"
  - "neural_network/convolution_neural_network.py:109:9          convolute       U       def convolute(self, data, convs, w"
  - "neural_network/convolution_neural_network.py:109:31         convs           U       convolute(self, data, convs, w_convs, thre_convs"
  - "neural_network/convolution_neural_network.py:148:14         pooled          U       size_pooled = int(size_map / size"
  - "neural_network/convolution_neural_network.py:213:25         datas           U       self, patterns, datas_train, datas_teach,"
  - "neural_network/convolution_neural_network.py:213:44         teach           U       datas_train, datas_teach, n_repeat, error_accuracy"
  - "neural_network/convolution_neural_network.py:217:29         Train           U       print((\" - - Shape: Train_Data \", np.shape(datas"
  - "neural_network/convolution_neural_network.py:218:29         Teach           U       print((\" - - Shape: Teach_Data \", np.shape(datas"
  - "neural_network/convolution_neural_network.py:229:35         conved          U       data_focus1, data_conved1 = self.convolute("
  - "neural_network/convolution_neural_network.py:251:39         Leaning         U       --------------Model Leaning -------------------"
  - "neural_network/convolution_neural_network.py:299:13         yplot           U       yplot = [error_accuracy for"
  - "neural_network/convolution_neural_network.py:340:42         convoluting     U       data of image after convoluting process so we can check"
  - "neural_network/input_data.py:1:46           Rights          U       TensorFlow Authors. All Rights Reserved."
  - "neural_network/input_data.py:3:3            Licensed        U       # Licensed under the Apache License"
  - "neural_network/input_data.py:9:22           applicable      U       Unless required by applicable law or agreed to in"
  - "neural_network/input_data.py:9:40           agreed          U       by applicable law or agreed to in writing, software"
  - "neural_network/input_data.py:10:62          BASIS           U       distributed on an \"AS IS\" BASIS,"
  - "neural_network/input_data.py:11:67          implied         U       KIND, either express or implied."
  - "neural_network/input_data.py:12:45          governing       U       the specific language governing permissions and"
  - "neural_network/input_data.py:27:40          gfile           U       python.platform import gfile"
  - "neural_network/input_data.py:37:3           CVDF            U       # CVDF mirror of http://yann"
  - "neural_network/input_data.py:60:12          Extracting      U       print(\"Extracting\", f.name)"
  - "neural_network/input_data.py:75:45          tensors         U       Please use tf.one_hot on tensors.\")"
  - "neural_network/input_data.py:77:34          scalars         U       Convert class labels from scalars to one-hot vectors."
  - "neural_network/input_data.py:98:26          bystream        U       ValueError: If the bystream doesn't start with"
  - "neural_network/input_data.py:144:29         inages          U       fake_data: Ignore inages and labels, use fake"
  - "neural_network/simple_neural_network.py:46:27       miss    U       # How much did we miss?"
  - "neural_network/two_hidden_layers_neural_network.py:3:60         Backpropagation     U       ddeeplearning.com/chap2.html (Backpropagation)"
  - "neural_network/two_hidden_layers_neural_network.py:14:23        initializes         U       This function initializes the TwoHiddenLayerNeuralNetwo"
  - "neural_network/two_hidden_layers_neural_network.py:100:9        Updation            U       Updation is done using derivative"
  - "neural_network/two_hidden_layers_neural_network.py:100:46       sogmoid             U       using derivative of sogmoid activation function"
  - "neural_network/two_hidden_layers_neural_network.py:159:22       feedforwarding      U       Performs the feedforwarding and back propagation"
  - "neural_network/two_hidden_layers_neural_network.py:255:5        respected           U       respected methods for the desired"
  - "other/alternative_list_arrange.py:3:16          arranges    U       The method arranges two lists as one list"
  - "other/bankers_algorithm.py:1:34         Banker's            U       implementation of the Banker's Algorithm in Operating"
  - "other/bankers_algorithm.py:1:56         Operating           U       Banker's Algorithm in Operating Systems using"
  - "other/bankers_algorithm.py:4:13         Biney               U       # \"Author: \"Biney Kingsley (bluedistro"
  - "other/bankers_algorithm.py:4:19         Kingsley            U       # \"Author: \"Biney Kingsley (bluedistro@github.io"
  - "other/bankers_algorithm.py:8:62         avoidance           U       allocation and deadlock avoidance algorithm"
  - "other/bankers_algorithm.py:9:14         Edsger              U       developed by Edsger Dijkstra that tests"
  - "other/bankers_algorithm.py:10:1         predetermined       U       predetermined maximum possible amounts"
  - "other/bankers_algorithm.py:12:8         deciding            U       before deciding whether allocation should"
  - "other/bankers_algorithm.py:15:12        Rosetta             U       | [Credit] Rosetta Code C implementation"
  - "other/bankers_algorithm.py:15:42        helped              U       Code C implementation helped very much."
  - "other/bankers_algorithm.py:105:9        Utilize             U       Utilize various methods in this"
  - "other/bankers_algorithm.py:110:18       Allocated           U       Allocated Resource Table"
  - "other/bankers_algorithm.py:182:40       freed               U       # update available/freed resources stack"
  - "other/bankers_algorithm.py:194:48       Aborting            U       System in unsafe state. Aborting...\\n\")"
  - "other/davis_putnam_logemann_loveland.py:4:33        DPLL                U       Putnam-Logemann-Loveland (DPLL) algorithm is a complete"
  - "other/davis_putnam_logemann_loveland.py:5:35        satisfiability      U       algorithm for deciding the satisfiability of propositional logic"
  - "other/davis_putnam_logemann_loveland.py:5:53        propositional       U       the satisfiability of propositional logic formulae in"
  - "other/davis_putnam_logemann_loveland.py:6:1         conjunctive         U       conjunctive normal form, i.e, for"
  - "other/davis_putnam_logemann_loveland.py:6:47        Conjunctive         U       i.e, for solving the Conjunctive Normal Form SATisfiability"
  - "other/davis_putnam_logemann_loveland.py:6:73        Tisfiability        U       Conjunctive Normal Form SATisfiability"
  - "other/davis_putnam_logemann_loveland.py:18:7        Clause              U       class Clause:"
  - "other/davis_putnam_logemann_loveland.py:20:9        clause              U       | A clause represented in Conjunctive"
  - "other/davis_putnam_logemann_loveland.py:21:45       complemented        U       of literals, either complemented or otherwise."
  - "other/davis_putnam_logemann_loveland.py:85:22       disjunction         U       4. Compute disjunction of all values assigned"
  - "other/davis_putnam_logemann_loveland.py:102:29      clauses             U       formula is a set of clauses."
  - "other/davis_putnam_logemann_loveland.py:109:57      themselves          U       clauses and the clauses themselves."
  - "other/davis_putnam_logemann_loveland.py:160:23      uncomplemented      U       | A symbol is the uncomplemented form of a literal."
  - "other/davis_putnam_logemann_loveland.py:285:5       dpll                U       def dpll_algorithm("
  - "other/doomsday.py:4:1           DOOMSDAY        U       DOOMSDAY_LEAP = [4, 1, 7, 4,"
  - "other/doomsday.py:4:10          LEAP            U       DOOMSDAY_LEAP = [4, 1, 7, 4, 2, 6"
  - "other/doomsday.py:42:5          centurian       U       centurian = year % 100"
  - "other/doomsday.py:44:5          dooms           U       dooms_day = ("
  - "other/fischer_yates_shuffle.py:13:12        yates       U       def fisher_yates_shuffle(data: list)"
  - "other/gauss_easter.py:9:11          easter          U       def gauss_easter(year: int) -> datetime"
  - "other/gauss_easter.py:25:5          metonic         U       metonic_cycle = year % 19"
  - "other/gauss_easter.py:26:5          julian          U       julian_leap_year = year %"
  - "other/gauss_easter.py:26:12         leap            U       julian_leap_year = year % 4"
  - "other/gauss_easter.py:28:14         inhibits        U       leap_day_inhibits = math.floor(year /"
  - "other/gauss_easter.py:29:5          lunar           U       lunar_orbit_correction = math"
  - "other/gauss_easter.py:29:11         orbit           U       lunar_orbit_correction = math.floor"
  - "other/gauss_easter.py:30:14         reinstall       U       leap_day_reinstall_number = leap_day_inhibits"
  - "other/gauss_easter.py:31:5          secular         U       secular_moon_shift = ("
  - "other/gauss_easter.py:36:27         March           U       days to be added to March 21"
  - "other/gauss_easter.py:39:14         Paschal         U       # PHM -> Paschal Full Moon"
  - "other/gauss_easter.py:59:9          tense           U       tense = \"will be\" if year"
  - "other/gauss_easter.py:60:17         Easter          U       print(f\"Easter in {year} {tense} {gauss"
  - "other/graham_scan.py:6:23           graham          U       python3 -m doctest -v graham_scan.py"
  - "other/graham_scan.py:19:7           Direction       U       class Direction(Enum):"
  - "other/graham_scan.py:28:11          comparer        U       def angle_comparer(point: tuple[int, int"
  - "other/graham_scan.py:28:44          minx            U       point: tuple[int, int], minx: int, miny: int) ->"
  - "other/graham_scan.py:28:55          miny            U       int, int], minx: int, miny: int) -> float:"
  - "other/graham_scan.py:29:25          toward          U       \"\"\"Return the angle toward to point from (minx"
  - "other/graham_scan.py:46:23          accorgind       U       # sort the points accorgind to the angle from the"
  - "other/graham_scan.py:97:35          hell            U       The points on convex hell."
  - "other/graham_scan.py:119:5          minidx          U       minidx = 0"
  - "other/graham_scan.py:132:65         preparing       U       point from points for preparing for sort"
  - "other/greedy.py:44:37       Coca        U       \"Burger\", \"Pizza\", \"Coca Cola\", \"Rice\","
  - "other/greedy.py:44:42       Cola        U       Burger\", \"Pizza\", \"Coca Cola\", \"Rice\","
  - "other/greedy.py:45:18       Sambhar     U       ... \"Sambhar\", \"Chicken\", \"Fries"
  - "other/greedy.py:45:29       Chicken     U       \"Sambhar\", \"Chicken\", \"Fries\", \"Milk\"]"
  - "other/greedy.py:45:40       Fries       U       Sambhar\", \"Chicken\", \"Fries\", \"Milk\"]"
  - "other/greedy.py:45:49       Milk        U       Chicken\", \"Fries\", \"Milk\"]"
  - "other/guess_the_number_search.py:4:55           guessed     U       and higher of number guessed"
  - "other/h_index.py:3:28           citations       U       an array of integers citations where citations[i] is"
  - "other/h_index.py:4:13           researcher      U       citations a researcher received for their ith"
  - "other/h_index.py:5:1            researcher's    U       researcher's h-index."
  - "other/h_index.py:7:56           scientist       U       index on Wikipedia: A scientist has an"
  - "other/least_recently_used.py:12:59          Caching     U       Recently Used (LRU) Caching."
  - "other/least_recently_used.py:53:26          recently    U       Remove the least recently used key if the store"
  - "other/lfu_cache.py:133:9        Moves           U       Moves node forward to maintain"
  - "other/lfu_cache.py:166:67       stand           U       data. Can be used as a stand-alone object"
  - "other/lfu_cache.py:185:23       misses          U       CacheInfo(hits=3, misses=2, capacity=2, current"
  - "other/lfu_cache.py:265:47       assertions      U       to type checker via assertions"
  - "other/lfu_cache.py:290:9        Decorated       U       Decorated function must be function"
  - "other/linear_congruential_generator.py:1:22         Carryer     U       _author__ = \"Tobias Carryer\""
  - "other/magicdiamondpattern.py:1:33           diamond     U       program for generating diamond pattern in Python 3"
  - "other/majority_vote_algorithm.py:2:9            Booyer      U       This is Booyer-Moore Majority Vote"
  - "other/maximum_subsequence.py:5:40           amongst     U       maximum possible sum amongst all non - empty subsequences"
  - "other/nested_brackets.py:45:32          bowl        U       balanced(\"Life is a bowl of cherries.\")"
  - "other/nested_brackets.py:45:40          cherries    U       balanced(\"Life is a bowl of cherries.\")"
  - "other/number_container_system.py:173:11         Simply      U       # Simply return the 0th index"
  - "other/password.py:26:9          incl            U       # chars_incl= characters that must"
  - "other/password.py:29:33         boot            U       Password Generator = full boot with random_number,"
  - "other/password.py:47:19         generalised     U       # random is a generalised function for letters"
  - "other/password.py:60:29         Hwea            U       is_strong_password('Hwea7$2!')"
  - "other/password.py:66:38         udfhiaf         U       strong_password('Hello1238udfhiaf038fajdvjjf!jaiuFhkqi"
  - "other/password.py:66:48         fajdvjjf        U       'Hello1238udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/password.py:66:57         jaiu            U       8udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/password.py:66:61         Fhkqi           U       udfhiaf038fajdvjjf!jaiuFhkqi1')"
  - "other/password.py:93:24         thinking        U       print(\"[If you are thinking of using this password"
  - "other/quine.py:6:3          quine           U       A quine is a computer program"
  - "other/quine.py:7:37         disregarding    U       as its only output (disregarding this docstring and the"
  - "other/quine.py:7:73         shebang         U       this docstring and the shebang)."
  - "other/scoring_algorithm.py:2:17         markmelnic      U       | developed by: markmelnic"
  - "other/scoring_algorithm.py:5:34         percentual      U       using a range based percentual proximity algorithm"
  - "other/scoring_algorithm.py:5:45         proximity       U       range based percentual proximity algorithm"
  - "other/scoring_algorithm.py:7:11         principle       U       The basic principle is that all values supplied"
  - "other/scoring_algorithm.py:11:21        vehicles        U       Example for data of vehicles"
  - "other/scoring_algorithm.py:14:11        mileage         U       price|mileage|registration_year"
  - "other/scoring_algorithm.py:20:13        vehicle         U       We want the vehicle with the lowest price"
  - "other/scoring_algorithm.py:21:20        newest          U       lowest mileage but newest registration year."
  - "other/scoring_algorithm.py:50:9         dlist           U       for dlist, weight in zip(data"
  - "other/scoring_algorithm.py:52:9         maxd            U       maxd = max(dlist)"
  - "other/scoring_algorithm.py:90:9         slist           U       for slist in score_lists:"
  - "other/scoring_algorithm.py:97:5         procentual      U       def procentual_proximity("
  - "other/sdes.py:36:11         sbox            U       def apply_sbox(s, data):"
  - "other/sdes.py:96:29         decypting       U       print(\"Plain text after decypting is:\", PT)"
  - "other/tower_of_hanoi.py:1:29        pole    U       move_tower(height, from_pole, to_pole, with_pole"
  - "other/word_search.py:11:26          randonly        U       can be made dynamic by randonly selecting a certain"
  - "other/word_search.py:13:9           fits            U       # count fits within the matrix size"
  - "other/word_search.py:14:34          fish            U       cat\", \"dog\", \"snake\", \"fish\"]"
  - "other/word_search.py:60:49          overwritten     U       column that will be overwritten"
  - "other/word_search.py:337:78         forcing         U       that is used when brute forcing"
  - "other/word_search.py:351:5          Graphically     U       Graphically displays the word search"
  - "physics/altitude_pressure.py:2:19           altitude        U       Title : Calculate altitude using Pressure"
  - "physics/altitude_pressure.py:5:57           Barometric      U       proximates the altitude using Barometric formula"
  - "physics/altitude_pressure.py:14:53          Pascals         U       reference .Pressure is in Pascals"
  - "physics/altitude_pressure.py:39:17          Atmospheric     U       ValueError: Atmospheric Pressure can not be"
  - "physics/archimedes_principle_of_buoyant_force.py:2:15           buoyant             U       Calculate the buoyant force of any body completely"
  - "physics/archimedes_principle_of_buoyant_force.py:2:65           submerged           U       completely or partially submerged in a static"
  - "physics/archimedes_principle_of_buoyant_force.py:3:1            fluid               U       fluid. This principle was"
  - "physics/archimedes_principle_of_buoyant_force.py:11:3           Acceleration        U       # Acceleration Constant on Earth (unit"
  - "physics/archimedes_principle_of_buoyant_force.py:15:5           archimedes          U       def archimedes_principle("
  - "physics/archimedes_principle_of_buoyant_force.py:21:34          liquid              U       volume: volume of object/liquid being displaced by the"
  - "physics/archimedes_principle_of_buoyant_force.py:21:47          displaced           U       object/liquid being displaced by the object (m^3)"
  - "physics/archimedes_principle_of_buoyant_force.py:22:45          Gravitational       U       Acceleration from gravity. Gravitational force on the system"
  - "physics/archimedes_principle_of_buoyant_force.py:36:17          Impossible          U       ValueError: Impossible object volume"
  - "physics/basic_orbital_capture.py:2:37           radii               U       functions will return the radii of impact for a target"
  - "physics/basic_orbital_capture.py:3:56           sectional           U       it's effective cross sectional area sigma."
  - "physics/basic_orbital_capture.py:4:20           projectile          U       That is to say any projectile with velocity v passing"
  - "physics/basic_orbital_capture.py:5:32           derivation          U       object with mass M. The derivation of which is given at"
  - "physics/basic_orbital_capture.py:9:50           Astronomers         U       R_capture>R_target. Astronomers refer to the effective"
  - "physics/basic_orbital_capture.py:27:58          kilograms           U       central body SI units: kilograms | kg"
  - "physics/basic_orbital_capture.py:70:35          orbital             U       radius: The radius of orbital capture and impact for"
  - "physics/basic_orbital_capture.py:99:1           Derivation          U       Derivation:"
  - "physics/basic_orbital_capture.py:102:34         instant             U       radius of projectile at instant 0 to CM of target"
  - "physics/basic_orbital_capture.py:107:19         projectile's        U       (1)At time=0 the projectile's energy falling from"
  - "physics/basic_orbital_capture.py:107:39         falling             U       projectile's energy falling from infinity| E=K+U"
  - "physics/basic_orbital_capture.py:111:26         momentum            U       at time=0 the angular momentum of the projectile relative"
  - "physics/basic_orbital_capture.py:116:65         kinetic             U       approach will be its kinetic energy"
  - "physics/basic_orbital_capture.py:117:29         gravitational       U       closest approach plus gravitational potential energy(-(GMm"
  - "physics/basic_orbital_capture.py:127:10         conservation        U       (5)Using conservation of angular momentum"
  - "physics/basic_orbital_capture.py:136:10         plugs               U       (c) b plugs int a|"
  - "physics/basic_orbital_capture.py:173:28         Fall                U       Problem Set 3 #8 c.Fall_2017|Honors Astronomy"
  - "physics/basic_orbital_capture.py:173:38         Honors              U       Set 3 #8 c.Fall_2017|Honors Astronomy|Professor"
  - "physics/basic_orbital_capture.py:173:45         Astronomy           U       c.Fall_2017|Honors Astronomy|Professor Rachel Bezanson"
  - "physics/basic_orbital_capture.py:173:55         Professor           U       17|Honors Astronomy|Professor Rachel Bezanson"
  - "physics/basic_orbital_capture.py:173:65         Rachel              U       Astronomy|Professor Rachel Bezanson"
  - "physics/basic_orbital_capture.py:173:72         Bezanson            U       Astronomy|Professor Rachel Bezanson"
  - "physics/basic_orbital_capture.py:176:16         Planetary           U       8.8 Planetary Rendezvous: Pg.368"
  - "physics/basic_orbital_capture.py:176:26         Rendezvous          U       8.8 Planetary Rendezvous: Pg.368"
  - "physics/casimir_effect.py:3:15          plates              U       of one of the plates or distance between"
  - "physics/casimir_effect.py:6:18          quantum             U       Description : In quantum field theory, the Casimir"
  - "physics/casimir_effect.py:7:1           acting              U       acting on the macroscopic boundaries"
  - "physics/casimir_effect.py:7:15          macroscopic         U       acting on the macroscopic boundaries of a confined"
  - "physics/casimir_effect.py:7:43          confined            U       macroscopic boundaries of a confined space which arises from"
  - "physics/casimir_effect.py:8:9           fluctuations        U       quantum fluctuations of the field. It is"
  - "physics/casimir_effect.py:8:59          exerted             U       is a physical force exerted between separate"
  - "physics/casimir_effect.py:9:71          particles           U       nor the exchange of particles,"
  - "physics/casimir_effect.py:10:23         resonance           U       but instead is due to resonance of all-pervasive energy"
  - "physics/casimir_effect.py:10:40         pervasive           U       to resonance of all-pervasive energy fields in the"
  - "physics/casimir_effect.py:10:71         intervening         U       energy fields in the intervening"
  - "physics/casimir_effect.py:11:60         falls               U       strength of the force falls off rapidly with"
  - "physics/casimir_effect.py:11:70         rapidly             U       the force falls off rapidly with"
  - "physics/casimir_effect.py:12:21         measurable          U       distance it is only measurable when the distance between"
  - "physics/casimir_effect.py:13:13         submicron           U       small. On a submicron scale, this force becomes"
  - "physics/casimir_effect.py:14:24         uncharged           U       dominant force between uncharged conductors."
  - "physics/casimir_effect.py:14:34         conductors          U       force between uncharged conductors."
  - "physics/casimir_effect.py:16:7          physicist           U       Dutch physicist Hendrik B. G. Casimir"
  - "physics/casimir_effect.py:16:17         Hendrik             U       Dutch physicist Hendrik B. G. Casimir first"
  - "physics/casimir_effect.py:17:8          formulated          U       and he formulated an experiment to detect"
  - "physics/casimir_effect.py:17:22         experiment          U       and he formulated an experiment to detect it in 194"
  - "physics/casimir_effect.py:17:60         participating       U       detect it in 1948 while participating in research"
  - "physics/casimir_effect.py:19:10         metal               U       parallel metal plates in a vacuum,"
  - "physics/casimir_effect.py:19:28         vacuum              U       parallel metal plates in a vacuum, and successfully demonstrate"
  - "physics/casimir_effect.py:22:25         idealized           U       Casimir force F for idealized, perfectly conducting"
  - "physics/casimir_effect.py:22:36         perfectly           U       force F for idealized, perfectly conducting plates of"
  - "physics/casimir_effect.py:22:46         conducting          U       idealized, perfectly conducting plates of surface area"
  - "physics/casimir_effect.py:23:52         apart               U       distance of a meter apart with vacuum between"
  - "physics/casimir_effect.py:26:9          Reduced             U       F = - ((Reduced Planck Constant ℏ)"
  - "physics/casimir_effect.py:26:17         Planck              U       F = - ((Reduced Planck Constant ℏ) * c * Pi"
  - "physics/casimir_effect.py:34:20         Polder              U       - Casimir, H. B. ; Polder, D. (1948) \"The Influence"
  - "physics/casimir_effect.py:34:43         Influence           U       Polder, D. (1948) \"The Influence of Retardation on the"
  - "physics/casimir_effect.py:34:56         Retardation         U       ) \"The Influence of Retardation on the"
  - "physics/casimir_effect.py:35:18         Waals               U       London-van der Waals Forces\", Physical Review"
  - "physics/casimir_effect.py:35:24         Forces              U       London-van der Waals Forces\", Physical Review, vol"
  - "physics/casimir_effect.py:35:33         Physical            U       van der Waals Forces\", Physical Review, vol. 73, Issue"
  - "physics/casimir_effect.py:44:1          REDUCED             U       REDUCED_PLANCK_CONSTANT = 1"
  - "physics/casimir_effect.py:44:9          PLANCK              U       REDUCED_PLANCK_CONSTANT = 1.054571"
  - "physics/casimir_effect.py:49:5          casimir             U       def casimir_force(force: float,"
  - "physics/casimir_effect.py:55:34         plate               U       Surface area of each plate : magnitude in square"
  - "physics/casimir_effect.py:57:59         Meters              U       plates : distance in Meters"
  - "physics/casimir_effect.py:87:17         Magnitude           U       ValueError: Magnitude of force can not be"
  - "physics/center_of_mass.py:3:15          masses          U       positions and masses."
  - "physics/center_of_mass.py:8:11          barycenter      U       to as the barycenter or balance point) is"
  - "physics/center_of_mass.py:10:48         acceleration    U       applied to cause a linear acceleration without an angular"
  - "physics/center_of_mass.py:13:17         mechanics       U       Calculations in mechanics are often simplified"
  - "physics/center_of_mass.py:14:25         hypothetical    U       center of mass. It is a hypothetical point where the entire"
  - "physics/center_of_mass.py:15:15         concentrated    U       assumed to be concentrated to visualize its motion"
  - "physics/center_of_mass.py:16:8          particle        U       is the particle equivalent of a given"
  - "physics/center_of_mass.py:30:1          Particle        U       Particle = namedtuple(\"Particle"
  - "physics/centripetal_force.py:3:1            curvilinear     U       curvilinear motion directed towards"
  - "physics/centripetal_force.py:6:13           centripetal     U       The unit of centripetal force is newton."
  - "physics/centripetal_force.py:9:27           displacement    U       direction of the object's displacement. Using Newton's second"
  - "physics/centripetal_force.py:11:34          acts            U       circular path always acts towards the centre of"
  - "physics/centripetal_force.py:13:5           tangential      U       and tangential velocity (in meters"
  - "physics/centripetal_force.py:14:41          doubling        U       that implies that on doubling the tangential velocity"
  - "physics/centripetal_force.py:15:31          quadrupled      U       centripetal force will be quadrupled. Mathematically it is"
  - "physics/coulombs_law.py:12:35       bodies      U       between two charged bodies (m)"
  - "physics/coulombs_law.py:18:5        coulombs    U       def coulombs_law(q1: float, q2: float"
  - "physics/doppler_frequency.py:2:1            Doppler's       U       Doppler's effect"
  - "physics/doppler_frequency.py:5:16           observer        U       relation to an observer who is moving relative"
  - "physics/doppler_frequency.py:7:24           pitch           U       shift is the change of pitch heard when a vehicle"
  - "physics/doppler_frequency.py:7:30           heard           U       the change of pitch heard when a vehicle sounding"
  - "physics/doppler_frequency.py:7:51           sounding        U       heard when a vehicle sounding a horn approaches and"
  - "physics/doppler_frequency.py:8:1            recedes         U       recedes from an observer."
  - "physics/doppler_frequency.py:11:44          crest           U       each successive wave crest is emitted from a position"
  - "physics/doppler_frequency.py:11:53          emitted         U       successive wave crest is emitted from a position closer"
  - "physics/doppler_frequency.py:14:1           arrivals        U       arrivals of successive wave crests"
  - "physics/doppler_frequency.py:14:29          crests          U       arrivals of successive wave crests at the observer is reduced"
  - "physics/doppler_frequency.py:17:8           arrival         U       so the arrival time between successive"
  - "physics/doppler_frequency.py:19:27          stationary      U       the source of waves is stationary but the observer is"
  - "physics/doppler_frequency.py:24:23          summarized      U       These results are all summarized by the Doppler formula"
  - "physics/doppler_frequency.py:35:76          radar           U       engineering, such as radar,"
  - "physics/doppler_frequency.py:36:1           astronomy       U       astronomy, medical imaging, and"
  - "physics/doppler_frequency.py:36:20          imaging         U       astronomy, medical imaging, and seismology."
  - "physics/doppler_frequency.py:36:33          seismology      U       medical imaging, and seismology."
  - "physics/doppler_frequency.py:47:5           doppler         U       def doppler_effect("
  - "physics/grahams_law.py:2:8          Graham's        U       Title: Graham's Law of Effusion"
  - "physics/grahams_law.py:2:24         Effusion        U       Title: Graham's Law of Effusion"
  - "physics/grahams_law.py:4:30         effusion        U       Description: Graham's law of effusion states that the rate"
  - "physics/grahams_law.py:5:50         molar           U       the square root of the molar mass of its particles"
  - "physics/grahams_law.py:11:6         Molar           U       m1 = Molar mass of the first gas"
  - "physics/grahams_law.py:24:22        Effustion       U       effusion_rate_1: Effustion rate of first gas (m"
  - "physics/grahams_law.py:26:58        kmol            U       first gas (g/mol, kg/kmol, etc.)"
  - "physics/hubble_parameter.py:4:45        Universe        U       Hubble parameter H is the Universe expansion rate"
  - "physics/hubble_parameter.py:5:17        cosmology       U       in any time. In cosmology is customary to use"
  - "physics/hubble_parameter.py:5:30        customary       U       time. In cosmology is customary to use the redshift"
  - "physics/hubble_parameter.py:6:19        becausethe      U       in place of time, becausethe redshift is directily"
  - "physics/hubble_parameter.py:6:42        directily       U       becausethe redshift is directily mensure"
  - "physics/hubble_parameter.py:6:52        mensure         U       redshift is directily mensure"
  - "physics/hubble_parameter.py:7:17        galaxies        U       in the light of galaxies moving away from us"
  - "physics/hubble_parameter.py:11:5        hubble          U       H = hubble_constant*(radiation"
  - "physics/hubble_parameter.py:11:22       radiation       U       H = hubble_constant*(radiation_density*(redshift+1"
  - "physics/hubble_parameter.py:13:52       dark            U       curvature*(redshift+1)**2 + dark_energy)**(1/2)"
  - "physics/hubble_parameter.py:15:62       relativity      U       dark_energy are the relativity"
  - "physics/hubble_parameter.py:16:25       densities       U       the percentage) energy densities that exist"
  - "physics/hubble_parameter.py:18:12       barion          U       sum of the barion density and the"
  - "physics/hubble_parameter.py:19:14       Curvature       U       dark matter. Curvature is the curvature parameter"
  - "physics/hubble_parameter.py:20:25       completeness    U       the densities by the completeness"
  - "physics/hubble_parameter.py:40:29       constante       U       hubble_constant: Hubble constante is the expansion rate"
  - "physics/hubble_parameter.py:98:12       LCDM            U       # demo LCDM approximation"
  - "physics/ideal_gas_law.py:2:5            ideal           U       The ideal gas law, also called"
  - "physics/ideal_gas_law.py:4:25           gases           U       the behavior of many gases under many conditions"
  - "physics/ideal_gas_law.py:4:54           although        U       under many conditions, although it has"
  - "physics/ideal_gas_law.py:5:35           stated          U       limitations. It was first stated by Benoît Paul Émile"
  - "physics/ideal_gas_law.py:5:45           Benoît          U       was first stated by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:5:52           Paul            U       first stated by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:5:57           Émile           U       stated by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:5:63           Clapeyron       U       by Benoît Paul Émile Clapeyron"
  - "physics/ideal_gas_law.py:6:33           empirical       U       a combination of the empirical Boyle's law, Charles"
  - "physics/ideal_gas_law.py:6:43           Boyle's         U       combination of the empirical Boyle's law, Charles's law,"
  - "physics/ideal_gas_law.py:7:1            Avogadro's      U       Avogadro's law, and Gay-Lussac"
  - "physics/ideal_gas_law.py:7:25           Lussac's        U       Avogadro's law, and Gay-Lussac's law.[1] The ideal gas"
  - "physics/in_static_equilibrium.py:12:37          radian      U       float, angle: float, radian_mode: bool = False"
  - "physics/in_static_equilibrium.py:15:5           Resolves    U       Resolves force along rectangular"
  - "physics/in_static_equilibrium.py:53:20          moments     U       # summation of moments is zero"
  - "physics/kinetic_energy.py:5:1           possesses       U       possesses due to its motion.It"
  - "physics/kinetic_energy.py:6:45          Having          U       its stated velocity.Having gained this energy during"
  - "physics/kinetic_energy.py:7:24          maintains       U       acceleration, the body maintains this kinetic energy"
  - "physics/kinetic_energy.py:8:41          decelerating    U       done by the body when decelerating from its current speed"
  - "physics/kinetic_energy.py:9:9           Formally        U       of rest.Formally, a kinetic energy is"
  - "physics/kinetic_energy.py:9:62          Lagrangian      U       any term in a system's Lagrangian which includes"
  - "physics/kinetic_energy.py:12:79         traveling       U       rotating object of mass m traveling"
  - "physics/kinetic_energy.py:13:25         relativistic    U       a speed v is ½mv².In relativistic mechanics, this is a"
  - "physics/lens_formulae.py:2:59           lens            U       calculate focal length of lens, distance of"
  - "physics/lens_formulae.py:6:4            optics          U       In optics, the relationship between"
  - "physics/lens_formulae.py:9:54           concave         U       for convex as well as concave lenses. The formula"
  - "physics/lens_formulae.py:9:62           lenses          U       convex as well as concave lenses. The formula"
  - "physics/lens_formulae.py:21:35          assumptions     U       calculations easy few assumptions are made while deriving"
  - "physics/lens_formulae.py:21:62          deriving        U       assumptions are made while deriving the formula"
  - "physics/lens_formulae.py:26:12          aperture        U       3. The aperture of the lens taken must"
  - "physics/lens_formulae.py:27:22          incidence       U       4. The angles of incidence and angle of refraction"
  - "physics/lens_formulae.py:27:45          refraction      U       incidence and angle of refraction should be small."
  - "physics/lens_formulae.py:36:29          rays            U       that of the incident rays are negative."
  - "physics/lorentz_transformation_four_vector.py:2:61          inertial        U       transition between two inertial reference"
  - "physics/lorentz_transformation_four_vector.py:5:53          boost           U       rotation (i.e., a Lorentz boost in the x direction)"
  - "physics/lorentz_transformation_four_vector.py:40:3          Vehicle's       U       # Vehicle's speed divided by speed"
  - "physics/lorentz_transformation_four_vector.py:142:67        symbolically    U       calculate the transformation symbolically"
  - "physics/lorentz_transformation_four_vector.py:165:44        Symbolic        U       array([ct, x, y, z]) # Symbolic four vector"
  - "physics/lorentz_transformation_four_vector.py:177:18        symbolic        U       # Example of symbolic vector:"
  - "physics/lorentz_transformation_four_vector.py:187:40        subs            U       vector = [four_vector[i].subs(sub_dict) for i in range"
  - "physics/malus_law.py:4:54           polariser           U       transmitted through a polariser using Malus Law"
  - "physics/malus_law.py:7:15           Malus's             U       Description : Malus's law, which is named"
  - "physics/malus_law.py:7:49           Étienne             U       which is named after Étienne-Louis Malus,"
  - "physics/malus_law.py:8:26           polarizer           U       that when a perfect polarizer is placed in a polarized"
  - "physics/malus_law.py:8:51           polarized           U       polarizer is placed in a polarized"
  - "physics/malus_law.py:9:20           irradiance          U       beam of light, the irradiance, I, of the light that"
  - "physics/malus_law.py:13:9           polarization        U       initial polarization direction and the axis"
  - "physics/malus_law.py:14:11          unpolarized         U       A beam of unpolarized light can be thought"
  - "physics/malus_law.py:14:36          thought             U       unpolarized light can be thought of as containing a"
  - "physics/malus_law.py:15:9           mixture             U       uniform mixture of linear polarizations"
  - "physics/malus_law.py:15:27          polarizations       U       uniform mixture of linear polarizations at all possible angles"
  - "physics/malus_law.py:19:50          Polaroid            U       this, around 38% for Polaroid-type polarizers but"
  - "physics/malus_law.py:19:64          polarizers          U       % for Polaroid-type polarizers but"
  - "physics/malus_law.py:20:1           considerably        U       considerably higher (>49.9%) for"
  - "physics/malus_law.py:20:39          birefringent        U       higher (>49.9%) for some birefringent prism types."
  - "physics/malus_law.py:22:1           generally           U       generally called an analyzer)"
  - "physics/malus_law.py:22:63          polarizing          U       angle between their polarizing axes"
  - "physics/malus_law.py:24:16          crossed             U       polarizers are crossed and in theory no light"
  - "physics/malus_law.py:25:1           practically         U       practically speaking no polarizer"
  - "physics/malus_law.py:25:13          speaking            U       practically speaking no polarizer is perfect"
  - "physics/malus_law.py:26:37          sheets              U       example, crossed Polaroid sheets appear slightly blue"
  - "physics/malus_law.py:27:7           extinction          U       their extinction ratio is better in the"
  - "physics/malus_law.py:29:10          birefringence       U       (such as birefringence) will be shown as an"
  - "physics/malus_law.py:30:24          polarimetry         U       This effect is used in polarimetry to measure the optical"
  - "physics/malus_law.py:31:38          blockers            U       are also not perfect blockers of the polarization"
  - "physics/malus_law.py:34:39          Glan                U       Polaroid to about 1:106 for Glan-Taylor prism polarizers"
  - "physics/malus_law.py:34:44          Taylor              U       about 1:106 for Glan-Taylor prism polarizers."
  - "physics/malus_law.py:40:5           malus               U       def malus_law(initial_intensity"
  - "physics/mass_energy_equivalence.py:3:20         equivalence         U       Finding the energy equivalence of mass and mass equivalence"
  - "physics/mass_energy_equivalence.py:4:4          Einstein's          U       by Einstein's equation."
  - "physics/mass_energy_equivalence.py:7:41         pivotal             U       energy equivalence is a pivotal concept in theoretical"
  - "physics/mass_energy_equivalence.py:10:21        interchangeable     U       mass and energy are interchangeable; a mass increase corresponds"
  - "physics/mass_energy_equivalence.py:11:36        profound            U       This principle has profound implications in nuclear"
  - "physics/mass_energy_equivalence.py:11:45        implications        U       principle has profound implications in nuclear reactions"
  - "physics/mass_energy_equivalence.py:11:61        nuclear             U       profound implications in nuclear reactions,"
  - "physics/mass_energy_equivalence.py:11:69        reactions           U       implications in nuclear reactions,"
  - "physics/mass_energy_equivalence.py:12:1         explaining          U       explaining the release of immense"
  - "physics/mass_energy_equivalence.py:12:27        immense             U       explaining the release of immense energy from minuscule"
  - "physics/mass_energy_equivalence.py:12:47        minuscule           U       immense energy from minuscule changes in atomic nuclei"
  - "physics/mass_energy_equivalence.py:12:75        nuclei              U       minuscule changes in atomic nuclei."
  - "physics/mirror_formulae.py:7:61         characteristics     U       determine the position and characteristics"
  - "physics/mirror_formulae.py:15:5         Focal               U       f = Focal length of the spherical"
  - "physics/mirror_formulae.py:31:8         Thin                U       1) Thin Mirror: The mirror is"
  - "physics/mirror_formulae.py:31:67        thickness           U       be thin, meaning its thickness is"
  - "physics/mirror_formulae.py:36:14        practical           U       for most practical purposes."
  - "physics/mirror_formulae.py:37:14        Angles              U       3) Small Angles: The angles involved"
  - "physics/mirror_formulae.py:39:69        simplifies          U       the angle itself. It simplifies the"
  - "physics/mirror_formulae.py:41:8         Paraxial            U       4) Paraxial Rays: The mirror formula"
  - "physics/mirror_formulae.py:41:17        Rays                U       4) Paraxial Rays: The mirror formula"
  - "physics/mirror_formulae.py:41:45        derived             U       The mirror formula is derived using paraxial rays"
  - "physics/mirror_formulae.py:41:59        paraxial            U       formula is derived using paraxial rays, which are"
  - "physics/mirror_formulae.py:45:8         Reflection          U       5) Reflection and Refraction Laws"
  - "physics/mirror_formulae.py:45:23        Refraction          U       5) Reflection and Refraction Laws: The derivation"
  - "physics/mirror_formulae.py:45:34        Laws                U       Reflection and Refraction Laws: The derivation assumes"
  - "physics/mirror_formulae.py:48:42        refracted           U       and the incident and refracted rays lie in the same"
  - "physics/mirror_formulae.py:49:10        Snell's             U       obey Snell's law for refraction."
  - "physics/mirror_formulae.py:54:7         Convention          U       (Sign Convention adapted from"
  - "physics/n_body_simulation.py:3:1            dynamical       U       dynamical system of particles"
  - "physics/n_body_simulation.py:3:41           influence       U       particles under the influence of gravity. The system"
  - "physics/n_body_simulation.py:4:47           exerts          U       bodies, each of which exerts a gravitational force"
  - "physics/n_body_simulation.py:6:1            gravitation     U       gravitation. The Euler method is"
  - "physics/n_body_simulation.py:7:23           brought         U       velocity and position brought about by these forces"
  - "physics/n_body_simulation.py:7:54           Softening       U       about by these forces. Softening is used to prevent"
  - "physics/n_body_simulation.py:8:11           divergences     U       numerical divergences when a particle comes"
  - "physics/n_body_simulation.py:22:1           INTERVAL        U       INTERVAL = 20"
  - "physics/n_body_simulation.py:40:49          relevant        U       size\" & \"color\" are not relevant for the simulation itself"
  - "physics/n_body_simulation.py:115:20         softening       U       factor and the softening factor. The time factor"
  - "physics/n_body_simulation.py:117:5          trick           U       trick for N-body simulations"
  - "physics/n_body_simulation.py:139:20         exert           U       force they exert on it. Use that force"
  - "physics/n_body_simulation.py:165:57         Pythagoras's    U       of the distance using Pythagoras's theorem"
  - "physics/n_body_simulation.py:180:51         velocities      U       positions only after all the velocities have been updated"
  - "physics/n_body_simulation.py:222:56         evolves         U       the given body-system evolves over time."
  - "physics/n_body_simulation.py:229:28         plotted         U       # Set section to be plotted"
  - "physics/n_body_simulation.py:246:5          anim            U       anim = animation.FuncAnimation"
  - "physics/n_body_simulation.py:247:41         blit            U       interval=INTERVAL, blit=True"
  - "physics/n_body_simulation.py:293:62         impulse         U       velocities so that total impulse is zero,"
  - "physics/n_body_simulation.py:314:11         Bodies          U       # Bodies are created pairwise"
  - "physics/n_body_simulation.py:338:11         Figure          U       plot(\"Figure-8 solution to the 3"
  - "physics/newtons_law_of_gravitation.py:5:53          explains            U       Universal Gravitation explains the presence of force"
  - "physics/newtons_law_of_gravitation.py:5:66          presence            U       Gravitation explains the presence of force of"
  - "physics/newtons_law_of_gravitation.py:6:50          situated            U       having a definite mass situated at a distance. It is"
  - "physics/newtons_law_of_gravitation.py:7:32          attracts            U       that, every particle attracts every other particle"
  - "physics/newtons_law_of_gravitation.py:7:69          universe            U       other particle in the universe with a"
  - "physics/newtons_law_of_gravitation.py:10:45         unification         U       as the \"first great unification\", as it marked the unificatio"
  - "physics/newtons_law_of_gravitation.py:11:29         phenomena           U       previously described phenomena of gravity on Earth"
  - "physics/newtons_law_of_gravitation.py:19:18         Philosophiæ         U       - Newton (1687) \"Philosophiæ Naturalis Principia"
  - "physics/newtons_law_of_gravitation.py:19:30         Naturalis           U       (1687) \"Philosophiæ Naturalis Principia Mathematica"
  - "physics/newtons_law_of_gravitation.py:19:40         Principia           U       Philosophiæ Naturalis Principia Mathematica\""
  - "physics/newtons_law_of_gravitation.py:19:50         Mathematica         U       Naturalis Principia Mathematica\""
  - "physics/newtons_law_of_gravitation.py:25:1          GRAVITATIONAL       U       GRAVITATIONAL_CONSTANT = 6.6743e-"
  - "physics/newtons_law_of_gravitation.py:36:22         Kilograms           U       mass_1 : mass in Kilograms"
  - "physics/newtons_second_law_of_motion.py:3:35        pertains        U       second law of motion pertains to the behavior of objects"
  - "physics/newtons_second_law_of_motion.py:12:78       decreased       U       acceleration of the object is decreased."
  - "physics/newtons_second_law_of_motion.py:16:1        Formulation     U       Formulation: F_net = m • a"
  - "physics/newtons_second_law_of_motion.py:18:1        Diagrammatic    U       Diagrammatic Explanation::"
  - "physics/newtons_second_law_of_motion.py:65:5        newtons         U       def newtons_second_law_of_motion"
  - "physics/period_of_pendulum.py:4:26          mechanical      U       simple pendulum is a mechanical system that sways or"
  - "physics/period_of_pendulum.py:4:49          sways           U       mechanical system that sways or moves in an"
  - "physics/period_of_pendulum.py:5:1           oscillatory     U       oscillatory motion. The simple pendulum"
  - "physics/period_of_pendulum.py:5:41          comprises       U       The simple pendulum comprises of a small bob of"
  - "physics/period_of_pendulum.py:6:51          secured         U       string of length L and secured to a platform"
  - "physics/period_of_pendulum.py:8:1           driven          U       driven by gravitational force"
  - "physics/period_of_pendulum.py:9:30          amplitude       U       of the string and the amplitude (the maximum angle)"
  - "physics/period_of_pendulum.py:9:63          oscillation     U       the maximum angle) of oscillation."
  - "physics/period_of_pendulum.py:14:11         amplitudes      U       For small amplitudes, the period of a simple"
  - "physics/period_of_pendulum.py:19:44         hanging         U       from which the bob is hanging (in m)"
  - "physics/photoelectric_effect.py:2:5         photoelectric       U       The photoelectric effect is the emission"
  - "physics/photoelectric_effect.py:2:45        electrons           U       effect is the emission of electrons when electromagnetic"
  - "physics/photoelectric_effect.py:2:60        electromagnetic     U       emission of electrons when electromagnetic radiation ,"
  - "physics/photoelectric_effect.py:3:33        Electrons           U       light, hits a material. Electrons emitted in this manner"
  - "physics/photoelectric_effect.py:4:1         photoelectrons      U       photoelectrons."
  - "physics/photoelectric_effect.py:6:10        Einstein            U       In 1905, Einstein proposed a theory of"
  - "physics/photoelectric_effect.py:7:19        tiny                U       light consists of tiny packets of energy known"
  - "physics/photoelectric_effect.py:7:24        packets             U       light consists of tiny packets of energy known as photons"
  - "physics/photoelectric_effect.py:7:51        photons             U       packets of energy known as photons or light quanta. Each"
  - "physics/photoelectric_effect.py:9:27        proportionality     U       electromagnetic wave. The proportionality constant h has become"
  - "physics/photoelectric_effect.py:11:38       absorption          U       atomic bindings by the absorption of a photon of energy"
  - "physics/photoelectric_effect.py:11:54       photon              U       the absorption of a photon of energy hv, the highest"
  - "physics/potential_energy.py:9:27        massive         U       the potential energy a massive object has in relation"
  - "physics/potential_energy.py:11:40       released        U       gravitational field, which is released (converted into"
  - "physics/potential_energy.py:16:18       interacting     U       For two pairwise interacting point particles, the"
  - "physics/rainfall_intensity.py:5:3           rainfall        U       a rainfall event for a given duration"
  - "physics/rainfall_intensity.py:11:3          Aparicio        U       - Aparicio, F. (1997): Fundamentos"
  - "physics/rainfall_intensity.py:11:24         Fundamentos     U       Aparicio, F. (1997): Fundamentos de Hidrología de Superficie"
  - "physics/rainfall_intensity.py:11:39         Hidrología      U       97): Fundamentos de Hidrología de Superficie."
  - "physics/rainfall_intensity.py:11:53         Superficie      U       Fundamentos de Hidrología de Superficie."
  - "physics/rainfall_intensity.py:12:5          Balderas        U       Balderas, México, Limusa. 30"
  - "physics/rainfall_intensity.py:12:15         México          U       Balderas, México, Limusa. 303 p."
  - "physics/rainfall_intensity.py:12:23         Limusa          U       Balderas, México, Limusa. 303 p."
  - "physics/reynolds_number.py:3:31         laminar             U       out the type of flow (laminar or turbulent)"
  - "physics/reynolds_number.py:3:42         turbulent           U       of flow (laminar or turbulent)"
  - "physics/reynolds_number.py:5:22         dimensionless       U       Reynolds number is a dimensionless quantity that is used"
  - "physics/reynolds_number.py:6:56         flowing             U       laminar or turbulent while flowing through a"
  - "physics/reynolds_number.py:8:1          viscous             U       viscous forces."
  - "physics/reynolds_number.py:10:5         Inertial            U       R = Inertial Forces / Viscous Forces"
  - "physics/reynolds_number.py:10:23        Viscous             U       = Inertial Forces / Viscous Forces"
  - "physics/reynolds_number.py:14:5         Density             U       p = Density of fluid (in Kg/m^3"
  - "physics/reynolds_number.py:17:5         Viscosity           U       μ = Viscosity of the fluid (in Ns"
  - "physics/reynolds_number.py:21:51        Numerically         U       said to be laminar. Numerically, these are"
  - "physics/reynolds_number.py:23:38        Laminar             U       according to a range. Laminar flow falls below Reynolds"
  - "physics/reynolds_number.py:25:53        travels             U       flow in which the fluid travels smoothly in"
  - "physics/reynolds_number.py:25:61        smoothly            U       which the fluid travels smoothly in"
  - "physics/reynolds_number.py:26:16        Conversely          U       regular paths. Conversely, turbulent flow isn"
  - "physics/reynolds_number.py:27:29        mixing              U       irregular path with lots of mixing."
  - "physics/reynolds_number.py:34:55        viscosity           U       float, diameter: float, viscosity: float"
  - "physics/rms_speed_of_molecule.py:5:4            Vrms            U       | Vrms = √3RT/M |"
  - "physics/rms_speed_of_molecule.py:8:30           gasified        U       Kinetic Molecular Theory, gasified particles are in a condition"
  - "physics/rms_speed_of_molecule.py:9:55           pace            U       completely different pace, perpetually clashing"
  - "physics/rms_speed_of_molecule.py:9:61           perpetually     U       completely different pace, perpetually clashing and"
  - "physics/rms_speed_of_molecule.py:9:73           clashing        U       different pace, perpetually clashing and"
  - "physics/rms_speed_of_molecule.py:12:4           gaseous         U       of gaseous particles is constantly"
  - "physics/rms_speed_of_molecule.py:15:45          Particles       U       particles average behavior. Particles moving in opposite directions"
  - "physics/rms_speed_of_molecule.py:17:1           plausible       U       plausible that there'll be about"
  - "physics/rms_speed_of_molecule.py:19:24          unhelpful       U       zero; as this value is unhelpful, the average of velocities"
  - "physics/rms_speed_of_molecule.py:26:18          molecule        U       def rms_speed_of_molecule(temperature: float,"
  - "physics/rms_speed_of_molecule.py:50:5           vrms            U       vrms = rms_speed_of_molecule"
  - "physics/rms_speed_of_molecule.py:51:21          Nitrogen        U       print(f\"Vrms of Nitrogen gas at 300 K is {vrms"
  - "physics/shear_stress.py:4:7         stress          U       Shear stress is a component of stress"
  - "physics/shear_stress.py:4:47        coplanar        U       component of stress that is coplanar to the material cross"
  - "physics/shear_stress.py:20:8        Tangential      U       2. Tangential Force"
  - "physics/speed_of_sound.py:6:40          propagates      U       propagation, the sound wave propagates through an elastic medium"
  - "physics/speed_of_sound.py:8:25          longitudinal    U       Sound propagates as longitudinal waves in liquids and"
  - "physics/speed_of_sound.py:8:47          liquids         U       longitudinal waves in liquids and gases and as transverse"
  - "physics/speed_of_sound.py:8:72          transverse      U       liquids and gases and as transverse waves"
  - "physics/speed_of_sound.py:9:8           solids          U       in solids. This file calculates"
  - "physics/speed_of_sound.py:16:10         isentropic      U       K_s: isentropic bulk modulus"
  - "physics/speed_of_sound.py:29:19         Mercury         U       Example 2 --> Mercury 20°C: bulk_modulus="
  - "physics/speeds_of_gas_molecules.py:2:63         molecules       U       probable speeds of gas molecules are"
  - "physics/speeds_of_gas_molecules.py:22:40        integrating     U       can be calculated by integrating the Maxwell-Boltzmann"
  - "physics/speeds_of_gas_molecules.py:61:45        nitrogen        U       molecule(273, 0.028) # nitrogen at 273 K"
  - "physics/speeds_of_gas_molecules.py:63:45        oxygen          U       molecule(300, 0.032) # oxygen at 300 K"
  - "physics/terminal_velocity.py:5:54           attained    U       the highest velocity attained by an"
  - "physics/terminal_velocity.py:7:5            buoyancy    U       and buoyancy is equal to the downward"
  - "project_euler/problem_001/sol1.py:4:1           Multiples       U       Multiples of 3 and 5"
  - "project_euler/problem_001/sol4.py:27:5          xmulti      U       xmulti = []"
  - "project_euler/problem_001/sol4.py:28:5          zmulti      U       zmulti = []"
  - "project_euler/problem_002/sol2.py:36:10         fibs    U       even_fibs = []"
  - "project_euler/problem_004/sol1.py:33:7          fetches     U       # fetches the next number"
  - "project_euler/problem_005/sol1.py:57:9          nfound      U       nfound = 0"
  - "project_euler/problem_006/sol2.py:35:9          cubes       U       sum_cubes = (n * (n + 1) // 2"
  - "project_euler/problem_009/sol1.py:4:9           Pythagorean     U       Special Pythagorean triplet"
  - "project_euler/problem_009/sol2.py:37:11         Solving     U       # Solving the two equations a"
  - "project_euler/problem_011/sol1.py:43:13         horz    U       horz_product = grid[i][j"
  - "project_euler/problem_012/sol1.py:2:1           Highly          U       Highly divisible triangular"
  - "project_euler/problem_012/sol1.py:30:9          multiplicity    U       multiplicity = 0"
  - "project_euler/problem_014/sol1.py:14:55         finishing       U       (starting at 13 and finishing at 1) contains"
  - "project_euler/problem_014/sol1.py:15:36         proved          U       Although it has not been proved yet (Collatz Problem"
  - "project_euler/problem_014/sol1.py:39:5          counters        U       counters = {1: 1}"
  - "project_euler/problem_014/sol2.py:31:1          COLLATZ     U       COLLATZ_SEQUENCE_LENGTHS ="
  - "project_euler/problem_017/sol1.py:12:30         hyphens             U       not count spaces or hyphens. For example, 342 (three"
  - "project_euler/problem_017/sol1.py:28:18         aloud               U       # never said aloud)"
  - "project_euler/problem_017/sol1.py:31:17         inconsistency       U       # 20 due to inconsistency in teens)"
  - "project_euler/problem_017/sol1.py:31:34         teens               U       to inconsistency in teens)"
  - "project_euler/problem_019/sol1.py:6:5           yourself        U       for yourself."
  - "project_euler/problem_019/sol1.py:9:1           Thirty          U       Thirty days has September,"
  - "project_euler/problem_019/sol1.py:9:17          September       U       Thirty days has September,"
  - "project_euler/problem_019/sol1.py:10:1          April           U       April, June and November."
  - "project_euler/problem_019/sol1.py:10:8          June            U       April, June and November."
  - "project_euler/problem_019/sol1.py:13:25         rain            U       Which has twenty-eight, rain or shine."
  - "project_euler/problem_019/sol1.py:13:33         shine           U       twenty-eight, rain or shine."
  - "project_euler/problem_019/sol1.py:19:18         fell            U       How many Sundays fell on the first of the"
  - "project_euler/problem_019/sol1.py:19:60         twentieth       U       the month during the twentieth century"
  - "project_euler/problem_019/sol1.py:25:30         mondays         U       Returns the number of mondays that fall on the first"
  - "project_euler/problem_020/sol1.py:48:5          nfact       U       nfact = factorial(num)"
  - "project_euler/problem_021/sol1.py:2:1           Amicable    U       Amicable Numbers"
  - "project_euler/problem_021/sol1.py:7:60          amicable    U       then a and b are an amicable pair and"
  - "project_euler/problem_022/sol1.py:7:1           alphabetical    U       alphabetical order. Then working"
  - "project_euler/problem_022/sol1.py:11:63         COLIN           U       alphabetical order, COLIN, which is"
  - "project_euler/problem_023/sol1.py:38:5          abundants       U       abundants = set()"
  - "project_euler/problem_024/sol1.py:9:13          millionth       U       What is the millionth lexicographic permutation"
  - "project_euler/problem_025/sol1.py:60:14         incrementing    U       Computes incrementing Fibonacci numbers starting"
  - "project_euler/problem_026/sol1.py:8:21          denominators    U       unit fractions with denominators 2 to 10 are given:"
  - "project_euler/problem_026/sol1.py:19:51         recurring       U       , and has a 1-digit recurring cycle. It can be"
  - "project_euler/problem_026/sol1.py:29:5          Considering     U       Considering any range can be provided"
  - "project_euler/problem_027/sol1.py:7:22          remarkable      U       Euler discovered the remarkable quadratic formula:"
  - "project_euler/problem_027/sol1.py:11:12         certainly       U       by 41, and certainly when n = 41, 412 +"
  - "project_euler/problem_027/sol1.py:12:5          incredible      U       The incredible formula n2 - 79n +"
  - "project_euler/problem_027/sol1.py:15:13         quadratics      U       Considering quadratics of the form:"
  - "project_euler/problem_030/sol1.py:1:35          Powers          U       Statement (Digit Fifth Powers): https://projecteuler"
  - "project_euler/problem_030/sol1.py:3:1           Surprisingly    U       Surprisingly there are only three"
  - "project_euler/problem_030/sol1.py:19:48         criteria        U       (which exceeds the criteria of number being 3 digit"
  - "project_euler/problem_031/sol1.py:5:4           England         U       In England the currency is made"
  - "project_euler/problem_031/sol1.py:5:53          pence           U       up of pound, f, and pence, p, and there are"
  - "project_euler/problem_031/sol1.py:6:24          circulation     U       eight coins in general circulation:"
  - "project_euler/problem_031/sol2.py:37:50         paradigm    U       dynamic programming paradigm in a bottom-up fashion"
  - "project_euler/problem_032/sol32.py:2:40         pandigital      U       an n-digit number is pandigital if it makes use of all"
  - "project_euler/problem_032/sol32.py:6:21         unusual         U       The product 7254 is unusual, as the identity, 3"
  - "project_euler/problem_032/sol32.py:7:1          multiplicand    U       multiplicand, multiplier, and product"
  - "project_euler/problem_033/sol1.py:4:25          curious             U       fraction 49/98 is a curious fraction, as an inexperienced"
  - "project_euler/problem_033/sol1.py:4:49          inexperienced       U       curious fraction, as an inexperienced"
  - "project_euler/problem_033/sol1.py:5:18          attempting          U       mathematician in attempting to simplify it may incorrectl"
  - "project_euler/problem_033/sol1.py:5:60          believe             U       simplify it may incorrectly believe"
  - "project_euler/problem_036/sol1.py:7:13          palindromes     U       Double-base palindromes"
  - "project_euler/problem_037/sol1.py:2:1           Truncatable     U       Truncatable primes"
  - "project_euler/problem_037/sol1.py:5:46          Being           U       interesting property. Being prime itself, it is"
  - "project_euler/problem_037/sol1.py:6:4           continuously    U       to continuously remove digits from left"
  - "project_euler/problem_037/sol1.py:9:54          truncatable     U       primes that are both truncatable from left to right"
  - "project_euler/problem_038/sol1.py:10:4          concatenating       U       By concatenating each product we get"
  - "project_euler/problem_038/sol1.py:11:15         concatenated        U       192384576 the concatenated product of 192 and"
  - "project_euler/problem_038/sol1.py:21:61         concactenation      U       the solution will be a concactenation of"
  - "project_euler/problem_038/sol1.py:28:5          concatenation       U       The concatenation of a with 2a = a *"
  - "project_euler/problem_039/sol1.py:8:57          maximised       U       number of solutions maximised?"
  - "project_euler/problem_039/sol1.py:17:5          pythagorean     U       def pythagorean_triple(max_perimeter"
  - "project_euler/problem_039/sol1.py:19:64         angled          U       perimeter of a right angled triangle"
  - "project_euler/problem_039/sol1.py:31:13         hypotenuse      U       hypotenuse = (base * base + perpendicula"
  - "project_euler/problem_040/sol1.py:2:1           Champernowne's      U       Champernowne's constant"
  - "project_euler/problem_040/sol1.py:4:4           irrational          U       An irrational decimal fraction is"
  - "project_euler/problem_041/sol1.py:2:1           Pandigital      U       Pandigital prime"
  - "project_euler/problem_041/sol1.py:72:5          pandigitals     U       pandigitals = [num for num in perm"
  - "project_euler/problem_042/solution42.py:19:3        Precomputes     U       # Precomputes a list of the 100 first"
  - "project_euler/problem_044/sol1.py:4:1           Pentagonal      U       Pentagonal numbers are generated"
  - "project_euler/problem_044/sol1.py:5:1           pentagonal      U       pentagonal numbers are:"
  - "project_euler/problem_044/sol1.py:11:37         minimised       U       and D = |Pk - Pj| is minimised; what is the value of"
  - "project_euler/problem_046/sol1.py:4:30          Goldbach        U       proposed by Christian Goldbach that every odd composite"
  - "project_euler/problem_046/sol1.py:64:5          composites      U       odd_composites = [num for num in range"
  - "project_euler/problem_047/sol1.py:2:1           Combinatoric    U       Combinatoric selections"
  - "project_euler/problem_049/sol1.py:12:1          exhibiting      U       exhibiting this property, but there"
  - "project_euler/problem_049/sol1.py:20:17         permutated      U       to check if the permutated numbers is in our prime"
  - "project_euler/problem_050/sol1.py:4:1           Consecutive     U       Consecutive prime sum"
  - "project_euler/problem_050/sol1.py:24:14         Erotosthenes    U       Sieve of Erotosthenes"
  - "project_euler/problem_050/sol1.py:56:42         celing          U       biggest prime, below the celing, that can be written"
  - "project_euler/problem_051/sol1.py:3:13          replacements    U       Prime digit replacements"
  - "project_euler/problem_051/sol1.py:6:4           replacing       U       By replacing the 1st digit of the"
  - "project_euler/problem_051/sol1.py:12:1          Consequently    U       Consequently 56003, being the first"
  - "project_euler/problem_051/sol1.py:90:38         replaceable     U       primes with less than 3 replaceable digits"
  - "project_euler/problem_052/sol1.py:2:1           Permuted    U       Permuted multiples"
  - "project_euler/problem_054/sol1.py:4:18          poker           U       In the card game poker, a hand consists of"
  - "project_euler/problem_054/sol1.py:11:1          Straight        U       Straight: All cards are consecutive"
  - "project_euler/problem_054/sol1.py:22:7          wins            U       value wins; for example, a pair"
  - "project_euler/problem_054/sol1.py:22:36         eights          U       for example, a pair of eights beats a pair of fives"
  - "project_euler/problem_054/sol1.py:22:43         beats           U       example, a pair of eights beats a pair of fives."
  - "project_euler/problem_054/sol1.py:22:59         fives           U       eights beats a pair of fives."
  - "project_euler/problem_054/sol1.py:27:57         dealt           U       thousand random hands dealt to two players."
  - "project_euler/problem_054/sol1.py:39:20         codewars        U       Similar problem on codewars:"
  - "project_euler/problem_054/sol1.py:59:13         opponent's      U       opponent's hand (opponent) and"
  - "project_euler/problem_054/sol1.py:87:6          CARD            U       _CARD_NAME = ("
  - "project_euler/problem_054/sol1.py:93:10         Five            U       \"Five\","
  - "project_euler/problem_054/sol1.py:96:10         Eight           U       \"Eight\","
  - "project_euler/problem_054/sol1.py:97:10         Nine            U       \"Nine\","
  - "project_euler/problem_054/sol1.py:115:50        ueen            U       9, T(en), J(ack), Q(ueen), K(ing), A(ce)"
  - "project_euler/problem_054/sol1.py:118:11        pades           U       S(pades), H(earts), D(iamonds"
  - "project_euler/problem_054/sol1.py:118:21        earts           U       S(pades), H(earts), D(iamonds), C(lubs"
  - "project_euler/problem_054/sol1.py:118:31        iamonds         U       pades), H(earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:118:43        lubs            U       earts), D(iamonds), C(lubs)"
  - "project_euler/problem_054/sol1.py:148:53        Stright         U       2H 3H 4H 5H 6H\") # Stright flush"
  - "project_euler/problem_054/sol1.py:163:11        Breaking        U       # Breaking the tie works on the"
  - "project_euler/problem_054/sol1.py:200:26        Jacks           U       'Four of a kind, Jacks'"
  - "project_euler/problem_054/sol1.py:203:32        Threes          U       Full house, Twos over Threes'"
  - "project_euler/problem_054/test_poker_hand.py:9:8            HANDS           U       SORTED_HANDS = ("
  - "project_euler/problem_054/test_poker_hand.py:97:6           STRAIGHT        U       TEST_STRAIGHT = ("
  - "project_euler/problem_054/test_poker_hand.py:105:6          FIVE            U       TEST_FIVE_HIGH_STRAIGHT = ("
  - "project_euler/problem_054/test_poker_hand.py:140:11         oppo            U       play, oppo = randrange(len(SORTED"
  - "project_euler/problem_054/test_poker_hand.py:197:27         straights       U       Test that five high straights are compared correctly"
  - "project_euler/problem_054/test_poker_hand.py:198:5          pokerhands      U       pokerhands = [PokerHand(\"2D AC"
  - "project_euler/problem_054/test_poker_hand.py:206:5          pokerhand       U       pokerhand = PokerHand(\"2C 4S AS"
  - "project_euler/problem_055/sol1.py:2:1           Lychrel     U       Lychrel numbers"
  - "project_euler/problem_055/sol1.py:17:18         proven      U       is Lychrel until proven otherwise. In addition"
  - "project_euler/problem_055/sol1.py:58:30         lychrel     U       Returns the count of all lychrel numbers below limit"
  - "project_euler/problem_056/sol1.py:4:3           googol          U       A googol (10^100) is a massive"
  - "project_euler/problem_056/sol1.py:5:19          unimaginably    U       100^100 is almost unimaginably large: one followed"
  - "project_euler/problem_056/sol1.py:6:1           Despite         U       Despite their size, the sum"
  - "project_euler/problem_057/sol1.py:14:16         expansions      U       The next three expansions are 99/70, 239/169,"
  - "project_euler/problem_057/sol1.py:14:68         eighth          U       and 577/408, but the eighth expansion,"
  - "project_euler/problem_058/sol1.py:5:21          spiralling          U       Starting with 1 and spiralling anticlockwise in the"
  - "project_euler/problem_058/sol1.py:5:32          anticlockwise       U       with 1 and spiralling anticlockwise in the following way"
  - "project_euler/problem_059/sol1.py:3:47          Interchange     U       Code for Information Interchange)."
  - "project_euler/problem_059/sol1.py:4:32          asterisk        U       example, uppercase A = 65, asterisk (*) = 42, and lowercase"
  - "project_euler/problem_059/sol1.py:8:72          restores        U       on the cipher text, restores"
  - "project_euler/problem_059/sol1.py:11:5          unbreakable     U       For unbreakable encryption, the key"
  - "project_euler/problem_059/sol1.py:18:29         cyclically      U       the key is repeated cyclically throughout the message"
  - "project_euler/problem_059/sol1.py:19:19         sufficiently    U       method is using a sufficiently long password key for"
  - "project_euler/problem_059/sol1.py:20:4          memorable       U       be memorable."
  - "project_euler/problem_059/sol1.py:24:52         knowledge       U       ASCII codes, and the knowledge that the plain text"
  - "project_euler/problem_059/sol1.py:74:21         enemy's         U       >>> text = \"The enemy's gate is down\""
  - "project_euler/problem_059/sol1.py:80:5          possibles       U       possibles: list[str] = []"
  - "project_euler/problem_059/sol1.py:93:30         asfla           U       filter_common_word(['asfla adf', 'I am here',"
  - "project_euler/problem_059/sol1.py:95:30         athla           U       filter_common_word(['athla amf', 'I am here',"
  - "project_euler/problem_059/sol1.py:104:22        filtering       U       possibilities by filtering using common words until"
  - "project_euler/problem_063/sol1.py:3:20          ninth           U       134217728=89, is a ninth power."
  - "project_euler/problem_063/sol1.py:10:13         conclusions     U       Using these conclusions, we will calculate the"
  - "project_euler/problem_064/sol1.py:7:5           conciseness     U       For conciseness, we use the notation"
  - "project_euler/problem_064/sol1.py:8:46          indefinitely    U       block (1,3,1,8) repeats indefinitely."
  - "project_euler/problem_065/sol1.py:9:29          infinitum           U       indicates that 2 repeats ad infinitum. In a similar way, sqrt"
  - "project_euler/problem_065/sol1.py:13:54         approximations      U       provide the best rational approximations."
  - "project_euler/problem_065/sol1.py:14:21         convergents         U       Let us consider the convergents for sqrt(2)."
  - "project_euler/problem_065/sol1.py:24:14         surprising          U       What is most surprising is that the important"
  - "project_euler/problem_065/sol1.py:30:48         convergent          U       numerator of the 10th convergent is"
  - "project_euler/problem_068/sol1.py:20:32         uniquely        U       solution can be described uniquely."
  - "project_euler/problem_068/sol1.py:23:57         totals          U       with four different totals: 9, 10, 11, and 12."
  - "project_euler/problem_068/sol1.py:38:45         arrangements    U       0, and depending on arrangements,"
  - "project_euler/problem_069/sol1.py:10:3          Relatively      U       n Relatively Prime φ(n) n/φ(n)"
  - "project_euler/problem_069/sol1.py:31:73         wikilink        U       using product formula (wikilink below)"
  - "project_euler/problem_069/sol1.py:34:56         attains         U       and return the k that attains maximum"
  - "project_euler/problem_070/sol1.py:12:1          Interestingly       U       Interestingly, φ(87109)=79180, and"
  - "project_euler/problem_072/sol1.py:17:44         coprime     U       between 1 and n that are coprime to n is given by the"
  - "project_euler/problem_074/sol1.py:9:1           Perhaps         U       Perhaps less well known is"
  - "project_euler/problem_074/sol1.py:16:77         stuck           U       will eventually get stuck in"
  - "project_euler/problem_074/sol1.py:26:10         chains          U       How many chains, with a starting number"
  - "project_euler/problem_074/sol1.py:30:7          FACTORIALS      U       DIGIT_FACTORIALS = {"
  - "project_euler/problem_074/sol2.py:32:29         stops       U       generation of the chain stops before a repeating item"
  - "project_euler/problem_075/sol1.py:25:38         perimeters      U       the frequencies of the perimeters."
  - "project_euler/problem_075/sol1.py:37:5          formmed         U       formmed into an integer sided"
  - "project_euler/problem_076/sol1.py:2:10          Summations      U       Counting Summations"
  - "project_euler/problem_077/sol1.py:21:5          PRIMES              U       NUM_PRIMES = 100"
  - "project_euler/problem_077/sol1.py:37:68         decompositions      U       represented as unique prime decompositions,"
  - "project_euler/problem_078/sol1.py:6:23          piles       U       can be separated into piles. For example, five coins"
  - "project_euler/problem_079/sol1.py:21:26         logins      U       find_secret_passcode(logins: list[str]) -> int:"
  - "project_euler/problem_080/sol1.py:3:9           Sandeep     U       Author: Sandeep Gupta"
  - "project_euler/problem_080/sol1.py:3:17          Gupta       U       Author: Sandeep Gupta"
  - "project_euler/problem_081/sol1.py:4:42          indicated       U       the right and down, is indicated in bold red and is equal"
  - "project_euler/problem_085/sol1.py:4:13          carefully       U       By counting carefully it can be seen that"
  - "project_euler/problem_085/sol1.py:5:19          rectangles      U       contains eighteen rectangles."
  - "project_euler/problem_085/sol1.py:17:5          Denote          U       Denote these two triangle numbers"
  - "project_euler/problem_085/sol1.py:21:21         rough           U       Since this is a rough bound, to be on the"
  - "project_euler/problem_086/sol1.py:4:3           spider          U       A spider, S, sits in one corner"
  - "project_euler/problem_086/sol1.py:4:14          sits            U       A spider, S, sits in one corner of a cuboid"
  - "project_euler/problem_086/sol1.py:11:54         cuboids         U       exactly 2060 distinct cuboids, ignoring rotations"
  - "project_euler/problem_086/sol1.py:20:8          conceptually    U       By conceptually \"opening up\" the cuboid"
  - "project_euler/problem_086/sol1.py:20:49         laying          U       opening up\" the cuboid and laying out its faces on a plane"
  - "project_euler/problem_086/sol1.py:28:24         satisfying      U       The set of cuboids satisfying this property with maximum"
  - "project_euler/problem_087/sol1.py:4:21          expressible     U       The smallest number expressible as the sum of a prime"
  - "project_euler/problem_087/sol1.py:42:17         tetr            U       tetr = prime3 * prime3 *"
  - "project_euler/problem_089/sol1.py:4:31          numerals            U       number written in Roman numerals to be considered valid"
  - "project_euler/problem_089/sol1.py:12:1          VIIIIIIIIIII        U       VIIIIIIIIIII"
  - "project_euler/problem_089/sol1.py:13:1          VVIIIIII            U       VVIIIIII"
  - "project_euler/problem_089/sol1.py:14:1          XIIIIII             U       XIIIIII"
  - "project_euler/problem_089/sol1.py:15:1          VVVI                U       VVVI"
  - "project_euler/problem_089/sol1.py:23:33         definitive          U       Roman Numerals for the definitive rules for this problem"
  - "project_euler/problem_089/sol1.py:40:31         LXXXIX              U       parse_roman_numerals(\"LXXXIX\")"
  - "project_euler/problem_089/sol1.py:122:20        numeralcleanup      U       >>> solution(\"/numeralcleanup_test.txt\")"
  - "project_euler/problem_089/sol1.py:126:5         savings             U       savings = 0"
  - "project_euler/problem_089/sol1.py:134:9         shortened           U       shortened = generate_roman_numerals"
  - "project_euler/problem_091/sol1.py:5:43          ΔOPQ    U       origin, O(0,0), to form ΔOPQ."
  - "project_euler/problem_092/sol1.py:9:26          arrives     U       Therefore any chain that arrives at 1 or 89 will become"
  - "project_euler/problem_092/sol1.py:10:14         amazing     U       What is most amazing is that EVERY starting"
  - "project_euler/problem_092/sol1.py:14:8          SQUARED     U       DIGITS_SQUARED = [sum(int(c, 10) *"
  - "project_euler/problem_092/sol1.py:33:27         Slightly    U       # Increased Speed Slightly by checking every 5"
  - "project_euler/problem_092/sol1.py:40:15         Chains      U       # There are 2 Chains made,"
  - "project_euler/problem_092/sol1.py:48:37         quicken     U       dictionary to an array to quicken the solution"
  - "project_euler/problem_092/sol1.py:49:1          CHAINS      U       CHAINS: list[bool | None]"
  - "project_euler/problem_094/sol1.py:9:21          differs     U       equal and the third differs by no more than one"
  - "project_euler/problem_097/sol1.py:4:9           Subsequently    U       digits. Subsequently other Mersenne primes"
  - "project_euler/problem_099/sol1.py:5:1           calculator      U       calculator would confirm that"
  - "project_euler/problem_100/sol1.py:4:30          coloured    U       contains twenty-one coloured discs, composed of fifteen"
  - "project_euler/problem_100/sol1.py:4:39          discs       U       twenty-one coloured discs, composed of fifteen"
  - "project_euler/problem_101/sol1.py:3:1           certainty           U       certainty the value of the next"
  - "project_euler/problem_101/sol1.py:23:1          sensible            U       sensible to assume constancy"
  - "project_euler/problem_101/sol1.py:33:1          Clearly             U       Clearly no BOPs exist for k"
  - "project_euler/problem_101/sol1.py:38:24         tenth               U       Consider the following tenth degree polynomial generating"
  - "project_euler/problem_101/sol1.py:116:5         interpolates        U       interpolates the data points. We"
  - "project_euler/problem_101/sol1.py:116:67        interpolating       U       coefficients of the interpolating"
  - "project_euler/problem_101/sol1.py:145:9         interpolated        U       def interpolated_func(var: int) -> int"
  - "project_euler/problem_101/sol1.py:193:37        BOPS                U       sum of the FITs of the BOPS. For each interpolating"
  - "project_euler/problem_104/sol1.py:47:32         pandigitality       U       check last 9 numbers for pandigitality"
  - "project_euler/problem_104/sol1.py:119:32        optimisation        U       m=1e9, done for fast optimisation"
  - "project_euler/problem_104/sol1.py:120:5         tocheck             U       tocheck = [0] * 1000000"
  - "project_euler/problem_107/sol1.py:16:28         optimise    U       However, it is possible to optimise the network by removing"
  - "project_euler/problem_107/sol1.py:17:75         achieves    U       connected. The network which achieves"
  - "project_euler/problem_107/sol1.py:112:5         adjaceny    U       adjaceny_matrix = [line.split"
  - "project_euler/problem_109/sol1.py:2:16          darts           U       In the game of darts a player throws three"
  - "project_euler/problem_109/sol1.py:7:5           cream           U       and cream regions inside this"
  - "project_euler/problem_109/sol1.py:8:45          treble          U       ring score double and treble scores respectively"
  - "project_euler/problem_109/sol1.py:10:36         concentric      U       of the board are two concentric circles called the bull"
  - "project_euler/problem_109/sol1.py:10:66         bull            U       concentric circles called the bull region, or"
  - "project_euler/problem_109/sol1.py:11:1          bulls           U       bulls-eye. The outer bull"
  - "project_euler/problem_109/sol1.py:16:55         doubles         U       is normal to play a \"doubles out\" system, which"
  - "project_euler/problem_109/sol1.py:20:5          bust            U       is \"bust\"."
  - "project_euler/problem_109/sol1.py:45:1          Incredibly      U       Incredibly there are 42336 distinct"
  - "project_euler/problem_109/sol1.py:68:5          singles         U       singles: list[int] = [*list"
  - "project_euler/problem_109/sol1.py:73:9          checkouts       U       num_checkouts: int = 0"
  - "project_euler/problem_112/sol1.py:8:79          bouncy      U       increasing nor decreasing a \"bouncy\""
  - "project_euler/problem_114/sol1.py:29:43         lend    U       example above does not lend itself to the possibility"
  - "project_euler/problem_116/sol1.py:4:27          tiles       U       of five grey square tiles is to have a number"
  - "project_euler/problem_116/sol1.py:5:24          oblong      U       replaced with coloured oblong tiles chosen"
  - "project_euler/problem_116/sol1.py:28:15         colours     U       Assuming that colours cannot be mixed there"
  - "project_euler/problem_116/sol1.py:32:66         tile        U       at least one coloured tile must be used?"
  - "project_euler/problem_117/sol1.py:26:60         tiled       U       fifty units in length be tiled?"
  - "project_euler/problem_119/sol1.py:9:19          insist      U       this sequence and insist that a number must contain"
  - "project_euler/problem_120/sol1.py:2:20          remainders      U       Problem 120 Square remainders: https://projecteuler"
  - "project_euler/problem_120/sol1.py:14:5          maximizing      U       For maximizing the value, 2an < a*a"
  - "project_euler/problem_121/sol1.py:6:12          pays        U       The player pays £1 to play and wins"
  - "project_euler/problem_121/sol1.py:9:16          played      U       If the game is played for four turns, the"
  - "project_euler/problem_121/sol1.py:10:28         prize       U       and so the maximum prize fund the banker should"
  - "project_euler/problem_121/sol1.py:10:34         fund        U       so the maximum prize fund the banker should allocate"
  - "project_euler/problem_121/sol1.py:10:43         banker      U       maximum prize fund the banker should allocate for"
  - "project_euler/problem_121/sol1.py:11:47         incur       U       they would expect to incur a loss. Note that any"
  - "project_euler/problem_121/sol1.py:11:75         payout      U       loss. Note that any payout will"
  - "project_euler/problem_121/sol1.py:12:22         pounds      U       be a whole number of pounds and also includes the"
  - "project_euler/problem_123/sol1.py:95:40         reminder    U       the next prime as the reminder will be 2."
  - "project_euler/problem_129/sol1.py:4:21          entirely    U       A number consisting entirely of ones is called a"
  - "project_euler/problem_129/sol1.py:4:50          repunit     U       of ones is called a repunit. We shall define R(k"
  - "project_euler/problem_129/sol1.py:19:44         Repunit     U       value k such that the Repunit of length k is divisible"
  - "project_euler/problem_131/sol1.py:9:9           perhaps     U       What is perhaps most surprising is that"
  - "project_euler/problem_135/sol1.py:15:1          Taking      U       Taking x, y, z of the form"
  - "project_euler/problem_144/sol1.py:2:4           laser               U       In laser physics, a \"white cell"
  - "project_euler/problem_144/sol1.py:3:39          bounces             U       beam enters the cell, bounces around on the mirrors"
  - "project_euler/problem_144/sol1.py:13:26         impacts             U       and the beam first impacts the mirror at (1.4,"
  - "project_euler/problem_144/sol1.py:17:5          reflected           U       and reflected beams make the same"
  - "project_euler/problem_144/sol1.py:17:15         beams               U       and reflected beams make the same angle"
  - "project_euler/problem_144/sol1.py:20:24         wall                U       the laser beam and the wall of the white cell; the"
  - "project_euler/problem_144/sol1.py:27:47         reflections         U       right shows the first 10 reflections of the beam."
  - "project_euler/problem_144/sol1.py:56:41         simultaeneous       U       next point, solve the simultaeneous equations:"
  - "project_euler/problem_145/sol1.py:3:9           Vineet      U       Author: Vineet Rao, Maxim Smolskiy"
  - "project_euler/problem_145/sol1.py:3:27          Smolskiy    U       Author: Vineet Rao, Maxim Smolskiy"
  - "project_euler/problem_145/sol1.py:10:1          Leading     U       Leading zeroes are not allowed"
  - "project_euler/problem_145/sol1.py:17:1          EVEN        U       EVEN_DIGITS = [0, 2, 4,"
  - "project_euler/problem_173/sol1.py:4:26          lamina      U       shall define a square lamina to be a square outline"
  - "project_euler/problem_173/sol1.py:6:58          laminae     U       two different square laminae:"
  - "project_euler/problem_180/sol1.py:14:19         golden          U       We call (x,y,z) a golden triple of order k if"
  - "project_euler/problem_180/sol1.py:31:62         fulfilled       U       equirement fn(x, y, z) = 0 is fulfilled if and"
  - "project_euler/problem_180/sol1.py:38:54         numerators      U       through the possible numerators and denominators"
  - "project_euler/problem_180/sol1.py:40:75         uniquq          U       <= 0. We use a set \"uniquq_s\""
  - "project_euler/problem_187/sol1.py:82:5          semiprimes      U       semiprimes_count = 0"
  - "project_euler/problem_188/sol1.py:4:5           hyperexponentiation     U       The hyperexponentiation of a number"
  - "project_euler/problem_188/sol1.py:6:28          tetration               U       hyperexponentiation or tetration of a number a by a positive"
  - "project_euler/problem_188/sol1.py:23:6          modexpt                 U       def _modexpt(base: int, exponent"
  - "project_euler/problem_188/sol1.py:58:39         assiciative             U       base↑↑height by right-assiciative repeated modular"
  - "project_euler/problem_191/sol1.py:2:1           Prize           U       Prize Strings"
  - "project_euler/problem_191/sol1.py:5:21          offers          U       A particular school offers cash rewards to children"
  - "project_euler/problem_191/sol1.py:5:33          rewards         U       particular school offers cash rewards to children with good"
  - "project_euler/problem_191/sol1.py:5:63          attendance      U       to children with good attendance and"
  - "project_euler/problem_191/sol1.py:6:1           punctuality     U       punctuality. If they are absent"
  - "project_euler/problem_191/sol1.py:7:10          occasion        U       than one occasion then they forfeit their"
  - "project_euler/problem_191/sol1.py:7:29          forfeit         U       one occasion then they forfeit their prize."
  - "project_euler/problem_191/sol1.py:9:26          trinary         U       During an n-day period a trinary string is formed for"
  - "project_euler/problem_191/sol1.py:15:6          OOOA            U       OOOO OOOA OOOL OOAO OOAA OOAL"
  - "project_euler/problem_191/sol1.py:15:11         OOOL            U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO"
  - "project_euler/problem_191/sol1.py:15:16         OOAO            U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA"
  - "project_euler/problem_191/sol1.py:15:21         OOAA            U       OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO"
  - "project_euler/problem_191/sol1.py:15:26         OOAL            U       OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:31         OOLO            U       OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:36         OOLA            U       OOAO OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:41         OAOO            U       OOAA OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:15:46         OAOA            U       OOAL OOLO OOLA OAOO OAOA"
  - "project_euler/problem_191/sol1.py:16:1          OAOL            U       OAOL OAAO OAAL OALO OALA"
  - "project_euler/problem_191/sol1.py:16:6          OAAO            U       OAOL OAAO OAAL OALO OALA OLOO"
  - "project_euler/problem_191/sol1.py:16:11         OAAL            U       OAOL OAAO OAAL OALO OALA OLOO OLOA"
  - "project_euler/problem_191/sol1.py:16:16         OALO            U       OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO"
  - "project_euler/problem_191/sol1.py:16:21         OALA            U       OAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA"
  - "project_euler/problem_191/sol1.py:16:26         OLOO            U       OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:31         OLOA            U       OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:36         OLAO            U       OALO OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:41         OLAA            U       OALA OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:16:46         AOOO            U       OLOO OLOA OLAO OLAA AOOO"
  - "project_euler/problem_191/sol1.py:17:1          AOOA            U       AOOA AOOL AOAO AOAA AOAL"
  - "project_euler/problem_191/sol1.py:17:6          AOOL            U       AOOA AOOL AOAO AOAA AOAL AOLO"
  - "project_euler/problem_191/sol1.py:17:11         AOAO            U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA"
  - "project_euler/problem_191/sol1.py:17:16         AOAA            U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO"
  - "project_euler/problem_191/sol1.py:17:21         AOAL            U       AOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA"
  - "project_euler/problem_191/sol1.py:17:26         AOLO            U       AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:31         AOLA            U       AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:36         AAOO            U       AOAA AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:41         AAOA            U       AOAL AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:17:46         AAOL            U       AOLO AOLA AAOO AAOA AAOL"
  - "project_euler/problem_191/sol1.py:18:1          AALO            U       AALO AALA ALOO ALOA ALAO"
  - "project_euler/problem_191/sol1.py:18:6          AALA            U       AALO AALA ALOO ALOA ALAO ALAA"
  - "project_euler/problem_191/sol1.py:18:11         ALOO            U       AALO AALA ALOO ALOA ALAO ALAA LOOO"
  - "project_euler/problem_191/sol1.py:18:16         ALOA            U       AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA"
  - "project_euler/problem_191/sol1.py:18:21         ALAO            U       AALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO"
  - "project_euler/problem_191/sol1.py:18:26         ALAA            U       AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:31         LOOO            U       ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:36         LOOA            U       ALOA ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:41         LOAO            U       ALAO ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:18:46         LOAA            U       ALAA LOOO LOOA LOAO LOAA"
  - "project_euler/problem_191/sol1.py:19:1          LAOO            U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:6          LAOA            U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:19:11         LAAO            U       LAOO LAOA LAAO"
  - "project_euler/problem_191/sol1.py:68:57         unfold          U       possible ways that can unfold from"
  - "project_euler/problem_191/sol1.py:71:64         stays           U       the \"absent\" counter stays as"
  - "project_euler/problem_191/sol1.py:81:11         ontime          U       state_ontime = _calculate(days -"
  - "project_euler/problem_191/sol1.py:83:5          prizestrings    U       prizestrings = state_late + state"
  - "project_euler/problem_191/sol1.py:92:53         caching         U       recursive function with caching to speed it up."
  - "project_euler/problem_203/sol1.py:19:32         squarefree      U       integer n is called squarefree if no square of a prime"
  - "project_euler/problem_203/sol1.py:38:64         improvement     U       symmetric. A further improvement to this"
  - "project_euler/problem_203/sol1.py:63:9          squarefrees     U       def get_squarefrees(unique_coefficients"
  - "project_euler/problem_203/sol1.py:72:48         contrary        U       be negative. On the contrary, if any r exists such"
  - "project_euler/problem_205/sol1.py:4:28          pyramidal       U       has nine four-sided (pyramidal) dice, each with faces"
  - "project_euler/problem_205/sol1.py:5:1           Colin           U       Colin has six six-sided (cubic"
  - "project_euler/problem_205/sol1.py:10:30         Pyramidal       U       the probability that Pyramidal Peter beats Cubic Colin"
  - "project_euler/problem_205/sol1.py:53:5          colin           U       colin_totals_frequencies"
  - "project_euler/problem_205/sol1.py:66:11         games           U       total_games_number = (4**9) * ("
  - "project_euler/problem_207/sol1.py:33:13         significantly       U       To speed up significantly the search for partitions"
  - "project_euler/problem_207/sol1.py:37:50         drops               U       partitions / total partitions drops under the given value"
  - "project_euler/problem_234/sol1.py:9:23          semidivisible       U       call an integer n ≥ 4 semidivisible, if one of lps(n) and"
  - "project_euler/problem_234/sol1.py:12:42         exceeding           U       semidivisible numbers not exceeding 15 is 30, the numbers"
  - "project_euler/problem_301/sol1.py:5:36          stones      U       played with heaps of stones, where two players take"
  - "project_euler/problem_301/sol1.py:17:15         deduce      U       or attempt to deduce for yourself, X(n1,"
  - "project_euler/problem_493/sol1.py:4:13          balls           U       70 coloured balls are placed in an urn"
  - "project_euler/problem_493/sol1.py:4:66          rainbow         U       for each of the seven rainbow colours."
  - "project_euler/problem_493/sol1.py:6:62          bcdefghij       U       the decimal point (a.bcdefghij)."
  - "project_euler/problem_493/sol1.py:12:43         picking         U       total number of possible picking combinations"
  - "project_euler/problem_493/sol1.py:13:18         binom           U       [combinations := binom_coeff(70, 20)]"
  - "project_euler/problem_493/sol1.py:29:1          BALLS           U       BALLS_PER_COLOUR = 10"
  - "project_euler/problem_493/sol1.py:30:5          COLOURS         U       NUM_COLOURS = 7"
  - "project_euler/problem_493/sol1.py:34:18         picks           U       def solution(num_picks: int = 20) -> str:"
  - "project_euler/problem_551/sol1.py:28:18         greatly         U       is cached to greatly speed up the computation"
  - "project_euler/problem_551/sol1.py:34:20         calulcated      U       Term are calulcated until c > 10^k or the"
  - "project_euler/problem_551/sol1.py:83:26         jumped          U       _diff, terms_jumped = next_term(a_i, k"
  - "project_euler/problem_587/sol1.py:8:19          orange      U       We shall call the orange shaded region a concave"
  - "project_euler/problem_587/sol1.py:10:46         occupies    U       the concave triangle occupies exactly half of the"
  - "project_euler/problem_686/sol1.py:91:44         staring     U       first power leading to staring digits as 123,"
  - "project_euler/problem_800/sol1.py:4:70          hybrid      U       numbers p != q is called a hybrid-integer."
  - "project_euler/README.md:3:85        licensed            U       Euler. [Problems are licensed under CC BY-NC-SA 4"
  - "project_euler/README.md:5:64        programming         U       mathematical/computer programming problems that require"
  - "project_euler/README.md:8:369       durations           U       logs (under `slowest 10 durations`) and open a pull request"
  - "project_euler/README.md:11:13       Guidelines          U       ## Solution Guidelines"
  - "project_euler/README.md:13:256      repeated            U       NTRIBUTING.md) as it won't be repeated in here. If you have"
  - "project_euler/README.md:13:290      doubt               U       here. If you have any doubt on the guidelines, please"
  - "project_euler/README.md:17:19       consistency         U       * Please maintain consistency in project directory"
  - "project_euler/README.md:17:77       Keep                U       solution file names. Keep the following points"
  - "project_euler/README.md:20:130      occupy              U       filled with 0s so as to occupy 3 digits. Example:"
  - "project_euler/README.md:20:139      digits              U       s so as to occupy 3 digits. Example: `problem_"
  - "project_euler/README.md:26:24       helper              U       You can have as many helper functions as you want"
  - "project_euler/README.md:27:23       positional          U       * It should contain positional argument(s) whose default"
  - "project_euler/README.md:27:34       argument            U       should contain positional argument(s) whose default value"
  - "project_euler/README.md:28:56       arguments           U       is called without any arguments like so: `solution("
  - "project_euler/README.md:30:3        Every               U       * Every function, which includes"
  - "project_euler/README.md:30:25       includes            U       Every function, which includes all the helper functions"
  - "project_euler/README.md:30:161      brief               U       docstring along with a brief statement mentioning"
  - "project_euler/README.md:30:177      mentioning          U       with a brief statement mentioning what the function is"
  - "project_euler/README.md:54:148      brackets            U       content within `[square brackets]` (including the brackets"
  - "project_euler/README.md:58:54       original            U       number]: [link to the original problem]"
  - "project_euler/README.md:60:6        Entire              U       ... [Entire problem statement]"
  - "project_euler/README.md:66:4        Stackoverflow       U       - [Stackoverflow link]"
  - "project_euler/README.md:74:25       hint                U       helper1(arg1: [type hint], arg2: [type hint]"
  - "project_euler/README.md:81:6        Doctest             U       [Doctest]"
  - "quantum/q_fourier_transform.py:2:49         desire          U       transform (qft) for a desire"
  - "quantum/q_fourier_transform.py:3:30         Qiskit          U       of quantum bits using Qiskit framework. This"
  - "quantum/q_fourier_transform.py:4:25         simulator       U       experiment run in IBM Q simulator with 10000 shots."
  - "quantum/q_fourier_transform.py:4:46         shots           U       simulator with 10000 shots."
  - "quantum/q_fourier_transform.py:6:5          Shor's          U       the Shor's algorithm in quantum"
  - "quantum/q_fourier_transform.py:17:8         qiskit          U       import qiskit"
  - "quantum/q_fourier_transform.py:18:25        Classical       U       from qiskit import Aer, ClassicalRegister, QuantumCircuit"
  - "quantum/q_fourier_transform.py:21:41        qubits          U       transform(number_of_qubits: int = 3) -> qiskit"
  - "quantum/q_fourier_transform.py:86:32        qasm            U       backend = Aer.get_backend(\"qasm_simulator\")"
  - "quantum/README.md:3:1           Started         U       Started at https://github.com"
  - "quantum/README.md:8:3           Rigetti         U       * Rigetti: https://rigetti.com"
  - "quantum/README.md:9:3           Zapata          U       * Zapata: https://www.zapatacomputing"
  - "quantum/README.md:12:18         installing      U       - Start using by installing `pip install qiskit"
  - "quantum/README.md:13:3          Tutorials       U       - Tutorials & References"
  - "quantum/README.md:18:11         Cirq            U       ## Google Cirq"
  - "quantum/README.md:19:52         cirq            U       python -m pip install cirq`, refer the [docs](https"
  - "README.md:10:127        Ready               U       height=\"20\" alt=\"Gitpod Ready-to-Code\">"
  - "README.md:13:137        Contributions       U       square\" height=\"20\" alt=\"Contributions Welcome\">"
  - "README.md:17:140        chat                U       height=\"20\" alt=\"Discord chat\">"
  - "README.md:34:50         education           U       implemented in Python - for education</h3>"
  - "README.md:37:1          Implementations     U       Implementations are for learning purposes"
  - "README.md:37:85         implementations     U       less efficient than the implementations in the Python standard"
  - "README.md:37:150        discretion          U       library. Use them at your discretion."
  - "scheduling/first_come_first_served.py:1:45          scheduling      U       First Come First Served scheduling algorithm"
  - "scheduling/first_come_first_served.py:26:15         turnaround      U       def calculate_turnaround_times("
  - "scheduling/first_come_first_served.py:33:17         Practically     U       Practically waiting_time + duration"
  - "scheduling/first_come_first_served.py:101:53        Turnaround      U       Time\\tWaiting Time\\tTurnaround Time\")"
  - "scheduling/highest_response_ratio_next.py:2:30          HRRN            U       response ratio next (HRRN) scheduling is a non"
  - "scheduling/highest_response_ratio_next.py:2:56          preemptive      U       scheduling is a non-preemptive discipline."
  - "scheduling/highest_response_ratio_next.py:2:67          discipline      U       is a non-preemptive discipline."
  - "scheduling/highest_response_ratio_next.py:4:36          starvation      U       the problem of process starvation."
  - "scheduling/highest_response_ratio_next.py:14:45         burst           U       arrival_time: list, burst_time: list, no_of_process"
  - "scheduling/highest_response_ratio_next.py:111:27        Arrival         U       print(\"Process name \\tArrival time \\tBurst time \\tTurn"
  - "scheduling/highest_response_ratio_next.py:111:42        Burst           U       name \\tArrival time \\tBurst time \\tTurn around time"
  - "scheduling/job_sequence_with_deadline.py:2:36           deadline    U       of tasks, each with a deadline and reward, calculate"
  - "scheduling/job_sequence_with_deadline.py:2:49           reward      U       with a deadline and reward, calculate which tasks"
  - "scheduling/job_sequencing_with_deadline.py:1:9          sequencing      U       def job_sequencing_with_deadlines(jobs"
  - "scheduling/job_sequencing_with_deadline.py:1:25         deadlines       U       job_sequencing_with_deadlines(jobs: list) -> list"
  - "scheduling/job_sequencing_with_deadline.py:9:54         earned          U       Maximum profit that can be earned by doing jobs"
  - "scheduling/multi_level_feedback_queue.py:15:7           MLFQ            U       class MLFQ:"
  - "scheduling/multi_level_feedback_queue.py:32:27          mlfq's          U       # total number of mlfq's queues"
  - "scheduling/multi_level_feedback_queue.py:34:43          robin           U       of queues that round robin algorithm applied"
  - "scheduling/multi_level_feedback_queue.py:36:11          unfinished      U       # unfinished process is in this ready"
  - "scheduling/multi_level_feedback_queue.py:50:13          mlfq            U       >>> mlfq = MLFQ(3, [17, 25],"
  - "scheduling/multi_level_feedback_queue.py:150:26         served          U       def first_come_first_served(self, ready_queue: deque"
  - "scheduling/multi_level_feedback_queue.py:152:9          FCFS            U       FCFS(First Come, First Served"
  - "scheduling/multi_level_feedback_queue.py:153:33         MLFQ's          U       FCFS will be applied to MLFQ's last queue"
  - "scheduling/multi_level_feedback_queue.py:196:24         consume         U       If the process consume CPU up to time_slice"
  - "scheduling/multi_level_feedback_queue.py:206:65         terminated      U       # sequence deque of terminated process"
  - "scheduling/multi_level_feedback_queue.py:281:21         extraglobs      U       doctest.testmod(extraglobs={\"queue\": deque([P1"
  - "scheduling/non_preemptive_shortest_job_first.py:70:15       turnaroundtime      U       def calculate_turnaroundtime("
  - "scheduling/shortest_job_first.py:33:5           minm        U       minm = 999999999"
  - "scheduling/shortest_job_first.py:66:13          finar       U       finar = finish_time - arrival"
  - "scheduling/shortest_job_first.py:140:5          fcfs        U       fcfs = pd.DataFrame("
  - "scripts/build_directory_md.py:17:59         ipynb       U       filename)[1] in (\".py\", \".ipynb\"):"
  - "scripts/validate_filenames.py:7:71          redef       U       paths # type: ignore[no-redef]"
  - "scripts/validate_filenames.py:22:1          hyphen      U       hyphen_files = [file for file"
  - "scripts/validate_filenames.py:27:1          nodir       U       nodir_files = [file for file"
  - "scripts/validate_solutions.py:12:9          EULER       U       PROJECT_EULER_DIR_PATH = pathlib.Path"
  - "scripts/validate_solutions.py:13:15         ANSWERS     U       PROJECT_EULER_ANSWERS_PATH = pathlib.Path"
  - "scripts/validate_solutions.py:30:8          Collects    U       \"\"\"Collects all the solution file"
  - "searches/binary_search.py:22:5          Locates             U       Locates the first element in"
  - "searches/binary_search.py:185:5         unpredictable       U       unpredictable"
  - "searches/binary_tree_traversal.py:39:23         Something       U       raise ValueError(\"Something went wrong\")"
  - "searches/binary_tree_traversal.py:39:33         went            U       ValueError(\"Something went wrong\")"
  - "searches/fibonacci_search.py:110:13         fibb        U       fibb_k = i"
  - "searches/fibonacci_search.py:117:14         Prevent     U       ) # Prevent out of range"
  - "searches/hill_climbing.py:8:27          illustrated     U       The interface will be illustrated using the example of"
  - "searches/hill_climbing.py:86:10         climbing        U       def hill_climbing("
  - "searches/hill_climbing.py:97:32         climbling       U       Implementation of the hill climbling algorithm."
  - "searches/hill_climbing.py:136:52        ascent          U       direction with greatest ascent"
  - "searches/median_of_medians.py:3:11          pivots                  U       to select pivots for quick_select, which"
  - "searches/median_of_medians.py:7:1           deterministically       U       deterministically"
  - "searches/simulated_annealing.py:9:5         simulated       U       def simulated_annealing("
  - "searches/simulated_annealing.py:9:15        annealing       U       def simulated_annealing("
  - "searches/simulated_annealing.py:17:11       temperate       U       start_temperate: float = 100,"
  - "searches/tabu_search.py:2:67        Travelling      U       search algorithm for a Travelling Salesman"
  - "searches/tabu_search.py:2:78        Salesman        U       algorithm for a Travelling Salesman"
  - "searches/tabu_search.py:23:8        tabu            U       python tabu_search.py -f your_file"
  - "searches/tabu_search.py:25:31       tabudata        U       python tabu_search.py -f tabudata2.txt -i 4 -s 3"
  - "searches/tabu_search.py:101:9       minim           U       minim = 10000"
  - "searches/tabu_search.py:203:76      occurred        U       lowest distance that occurred"
  - "searches/ternary_search.py:37:34        looked      U       index of element that is looked for."
  - "searches/ternary_search.py:62:9         ternary     U       def ite_ternary_search(array: list[int"
  - "sorts/bead_sort.py:7:5          bead    U       def bead_sort(sequence: list"
  - "sorts/bitonic_sort.py:14:62         ASCENDING       U       the sorting direction, ASCENDING(1) or"
  - "sorts/bitonic_sort.py:15:5          DESCENDING      U       DESCENDING(0); if (a[i] > a[j]"
  - "sorts/bitonic_sort.py:15:37         agrees          U       ); if (a[i] > a[j]) agrees with the direction,"
  - "sorts/bitonic_sort.py:16:5          interchanged    U       interchanged."
  - "sorts/bitonic_sort.py:41:5          bitonic         U       def bitonic_merge(array: list[int"
  - "sorts/bogo_sort.py:2:45         bogosort            U       implementation of the bogosort algorithm,"
  - "sorts/bogo_sort.py:3:33         stupid              U       as permutation sort, stupid sort, slowsort, shotgun"
  - "sorts/bogo_sort.py:3:46         slowsort            U       ermutation sort, stupid sort, slowsort, shotgun sort, or monkey"
  - "sorts/bogo_sort.py:3:56         shotgun             U       stupid sort, slowsort, shotgun sort, or monkey sort"
  - "sorts/bogo_sort.py:4:1          Bogosort            U       Bogosort generates random permutations"
  - "sorts/bogo_sort.py:9:22         bogo                U       python -m doctest -v bogo_sort.py"
  - "sorts/bogo_sort.py:21:61        heterogeneous       U       ordered collection with heterogeneous"
  - "sorts/bucket_sort.py:9:4            distributing    U       by distributing the elements of an array"
  - "sorts/bucket_sort.py:12:29          cousin          U       distribution sort, and is a cousin of radix sort in the"
  - "sorts/bucket_sort.py:13:19          flavour         U       significant digit flavour."
  - "sorts/bucket_sort.py:14:36          pigeonhole      U       a generalization of pigeonhole sort. Bucket sort can"
  - "sorts/bucket_sort.py:20:1           Worst           U       Worst case scenario occurs"
  - "sorts/bucket_sort.py:20:12          scenario        U       Worst case scenario occurs when all the"
  - "sorts/bucket_sort.py:21:39          dominated       U       performance would then be dominated by the algorithm used"
  - "sorts/cocktail_shaker_sort.py:2:26          cocktail        U       implementation of the cocktail shaker sort algorithm"
  - "sorts/cocktail_shaker_sort.py:2:35          shaker          U       mplementation of the cocktail shaker sort algorithm in pure"
  - "sorts/cocktail_shaker_sort.py:25:32         elderberry      U       cocktail_shaker_sort([\"elderberry\", \"banana\", \"date\","
  - "sorts/comb_sort.py:3:52         originally      U       simple sorting algorithm originally designed by Wlodzimierz"
  - "sorts/comb_sort.py:3:75         Wlodzimierz     U       originally designed by Wlodzimierz"
  - "sorts/comb_sort.py:4:1          Dobosiewicz     U       Dobosiewicz in 1980. It was rediscovered"
  - "sorts/comb_sort.py:4:30         rediscovered    U       Dobosiewicz in 1980. It was rediscovered by Stephen Lacey and"
  - "sorts/comb_sort.py:4:54         Lacey           U       rediscovered by Stephen Lacey and Richard Box in"
  - "sorts/comb_sort.py:7:80         slowing         U       in order to prevent slowing"
  - "sorts/comb_sort.py:35:5         shrink          U       shrink_factor = 1.3"
  - "sorts/counting_sort.py:30:5         coll                U       coll_len = len(collection"
  - "sorts/counting_sort.py:50:41        respecting          U       elements in the output, respecting the original order"
  - "sorts/counting_sort.py:61:31        thisisthestring     U       counting_sort_string(\"thisisthestring\")"
  - "sorts/counting_sort.py:62:6         eghhiiinrsssttt     U       'eghhiiinrsssttt'"
  - "sorts/cycle_sort.py:2:6         contributed     U       Code contributed by Honey Sharma"
  - "sorts/cycle_sort.py:2:21        Honey           U       Code contributed by Honey Sharma"
  - "sorts/dutch_national_flag_sort.py:8:17          Netherlands     U       The flag of the Netherlands consists of three colors"
  - "sorts/dutch_national_flag_sort.py:47:35         abacab          U       national_flag_sort(\"abacab\")"
  - "sorts/dutch_national_flag_sort.py:51:35         Abacab          U       national_flag_sort(\"Abacab\")"
  - "sorts/external_sort.py:82:9         unshift     U       def unshift(self, index):"
  - "sorts/external_sort.py:89:11        Merger      U       class FileMerger:"
  - "sorts/external_sort.py:118:9        merger      U       merger = FileMerger(NWayMerge"
  - "sorts/gnome_sort.py:2:30        Stupid              U       Sort Algorithm (A.K.A. Stupid Sort)"
  - "sorts/gnome_sort.py:5:31        swaps               U       is not respected, it swaps element backward until"
  - "sorts/gnome_sort.py:6:23        resumes             U       previous element. It resumes the initial iteration"
  - "sorts/gnome_sort.py:9:23        gnome               U       python3 -m doctest -v gnome_sort.py"
  - "sorts/gnome_sort.py:33:38       Gnomes              U       gnome_sort(list(set(\"Gnomes are stupid!\"))))"
  - "sorts/gnome_sort.py:34:8        Gadeimnoprstu       U       ' !Gadeimnoprstu'"
  - "sorts/intro_sort.py:2:1         Introspective       U       Introspective Sort is a hybrid sort"
  - "sorts/iterative_merge_sort.py:3:9           Aman    U       Author: Aman Gupta"
  - "sorts/iterative_merge_sort.py:49:34         dang    U       merge_sort(['dep', 'dang', 'trai'])"
  - "sorts/iterative_merge_sort.py:49:42         trai    U       sort(['dep', 'dang', 'trai'])"
  - "sorts/merge_insertion_sort.py:124:60        unnecessary     U       so that you can avoid unnecessary comparison."
  - "sorts/msd_radix_sort.py:71:7        recombine       U       # recombine lists"
  - "sorts/natural_sort.py:8:52          humans                  U       strings in the way that humans expect."
  - "sorts/natural_sort.py:10:44         lexicographically       U       sort algorithm sorts lexicographically,"
  - "sorts/natural_sort.py:27:9          alphanum                U       def alphanum_key(key):"
  - "sorts/normal_distribution_quick_sort.md:7:74        mean            U       Distribution, having mean = 0 and standard deviation"
  - "sorts/normal_distribution_quick_sort.md:13:12       numpy           U       >>> import numpy as np"
  - "sorts/normal_distribution_quick_sort.md:32:12       bins            U       >>> count, bins, ignored = plt.hist"
  - "sorts/normal_distribution_quick_sort.md:32:18       ignored         U       >>> count, bins, ignored = plt.hist(s, 30, normed"
  - "sorts/normal_distribution_quick_sort.md:32:44       normed          U       ignored = plt.hist(s, 30, normed=True)"
  - "sorts/normal_distribution_quick_sort.md:44:30       Checking        U       plot the function for Checking 'The Number of Comparisons"
  - "sorts/normal_distribution_quick_sort.md:44:54       Comparisons     U       Checking 'The Number of Comparisons' taking place between"
  - "sorts/normal_distribution_quick_sort.md:44:74       place           U       Comparisons' taking place between Normal Distribution"
  - "sorts/normal_distribution_quick_sort.md:47:12       matplotlib      U       >>> import matplotlib.pyplot as plt"
  - "sorts/normal_distribution_quick_sort.md:47:23       pyplot          U       > import matplotlib.pyplot as plt"
  - "sorts/odd_even_sort.py:15:16        interconnections    U       with local interconnections."
  - "sorts/odd_even_sort.py:48:7         inputing            U       # inputing elements of the list"
  - "sorts/odd_even_transposition_parallel.py:8:14           communicates        U       each process communicates with its neighboring"
  - "sorts/odd_even_transposition_parallel.py:11:1           synchronization     U       synchronization could be used."
  - "sorts/odd_even_transposition_parallel.py:102:34         safer               U       method is considered safer than fork"
  - "sorts/odd_even_transposition_parallel.py:107:61         retrieved           U       where the values will be retrieved"
  - "sorts/odd_even_transposition_single_threaded.py:4:15        parallelized        U       This is a non-parallelized implementation of odd"
  - "sorts/odd_even_transposition_single_threaded.py:6:1         Normally            U       Normally the swaps in each set"
  - "sorts/odd_even_transposition_single_threaded.py:6:39        simultaneously      U       swaps in each set happen simultaneously, without that the algorithm"
  - "sorts/pancake_sort.py:2:45          pancake     U       implementation of the pancake sort algorithm"
  - "sorts/patience_sort.py:8:37         patience    U       implementation of the patience sort algorithm"
  - "sorts/pigeon_sort.py:5:23           pigeon      U       python3 -m doctest -v pigeon_sort.py"
  - "sorts/pigeon_sort.py:34:5           holes       U       holes_range = _max - _min"
  - "sorts/pigeonhole_sort.py:9:28           nondestructive      U       b = sorted(a) # a nondestructive sort"
  - "sorts/pigeonhole_sort.py:10:33          destructive         U       pigeonhole_sort(a) # a destructive sort"
  - "sorts/pigeonhole_sort.py:14:58          pigeonholes         U       list (ie, number of pigeonholes we need)"
  - "sorts/pigeonhole_sort.py:29:7           Putting             U       # Putting the elements back into"
  - "sorts/quick_sort_3_partition.py:44:16       lomuto      U       def quick_sort_lomuto_partition(sorting: list"
  - "sorts/quick_sort_3_partition.py:47:10       Lomuto      U       with Lomuto partition scheme:"
  - "sorts/radix_sort.py:9:1         RADIX       U       RADIX = 10"
  - "sorts/README.md:1:3         Sorting         U       # Sorting Algorithms"
  - "sorts/README.md:2:27        putting         U       Sorting is the process of putting data in a specific order"
  - "sorts/README.md:3:21        sorting         U       is specified by the sorting algorithm. The most"
  - "sorts/README.md:3:49        typical         U       algorithm. The most typical orders are lexical or"
  - "sorts/README.md:3:68        lexical         U       most typical orders are lexical or numerical. The significanc"
  - "sorts/README.md:3:94        significance    U       lexical or numerical. The significance"
  - "sorts/README.md:4:102       optimised       U       searching can be highly optimised."
  - "sorts/README.md:7:95        various         U       sorting algorithms in various scenarios."
  - "sorts/README.md:7:103       scenarios       U       algorithms in various scenarios."
  - "sorts/recursive_mergesort_array.py:38:30        lowers      U       : # Runs until the lowers size of the left and"
  - "sorts/shell_sort.py:19:7        Marcin      U       # Marcin Ciura's gap sequence"
  - "sorts/shell_sort.py:19:14       Ciura's     U       # Marcin Ciura's gap sequence"
  - "sorts/shrink_shell_sort.py:6:1          shrinks     U       shrinks by a certain factor"
  - "sorts/slowsort.py:2:43          humorous        U       algorithm. It is of humorous nature and not useful"
  - "sorts/slowsort.py:3:45          surrender       U       principle of multiply and surrender,"
  - "sorts/slowsort.py:4:3           tongue          U       a tongue-in-cheek joke of divide"
  - "sorts/slowsort.py:4:13          cheek           U       a tongue-in-cheek joke of divide and conquer"
  - "sorts/slowsort.py:4:19          joke            U       a tongue-in-cheek joke of divide and conquer"
  - "sorts/slowsort.py:5:29          Andrei          U       published in 1986 by Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:5:36          Broder          U       published in 1986 by Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:5:47          Jorge           U       by Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:5:53          Stolfi          U       Andrei Broder and Jorge Stolfi"
  - "sorts/slowsort.py:6:16          Pessimal        U       in their paper Pessimal Algorithms and Simplexity"
  - "sorts/slowsort.py:6:40          Simplexity      U       Pessimal Algorithms and Simplexity Analysis"
  - "sorts/slowsort.py:7:4           parody          U       (a parody of optimal algorithms"
  - "sorts/stooge_sort.py:1:5            stooge      U       def stooge_sort(arr: list[int]"
  - "sorts/topological_sort.py:19:47         acyclic     U       opological sort on a directed acyclic graph.\"\"\""
  - "sorts/tree_sort.py:4:45         thru (through)      U       Tree and then iterate thru it to get a sorted list"
  - "sorts/unknown_sort.py:3:11          Scenario    U       Best Case Scenario : O(n)"
  - "sorts/wiggle_sort.py:12:5           wiggle      U       def wiggle_sort(nums: list) ->"
  - "strings/aho_corasick.py:6:7         Automaton       U       class Automaton:"
  - "strings/aho_corasick.py:8:14        adlist          U       self.adlist: list[dict] = []"
  - "strings/aho_corasick.py:70:46       wherever        U       whatever, err ... , wherever\")"
  - "strings/alternative_string_arrange.py:8:6           AXBYCD      U       'AXBYCD'"
  - "strings/alternative_string_arrange.py:10:6          XAYBCD      U       'XAYBCD'"
  - "strings/alternative_string_arrange.py:12:6          AXBYZ       U       'AXBYZ'"
  - "strings/anagrams.py:11:6        estt            U       'estt'"
  - "strings/anagrams.py:13:9        aehiisssttt     U       ' aehiisssttt'"
  - "strings/anagrams.py:15:6        aefilnstt       U       'aefilnstt'"
  - "strings/anagrams.py:20:5        anagram         U       def anagram(my_word: str) -> list"
  - "strings/anagrams.py:23:7        sett            U       ['sett', 'stet', 'test']"
  - "strings/anagrams.py:23:15       stet            U       ['sett', 'stet', 'test']"
  - "strings/anagrams.py:40:9        anagrams        U       all_anagrams = {word: anagram(word"
  - "strings/autocomplete_using_trie.py:36:11        depart          U       words = (\"depart\", \"detergent\", \"daring"
  - "strings/autocomplete_using_trie.py:36:21        detergent       U       words = (\"depart\", \"detergent\", \"daring\", \"dog\","
  - "strings/autocomplete_using_trie.py:36:34        daring          U       depart\", \"detergent\", \"daring\", \"dog\", \"deer\", \"deal"
  - "strings/autocomplete_using_trie.py:36:51        deer            U       , \"daring\", \"dog\", \"deer\", \"deal\")"
  - "strings/barcode_validator.py:48:18          dwefgiweuf      U       >>> is_valid(dwefgiweuf)"
  - "strings/bitap_string_match.py:13:23         bitap               U       python3 -m doctest -v bitap_string_match.py"
  - "strings/bitap_string_match.py:28:29         abdabababc          U       bitap_string_match('abdabababc', 'ababc')"
  - "strings/bitap_string_match.py:28:43         ababc               U       match('abdabababc', 'ababc')"
  - "strings/bitap_string_match.py:32:29         zxywsijdfosdfnso    U       bitap_string_match('zxywsijdfosdfnso', 'zxywsijdfosdfnso"
  - "strings/bitap_string_match.py:38:43         fofosdfo            U       match('abdabababc', 'fofosdfo')"
  - "strings/bitap_string_match.py:40:29         abdab               U       bitap_string_match('abdab', 'fofosdfo')"
  - "strings/boyer_moore_search.py:4:38          mismatched      U       character rule considers the mismatched character in Text."
  - "strings/boyer_moore_search.py:11:36         entirety        U       proposed that moves the entirety of Pattern past"
  - "strings/boyer_moore_search.py:78:9          ABAABA          U       text = \"ABAABA\""
  - "strings/camel_case_to_snake_case.py:1:5         camel           U       def camel_to_snake_case(input"
  - "strings/camel_case_to_snake_case.py:35:36       proceeded       U       char is lowercase but proceeded by a digit:"
  - "strings/can_string_be_rearranged_as_palindrome.py:1:14          susmith         U       # Created by susmith98"
  - "strings/can_string_be_rearranged_as_palindrome.py:16:17         Palindromes     U       Examples of Palindromes mom, dad, malayalam"
  - "strings/can_string_be_rearranged_as_palindrome.py:17:57         Momo            U       palindrome_counter(\"Momo\")"
  - "strings/can_string_be_rearranged_as_palindrome.py:19:57         Mother          U       palindrome_counter(\"Mother\")"
  - "strings/can_string_be_rearranged_as_palindrome.py:21:57         Father          U       palindrome_counter(\"Father\")"
  - "strings/can_string_be_rearranged_as_palindrome.py:23:72         canal           U       counter(\"A man a plan a canal Panama\")"
  - "strings/can_string_be_rearranged_as_palindrome.py:23:78         Panama          U       A man a plan a canal Panama\")"
  - "strings/can_string_be_rearranged_as_palindrome.py:54:8          Incrementing    U       2) Incrementing the frequency of current"
  - "strings/can_string_be_rearranged_as_palindrome.py:65:5          LOGIC           U       LOGIC:"
  - "strings/can_string_be_rearranged_as_palindrome.py:85:11         tans            U       \"\\tans =\","
  - "strings/capitalize.py:6:5           Capitalizes     U       Capitalizes the first letter of"
  - "strings/capitalize.py:24:23         capitalized     U       # Concatenate the capitalized character with the rest"
  - "strings/check_anagrams.py:11:14         differently     U       arranged differently (ignoring the case)"
  - "strings/count_vowels.py:1:11        vowels      U       def count_vowels(s: str) -> int:"
  - "strings/count_vowels.py:27:15       aeiou       U       vowels = \"aeiouAEIOU\""
  - "strings/count_vowels.py:27:20       AEIOU       U       vowels = \"aeiouAEIOU\""
  - "strings/credit_card_validator.py:62:65          nonnumerical    U       number because it has nonnumerical characters."
  - "strings/damerau_levenshtein_distance.py:11:5        damerau         U       def damerau_levenshtein_distance"
  - "strings/damerau_levenshtein_distance.py:25:39       kitten          U       levenshtein_distance(\"kitten\", \"sitting\")"
  - "strings/damerau_levenshtein_distance.py:25:49       sitting         U       distance(\"kitten\", \"sitting\")"
  - "strings/damerau_levenshtein_distance.py:31:52       containment     U       distance(\"container\", \"containment\")"
  - "strings/detecting_english_programmatically.py:16:1          ENGLISH         U       ENGLISH_WORDS = load_dictionary"
  - "strings/detecting_english_programmatically.py:36:6          wwwgooglecom    U       'wwwgooglecom'"
  - "strings/detecting_english_programmatically.py:49:21         llold           U       >>> is_english('llold HorWd')"
  - "strings/dna.py:9:14         GCTA    U       >>> dna(\"GCTA\")"
  - "strings/dna.py:10:6         CGAT    U       'CGAT'"
  - "strings/dna.py:11:14        ATGC    U       >>> dna(\"ATGC\")"
  - "strings/dna.py:12:6         TACG    U       'TACG'"
  - "strings/dna.py:13:14        CTGA    U       >>> dna(\"CTGA\")"
  - "strings/dna.py:14:6         GACT    U       'GACT'"
  - "strings/dna.py:15:14        GFGG    U       >>> dna(\"GFGG\")"
  - "strings/dna.py:21:25        ATCG    U       if len(re.findall(\"[ATCG]\", dna)) != len(dna"
  - "strings/dna.py:24:49        TAGC    U       dna.maketrans(\"ATCG\", \"TAGC\"))"
  - "strings/edit_distance.py:3:70           quantifying     U       i.e., it is a way of quantifying how"
  - "strings/edit_distance.py:4:5            dissimilar      U       dissimilar two strings are to one"
  - "strings/edit_distance.py:15:24          GATTIC          U       >>> edit_distance(\"GATTIC\", \"GALTIC\")"
  - "strings/edit_distance.py:15:34          GALTIC          U       distance(\"GATTIC\", \"GALTIC\")"
  - "strings/edit_distance.py:32:26          ATCGCTG         U       print(edit_distance(\"ATCGCTG\", \"TAGCTAA\")) # Answer"
  - "strings/edit_distance.py:32:37          TAGCTAA         U       distance(\"ATCGCTG\", \"TAGCTAA\")) # Answer is 4"
  - "strings/frequency_finder.py:34:1        ETAOIN                          U       ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ"
  - "strings/frequency_finder.py:34:11       ETAOINSHRDLCUMWFGYPBVKJXQZ      U       ETAOIN = \"ETAOINSHRDLCUMWFGYPBVKJXQZ\""
  - "strings/frequency_finder.py:55:6        LOWDRHEZQXJKVBPYGFMUCSNIAT      U       'LOWDRHEZQXJKVBPYGFMUCSNIAT'"
  - "strings/frequency_finder.py:57:6        LHOEZQXJKVBPYGFWMUCDRSNIAT      U       'LHOEZQXJKVBPYGFWMUCDRSNIAT'"
  - "strings/frequency_finder.py:59:6        HZQXJKVBPYGFWMUCLDRSNIOATE      U       'HZQXJKVBPYGFWMUCLDRSNIOATE'"
  - "strings/frequency_finder.py:93:9        uncommon                        U       for uncommon_letter in ETAOIN[-6"
  - "strings/hamming_distance.py:16:27       karolin     U       > hamming_distance(\"karolin\", \"kathrin\")"
  - "strings/hamming_distance.py:16:38       kathrin     U       distance(\"karolin\", \"kathrin\")"
  - "strings/hamming_distance.py:20:38       kath        U       distance(\"karolin\", \"kath\")"
  - "strings/is_contains_unique_chars.py:4:37        love        U       contains_unique_chars(\"I_love.py\")"
  - "strings/is_contains_unique_chars.py:21:25       turned      U       # If we already turned on bit for current character"
  - "strings/is_isogram.py:6:8           isogram             U       def is_isogram(string: str) -> bool"
  - "strings/is_isogram.py:9:17          isograms            U       Examples of isograms are uncopyrightable"
  - "strings/is_isogram.py:9:30          uncopyrightable     U       Examples of isograms are uncopyrightable and ambidextrously."
  - "strings/is_isogram.py:9:50          ambidextrously      U       uncopyrightable and ambidextrously."
  - "strings/is_isogram.py:10:21         Uncopyrightable     U       >>> is_isogram('Uncopyrightable')"
  - "strings/is_pangram.py:6:8           pangram     U       def is_pangram("
  - "strings/is_pangram.py:13:21         Waltz       U       >>> is_pangram(\"Waltz, bad nymph, for quick"
  - "strings/is_pangram.py:13:32         nymph       U       pangram(\"Waltz, bad nymph, for quick jigs vex"
  - "strings/is_pangram.py:13:49         jigs        U       bad nymph, for quick jigs vex.\")"
  - "strings/is_pangram.py:15:21         Jived       U       >>> is_pangram(\"Jived fox nymph grabs quick"
  - "strings/is_pangram.py:15:37         grabs       U       pangram(\"Jived fox nymph grabs quick waltz.\")"
  - "strings/is_pangram.py:15:49         waltz       U       fox nymph grabs quick waltz.\")"
  - "strings/is_pangram.py:24:7          Declare     U       # Declare frequency as a set to"
  - "strings/is_polish_national_id.py:1:8            polish          U       def is_polish_national_id(input_str"
  - "strings/is_polish_national_id.py:3:25           correctness     U       Verification of the correctness of the PESEL number"
  - "strings/is_polish_national_id.py:3:44           PESEL           U       the correctness of the PESEL number."
  - "strings/is_polish_national_id.py:4:39           czym            U       translate.goog/web/gov/czym-jest-numer-pesel?_x"
  - "strings/is_polish_national_id.py:4:44           jest            U       translate.goog/web/gov/czym-jest-numer-pesel?_x_tr_sl"
  - "strings/is_polish_national_id.py:4:49           numer           U       goog/web/gov/czym-jest-numer-pesel?_x_tr_sl=auto"
  - "strings/is_polish_national_id.py:4:55           pesel           U       gov/czym-jest-numer-pesel?_x_tr_sl=auto&_x_tr"
  - "strings/is_polish_national_id.py:74:5           multipliers     U       multipliers = [1, 3, 7, 9, 1, 3"
  - "strings/is_spain_national_id.py:2:19        TRWAGMYFPDXBNJZSQVHLCKE     U       LOOKUP_LETTERS = \"TRWAGMYFPDXBNJZSQVHLCKE\""
  - "strings/is_spain_national_id.py:5:8         spain                       U       def is_spain_national_id(spanish"
  - "strings/is_spain_national_id.py:5:26        spanish                     U       is_spain_national_id(spanish_id: str) -> bool:"
  - "strings/is_spain_national_id.py:9:18        didn't                      U       checking you didn't do a mistake when entering"
  - "strings/is_spain_national_id.py:16:57       insensitive                 U       78z\") # It is case-insensitive"
  - "strings/is_srilankan_phone_number.py:4:12           lankan      U       def is_sri_lankan_phone_number(phone:"
  - "strings/is_valid_email_address.py:17:22         strange             U       (\"example-indeed@strange-example.com\", True)"
  - "strings/is_valid_email_address.py:33:14         underscores         U       (\"i.like.underscores@but_its_not_allowed"
  - "strings/is_valid_email_address.py:39:16         OCTETS              U       MAX_LOCAL_PART_OCTETS = 64"
  - "strings/is_valid_email_address.py:47:33         precedes            U       local part of the email precedes the singular @ symbol"
  - "strings/is_valid_email_address.py:48:54         john                U       name. For example, \"john.smith\""
  - "strings/is_valid_email_address.py:49:19         stricter            U       The domain is stricter than the local part"
  - "strings/is_valid_email_address.py:52:62         Technically         U       in the email address. Technically if the"
  - "strings/is_valid_email_address.py:63:60         consecutively       U       have more than one \".\" consecutively."
  - "strings/is_valid_email_address.py:67:9          Hyphen              U       6. Hyphen \"-\", provided that it"
  - "strings/jaro_winkler.py:4:5         jaro        U       def jaro_winkler(str1: str, str"
  - "strings/jaro_winkler.py:4:10        winkler     U       def jaro_winkler(str1: str, str2: str"
  - "strings/jaro_winkler.py:10:23       martha      U       >>> jaro_winkler(\"martha\", \"marhta\")"
  - "strings/jaro_winkler.py:10:33       marhta      U       jaro_winkler(\"martha\", \"marhta\")"
  - "strings/jaro_winkler.py:12:23       CRATE       U       >>> jaro_winkler(\"CRATE\", \"TRACE\")"
  - "strings/jaro_winkler.py:14:31       dbdbdbdb    U       jaro_winkler(\"test\", \"dbdbdbdb\")"
  - "strings/join.py:8:5         Joins       U       Joins a list of strings using"
  - "strings/knuth_morris_pratt.py:4:18          pratt                       U       def knuth_morris_pratt(text: str, pattern:"
  - "strings/knuth_morris_pratt.py:72:14         alskfjaldsabc               U       text1 = \"alskfjaldsabc1abc1abc12k23adsfabcabc"
  - "strings/knuth_morris_pratt.py:72:40         adsfabcabc                  U       alskfjaldsabc1abc1abc12k23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:73:14         alskfjaldsk                 U       text2 = \"alskfjaldsk23adsfabcabc\""
  - "strings/knuth_morris_pratt.py:78:16         ABABX                       U       pattern = \"ABABX\""
  - "strings/knuth_morris_pratt.py:79:13         ABABZABABYABABX             U       text = \"ABABZABABYABABX\""
  - "strings/knuth_morris_pratt.py:83:16         AAAB                        U       pattern = \"AAAB\""
  - "strings/knuth_morris_pratt.py:84:13         ABAAAAAB                    U       text = \"ABAAAAAB\""
  - "strings/knuth_morris_pratt.py:88:16         abcdabcy                    U       pattern = \"abcdabcy\""
  - "strings/knuth_morris_pratt.py:89:13         abcxabcdabxabcdabcdabcy     U       text = \"abcxabcdabxabcdabcdabcy\""
  - "strings/knuth_morris_pratt.py:100:16        aabaabaaa                   U       pattern = \"aabaabaaa\""
  - "strings/levenshtein_distance.py:11:41       planetary           U       distance(\"planet\", \"planetary\")"
  - "strings/levenshtein_distance.py:23:31       orchestration       U       levenshtein_distance(\"orchestration\", \"container\")"
  - "strings/levenshtein_distance.py:39:25       insertions          U       # Calculate insertions, deletions, and substitutions"
  - "strings/levenshtein_distance.py:39:52       substitutions       U       insertions, deletions, and substitutions"
  - "strings/levenshtein_distance.py:57:49       modifying           U       optimized for efficiency by modifying rows in place."
  - "strings/levenshtein_distance.py:102:48      benchmarked         U       of the function being benchmarked."
  - "strings/lower.py:7:16           Hell        U       >>> lower(\"HellZo\")"
  - "strings/lower.py:8:6            hellzo      U       'hellzo'"
  - "strings/manacher.py:3:29        abbbaba         U       palindromic_string('abbbaba')"
  - "strings/manacher.py:4:6         abbba           U       'abbba'"
  - "strings/manacher.py:5:29        ababa           U       palindromic_string('ababa')"
  - "strings/manacher.py:8:5         Manacher's      U       Manacher's algorithm which finds"
  - "strings/manacher.py:30:57       furthest        U       and ending of previous furthest ending palindromic"
  - "strings/manacher.py:84:27       distant         U       and a4 are equally distant from a3 so char(a2)"
  - "strings/min_cost_string_conversion.py:76:5          assemble        U       def assemble_transformation(ops:"
  - "strings/min_cost_string_conversion.py:78:5          Assembles       U       Assembles the transformations"
  - "strings/naive_string_search.py:14:31        ABAAABCDBBABCDDEBCABC       U       naive_pattern_search(\"ABAAABCDBBABCDDEBCABC\", \"ABC\")"
  - "strings/naive_string_search.py:22:31        ABCDEGFTEST                 U       naive_pattern_search(\"ABCDEGFTEST\", \"TEST\")"
  - "strings/ngram.py:6:12           ngram       U       def create_ngram(sentence: str, ngram"
  - "strings/ngram.py:8:12           ngrams      U       Create ngrams from a sentence"
  - "strings/palindrome.py:13:6          amanaplanacanalpanama       U       \"amanaplanacanalpanama\": True, # \"a man a"
  - "strings/palindrome.py:13:61         panama                      U       a man a plan a canal panama\""
  - "strings/pig_latin.py:2:20           piglatin        U       \"\"\"Compute the piglatin of a given string."
  - "strings/pig_latin.py:8:6            igpay           U       'igpay'"
  - "strings/pig_latin.py:10:6           atinlay         U       'atinlay'"
  - "strings/pig_latin.py:12:6           ananabay        U       'ananabay'"
  - "strings/pig_latin.py:13:20          friends         U       >>> pig_latin(\"friends\")"
  - "strings/pig_latin.py:14:6           iendsfray       U       'iendsfray'"
  - "strings/pig_latin.py:15:20          smile           U       >>> pig_latin(\"smile\")"
  - "strings/pig_latin.py:16:6           ilesmay         U       'ilesmay'"
  - "strings/pig_latin.py:18:6           ingstray        U       'ingstray'"
  - "strings/pig_latin.py:21:20          omelet          U       >>> pig_latin(\"omelet\")"
  - "strings/pig_latin.py:22:6           omeletway       U       'omeletway'"
  - "strings/pig_latin.py:24:6           areway          U       'areway'"
  - "strings/prefix_function.py:17:34        coincidence     U       represents the longest coincidence of prefix and suffix"
  - "strings/prefix_function.py:22:26        aabcdaabc       U       >> prefix_function(\"aabcdaabc\")"
  - "strings/prefix_function.py:24:26        asdasdad        U       >> prefix_function(\"asdasdad\")"
  - "strings/prefix_function.py:53:25        abcab           U       >>> longest_prefix(\"abcab\")"
  - "strings/rabin_karp.py:7:11          karp        U       def rabin_karp(pattern: str, text:"
  - "strings/rabin_karp.py:83:13         Lüsai       U       text = \"Lüsai\""
  - "strings/reverse_letters.py:6:30         wollef      U       reverse_letters(\"Hey wollef sroirraw\", 3)"
  - "strings/reverse_letters.py:6:37         sroirraw    U       letters(\"Hey wollef sroirraw\", 3)"
  - "strings/reverse_letters.py:7:10         fellow      U       'Hey fellow warriors'"
  - "strings/reverse_letters.py:7:17         warriors    U       'Hey fellow warriors'"
  - "strings/reverse_letters.py:8:26         nohty       U       >> reverse_letters(\"nohtyP is nohtyP\", 2)"
  - "strings/reverse_letters.py:12:26        racecar     U       >> reverse_letters(\"racecar\")"
  - "strings/reverse_words.py:3:5            Reverses    U       Reverses words in a given string"
  - "strings/reverse_words.py:6:30           Love        U       reverse_words(\"I Love Python\")"
  - "strings/split.py:18:17          abbb    U       >>> split(\";abbb;;c;\", separator=';'"
  - "strings/string_switch_case.py:11:1          kebab           U       kebab case [ can be found"
  - "strings/string_switch_case.py:18:3          assistant       U       # assistant functions"
  - "strings/string_switch_case.py:32:18         Combined        U       'ThisShouldBeCombined'"
  - "strings/string_switch_case.py:34:24         Capitalized     U       'TheFirstLettersAreCapitalizedThenStringIsMerged'"
  - "strings/string_switch_case.py:55:25         FOUR            U       'ONE_TWO_31235THREE4FOUR'"
  - "strings/text_justification.py:1:10          justification       U       def text_justification(word: str, max_width"
  - "strings/text_justification.py:4:58          justified           U       fully (left and right) justified,"
  - "strings/text_justification.py:19:19         roads               U       string = \"Two roads diverged in a yellow"
  - "strings/text_justification.py:19:25         diverged            U       string = \"Two roads diverged in a yellow wood\""
  - "strings/text_justification.py:19:46         wood                U       diverged in a yellow wood\""
  - "strings/text_justification.py:35:9          justify             U       def justify(line: list, width: int"
  - "strings/text_justification.py:56:13         aligned             U       aligned_words_list = []"
  - "strings/title.py:5:24           Aakash      U       >>> to_title_case(\"Aakash\")"
  - "strings/title.py:8:24           aakash      U       >>> to_title_case(\"aakash\")"
  - "strings/title.py:11:24          AAKASH      U       >>> to_title_case(\"AAKASH\")"
  - "strings/title.py:38:40          Giri        U       to_title_case(\"Aakash Giri\")"
  - "strings/title.py:41:40          giri        U       to_title_case(\"aakash giri\")"
  - "strings/title.py:44:40          GIRI        U       to_title_case(\"AAKASH GIRI\")"
  - "strings/top_k_frequent_words.py:8:26        educational     U       is mostly shown for educational purposes, since the"
  - "strings/upper.py:4:17           subtracting     U       letters and subtracting 32 from their integer"
  - "strings/wildcard_pattern_matching.py:37:24          dabc    U       >>> match_pattern(\"dabc\", \"*abc\")"
  - "strings/wildcard_pattern_matching.py:43:24          aaab    U       >>> match_pattern(\"aaab\", \"aa*\")"
  - "strings/word_occurrence.py:1:14         sarathkaul                  U       # Created by sarathkaul on 17/11/19"
  - "strings/word_occurrence.py:2:15         Arkadip                     U       # Modified by Arkadip Bhattacharya(@darkmatter"
  - "strings/word_occurrence.py:2:23         Bhattacharya                U       Modified by Arkadip Bhattacharya(@darkmatter18) on 2"
  - "strings/word_occurrence.py:2:37         darkmatter                  U       Arkadip Bhattacharya(@darkmatter18) on 20/04/2020"
  - "strings/word_occurrence.py:10:9         occurence (occurrence)      U       >>> occurence_dict = word_occurrence"
  - "strings/word_patterns.py:3:44           appearances     U       pattern of character appearances in given word"
  - "strings/z_function.py:23:21         abracadabra     U       >>> z_function(\"abracadabra\")"
  - "strings/z_function.py:27:21         zxxzxxz         U       >>> z_function(\"zxxzxxz\")"
  - "strings/z_function.py:32:18         interval's      U       # initialize interval's left pointer and right"
  - "web_programming/co2_emission.py:18:3        Emissions       U       # Emissions in a specific date range"
  - "web_programming/covid_stats_via_xpath.py:2:24           COVID           U       This is to show simple COVID19 info fetching from"
  - "web_programming/covid_stats_via_xpath.py:2:37           fetching        U       simple COVID19 info fetching from worldometers site"
  - "web_programming/covid_stats_via_xpath.py:2:51           worldometers    U       info fetching from worldometers site using lxml"
  - "web_programming/covid_stats_via_xpath.py:3:12           motivation      U       * The main motivation to use lxml in place"
  - "web_programming/covid_stats_via_xpath.py:15:5           deaths          U       deaths: int"
  - "web_programming/covid_stats_via_xpath.py:16:5           recovered       U       recovered: int"
  - "web_programming/covid_stats_via_xpath.py:19:5           covid           U       def covid_stats(url: str = \"https"
  - "web_programming/covid_stats_via_xpath.py:28:16          patients        U       Total COVID-19 patients recovered in the world"
  - "web_programming/crawl_google_scholar_citation.py:2:9            citation                U       Get the citation from google scholar"
  - "web_programming/crawl_google_scholar_citation.py:2:30           scholar                 U       citation from google scholar"
  - "web_programming/crawl_google_scholar_citation.py:25:14          Precisely               U       \"Precisely geometry controlled"
  - "web_programming/crawl_google_scholar_citation.py:25:33          controlled              U       \"Precisely geometry controlled microsupercapacitors"
  - "web_programming/crawl_google_scholar_citation.py:25:44          microsupercapacitors    U       geometry controlled microsupercapacitors for ultrahigh areal"
  - "web_programming/crawl_google_scholar_citation.py:25:69          ultrahigh               U       microsupercapacitors for ultrahigh areal \""
  - "web_programming/crawl_google_scholar_citation.py:25:79          areal                   U       supercapacitors for ultrahigh areal \""
  - "web_programming/crawl_google_scholar_citation.py:26:27          volumetric              U       \"capacitance, volumetric capacitance, and energy"
  - "web_programming/crawl_google_scholar_citation.py:28:21          Chem                    U       \"journal\": \"Chem. Mater.\","
  - "web_programming/crawl_google_scholar_citation.py:28:27          Mater                   U       \"journal\": \"Chem. Mater.\","
  - "web_programming/currency_converter.py:2:48          Amdoren             U       the currency using the Amdoren Currency API"
  - "web_programming/currency_converter.py:14:9          currencies          U       list_of_currencies = \"\"\""
  - "web_programming/currency_converter.py:15:12         Arab                U       AED United Arab Emirates Dirham"
  - "web_programming/currency_converter.py:15:17         Emirates            U       AED United Arab Emirates Dirham"
  - "web_programming/currency_converter.py:16:5          Afghan              U       AFN Afghan Afghani"
  - "web_programming/currency_converter.py:16:12         Afghani             U       AFN Afghan Afghani"
  - "web_programming/currency_converter.py:17:5          Albanian            U       ALL Albanian Lek"
  - "web_programming/currency_converter.py:18:5          Armenian            U       AMD Armenian Dram"
  - "web_programming/currency_converter.py:19:17         Antillean           U       ANG Netherlands Antillean Guilder"
  - "web_programming/currency_converter.py:19:27         Guilder             U       Netherlands Antillean Guilder"
  - "web_programming/currency_converter.py:20:5          Angolan             U       AOA Angolan Kwanza"
  - "web_programming/currency_converter.py:20:13         Kwanza              U       AOA Angolan Kwanza"
  - "web_programming/currency_converter.py:21:5          Argentine           U       ARS Argentine Peso"
  - "web_programming/currency_converter.py:21:15         Peso                U       ARS Argentine Peso"
  - "web_programming/currency_converter.py:23:5          Aruban              U       AWG Aruban Florin"
  - "web_programming/currency_converter.py:23:12         Florin              U       AWG Aruban Florin"
  - "web_programming/currency_converter.py:24:5          Azerbaijani         U       AZN Azerbaijani Manat"
  - "web_programming/currency_converter.py:24:17         Manat               U       AZN Azerbaijani Manat"
  - "web_programming/currency_converter.py:25:5          Bosnia              U       BAM Bosnia & Herzegovina Convertible"
  - "web_programming/currency_converter.py:25:14         Herzegovina         U       BAM Bosnia & Herzegovina Convertible Mark"
  - "web_programming/currency_converter.py:25:26         Convertible         U       Bosnia & Herzegovina Convertible Mark"
  - "web_programming/currency_converter.py:26:5          Barbadian           U       BBD Barbadian Dollar"
  - "web_programming/currency_converter.py:27:5          Bangladeshi         U       BDT Bangladeshi Taka"
  - "web_programming/currency_converter.py:27:17         Taka                U       BDT Bangladeshi Taka"
  - "web_programming/currency_converter.py:28:5          Bulgarian           U       BGN Bulgarian Lev"
  - "web_programming/currency_converter.py:29:5          Bahraini            U       BHD Bahraini Dinar"
  - "web_programming/currency_converter.py:29:14         Dinar               U       BHD Bahraini Dinar"
  - "web_programming/currency_converter.py:30:5          Burundian           U       BIF Burundian Franc"
  - "web_programming/currency_converter.py:30:15         Franc               U       BIF Burundian Franc"
  - "web_programming/currency_converter.py:31:5          Bermudian           U       BMD Bermudian Dollar"
  - "web_programming/currency_converter.py:33:5          Bolivian            U       BOB Bolivian Boliviano"
  - "web_programming/currency_converter.py:33:14         Boliviano           U       BOB Bolivian Boliviano"
  - "web_programming/currency_converter.py:35:5          Bahamian            U       BSD Bahamian Dollar"
  - "web_programming/currency_converter.py:36:5          Bhutanese           U       BTN Bhutanese Ngultrum"
  - "web_programming/currency_converter.py:36:15         Ngultrum            U       BTN Bhutanese Ngultrum"
  - "web_programming/currency_converter.py:37:5          Botswana            U       BWP Botswana Pula"
  - "web_programming/currency_converter.py:37:14         Pula                U       BWP Botswana Pula"
  - "web_programming/currency_converter.py:38:5          Belarus             U       BYN Belarus Ruble"
  - "web_programming/currency_converter.py:38:13         Ruble               U       BYN Belarus Ruble"
  - "web_programming/currency_converter.py:39:5          Belize              U       BZD Belize Dollar"
  - "web_programming/currency_converter.py:41:5          Congolese           U       CDF Congolese Franc"
  - "web_programming/currency_converter.py:43:5          Chilean             U       CLP Chilean Peso"
  - "web_programming/currency_converter.py:44:13         Yuan                U       CNY Chinese Yuan"
  - "web_programming/currency_converter.py:45:5          Colombian           U       COP Colombian Peso"
  - "web_programming/currency_converter.py:46:5          Costa               U       CRC Costa Rican Colon"
  - "web_programming/currency_converter.py:46:11         Rican               U       CRC Costa Rican Colon"
  - "web_programming/currency_converter.py:47:5          Cuban               U       CUC Cuban Convertible Peso"
  - "web_programming/currency_converter.py:48:10         Verdean             U       CVE Cape Verdean Escudo"
  - "web_programming/currency_converter.py:48:18         Escudo              U       CVE Cape Verdean Escudo"
  - "web_programming/currency_converter.py:49:5          Czech               U       CZK Czech Republic Koruna"
  - "web_programming/currency_converter.py:49:20         Koruna              U       CZK Czech Republic Koruna"
  - "web_programming/currency_converter.py:50:5          Djiboutian          U       DJF Djiboutian Franc"
  - "web_programming/currency_converter.py:51:5          Danish              U       DKK Danish Krone"
  - "web_programming/currency_converter.py:51:12         Krone               U       DKK Danish Krone"
  - "web_programming/currency_converter.py:53:5          Algerian            U       DZD Algerian Dinar"
  - "web_programming/currency_converter.py:54:5          Egyptian            U       EGP Egyptian Pound"
  - "web_programming/currency_converter.py:54:14         Pound               U       EGP Egyptian Pound"
  - "web_programming/currency_converter.py:55:5          Eritrean            U       ERN Eritrean Nakfa"
  - "web_programming/currency_converter.py:55:14         Nakfa               U       ERN Eritrean Nakfa"
  - "web_programming/currency_converter.py:56:5          Ethiopian           U       ETB Ethiopian Birr"
  - "web_programming/currency_converter.py:56:15         Birr                U       ETB Ethiopian Birr"
  - "web_programming/currency_converter.py:57:5          Euro                U       EUR Euro"
  - "web_programming/currency_converter.py:58:5          Fiji                U       FJD Fiji Dollar"
  - "web_programming/currency_converter.py:59:19         Sterling            U       GBP British Pound Sterling"
  - "web_programming/currency_converter.py:60:5          Georgian            U       GEL Georgian Lari"
  - "web_programming/currency_converter.py:60:14         Lari                U       GEL Georgian Lari"
  - "web_programming/currency_converter.py:61:5          Ghanaian            U       GHS Ghanaian Cedi"
  - "web_programming/currency_converter.py:61:14         Cedi                U       GHS Ghanaian Cedi"
  - "web_programming/currency_converter.py:62:5          Gibraltar           U       GIP Gibraltar Pound"
  - "web_programming/currency_converter.py:63:5          Gambian             U       GMD Gambian Dalasi"
  - "web_programming/currency_converter.py:63:13         Dalasi              U       GMD Gambian Dalasi"
  - "web_programming/currency_converter.py:64:5          Guinea              U       GNF Guinea Franc"
  - "web_programming/currency_converter.py:65:5          Guatemalan          U       GTQ Guatemalan Quetzal"
  - "web_programming/currency_converter.py:65:16         Quetzal             U       GTQ Guatemalan Quetzal"
  - "web_programming/currency_converter.py:66:5          Guyanaese           U       GYD Guyanaese Dollar"
  - "web_programming/currency_converter.py:68:5          Honduran            U       HNL Honduran Lempira"
  - "web_programming/currency_converter.py:68:14         Lempira             U       HNL Honduran Lempira"
  - "web_programming/currency_converter.py:69:5          Croatian            U       HRK Croatian Kuna"
  - "web_programming/currency_converter.py:69:14         Kuna                U       HRK Croatian Kuna"
  - "web_programming/currency_converter.py:70:5          Haiti               U       HTG Haiti Gourde"
  - "web_programming/currency_converter.py:70:11         Gourde              U       HTG Haiti Gourde"
  - "web_programming/currency_converter.py:72:5          Indonesian          U       IDR Indonesian Rupiah"
  - "web_programming/currency_converter.py:72:16         Rupiah              U       IDR Indonesian Rupiah"
  - "web_programming/currency_converter.py:73:5          Israeli             U       ILS Israeli Shekel"
  - "web_programming/currency_converter.py:73:13         Shekel              U       ILS Israeli Shekel"
  - "web_programming/currency_converter.py:74:12         Rupee               U       INR Indian Rupee"
  - "web_programming/currency_converter.py:75:5          Iraqi               U       IQD Iraqi Dinar"
  - "web_programming/currency_converter.py:76:5          Iranian             U       IRR Iranian Rial"
  - "web_programming/currency_converter.py:76:13         Rial                U       IRR Iranian Rial"
  - "web_programming/currency_converter.py:77:5          Icelandic           U       ISK Icelandic Krona"
  - "web_programming/currency_converter.py:77:15         Krona               U       ISK Icelandic Krona"
  - "web_programming/currency_converter.py:78:5          Jamaican            U       JMD Jamaican Dollar"
  - "web_programming/currency_converter.py:79:5          Jordanian           U       JOD Jordanian Dinar"
  - "web_programming/currency_converter.py:80:5          Japanese            U       JPY Japanese Yen"
  - "web_programming/currency_converter.py:81:5          Kenyan              U       KES Kenyan Shilling"
  - "web_programming/currency_converter.py:81:12         Shilling            U       KES Kenyan Shilling"
  - "web_programming/currency_converter.py:82:5          Kyrgystani          U       KGS Kyrgystani Som"
  - "web_programming/currency_converter.py:83:5          Cambodian           U       KHR Cambodian Riel"
  - "web_programming/currency_converter.py:83:15         Riel                U       KHR Cambodian Riel"
  - "web_programming/currency_converter.py:84:5          Comorian            U       KMF Comorian Franc"
  - "web_programming/currency_converter.py:85:11         Korean              U       KPW North Korean Won"
  - "web_programming/currency_converter.py:87:5          Kuwaiti             U       KWD Kuwaiti Dinar"
  - "web_programming/currency_converter.py:88:5          Cayman              U       KYD Cayman Islands Dollar"
  - "web_programming/currency_converter.py:89:5          Kazakhstan          U       KZT Kazakhstan Tenge"
  - "web_programming/currency_converter.py:89:16         Tenge               U       KZT Kazakhstan Tenge"
  - "web_programming/currency_converter.py:90:5          Laotian             U       LAK Laotian Kip"
  - "web_programming/currency_converter.py:91:5          Lebanese            U       LBP Lebanese Pound"
  - "web_programming/currency_converter.py:92:9          Lankan              U       LKR Sri Lankan Rupee"
  - "web_programming/currency_converter.py:93:5          Liberian            U       LRD Liberian Dollar"
  - "web_programming/currency_converter.py:94:5          Lesotho             U       LSL Lesotho Loti"
  - "web_programming/currency_converter.py:94:13         Loti                U       LSL Lesotho Loti"
  - "web_programming/currency_converter.py:95:5          Libyan              U       LYD Libyan Dinar"
  - "web_programming/currency_converter.py:96:5          Moroccan            U       MAD Moroccan Dirham"
  - "web_programming/currency_converter.py:97:5          Moldovan            U       MDL Moldovan Leu"
  - "web_programming/currency_converter.py:98:5          Malagasy            U       MGA Malagasy Ariary"
  - "web_programming/currency_converter.py:98:14         Ariary              U       MGA Malagasy Ariary"
  - "web_programming/currency_converter.py:99:5          Macedonian          U       MKD Macedonian Denar"
  - "web_programming/currency_converter.py:99:16         Denar               U       MKD Macedonian Denar"
  - "web_programming/currency_converter.py:100:5         Myanma              U       MMK Myanma Kyat"
  - "web_programming/currency_converter.py:100:12        Kyat                U       MMK Myanma Kyat"
  - "web_programming/currency_converter.py:101:5         Mongolian           U       MNT Mongolian Tugrik"
  - "web_programming/currency_converter.py:101:15        Tugrik              U       MNT Mongolian Tugrik"
  - "web_programming/currency_converter.py:102:5         Macau               U       MOP Macau Pataca"
  - "web_programming/currency_converter.py:102:11        Pataca              U       MOP Macau Pataca"
  - "web_programming/currency_converter.py:103:5         Mauritanian         U       MRO Mauritanian Ouguiya"
  - "web_programming/currency_converter.py:103:17        Ouguiya             U       MRO Mauritanian Ouguiya"
  - "web_programming/currency_converter.py:104:5         Mauritian           U       MUR Mauritian Rupee"
  - "web_programming/currency_converter.py:105:5         Maldivian           U       MVR Maldivian Rufiyaa"
  - "web_programming/currency_converter.py:105:15        Rufiyaa             U       MVR Maldivian Rufiyaa"
  - "web_programming/currency_converter.py:106:5         Malawi              U       MWK Malawi Kwacha"
  - "web_programming/currency_converter.py:106:12        Kwacha              U       MWK Malawi Kwacha"
  - "web_programming/currency_converter.py:108:5         Malaysian           U       MYR Malaysian Ringgit"
  - "web_programming/currency_converter.py:108:15        Ringgit             U       MYR Malaysian Ringgit"
  - "web_programming/currency_converter.py:109:5         Mozambican          U       MZN Mozambican Metical"
  - "web_programming/currency_converter.py:109:16        Metical             U       MZN Mozambican Metical"
  - "web_programming/currency_converter.py:110:5         Namibian            U       NAD Namibian Dollar"
  - "web_programming/currency_converter.py:111:5         Nigerian            U       NGN Nigerian Naira"
  - "web_programming/currency_converter.py:111:14        Naira               U       NGN Nigerian Naira"
  - "web_programming/currency_converter.py:112:5         Nicaragua           U       NIO Nicaragua Cordoba"
  - "web_programming/currency_converter.py:112:15        Cordoba             U       NIO Nicaragua Cordoba"
  - "web_programming/currency_converter.py:114:5         Nepalese            U       NPR Nepalese Rupee"
  - "web_programming/currency_converter.py:116:5         Omani               U       OMR Omani Rial"
  - "web_programming/currency_converter.py:117:5         Panamanian          U       PAB Panamanian Balboa"
  - "web_programming/currency_converter.py:118:5         Peruvian            U       PEN Peruvian Nuevo Sol"
  - "web_programming/currency_converter.py:118:14        Nuevo               U       PEN Peruvian Nuevo Sol"
  - "web_programming/currency_converter.py:119:5         Papua               U       PGK Papua New Guinean Kina"
  - "web_programming/currency_converter.py:119:15        Guinean             U       PGK Papua New Guinean Kina"
  - "web_programming/currency_converter.py:119:23        Kina                U       PGK Papua New Guinean Kina"
  - "web_programming/currency_converter.py:120:5         Philippine          U       PHP Philippine Peso"
  - "web_programming/currency_converter.py:121:5         Pakistani           U       PKR Pakistani Rupee"
  - "web_programming/currency_converter.py:122:12        Zloty               U       PLN Polish Zloty"
  - "web_programming/currency_converter.py:123:5         Paraguayan          U       PYG Paraguayan Guarani"
  - "web_programming/currency_converter.py:123:16        Guarani             U       PYG Paraguayan Guarani"
  - "web_programming/currency_converter.py:124:5         Qatari              U       QAR Qatari Riyal"
  - "web_programming/currency_converter.py:124:12        Riyal               U       QAR Qatari Riyal"
  - "web_programming/currency_converter.py:125:5         Romanian            U       RON Romanian Leu"
  - "web_programming/currency_converter.py:126:5         Serbian             U       RSD Serbian Dinar"
  - "web_programming/currency_converter.py:127:5         Russian             U       RUB Russian Ruble"
  - "web_programming/currency_converter.py:128:5         Rwanda              U       RWF Rwanda Franc"
  - "web_programming/currency_converter.py:129:5         Saudi               U       SAR Saudi Riyal"
  - "web_programming/currency_converter.py:130:5         Solomon             U       SBD Solomon Islands Dollar"
  - "web_programming/currency_converter.py:131:5         Seychellois         U       SCR Seychellois Rupee"
  - "web_programming/currency_converter.py:132:5         Sudanese            U       SDG Sudanese Pound"
  - "web_programming/currency_converter.py:133:5         Swedish             U       SEK Swedish Krona"
  - "web_programming/currency_converter.py:135:5         Saint               U       SHP Saint Helena Pound"
  - "web_programming/currency_converter.py:135:11        Helena              U       SHP Saint Helena Pound"
  - "web_programming/currency_converter.py:136:5         Sierra              U       SLL Sierra Leonean Leone"
  - "web_programming/currency_converter.py:136:12        Leonean             U       SLL Sierra Leonean Leone"
  - "web_programming/currency_converter.py:136:20        Leone               U       SLL Sierra Leonean Leone"
  - "web_programming/currency_converter.py:137:5         Somali              U       SOS Somali Shilling"
  - "web_programming/currency_converter.py:138:5         Surinamese          U       SRD Surinamese Dollar"
  - "web_programming/currency_converter.py:140:9         Tome                U       STD Sao Tome and Principe Dobra"
  - "web_programming/currency_converter.py:140:18        Principe            U       STD Sao Tome and Principe Dobra"
  - "web_programming/currency_converter.py:140:27        Dobra               U       Sao Tome and Principe Dobra"
  - "web_programming/currency_converter.py:141:5         Syrian              U       SYP Syrian Pound"
  - "web_programming/currency_converter.py:142:5         Swazi               U       SZL Swazi Lilangeni"
  - "web_programming/currency_converter.py:142:11        Lilangeni           U       SZL Swazi Lilangeni"
  - "web_programming/currency_converter.py:143:5         Thai                U       THB Thai Baht"
  - "web_programming/currency_converter.py:143:10        Baht                U       THB Thai Baht"
  - "web_programming/currency_converter.py:144:5         Tajikistan          U       TJS Tajikistan Somoni"
  - "web_programming/currency_converter.py:144:16        Somoni              U       TJS Tajikistan Somoni"
  - "web_programming/currency_converter.py:145:5         Turkmenistani       U       TMT Turkmenistani Manat"
  - "web_programming/currency_converter.py:146:5         Tunisian            U       TND Tunisian Dinar"
  - "web_programming/currency_converter.py:147:5         Tonga               U       TOP Tonga Paanga"
  - "web_programming/currency_converter.py:147:11        Paanga              U       TOP Tonga Paanga"
  - "web_programming/currency_converter.py:148:5         Turkish             U       TRY Turkish Lira"
  - "web_programming/currency_converter.py:148:13        Lira                U       TRY Turkish Lira"
  - "web_programming/currency_converter.py:149:5         Trinidad            U       TTD Trinidad and Tobago Dollar"
  - "web_programming/currency_converter.py:149:18        Tobago              U       TTD Trinidad and Tobago Dollar"
  - "web_programming/currency_converter.py:151:5         Tanzanian           U       TZS Tanzanian Shilling"
  - "web_programming/currency_converter.py:152:5         Ukrainian           U       UAH Ukrainian Hryvnia"
  - "web_programming/currency_converter.py:152:15        Hryvnia             U       UAH Ukrainian Hryvnia"
  - "web_programming/currency_converter.py:153:5         Ugandan             U       UGX Ugandan Shilling"
  - "web_programming/currency_converter.py:155:5         Uruguayan           U       UYU Uruguayan Peso"
  - "web_programming/currency_converter.py:156:5         Uzbekistan          U       UZS Uzbekistan Som"
  - "web_programming/currency_converter.py:157:5         Venezuelan          U       VEF Venezuelan Bolivar"
  - "web_programming/currency_converter.py:157:16        Bolivar             U       VEF Venezuelan Bolivar"
  - "web_programming/currency_converter.py:158:5         Vietnamese          U       VND Vietnamese Dong"
  - "web_programming/currency_converter.py:158:16        Dong                U       VND Vietnamese Dong"
  - "web_programming/currency_converter.py:159:5         Vanuatu             U       VUV Vanuatu Vatu"
  - "web_programming/currency_converter.py:159:13        Vatu                U       VUV Vanuatu Vatu"
  - "web_programming/currency_converter.py:160:5         Samoan              U       WST Samoan Tala"
  - "web_programming/currency_converter.py:160:12        Tala                U       WST Samoan Tala"
  - "web_programming/currency_converter.py:161:13        African             U       XAF Central African CFA franc"
  - "web_programming/currency_converter.py:161:25        franc               U       Central African CFA franc"
  - "web_programming/currency_converter.py:165:5         Yemeni              U       YER Yemeni Rial"
  - "web_programming/currency_converter.py:167:5         Zambian             U       ZMW Zambian Kwacha"
  - "web_programming/currency_converter.py:185:26        AMDOREN             U       API_KEY = os.getenv(\"AMDOREN_API_KEY\", \"\")"
  - "web_programming/current_stock_price.py:28:21        streamer    U       if specific_fin_streamer_tag := soup.find(\"span"
  - "web_programming/current_weather.py:4:1          OPENWEATHERMAP      U       OPENWEATHERMAP_API_KEY = \"\""
  - "web_programming/current_weather.py:5:1          WEATHERSTACK        U       WEATHERSTACK_API_KEY = \"\""
  - "web_programming/current_weather.py:7:36         placeholders        U       URL for the APIs with placeholders"
  - "web_programming/current_weather.py:12:13        weather             U       def current_weather(location: str) -> list"
  - "web_programming/current_weather.py:21:16        openweathermap      U       params_openweathermap = {\"q\": location, \"appid"
  - "web_programming/current_weather.py:27:16        weatherstack        U       params_weatherstack = {\"query\": location"
  - "web_programming/current_weather.py:31:31        Weatherstack        U       weather_data.append({\"Weatherstack\": response_weatherstack"
  - "web_programming/daily_horoscope.py:5:5          horoscope       U       def horoscope(zodiac_sign: int, day"
  - "web_programming/daily_horoscope.py:5:15         zodiac          U       def horoscope(zodiac_sign: int, day: str"
  - "web_programming/daily_horoscope.py:8:41         aspx            U       general-daily-{day}.aspx?sign={zodiac_sign}\""
  - "web_programming/daily_horoscope.py:17:21        Zodiac          U       \"enter your Zodiac sign number:\\n\","
  - "web_programming/daily_horoscope.py:18:13        Aries           U       \"1. Aries\\n\","
  - "web_programming/daily_horoscope.py:19:13        Taurus          U       \"2. Taurus\\n\","
  - "web_programming/daily_horoscope.py:20:13        Gemini          U       \"3. Gemini\\n\","
  - "web_programming/daily_horoscope.py:21:13        Cancer          U       \"4. Cancer\\n\","
  - "web_programming/daily_horoscope.py:23:13        Virgo           U       \"6. Virgo\\n\","
  - "web_programming/daily_horoscope.py:24:13        Libra           U       \"7. Libra\\n\","
  - "web_programming/daily_horoscope.py:25:13        Scorpio         U       \"8. Scorpio\\n\","
  - "web_programming/daily_horoscope.py:26:13        Sagittarius     U       \"9. Sagittarius\\n\","
  - "web_programming/daily_horoscope.py:27:14        Capricorn       U       \"10. Capricorn\\n\","
  - "web_programming/daily_horoscope.py:28:14        Aquarius        U       \"11. Aquarius\\n\","
  - "web_programming/daily_horoscope.py:29:14        Pisces          U       \"12. Pisces\\n\","
  - "web_programming/daily_horoscope.py:32:34        yesterday       U       choose some day:\\n\", \"yesterday\\n\", \"today\\n\", \"tomorrow"
  - "web_programming/daily_horoscope.py:32:60        tomorrow        U       yesterday\\n\", \"today\\n\", \"tomorrow\\n\")"
  - "web_programming/download_images_from_google_query.py:12:8           KHTML           U       \" (KHTML, like Gecko) Chrome"
  - "web_programming/download_images_from_google_query.py:12:20          Gecko           U       \" (KHTML, like Gecko) Chrome/70.0.3538.1"
  - "web_programming/download_images_from_google_query.py:12:48          Safari          U       Chrome/70.0.3538.102 Safari/537.36 Edge/18.1958"
  - "web_programming/download_images_from_google_query.py:16:53          dhaka           U       query(query: str = \"dhaka\", max_images: int ="
  - "web_programming/download_images_from_google_query.py:31:46          potato          U       images_from_google_query(\"potato\")"
  - "web_programming/download_images_from_google_query.py:34:49          abuse           U       images, 50) # Prevent abuse!"
  - "web_programming/download_images_from_google_query.py:37:17          isch            U       \"tbm\": \"isch\","
  - "web_programming/download_images_from_google_query.py:60:35          thumbnails      U       matched_google_images_thumbnails = re.sub("
  - "web_programming/download_images_from_google_query.py:61:43          gstatic         U       \\/\\/encrypted-tbn0\\.gstatic\\.com\\/images\\?.*?)\\"
  - "web_programming/emails_from_url.py:5:15         Muhammad    U       __author__ = \"Muhammad Umer Farooq\""
  - "web_programming/emails_from_url.py:5:24         Umer        U       author__ = \"Muhammad Umer Farooq\""
  - "web_programming/emails_from_url.py:5:29         Farooq      U       author__ = \"Muhammad Umer Farooq\""
  - "web_programming/fetch_anime_and_play.py:2:32        Navigable       U       import BeautifulSoup, NavigableString, Tag"
  - "web_programming/fetch_anime_and_play.py:8:12        scraper         U       def search_scraper(anime_name: str) ->"
  - "web_programming/fetch_anime_and_play.py:8:20        anime           U       def search_scraper(anime_name: str) -> list:"
  - "web_programming/fetch_anime_and_play.py:12:32       scraping        U       list of anime after scraping the site."
  - "web_programming/fetch_anime_and_play.py:14:30       demon           U       type(search_scraper(\"demon_slayer\"))"
  - "web_programming/fetch_anime_and_play.py:14:36       slayer          U       search_scraper(\"demon_slayer\"))"
  - "web_programming/fetch_anime_and_play.py:24:26       animes          U       [list]: [List of animes]"
  - "web_programming/fetch_anime_and_play.py:63:18       episode         U       def search_anime_episode_list(episode_endpoint"
  - "web_programming/fetch_anime_and_play.py:67:20       episodes        U       return list of episodes after scraping the site"
  - "web_programming/fetch_anime_and_play.py:70:48       kimetsu         U       episode_list(\"/anime/kimetsu-no-yaiba\"))"
  - "web_programming/fetch_anime_and_play.py:70:59       yaiba           U       list(\"/anime/kimetsu-no-yaiba\"))"
  - "web_programming/fetch_anime_and_play.py:95:42       eposiodes       U       Could not find any anime eposiodes with name {anime_name"
  - "web_programming/fetch_anime_and_play.py:143:39      playerframe     U       find(\"iframe\", {\"id\": \"playerframe\"})"
  - "web_programming/fetch_anime_and_play.py:182:64      serial          U       nChoose an episode by serial no: \").strip())"
  - "web_programming/fetch_bbc_news.py:9:26          articles    U       fetching a list of articles in json format"
  - "web_programming/fetch_github_info.py:4:12           lawric      U       Updated by lawric1 on 24/11/20"
  - "web_programming/fetch_jobs.py:2:1           Scraping        U       Scraping jobs given job title"
  - "web_programming/fetch_jobs.py:15:33         mumbai          U       jobs(location: str = \"mumbai\") -> Generator[tuple"
  - "web_programming/fetch_jobs.py:19:40         specifics       U       attribute finds out all the specifics listed in a job"
  - "web_programming/fetch_jobs.py:20:66         organic         U       data-tn-component\": \"organicJob\"}):"
  - "web_programming/fetch_quotes.py:3:49        tier        U       key as it uses free tier."
  - "web_programming/fetch_quotes.py:5:22        premium     U       For more details and premium features visit:"
  - "web_programming/fetch_well_rx_price.py:3:1          Scrape          U       Scrape the price and pharmacy"
  - "web_programming/fetch_well_rx_price.py:3:22         pharmacy        U       Scrape the price and pharmacy name for a prescription"
  - "web_programming/fetch_well_rx_price.py:3:42         prescription    U       pharmacy name for a prescription drug from rx site"
  - "web_programming/fetch_well_rx_price.py:3:55         drug            U       name for a prescription drug from rx site"
  - "web_programming/fetch_well_rx_price.py:21:27        scrape          U       Get the page data and scrape it to the generate the"
  - "web_programming/fetch_well_rx_price.py:25:27        Drug            U       drug_name (str): [Drug name]"
  - "web_programming/fetch_well_rx_price.py:35:40        eliquis         U       pharmacy_and_price_list(\"eliquis\", None)"
  - "web_programming/fetch_well_rx_price.py:57:60        pharm           U       , {\"class\": \"grid-x pharmCard\"})"
  - "web_programming/fetch_well_rx_price.py:94:21        Pharmacy        U       print(f\"Pharmacy: {name} Price: {price"
  - "web_programming/get_amazon_product_data.py:4:45         ratings         U       include title, URL, price, ratings, and the discount available"
  - "web_programming/get_amazon_product_data.py:14:45        laptop          U       data(product: str = \"laptop\") -> DataFrame:"
  - "web_programming/get_amazon_product_data.py:54:25        rating          U       product_rating = item.find(\"span\","
  - "web_programming/get_amazon_product_data.py:102:16       headphones      U       product = \"headphones\""
  - "web_programming/get_imdb_top_250_movies_csv.py:9:9          imdb        U       def get_imdb_top_250_movies(url:"
  - "web_programming/get_imdb_top_250_movies_csv.py:9:22         movies      U       def get_imdb_top_250_movies(url: str = \"\") -> dict"
  - "web_programming/get_imdb_top_250_movies_csv.py:24:27        Movie       U       writer.writerow([\"Movie title\", \"IMDb rating"
  - "web_programming/get_top_billionaires.py:17:25       gender          U       \"?fields=personName,gender,source,countryOfCitizenship"
  - "web_programming/get_top_billionaires.py:17:48       Citizenship     U       gender,source,countryOfCitizenship,birthDate,finalWorth"
  - "web_programming/get_top_billionaires.py:17:75       Worth           U       yOfCitizenship,birthDate,finalWorth\""
  - "web_programming/get_top_billionaires.py:22:15       birth           U       def years_old(birth_timestamp: int, today"
  - "web_programming/get_top_billionaires.py:53:9        forbes          U       def get_forbes_real_time_billionaires"
  - "web_programming/get_top_billionaires.py:53:26       billionaires    U       get_forbes_real_time_billionaires() -> list[dict[str,"
  - "web_programming/get_top_billionaires.py:55:49       Forbes          U       time billionaires using Forbes API."
  - "web_programming/get_top_billionaires.py:66:14       Gender          U       \"Gender\": person[\"gender\"],"
  - "web_programming/get_top_billionaires.py:67:62       Billion         U       finalWorth'] / 1000:.1f} Billion\","
  - "web_programming/get_top_billionaires.py:91:9        billionaire     U       for billionaire in forbes_billionaires"
  - "web_programming/get_top_hn_posts.py:6:9         hackernews      U       def get_hackernews_story(story_id: str"
  - "web_programming/get_top_hn_posts.py:6:20        story           U       def get_hackernews_story(story_id: str) -> dict"
  - "web_programming/get_top_hn_posts.py:11:20       stories         U       def hackernews_top_stories(max_stories: int ="
  - "web_programming/get_top_hn_posts.py:13:29       posts           U       the top max_stories posts from HackerNews - https"
  - "web_programming/get_top_hn_posts.py:13:40       Hacker          U       max_stories posts from HackerNews - https://news.ycombinato"
  - "web_programming/giphy.py:4:1            giphy       U       giphy_api_key = \"YOUR API"
  - "web_programming/giphy.py:8:9            gifs        U       def get_gifs(query: str, api_key"
  - "web_programming/giphy.py:19:37          ship        U       join(get_gifs(\"space ship\")))"
  - "web_programming/instagram_crawler.py:26:21          failing         U       Usage: (doctest failing on GitHub Actions)"
  - "web_programming/instagram_crawler.py:30:26          biography       U       >>> instagram_user.biography"
  - "web_programming/instagram_crawler.py:31:16          developers      U       'Built for developers.'"
  - "web_programming/instagram_crawler.py:76:19          followers       U       def number_of_followers(self) -> int:"
  - "web_programming/instagram_crawler.py:80:19          followings      U       def number_of_followings(self) -> int:"
  - "web_programming/instagram_video.py:6:14         video       U       def download_video(url: str) -> bytes:"
  - "web_programming/instagram_video.py:13:30        IGTV        U       input(\"Enter Video/IGTV url: \").strip()"
  - "web_programming/nasa_data.py:6:9            apod        U       def get_apod_data(api_key: str)"
  - "web_programming/nasa_data.py:8:13           APOD        U       Get the APOD(Astronomical Picture"
  - "web_programming/nasa_data.py:8:31           Picture     U       the APOD(Astronomical Picture of the day) data"
  - "web_programming/nasa_data.py:29:45          NASA        U       particular query from NASA archives"
  - "web_programming/nasa_data.py:37:5           apollo      U       apollo_2011_items = get_archive"
  - "web_programming/recaptcha_verification.py:2:37          offered             U       free captcha service offered by Google in order to"
  - "web_programming/recaptcha_verification.py:2:74          websites            U       Google in order to secure websites and"
  - "web_programming/recaptcha_verification.py:31:73         demonstrating       U       contains a login form for demonstrating"
  - "web_programming/reddit.py:6:8           approved        U       \"\"\"approved_at_utc approved_by author"
  - "web_programming/reddit.py:6:43          flair           U       utc approved_by author_flair_background_color"
  - "web_programming/reddit.py:8:38          clicked         U       can_mod_post category clicked content_categories created"
  - "web_programming/reddit.py:8:77          downs           U       categories created_utc downs"
  - "web_programming/reddit.py:9:8           gilded          U       edited gilded gildings hidden hide"
  - "web_programming/reddit.py:9:15          gildings        U       edited gilded gildings hidden hide_score is"
  - "web_programming/reddit.py:12:16         pwls            U       name permalink pwls quarantine saved score"
  - "web_programming/reddit.py:12:21         quarantine      U       name permalink pwls quarantine saved score secure_media"
  - "web_programming/reddit.py:13:26         prefixed        U       subreddit subreddit_name_prefixed subreddit_type thumbnail"
  - "web_programming/reddit.py:13:50         thumbnail       U       prefixed subreddit_type thumbnail title top_awarded_type"
  - "web_programming/reddit.py:14:7          awards          U       total_awards_received ups upvote"
  - "web_programming/search_books_by_isbn.py:7:37        Workaround      U       import JSONDecodeError # Workaround for requests.exceptions"
  - "web_programming/search_books_by_isbn.py:12:26       olid            U       get_openlibrary_data(olid: str = \"isbn/014032"
  - "web_programming/search_books_by_isbn.py:12:39       isbn            U       openlibrary_data(olid: str = \"isbn/0140328726\") -> dict"
  - "web_programming/search_books_by_isbn.py:15:16       authors         U       Given an '/authors/OL34184A', return authors"
  - "web_programming/search_books_by_isbn.py:16:29       olids           U       This code must work for olids with or without a leading"
  - "web_programming/search_books_by_isbn.py:20:7        publishers      U       {'publishers': ['Puffin'], 'number"
  - "web_programming/search_books_by_isbn.py:20:22       Puffin          U       {'publishers': ['Puffin'], 'number_of_pages"
  - "web_programming/search_books_by_isbn.py:22:15       Adrian          U       {'name': 'Adrian Brisku', 'created':"
  - "web_programming/search_books_by_isbn.py:22:22       Brisku          U       {'name': 'Adrian Brisku', 'created': {'type"
  - "web_programming/search_books_by_isbn.py:24:80       slashes         U       trailing whitespace & slashes"
  - "web_programming/world_covid19_stats.py:5:20         scrapped    U       This data is being scrapped from 'https://www.worldometer"
