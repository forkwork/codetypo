
Repository: graphql/graphql-relay-js
Url: "https://github.com/graphql/graphql-relay-js.git"
Args: ["**/*.*"]
Lines:
 Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
 exit code: 1
-------------------------------------------
-------------------------------------------
CONTRIBUTING.md:10:33     - Unknown word (major)      -- patch # or minor or major
CONTRIBUTING.md:11:12     - Unknown word (follow)     -- git push --follow-tags
CONTRIBUTING.md:17:17     - Unknown word (installing) -- Then test it by installing `graphql-relay@next
CONTRIBUTING.md:17:37     - Unknown word (relay)      -- installing `graphql-relay@next` from npm...
CONTRIBUTING.md:19:5      - Unknown word (good)       -- All good? Publish:
CONTRIBUTING.md:1:4       - Unknown word (Publishing) -- ## Publishing
CONTRIBUTING.md:22:48     - Unknown word (latest)     -- relay@VERSION_NUMBER latest
CONTRIBUTING.md:25:1      - Unknown word (Finally)    -- Finally generate the CHANGELOG
CONTRIBUTING.md:3:14      - Unknown word (uses)       -- This package uses a custom publish flow
CONTRIBUTING.md:5:28      - Unknown word (directly)   -- IMPORTANT**: Do not push directly to `main` - every change
CONTRIBUTING.md:5:3       - Unknown word (IMPORTANT)  -- **IMPORTANT**: Do not push directly
CONTRIBUTING.md:5:49      - Unknown word (every)      -- directly to `main` - every change must go through
CONTRIBUTING.md:5:62      - Unknown word (must)       -- main` - every change must go through a PR
CONTRIBUTING.md:6:1       - Unknown word (otherwise)  -- otherwise changelog generation
CONTRIBUTING.md:6:21      - Unknown word (generation) -- otherwise changelog generation will fail.
CONTRIBUTING.md:6:32      - Unknown word (will)       -- changelog generation will fail.
CodeTypo: Files checked: 31, Issues found: 996 in 30 files with 4 errors.
Dictionary Error with (en_us) Error: ENOENT: no such file or directory, open './dictionaries/en_US/en_US.trie.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (filetypes) Error: ENOENT: no such file or directory, open './dictionaries/filetypes/filetypes.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (html-symbol-entities) Error: ENOENT: no such file or directory, open './dictionaries/html-symbol-entities/entities.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Dictionary Error with (public-licenses) Error: ENOENT: no such file or directory, open './dictionaries/public-licenses/public-licenses.txt.gz'
Errors:
README.md:105:127   - Unknown word (passed)         -- to resolve the IDs passed in the implementation
README.md:105:279   - Unknown word (also)           -- on `Faction`, which also ensures implements the
README.md:105:284   - Unknown word (ensures)        -- Faction`, which also ensures implements the `nodeInterface
README.md:105:32    - Unknown word (construct)      -- nodeDefinitions` to construct the `Node` interface
README.md:105:399   - Unknown word (returned)       -- using the `nodeField` returned by `nodeDefinitions
README.md:107:5     - Unknown word (Mutations)      -- ### Mutations
README.md:109:44    - Unknown word (mutations)      -- provided for building mutations with single inputs and
README.md:10:74     - Unknown word (needed)         -- js implementation is needed to provide context for
README.md:10:84     - Unknown word (provide)        -- implementation is needed to provide context for this library
README.md:10:9      - Unknown word (understanding)  -- A basic understanding of GraphQL and of the
README.md:111:150   - Unknown word (performing)     -- to the output fields, performing the mutation along the
README.md:111:174   - Unknown word (along)          -- performing the mutation along the way. It then creates
README.md:111:22    - Unknown word (Mutation)       -- `mutationWithClientMutationId` takes a name, input
README.md:117:10    - Unknown word (Introduce)      -- name: 'IntroduceShip',
README.md:120:27    - Unknown word (Null)           -- type: new GraphQLNonNull(GraphQLString),
README.md:12:4      - Unknown word (overview)       -- An overview of GraphQL in general
README.md:136:15    - Unknown word (Payload)        -- mutateAndGetPayload: ({ shipName, factionId
README.md:136:3     - Unknown word (mutate)         -- mutateAndGetPayload: ({ shipName
README.md:14:17     - Unknown word (designed)       -- This library is designed to work with the [GraphQL
README.md:153:5     - Unknown word (introduce)      -- introduceShip: shipMutation,
README.md:158:147   - Unknown word (question)       -- Faction` and the `Ship` in question. `mutateAndGetPayload
README.md:158:184   - Unknown word (gets)           -- mutateAndGetPayload` then gets an object with a property
README.md:158:237   - Unknown word (performs)       -- for each input field, performs the mutation by constructing
README.md:158:262   - Unknown word (constructing)   -- performs the mutation by constructing the new ship, then returns
README.md:158:325   - Unknown word (resolved)       -- object that will be resolved by the output fields
README.md:162:4     - Unknown word (Contributing)   -- ## Contributing
README.md:164:50    - Unknown word (installed)      -- ensure dependencies are installed by running:
README.md:164:7     - Unknown word (cloning)        -- After cloning this repo, ensure dependencie
README.md:16:20     - Unknown word (functionality)  -- An overview of the functionality that a Relay-compliant
README.md:16:232    - Unknown word (That)           -- https://relay.dev/). That overview describes a
README.md:16:246    - Unknown word (describes)      -- dev/). That overview describes a simple set of examples
README.md:16:258    - Unknown word (simple)         -- overview describes a simple set of examples that
README.md:16:34     - Unknown word (that)           -- of the functionality that a Relay-compliant GraphQL
README.md:16:356    - Unknown word (started)        -- repository. A good way to get started with this repository
README.md:16:431    - Unknown word (corresponding)  -- documentation and the corresponding tests in this library
README.md:16:467    - Unknown word (together)       -- tests in this library together.
README.md:170:151   - Unknown word (safety)         -- typescriptlang.org/) for type safety. Widely consumable JavaScript
README.md:170:159   - Unknown word (Widely)         -- org/) for type safety. Widely consumable JavaScript
README.md:170:166   - Unknown word (consumable)     -- type safety. Widely consumable JavaScript can be produced
README.md:170:17    - Unknown word (written)        -- This library is written in ES6 and uses [Babel
README.md:170:195   - Unknown word (produced)       -- consumable JavaScript can be produced by running:
README.md:176:52    - Unknown word (require)        -- you may `import` or `require()` directly from node
README.md:178:46    - Unknown word (evaluated)      -- full test suite can be evaluated by running:
README.md:178:7     - Unknown word (developing)     -- After developing, the full test suite
README.md:184:4     - Unknown word (Opening)        -- ## Opening a PR
README.md:186:13    - Unknown word (welcome)        -- We actively welcome pull requests. Learn
README.md:186:36    - Unknown word (Learn)          -- welcome pull requests. Learn how to [contribute]
README.md:186:4     - Unknown word (actively)       -- We actively welcome pull requests
README.md:188:171   - Unknown word (before)         -- membership.graphql.org) before making a contribution
README.md:188:178   - Unknown word (making)         -- graphql.org) before making a contribution. You
README.md:188:187   - Unknown word (contribution)   -- org) before making a contribution. You only need to do
README.md:188:210   - Unknown word (need)           -- contribution. You only need to do this one time
README.md:188:250   - Unknown word (signed)         -- time, and it can be signed by [individual contributors
README.md:188:261   - Unknown word (individual)     -- it can be signed by [individual contributors](https
README.md:188:272   - Unknown word (contributors)   -- signed by [individual contributors](https://individual
README.md:188:31    - Unknown word (Easy)           -- repository is managed by EasyCLA. Project participants
README.md:188:345   - Unknown word (employers)      -- graphql.org/) or their [employers](https://corporate-spec
README.md:188:48    - Unknown word (participants)   -- by EasyCLA. Project participants must sign the free
README.md:18:4      - Unknown word (Using)          -- ## Using Relay Library for GraphQL
README.md:190:114   - Unknown word (still)          -- block the merge if we still need a membership agreement
README.md:190:17    - Unknown word (signature)      -- To initiate the signature process please open
README.md:190:52    - Unknown word (against)        -- process please open a PR against this repo. The EasyCLA
README.md:192:110   - Unknown word (have)           -- membership). If you have issues, please email
README.md:192:115   - Unknown word (issues)         -- membership). If you have issues, please email [operations
README.md:192:36    - Unknown word (here)           -- detailed information here](https://github.com
README.md:192:9     - Unknown word (find)           -- You can find [detailed information
README.md:194:162   - Unknown word (consider)       -- community, please also consider membership in the [GraphQL
README.md:194:17    - Unknown word (benefits)       -- If your company benefits from GraphQL and you
README.md:194:4     - Unknown word (your)           -- If your company benefits from
README.md:194:47    - Unknown word (would)          -- from GraphQL and you would like to provide essential
README.md:194:69    - Unknown word (essential)      -- would like to provide essential financial support for
README.md:198:13    - Unknown word (tracked)        -- Changes are tracked as [GitHub releases
README.md:198:32    - Unknown word (releases)       -- are tracked as [GitHub releases](https://github.com
README.md:1:3       - Unknown word (Relay)      -- # Relay Library for GraphQL
README.md:1:9       - Unknown word (Library)    -- # Relay Library for GraphQL.js
README.md:202:26    - Unknown word (licensed)       -- graphql-relay-js is [MIT licensed](./LICENSE).
README.md:26:127    - Unknown word (simplify)       -- functions can be used to simplify the creation of Relay
README.md:26:85     - Unknown word (provided)       -- graphql/graphql-js), the provided library functions can
README.md:30:1      - Unknown word (Helper)         -- Helper functions are provided
README.md:30:136    - Unknown word (returning)      -- resolve` method for fields returning those types.
README.md:30:146    - Unknown word (those)          -- for fields returning those types.
README.md:30:35     - Unknown word (both)           -- functions are provided for both building the GraphQL
README.md:32:109    - Unknown word (supports)       -- connection type that supports bidirectional pagination
README.md:32:118    - Unknown word (bidirectional)  -- connection type that supports bidirectional pagination.
README.md:32:132    - Unknown word (pagination)     -- supports bidirectional pagination.
README.md:32:20     - Unknown word (returns)        -- - `connectionArgs` returns the arguments that fields
README.md:32:32     - Unknown word (arguments)      -- connectionArgs` returns the arguments that fields should provide
README.md:32:74     - Unknown word (they)           -- should provide when they return a connection
README.md:34:4      - Unknown word (backward)       -- - `backwardConnectionArgs` returns
README.md:35:74     - Unknown word (edge)           -- and its associated `edgeType`, given a node type
README.md:35:85     - Unknown word (given)          -- associated `edgeType`, given a node type.
README.md:36:105    - Unknown word (does)           -- from `connectionArgs`, does pagination and filtering
README.md:36:125    - Unknown word (filtering)      -- does pagination and filtering, and returns an object
README.md:36:171    - Unknown word (expected)       -- object in the shape expected by a `connectionType
README.md:36:30     - Unknown word (helper)         -- connectionFromArray` is a helper method that takes an
README.md:36:49     - Unknown word (takes)          -- a helper method that takes an array and the arguments
README.md:37:18     - Unknown word (Promised)       -- - `connectionFromPromisedArray` is similar to
README.md:37:36     - Unknown word (similar)        -- nnectionFromPromisedArray` is similar to `connectionFromArray
README.md:37:98     - Unknown word (resolves)       -- takes a promise that resolves to an array, and returns
README.md:38:129    - Unknown word (mutation)       -- cursor for use in the mutation payload.
README.md:38:138    - Unknown word (payload)        -- use in the mutation payload.
README.md:38:4      - Unknown word (cursor)         -- - `cursorForObjectInConnection
README.md:39:12     - Unknown word (Cursor)         -- - `offsetToCursor` takes the index of
README.md:39:4      - Unknown word (offset)         -- - `offsetToCursor` takes the index
README.md:39:82     - Unknown word (opaque)         -- array and returns an opaque cursor for use in the
README.md:3:11      - Unknown word (library)    -- This is a library to allow the easy creation
README.md:3:145     - Unknown word (implementation) -- graphql-js) reference implementation of a GraphQL server
README.md:3:32      - Unknown word (easy)       -- library to allow the easy creation of Relay-compliant
README.md:3:55      - Unknown word (compliant)  -- easy creation of Relay-compliant servers using the [GraphQL
README.md:3:73      - Unknown word (using)      -- Relay-compliant servers using the [GraphQL.js](https
README.md:40:12     - Unknown word (Offset)         -- - `cursorToOffset` takes an opaque cursor
README.md:42:21     - Unknown word (these)          -- An example usage of these methods from the [test
README.md:42:4      - Unknown word (example)        -- An example usage of these methods
README.md:45:23     - Unknown word (Ship)           -- var { connectionType: ShipConnection } = connectionDefin
README.md:46:13     - Unknown word (ship)           -- nodeType: shipType,
README.md:48:5      - Unknown word (faction)        -- var factionType = new GraphQLObjectType
README.md:49:10     - Unknown word (Faction)        -- name: 'Faction',
README.md:51:5      - Unknown word (ships)          -- ships: {
README.md:64:12     - Unknown word (adding)         -- This shows adding a `ships` field to the
README.md:64:166    - Unknown word (adds)           -- the connection type, adds `connectionArgs` as
README.md:64:263    - Unknown word (passing)        -- resolve function by passing the array of ships and
README.md:64:6      - Unknown word (shows)          -- This shows adding a `ships` field
README.md:66:12     - Unknown word (Identification) -- ### Object Identification
README.md:68:109    - Unknown word (around)         -- implementing global IDs around local IDs.
README.md:70:219    - Unknown word (determine)      -- to an object, and to determine the type of a given
README.md:71:113    - Unknown word (among)          -- global ID" that is unique among all types.
README.md:73:19     - Unknown word (creates)        -- - `globalIdField` creates the configuration for
README.md:74:10     - Unknown word (Identifying)    -- - `pluralIdentifyingRootField` creates a
README.md:74:112    - Unknown word (maps)           -- like a username) and maps them to their corresponding
README.md:74:117    - Unknown word (them)           -- a username) and maps them to their corresponding
README.md:74:125    - Unknown word (their)          -- username) and maps them to their corresponding objects
README.md:74:4      - Unknown word (plural)         -- - `pluralIdentifyingRootField
README.md:74:91     - Unknown word (like)           -- non-ID identifiers (like a username) and maps
README.md:8:12      - Unknown word (Started)        -- ## Getting Started
README.md:8:4       - Unknown word (Getting)        -- ## Getting Started
cspell.json:10:22     - Unknown word (spelling)   -- // Excluded from spelling check
cspell.json:10:8      - Unknown word (Excluded)   -- // Excluded from spelling check
cspell.json:11:6      - Unknown word (cspell)     -- "cspell.json",
cspell.json:17:6      - Unknown word (arrayconnection) -- "arrayconnection",
cspell.json:18:6      - Unknown word (unbase)          -- "unbase",
cspell.json:19:6      - Unknown word (unbased)         -- "unbased",
cspell.json:21:29     - Unknown word (inside)          -- Different words used inside tests
cspell.json:21:8      - Unknown word (Different)       -- // Different words used inside tests
cspell.json:23:6      - Unknown word (corellian)       -- "corellian",
cspell.json:24:6      - Unknown word (dschafer)        -- "dschafer",
cspell.json:25:6      - Unknown word (leebyron)        -- "leebyron",
cspell.json:26:6      - Unknown word (schrockn)        -- "schrockn",
cspell.json:27:6      - Unknown word (Ghvd)            -- "Ghvd",
cspell.json:28:6      - Unknown word (Glvbjox)         -- "Glvbjox",
cspell.json:29:6      - Unknown word (Glvbjoy)         -- "Glvbjoy",
cspell.json:30:6      - Unknown word (Gxlczog)         -- "Gxlczog",
cspell.json:31:6      - Unknown word (Nlcjox)          -- "Nlcjox",
cspell.json:32:6      - Unknown word (Nlcjoy)          -- "Nlcjoy",
cspell.json:33:6      - Unknown word (Xljb)            -- "Xljb",
cspell.json:35:14     - Unknown word (contribute)      -- // TODO: contribute upstream
cspell.json:38:21     - Unknown word (below)           -- // TODO: remove below words
cspell.json:40:6      - Unknown word (QLID)            -- "QLID" // GraphQLID
cspell.json:4:34      - Unknown word (please)     -- Copied from '.gitignore', please keep it in sync.
cspell.json:4:41      - Unknown word (keep)       -- .gitignore', please keep it in sync.
cspell.json:4:8       - Unknown word (Copied)     -- // Copied from '.gitignore', please
package.json:15:8      - Unknown word (Effects)    -- "sideEffects": false,
package.json:32:55     - Unknown word (testonly)   -- run check && npm run testonly && npm run prettier
package.json:33:27     - Unknown word (warnings)   -- lint": "eslint --max-warnings 0 .",
package.json:34:21     - Unknown word (pretty)     -- "check": "tsc --pretty",
package.json:35:26     - Unknown word (full)       -- testonly": "mocha --full-trace src/**/__tests
package.json:36:15     - Unknown word (cover)      -- "testonly:cover": "nyc npm run testonly
package.json:37:42     - Unknown word (different)  -- prettier --write --list-different .",
package.json:4:67      - Unknown word (supporting) -- a graphql-js server supporting react-relay.",
resources/build.js:114:52    - Unknown word (spec)       -- does not match semver spec: ' + version);
resources/build.js:121:36    - Unknown word (precedence) -- experimental-*` take precedence over `alpha`, `beta
resources/build.js:62:44     - Unknown word (Unexpected) -- types === undefined, 'Unexpected "types" in package.json
resources/build.js:66:43     - Unknown word (exactly)    -- typesVersions" should have exactly one key.',
resources/build.js:68:12     - Unknown word (revisit)    -- // TODO: revisit once TS implements https
resources/build.js:72:8      - Unknown word (Provoke)    -- // Provoke syntax error to show
resources/build.js:91:5      - Unknown word (babelrc)    -- babelrc: false,
resources/gen-changelog.js:112:33    - Unknown word (Unreleased)  -- changelog = `## ${tag || 'Unreleased'} (${date})\n`;
resources/gen-changelog.js:116:19    - Unknown word (Fold)        -- const shouldFold = config.fold && prs
resources/gen-changelog.js:121:51    - Unknown word (were)        -- summary> ${prs.length} PRs were merged </summary>\n
resources/gen-changelog.js:121:56    - Unknown word (merged)      -- prs.length} PRs were merged </summary>\n\n`;
resources/gen-changelog.js:12:8      - Unknown word (breaking)   -- 'PR: breaking change 💥': {
resources/gen-changelog.js:138:24    - Unknown word (Committers)  -- changelog += `\n#### Committers: ${committers.length
resources/gen-changelog.js:139:14    - Unknown word (committer)   -- for (const committer of committers) {
resources/gen-changelog.js:13:15     - Unknown word (Breaking)   -- section: 'Breaking Change 💥',
resources/gen-changelog.js:152:23    - Unknown word (bearer)      -- Authorization: 'bearer ' + GH_TOKEN,
resources/gen-changelog.js:169:21    - Unknown word (responded)   -- `GitHub responded with ${res.statusCode
resources/gen-changelog.js:23:5      - Unknown word (fold)       -- fold: true,
resources/gen-changelog.js:25:8      - Unknown word (polish)     -- 'PR: polish 💅': {
resources/gen-changelog.js:26:15     - Unknown word (Polish)     -- section: 'Polish 💅',
resources/gen-changelog.js:301:20    - Unknown word (batches)     -- // Split pr into batches of 50 to prevent timeouts
resources/gen-changelog.js:301:45    - Unknown word (timeouts)    -- batches of 50 to prevent timeouts
resources/gen-changelog.js:41:18     - Unknown word (Must)       -- console.error('Must provide GH_TOKEN as
resources/gen-changelog.js:55:18     - Unknown word (Cannot)     -- console.error('Cannot extract organization
resources/gen-changelog.js:87:9      - Unknown word (committers) -- const committersByLogin = {};
resources/gen-changelog.js:99:17     - Unknown word (conflicting) -- `PR has conflicting labels: ${labels.join
resources/utils.js:90:9      - Unknown word (formatted)  -- const formatted = prettier.format(body
src/__testUtils__/__tests__/dedent-test.ts:110:19    - Unknown word (John)       -- const name = 'John';
src/__testUtils__/__tests__/dedent-test.ts:111:11    - Unknown word (surname)    -- const surname = 'Doe';
src/__testUtils__/__tests__/dedent-test.ts:37:19     - Unknown word (fourth)     -- fourth
src/__testUtils__/__tests__/dedent-test.ts:47:39     - Unknown word (fault)      -- String = "wi\th de\fault"): String
src/__testUtils__/__tests__/dedent-test.ts:68:36     - Unknown word (newlines)   -- leading and trailing newlines', () => {
src/__testUtils__/__tests__/dedent-test.ts:7:30      - Unknown word (typical)    -- removes indentation in typical usage', () => {
src/__testUtils__/__tests__/dedent-test.ts:7:7       - Unknown word (removes)    -- it('removes indentation in typical
src/__testUtils__/dedent.ts:19:54     - Unknown word (trims)      -- indentation and also trims string.
src/__testUtils__/dedent.ts:2:9       - Unknown word (trimmed)    -- const trimmedStr = string
src/__testUtils__/dedent.ts:6:27      - Unknown word (removing)   -- fixes indentation by removing leading spaces and tabs
src/__tests__/starWarsConnection-test.ts:107:32    - Unknown word (Millennium) -- node: { name: 'Millennium Falcon' },
src/__tests__/starWarsConnection-test.ts:107:43    - Unknown word (Falcon)     -- { name: 'Millennium Falcon' },
src/__tests__/starWarsConnection-test.ts:149:7     - Unknown word (identifies) -- it('identifies the end of the list
src/__tests__/starWarsConnection-test.ts:14:13     - Unknown word (edges)      -- edges {
src/__tests__/starWarsConnection-test.ts:154:19    - Unknown word (Ships)      -- originalShips: ships(first: 2) {
src/__tests__/starWarsConnection-test.ts:164:11    - Unknown word (more)       -- moreShips: ships(first:
src/__tests__/starWarsConnection-test.ts:5:14      - Unknown word (Wars)       -- import { StarWarsSchema as schema } from
src/__tests__/starWarsConnection-test.ts:8:37      - Unknown word (rebels)     -- the first ship of the rebels', () => {
src/__tests__/starWarsConnection-test.ts:8:7       - Unknown word (fetches)    -- it('fetches the first ship of the
src/__tests__/starWarsData.ts:19:12     - Unknown word (technically) -- // Yeah, technically it's Corellian. But
src/__tests__/starWarsData.ts:19:29     - Unknown word (Corellian)   -- Yeah, technically it's Corellian. But it flew in the
src/__tests__/starWarsData.ts:19:47     - Unknown word (flew)        -- s Corellian. But it flew in the service of the
src/__tests__/starWarsData.ts:19:6      - Unknown word (Yeah)       -- // Yeah, technically it's Corellian
src/__tests__/starWarsData.ts:20:17     - Unknown word (purposes)    -- // so for the purposes of this demo it's a
src/__tests__/starWarsData.ts:20:46     - Unknown word (rebel)       -- of this demo it's a rebel ship.
src/__tests__/starWarsData.ts:23:25     - Unknown word (Fighter)     -- id: '6', name: 'TIE Fighter' },
src/__tests__/starWarsData.ts:24:25     - Unknown word (Interceptor) -- id: '7', name: 'TIE Interceptor' },
src/__tests__/starWarsData.ts:2:9       - Unknown word (defines)    -- * This defines a basic set of data
src/__tests__/starWarsData.ts:40:7      - Unknown word (empire)      -- const empire: Faction = {
src/__tests__/starWarsData.ts:42:10     - Unknown word (Galactic)    -- name: 'Galactic Empire',
src/__tests__/starWarsData.ts:42:19     - Unknown word (Empire)      -- name: 'Galactic Empire',
src/__tests__/starWarsData.ts:46:10     - Unknown word (Factions)    -- const allFactions: Array<Faction> = [rebels
src/__tests__/starWarsData.ts:4:22      - Unknown word (coded)      -- * This data is hard coded for the sake of the
src/__tests__/starWarsData.ts:4:36      - Unknown word (sake)       -- is hard coded for the sake of the demo, but you
src/__tests__/starWarsData.ts:4:68      - Unknown word (imagine)    -- demo, but you could imagine
src/__tests__/starWarsData.ts:5:4       - Unknown word (fetching)   -- * fetching this data from a backend
src/__tests__/starWarsData.ts:5:46      - Unknown word (rather)     -- from a backend service rather than from hardcoded
src/__tests__/starWarsData.ts:6:27      - Unknown word (complex)    -- JSON objects in a more complex demo.
src/__tests__/starWarsData.ts:70:20     - Unknown word (Rebels)      -- export function getRebels(): Faction {
src/__tests__/starWarsMutation-test.ts:8:7       - Unknown word (mutates)    -- it('mutates the data set', () =
src/__tests__/starWarsObjectIdentification-test.ts:7:28      - Unknown word (identification) -- describe('Star Wars object identification', () => {
src/__tests__/starWarsSchema.ts:133:41    - Unknown word (saga)         -- ship in the Star Wars saga',
src/__tests__/starWarsSchema.ts:224:31    - Unknown word (implicitly)   -- creates these two types implicitly:
src/__tests__/starWarsSchema.ts:268:32    - Unknown word (writes)       -- point into performing writes in our schema.
src/__tests__/starWarsSchema.ts:283:38    - Unknown word (whose)        -- construct our schema (whose starting query type
src/__tests__/starWarsSchema.ts:283:44    - Unknown word (starting)     -- construct our schema (whose starting query type is the query
src/__tests__/starWarsSchema.ts:284:20    - Unknown word (above)        -- * type we defined above) and export it.
src/__tests__/starWarsSchema.ts:29:49     - Unknown word (demonstrate) -- end test, designed to demonstrate the various
src/__tests__/starWarsSchema.ts:29:65     - Unknown word (various)     -- designed to demonstrate the various
src/__tests__/starWarsSchema.ts:32:27     - Unknown word (readers)     -- is recommended that readers of this test be familiar
src/__tests__/starWarsSchema.ts:32:51     - Unknown word (familiar)    -- readers of this test be familiar with
src/__tests__/starWarsSchema.ts:33:58     - Unknown word (skips)       -- first, as this test skips
src/__tests__/starWarsSchema.ts:34:13     - Unknown word (basics)      -- * over the basics covered there in favor
src/__tests__/starWarsSchema.ts:34:20     - Unknown word (covered)     -- * over the basics covered there in favor of illustratin
src/__tests__/starWarsSchema.ts:34:28     - Unknown word (there)       -- over the basics covered there in favor of illustrating
src/__tests__/starWarsSchema.ts:34:37     - Unknown word (favor)       -- basics covered there in favor of illustrating the
src/__tests__/starWarsSchema.ts:34:46     - Unknown word (illustrating) -- covered there in favor of illustrating the
src/__tests__/starWarsSchema.ts:35:64     - Unknown word (illustrate)   -- test is designed to illustrate.
src/__tests__/starWarsSchema.ts:35:8      - Unknown word (aspects)      -- * key aspects of the Relay spec that
src/__tests__/starWarsSchema.ts:38:4      - Unknown word (factions)     -- * factions and ships in the original
src/__tests__/starWarsSchema.ts:38:49     - Unknown word (trilogy)      -- the original Star Wars trilogy.
src/__tests__/starWarsSchema.ts:40:27     - Unknown word (spoilers)     -- NOTE: This may contain spoilers for the original Star
src/connection/__tests__/arrayConnection-test.ts:276:33    - Unknown word (cursors)    -- returns all elements if cursors are invalid', () =>
src/connection/__tests__/arrayConnection-test.ts:28:19     - Unknown word (slicing)    -- describe('basic slicing', () => {
src/connection/__tests__/arrayConnection-test.ts:301:16    - Unknown word (Edges)      -- const allEdges = {
src/connection/__tests__/arrayConnection-test.ts:390:20    - Unknown word (just)       -- it('works with a just-right array slice',
src/connection/__tests__/arrayConnection-test.ts:413:21    - Unknown word (oversized)  -- it('works with an oversized array slice ("left"
src/connection/__tests__/arrayConnection-test.ts:42:20     - Unknown word (smaller)    -- it('respects a smaller first', () => {
src/connection/__tests__/arrayConnection-test.ts:42:9      - Unknown word (respects)   -- it('respects a smaller first', (
src/connection/__tests__/arrayConnection-test.ts:459:49    - Unknown word (sides)      -- oversized array slice (both sides)', () => {
src/connection/__tests__/arrayConnection-test.ts:482:21    - Unknown word (undersized) -- it('works with an undersized array slice ("left"
src/connection/__tests__/arrayConnection-test.ts:55:21     - Unknown word (overly)     -- it('respects an overly large first', () =>
src/connection/__tests__/connection-test.ts:134:13    - Unknown word (Friends)    -- query FriendsQuery {
src/connection/__tests__/connection-test.ts:184:17    - Unknown word (correct)    -- it('generates correct types', () => {
src/connection/__tests__/connection-test.ts:184:7     - Unknown word (generates)  -- it('generates correct types', ()
src/connection/__tests__/connection-test.ts:193:49    - Unknown word (come)       -- items in the list that come after the specified
src/connection/__tests__/connection-test.ts:231:22    - Unknown word (about)      -- """Information about pagination in a connection
src/connection/__tests__/connection-test.ts:233:17    - Unknown word (paginating) -- """When paginating forwards, are there
src/connection/__tests__/connection-test.ts:25:18     - Unknown word (friends)    -- { name: 'Dan', friends: [1, 2, 3, 4] },
src/connection/__tests__/connection-test.ts:26:12     - Unknown word (Nick)       -- { name: 'Nick', friends: [0, 2, 3
src/connection/__tests__/connection-test.ts:39:13     - Unknown word (friend)     -- type: friendConnection,
src/connection/__tests__/connection-test.ts:57:10     - Unknown word (Friend)     -- name: 'Friend',
src/connection/__tests__/connection-test.ts:63:23     - Unknown word (Yesterday)  -- resolve: () => 'Yesterday',
src/connection/arrayConnection.ts:137:4     - Unknown word (Extracts)    -- * Extracts the offset from the
src/connection/arrayConnection.ts:16:58     - Unknown word (offsets)    -- GraphQL. It uses array offsets as pagination,
src/connection/arrayConnection.ts:30:52     - Unknown word (promised)   -- ectionFromArray` that takes a promised array, and returns a
src/connection/arrayConnection.ts:41:19     - Unknown word (subset)     -- * Given a slice (subset) of an array, returns
src/connection/arrayConnection.ts:44:62     - Unknown word (intended)   -- connectionFromArray`, but is intended for use
src/connection/arrayConnection.ts:45:20     - Unknown word (know)       -- * cases where you know the cardinality of the
src/connection/arrayConnection.ts:45:29     - Unknown word (cardinality) -- cases where you know the cardinality of the connection, consider
src/connection/arrayConnection.ts:46:23     - Unknown word (entire)      -- to materialize the entire array, and instead wish
src/connection/arrayConnection.ts:46:41     - Unknown word (instead)     -- the entire array, and instead wish pass in a slice
src/connection/arrayConnection.ts:46:49     - Unknown word (wish)        -- entire array, and instead wish pass in a slice of the
src/connection/arrayConnection.ts:46:7      - Unknown word (materialize) -- * to materialize the entire array, and
src/connection/arrayConnection.ts:86:9      - Unknown word (supplied)    -- // If supplied slice is too large,
src/connection/connection.ts:139:26    - Unknown word (exposed)     -- type designed to be exposed as a `Connection` over
src/connection/connection.ts:21:44     - Unknown word (appropriate) -- GraphQLFieldConfigArgumentMap appropriate to include on a field
src/connection/connection.ts:69:11     - Unknown word (describing)  -- * A type describing the arguments a connection
src/connection/connection.ts:69:55     - Unknown word (receives)    -- arguments a connection field receives in GraphQL.
src/index.ts:38:31     - Unknown word (identifying) -- for creating plural identifying root fields
src/mutation/__tests__/mutation-test.ts:144:17    - Unknown word (because)    -- /* FIXME fail because of this https://github
src/mutation/__tests__/mutation-test.ts:145:25    - Unknown word (handles)    -- it.only('JS specific: handles `then` as field name
src/mutation/__tests__/mutation-test.ts:19:10     - Unknown word (dummy)      -- function dummyResolve() {
src/mutation/__tests__/mutation-test.ts:244:43    - Unknown word (classes)    -- mutations returning custom classes', () => {
src/mutation/__tests__/mutation-test.ts:282:11    - Unknown word (deprecation) -- const deprecationReason = 'Just because
src/mutation/__tests__/mutation-test.ts:282:32    - Unknown word (Just)        -- deprecationReason = 'Just because';
src/mutation/__tests__/mutation-test.ts:53:11     - Unknown word (wrapper)    -- const wrapperType = new GraphQLObjectType
src/mutation/__tests__/mutation-test.ts:54:14     - Unknown word (Wrapper)    -- name: 'WrapperType',
src/mutation/__tests__/mutation-test.ts:92:16     - Unknown word (thunks)     -- it('supports thunks as input and output
src/mutation/mutation.ts:100:103   - Unknown word (somehow)       -- pass clientMutationId somehow. Maybe in future we
src/mutation/mutation.ts:100:142   - Unknown word (better)        -- future we figure out better solution satisfying
src/mutation/mutation.ts:100:158   - Unknown word (satisfying)    -- out better solution satisfying all our test cases.
src/mutation/mutation.ts:100:46    - Unknown word (idea)          -- error FIXME It's bad idea to mutate data but we
src/mutation/mutation.ts:28:29     - Unknown word (automatically) -- this will be provided automatically.
src/mutation/mutation.ts:48:50     - Unknown word (described)     -- LFieldConfig for the mutation described by the
src/mutation/mutation.ts:94:29     - Unknown word (inject)        -- return payload.then(injectClientMutationId);
src/node/__tests__/global-test.ts:125:7     - Unknown word (gives)      -- it('gives different IDs', ()
src/node/__tests__/global-test.ts:148:7     - Unknown word (allows)     -- it('allows to refetch the IDs'
src/node/__tests__/global-test.ts:22:12     - Unknown word (Jane)       -- name: 'Jane Smith',
src/node/__tests__/global-test.ts:26:7      - Unknown word (photo)      -- const photoData = [
src/node/__tests__/global-test.ts:54:13     - Unknown word (Photo)      -- case 'Photo':
src/node/__tests__/global-test.ts:68:39     - Unknown word (reached)    -- ignore else (Can't be reached)
src/node/__tests__/node-test.ts:100:13    - Unknown word (Ability)    -- describe('Ability to refetch', () =>
src/node/__tests__/node-test.ts:133:33    - Unknown word (photos)     -- gets the correct ID for photos', () => {
src/node/__tests__/node-test.ts:265:9     - Unknown word (ignores)    -- it('ignores photo fragments on user
src/node/__tests__/node-test.ts:300:17    - Unknown word (nulls)      -- it('returns nulls for bad IDs', () =>
src/node/__tests__/node-test.ts:336:12    - Unknown word (Fetches)    -- """Fetches an object given its
src/node/__tests__/nodeAsync-test.ts:56:55     - Unknown word (fetcher)    -- fields with async object fetcher', () => {
src/node/__tests__/plural-test.ts:31:5      - Unknown word (usernames)  -- usernames: pluralIdentifyingRootField
src/node/node.ts:110:73    - Unknown word (fetched)     -- type-specific ID is fetched
src/node/node.ts:111:17    - Unknown word (Fetcher)     -- * by calling idFetcher on the object, or if
src/node/node.ts:111:63    - Unknown word (accessing)   -- if not provided, by accessing the `id`
src/node/node.ts:24:44     - Unknown word (concrete)   -- underlying object to the concrete GraphQLObjectType it
src/node/node.ts:25:4      - Unknown word (corresponds) -- * corresponds to, constructs a `Node
src/node/node.ts:29:4      - Unknown word (handled)     -- * handled with the `isTypeOf`
src/node/node.ts:88:4      - Unknown word (Takes)       -- * Takes a type name and an ID
src/utils/__tests__/base64-test.ts:10:7      - Unknown word (converts)   -- it('converts from utf-8 to base6
src/utils/base64.ts:63:10     - Unknown word (Previously) -- * Previously we used Node's API for
src/utils/base64.ts:65:15     - Unknown word (silently)   -- * That silently ignored incorrect input
src/utils/base64.ts:66:26     - Unknown word (behaviour)  -- * Let's keep this behaviour for a time being and
src/utils/base64.ts:66:47     - Unknown word (being)      -- behaviour for a time being and hopefully fix it
src/utils/base64.ts:66:57     - Unknown word (hopefully)  -- for a time being and hopefully fix it in the future
tsconfig.json:10:11     - Unknown word (Consistent) -- "forceConsistentCasingInFileNames": true
tsconfig.json:10:21     - Unknown word (Casing)     -- "forceConsistentCasingInFileNames": true
tsconfig.json:9:6       - Unknown word (isolated)   -- "isolatedModules": true,
