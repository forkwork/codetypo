---
Repository: graphql/graphql-relay-js
Url: https://github.com/graphql/graphql-relay-js.git
Args: '["**/*.*"]'
Summary:
  files: 31
  filesWithIssues: 30
  issues: 996
  errors: 4
Errors:
  - Dictionary Error with (en_us)
  - Dictionary Error with (filetypes)
  - Dictionary Error with (html-symbol-entities)
  - Dictionary Error with (public-licenses)

issues:
  - "CONTRIBUTING.md:1:4         Publishing      U       ## Publishing"
  - "CONTRIBUTING.md:3:14        uses            U       This package uses a custom publish flow"
  - "CONTRIBUTING.md:5:3         IMPORTANT       U       **IMPORTANT**: Do not push directly"
  - "CONTRIBUTING.md:5:28        directly        U       IMPORTANT**: Do not push directly to `main` - every change"
  - "CONTRIBUTING.md:5:49        every           U       directly to `main` - every change must go through"
  - "CONTRIBUTING.md:5:62        must            U       main` - every change must go through a PR"
  - "CONTRIBUTING.md:6:1         otherwise       U       otherwise changelog generation"
  - "CONTRIBUTING.md:6:21        generation      U       otherwise changelog generation will fail."
  - "CONTRIBUTING.md:6:32        will            U       changelog generation will fail."
  - "CONTRIBUTING.md:10:33       major           U       patch # or minor or major"
  - "CONTRIBUTING.md:11:12       follow          U       git push --follow-tags"
  - "CONTRIBUTING.md:17:17       installing      U       Then test it by installing `graphql-relay@next"
  - "CONTRIBUTING.md:17:37       relay           U       installing `graphql-relay@next` from npm..."
  - "CONTRIBUTING.md:19:5        good            U       All good? Publish:"
  - "CONTRIBUTING.md:22:48       latest          U       relay@VERSION_NUMBER latest"
  - "CONTRIBUTING.md:25:1        Finally         U       Finally generate the CHANGELOG"
  - "cspell.json:4:8         Copied              U       // Copied from '.gitignore', please"
  - "cspell.json:4:34        please              U       Copied from '.gitignore', please keep it in sync."
  - "cspell.json:4:41        keep                U       .gitignore', please keep it in sync."
  - "cspell.json:10:8        Excluded            U       // Excluded from spelling check"
  - "cspell.json:10:22       spelling            U       // Excluded from spelling check"
  - "cspell.json:11:6        cspell              U       \"cspell.json\","
  - "cspell.json:17:6        arrayconnection     U       \"arrayconnection\","
  - "cspell.json:18:6        unbase              U       \"unbase\","
  - "cspell.json:19:6        unbased             U       \"unbased\","
  - "cspell.json:21:8        Different           U       // Different words used inside tests"
  - "cspell.json:21:29       inside              U       Different words used inside tests"
  - "cspell.json:23:6        corellian           U       \"corellian\","
  - "cspell.json:24:6        dschafer            U       \"dschafer\","
  - "cspell.json:25:6        leebyron            U       \"leebyron\","
  - "cspell.json:26:6        schrockn            U       \"schrockn\","
  - "cspell.json:27:6        Ghvd                U       \"Ghvd\","
  - "cspell.json:28:6        Glvbjox             U       \"Glvbjox\","
  - "cspell.json:29:6        Glvbjoy             U       \"Glvbjoy\","
  - "cspell.json:30:6        Gxlczog             U       \"Gxlczog\","
  - "cspell.json:31:6        Nlcjox              U       \"Nlcjox\","
  - "cspell.json:32:6        Nlcjoy              U       \"Nlcjoy\","
  - "cspell.json:33:6        Xljb                U       \"Xljb\","
  - "cspell.json:35:14       contribute          U       // TODO: contribute upstream"
  - "cspell.json:38:21       below               U       // TODO: remove below words"
  - "cspell.json:40:6        QLID                U       \"QLID\" // GraphQLID"
  - "package.json:4:67           supporting      U       a graphql-js server supporting react-relay.\","
  - "package.json:15:8           Effects         U       \"sideEffects\": false,"
  - "package.json:32:55          testonly        U       run check && npm run testonly && npm run prettier"
  - "package.json:33:27          warnings        U       lint\": \"eslint --max-warnings 0 .\","
  - "package.json:34:21          pretty          U       \"check\": \"tsc --pretty\","
  - "package.json:35:26          full            U       testonly\": \"mocha --full-trace src/**/__tests"
  - "package.json:36:15          cover           U       \"testonly:cover\": \"nyc npm run testonly"
  - "package.json:37:42          different       U       prettier --write --list-different .\","
  - "README.md:1:3           Relay               U       # Relay Library for GraphQL"
  - "README.md:1:9           Library             U       # Relay Library for GraphQL.js"
  - "README.md:3:11          library             U       This is a library to allow the easy creation"
  - "README.md:3:32          easy                U       library to allow the easy creation of Relay-compliant"
  - "README.md:3:55          compliant           U       easy creation of Relay-compliant servers using the [GraphQL"
  - "README.md:3:73          using               U       Relay-compliant servers using the [GraphQL.js](https"
  - "README.md:3:145         implementation      U       graphql-js) reference implementation of a GraphQL server"
  - "README.md:8:4           Getting             U       ## Getting Started"
  - "README.md:8:12          Started             U       ## Getting Started"
  - "README.md:10:9          understanding       U       A basic understanding of GraphQL and of the"
  - "README.md:10:74         needed              U       js implementation is needed to provide context for"
  - "README.md:10:84         provide             U       implementation is needed to provide context for this library"
  - "README.md:12:4          overview            U       An overview of GraphQL in general"
  - "README.md:14:17         designed            U       This library is designed to work with the [GraphQL"
  - "README.md:16:20         functionality       U       An overview of the functionality that a Relay-compliant"
  - "README.md:16:34         that                U       of the functionality that a Relay-compliant GraphQL"
  - "README.md:16:232        That                U       https://relay.dev/). That overview describes a"
  - "README.md:16:246        describes           U       dev/). That overview describes a simple set of examples"
  - "README.md:16:258        simple              U       overview describes a simple set of examples that"
  - "README.md:16:356        started             U       repository. A good way to get started with this repository"
  - "README.md:16:431        corresponding       U       documentation and the corresponding tests in this library"
  - "README.md:16:467        together            U       tests in this library together."
  - "README.md:18:4          Using               U       ## Using Relay Library for GraphQL"
  - "README.md:26:85         provided            U       graphql/graphql-js), the provided library functions can"
  - "README.md:26:127        simplify            U       functions can be used to simplify the creation of Relay"
  - "README.md:30:1          Helper              U       Helper functions are provided"
  - "README.md:30:35         both                U       functions are provided for both building the GraphQL"
  - "README.md:30:136        returning           U       resolve` method for fields returning those types."
  - "README.md:30:146        those               U       for fields returning those types."
  - "README.md:32:20         returns             U       - `connectionArgs` returns the arguments that fields"
  - "README.md:32:32         arguments           U       connectionArgs` returns the arguments that fields should provide"
  - "README.md:32:74         they                U       should provide when they return a connection"
  - "README.md:32:109        supports            U       connection type that supports bidirectional pagination"
  - "README.md:32:118        bidirectional       U       connection type that supports bidirectional pagination."
  - "README.md:32:132        pagination          U       supports bidirectional pagination."
  - "README.md:34:4          backward            U       - `backwardConnectionArgs` returns"
  - "README.md:35:74         edge                U       and its associated `edgeType`, given a node type"
  - "README.md:35:85         given               U       associated `edgeType`, given a node type."
  - "README.md:36:30         helper              U       connectionFromArray` is a helper method that takes an"
  - "README.md:36:49         takes               U       a helper method that takes an array and the arguments"
  - "README.md:36:105        does                U       from `connectionArgs`, does pagination and filtering"
  - "README.md:36:125        filtering           U       does pagination and filtering, and returns an object"
  - "README.md:36:171        expected            U       object in the shape expected by a `connectionType"
  - "README.md:37:18         Promised            U       - `connectionFromPromisedArray` is similar to"
  - "README.md:37:36         similar             U       nnectionFromPromisedArray` is similar to `connectionFromArray"
  - "README.md:37:98         resolves            U       takes a promise that resolves to an array, and returns"
  - "README.md:38:4          cursor              U       - `cursorForObjectInConnection"
  - "README.md:38:129        mutation            U       cursor for use in the mutation payload."
  - "README.md:38:138        payload             U       use in the mutation payload."
  - "README.md:39:4          offset              U       - `offsetToCursor` takes the index"
  - "README.md:39:12         Cursor              U       - `offsetToCursor` takes the index of"
  - "README.md:39:82         opaque              U       array and returns an opaque cursor for use in the"
  - "README.md:40:12         Offset              U       - `cursorToOffset` takes an opaque cursor"
  - "README.md:42:4          example             U       An example usage of these methods"
  - "README.md:42:21         these               U       An example usage of these methods from the [test"
  - "README.md:45:23         Ship                U       var { connectionType: ShipConnection } = connectionDefin"
  - "README.md:46:13         ship                U       nodeType: shipType,"
  - "README.md:48:5          faction             U       var factionType = new GraphQLObjectType"
  - "README.md:49:10         Faction             U       name: 'Faction',"
  - "README.md:51:5          ships               U       ships: {"
  - "README.md:64:6          shows               U       This shows adding a `ships` field"
  - "README.md:64:12         adding              U       This shows adding a `ships` field to the"
  - "README.md:64:166        adds                U       the connection type, adds `connectionArgs` as"
  - "README.md:64:263        passing             U       resolve function by passing the array of ships and"
  - "README.md:66:12         Identification      U       ### Object Identification"
  - "README.md:68:109        around              U       implementing global IDs around local IDs."
  - "README.md:70:219        determine           U       to an object, and to determine the type of a given"
  - "README.md:71:113        among               U       global ID\" that is unique among all types."
  - "README.md:73:19         creates             U       - `globalIdField` creates the configuration for"
  - "README.md:74:4          plural              U       - `pluralIdentifyingRootField"
  - "README.md:74:10         Identifying         U       - `pluralIdentifyingRootField` creates a"
  - "README.md:74:91         like                U       non-ID identifiers (like a username) and maps"
  - "README.md:74:112        maps                U       like a username) and maps them to their corresponding"
  - "README.md:74:117        them                U       a username) and maps them to their corresponding"
  - "README.md:74:125        their               U       username) and maps them to their corresponding objects"
  - "README.md:105:32        construct           U       nodeDefinitions` to construct the `Node` interface"
  - "README.md:105:127       passed              U       to resolve the IDs passed in the implementation"
  - "README.md:105:279       also                U       on `Faction`, which also ensures implements the"
  - "README.md:105:284       ensures             U       Faction`, which also ensures implements the `nodeInterface"
  - "README.md:105:399       returned            U       using the `nodeField` returned by `nodeDefinitions"
  - "README.md:107:5         Mutations           U       ### Mutations"
  - "README.md:109:44        mutations           U       provided for building mutations with single inputs and"
  - "README.md:111:22        Mutation            U       `mutationWithClientMutationId` takes a name, input"
  - "README.md:111:150       performing          U       to the output fields, performing the mutation along the"
  - "README.md:111:174       along               U       performing the mutation along the way. It then creates"
  - "README.md:117:10        Introduce           U       name: 'IntroduceShip',"
  - "README.md:120:27        Null                U       type: new GraphQLNonNull(GraphQLString),"
  - "README.md:136:3         mutate              U       mutateAndGetPayload: ({ shipName"
  - "README.md:136:15        Payload             U       mutateAndGetPayload: ({ shipName, factionId"
  - "README.md:153:5         introduce           U       introduceShip: shipMutation,"
  - "README.md:158:147       question            U       Faction` and the `Ship` in question. `mutateAndGetPayload"
  - "README.md:158:184       gets                U       mutateAndGetPayload` then gets an object with a property"
  - "README.md:158:237       performs            U       for each input field, performs the mutation by constructing"
  - "README.md:158:262       constructing        U       performs the mutation by constructing the new ship, then returns"
  - "README.md:158:325       resolved            U       object that will be resolved by the output fields"
  - "README.md:162:4         Contributing        U       ## Contributing"
  - "README.md:164:7         cloning             U       After cloning this repo, ensure dependencie"
  - "README.md:164:50        installed           U       ensure dependencies are installed by running:"
  - "README.md:170:17        written             U       This library is written in ES6 and uses [Babel"
  - "README.md:170:151       safety              U       typescriptlang.org/) for type safety. Widely consumable JavaScript"
  - "README.md:170:159       Widely              U       org/) for type safety. Widely consumable JavaScript"
  - "README.md:170:166       consumable          U       type safety. Widely consumable JavaScript can be produced"
  - "README.md:170:195       produced            U       consumable JavaScript can be produced by running:"
  - "README.md:176:52        require             U       you may `import` or `require()` directly from node"
  - "README.md:178:7         developing          U       After developing, the full test suite"
  - "README.md:178:46        evaluated           U       full test suite can be evaluated by running:"
  - "README.md:184:4         Opening             U       ## Opening a PR"
  - "README.md:186:4         actively            U       We actively welcome pull requests"
  - "README.md:186:13        welcome             U       We actively welcome pull requests. Learn"
  - "README.md:186:36        Learn               U       welcome pull requests. Learn how to [contribute]"
  - "README.md:188:31        Easy                U       repository is managed by EasyCLA. Project participants"
  - "README.md:188:48        participants        U       by EasyCLA. Project participants must sign the free"
  - "README.md:188:171       before              U       membership.graphql.org) before making a contribution"
  - "README.md:188:178       making              U       graphql.org) before making a contribution. You"
  - "README.md:188:187       contribution        U       org) before making a contribution. You only need to do"
  - "README.md:188:210       need                U       contribution. You only need to do this one time"
  - "README.md:188:250       signed              U       time, and it can be signed by [individual contributors"
  - "README.md:188:261       individual          U       it can be signed by [individual contributors](https"
  - "README.md:188:272       contributors        U       signed by [individual contributors](https://individual"
  - "README.md:188:345       employers           U       graphql.org/) or their [employers](https://corporate-spec"
  - "README.md:190:17        signature           U       To initiate the signature process please open"
  - "README.md:190:52        against             U       process please open a PR against this repo. The EasyCLA"
  - "README.md:190:114       still               U       block the merge if we still need a membership agreement"
  - "README.md:192:9         find                U       You can find [detailed information"
  - "README.md:192:36        here                U       detailed information here](https://github.com"
  - "README.md:192:110       have                U       membership). If you have issues, please email"
  - "README.md:192:115       issues              U       membership). If you have issues, please email [operations"
  - "README.md:194:4         your                U       If your company benefits from"
  - "README.md:194:17        benefits            U       If your company benefits from GraphQL and you"
  - "README.md:194:47        would               U       from GraphQL and you would like to provide essential"
  - "README.md:194:69        essential           U       would like to provide essential financial support for"
  - "README.md:194:162       consider            U       community, please also consider membership in the [GraphQL"
  - "README.md:198:13        tracked             U       Changes are tracked as [GitHub releases"
  - "README.md:198:32        releases            U       are tracked as [GitHub releases](https://github.com"
  - "README.md:202:26        licensed            U       graphql-relay-js is [MIT licensed](./LICENSE)."
  - "resources/build.js:62:44        Unexpected      U       types === undefined, 'Unexpected \"types\" in package.json"
  - "resources/build.js:66:43        exactly         U       typesVersions\" should have exactly one key.',"
  - "resources/build.js:68:12        revisit         U       // TODO: revisit once TS implements https"
  - "resources/build.js:72:8         Provoke         U       // Provoke syntax error to show"
  - "resources/build.js:91:5         babelrc         U       babelrc: false,"
  - "resources/build.js:114:52       spec            U       does not match semver spec: ' + version);"
  - "resources/build.js:121:36       precedence      U       experimental-*` take precedence over `alpha`, `beta"
  - "resources/gen-changelog.js:12:8         breaking        U       'PR: breaking change 💥': {"
  - "resources/gen-changelog.js:13:15        Breaking        U       section: 'Breaking Change 💥',"
  - "resources/gen-changelog.js:23:5         fold            U       fold: true,"
  - "resources/gen-changelog.js:25:8         polish          U       'PR: polish 💅': {"
  - "resources/gen-changelog.js:26:15        Polish          U       section: 'Polish 💅',"
  - "resources/gen-changelog.js:41:18        Must            U       console.error('Must provide GH_TOKEN as"
  - "resources/gen-changelog.js:55:18        Cannot          U       console.error('Cannot extract organization"
  - "resources/gen-changelog.js:87:9         committers      U       const committersByLogin = {};"
  - "resources/gen-changelog.js:99:17        conflicting     U       `PR has conflicting labels: ${labels.join"
  - "resources/gen-changelog.js:112:33       Unreleased      U       changelog = `## ${tag || 'Unreleased'} (${date})\\n`;"
  - "resources/gen-changelog.js:116:19       Fold            U       const shouldFold = config.fold && prs"
  - "resources/gen-changelog.js:121:51       were            U       summary> ${prs.length} PRs were merged </summary>\\n"
  - "resources/gen-changelog.js:121:56       merged          U       prs.length} PRs were merged </summary>\\n\\n`;"
  - "resources/gen-changelog.js:138:24       Committers      U       changelog += `\\n#### Committers: ${committers.length"
  - "resources/gen-changelog.js:139:14       committer       U       for (const committer of committers) {"
  - "resources/gen-changelog.js:152:23       bearer          U       Authorization: 'bearer ' + GH_TOKEN,"
  - "resources/gen-changelog.js:169:21       responded       U       `GitHub responded with ${res.statusCode"
  - "resources/gen-changelog.js:301:20       batches         U       // Split pr into batches of 50 to prevent timeouts"
  - "resources/gen-changelog.js:301:45       timeouts        U       batches of 50 to prevent timeouts"
  - "resources/utils.js:90:9         formatted       U       const formatted = prettier.format(body"
  - "src/__tests__/starWarsConnection-test.ts:5:14           Wars            U       import { StarWarsSchema as schema } from"
  - "src/__tests__/starWarsConnection-test.ts:8:7            fetches         U       it('fetches the first ship of the"
  - "src/__tests__/starWarsConnection-test.ts:8:37           rebels          U       the first ship of the rebels', () => {"
  - "src/__tests__/starWarsConnection-test.ts:14:13          edges           U       edges {"
  - "src/__tests__/starWarsConnection-test.ts:107:32         Millennium      U       node: { name: 'Millennium Falcon' },"
  - "src/__tests__/starWarsConnection-test.ts:107:43         Falcon          U       { name: 'Millennium Falcon' },"
  - "src/__tests__/starWarsConnection-test.ts:149:7          identifies      U       it('identifies the end of the list"
  - "src/__tests__/starWarsConnection-test.ts:154:19         Ships           U       originalShips: ships(first: 2) {"
  - "src/__tests__/starWarsConnection-test.ts:164:11         more            U       moreShips: ships(first:"
  - "src/__tests__/starWarsData.ts:2:9           defines         U       * This defines a basic set of data"
  - "src/__tests__/starWarsData.ts:4:22          coded           U       * This data is hard coded for the sake of the"
  - "src/__tests__/starWarsData.ts:4:36          sake            U       is hard coded for the sake of the demo, but you"
  - "src/__tests__/starWarsData.ts:4:68          imagine         U       demo, but you could imagine"
  - "src/__tests__/starWarsData.ts:5:4           fetching        U       * fetching this data from a backend"
  - "src/__tests__/starWarsData.ts:5:46          rather          U       from a backend service rather than from hardcoded"
  - "src/__tests__/starWarsData.ts:6:27          complex         U       JSON objects in a more complex demo."
  - "src/__tests__/starWarsData.ts:19:6          Yeah            U       // Yeah, technically it's Corellian"
  - "src/__tests__/starWarsData.ts:19:12         technically     U       // Yeah, technically it's Corellian. But"
  - "src/__tests__/starWarsData.ts:19:29         Corellian       U       Yeah, technically it's Corellian. But it flew in the"
  - "src/__tests__/starWarsData.ts:19:47         flew            U       s Corellian. But it flew in the service of the"
  - "src/__tests__/starWarsData.ts:20:17         purposes        U       // so for the purposes of this demo it's a"
  - "src/__tests__/starWarsData.ts:20:46         rebel           U       of this demo it's a rebel ship."
  - "src/__tests__/starWarsData.ts:23:25         Fighter         U       id: '6', name: 'TIE Fighter' },"
  - "src/__tests__/starWarsData.ts:24:25         Interceptor     U       id: '7', name: 'TIE Interceptor' },"
  - "src/__tests__/starWarsData.ts:40:7          empire          U       const empire: Faction = {"
  - "src/__tests__/starWarsData.ts:42:10         Galactic        U       name: 'Galactic Empire',"
  - "src/__tests__/starWarsData.ts:42:19         Empire          U       name: 'Galactic Empire',"
  - "src/__tests__/starWarsData.ts:46:10         Factions        U       const allFactions: Array<Faction> = [rebels"
  - "src/__tests__/starWarsData.ts:70:20         Rebels          U       export function getRebels(): Faction {"
  - "src/__tests__/starWarsMutation-test.ts:8:7          mutates     U       it('mutates the data set', () ="
  - "src/__tests__/starWarsObjectIdentification-test.ts:7:28         identification      U       describe('Star Wars object identification', () => {"
  - "src/__tests__/starWarsSchema.ts:29:49       demonstrate     U       end test, designed to demonstrate the various"
  - "src/__tests__/starWarsSchema.ts:29:65       various         U       designed to demonstrate the various"
  - "src/__tests__/starWarsSchema.ts:32:27       readers         U       is recommended that readers of this test be familiar"
  - "src/__tests__/starWarsSchema.ts:32:51       familiar        U       readers of this test be familiar with"
  - "src/__tests__/starWarsSchema.ts:33:58       skips           U       first, as this test skips"
  - "src/__tests__/starWarsSchema.ts:34:13       basics          U       * over the basics covered there in favor"
  - "src/__tests__/starWarsSchema.ts:34:20       covered         U       * over the basics covered there in favor of illustratin"
  - "src/__tests__/starWarsSchema.ts:34:28       there           U       over the basics covered there in favor of illustrating"
  - "src/__tests__/starWarsSchema.ts:34:37       favor           U       basics covered there in favor of illustrating the"
  - "src/__tests__/starWarsSchema.ts:34:46       illustrating    U       covered there in favor of illustrating the"
  - "src/__tests__/starWarsSchema.ts:35:8        aspects         U       * key aspects of the Relay spec that"
  - "src/__tests__/starWarsSchema.ts:35:64       illustrate      U       test is designed to illustrate."
  - "src/__tests__/starWarsSchema.ts:38:4        factions        U       * factions and ships in the original"
  - "src/__tests__/starWarsSchema.ts:38:49       trilogy         U       the original Star Wars trilogy."
  - "src/__tests__/starWarsSchema.ts:40:27       spoilers        U       NOTE: This may contain spoilers for the original Star"
  - "src/__tests__/starWarsSchema.ts:133:41      saga            U       ship in the Star Wars saga',"
  - "src/__tests__/starWarsSchema.ts:224:31      implicitly      U       creates these two types implicitly:"
  - "src/__tests__/starWarsSchema.ts:268:32      writes          U       point into performing writes in our schema."
  - "src/__tests__/starWarsSchema.ts:283:38      whose           U       construct our schema (whose starting query type"
  - "src/__tests__/starWarsSchema.ts:283:44      starting        U       construct our schema (whose starting query type is the query"
  - "src/__tests__/starWarsSchema.ts:284:20      above           U       * type we defined above) and export it."
  - "src/__testUtils__/__tests__/dedent-test.ts:7:7          removes     U       it('removes indentation in typical"
  - "src/__testUtils__/__tests__/dedent-test.ts:7:30         typical     U       removes indentation in typical usage', () => {"
  - "src/__testUtils__/__tests__/dedent-test.ts:37:19        fourth      U       fourth"
  - "src/__testUtils__/__tests__/dedent-test.ts:47:39        fault       U       String = \"wi\\th de\\fault\"): String"
  - "src/__testUtils__/__tests__/dedent-test.ts:68:36        newlines    U       leading and trailing newlines', () => {"
  - "src/__testUtils__/__tests__/dedent-test.ts:110:19       John        U       const name = 'John';"
  - "src/__testUtils__/__tests__/dedent-test.ts:111:11       surname     U       const surname = 'Doe';"
  - "src/__testUtils__/dedent.ts:2:9         trimmed     U       const trimmedStr = string"
  - "src/__testUtils__/dedent.ts:6:27        removing    U       fixes indentation by removing leading spaces and tabs"
  - "src/__testUtils__/dedent.ts:19:54       trims       U       indentation and also trims string."
  - "src/connection/__tests__/arrayConnection-test.ts:28:19          slicing         U       describe('basic slicing', () => {"
  - "src/connection/__tests__/arrayConnection-test.ts:42:9           respects        U       it('respects a smaller first', ("
  - "src/connection/__tests__/arrayConnection-test.ts:42:20          smaller         U       it('respects a smaller first', () => {"
  - "src/connection/__tests__/arrayConnection-test.ts:55:21          overly          U       it('respects an overly large first', () =>"
  - "src/connection/__tests__/arrayConnection-test.ts:276:33         cursors         U       returns all elements if cursors are invalid', () =>"
  - "src/connection/__tests__/arrayConnection-test.ts:301:16         Edges           U       const allEdges = {"
  - "src/connection/__tests__/arrayConnection-test.ts:390:20         just            U       it('works with a just-right array slice',"
  - "src/connection/__tests__/arrayConnection-test.ts:413:21         oversized       U       it('works with an oversized array slice (\"left\""
  - "src/connection/__tests__/arrayConnection-test.ts:459:49         sides           U       oversized array slice (both sides)', () => {"
  - "src/connection/__tests__/arrayConnection-test.ts:482:21         undersized      U       it('works with an undersized array slice (\"left\""
  - "src/connection/__tests__/connection-test.ts:25:18       friends         U       { name: 'Dan', friends: [1, 2, 3, 4] },"
  - "src/connection/__tests__/connection-test.ts:26:12       Nick            U       { name: 'Nick', friends: [0, 2, 3"
  - "src/connection/__tests__/connection-test.ts:39:13       friend          U       type: friendConnection,"
  - "src/connection/__tests__/connection-test.ts:57:10       Friend          U       name: 'Friend',"
  - "src/connection/__tests__/connection-test.ts:63:23       Yesterday       U       resolve: () => 'Yesterday',"
  - "src/connection/__tests__/connection-test.ts:134:13      Friends         U       query FriendsQuery {"
  - "src/connection/__tests__/connection-test.ts:184:7       generates       U       it('generates correct types', ()"
  - "src/connection/__tests__/connection-test.ts:184:17      correct         U       it('generates correct types', () => {"
  - "src/connection/__tests__/connection-test.ts:193:49      come            U       items in the list that come after the specified"
  - "src/connection/__tests__/connection-test.ts:231:22      about           U       \"\"\"Information about pagination in a connection"
  - "src/connection/__tests__/connection-test.ts:233:17      paginating      U       \"\"\"When paginating forwards, are there"
  - "src/connection/arrayConnection.ts:16:58         offsets         U       GraphQL. It uses array offsets as pagination,"
  - "src/connection/arrayConnection.ts:30:52         promised        U       ectionFromArray` that takes a promised array, and returns a"
  - "src/connection/arrayConnection.ts:41:19         subset          U       * Given a slice (subset) of an array, returns"
  - "src/connection/arrayConnection.ts:44:62         intended        U       connectionFromArray`, but is intended for use"
  - "src/connection/arrayConnection.ts:45:20         know            U       * cases where you know the cardinality of the"
  - "src/connection/arrayConnection.ts:45:29         cardinality     U       cases where you know the cardinality of the connection, consider"
  - "src/connection/arrayConnection.ts:46:7          materialize     U       * to materialize the entire array, and"
  - "src/connection/arrayConnection.ts:46:23         entire          U       to materialize the entire array, and instead wish"
  - "src/connection/arrayConnection.ts:46:41         instead         U       the entire array, and instead wish pass in a slice"
  - "src/connection/arrayConnection.ts:46:49         wish            U       entire array, and instead wish pass in a slice of the"
  - "src/connection/arrayConnection.ts:86:9          supplied        U       // If supplied slice is too large,"
  - "src/connection/arrayConnection.ts:137:4         Extracts        U       * Extracts the offset from the"
  - "src/connection/connection.ts:21:44          appropriate     U       GraphQLFieldConfigArgumentMap appropriate to include on a field"
  - "src/connection/connection.ts:69:11          describing      U       * A type describing the arguments a connection"
  - "src/connection/connection.ts:69:55          receives        U       arguments a connection field receives in GraphQL."
  - "src/connection/connection.ts:139:26         exposed         U       type designed to be exposed as a `Connection` over"
  - "src/index.ts:38:31          identifying     U       for creating plural identifying root fields"
  - "src/mutation/__tests__/mutation-test.ts:19:10       dummy           U       function dummyResolve() {"
  - "src/mutation/__tests__/mutation-test.ts:53:11       wrapper         U       const wrapperType = new GraphQLObjectType"
  - "src/mutation/__tests__/mutation-test.ts:54:14       Wrapper         U       name: 'WrapperType',"
  - "src/mutation/__tests__/mutation-test.ts:92:16       thunks          U       it('supports thunks as input and output"
  - "src/mutation/__tests__/mutation-test.ts:144:17      because         U       /* FIXME fail because of this https://github"
  - "src/mutation/__tests__/mutation-test.ts:145:25      handles         U       it.only('JS specific: handles `then` as field name"
  - "src/mutation/__tests__/mutation-test.ts:244:43      classes         U       mutations returning custom classes', () => {"
  - "src/mutation/__tests__/mutation-test.ts:282:11      deprecation     U       const deprecationReason = 'Just because"
  - "src/mutation/__tests__/mutation-test.ts:282:32      Just            U       deprecationReason = 'Just because';"
  - "src/mutation/mutation.ts:28:29          automatically       U       this will be provided automatically."
  - "src/mutation/mutation.ts:48:50          described           U       LFieldConfig for the mutation described by the"
  - "src/mutation/mutation.ts:94:29          inject              U       return payload.then(injectClientMutationId);"
  - "src/mutation/mutation.ts:100:46         idea                U       error FIXME It's bad idea to mutate data but we"
  - "src/mutation/mutation.ts:100:103        somehow             U       pass clientMutationId somehow. Maybe in future we"
  - "src/mutation/mutation.ts:100:142        better              U       future we figure out better solution satisfying"
  - "src/mutation/mutation.ts:100:158        satisfying          U       out better solution satisfying all our test cases."
  - "src/node/__tests__/global-test.ts:22:12         Jane        U       name: 'Jane Smith',"
  - "src/node/__tests__/global-test.ts:26:7          photo       U       const photoData = ["
  - "src/node/__tests__/global-test.ts:54:13         Photo       U       case 'Photo':"
  - "src/node/__tests__/global-test.ts:68:39         reached     U       ignore else (Can't be reached)"
  - "src/node/__tests__/global-test.ts:125:7         gives       U       it('gives different IDs', ()"
  - "src/node/__tests__/global-test.ts:148:7         allows      U       it('allows to refetch the IDs'"
  - "src/node/__tests__/node-test.ts:100:13      Ability     U       describe('Ability to refetch', () =>"
  - "src/node/__tests__/node-test.ts:133:33      photos      U       gets the correct ID for photos', () => {"
  - "src/node/__tests__/node-test.ts:265:9       ignores     U       it('ignores photo fragments on user"
  - "src/node/__tests__/node-test.ts:300:17      nulls       U       it('returns nulls for bad IDs', () =>"
  - "src/node/__tests__/node-test.ts:336:12      Fetches     U       \"\"\"Fetches an object given its"
  - "src/node/__tests__/nodeAsync-test.ts:56:55          fetcher     U       fields with async object fetcher', () => {"
  - "src/node/__tests__/plural-test.ts:31:5          usernames       U       usernames: pluralIdentifyingRootField"
  - "src/node/node.ts:24:44          concrete        U       underlying object to the concrete GraphQLObjectType it"
  - "src/node/node.ts:25:4           corresponds     U       * corresponds to, constructs a `Node"
  - "src/node/node.ts:29:4           handled         U       * handled with the `isTypeOf`"
  - "src/node/node.ts:88:4           Takes           U       * Takes a type name and an ID"
  - "src/node/node.ts:110:73         fetched         U       type-specific ID is fetched"
  - "src/node/node.ts:111:17         Fetcher         U       * by calling idFetcher on the object, or if"
  - "src/node/node.ts:111:63         accessing       U       if not provided, by accessing the `id`"
  - "src/utils/__tests__/base64-test.ts:10:7         converts    U       it('converts from utf-8 to base6"
  - "src/utils/base64.ts:63:10       Previously      U       * Previously we used Node's API for"
  - "src/utils/base64.ts:65:15       silently        U       * That silently ignored incorrect input"
  - "src/utils/base64.ts:66:26       behaviour       U       * Let's keep this behaviour for a time being and"
  - "src/utils/base64.ts:66:47       being           U       behaviour for a time being and hopefully fix it"
  - "src/utils/base64.ts:66:57       hopefully       U       for a time being and hopefully fix it in the future"
  - "tsconfig.json:9:6           isolated        U       \"isolatedModules\": true,"
  - "tsconfig.json:10:11         Consistent      U       \"forceConsistentCasingInFileNames\": true"
  - "tsconfig.json:10:21         Casing          U       \"forceConsistentCasingInFileNames\": true"
